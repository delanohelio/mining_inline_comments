{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODg2NzY2", "number": 4106, "title": "[RW-3389] [RW-4125] [risk=no] Speed up user admin table load time & refresh the UI", "bodyText": "This PR makes two major changes to the user admin table:\n\n\nSwap a projection interface in for the existing entity-based DAO calls to improve performance. SQL debugging shows that a single SQL query is now being executed, instead of previously 2-3 queries per user. This should speed up SQL execution time by a significant factor. Executing against the test database, it now takes ~10-15 secs to load (instead of 40-60 secs).\n\n\nRevamp the UI to come closer to Lou's original mocks, including a horizontally-scrollable table with a fixed first column. To prevent extreme UI slow-down with many users, we limit the rows-on-screen to 50 and add client-side filtering. IMO this feels pretty snappy now.\n\n\nand one bugfix:\n\nFix the UserBypass component (it was copying values from props to state only on construction, so when the row was re-rendered with a new user, the component wasn't updated as needed).\n\nI kept the \"disable\" and \"bypass\" buttons for now to try and maintain existing functionality, though I think we'll be much better off moving all user-modifying actions into the single-user admin page rather than the table. We should work with the user admins to finalize a plan.\nScreenshot:", "createdAt": "2020-10-02T12:50:18Z", "url": "https://github.com/all-of-us/workbench/pull/4106", "merged": true, "mergeCommit": {"oid": "9e16623a9e4648fb49ee239384036afc9a508dc1"}, "closed": true, "closedAt": "2021-02-10T20:42:44Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOmMc1AFqTUwMTEzMTY3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd42SVxABqjQzMTY3NTI5OTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMTMxNjcz", "url": "https://github.com/all-of-us/workbench/pull/4106#pullrequestreview-501131673", "createdAt": "2020-10-02T13:25:08Z", "commit": {"oid": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyNTowOFrOHbtgQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo0MTowM1rOHbuEvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxOTEzNw==", "bodyText": "I tend to prefer method  references  where possible, i.e. profileMapper::adminViewToModel. additionally,  you can  declare List<AdminTableUser> adminViewsToModels(Collection<DbUser> dbUsers); in the mapper and use that. The code isn't as pretty, but it uses a pre-allocated list for the result.", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r498819137", "createdAt": "2020-10-02T13:25:08Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -459,51 +455,9 @@ public void validateNewProfile(Profile profile) throws BadRequestException {\n     validateProfileForCorrectness(dummyProfile, profile);\n   }\n \n-  // Get all the profiles. Best we can do without surgery on the entity classes is to do one query\n-  // per table and join them in code.\n-  public List<Profile> listAllProfiles() {\n-    final Set<DbUser> usersHeavy = userService.findAllUsersWithAuthoritiesAndPageVisits();\n-    final Map<Long, VerifiedInstitutionalAffiliation> userIdToAffiliationModel =\n-        StreamSupport.stream(verifiedInstitutionalAffiliationDao.findAll().spliterator(), false)\n-            .collect(\n-                ImmutableMap.toImmutableMap(\n-                    (DbVerifiedInstitutionalAffiliation a) -> a.getUser().getUserId(),\n-                    verifiedInstitutionalAffiliationMapper::dbToModel));\n-\n-    // A user may have signed the TOS many times. Pick only the latest.\n-    final Multimap<Long, DbUserTermsOfService> userIdToTosRecords =\n-        Multimaps.index(userTermsOfServiceDao.findAll(), DbUserTermsOfService::getUserId);\n-\n-    final Map<Long, DbUserTermsOfService> userIdToMostRecentTos =\n-        userIdToTosRecords.asMap().entrySet().stream()\n-            .collect(\n-                ImmutableMap.toImmutableMap(\n-                    Entry::getKey,\n-                    e ->\n-                        e.getValue().stream()\n-                            .max(Comparator.comparing(DbUserTermsOfService::getAgreementTime))\n-                            .orElse(\n-                                null))); // not reachable since  Multimaps.index() will always give\n-    // a non-empty value set\n-\n-    // The cached free tier usage aka total cost for each user, by ID\n-    final Map<Long, Double> userIdToFreeTierUsage = freeTierBillingService.getUserIdToTotalCost();\n-\n-    final Map<Long, Double> userIdToQuota =\n-        usersHeavy.stream()\n-            .collect(\n-                ImmutableMap.toImmutableMap(\n-                    DbUser::getUserId, freeTierBillingService::getUserFreeTierDollarLimit));\n-\n-    return usersHeavy.stream()\n-        .map(\n-            dbUser ->\n-                profileMapper.toModel(\n-                    dbUser,\n-                    userIdToAffiliationModel.get(dbUser.getUserId()),\n-                    userIdToMostRecentTos.get(dbUser.getUserId()),\n-                    userIdToFreeTierUsage.get(dbUser.getUserId()),\n-                    userIdToQuota.get(dbUser.getUserId())))\n+  public List<AdminTableUser> listAllProfiles() {\n+    return userDao.getAdminTableUsers().stream()\n+        .map(dbUser -> profileMapper.adminViewToModel(dbUser))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyMTM5NQ==", "bodyText": "asiide: I was fooling around with BigQuery yesterday and came up with what I thought was a reasonable way to break down the monolith of columns in the user table. It might make sense for our API as well (particularly if types like this could reuse things like the compliance section), though you'd have to add mapping annotations in MapStruct.\nAnother advantage would be reusing descriptions for fields and keeping types in sync (e.g. if we changed userId to int32).", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r498821395", "createdAt": "2020-10-02T13:28:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5157,6 +5157,77 @@ definitions:\n       jwt:\n         type: string\n         description: the encoded/signed JWT\n+  AdminTableUser:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyMjM0Ng==", "bodyText": "Maybe AdminTableUserListResponse? There will likely be other places we list users.", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r498822346", "createdAt": "2020-10-02T13:30:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5665,12 +5736,12 @@ definitions:\n   UserListResponse:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyMzgwMg==", "bodyText": "nit: what's the difference between isLoaded and contentLoaded? Maybe standardizing on one would help.", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r498823802", "createdAt": "2020-10-02T13:33:00Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -28,60 +34,58 @@ const styles = reactStyles({\n const LockoutButton: React.FunctionComponent<{disabled: boolean,\n   profileDisabled: boolean, onClick: Function}> =\n   ({disabled, profileDisabled, onClick}) => {\n-    return <Button type='secondaryLight' onClick={onClick} disabled={disabled}>\n+    // We reduce the button height so it fits better within a table row.\n+    return <Button type='secondaryLight' style={{height: '40px'}} onClick={onClick} disabled={disabled}>\n       {disabled ? <Spinner size={25}/> : (profileDisabled ? 'Enable' : 'Disable')}\n     </Button>;\n   };\n \n+interface Props {\n+  profileState: {\n+    profile: Profile, reload: Function, updateCache: Function\n+  };\n+}\n+\n+interface State {\n+  contentLoaded: boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNjY5MQ==", "bodyText": "Some of these icons might make sense, depending on size restrictions.", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r498826691", "createdAt": "2020-10-02T13:38:07Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -133,50 +137,173 @@ export const AdminUsers = withUserProfile()(class extends React.Component<\n     return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({\n-      ...p,\n-      name: <a onClick={() => navigate(['admin', 'users', usernameWithoutDomain(p.username)])}>\n-        {p.familyName + ', ' + p.givenName}\n+  getAccessModuleString(user: AdminTableUser, key: string) {\n+    const completionTime = user[key + 'CompletionTime'];\n+    const bypassTime = user[key + 'BypassTime'];\n+    if (completionTime) {\n+      return '\u2714';\n+    } else if (bypassTime) {\n+      return 'B';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyNzk0Mw==", "bodyText": "nit: disabled/enabled and inactive/active are kind of separate concepts (or at least Active is overloaded to mean \"has been active in the app recently\".", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r498827943", "createdAt": "2020-10-02T13:40:15Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -133,50 +137,173 @@ export const AdminUsers = withUserProfile()(class extends React.Component<\n     return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({\n-      ...p,\n-      name: <a onClick={() => navigate(['admin', 'users', usernameWithoutDomain(p.username)])}>\n-        {p.familyName + ', ' + p.givenName}\n+  getAccessModuleString(user: AdminTableUser, key: string) {\n+    const completionTime = user[key + 'CompletionTime'];\n+    const bypassTime = user[key + 'BypassTime'];\n+    if (completionTime) {\n+      return '\u2714';\n+    } else if (bypassTime) {\n+      return 'B';\n+    } else {\n+      return '';\n+    }\n+  }\n+\n+  convertProfilesToFields(users: AdminTableUser[]) {\n+    return users.map(user => ({\n+      audit: <a\n+        href={`/admin/user-audit/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        link\n+      </a>,\n+      bypass: <AdminUserBypass user={user}/>,\n+      complianceTraining: this.getAccessModuleString(user, 'complianceTraining'),\n+      contactEmail: user.contactEmail,\n+      dataUseAgreement: this.getAccessModuleString(user, 'dataUseAgreement'),\n+      eraCommons: this.getAccessModuleString(user, 'eraCommons'),\n+      firstRegistrationCompletionTime: moment.unix(user.firstRegistrationCompletionTime / 1000).format('lll'),\n+      firstRegistrationCompletionTimestamp: user.firstRegistrationCompletionTime,\n+      firstSignInTime: moment.unix(user.firstSignInTime / 1000).format('lll'),\n+      firstSignInTimetsamp: user.firstSignInTime,\n+      institutionName: user.institutionName,\n+      name: <a\n+        href={`/admin/users/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        {user.familyName + ', ' + user.givenName}\n       </a>,\n-      betaAccessRequestTime: this.convertDate(p.betaAccessRequestTime),\n-      bypass: <AdminUserBypass profile={p}/>, disabled: p.disabled.toString(),\n-      userLockout: <LockoutButton disabled={this.state.reloadingProfile === p}\n-        profileDisabled={p.disabled}\n-        onClick={() => this.updateUserDisabledStatus(!p.disabled, p)}/>,\n-      audit: <a href={`/admin/user-audit/${usernameWithoutDomain(p.username)}`}>\ud83d\udd75\ufe0f</a>\n+      nameText: user.familyName + ' ' + user.givenName,\n+      status: user.disabled ? 'Disabled' : 'Active',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgyODQ3Nw==", "bodyText": "I'm not following if  this method does anything.", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r498828477", "createdAt": "2020-10-02T13:41:03Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -133,50 +137,173 @@ export const AdminUsers = withUserProfile()(class extends React.Component<\n     return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({\n-      ...p,\n-      name: <a onClick={() => navigate(['admin', 'users', usernameWithoutDomain(p.username)])}>\n-        {p.familyName + ', ' + p.givenName}\n+  getAccessModuleString(user: AdminTableUser, key: string) {\n+    const completionTime = user[key + 'CompletionTime'];\n+    const bypassTime = user[key + 'BypassTime'];\n+    if (completionTime) {\n+      return '\u2714';\n+    } else if (bypassTime) {\n+      return 'B';\n+    } else {\n+      return '';\n+    }\n+  }\n+\n+  convertProfilesToFields(users: AdminTableUser[]) {\n+    return users.map(user => ({\n+      audit: <a\n+        href={`/admin/user-audit/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        link\n+      </a>,\n+      bypass: <AdminUserBypass user={user}/>,\n+      complianceTraining: this.getAccessModuleString(user, 'complianceTraining'),\n+      contactEmail: user.contactEmail,\n+      dataUseAgreement: this.getAccessModuleString(user, 'dataUseAgreement'),\n+      eraCommons: this.getAccessModuleString(user, 'eraCommons'),\n+      firstRegistrationCompletionTime: moment.unix(user.firstRegistrationCompletionTime / 1000).format('lll'),\n+      firstRegistrationCompletionTimestamp: user.firstRegistrationCompletionTime,\n+      firstSignInTime: moment.unix(user.firstSignInTime / 1000).format('lll'),\n+      firstSignInTimetsamp: user.firstSignInTime,\n+      institutionName: user.institutionName,\n+      name: <a\n+        href={`/admin/users/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        {user.familyName + ', ' + user.givenName}\n       </a>,\n-      betaAccessRequestTime: this.convertDate(p.betaAccessRequestTime),\n-      bypass: <AdminUserBypass profile={p}/>, disabled: p.disabled.toString(),\n-      userLockout: <LockoutButton disabled={this.state.reloadingProfile === p}\n-        profileDisabled={p.disabled}\n-        onClick={() => this.updateUserDisabledStatus(!p.disabled, p)}/>,\n-      audit: <a href={`/admin/user-audit/${usernameWithoutDomain(p.username)}`}>\ud83d\udd75\ufe0f</a>\n+      nameText: user.familyName + ' ' + user.givenName,\n+      status: user.disabled ? 'Disabled' : 'Active',\n+      twoFactorAuth: this.getAccessModuleString(user, 'twoFactorAuth'),\n+      username: user.username,\n+      userLockout: <LockoutButton disabled={false}\n+        profileDisabled={user.disabled}\n+        onClick={() => this.updateUserDisabledStatus(!user.disabled, user.username)}/>,\n     }));\n   }\n \n+  filter(query: string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7"}, "originalPosition": 174}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/5708ac02b65a113a8d7ae8f74dfc25bf925b0ba7", "committedDate": "2020-10-02T03:56:15Z", "message": "Small tweaks"}, "afterCommit": {"oid": "1c9f1da6cddc20d443ea588dd5c0de3156ad2c46", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/1c9f1da6cddc20d443ea588dd5c0de3156ad2c46", "committedDate": "2021-01-18T21:32:11Z", "message": "Small tweaks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMzk0MDQ4", "url": "https://github.com/all-of-us/workbench/pull/4106#pullrequestreview-571394048", "createdAt": "2021-01-19T16:00:37Z", "commit": {"oid": "23fe00bbed35eb8a670ec1a8a1c27b59cdf9b83b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNjowMDozN1rOIWVRzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxOTo0NDozMFrOIWedGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI4ODIwNg==", "bodyText": "Oh interesting!  I didn't know you could set fields using this approach.\n\ud83d\udc4d to projection interface generally.", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560288206", "createdAt": "2021-01-19T16:00:37Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserDao.java", "diffHunk": "@@ -72,4 +73,75 @@\n \n     Long getUserCount();\n   }\n+\n+  // Note: setter methods are included only where necessary for testing. See ProfileServiceTest.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23fe00bbed35eb8a670ec1a8a1c27b59cdf9b83b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQxOTU1MQ==", "bodyText": "nit: please split to individual lines", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560419551", "createdAt": "2021-01-19T19:11:52Z", "author": {"login": "jmthibault79"}, "path": "ui/src/testing/stubs/profile-api-stub.ts", "diffHunk": "@@ -1,6 +1,6 @@\n import {\n   AccessBypassRequest,\n-  AccessModule, CreateAccountRequest,\n+  AccessModule, AdminTableUser, CreateAccountRequest,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d286266de79687da5f45d341aff273d3f5184b3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQyNjQwNw==", "bodyText": "I'd like a name that indicates that this is the list of bypassed modules for the user - maybe getBypassedModules() ?", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560426407", "createdAt": "2021-01-19T19:23:52Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-user-bypass.tsx", "diffHunk": "@@ -22,48 +22,61 @@ const styles = reactStyles({\n   }\n });\n \n-export class AdminUserBypass extends React.Component<\n-    { profile: Profile},\n-    { initialModules: AccessModule[], selectedModules: AccessModule[],\n-      open: boolean} > {\n+interface Props {\n+  user: AdminTableUser;\n+}\n+\n+interface State {\n+  selectedModules: AccessModule[];\n+  open: boolean;\n+}\n+\n+const getUserModuleList = (user: AdminTableUser): Array<AccessModule> => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d286266de79687da5f45d341aff273d3f5184b3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQyNjcxMw==", "bodyText": "cleaner design, thanks", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560426713", "createdAt": "2021-01-19T19:24:26Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-user-bypass.tsx", "diffHunk": "@@ -22,48 +22,61 @@ const styles = reactStyles({\n   }\n });\n \n-export class AdminUserBypass extends React.Component<\n-    { profile: Profile},\n-    { initialModules: AccessModule[], selectedModules: AccessModule[],\n-      open: boolean} > {\n+interface Props {\n+  user: AdminTableUser;\n+}\n+\n+interface State {\n+  selectedModules: AccessModule[];\n+  open: boolean;\n+}\n+\n+const getUserModuleList = (user: AdminTableUser): Array<AccessModule> => {\n+  return [\n+    ...(user.betaAccessBypassTime ? [AccessModule.BETAACCESS] : []),\n+    ...(user.complianceTrainingBypassTime ? [AccessModule.COMPLIANCETRAINING] : []),\n+    ...(user.dataUseAgreementBypassTime ? [AccessModule.DATAUSEAGREEMENT] : []),\n+    ...(user.eraCommonsBypassTime ? [AccessModule.ERACOMMONS] : []),\n+    ...(user.twoFactorAuthBypassTime ? [AccessModule.TWOFACTORAUTH] : []),\n+  ];\n+};\n \n-  constructor(props) {\n+export class AdminUserBypass extends React.Component<Props, State> {\n+  constructor(props: Props) {\n     super(props);\n-    const {profile} = props;\n-    const initialModules = [\n-      ...(profile.betaAccessBypassTime ? [AccessModule.BETAACCESS] : []),\n-      ...(profile.complianceTrainingBypassTime ? [AccessModule.COMPLIANCETRAINING] : []),\n-      ...(profile.dataUseAgreementBypassTime ? [AccessModule.DATAUSEAGREEMENT] : []),\n-      ...(profile.eraCommonsBypassTime ? [AccessModule.ERACOMMONS] : []),\n-      ...(profile.twoFactorAuthBypassTime ? [AccessModule.TWOFACTORAUTH] : []),\n-    ];\n+    const {user} = props;\n     this.state = {\n       open: false,\n-      initialModules: initialModules,\n-      selectedModules: initialModules\n+      selectedModules: getUserModuleList(user)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d286266de79687da5f45d341aff273d3f5184b3"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQzNDc5NQ==", "bodyText": "What happens when this value is not present?", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560434795", "createdAt": "2021-01-19T19:38:07Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -133,50 +140,176 @@ export const AdminUsers = withUserProfile()(class extends React.Component<\n     return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({\n-      ...p,\n-      name: <a onClick={() => navigate(['admin', 'users', usernameWithoutDomain(p.username)])}>\n-        {p.familyName + ', ' + p.givenName}\n+  getAccessModuleString(user: AdminTableUser, key: string): (string|React.ReactElement) {\n+    const completionTime = user[key + 'CompletionTime'];\n+    const bypassTime = user[key + 'BypassTime'];\n+\n+    if (completionTime) {\n+      const completionTimeString = moment(completionTime).format('lll');\n+      return <TooltipTrigger content={`Completed at ${completionTimeString}`}>\n+        <span>\u2714</span>\n+      </TooltipTrigger>;\n+    } else if (bypassTime) {\n+      const bypassTimeString = moment(bypassTime).format('lll');\n+      return <TooltipTrigger content={`Bypassed at ${bypassTimeString}`}>\n+        <span>B</span>\n+      </TooltipTrigger>;\n+    } else {\n+      return '';\n+    }\n+  }\n+\n+  convertProfilesToFields(users: AdminTableUser[]) {\n+    return users.map(user => ({\n+      audit: <a\n+        href={`/admin/user-audit/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        link\n+      </a>,\n+      bypass: <AdminUserBypass user={{...user}}/>,\n+      complianceTraining: this.getAccessModuleString(user, 'complianceTraining'),\n+      contactEmail: user.contactEmail,\n+      dataUseAgreement: this.getAccessModuleString(user, 'dataUseAgreement'),\n+      eraCommons: this.getAccessModuleString(user, 'eraCommons'),\n+      firstRegistrationCompletionTime: moment.unix(user.firstRegistrationCompletionTime / 1000).format('lll'),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d286266de79687da5f45d341aff273d3f5184b3"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQzNjA5Ng==", "bodyText": "nit: can probably remove disabled={false}", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560436096", "createdAt": "2021-01-19T19:40:13Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -133,50 +140,176 @@ export const AdminUsers = withUserProfile()(class extends React.Component<\n     return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({\n-      ...p,\n-      name: <a onClick={() => navigate(['admin', 'users', usernameWithoutDomain(p.username)])}>\n-        {p.familyName + ', ' + p.givenName}\n+  getAccessModuleString(user: AdminTableUser, key: string): (string|React.ReactElement) {\n+    const completionTime = user[key + 'CompletionTime'];\n+    const bypassTime = user[key + 'BypassTime'];\n+\n+    if (completionTime) {\n+      const completionTimeString = moment(completionTime).format('lll');\n+      return <TooltipTrigger content={`Completed at ${completionTimeString}`}>\n+        <span>\u2714</span>\n+      </TooltipTrigger>;\n+    } else if (bypassTime) {\n+      const bypassTimeString = moment(bypassTime).format('lll');\n+      return <TooltipTrigger content={`Bypassed at ${bypassTimeString}`}>\n+        <span>B</span>\n+      </TooltipTrigger>;\n+    } else {\n+      return '';\n+    }\n+  }\n+\n+  convertProfilesToFields(users: AdminTableUser[]) {\n+    return users.map(user => ({\n+      audit: <a\n+        href={`/admin/user-audit/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        link\n+      </a>,\n+      bypass: <AdminUserBypass user={{...user}}/>,\n+      complianceTraining: this.getAccessModuleString(user, 'complianceTraining'),\n+      contactEmail: user.contactEmail,\n+      dataUseAgreement: this.getAccessModuleString(user, 'dataUseAgreement'),\n+      eraCommons: this.getAccessModuleString(user, 'eraCommons'),\n+      firstRegistrationCompletionTime: moment.unix(user.firstRegistrationCompletionTime / 1000).format('lll'),\n+      firstRegistrationCompletionTimestamp: user.firstRegistrationCompletionTime,\n+      firstSignInTime: moment.unix(user.firstSignInTime / 1000).format('lll'),\n+      firstSignInTimetsamp: user.firstSignInTime,\n+      institutionName: user.institutionName,\n+      name: <a\n+        href={`/admin/users/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        {user.familyName + ', ' + user.givenName}\n       </a>,\n-      betaAccessRequestTime: this.convertDate(p.betaAccessRequestTime),\n-      bypass: <AdminUserBypass profile={p}/>, disabled: p.disabled.toString(),\n-      userLockout: <LockoutButton disabled={this.state.reloadingProfile === p}\n-        profileDisabled={p.disabled}\n-        onClick={() => this.updateUserDisabledStatus(!p.disabled, p)}/>,\n-      audit: <a href={`/admin/user-audit/${usernameWithoutDomain(p.username)}`}>\ud83d\udd75\ufe0f</a>\n+      nameText: user.familyName + ' ' + user.givenName,\n+      status: user.disabled ? 'Disabled' : 'Active',\n+      twoFactorAuth: this.getAccessModuleString(user, 'twoFactorAuth'),\n+      username: user.username,\n+      userLockout: <LockoutButton disabled={false}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d286266de79687da5f45d341aff273d3f5184b3"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDQzODU1NQ==", "bodyText": "I'm not familiar with how filtering works in a DataTable.  What happens to Columns like this with neither \"exclude\" nor \"match\" ?\nReally excellent feature addition btw", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560438555", "createdAt": "2021-01-19T19:44:30Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -133,50 +140,176 @@ export const AdminUsers = withUserProfile()(class extends React.Component<\n     return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({\n-      ...p,\n-      name: <a onClick={() => navigate(['admin', 'users', usernameWithoutDomain(p.username)])}>\n-        {p.familyName + ', ' + p.givenName}\n+  getAccessModuleString(user: AdminTableUser, key: string): (string|React.ReactElement) {\n+    const completionTime = user[key + 'CompletionTime'];\n+    const bypassTime = user[key + 'BypassTime'];\n+\n+    if (completionTime) {\n+      const completionTimeString = moment(completionTime).format('lll');\n+      return <TooltipTrigger content={`Completed at ${completionTimeString}`}>\n+        <span>\u2714</span>\n+      </TooltipTrigger>;\n+    } else if (bypassTime) {\n+      const bypassTimeString = moment(bypassTime).format('lll');\n+      return <TooltipTrigger content={`Bypassed at ${bypassTimeString}`}>\n+        <span>B</span>\n+      </TooltipTrigger>;\n+    } else {\n+      return '';\n+    }\n+  }\n+\n+  convertProfilesToFields(users: AdminTableUser[]) {\n+    return users.map(user => ({\n+      audit: <a\n+        href={`/admin/user-audit/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        link\n+      </a>,\n+      bypass: <AdminUserBypass user={{...user}}/>,\n+      complianceTraining: this.getAccessModuleString(user, 'complianceTraining'),\n+      contactEmail: user.contactEmail,\n+      dataUseAgreement: this.getAccessModuleString(user, 'dataUseAgreement'),\n+      eraCommons: this.getAccessModuleString(user, 'eraCommons'),\n+      firstRegistrationCompletionTime: moment.unix(user.firstRegistrationCompletionTime / 1000).format('lll'),\n+      firstRegistrationCompletionTimestamp: user.firstRegistrationCompletionTime,\n+      firstSignInTime: moment.unix(user.firstSignInTime / 1000).format('lll'),\n+      firstSignInTimetsamp: user.firstSignInTime,\n+      institutionName: user.institutionName,\n+      name: <a\n+        href={`/admin/users/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        {user.familyName + ', ' + user.givenName}\n       </a>,\n-      betaAccessRequestTime: this.convertDate(p.betaAccessRequestTime),\n-      bypass: <AdminUserBypass profile={p}/>, disabled: p.disabled.toString(),\n-      userLockout: <LockoutButton disabled={this.state.reloadingProfile === p}\n-        profileDisabled={p.disabled}\n-        onClick={() => this.updateUserDisabledStatus(!p.disabled, p)}/>,\n-      audit: <a href={`/admin/user-audit/${usernameWithoutDomain(p.username)}`}>\ud83d\udd75\ufe0f</a>\n+      nameText: user.familyName + ' ' + user.givenName,\n+      status: user.disabled ? 'Disabled' : 'Active',\n+      twoFactorAuth: this.getAccessModuleString(user, 'twoFactorAuth'),\n+      username: user.username,\n+      userLockout: <LockoutButton disabled={false}\n+        profileDisabled={user.disabled}\n+        onClick={() => this.updateUserDisabledStatus(!user.disabled, user.username)}/>,\n     }));\n   }\n \n   render() {\n-    const {contentLoaded, profiles} = this.state;\n-    const {enableBetaAccess} = serverConfigStore.getValue();\n+    const {contentLoaded, filter, loading, users} = this.state;\n     return <div style={{position: 'relative'}}>\n       <h2>User Admin Table</h2>\n-      {contentLoaded ?\n-        <DataTable value={this.convertProfilesToFields(profiles)} style={styles.tableStyle}>\n-          <Column field='disabled' header='Disabled' bodyStyle={{...styles.colStyle, width: '7%'}}\n-                  headerStyle={{width: '7%'}}/>\n-          <Column field='name' header='Name' bodyStyle={{...styles.colStyle, width: '15%'}}\n-                  headerStyle={{width: '15%'}} sortable={true}/>\n-          <Column field='username' header='User Name' bodyStyle={{...styles.colStyle, width: '20%'}}\n-                  headerStyle={{width: '20%'}} sortable={true}/>\n-          <Column field='contactEmail' header='Contact Email' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '19%'}} headerStyle={{width: '19%'}}/>\n-          {enableBetaAccess && <Column field='betaAccessRequestTime' header='Beta Access Time Requested' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '15%'}} headerStyle={{width: '15%'}}/>}\n-          <Column field='userLockout' header='User Lockout'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-          <Column field='bypass' header='Bypass'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-          <Column field='audit' header='Audit'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-        </DataTable> :\n-        <div>\n-          Loading user profiles...\n-          <SpinnerOverlay\n-            overrideStylesOverlay={{alignItems: 'flex-start', marginTop: '2rem'}}/>\n-        </div>}\n+      {loading &&\n+        <SpinnerOverlay opacity={0.6}\n+                        overrideStylesOverlay={{alignItems: 'flex-start', marginTop: '2rem'}}/>\n+      }\n+      {!contentLoaded && <div>Loading user profiles...</div>}\n+      {contentLoaded && <div>\n+        <input data-test-id='search'\n+               style={{marginBottom: '.5em', width: '300px'}}\n+               type='text'\n+               placeholder='Search'\n+               onChange={e => this.debounceUpdateFilter(e.target.value)}\n+        />\n+        <DataTable value={this.convertProfilesToFields(users)}\n+                   frozenWidth='200px'\n+                   globalFilter={filter}\n+                   paginator={true}\n+                   rows={50}\n+                   scrollable\n+                   sortField={'firstRegistrationCompletionTimestamp'}\n+                   style={styles.tableStyle}>\n+          <Column field='name'\n+                  bodyStyle={{...styles.colStyle}}\n+                  filterField={'nameText'}\n+                  filterMatchMode={'contains'}\n+                  frozen={true}\n+                  header='Name'\n+                  headerStyle={{...styles.colStyle, width: '200px'}}\n+                  sortable={true}\n+                  sortField={'nameText'}\n+          />\n+          <Column field='status'\n+                  bodyStyle={{...styles.colStyle}}\n+                  excludeGlobalFilter={true}\n+                  header='Status'\n+                  headerStyle={{...styles.colStyle, width: '80px'}}\n+          />\n+          <Column field='institutionName'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d286266de79687da5f45d341aff273d3f5184b3"}, "originalPosition": 259}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcxMzgwNzcw", "url": "https://github.com/all-of-us/workbench/pull/4106#pullrequestreview-571380770", "createdAt": "2021-01-19T15:48:12Z", "commit": {"oid": "23fe00bbed35eb8a670ec1a8a1c27b59cdf9b83b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNTo0ODoxMlrOIWUrDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNTo1MDowN1rOIWUxCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI3ODI4NA==", "bodyText": "Note: most of the changes in this file are related to fixing the RW-4125 bug (re-sorting admin table breaks bypass actions). I had wanted to split this out into its own PR, but the change from Profile --> AdminTableUser made it hard to cleanly extract. Accept my apologies in advance :)", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560278284", "createdAt": "2021-01-19T15:48:12Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/admin/admin-user-bypass.tsx", "diffHunk": "@@ -22,48 +22,61 @@ const styles = reactStyles({\n   }\n });\n \n-export class AdminUserBypass extends React.Component<\n-    { profile: Profile},\n-    { initialModules: AccessModule[], selectedModules: AccessModule[],\n-      open: boolean} > {\n+interface Props {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23fe00bbed35eb8a670ec1a8a1c27b59cdf9b83b"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI3ODk5OQ==", "bodyText": "This is the crux of the fix in this file. Whenever a new user is passed in via props, we want to reset the \"default\" set of access modules selected. This causes the pop-up to show the correct set of \"active\" modules corresponding to the user.", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560278999", "createdAt": "2021-01-19T15:49:02Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/admin/admin-user-bypass.tsx", "diffHunk": "@@ -22,48 +22,61 @@ const styles = reactStyles({\n   }\n });\n \n-export class AdminUserBypass extends React.Component<\n-    { profile: Profile},\n-    { initialModules: AccessModule[], selectedModules: AccessModule[],\n-      open: boolean} > {\n+interface Props {\n+  user: AdminTableUser;\n+}\n+\n+interface State {\n+  selectedModules: AccessModule[];\n+  open: boolean;\n+}\n+\n+const getUserModuleList = (user: AdminTableUser): Array<AccessModule> => {\n+  return [\n+    ...(user.betaAccessBypassTime ? [AccessModule.BETAACCESS] : []),\n+    ...(user.complianceTrainingBypassTime ? [AccessModule.COMPLIANCETRAINING] : []),\n+    ...(user.dataUseAgreementBypassTime ? [AccessModule.DATAUSEAGREEMENT] : []),\n+    ...(user.eraCommonsBypassTime ? [AccessModule.ERACOMMONS] : []),\n+    ...(user.twoFactorAuthBypassTime ? [AccessModule.TWOFACTORAUTH] : []),\n+  ];\n+};\n \n-  constructor(props) {\n+export class AdminUserBypass extends React.Component<Props, State> {\n+  constructor(props: Props) {\n     super(props);\n-    const {profile} = props;\n-    const initialModules = [\n-      ...(profile.betaAccessBypassTime ? [AccessModule.BETAACCESS] : []),\n-      ...(profile.complianceTrainingBypassTime ? [AccessModule.COMPLIANCETRAINING] : []),\n-      ...(profile.dataUseAgreementBypassTime ? [AccessModule.DATAUSEAGREEMENT] : []),\n-      ...(profile.eraCommonsBypassTime ? [AccessModule.ERACOMMONS] : []),\n-      ...(profile.twoFactorAuthBypassTime ? [AccessModule.TWOFACTORAUTH] : []),\n-    ];\n+    const {user} = props;\n     this.state = {\n       open: false,\n-      initialModules: initialModules,\n-      selectedModules: initialModules\n+      selectedModules: getUserModuleList(user)\n     };\n   }\n \n   cancel() {\n-    const {initialModules} = this.state;\n-    this.setState({selectedModules: initialModules});\n+    this.setState({selectedModules: getUserModuleList(this.props.user)});\n   }\n \n   save() {\n-    const {initialModules, selectedModules} = this.state;\n-    const {profile} = this.props;\n-    const changedModules = fp.xor(initialModules, selectedModules);\n+    const {selectedModules} = this.state;\n+    const {user} = this.props;\n+    const changedModules = fp.xor(getUserModuleList(user), selectedModules);\n     changedModules.forEach(async module => {\n       await profileApi()\n-        .bypassAccessRequirement(profile.userId,\n+        .bypassAccessRequirement(user.userId,\n           {isBypassed: selectedModules.includes(module), moduleName: module});\n     });\n-\n-    this.setState({initialModules: selectedModules});\n   }\n \n   hasEdited(): boolean {\n-    return fp.xor(this.state.selectedModules, this.state.initialModules).length !== 0;\n+    return fp.xor(this.state.selectedModules, getUserModuleList(this.props.user)).length !== 0;\n+  }\n+\n+  componentDidUpdate(prevProps: Props) {\n+  // Reset the \"default\" set of selected modules if the rendered user changes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23fe00bbed35eb8a670ec1a8a1c27b59cdf9b83b"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDI3OTgxOQ==", "bodyText": "n.b. this is how we achieve the \"horizontally scrollable but with fixed column\" effect. There's a bit of manual column width-setting required to make sure the fixed 200px lines up correctly.", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r560279819", "createdAt": "2021-01-19T15:50:07Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -133,50 +140,176 @@ export const AdminUsers = withUserProfile()(class extends React.Component<\n     return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({\n-      ...p,\n-      name: <a onClick={() => navigate(['admin', 'users', usernameWithoutDomain(p.username)])}>\n-        {p.familyName + ', ' + p.givenName}\n+  getAccessModuleString(user: AdminTableUser, key: string): (string|React.ReactElement) {\n+    const completionTime = user[key + 'CompletionTime'];\n+    const bypassTime = user[key + 'BypassTime'];\n+\n+    if (completionTime) {\n+      const completionTimeString = moment(completionTime).format('lll');\n+      return <TooltipTrigger content={`Completed at ${completionTimeString}`}>\n+        <span>\u2714</span>\n+      </TooltipTrigger>;\n+    } else if (bypassTime) {\n+      const bypassTimeString = moment(bypassTime).format('lll');\n+      return <TooltipTrigger content={`Bypassed at ${bypassTimeString}`}>\n+        <span>B</span>\n+      </TooltipTrigger>;\n+    } else {\n+      return '';\n+    }\n+  }\n+\n+  convertProfilesToFields(users: AdminTableUser[]) {\n+    return users.map(user => ({\n+      audit: <a\n+        href={`/admin/user-audit/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        link\n+      </a>,\n+      bypass: <AdminUserBypass user={{...user}}/>,\n+      complianceTraining: this.getAccessModuleString(user, 'complianceTraining'),\n+      contactEmail: user.contactEmail,\n+      dataUseAgreement: this.getAccessModuleString(user, 'dataUseAgreement'),\n+      eraCommons: this.getAccessModuleString(user, 'eraCommons'),\n+      firstRegistrationCompletionTime: moment.unix(user.firstRegistrationCompletionTime / 1000).format('lll'),\n+      firstRegistrationCompletionTimestamp: user.firstRegistrationCompletionTime,\n+      firstSignInTime: moment.unix(user.firstSignInTime / 1000).format('lll'),\n+      firstSignInTimetsamp: user.firstSignInTime,\n+      institutionName: user.institutionName,\n+      name: <a\n+        href={`/admin/users/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        {user.familyName + ', ' + user.givenName}\n       </a>,\n-      betaAccessRequestTime: this.convertDate(p.betaAccessRequestTime),\n-      bypass: <AdminUserBypass profile={p}/>, disabled: p.disabled.toString(),\n-      userLockout: <LockoutButton disabled={this.state.reloadingProfile === p}\n-        profileDisabled={p.disabled}\n-        onClick={() => this.updateUserDisabledStatus(!p.disabled, p)}/>,\n-      audit: <a href={`/admin/user-audit/${usernameWithoutDomain(p.username)}`}>\ud83d\udd75\ufe0f</a>\n+      nameText: user.familyName + ' ' + user.givenName,\n+      status: user.disabled ? 'Disabled' : 'Active',\n+      twoFactorAuth: this.getAccessModuleString(user, 'twoFactorAuth'),\n+      username: user.username,\n+      userLockout: <LockoutButton disabled={false}\n+        profileDisabled={user.disabled}\n+        onClick={() => this.updateUserDisabledStatus(!user.disabled, user.username)}/>,\n     }));\n   }\n \n   render() {\n-    const {contentLoaded, profiles} = this.state;\n-    const {enableBetaAccess} = serverConfigStore.getValue();\n+    const {contentLoaded, filter, loading, users} = this.state;\n     return <div style={{position: 'relative'}}>\n       <h2>User Admin Table</h2>\n-      {contentLoaded ?\n-        <DataTable value={this.convertProfilesToFields(profiles)} style={styles.tableStyle}>\n-          <Column field='disabled' header='Disabled' bodyStyle={{...styles.colStyle, width: '7%'}}\n-                  headerStyle={{width: '7%'}}/>\n-          <Column field='name' header='Name' bodyStyle={{...styles.colStyle, width: '15%'}}\n-                  headerStyle={{width: '15%'}} sortable={true}/>\n-          <Column field='username' header='User Name' bodyStyle={{...styles.colStyle, width: '20%'}}\n-                  headerStyle={{width: '20%'}} sortable={true}/>\n-          <Column field='contactEmail' header='Contact Email' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '19%'}} headerStyle={{width: '19%'}}/>\n-          {enableBetaAccess && <Column field='betaAccessRequestTime' header='Beta Access Time Requested' sortable={true}\n-                  bodyStyle={{...styles.colStyle, width: '15%'}} headerStyle={{width: '15%'}}/>}\n-          <Column field='userLockout' header='User Lockout'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-          <Column field='bypass' header='Bypass'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-          <Column field='audit' header='Audit'\n-                  bodyStyle={{...styles.colStyle, width: '10%'}} headerStyle={{width: '10%'}}/>\n-        </DataTable> :\n-        <div>\n-          Loading user profiles...\n-          <SpinnerOverlay\n-            overrideStylesOverlay={{alignItems: 'flex-start', marginTop: '2rem'}}/>\n-        </div>}\n+      {loading &&\n+        <SpinnerOverlay opacity={0.6}\n+                        overrideStylesOverlay={{alignItems: 'flex-start', marginTop: '2rem'}}/>\n+      }\n+      {!contentLoaded && <div>Loading user profiles...</div>}\n+      {contentLoaded && <div>\n+        <input data-test-id='search'\n+               style={{marginBottom: '.5em', width: '300px'}}\n+               type='text'\n+               placeholder='Search'\n+               onChange={e => this.debounceUpdateFilter(e.target.value)}\n+        />\n+        <DataTable value={this.convertProfilesToFields(users)}\n+                   frozenWidth='200px'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23fe00bbed35eb8a670ec1a8a1c27b59cdf9b83b"}, "originalPosition": 236}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNjU5Mzk0", "url": "https://github.com/all-of-us/workbench/pull/4106#pullrequestreview-572659394", "createdAt": "2021-01-20T21:20:12Z", "commit": {"oid": "b442e660e4bfc2424f02a0988578297176661191"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMToyMDoxMlrOIXT3cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMFQyMToyMDoxMlrOIXT3cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MTMxMzY1MQ==", "bodyText": "spelling", "url": "https://github.com/all-of-us/workbench/pull/4106#discussion_r561313651", "createdAt": "2021-01-20T21:20:12Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-users.tsx", "diffHunk": "@@ -129,54 +136,193 @@ export const AdminUsers = withUserProfile()(class extends React.Component<\n     return a.familyName.localeCompare(b.familyName);\n   }\n \n-  convertDate(date): string {\n-    return new Date(date).toString().split(' ').slice(1, 5).join(' ');\n+  /**\n+   * Returns the appropriate cell contents (icon plus tooltip) for an access module cell\n+   * in the table.\n+   */\n+  accessModuleCellContents(user: AdminTableUser, key: string): (string|React.ReactElement) {\n+    const completionTime = user[key + 'CompletionTime'];\n+    const bypassTime = user[key + 'BypassTime'];\n+\n+    if (completionTime) {\n+      const completionTimeString = moment(completionTime).format('lll');\n+      return <TooltipTrigger content={`Completed at ${completionTimeString}`}>\n+        <span>\u2714</span>\n+      </TooltipTrigger>;\n+    } else if (bypassTime) {\n+      const bypassTimeString = moment(bypassTime).format('lll');\n+      return <TooltipTrigger content={`Bypassed at ${bypassTimeString}`}>\n+        <span>B</span>\n+      </TooltipTrigger>;\n+    } else {\n+      return '';\n+    }\n   }\n \n-  convertProfilesToFields(profiles: Profile[]) {\n-    return profiles.map(p => ({\n-      ...p,\n-      name: <a onClick={() => navigate(['admin', 'users', usernameWithoutDomain(p.username)])}>\n-        {p.familyName + ', ' + p.givenName}\n+  /**\n+   * Returns a formatted timestamp, or an empty string if the timestamp is zero or null.\n+   */\n+  formattedTimestampOrEmptyString(timestampSecs: (number|null)): string {\n+    if (timestampSecs) {\n+      return moment.unix(timestampSecs / 1000).format('lll');\n+    } else {\n+      return '';\n+    }\n+  }\n+\n+  convertProfilesToFields(users: AdminTableUser[]) {\n+    return users.map(user => ({\n+      audit: <a\n+        href={`/admin/user-audit/${usernameWithoutDomain(user.username)}`}\n+        target='_blank'>\n+        link\n+      </a>,\n+      bypass: <AdminUserBypass\n+        user={{...user}}\n+        onBypassModuleUpdate={() => this.loadProfiles()}/>,\n+      complianceTraining: this.accessModuleCellContents(user, 'complianceTraining'),\n+      contactEmail: user.contactEmail,\n+      dataUseAgreement: this.accessModuleCellContents(user, 'dataUseAgreement'),\n+      eraCommons: this.accessModuleCellContents(user, 'eraCommons'),\n+      firstRegistrationCompletionTime: this.formattedTimestampOrEmptyString(user.firstRegistrationCompletionTime),\n+      firstRegistrationCompletionTimestamp: user.firstRegistrationCompletionTime,\n+      firstSignInTime: this.formattedTimestampOrEmptyString(user.firstSignInTime),\n+      firstSignInTimetsamp: user.firstSignInTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b442e660e4bfc2424f02a0988578297176661191"}, "originalPosition": 189}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f02e5b60785018768097638f0ce5efe37df93b7b", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/f02e5b60785018768097638f0ce5efe37df93b7b", "committedDate": "2021-02-10T20:10:37Z", "message": "Add a projection for the admin user table and refresh the UI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdcf99f662e6b6c24b2aeb8db8fa008b634c571b", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/cdcf99f662e6b6c24b2aeb8db8fa008b634c571b", "committedDate": "2021-02-10T20:10:38Z", "message": "UI tweaks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bb4a99819cc2cb08945dd40eaf02751c9d158e0", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/3bb4a99819cc2cb08945dd40eaf02751c9d158e0", "committedDate": "2021-02-10T20:10:38Z", "message": "Add debounce to filter update."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1263d71e0b83dabf084f9f975a7b48282cd3a13a", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/1263d71e0b83dabf084f9f975a7b48282cd3a13a", "committedDate": "2021-02-10T20:10:38Z", "message": "Small tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7867149735976a205df2db39ad216a23d0bf07be", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/7867149735976a205df2db39ad216a23d0bf07be", "committedDate": "2021-02-10T20:10:39Z", "message": "Fix user bypass bug and address some comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a33ea77c6ab82566ad99f2962fdb69e9b3a26197", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/a33ea77c6ab82566ad99f2962fdb69e9b3a26197", "committedDate": "2021-02-10T20:10:39Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4466dee0a0c10ff50a4940150b4af17cae74c14", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/a4466dee0a0c10ff50a4940150b4af17cae74c14", "committedDate": "2021-02-10T20:10:39Z", "message": "SpyBean fix."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bbe48e13d2c5f8272873a866bf6fa39111fedb9", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/4bbe48e13d2c5f8272873a866bf6fa39111fedb9", "committedDate": "2021-02-10T20:10:39Z", "message": "Java spotless fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15dae856789f2375b0dca1f143eb698e75a2ee02", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/15dae856789f2375b0dca1f143eb698e75a2ee02", "committedDate": "2021-02-10T20:10:40Z", "message": "Fix bypass bugs and add loading spinner."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e74070c4b6f405806ff60ea7ff603b142bf8934", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/9e74070c4b6f405806ff60ea7ff603b142bf8934", "committedDate": "2021-02-10T20:11:35Z", "message": "Typo fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b442e660e4bfc2424f02a0988578297176661191", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/b442e660e4bfc2424f02a0988578297176661191", "committedDate": "2021-01-20T19:35:43Z", "message": "Fix bypass bugs and add loading spinner."}, "afterCommit": {"oid": "9e74070c4b6f405806ff60ea7ff603b142bf8934", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/9e74070c4b6f405806ff60ea7ff603b142bf8934", "committedDate": "2021-02-10T20:11:35Z", "message": "Typo fix"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4158, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}