{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMDkyODAz", "number": 3089, "reviewThreads": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToxMzozM1rODdLrfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMToyMDowNlrODdfE-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI2NjUyOnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToxMzozM1rOFlo7Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToxMzozM1rOFlo7Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMjEzOA==", "bodyText": "For checking Optionals", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375012138", "createdAt": "2020-02-05T01:13:33Z", "author": {"login": "jmthibault79"}, "path": "api/build.gradle", "diffHunk": "@@ -470,6 +470,7 @@ dependencies {\n   testCompile \"com.google.appengine:appengine-api-stubs:${GAE_VERSION}\"\n   testCompile \"com.google.appengine:appengine-tools-sdk:${GAE_VERSION}\"\n   testCompile 'com.google.truth:truth:0.42'\n+  testCompile 'com.google.truth.extensions:truth-java8-extension:1.0.1'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "235acbc008c873bd4cdff1d2a496a87e10f822fb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI2NzExOnYy", "diffSide": "RIGHT", "path": "api/db/changelog/db.changelog-125-institution-tables.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToxMzo1OVrOFlo7hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToxMzo1OVrOFlo7hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMjIzMA==", "bodyText": "All of these are arbitrarily 80.  Your thoughts?", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375012230", "createdAt": "2020-02-05T01:13:59Z", "author": {"login": "jmthibault79"}, "path": "api/db/changelog/db.changelog-125-institution-tables.xml", "diffHunk": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<databaseChangeLog\n+  xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog/1.9\"\n+  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog/1.9\n+                      http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-1.9.xsd\">\n+  <changeSet author=\"thibault\" id=\"changelog-125-institution-tables\">\n+\n+    <createTable tableName=\"institution\">\n+      <column name=\"institution_id\" type=\"bigint\" autoIncrement=\"true\">\n+        <constraints primaryKey=\"true\" nullable=\"false\"/>\n+      </column>\n+      <column name=\"short_name\" type=\"VARCHAR(80)\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "235acbc008c873bd4cdff1d2a496a87e10f822fb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI3MTYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToxNjo0NlrOFlo-aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowNTo0NlrOFmBvcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMjk2OQ==", "bodyText": "generated these because we use them in Sets", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375012969", "createdAt": "2020-02-05T01:16:46Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbc5437add5f9e562656595a9e6222a46c79af12"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxODczOA==", "bodyText": "Nice, i typically always implement equals/hashcode for all jpa model objects, but sometimes object equality is enough.", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375418738", "createdAt": "2020-02-05T18:05:46Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMjk2OQ=="}, "originalCommit": {"oid": "fbc5437add5f9e562656595a9e6222a46c79af12"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTI3Nzk0OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMDoxOFrOFlpCHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMToyMDoxOFrOFlpCHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAxMzkxNw==", "bodyText": "5 and 6 are unrelated to this PR: making educated guesses here, for completeness", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375013917", "createdAt": "2020-02-05T01:20:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -2454,6 +2541,9 @@ definitions:\n   #   3) ACCESS_CONTROL_ADMIN: This is actually basically a user admin authority, for people\n   #      to perform actions on a user's enabled status and manual verification.\n   #   4) FEATURED_WORKSPACE_ADMIN: Allows a user to publish workspaces\n+  #   5) COMMUNICATIONS_ADMIN: Allows a user to post a Status Alert banner", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbc5437add5f9e562656595a9e6222a46c79af12"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg1MzQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowNjo0NlrOFmBxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowNjo0NlrOFmBxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTIxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return emailAddress.equals(that.emailAddress);\n          \n          \n            \n                return institutionEmailAddressId == that.institutionEmailAddressId \n          \n          \n            \n                       && institution.equals(that.institution)\n          \n          \n            \n                       && emailAddress.equals(that.emailAddress);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375419212", "createdAt": "2020-02-05T18:06:46Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailAddress)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailAddress that = (DbInstitutionEmailAddress) o;\n+\n+    if (institutionEmailAddressId != that.institutionEmailAddressId) {\n+      return false;\n+    }\n+    if (!institution.equals(that.institution)) {\n+      return false;\n+    }\n+    return emailAddress.equals(that.emailAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg1NjM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowNzo0N1rOFmBzJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowNzo0N1rOFmBzJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTY4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return result;\n          \n          \n            \n                return Objects.hash(\n          \n          \n            \n                       institutionEmailAddressId,\n          \n          \n            \n                       institution,\n          \n          \n            \n                       emailAddress);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375419687", "createdAt": "2020-02-05T18:07:47Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailAddress)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailAddress that = (DbInstitutionEmailAddress) o;\n+\n+    if (institutionEmailAddressId != that.institutionEmailAddressId) {\n+      return false;\n+    }\n+    if (!institution.equals(that.institution)) {\n+      return false;\n+    }\n+    return emailAddress.equals(that.emailAddress);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = (int) (institutionEmailAddressId ^ (institutionEmailAddressId >>> 32));\n+    result = 31 * result + institution.hashCode();\n+    result = 31 * result + emailAddress.hashCode();\n+    return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg1ODI0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowODoyNVrOFmB0Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowODoyNVrOFmB0Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQxOTk5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return result;\n          \n          \n            \n                return Objects.hash(\n          \n          \n            \n                       institutionEmailDomainId,\n          \n          \n            \n                       institution,\n          \n          \n            \n                       emailDomain);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375419994", "createdAt": "2020-02-05T18:08:25Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailDomain.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_domain\")\n+public class DbInstitutionEmailDomain {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_domain_id\")\n+  private long institutionEmailDomainId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_domain\", nullable = false)\n+  private String emailDomain;\n+\n+  public DbInstitutionEmailDomain() {}\n+\n+  public DbInstitutionEmailDomain(DbInstitution institution, String emailDomain) {\n+    this.institution = institution;\n+    this.emailDomain = emailDomain;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailDomain() {\n+    return emailDomain;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailDomain)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailDomain that = (DbInstitutionEmailDomain) o;\n+\n+    if (institutionEmailDomainId != that.institutionEmailDomainId) {\n+      return false;\n+    }\n+    if (!institution.equals(that.institution)) {\n+      return false;\n+    }\n+    return emailDomain.equals(that.emailDomain);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = (int) (institutionEmailDomainId ^ (institutionEmailDomainId >>> 32));\n+    result = 31 * result + institution.hashCode();\n+    result = 31 * result + emailDomain.hashCode();\n+    return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg2MDE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowODo1OVrOFmB1lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowODo1OVrOFmB1lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMDMwOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return emailDomain.equals(that.emailDomain);\n          \n          \n            \n                return institutionEmailDomainId == that.institutionEmailDomainId\n          \n          \n            \n                       && institution.equals(that.institution)\n          \n          \n            \n                       && emailDomain.equals(that.emailDomain);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375420309", "createdAt": "2020-02-05T18:08:59Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailDomain.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_domain\")\n+public class DbInstitutionEmailDomain {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_domain_id\")\n+  private long institutionEmailDomainId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_domain\", nullable = false)\n+  private String emailDomain;\n+\n+  public DbInstitutionEmailDomain() {}\n+\n+  public DbInstitutionEmailDomain(DbInstitution institution, String emailDomain) {\n+    this.institution = institution;\n+    this.emailDomain = emailDomain;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailDomain() {\n+    return emailDomain;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailDomain)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailDomain that = (DbInstitutionEmailDomain) o;\n+\n+    if (institutionEmailDomainId != that.institutionEmailDomainId) {\n+      return false;\n+    }\n+    if (!institution.equals(that.institution)) {\n+      return false;\n+    }\n+    return emailDomain.equals(that.emailDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg2MjgxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowOTo0NlrOFmB3PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODowOTo0NlrOFmB3PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMDczMg==", "bodyText": "I think we decided as a team to not use wildcards in import statements. Assuming your using Intellij? Setting for this.", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375420732", "createdAt": "2020-02-05T18:09:46Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbStorageEnums.java", "diffHunk": "@@ -4,17 +4,7 @@\n import com.google.common.collect.ImmutableBiMap;\n import org.pmiops.workbench.db.model.DbBillingProjectBufferEntry.BufferEntryStatus;\n import org.pmiops.workbench.db.model.DbWorkspace.BillingMigrationStatus;\n-import org.pmiops.workbench.model.AnnotationType;\n-import org.pmiops.workbench.model.Authority;\n-import org.pmiops.workbench.model.BillingAccountType;\n-import org.pmiops.workbench.model.BillingStatus;\n-import org.pmiops.workbench.model.CohortStatus;\n-import org.pmiops.workbench.model.Degree;\n-import org.pmiops.workbench.model.EmailVerificationStatus;\n-import org.pmiops.workbench.model.ReviewStatus;\n-import org.pmiops.workbench.model.SpecificPopulationEnum;\n-import org.pmiops.workbench.model.WorkspaceAccessLevel;\n-import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.model.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg2NTI0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxMDozOFrOFmB41A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMToxNjoxN1rOFmHbgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMTE0MA==", "bodyText": "Why are using Provider and not injecting the dao directly? Injecting the dao directly should be sufficient.", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375421140", "createdAt": "2020-02-05T18:10:38Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMTkzOA==", "bodyText": "Out of ignorance.  Updated.", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375511938", "createdAt": "2020-02-05T21:16:17Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMTE0MA=="}, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg3MTMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxMjozOFrOFmB85Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTo0ODo0M1rOFmE_SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjE4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDaoProvider.get().save(dbClass);\n          \n          \n            \n                dbClass = institutionDaoProvider.get().save(dbClass);\n          \n      \n    \n    \n  \n\nSpring recommends that you should use the return object as it may be different altogether: https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/CrudRepository.html#save-S-", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375422181", "createdAt": "2020-02-05T18:12:38Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {\n+    this.institutionDaoProvider = institutionDaoProvider;\n+    this.institutionEmailDomainDaoProvider = institutionEmailDomainDaoProvider;\n+    this.institutionEmailAddressDaoProvider = institutionEmailAddressDaoProvider;\n+  }\n+\n+  @Override\n+  public List<Institution> getInstitutions() {\n+    return StreamSupport.stream(institutionDaoProvider.get().findAll().spliterator(), false)\n+        .map(this::toModelClass)\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Optional<Institution> getInstitution(final String id) {\n+    return getDbInstitution(id).map(this::toModelClass);\n+  }\n+\n+  @Override\n+  public Institution createInstitution(final Institution institutionToCreate) {\n+    return toModelClass(saveInstitution(institutionToCreate, new DbInstitution()));\n+  }\n+\n+  @Override\n+  public boolean deleteInstitution(final String id) {\n+    return getDbInstitution(id)\n+        .map(\n+            dbInst -> {\n+              institutionDaoProvider.get().delete(dbInst);\n+              return true;\n+            })\n+        .orElse(false);\n+  }\n+\n+  @Override\n+  public Optional<Institution> updateInstitution(\n+      final String id, final Institution institutionToUpdate) {\n+    return getDbInstitution(id)\n+        .map(dbInst -> toModelClass(saveInstitution(institutionToUpdate, dbInst)));\n+  }\n+\n+  private Optional<DbInstitution> getDbInstitution(String id) {\n+    return institutionDaoProvider.get().findOneByShortName(id);\n+  }\n+\n+  private DbInstitution saveInstitution(final Institution modelClass, final DbInstitution dbClass) {\n+    dbClass.setShortName(modelClass.getShortName());\n+    dbClass.setDisplayName(modelClass.getDisplayName());\n+    dbClass.setOrganizationTypeEnum(\n+        DbStorageEnums.organizationTypeToStorage(modelClass.getOrganizationTypeEnum()));\n+    dbClass.setOrganizationTypeOtherText(modelClass.getOrganizationTypeOtherText());\n+\n+    // save so the domain and address DAOs have something to reference\n+    institutionDaoProvider.get().save(dbClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3MTk0NQ==", "bodyText": "wow, yikes", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375471945", "createdAt": "2020-02-05T19:48:43Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {\n+    this.institutionDaoProvider = institutionDaoProvider;\n+    this.institutionEmailDomainDaoProvider = institutionEmailDomainDaoProvider;\n+    this.institutionEmailAddressDaoProvider = institutionEmailAddressDaoProvider;\n+  }\n+\n+  @Override\n+  public List<Institution> getInstitutions() {\n+    return StreamSupport.stream(institutionDaoProvider.get().findAll().spliterator(), false)\n+        .map(this::toModelClass)\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Optional<Institution> getInstitution(final String id) {\n+    return getDbInstitution(id).map(this::toModelClass);\n+  }\n+\n+  @Override\n+  public Institution createInstitution(final Institution institutionToCreate) {\n+    return toModelClass(saveInstitution(institutionToCreate, new DbInstitution()));\n+  }\n+\n+  @Override\n+  public boolean deleteInstitution(final String id) {\n+    return getDbInstitution(id)\n+        .map(\n+            dbInst -> {\n+              institutionDaoProvider.get().delete(dbInst);\n+              return true;\n+            })\n+        .orElse(false);\n+  }\n+\n+  @Override\n+  public Optional<Institution> updateInstitution(\n+      final String id, final Institution institutionToUpdate) {\n+    return getDbInstitution(id)\n+        .map(dbInst -> toModelClass(saveInstitution(institutionToUpdate, dbInst)));\n+  }\n+\n+  private Optional<DbInstitution> getDbInstitution(String id) {\n+    return institutionDaoProvider.get().findOneByShortName(id);\n+  }\n+\n+  private DbInstitution saveInstitution(final Institution modelClass, final DbInstitution dbClass) {\n+    dbClass.setShortName(modelClass.getShortName());\n+    dbClass.setDisplayName(modelClass.getDisplayName());\n+    dbClass.setOrganizationTypeEnum(\n+        DbStorageEnums.organizationTypeToStorage(modelClass.getOrganizationTypeEnum()));\n+    dbClass.setOrganizationTypeOtherText(modelClass.getOrganizationTypeOtherText());\n+\n+    // save so the domain and address DAOs have something to reference\n+    institutionDaoProvider.get().save(dbClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMjE4MQ=="}, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg3OTEwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxNTowM1rOFmCB3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxNTowM1rOFmCB3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMzQ1Mw==", "bodyText": "May want to use the saved Iterable here as well, before setting email domains below.", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375423453", "createdAt": "2020-02-05T18:15:03Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {\n+    this.institutionDaoProvider = institutionDaoProvider;\n+    this.institutionEmailDomainDaoProvider = institutionEmailDomainDaoProvider;\n+    this.institutionEmailAddressDaoProvider = institutionEmailAddressDaoProvider;\n+  }\n+\n+  @Override\n+  public List<Institution> getInstitutions() {\n+    return StreamSupport.stream(institutionDaoProvider.get().findAll().spliterator(), false)\n+        .map(this::toModelClass)\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Optional<Institution> getInstitution(final String id) {\n+    return getDbInstitution(id).map(this::toModelClass);\n+  }\n+\n+  @Override\n+  public Institution createInstitution(final Institution institutionToCreate) {\n+    return toModelClass(saveInstitution(institutionToCreate, new DbInstitution()));\n+  }\n+\n+  @Override\n+  public boolean deleteInstitution(final String id) {\n+    return getDbInstitution(id)\n+        .map(\n+            dbInst -> {\n+              institutionDaoProvider.get().delete(dbInst);\n+              return true;\n+            })\n+        .orElse(false);\n+  }\n+\n+  @Override\n+  public Optional<Institution> updateInstitution(\n+      final String id, final Institution institutionToUpdate) {\n+    return getDbInstitution(id)\n+        .map(dbInst -> toModelClass(saveInstitution(institutionToUpdate, dbInst)));\n+  }\n+\n+  private Optional<DbInstitution> getDbInstitution(String id) {\n+    return institutionDaoProvider.get().findOneByShortName(id);\n+  }\n+\n+  private DbInstitution saveInstitution(final Institution modelClass, final DbInstitution dbClass) {\n+    dbClass.setShortName(modelClass.getShortName());\n+    dbClass.setDisplayName(modelClass.getDisplayName());\n+    dbClass.setOrganizationTypeEnum(\n+        DbStorageEnums.organizationTypeToStorage(modelClass.getOrganizationTypeEnum()));\n+    dbClass.setOrganizationTypeOtherText(modelClass.getOrganizationTypeOtherText());\n+\n+    // save so the domain and address DAOs have something to reference\n+    institutionDaoProvider.get().save(dbClass);\n+\n+    final InstitutionEmailDomainDao domainDao = institutionEmailDomainDaoProvider.get();\n+    domainDao.deleteAllByInstitution(dbClass);\n+\n+    Optional.ofNullable(modelClass.getEmailDomains())\n+        .ifPresent(\n+            domains -> {\n+              Set<DbInstitutionEmailDomain> dbDomains =\n+                  domains.stream()\n+                      .map(domain -> new DbInstitutionEmailDomain(dbClass, domain))\n+                      .collect(Collectors.toSet());\n+              domainDao.save(dbDomains);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg4MDA4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxNToyNFrOFmCChg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxNToyNFrOFmCChg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyMzYyMg==", "bodyText": "Another save here.", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375423622", "createdAt": "2020-02-05T18:15:24Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package org.pmiops.workbench.institution;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.db.dao.InstitutionDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailAddressDao;\n+import org.pmiops.workbench.db.dao.InstitutionEmailDomainDao;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class InstitutionServiceImpl implements InstitutionService {\n+\n+  private final Provider<InstitutionDao> institutionDaoProvider;\n+  private final Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider;\n+  private final Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider;\n+\n+  @Autowired\n+  InstitutionServiceImpl(\n+      Provider<InstitutionDao> institutionDaoProvider,\n+      Provider<InstitutionEmailDomainDao> institutionEmailDomainDaoProvider,\n+      Provider<InstitutionEmailAddressDao> institutionEmailAddressDaoProvider) {\n+    this.institutionDaoProvider = institutionDaoProvider;\n+    this.institutionEmailDomainDaoProvider = institutionEmailDomainDaoProvider;\n+    this.institutionEmailAddressDaoProvider = institutionEmailAddressDaoProvider;\n+  }\n+\n+  @Override\n+  public List<Institution> getInstitutions() {\n+    return StreamSupport.stream(institutionDaoProvider.get().findAll().spliterator(), false)\n+        .map(this::toModelClass)\n+        .collect(Collectors.toList());\n+  }\n+\n+  @Override\n+  public Optional<Institution> getInstitution(final String id) {\n+    return getDbInstitution(id).map(this::toModelClass);\n+  }\n+\n+  @Override\n+  public Institution createInstitution(final Institution institutionToCreate) {\n+    return toModelClass(saveInstitution(institutionToCreate, new DbInstitution()));\n+  }\n+\n+  @Override\n+  public boolean deleteInstitution(final String id) {\n+    return getDbInstitution(id)\n+        .map(\n+            dbInst -> {\n+              institutionDaoProvider.get().delete(dbInst);\n+              return true;\n+            })\n+        .orElse(false);\n+  }\n+\n+  @Override\n+  public Optional<Institution> updateInstitution(\n+      final String id, final Institution institutionToUpdate) {\n+    return getDbInstitution(id)\n+        .map(dbInst -> toModelClass(saveInstitution(institutionToUpdate, dbInst)));\n+  }\n+\n+  private Optional<DbInstitution> getDbInstitution(String id) {\n+    return institutionDaoProvider.get().findOneByShortName(id);\n+  }\n+\n+  private DbInstitution saveInstitution(final Institution modelClass, final DbInstitution dbClass) {\n+    dbClass.setShortName(modelClass.getShortName());\n+    dbClass.setDisplayName(modelClass.getDisplayName());\n+    dbClass.setOrganizationTypeEnum(\n+        DbStorageEnums.organizationTypeToStorage(modelClass.getOrganizationTypeEnum()));\n+    dbClass.setOrganizationTypeOtherText(modelClass.getOrganizationTypeOtherText());\n+\n+    // save so the domain and address DAOs have something to reference\n+    institutionDaoProvider.get().save(dbClass);\n+\n+    final InstitutionEmailDomainDao domainDao = institutionEmailDomainDaoProvider.get();\n+    domainDao.deleteAllByInstitution(dbClass);\n+\n+    Optional.ofNullable(modelClass.getEmailDomains())\n+        .ifPresent(\n+            domains -> {\n+              Set<DbInstitutionEmailDomain> dbDomains =\n+                  domains.stream()\n+                      .map(domain -> new DbInstitutionEmailDomain(dbClass, domain))\n+                      .collect(Collectors.toSet());\n+              domainDao.save(dbDomains);\n+              dbClass.setEmailDomains(dbDomains);\n+            });\n+\n+    final InstitutionEmailAddressDao addrDao = institutionEmailAddressDaoProvider.get();\n+    addrDao.deleteAllByInstitution(dbClass);\n+\n+    Optional.ofNullable(modelClass.getEmailAddresses())\n+        .ifPresent(\n+            addresses -> {\n+              Set<DbInstitutionEmailAddress> dbAddrs =\n+                  addresses.stream()\n+                      .map(address -> new DbInstitutionEmailAddress(dbClass, address))\n+                      .collect(Collectors.toSet());\n+              addrDao.save(dbAddrs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg4NDY4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxNjo0MFrOFmCFTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxNjo0MFrOFmCFTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNDMzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375424334", "createdAt": "2020-02-05T18:16:40Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTg4OTc1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxODoxNVrOFmCIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoxODoxNVrOFmCIig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNTE2Mg==", "bodyText": "I would add an annotation for\n@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\nThis will clean all spring context and in-memory db changes between tests.", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375425162", "createdAt": "2020-02-05T18:18:15Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkwNzE1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyMzo0OVrOFmCTnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyMzo0OVrOFmCTnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyNzk5Nw==", "bodyText": "Would it make sense to have separate tests for save, findOneByShortName , findAll and delete? Instead of having everything in one test. Also, does it makes sense to add a method for data setup that runs between each test? Something like:\n@Before\n public void setUp() {\nfinal DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n institutionDao.save(testInst);\n}", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375427997", "createdAt": "2020-02-05T18:23:49Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkxNjIxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailAddressDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyNjo0OFrOFmCZcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyNjo0OFrOFmCZcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyOTQ4OQ==", "bodyText": "@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375429489", "createdAt": "2020-02-05T18:26:48Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailAddressDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailAddressDaoTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkxNzU3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailAddressDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyNzoxMlrOFmCaRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyNzoxMlrOFmCaRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyOTcwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375429702", "createdAt": "2020-02-05T18:27:12Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailAddressDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailAddressDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+  @Autowired InstitutionEmailAddressDao institutionEmailAddressDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkxODYxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailAddressDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyNzozNFrOFmCa9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyNzozNFrOFmCa9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQyOTg3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(otherInst);\n          \n          \n            \n                otherInst = institutionDao.save(otherInst);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375429878", "createdAt": "2020-02-05T18:27:34Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailAddressDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailAddress;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailAddressDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+  @Autowired InstitutionEmailAddressDao institutionEmailAddressDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    final DbInstitution otherInst = new DbInstitution(\"NIH\", \"The National Institute of Health\");\n+    institutionDao.save(otherInst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkyMjg4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyODo1NVrOFmCdqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyODo1NVrOFmCdqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDU2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375430568", "createdAt": "2020-02-05T18:28:55Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findOneByShortName(\"Broad\")).isEqualTo(Optional.of(testInst));\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    // update existing entity, don't change size\n+\n+    testInst.setShortName(\"Verily\");\n+    institutionDao.save(testInst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkyNDAxOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyOToxNFrOFmCeVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyOToxNFrOFmCeVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDc0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375430740", "createdAt": "2020-02-05T18:29:14Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findOneByShortName(\"Broad\")).isEqualTo(Optional.of(testInst));\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    // update existing entity, don't change size\n+\n+    testInst.setShortName(\"Verily\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+    assertThat(institutionDao.findOneByShortName(\"Verily\")).isEqualTo(Optional.of(testInst));\n+\n+    testInst.setDisplayName(\"Yea, Verily\");\n+    institutionDao.save(testInst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkyNTIzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyOTozNFrOFmCfHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODoyOTozNFrOFmCfHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMDk0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(otherInst);\n          \n          \n            \n                otherInst = institutionDao.save(otherInst);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375430942", "createdAt": "2020-02-05T18:29:34Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionDaoTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import java.util.Optional;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findOneByShortName(\"Broad\")).isEqualTo(Optional.of(testInst));\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    // update existing entity, don't change size\n+\n+    testInst.setShortName(\"Verily\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+    assertThat(institutionDao.findOneByShortName(\"Verily\")).isEqualTo(Optional.of(testInst));\n+\n+    testInst.setDisplayName(\"Yea, Verily\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+    assertThat(institutionDao.findOneByShortName(\"Verily\")).isEqualTo(Optional.of(testInst));\n+\n+    final DbInstitution otherInst = new DbInstitution(\"VUMC\", \"Vanderbilt\");\n+    institutionDao.save(otherInst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkyNzI3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODozMDoxNVrOFmCgdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODozMDoxNVrOFmCgdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTI4Ng==", "bodyText": "@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375431286", "createdAt": "2020-02-05T18:30:15Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailDomainDaoTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkyOTUyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODozMDo1NlrOFmCh8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODozMDo1NlrOFmCh8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTY2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(testInst);\n          \n          \n            \n                testInst = institutionDao.save(testInst);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375431667", "createdAt": "2020-02-05T18:30:56Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailDomainDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+  @Autowired InstitutionEmailDomainDao institutionEmailDomainDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkzMDMwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODozMToxMFrOFmCiaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODozMToxMFrOFmCiaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMTc4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                institutionDao.save(otherInst);\n          \n          \n            \n                otherInst = institutionDao.save(otherInst);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375431785", "createdAt": "2020-02-05T18:31:10Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/InstitutionEmailDomainDaoTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.DbInstitution;\n+import org.pmiops.workbench.db.model.DbInstitutionEmailDomain;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionEmailDomainDaoTest {\n+  @Autowired InstitutionDao institutionDao;\n+  @Autowired InstitutionEmailDomainDao institutionEmailDomainDao;\n+\n+  @Test\n+  public void testDao() {\n+    final DbInstitution testInst = new DbInstitution(\"Broad\", \"The Broad Institute\");\n+    institutionDao.save(testInst);\n+    assertThat(institutionDao.findAll()).hasSize(1);\n+\n+    final DbInstitution otherInst = new DbInstitution(\"NIH\", \"The National Institute of Health\");\n+    institutionDao.save(otherInst);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTkzNzk0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODozMzo0N1rOFmCnTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODozMzo0N1rOFmCnTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzMzAzOA==", "bodyText": "@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375433038", "createdAt": "2020-02-05T18:33:47Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionServiceTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMTk0ODU0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxODozNzozMVrOFmCuGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowMzozMlrOFmIxRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNDc3Ng==", "bodyText": "Again it feels like this test could benefit from a setup method that separates data setup from the test itself:\n@Before\npublic void setUp() {\n}\nAnd separating test cases for create, find, modify and delete make it clear and easier to update tests when needed.", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375434776", "createdAt": "2020-02-05T18:37:31Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionServiceTest {\n+  @Autowired private InstitutionService service;\n+\n+  @TestConfiguration\n+  @Import({InstitutionServiceImpl.class})\n+  static class Configuration {}\n+\n+  @Test\n+  public void test_InstitutionCRUD() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMzg5Mw==", "bodyText": "yeah, great idea", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375533893", "createdAt": "2020-02-05T22:03:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionServiceTest {\n+  @Autowired private InstitutionService service;\n+\n+  @TestConfiguration\n+  @Import({InstitutionServiceImpl.class})\n+  static class Configuration {}\n+\n+  @Test\n+  public void test_InstitutionCRUD() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQzNDc3Ng=="}, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjA0NTg3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTowNzoyOVrOFmDqfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTowNzoyOVrOFmDqfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1MDIzNg==", "bodyText": "If you don't have a test config you can just remove it and move the @Import({InstitutionServiceImpl.class}) under @DataJpaTest", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375450236", "createdAt": "2020-02-05T19:07:29Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+package org.pmiops.workbench.institution;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.model.Institution;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public class InstitutionServiceTest {\n+  @Autowired private InstitutionService service;\n+\n+  @TestConfiguration\n+  @Import({InstitutionServiceImpl.class})\n+  static class Configuration {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af0c354fff03b8c734393663d489e7f8af5f7b29"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjQ0MzAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMToxOToyOFrOFmHhIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjowMzoxMVrOFmIw3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMzM3OA==", "bodyText": "Sorry.. i was meaning that you could remove these 2 if statements and replace with the return suggestion", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375513378", "createdAt": "2020-02-05T21:19:28Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailAddress)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailAddress that = (DbInstitutionEmailAddress) o;\n+\n+    if (institutionEmailAddressId != that.institutionEmailAddressId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bfbba15a3760b9a78d6c9ea2524c389c9c0003e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMjQ5Mg==", "bodyText": "So basically, you would replace\nif (institutionEmailAddressId != that.institutionEmailAddressId) {\nreturn false;\n}\nif (!institution.equals(that.institution)) {\nreturn false;\n}\nreturn emailAddress.equals(that.emailAddress);\nwith\nreturn institutionEmailAddressId == that.institutionEmailAddressId\n        && institution.equals(that.institution)\n        && emailAddress.equals(that.emailAddress);", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375532492", "createdAt": "2020-02-05T22:00:16Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailAddress)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailAddress that = (DbInstitutionEmailAddress) o;\n+\n+    if (institutionEmailAddressId != that.institutionEmailAddressId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMzM3OA=="}, "originalCommit": {"oid": "8bfbba15a3760b9a78d6c9ea2524c389c9c0003e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMzc4OA==", "bodyText": "Yes of course.  Merged these on autopilot.  Fixed now.", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375533788", "createdAt": "2020-02-05T22:03:11Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailAddress.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_address\")\n+public class DbInstitutionEmailAddress {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_address_id\")\n+  private long institutionEmailAddressId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_address\", nullable = false)\n+  private String emailAddress;\n+\n+  public DbInstitutionEmailAddress() {}\n+\n+  public DbInstitutionEmailAddress(DbInstitution institution, String emailAddress) {\n+    this.institution = institution;\n+    this.emailAddress = emailAddress;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailAddress() {\n+    return emailAddress;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailAddress)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailAddress that = (DbInstitutionEmailAddress) o;\n+\n+    if (institutionEmailAddressId != that.institutionEmailAddressId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMzM3OA=="}, "originalCommit": {"oid": "8bfbba15a3760b9a78d6c9ea2524c389c9c0003e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjQ0NDcyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailDomain.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMToyMDowNlrOFmHiOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMToyMDowNlrOFmHiOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUxMzY1Ng==", "bodyText": "Same here, you can remove these 2 if statements", "url": "https://github.com/all-of-us/workbench/pull/3089#discussion_r375513656", "createdAt": "2020-02-05T21:20:06Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionEmailDomain.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_email_domain\")\n+public class DbInstitutionEmailDomain {\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_email_domain_id\")\n+  private long institutionEmailDomainId;\n+\n+  @ManyToOne(fetch = FetchType.LAZY)\n+  @JoinColumn(name = \"institution_id\")\n+  private DbInstitution institution;\n+\n+  @Column(name = \"email_domain\", nullable = false)\n+  private String emailDomain;\n+\n+  public DbInstitutionEmailDomain() {}\n+\n+  public DbInstitutionEmailDomain(DbInstitution institution, String emailDomain) {\n+    this.institution = institution;\n+    this.emailDomain = emailDomain;\n+  }\n+\n+  public DbInstitution getInstitution() {\n+    return institution;\n+  }\n+\n+  public String getEmailDomain() {\n+    return emailDomain;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+    if (!(o instanceof DbInstitutionEmailDomain)) {\n+      return false;\n+    }\n+\n+    DbInstitutionEmailDomain that = (DbInstitutionEmailDomain) o;\n+\n+    if (institutionEmailDomainId != that.institutionEmailDomainId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bfbba15a3760b9a78d6c9ea2524c389c9c0003e"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3271, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}