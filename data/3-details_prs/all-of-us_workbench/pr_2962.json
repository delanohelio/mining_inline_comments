{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODEzNTk5", "number": 2962, "title": "[RW-2840][risk=low] Migrate away from the deprecated GoogleCredential library.", "bodyText": "This is step 1 of 2 in our path towards moving away from GCS-stored private service account keys, which has been flagged as a lingering security issue (not urgent, but important to fix before too long). I decided to take\u00a0a stab at this over the quiet holiday period. See the ticket and/or this design sketch for more context.\nThis PR should be largely a no-op, except for one functional change: instead of reading credentials for our gsuite-admin service account from the App Engine package, we will read them from GCS (to be more consistent with our other GCS-stored service account keys).\nThe bulk of code changes here are split into two threads:\n\nRemove all instances of com.google.api.client.googleapis.auth.oauth2.GoogleCredential (which is now deprecated) into use of com.google.auth.oauth2.GoogleCredentials and related subclasses (including ServiceAccountCredentials).\nClean up and simplify our integration test configs for clarity and to reduce duplication of credential-loading beans.\n\nThe second part (simplifying integration tests) might have been doable as a separate PR, but I found it hard to reason about the integration tests (and especially which credentials were being used for which test scenario) with all the inconsistency and boilerplate. If as a reviewer it's extremely distracting I'd be willing to try and split it out.\nThings I learned along the way:\n\n[Credentials] By adopting the more modern credentials library, our creation of user-delegated credentials was dramatically simplified (see ServiceAccounts.java). To the extent where I felt that a unit test of that class became largely unnecessary.\n[Credentials] We'd been injecting an instance of the ServiceAccounts class, even though it was largely populated with utils-type methods. Pulling this out of our service constructors felt better.\n[Integration tests] It's possible to allow the use of request-scoped beans by including the @WebAppConfiguration annotation on a test class. This allowed us to remove the re-definition of a handful of beans.\n[Integration tests] Despite spending a fair bit of time trying to learn the ins & outs of Spring testing, I still find myself struggling a bit to predict whether a given change in boilerplate / infrastructure will work well or not. The one thing I did find helpful was to create a single base test class, which helps enforce that all test classes are using a similar base pattern of spring annotations.\n[Spring] I read up on some Spring fundamentals while working through some of the test refactors, and finally realized what Provider is really all about: when you have a singleton bean that needs to interact with beans that have a shorter lifetime (e.g. prototype- or request-scoped), Provider is the conventional pattern to allow the singleton bean to continuously re-request the more narrowly-scoped bean. Interesting! I'm not sure if we follow that pattern in a clear / crisp way.\n\n\nPR checklist\n\n[Partially fulfills criteria] This PR meets the Acceptance Criteria in the JIRA story\n[Leaving as in-progress] The JIRA story has been moved to Dev Review\n[Mostly integration tests] This PR includes appropriate unit tests\n[Tested locally & tested a GAE-deployed version] I have run and tested this change locally", "createdAt": "2020-01-02T22:20:01Z", "url": "https://github.com/all-of-us/workbench/pull/2962", "merged": true, "mergeCommit": {"oid": "e6ea3f4f8c7b372102d571cda12ece139cc3eb7b"}, "closed": true, "closedAt": "2020-01-09T14:57:43Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb2u2ptAFqTMzNzkyNDUxOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4q8VSAH2gAyMzU4ODEzNTk5OjAzNzFiM2IyMzFlZGY3ODJmNzgwYjMyNGRjMTQ0Y2JiYmZkOTRkOTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM3OTI0NTE4", "url": "https://github.com/all-of-us/workbench/pull/2962#pullrequestreview-337924518", "createdAt": "2020-01-03T01:18:13Z", "commit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QwMToxODoxM1rOFZ4h2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDowMjowNFrOFaAq1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NDg5MQ==", "bodyText": "Some notes about the set of changes in the /config/ directory:\n\nGoogleCredential.Builder was removed because it's unused in the newer oauth2 package.\nChanges to RetryConfig, StoredCredentialsConfig (new file) and WebMvcConfig were all related to refactoring configs to better support shared config across MVC and integration test contexts.\nWhile digging into this code, I realized that WorkbenchEnvironment was only used in one place, by ServiceAccounts, and that with the newer oauth2 package we shouldn't need different behavior between local development and App Engine (I verified this by deploying to a personal app engine instance). So I removed this class entirely.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362684891", "createdAt": "2020-01-03T01:18:13Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "diffHunk": "@@ -1,15 +1,12 @@\n package org.pmiops.workbench.config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NTY3NQ==", "bodyText": "I ultimately decided to remove this test... the calls to get impersonated credentials are fairly trivial uses of the newer oauth2 library that a unit test with mocked dependencies started to feel like much more trouble than it was worth. This code is being more effectively tested in the integration tests which actually verify that the credential exchange is working as expected when hitting live Google endpoints.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362685675", "createdAt": "2020-01-03T01:24:49Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/firecloud/FireCloudServiceImplTest.java", "diffHunk": "@@ -197,21 +190,6 @@ public void testNihCallbackServerError() throws Exception {\n     service.postNihCallback(any());\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NTczMA==", "bodyText": "This was kind of a drive-by cleanup based on the TODO. Now that ServiceAccounts only holds static methods, it doesn't need to be awkwardly injected into places like this.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362685730", "createdAt": "2020-01-03T01:25:33Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/CommandLineToolConfig.java", "diffHunk": "@@ -42,23 +39,9 @@\n  */\n @Configuration\n @EnableAutoConfiguration\n-@Import({RetryConfig.class, CommonConfig.class})\n+@Import({RetryConfig.class, CommonConfig.class, CloudStorageServiceImpl.class})\n @EnableJpaRepositories({\"org.pmiops.workbench.db.dao\"})\n @EntityScan(\"org.pmiops.workbench.db.model\")\n-// Scan the google module, for CloudStorageService and DirectoryService beans.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgxODI2Mg==", "bodyText": "The change to this method (now located in StoredCredentialsConfig) should be the only functional change in this PR. Instead of loading the gsuite-admin SA creds from the App Engine resource package, I decided to follow-up on my prior TODO and switch to loading them from GCS. What this effectively means is that each App Engine task will talk to GCS when the first API call is made that requires G Suite interactions (e.g. creating a user). This bean is singleton-scoped, so the credentials should be loaded and cached for the lifetime of each GAE task.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362818262", "createdAt": "2020-01-03T14:02:04Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/WebMvcConfig.java", "diffHunk": "@@ -66,56 +60,6 @@ public DbUser user(UserAuthentication userAuthentication) {\n     return userAuthentication.getUser();\n   }\n \n-  @Bean\n-  public WorkbenchEnvironment workbenchEnvironment() {\n-    return new WorkbenchEnvironment();\n-  }\n-\n-  /**\n-   * Service account credentials for Gsuite administration. These are derived from a key JSON file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MTEwMTM2", "url": "https://github.com/all-of-us/workbench/pull/2962#pullrequestreview-338110136", "createdAt": "2020-01-03T14:43:16Z", "commit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "state": "COMMENTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNDo0MzoxNlrOFaBi3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoyMDo0NVrOFaDxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzMjYwNA==", "bodyText": "Is this the base for integration tests only? Maybe SpringApplicationIntegrationTest would be more descriptive?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362832604", "createdAt": "2020-01-03T14:43:16Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "diffHunk": "@@ -18,7 +18,7 @@\n  * Services, Controllers, Components and Configurations.\n  */\n @RunWith(SpringRunner.class)\n-@SpringBootTest(classes = {TestWebMvcConfig.class})\n+@SpringBootTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgzMzAwNg==", "bodyText": "aside: I've been looking for a patter for selectively changing the log level for individual classes & packages. If we had that, you could have a debug log here and turn it to INFO while tracking down an issue with this class, then restore it. I know we had that set up at a prior workplace with log4j, but I don't know what else was involved.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362833006", "createdAt": "2020-01-03T14:44:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "diffHunk": "@@ -42,7 +42,6 @@ public void contextLoads() throws Exception {\n     // This loads all @Service, @Controller, @Component and @Configuration annotations\n     beans.addAll(context.getBeansWithAnnotation(Component.class).values());\n     for (Object object : beans) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0MjQ1OQ==", "bodyText": "Can you actually trip this assertion? Looks like List#addAll() may throw an NPE, depending on the concrete list type.\nIt's also probably better to assert on the beans retrieved from the context (i.e. by declaring a map for NoRepositoryBeans and another for ComponentBeans. I'm trying to understand why it would fetch a null bean for an annotation.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362842459", "createdAt": "2020-01-03T15:10:13Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/ApplicationTest.java", "diffHunk": "@@ -42,7 +42,6 @@ public void contextLoads() throws Exception {\n     // This loads all @Service, @Controller, @Component and @Configuration annotations\n     beans.addAll(context.getBeansWithAnnotation(Component.class).values());\n     for (Object object : beans) {\n-      System.out.println(object);\n       assertThat(object).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NDI5NQ==", "bodyText": "Can you put or point to an example of a modification?\nAlso, do we not need/want to use the same mechanism for unit tests that require a workbench config? That might argue for a parent class to both the BaseIntegrationTest and BaseUnitTest, if there is such a thing.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362844295", "createdAt": "2020-01-03T15:15:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  static class Configuration {\n+    // This prototype-scoped bean override will cause all autowired services to call\n+    // this method for their Provider<WorkbenchConfig>. This allows test classes to either leave\n+    // this alone (in which case the test WorkbenchConfig is used), or make config modifications\n+    // before a test case which will be ready by all services.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0NTYxNQ==", "bodyText": "This @Primary seems like a bit magical at first glance. I guess there's a trade space here between succinctness and foolproof-ness, but I'm trying to understand why this is desirable here, as it makes overriding more difficult.\nI'd almost rather require all the test cases to use a qualifier like \"base_integration_workbench_config\" so there are no misunderstandings, and so a test could explicitly decide not to use this common if there were some reason to do so. Though I suppose all you need to do in that case is to give your own bean a name and inject it with a qualifier. If that's the intended pattern, then maybe comment on it here.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362845615", "createdAt": "2020-01-03T15:18:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  static class Configuration {\n+    // This prototype-scoped bean override will cause all autowired services to call\n+    // this method for their Provider<WorkbenchConfig>. This allows test classes to either leave\n+    // this alone (in which case the test WorkbenchConfig is used), or make config modifications\n+    // before a test case which will be ready by all services.\n+    @Bean\n+    @Primary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0ODE0Ng==", "bodyText": "Can this file name be externalized? I don't know what the _test suffix means, since that's also an (unfortunate) environment name.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362848146", "createdAt": "2020-01-03T15:25:10Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;\n+\n+  @TestConfiguration\n+  static class Configuration {\n+    // This prototype-scoped bean override will cause all autowired services to call\n+    // this method for their Provider<WorkbenchConfig>. This allows test classes to either leave\n+    // this alone (in which case the test WorkbenchConfig is used), or make config modifications\n+    // before a test case which will be ready by all services.\n+    @Bean\n+    @Primary\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    WorkbenchConfig getTestConfig() throws IOException {\n+      if (config == null) {\n+        config = loadConfig(\"config_test.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg0OTg1MA==", "bodyText": "Is there an existing markdown doc these notes can migrate to? If not, I think it would be handy to have some high level coverage of some of these topics.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362849850", "createdAt": "2020-01-03T15:29:06Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "diffHunk": "@@ -1,15 +1,12 @@\n package org.pmiops.workbench.config;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NDg5MQ=="}, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1MzU3OQ==", "bodyText": "nit: We're migrating to a convention of Firecloud, since it's really one token to us. That was the approved convention for the generated classes when I prefixed them anyway.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362853579", "createdAt": "2020-01-03T15:38:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NDIxMg==", "bodyText": "This is another one of those greedy, magical things in Spring. I don't know how you evangelize things like this, but it's easy to move things in and out of packages (or rename them) without expecting any functional changes. Best case scenario, it falls apart on startup when you do that.\nAnother bummer is that you can't call something like getClass().getPackage() within an annotation, as everything has to be a compile-time constant. So if we rename any part of the package, it breaks, and we find out at runtime.\nWhat you can do is put a placeholder type at the top level of the package to be scanned. It looks like the syntax is @ComponentScan(basePackageClasses = org.pmiops.workbench.firecloud.ComponentScanPlaceholder.class). (Since it's generated, you'd have to figure out which class to use or put a placeholder in the yaml). ComponentScanPlaceholder can be an empty interface.\nFrom the doc\n\t/**\n\t * Type-safe alternative to {@link #basePackages} for specifying the packages\n\t * to scan for annotated components. The package of each class specified will be scanned.\n\t * <p>Consider creating a special no-op marker class or interface in each package\n\t * that serves no purpose other than being referenced by this attribute.\n\t */\n\nA happy side -effect is that this placeholder would show up in the tree view of the source, so folks would realize there were Spring shenanigans afoot in that package.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362854212", "createdAt": "2020-01-03T15:40:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;\n \n-  @Autowired private ServiceAccounts serviceAccounts;\n-\n-  @Autowired\n-  @Qualifier(Constants.FIRECLOUD_ADMIN_CREDS)\n-  private GoogleCredential fireCloudAdminCredential;\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.firecloud\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NTUxNg==", "bodyText": "We need a test resource file or something. Same issue above, so we could pull in INTEGRATION_TEST_WORKBENCH_CONFIG_PATH or whatever.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362855516", "createdAt": "2020-01-03T15:43:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;\n \n-  @Autowired private ServiceAccounts serviceAccounts;\n-\n-  @Autowired\n-  @Qualifier(Constants.FIRECLOUD_ADMIN_CREDS)\n-  private GoogleCredential fireCloudAdminCredential;\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.firecloud\")\n+  @Import({FireCloudServiceImpl.class})\n+  static class Configuration {}\n \n   @Before\n   public void setUp() throws IOException {\n-    // Get a refreshed access token for the FireCloud service account credentials.\n-    serviceAccountCredential =\n-        serviceAccountCredential.createScoped(FireCloudServiceImpl.FIRECLOUD_API_OAUTH_SCOPES);\n-    serviceAccountCredential.refreshToken();\n-  }\n-\n-  /**\n-   * Creates a FireCloudService instance with the FireCloud base URL corresponding to the given\n-   * WorkbenchConfig. Note that this will always use the test environment's default service account\n-   * credentials when making API calls. It shouldn't be possible to make authenticated calls to the\n-   * FireCloud prod environment.\n-   *\n-   * <p>This method mostly exists to allow us to run a status-check against both FC dev & prod\n-   * within the same integration test run.\n-   */\n-  private FireCloudService createService(WorkbenchConfig config) {\n-    ApiClient apiClient =\n-        new ApiClient()\n-            .setBasePath(config.firecloud.baseUrl)\n-            .setDebugging(config.firecloud.debugEndpoints);\n-    apiClient.setAccessToken(serviceAccountCredential.getAccessToken());\n-\n-    return new FireCloudServiceImpl(\n-        Providers.of(config),\n-        Providers.of(profileApi),\n-        Providers.of(billingApi),\n-        Providers.of(allOfUsGroupsApi),\n-        Providers.of(nihApi),\n-        Providers.of(workspacesApi),\n-        Providers.of(workspaceAclsApi),\n-        Providers.of(new StatusApi(apiClient)),\n-        Providers.of(staticNotebooksApi),\n-        new FirecloudRetryHandler(new NoBackOffPolicy()),\n-        serviceAccounts,\n-        Providers.of(fireCloudAdminCredential));\n-  }\n-\n-  private WorkbenchConfig loadConfig(String filename) throws Exception {\n-    String testConfig =\n-        Resources.toString(Resources.getResource(filename), Charset.defaultCharset());\n-    WorkbenchConfig workbenchConfig = new Gson().fromJson(testConfig, WorkbenchConfig.class);\n-    workbenchConfig.firecloud.debugEndpoints = true;\n-    return workbenchConfig;\n-  }\n-\n-  private FireCloudService getTestService() throws Exception {\n-    return createService(loadConfig(\"config_test.json\"));\n-  }\n-\n-  private FireCloudService getProdService() throws Exception {\n-    return createService(loadConfig(\"config_prod.json\"));\n+    config = loadConfig(\"config_test.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjMyNg==", "bodyText": "aside: What we are calling integration tests are what I might have called smoke tests. Both are useful, but I'd have expected a full e2e test to exercise a whole user journey or at least a good chunk of it. If all we're doing is asking the services what their opinions are of their status, then I'm not sure how robust that is or if we're really covering very much code.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362856326", "createdAt": "2020-01-03T15:46:02Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -2,130 +2,47 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n import java.io.IOException;\n-import java.nio.charset.Charset;\n import org.junit.Before;\n import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.ApiException;\n import org.pmiops.workbench.firecloud.FireCloudService;\n import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n-import org.pmiops.workbench.firecloud.FirecloudRetryHandler;\n-import org.pmiops.workbench.firecloud.api.BillingApi;\n-import org.pmiops.workbench.firecloud.api.GroupsApi;\n import org.pmiops.workbench.firecloud.api.NihApi;\n import org.pmiops.workbench.firecloud.api.ProfileApi;\n-import org.pmiops.workbench.firecloud.api.StaticNotebooksApi;\n-import org.pmiops.workbench.firecloud.api.StatusApi;\n-import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudMe;\n-import org.pmiops.workbench.test.Providers;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.annotation.Qualifier;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-@RunWith(SpringRunner.class)\n-@ContextConfiguration(classes = {IntegrationTestConfig.class})\n-public class FireCloudIntegrationTest {\n+public class FireCloudIntegrationTest extends BaseIntegrationTest {\n \n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real users/workspaces against production FireCloud is not\n-   * recommended at this time.\n-   */\n-  @Mock private BillingApi billingApi;\n-  @Mock private WorkspacesApi workspacesApi;\n-  @Mock private GroupsApi allOfUsGroupsApi;\n-  @Mock private WorkspacesApi workspaceAclsApi;\n-  @Mock private StaticNotebooksApi staticNotebooksApi;\n-  @Mock private ProfileApi profileApi;\n-  @Mock private NihApi nihApi;\n-\n-  // N.B. this will load the default service account credentials for whatever AoU environment\n-  // is set when running integration tests. This should be the test environment.\n-  @Autowired\n-  @Qualifier(Constants.DEFAULT_SERVICE_ACCOUNT_CREDS)\n-  private GoogleCredential serviceAccountCredential;\n+  @Autowired private FireCloudService service;\n \n-  @Autowired private ServiceAccounts serviceAccounts;\n-\n-  @Autowired\n-  @Qualifier(Constants.FIRECLOUD_ADMIN_CREDS)\n-  private GoogleCredential fireCloudAdminCredential;\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.firecloud\")\n+  @Import({FireCloudServiceImpl.class})\n+  static class Configuration {}\n \n   @Before\n   public void setUp() throws IOException {\n-    // Get a refreshed access token for the FireCloud service account credentials.\n-    serviceAccountCredential =\n-        serviceAccountCredential.createScoped(FireCloudServiceImpl.FIRECLOUD_API_OAUTH_SCOPES);\n-    serviceAccountCredential.refreshToken();\n-  }\n-\n-  /**\n-   * Creates a FireCloudService instance with the FireCloud base URL corresponding to the given\n-   * WorkbenchConfig. Note that this will always use the test environment's default service account\n-   * credentials when making API calls. It shouldn't be possible to make authenticated calls to the\n-   * FireCloud prod environment.\n-   *\n-   * <p>This method mostly exists to allow us to run a status-check against both FC dev & prod\n-   * within the same integration test run.\n-   */\n-  private FireCloudService createService(WorkbenchConfig config) {\n-    ApiClient apiClient =\n-        new ApiClient()\n-            .setBasePath(config.firecloud.baseUrl)\n-            .setDebugging(config.firecloud.debugEndpoints);\n-    apiClient.setAccessToken(serviceAccountCredential.getAccessToken());\n-\n-    return new FireCloudServiceImpl(\n-        Providers.of(config),\n-        Providers.of(profileApi),\n-        Providers.of(billingApi),\n-        Providers.of(allOfUsGroupsApi),\n-        Providers.of(nihApi),\n-        Providers.of(workspacesApi),\n-        Providers.of(workspaceAclsApi),\n-        Providers.of(new StatusApi(apiClient)),\n-        Providers.of(staticNotebooksApi),\n-        new FirecloudRetryHandler(new NoBackOffPolicy()),\n-        serviceAccounts,\n-        Providers.of(fireCloudAdminCredential));\n-  }\n-\n-  private WorkbenchConfig loadConfig(String filename) throws Exception {\n-    String testConfig =\n-        Resources.toString(Resources.getResource(filename), Charset.defaultCharset());\n-    WorkbenchConfig workbenchConfig = new Gson().fromJson(testConfig, WorkbenchConfig.class);\n-    workbenchConfig.firecloud.debugEndpoints = true;\n-    return workbenchConfig;\n-  }\n-\n-  private FireCloudService getTestService() throws Exception {\n-    return createService(loadConfig(\"config_test.json\"));\n-  }\n-\n-  private FireCloudService getProdService() throws Exception {\n-    return createService(loadConfig(\"config_prod.json\"));\n+    config = loadConfig(\"config_test.json\");\n   }\n \n   @Test\n-  public void testStatusProd() throws Exception {\n-    assertThat(getProdService().getFirecloudStatus()).isTrue();\n+  public void testStatusProd() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjU0NQ==", "bodyText": "I'd move this username to an integration test config file, especially if it's a real account.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362856545", "createdAt": "2020-01-03T15:46:41Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/FireCloudIntegrationTest.java", "diffHunk": "@@ -138,8 +55,7 @@ public void testStatusDev() throws Exception {\n   @Test\n   public void testImpersonatedProfileCall() throws Exception {\n     ApiClient apiClient =\n-        getTestService()\n-            .getApiClientWithImpersonation(\"integration-test-user@fake-research-aou.org\");\n+        service.getApiClientWithImpersonation(\"integration-test-user@fake-research-aou.org\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg1NjgyMg==", "bodyText": "I'd name this so it's more obviously a Spring configuration, e.g. IntegrationTestSpringConfiguration. There are many kinds of configs.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362856822", "createdAt": "2020-01-03T15:47:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/IntegrationTestConfig.java", "diffHunk": "@@ -1,100 +1,24 @@\n package org.pmiops.workbench;\n \n-import static org.springframework.context.annotation.FilterType.ASSIGNABLE_TYPE;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n import com.google.api.client.http.HttpTransport;\n import com.google.api.client.http.apache.ApacheHttpTransport;\n-import com.google.common.io.Resources;\n-import com.google.gson.Gson;\n-import java.io.IOException;\n-import java.nio.charset.Charset;\n-import org.pmiops.workbench.auth.Constants;\n-import org.pmiops.workbench.auth.ServiceAccounts;\n import org.pmiops.workbench.config.CommonConfig;\n import org.pmiops.workbench.config.RetryConfig;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.StoredCredentialsConfig;\n import org.pmiops.workbench.firecloud.ApiClient;\n import org.pmiops.workbench.firecloud.FireCloudConfig;\n-import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.context.annotation.Bean;\n-import org.springframework.context.annotation.ComponentScan;\n-import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.Import;\n-import org.springframework.context.annotation.Lazy;\n import org.springframework.retry.backoff.BackOffPolicy;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n import org.springframework.retry.backoff.Sleeper;\n import org.springframework.retry.backoff.ThreadWaitSleeper;\n \n-@Configuration\n-@Import({RetryConfig.class, CommonConfig.class})\n-// Scan the google package, which we need for the CloudStorage bean.\n-@ComponentScan(\"org.pmiops.workbench.google\")\n-// Scan the ServiceAccounts class, but exclude other classes in auth (since they\n-// bring in JPA-related beans, which include a whole bunch of other deps that are\n-// more complicated than we need for now).\n-//\n-// TODO(gjuggler): move ServiceAccounts out of the auth package, or move the more\n-// dependency-ridden classes (e.g. ProfileService) out instead.\n-@ComponentScan(\n-    basePackageClasses = ServiceAccounts.class,\n-    useDefaultFilters = false,\n-    includeFilters = {\n-      @ComponentScan.Filter(type = ASSIGNABLE_TYPE, value = ServiceAccounts.class),\n-    })\n+@TestConfiguration\n+@Import({RetryConfig.class, CommonConfig.class, StoredCredentialsConfig.class})\n public class IntegrationTestConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NDE3MQ==", "bodyText": "I'd rename getNotebooksStatus to isNotebooksServiceUp(), as it better matches what it does and corresponds to a boolean.\nAgain, I'd rename this to NotebooksSmokeTest. I expected a lot more actual testing considering the boilerplate.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362864171", "createdAt": "2020-01-03T16:07:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/NotebooksIntegrationTest.java", "diffHunk": "@@ -3,47 +3,23 @@\n import static com.google.common.truth.Truth.assertThat;\n \n import org.junit.Test;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClientImpl;\n-import org.pmiops.workbench.notebooks.NotebooksRetryHandler;\n-import org.pmiops.workbench.notebooks.api.ClusterApi;\n-import org.pmiops.workbench.notebooks.api.NotebooksApi;\n-import org.pmiops.workbench.test.Providers;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-/** Created by brubenst on 5/8/18. */\n-public class NotebooksIntegrationTest {\n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real projects/clusters against production Notebooks is not\n-   * recommended at this time.\n-   */\n+public class NotebooksIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private LeonardoNotebooksClient leonardoNotebooksClient;\n \n-  @Mock private ClusterApi clusterApi;\n-  @Mock private NotebooksApi notebooksApi;\n-  @Mock private WorkspaceService workspaceService;\n-\n-  private final LeonardoNotebooksClient leonardoNotebooksClient =\n-      new LeonardoNotebooksClientImpl(\n-          Providers.of(clusterApi),\n-          Providers.of(notebooksApi),\n-          Providers.of(createConfig()),\n-          Providers.of(null),\n-          new NotebooksRetryHandler(new NoBackOffPolicy()),\n-          workspaceService);\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.notebooks\")\n+  @Import({LeonardoNotebooksClientImpl.class})\n+  static class Configuration {}\n \n   @Test\n   public void testStatus() {\n     assertThat(leonardoNotebooksClient.getNotebooksStatus()).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NDk5OA==", "bodyText": "please use a typed basePackages ref if possible, as above.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362864998", "createdAt": "2020-01-03T16:09:48Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/NotebooksIntegrationTest.java", "diffHunk": "@@ -3,47 +3,23 @@\n import static com.google.common.truth.Truth.assertThat;\n \n import org.junit.Test;\n-import org.mockito.Mock;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClient;\n import org.pmiops.workbench.notebooks.LeonardoNotebooksClientImpl;\n-import org.pmiops.workbench.notebooks.NotebooksRetryHandler;\n-import org.pmiops.workbench.notebooks.api.ClusterApi;\n-import org.pmiops.workbench.notebooks.api.NotebooksApi;\n-import org.pmiops.workbench.test.Providers;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.ComponentScan;\n+import org.springframework.context.annotation.Import;\n \n-/** Created by brubenst on 5/8/18. */\n-public class NotebooksIntegrationTest {\n-  /*\n-   * Mocked service providers are (currently) not available for functional integration tests.\n-   * Integration tests with real projects/clusters against production Notebooks is not\n-   * recommended at this time.\n-   */\n+public class NotebooksIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private LeonardoNotebooksClient leonardoNotebooksClient;\n \n-  @Mock private ClusterApi clusterApi;\n-  @Mock private NotebooksApi notebooksApi;\n-  @Mock private WorkspaceService workspaceService;\n-\n-  private final LeonardoNotebooksClient leonardoNotebooksClient =\n-      new LeonardoNotebooksClientImpl(\n-          Providers.of(clusterApi),\n-          Providers.of(notebooksApi),\n-          Providers.of(createConfig()),\n-          Providers.of(null),\n-          new NotebooksRetryHandler(new NoBackOffPolicy()),\n-          workspaceService);\n+  @TestConfiguration\n+  @ComponentScan(\"org.pmiops.workbench.notebooks\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NTQ4OA==", "bodyText": "Do we need the Impl in the middle of the test class name (here and above)?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362865488", "createdAt": "2020-01-03T16:11:07Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -2,37 +2,23 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.apache.ApacheHttpTransport;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n import java.time.Clock;\n import java.util.Map;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.test.Providers;\n+import org.pmiops.workbench.BaseIntegrationTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n import org.springframework.retry.policy.SimpleRetryPolicy;\n import org.springframework.retry.support.RetryTemplate;\n \n-public class DirectoryServiceImplIntegrationTest {\n-  private DirectoryServiceImpl service;\n-  private final GoogleCredential googleCredential = getGoogleCredential();\n-  private final WorkbenchConfig workbenchConfig = createConfig();\n-  private final ApacheHttpTransport httpTransport = new ApacheHttpTransport();\n+public class DirectoryServiceImplIntegrationTest extends BaseIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NjA0MA==", "bodyText": "Wait, so this test is explicitly making sure usernames are recyclable? I didn't know we allowed that. What's the benefit of allowing that?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362866040", "createdAt": "2020-01-03T16:12:39Z", "author": {"login": "jaycarlton"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -2,37 +2,23 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.apache.ApacheHttpTransport;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n import java.time.Clock;\n import java.util.Map;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.test.Providers;\n+import org.pmiops.workbench.BaseIntegrationTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n import org.springframework.retry.policy.SimpleRetryPolicy;\n import org.springframework.retry.support.RetryTemplate;\n \n-public class DirectoryServiceImplIntegrationTest {\n-  private DirectoryServiceImpl service;\n-  private final GoogleCredential googleCredential = getGoogleCredential();\n-  private final WorkbenchConfig workbenchConfig = createConfig();\n-  private final ApacheHttpTransport httpTransport = new ApacheHttpTransport();\n+public class DirectoryServiceImplIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private DirectoryService service;\n \n-  @Before\n-  public void setUp() {\n-    service =\n-        new DirectoryServiceImpl(\n-            Providers.of(googleCredential),\n-            Providers.of(workbenchConfig),\n-            httpTransport,\n-            new GoogleRetryHandler(new NoBackOffPolicy()));\n-  }\n+  @TestConfiguration\n+  @Import(DirectoryServiceImpl.class)\n+  static class Configuration {}\n \n   @Test\n   public void testDummyUsernameIsNotTaken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NzE2Mw==", "bodyText": "I was very pro-utility class until I realized just how much Spring and Mockito aren't excited about working with them. If there are unit tests you want to write that depend on any of these functions, you can't inject a mock.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362867163", "createdAt": "2020-01-03T16:15:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NzUzMw==", "bodyText": "I'd probably have a verb in the function name, like getRefreshedWorkbenchAccessToken()", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362867533", "createdAt": "2020-01-03T16:16:28Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {\n \n-  private final HttpTransport httpTransport;\n-\n-  @Autowired\n-  public ServiceAccounts(HttpTransport httpTransport) {\n-    this.httpTransport = httpTransport;\n-  }\n-\n-  public GoogleCredential.Builder getCredentialBuilder() {\n-    return new GoogleCredential.Builder();\n-  }\n+  private static final String SIGN_JWT_URL_FORMAT =\n+      \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n    * Retrieves an access token for the Workbench server service account. This should be used\n    * carefully, as this account is generally more privileged than an end user researcher account.\n    */\n-  public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, List<String> scopes)\n-      throws IOException {\n-    // When running locally, we get application default credentials in a different way than\n-    // when running in Cloud.\n-    if (workbenchEnvironment.isDevelopment()) {\n-      GoogleCredential credential = GoogleCredential.getApplicationDefault().createScoped(scopes);\n-      credential.refreshToken();\n-      return credential.getAccessToken();\n-    }\n-    AppIdentityService appIdentity = AppIdentityServiceFactory.getAppIdentityService();\n-    final AppIdentityService.GetAccessTokenResult accessTokenResult =\n-        appIdentity.getAccessToken(scopes);\n-    return accessTokenResult.getAccessToken();\n+  public static String workbenchAccessToken(List<String> scopes) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NzcxOA==", "bodyText": "nit: can this just be chained with the statement prior?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362867718", "createdAt": "2020-01-03T16:16:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {\n \n-  private final HttpTransport httpTransport;\n-\n-  @Autowired\n-  public ServiceAccounts(HttpTransport httpTransport) {\n-    this.httpTransport = httpTransport;\n-  }\n-\n-  public GoogleCredential.Builder getCredentialBuilder() {\n-    return new GoogleCredential.Builder();\n-  }\n+  private static final String SIGN_JWT_URL_FORMAT =\n+      \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n    * Retrieves an access token for the Workbench server service account. This should be used\n    * carefully, as this account is generally more privileged than an end user researcher account.\n    */\n-  public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, List<String> scopes)\n-      throws IOException {\n-    // When running locally, we get application default credentials in a different way than\n-    // when running in Cloud.\n-    if (workbenchEnvironment.isDevelopment()) {\n-      GoogleCredential credential = GoogleCredential.getApplicationDefault().createScoped(scopes);\n-      credential.refreshToken();\n-      return credential.getAccessToken();\n-    }\n-    AppIdentityService appIdentity = AppIdentityServiceFactory.getAppIdentityService();\n-    final AppIdentityService.GetAccessTokenResult accessTokenResult =\n-        appIdentity.getAccessToken(scopes);\n-    return accessTokenResult.getAccessToken();\n+  public static String workbenchAccessToken(List<String> scopes) throws IOException {\n+    GoogleCredentials scopedCreds = GoogleCredentials.getApplicationDefault().createScoped(scopes);\n+    scopedCreds.refresh();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2Nzk5NA==", "bodyText": "is this the username property (i.e. not contact email) in the new usage? If so, I recommend username. as a parameter name.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362867994", "createdAt": "2020-01-03T16:17:47Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -56,30 +30,18 @@ public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, Li\n    *\n    * <p>See docs/domain-delegation.md for more details.\n    *\n-   * @param serviceAccountCredential\n+   * @param originalCredentials\n    * @param userEmail Email address of the user to impersonate.\n    * @param scopes The list of Google / OAuth API scopes to be authorized for.\n    * @return\n    * @throws IOException\n    */\n-  public GoogleCredential getImpersonatedCredential(\n-      GoogleCredential serviceAccountCredential, String userEmail, List<String> scopes)\n+  public static GoogleCredentials getImpersonatedCredentials(\n+      GoogleCredentials originalCredentials, String userEmail, List<String> scopes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2ODczNw==", "bodyText": "nit: I'd probably abreviate Garbage Collection as gc and spell out the rest, like gcServiceAccountCredentials. Not used to seeing abbreviations in the middle of identifiers.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362868737", "createdAt": "2020-01-03T16:19:53Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/BillingGarbageCollectionService.java", "diffHunk": "@@ -35,7 +35,7 @@\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n   private final Provider<CloudStorageService> cloudStorageServiceProvider;\n   private final Clock clock;\n-  private final LoadingCache<String, GoogleCredential> garbageCollectionSACredentials;\n+  private final LoadingCache<String, GoogleCredentials> garbageCollectionSACredentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2OTA0OA==", "bodyText": "Can we factor it out a bit more and inject a Provider<GoogleCredentials> that always gives you refreshed ones? Having to call refresh() like this is kinda temporal coupling, and in any case, we shouldn't expect a programmer to remember to do something we're not willing to ask the computer to remember. So if the provider doesn't work, we can at least have a helper method that fetches and refreshes in one shot and returns one ready to go, RAII-style.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362869048", "createdAt": "2020-01-03T16:20:45Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/BillingGarbageCollectionService.java", "diffHunk": "@@ -137,13 +137,12 @@ private void transferOwnership(final String projectName) {\n     fireCloudService.addOwnerToBillingProject(garbageCollectionSA, projectName);\n \n     try {\n-      final GoogleCredential gcsaCredential =\n+      final GoogleCredentials gcsaCredential =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4MTU5ODE0", "url": "https://github.com/all-of-us/workbench/pull/2962#pullrequestreview-338159814", "createdAt": "2020-01-03T16:26:19Z", "commit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjoyNjoxOVrOFaD5OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QxNjo1Mjo1NFrOFaEfXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3MTA5Ng==", "bodyText": "nit: recommend StoredCredentialsSpringConfiguration, as above.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362871096", "createdAt": "2020-01-03T16:26:19Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.pmiops.workbench.config;\n+\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import java.io.IOException;\n+import org.pmiops.workbench.auth.Constants;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.google.CloudStorageServiceImpl;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Lazy;\n+\n+@Configuration\n+@Import(CloudStorageServiceImpl.class)\n+public class StoredCredentialsConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3MzUwOQ==", "bodyText": "nit: After fiddling with this, I remember why this has to be a constant string rather than an enum name. Still, I'd likely rename Constants to AuthBeanNames.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362873509", "createdAt": "2020-01-03T16:32:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.pmiops.workbench.config;\n+\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import java.io.IOException;\n+import org.pmiops.workbench.auth.Constants;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.google.CloudStorageServiceImpl;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Lazy;\n+\n+@Configuration\n+@Import(CloudStorageServiceImpl.class)\n+public class StoredCredentialsConfig {\n+  /**\n+   * Service account credentials for Gsuite administration, corresponding to the \"gsuite-admin\"\n+   * service account in each environment. Enabled for domain-wide delegation of authority.\n+   */\n+  @Lazy\n+  @Bean(name = Constants.GSUITE_ADMIN_CREDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NDMyOQ==", "bodyText": "But it still needs to be refreshed during the task lifetime?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362874329", "createdAt": "2020-01-03T16:34:28Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/WebMvcConfig.java", "diffHunk": "@@ -66,56 +60,6 @@ public DbUser user(UserAuthentication userAuthentication) {\n     return userAuthentication.getUser();\n   }\n \n-  @Bean\n-  public WorkbenchEnvironment workbenchEnvironment() {\n-    return new WorkbenchEnvironment();\n-  }\n-\n-  /**\n-   * Service account credentials for Gsuite administration. These are derived from a key JSON file", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjgxODI2Mg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NDgwMw==", "bodyText": "nit: is there any additional context you want to add before rethrowing?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362874803", "createdAt": "2020-01-03T16:35:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "diffHunk": "@@ -55,14 +54,10 @@ public ApiClient endUserApiClient(\n \n   @Bean(name = SERVICE_ACCOUNT_API_CLIENT)\n   @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n-  public ApiClient allOfUsApiClient(\n-      WorkbenchEnvironment workbenchEnvironment,\n-      WorkbenchConfig workbenchConfig,\n-      ServiceAccounts serviceAccounts) {\n+  public ApiClient allOfUsApiClient(WorkbenchConfig workbenchConfig) {\n     ApiClient apiClient = buildApiClient(workbenchConfig);\n     try {\n-      apiClient.setAccessToken(\n-          serviceAccounts.workbenchAccessToken(workbenchEnvironment, BILLING_SCOPES));\n+      apiClient.setAccessToken(ServiceAccounts.workbenchAccessToken(BILLING_SCOPES));\n     } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NTQ2OA==", "bodyText": "Should you add @VisibleForTesting at the interface level too? I don't believe there's any differentiation between unit and other types of testing.\nWould it make sense to define this one level up, at some common parent interface for all REST services we depend on? Probably not worth it right now.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362875468", "createdAt": "2020-01-03T16:37:18Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudService.java", "diffHunk": "@@ -24,6 +24,9 @@\n \n   String WORKSPACE_DELIMITER = \"__\";\n \n+  /** Returns the base path for the FireCloud API. Exposed for integration testing purposes only. */\n+  String getBasePath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3NjI5MQ==", "bodyText": "nit: maybe rename this to getFirecloudApiBasePath() so it's more obviously distinct from the service's object model.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362876291", "createdAt": "2020-01-03T16:39:35Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -152,6 +150,12 @@ private void checkAndAddRegistered(FirecloudWorkspaceIngest workspaceIngest) {\n     workspaceIngest.setAuthorizationDomain(ImmutableList.of(registeredDomain));\n   }\n \n+  @Override\n+  @VisibleForTesting\n+  public String getBasePath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3Njk3NQ==", "bodyText": "I'd make these json strings constants or configurable.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362876975", "createdAt": "2020-01-03T16:41:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/google/CloudStorageServiceImpl.java", "diffHunk": "@@ -130,36 +130,36 @@ private String readCredentialsBucketString(String objectPath) {\n     return readBlobAsString(getBlob(getCredentialsBucketName(), objectPath));\n   }\n \n-  private GoogleCredential getCredential(final String objectPath) throws IOException {\n+  private ServiceAccountCredentials getCredentials(final String objectPath) throws IOException {\n     final String json = readCredentialsBucketString(objectPath);\n-    return GoogleCredential.fromStream(new ByteArrayInputStream(json.getBytes()));\n+    return ServiceAccountCredentials.fromStream(new ByteArrayInputStream(json.getBytes()));\n   }\n \n   @Override\n-  public GoogleCredential getGSuiteAdminCredentials() throws IOException {\n-    return getCredential(\"gsuite-admin-sa.json\");\n+  public ServiceAccountCredentials getGSuiteAdminCredentials() throws IOException {\n+    return getCredentials(\"gsuite-admin-sa.json\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3ODE4Mg==", "bodyText": "Would renaming this to GSuiteDirectoryService or similar be clearer at a glance? If you're looking in the tree view it's probably clear, but I like to jump around.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362878182", "createdAt": "2020-01-03T16:44:56Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryService.java", "diffHunk": "@@ -6,8 +6,21 @@\n public interface DirectoryService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3ODUwOA==", "bodyText": "maybe document when you should expect an IOException.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362878508", "createdAt": "2020-01-03T16:45:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/google/DirectoryServiceImpl.java", "diffHunk": "@@ -65,42 +69,35 @@\n               DirectoryScopes.ADMIN_DIRECTORY_USER_ALIAS_READONLY,\n           DirectoryScopes.ADMIN_DIRECTORY_USER, DirectoryScopes.ADMIN_DIRECTORY_USER_READONLY);\n \n-  private final Provider<GoogleCredential> googleCredentialProvider;\n+  private final Provider<ServiceAccountCredentials> googleCredentialsProvider;\n   private final Provider<WorkbenchConfig> configProvider;\n   private final HttpTransport httpTransport;\n   private final GoogleRetryHandler retryHandler;\n \n   @Autowired\n   public DirectoryServiceImpl(\n-      @Qualifier(\"gsuiteAdminCredentials\") Provider<GoogleCredential> googleCredentialProvider,\n+      @Qualifier(Constants.GSUITE_ADMIN_CREDS)\n+          Provider<ServiceAccountCredentials> googleCredentialsProvider,\n       Provider<WorkbenchConfig> configProvider,\n       HttpTransport httpTransport,\n       GoogleRetryHandler retryHandler) {\n-    this.googleCredentialProvider = googleCredentialProvider;\n+    this.googleCredentialsProvider = googleCredentialsProvider;\n     this.configProvider = configProvider;\n     this.httpTransport = httpTransport;\n     this.retryHandler = retryHandler;\n   }\n \n-  private GoogleCredential createCredentialWithImpersonation() {\n-    GoogleCredential googleCredential = googleCredentialProvider.get();\n+  private GoogleCredentials createCredentialWithImpersonation() throws IOException {\n     String gSuiteDomain = configProvider.get().googleDirectoryService.gSuiteDomain;\n-    return new GoogleCredential.Builder()\n-        .setTransport(httpTransport)\n-        .setJsonFactory(getDefaultJsonFactory())\n-        // Must be an admin user in the GSuite domain.\n-        .setServiceAccountUser(\"directory-service@\" + gSuiteDomain)\n-        .setServiceAccountId(googleCredential.getServiceAccountId())\n-        .setServiceAccountScopes(SCOPES)\n-        .setServiceAccountPrivateKey(googleCredential.getServiceAccountPrivateKey())\n-        .setServiceAccountPrivateKeyId(googleCredential.getServiceAccountPrivateKeyId())\n-        .setTokenServerEncodedUrl(googleCredential.getTokenServerEncodedUrl())\n-        .build();\n+    return ServiceAccounts.getImpersonatedCredentials(\n+        googleCredentialsProvider.get(), \"directory-service@\" + gSuiteDomain, SCOPES);\n   }\n \n-  private Directory getGoogleDirectoryService() {\n+  private Directory getGoogleDirectoryService() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3OTE2NQ==", "bodyText": "nit: if you still have appetite for refactoring, consider autowiring this. I believe we shouldn't need to use Providers.of() if we're setting up the test configuration properly.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362879165", "createdAt": "2020-01-03T16:47:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -171,25 +167,7 @@ public void setUp() throws MessagingException {\n             fireCloudService,\n             directoryService,\n             cloudStorageService,\n-            leonardoNotebooksClient,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg3OTc3NA==", "bodyText": "For me, the value in this kind of test is just live documentation rather than coverage. Also, if there are any failure modes (like when failing to refresh), it might be good to demonstrate what is expected to happen.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362879774", "createdAt": "2020-01-03T16:49:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/firecloud/FireCloudServiceImplTest.java", "diffHunk": "@@ -197,21 +190,6 @@ public void testNihCallbackServerError() throws Exception {\n     service.postNihCallback(any());\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MjY4NTY3NQ=="}, "originalCommit": {"oid": "d025dbbdb73641f8aff0d2252397a2226b9db406"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg4MDE5OQ==", "bodyText": "So is \"credentials\" singular now? Or both?", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362880199", "createdAt": "2020-01-03T16:50:48Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ServiceAccountAPIClientFactory.java", "diffHunk": "@@ -24,10 +24,10 @@ public ServiceAccountAPIClientFactory(String apiUrl) {\n   private ApiClient newApiClient(String apiUrl) throws IOException {\n     ApiClient apiClient = new ApiClient();\n     apiClient.setBasePath(apiUrl);\n-    GoogleCredential credential =\n-        GoogleCredential.getApplicationDefault().createScoped(Arrays.asList(FC_SCOPES));\n-    credential.refreshToken();\n-    apiClient.setAccessToken(credential.getAccessToken());\n+    GoogleCredentials credentials =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg4MDg2MQ==", "bodyText": "Why do we need to use a factory class instead of defining a bean in a configuration somewhere? If we had an ApiUrlProvider it could be beans all the way down...", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362880861", "createdAt": "2020-01-03T16:52:54Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ServiceAccountAPIClientFactory.java", "diffHunk": "@@ -1,6 +1,6 @@\n package org.pmiops.workbench.tools;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.Arrays;\n import org.pmiops.workbench.firecloud.ApiClient;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM4Mjk3NDgx", "url": "https://github.com/all-of-us/workbench/pull/2962#pullrequestreview-338297481", "createdAt": "2020-01-03T22:13:18Z", "commit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjoxMzoxOFrOFaKdjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wM1QyMjozNTowOFrOFaKwxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3ODcwMg==", "bodyText": "This is not making any statement about recycling usernames. It's testing that a user which has never been created is not taken. The test would break if someone create such a user, but hopefully they won't as indicated by the username.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362978702", "createdAt": "2020-01-03T22:13:18Z", "author": {"login": "calbach"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -2,37 +2,23 @@\n \n import static com.google.common.truth.Truth.assertThat;\n \n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.apache.ApacheHttpTransport;\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.IOException;\n import java.time.Clock;\n import java.util.Map;\n-import org.junit.Before;\n import org.junit.Test;\n-import org.pmiops.workbench.config.WorkbenchConfig;\n-import org.pmiops.workbench.test.Providers;\n+import org.pmiops.workbench.BaseIntegrationTest;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n import org.springframework.retry.backoff.ExponentialRandomBackOffPolicy;\n-import org.springframework.retry.backoff.NoBackOffPolicy;\n import org.springframework.retry.policy.SimpleRetryPolicy;\n import org.springframework.retry.support.RetryTemplate;\n \n-public class DirectoryServiceImplIntegrationTest {\n-  private DirectoryServiceImpl service;\n-  private final GoogleCredential googleCredential = getGoogleCredential();\n-  private final WorkbenchConfig workbenchConfig = createConfig();\n-  private final ApacheHttpTransport httpTransport = new ApacheHttpTransport();\n+public class DirectoryServiceImplIntegrationTest extends BaseIntegrationTest {\n+  @Autowired private DirectoryService service;\n \n-  @Before\n-  public void setUp() {\n-    service =\n-        new DirectoryServiceImpl(\n-            Providers.of(googleCredential),\n-            Providers.of(workbenchConfig),\n-            httpTransport,\n-            new GoogleRetryHandler(new NoBackOffPolicy()));\n-  }\n+  @TestConfiguration\n+  @Import(DirectoryServiceImpl.class)\n+  static class Configuration {}\n \n   @Test\n   public void testDummyUsernameIsNotTaken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjg2NjA0MA=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk3OTY1NQ==", "bodyText": "Per Jay's comment above, in this case I would either change this function to accept a GoogleCredentials as a parameter (the client would pass ADC), or revert the static change and go back to a component/service", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362979655", "createdAt": "2020-01-03T22:17:28Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -1,52 +1,26 @@\n package org.pmiops.workbench.auth;\n \n-import static com.google.api.client.googleapis.util.Utils.getDefaultJsonFactory;\n-\n-import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;\n-import com.google.api.client.http.HttpTransport;\n-import com.google.appengine.api.appidentity.AppIdentityService;\n-import com.google.appengine.api.appidentity.AppIdentityServiceFactory;\n+import com.google.auth.oauth2.GoogleCredentials;\n import java.io.IOException;\n import java.util.List;\n-import org.pmiops.workbench.config.WorkbenchEnvironment;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n  * Handles functionality related to loading service account credentials and generating derived /\n  * impersonated credentials.\n  */\n-@Component\n public class ServiceAccounts {\n \n-  private final HttpTransport httpTransport;\n-\n-  @Autowired\n-  public ServiceAccounts(HttpTransport httpTransport) {\n-    this.httpTransport = httpTransport;\n-  }\n-\n-  public GoogleCredential.Builder getCredentialBuilder() {\n-    return new GoogleCredential.Builder();\n-  }\n+  private static final String SIGN_JWT_URL_FORMAT =\n+      \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n   /**\n    * Retrieves an access token for the Workbench server service account. This should be used\n    * carefully, as this account is generally more privileged than an end user researcher account.\n    */\n-  public String workbenchAccessToken(WorkbenchEnvironment workbenchEnvironment, List<String> scopes)\n-      throws IOException {\n-    // When running locally, we get application default credentials in a different way than\n-    // when running in Cloud.\n-    if (workbenchEnvironment.isDevelopment()) {\n-      GoogleCredential credential = GoogleCredential.getApplicationDefault().createScoped(scopes);\n-      credential.refreshToken();\n-      return credential.getAccessToken();\n-    }\n-    AppIdentityService appIdentity = AppIdentityServiceFactory.getAppIdentityService();\n-    final AppIdentityService.GetAccessTokenResult accessTokenResult =\n-        appIdentity.getAccessToken(scopes);\n-    return accessTokenResult.getAccessToken();\n+  public static String workbenchAccessToken(List<String> scopes) throws IOException {\n+    GoogleCredentials scopedCreds = GoogleCredentials.getApplicationDefault().createScoped(scopes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MDY1NQ==", "bodyText": "Probably just a TODO: this method (and friends) should not exist on cloudStorageService. Now that you have this bean, I would remove it there, and just have this call a basic readBlob() method instead; knowledge of that file's name etc would be better encoded in this provider.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362980655", "createdAt": "2020-01-03T22:21:31Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/config/StoredCredentialsConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.pmiops.workbench.config;\n+\n+import com.google.auth.oauth2.ServiceAccountCredentials;\n+import java.io.IOException;\n+import org.pmiops.workbench.auth.Constants;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.pmiops.workbench.google.CloudStorageServiceImpl;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Lazy;\n+\n+@Configuration\n+@Import(CloudStorageServiceImpl.class)\n+public class StoredCredentialsConfig {\n+  /**\n+   * Service account credentials for Gsuite administration, corresponding to the \"gsuite-admin\"\n+   * service account in each environment. Enabled for domain-wide delegation of authority.\n+   */\n+  @Lazy\n+  @Bean(name = Constants.GSUITE_ADMIN_CREDS)\n+  public ServiceAccountCredentials gsuiteAdminCredential(CloudStorageService cloudStorageService)\n+      throws IOException {\n+    return cloudStorageService.getGSuiteAdminCredentials();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MTY5Mg==", "bodyText": "Hmmm... this is importing all of the subclasses of RetryConfig.ResponseCodeRetryPolicy. That seems a bit circular to me. What was the rationale for this change? Please also add a comment here explaining the criteria for adding another handler here.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362981692", "createdAt": "2020-01-03T22:26:02Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/config/RetryConfig.java", "diffHunk": "@@ -14,6 +18,7 @@\n import org.springframework.retry.policy.SimpleRetryPolicy;\n \n @Configuration\n+@Import({NotebooksRetryHandler.class, GoogleRetryHandler.class, FirecloudRetryHandler.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MjYzMw==", "bodyText": "package private doesn't seem correct here - is the intent that subclasses can modify this? If so, probably should be public or protected (likewise for loadConfig)", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362982633", "createdAt": "2020-01-03T22:30:15Z", "author": {"login": "calbach"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MzYyMw==", "bodyText": "I'd be a bit worried about state carrying over between test cases. Perhaps a setup/tearDown base method integrated approach would be safer. i.e. setUp() calls an optional method getWorkbenchConfig() (used when there's a consistent config used for the whole test class), tearDown() nulls it out. Still allow direct access to config in case a subclass needs to customize the config per individual test cases.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r362983623", "createdAt": "2020-01-03T22:35:08Z", "author": {"login": "calbach"}, "path": "api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+package org.pmiops.workbench;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+\n+@RunWith(SpringRunner.class)\n+@WebAppConfiguration\n+@Import({IntegrationTestConfig.class})\n+public abstract class BaseIntegrationTest {\n+\n+  static WorkbenchConfig config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NjA3NjA0", "url": "https://github.com/all-of-us/workbench/pull/2962#pullrequestreview-339607604", "createdAt": "2020-01-08T01:40:20Z", "commit": {"oid": "2e7e0760ee5b5e6a8a08a675007d338c048c0aa3"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMTo0MDoyMVrOFbKvpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQwMTo0Mzo0MVrOFbKyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAzMTkxMQ==", "bodyText": "Sorry, I missed your original request from me. Not sure why we were doing things this way - reading from GCS seems totally fine. Either as part of this, or as a follow-up cleanup ticket, I would also teardown the code that bundles the keyfile into the application itself: \n  \n    \n      workbench/api/libproject/devstart.rb\n    \n    \n         Line 344\n      in\n      dee66cf\n    \n    \n    \n    \n\n        \n          \n           def get_gsuite_admin_key(project)", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r364031911", "createdAt": "2020-01-08T01:40:21Z", "author": {"login": "calbach"}, "path": "api/src/integration/java/org/pmiops/workbench/google/DirectoryServiceImplIntegrationTest.java", "diffHunk": "@@ -80,20 +66,4 @@ private static RetryTemplate retryTemplate() {\n     tmpl.setThrowLastExceptionOnExhausted(true);\n     return tmpl;\n   }\n-\n-  private static GoogleCredential getGoogleCredential() {\n-    try {\n-      String saKeyPath = \"src/main/webapp/WEB-INF/gsuite-admin-sa.json\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e7e0760ee5b5e6a8a08a675007d338c048c0aa3"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAzMjU2Ng==", "bodyText": "Thanks, I find this to be much clearer.", "url": "https://github.com/all-of-us/workbench/pull/2962#discussion_r364032566", "createdAt": "2020-01-08T01:43:41Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/config/RetryConfig.java", "diffHunk": "@@ -14,6 +18,7 @@\n import org.springframework.retry.policy.SimpleRetryPolicy;\n \n @Configuration\n+@Import({NotebooksRetryHandler.class, GoogleRetryHandler.class, FirecloudRetryHandler.class})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mjk4MTY5Mg=="}, "originalCommit": {"oid": "281abe711549f0b43bbcb3c7ad9b1ddc9d9c83e6"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbe0b635d941e750d2ec260194229a30cb9a3b59", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/fbe0b635d941e750d2ec260194229a30cb9a3b59", "committedDate": "2020-01-08T18:54:22Z", "message": "Convert use of deprecated GoogleCredential to GoogleCredentials"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b3ac5ca120314d102e5a3f26f662fb3388592bc", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/3b3ac5ca120314d102e5a3f26f662fb3388592bc", "committedDate": "2020-01-08T18:54:53Z", "message": "Spotless reformat."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e86e752dc21efdd59eb9dd7ef820662a3c5453a9", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/e86e752dc21efdd59eb9dd7ef820662a3c5453a9", "committedDate": "2020-01-08T18:55:08Z", "message": "Get integration tests into working shape."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7632a05b48e0e8ca0ec0c7f979d233bec30fc98", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/c7632a05b48e0e8ca0ec0c7f979d233bec30fc98", "committedDate": "2020-01-08T18:55:49Z", "message": "Simplify some of the integration test config and remove unused WorkbenchEnvironment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29cba38defabe90efed047c8a9374092cbbbf586", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/29cba38defabe90efed047c8a9374092cbbbf586", "committedDate": "2020-01-08T18:55:49Z", "message": "Autowire the firecloud integration tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17903b14f4fd075961698bac7cb5f092228ff059", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/17903b14f4fd075961698bac7cb5f092228ff059", "committedDate": "2020-01-08T18:55:49Z", "message": "Further simplifications to integration test config and code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "734d9f6e6acea18e45d2a240c91191af4047060e", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/734d9f6e6acea18e45d2a240c91191af4047060e", "committedDate": "2020-01-08T18:55:49Z", "message": "Java formatting."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f60be2549d5e987220ff1a359b8aa0215800523", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/5f60be2549d5e987220ff1a359b8aa0215800523", "committedDate": "2020-01-08T18:55:49Z", "message": "Remove a couple more ComponentScans"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eda529c260b1b85428d6023c9a15b1d0016c01b9", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/eda529c260b1b85428d6023c9a15b1d0016c01b9", "committedDate": "2020-01-08T18:55:49Z", "message": "Fix command-line tools."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6b1684dd8ee21e86753f7526daf652dfce4fce3", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/d6b1684dd8ee21e86753f7526daf652dfce4fce3", "committedDate": "2020-01-08T18:55:49Z", "message": "Formatting fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f37d7a02ccb99f69daa5323fee720d1f432030b8", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/f37d7a02ccb99f69daa5323fee720d1f432030b8", "committedDate": "2020-01-08T18:55:49Z", "message": "Formatting, and remove some unnecessary log statements."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01454bce8b28c677057e0a3be44c4e15c728d661", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/01454bce8b28c677057e0a3be44c4e15c728d661", "committedDate": "2020-01-08T18:55:50Z", "message": "Bring back import of IntegrationTestConfig in integration tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dac86805894b40e2561eb40bf740d9939fc85cf2", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/dac86805894b40e2561eb40bf740d9939fc85cf2", "committedDate": "2020-01-08T18:55:50Z", "message": "Further simplify our config story for integration tests by using @WebAppConfiguration to load a request context."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90ea620161a5da31ab6a3c44df97dd99723dff71", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/90ea620161a5da31ab6a3c44df97dd99723dff71", "committedDate": "2020-01-08T18:55:50Z", "message": "Minor tweaks to comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "222da778bec258b43ffef49e2b0c8c9328fda32d", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/222da778bec258b43ffef49e2b0c8c9328fda32d", "committedDate": "2020-01-08T18:55:50Z", "message": "Changes & improvements from first round of PR review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a35721c1c68ec3bc8a9f2361a295fbb1c7ce6ebe", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/a35721c1c68ec3bc8a9f2361a295fbb1c7ce6ebe", "committedDate": "2020-01-08T19:11:42Z", "message": "Fix usage of getUsername() and add a note to DbUser model."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2e7e0760ee5b5e6a8a08a675007d338c048c0aa3", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/2e7e0760ee5b5e6a8a08a675007d338c048c0aa3", "committedDate": "2020-01-07T17:09:58Z", "message": "Changes & improvements from first round of PR review."}, "afterCommit": {"oid": "a35721c1c68ec3bc8a9f2361a295fbb1c7ce6ebe", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/a35721c1c68ec3bc8a9f2361a295fbb1c7ce6ebe", "committedDate": "2020-01-08T19:11:42Z", "message": "Fix usage of getUsername() and add a note to DbUser model."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0371b3b231edf782f780b324dc144cbbbfd94d97", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/0371b3b231edf782f780b324dc144cbbbfd94d97", "committedDate": "2020-01-09T14:36:36Z", "message": "Spotless format fixes."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3807, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}