{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzU4NTEx", "number": 3058, "title": "[RW-4348][risk=low] Disable some notebook related actions for inactive billing workspaces", "bodyText": "These are the actions we are preventing users from carrying out if their workspace is billing inactive.\n\nCreating notebooks\nDuplicating notebook\nExporting datasets to notebooks (from a resource card)\nExporting dataset to notebooks (from dataset builder page)\nStarting clusters\n\nPlayground Mode\nEdit Mode\n\n\n\nThis PR will also fixes\n\nRW-4351, a bug with a checkbox in the new dataset modal\nRW-4350, Project Owners have their actions disabled on recent resource cards\n\nI went with a fairly crude approach for handling the feature flag by sending back \"ACTIVE\" billing if the locked billing feature is disabled. I did this because it involved adding 2 switches on the backend versus 10+ on the frontend.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-01-29T20:49:15Z", "url": "https://github.com/all-of-us/workbench/pull/3058", "merged": true, "mergeCommit": {"oid": "e3f428472828bedb9179cbf341352e982f914dc3"}, "closed": true, "closedAt": "2020-01-30T23:26:34Z", "author": {"login": "ericsong"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-5sJ1gH2gAyMzY4NzU4NTExOjM2NDMxNTNhODU0ODgyYzI5ZTQ0N2ZhMmJkNzhkZjY3YjliYmIzYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_itSoAH2gAyMzY4NzU4NTExOmJlMDZkNTI4MTBjOWMzNGUxMjI0NjllYjBmYTg1ZGQ3ZmVlYWYxOTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3643153a854882c29e447fa2bd78df67b9bbb3ac", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/3643153a854882c29e447fa2bd78df67b9bbb3ac", "committedDate": "2020-01-28T23:11:03Z", "message": "WIP - disabled create notebook and edit/playground mode. clone still needs tooltip trigger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a27fe24763ff18d89817909f5a221a07b7a851", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/22a27fe24763ff18d89817909f5a221a07b7a851", "committedDate": "2020-01-29T00:08:37Z", "message": "disabled export to notebook from new dataset"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f338c3394b0299f3e517bcfffa7a0af6dc3823cf", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/f338c3394b0299f3e517bcfffa7a0af6dc3823cf", "committedDate": "2020-01-29T17:33:07Z", "message": "Merge branch 'master' of github.com:all-of-us/workbench into songe/RW-4348"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27ad0a49453ccd88e4465182ba25950952e9ec62", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/27ad0a49453ccd88e4465182ba25950952e9ec62", "committedDate": "2020-01-29T18:22:52Z", "message": "disable export to notebook"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb34d9307c27c06f7385a3098913589a9e0f3bae", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/fb34d9307c27c06f7385a3098913589a9e0f3bae", "committedDate": "2020-01-29T18:49:40Z", "message": "add hover text to actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7460f2d529789ace49628c5aa4e1e3e1d50fbafc", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/7460f2d529789ace49628c5aa4e1e3e1d50fbafc", "committedDate": "2020-01-29T18:53:06Z", "message": "lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57dfd4aa5c968bba141f6431dac70be65fad3bc1", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/57dfd4aa5c968bba141f6431dac70be65fad3bc1", "committedDate": "2020-01-29T20:37:16Z", "message": "fix test, sending incorrect check state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5339adfac69ef57a09a150b6dd9199a3003e4ce4", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/5339adfac69ef57a09a150b6dd9199a3003e4ce4", "committedDate": "2020-01-29T21:44:15Z", "message": "return BillingStatus.ACTIVE if billing lockout feature is not enableD"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b90e2ade9aa56ddce2ad3353111e8cfaf35821b", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/1b90e2ade9aa56ddce2ad3353111e8cfaf35821b", "committedDate": "2020-01-29T21:44:25Z", "message": "remove unused interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fa40e641242a90c4f26b6d5cd13886f2fe1c044", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/3fa40e641242a90c4f26b6d5cd13886f2fe1c044", "committedDate": "2020-01-29T22:02:11Z", "message": "fix test failures. probs some more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8f8f42d045a527beac9bd9dc0025cd7bfc7714d", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/d8f8f42d045a527beac9bd9dc0025cd7bfc7714d", "committedDate": "2020-01-29T22:27:13Z", "message": "fix more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae1b2cf27eb3200e01254eabe4b7ed95f068e68f", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/ae1b2cf27eb3200e01254eabe4b7ed95f068e68f", "committedDate": "2020-01-29T22:38:08Z", "message": "fix bq test:"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8db2a58d6b84e74d5528e94895e7e20a2fd9110d", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/8db2a58d6b84e74d5528e94895e7e20a2fd9110d", "committedDate": "2020-01-29T22:47:02Z", "message": "relax type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/ca6c12534a514455b16688e52fad2ed30a2c6f97", "committedDate": "2020-01-29T23:05:38Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNTMwNzMy", "url": "https://github.com/all-of-us/workbench/pull/3058#pullrequestreview-350530732", "createdAt": "2020-01-30T01:13:36Z", "commit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxMzozNlrOFjcyPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyNjo1M1rOFjc_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjA5Mw==", "bodyText": "I'm not opposed to using immutables. This was in the interest of using the least strict type which in this case is Map. IMO, immutability is an implementation detail.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372716093", "createdAt": "2020-01-30T01:13:36Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -174,7 +181,7 @@ public void setDistinctWorkspaceLimit(int limit) {\n             .limit(distinctWorkspacelimit)\n             .collect(Collectors.toList());\n \n-    final ImmutableMap<Long, FirecloudWorkspaceResponse> idToLiveWorkspace =\n+    final Map<Long, DbWorkspace> idToDbWorkspace =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjQ3MA==", "bodyText": "I decided to return this value as part of the RecentResource API model because the response object is used to construct UI resource cards which needs this info. The alternative was to make a getWorkspaces() call for each workspace in the response list and that seemed too heavy handed.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372716470", "createdAt": "2020-01-30T01:15:08Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -247,12 +260,21 @@ public boolean hasValidBlobIdIfNotebookNamePresent(DbUserRecentResource dbUserRe\n   }\n \n   private RecentResource buildRecentResource(\n-      ImmutableMap<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n+      Map<Long, DbWorkspace> idToDbWorkspace,\n+      Map<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n       DbUserRecentResource dbUserRecentResource) {\n     RecentResource resource = TO_CLIENT.apply(dbUserRecentResource);\n     FirecloudWorkspaceResponse workspaceDetails =\n         idToFcWorkspaceResponse.get(dbUserRecentResource.getWorkspaceId());\n-    resource.setPermission(workspaceDetails.getAccessLevel());\n+    if (workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      resource.setWorkspaceBillingStatus(\n+          idToDbWorkspace.get(dbUserRecentResource.getWorkspaceId()).getBillingStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgyNg==", "bodyText": "I made this injectable so I can pull in the WorkbenchConfig provider.\nGood example of why static utility classes can be hard to refactor.\nI am guilty of writing this one heh.\nAlso, the name is intentionally a bit crude to draw attention to the need to migrate this class to the Mapstruct supported WorkspaceMapper.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372716826", "createdAt": "2020-01-30T01:16:34Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/ManualWorkspaceMapper.java", "diffHunk": "@@ -6,22 +6,34 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import javax.inject.Provider;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace.FirecloudWorkspaceId;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.RecentWorkspace;\n import org.pmiops.workbench.model.ResearchPurpose;\n import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.UserRole;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-public class WorkspaceConversionUtils {\n+// We should migrate over to the Mapstruct supported WorkspaceMapper\n+@Service\n+public class ManualWorkspaceMapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNzU0NA==", "bodyText": "AFAICS, we're using the @Autowired constructor so I removed this comment.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372717544", "createdAt": "2020-01-30T01:19:41Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -75,16 +75,15 @@\n   protected static final int RECENT_WORKSPACE_COUNT = 4;\n   private static final Logger log = Logger.getLogger(WorkspaceService.class.getName());\n \n-  // Note: Cannot use an @Autowired constructor with this version of Spring", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTM2Mw==", "bodyText": "I can see this being controversial but I felt like we don't really have a good way to organize shared code on the front end. Ex. no BillingService to shove this into.\nI've used this kind of approach with a global string file when I worked with Android and felt like it worked pretty well.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372719363", "createdAt": "2020-01-30T01:26:53Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/strings.ts", "diffHunk": "@@ -0,0 +1 @@\n+export const ACTION_DISABLED_INVALID_BILLING = 'A valid billing account is required for this action';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwOTc3NTEy", "url": "https://github.com/all-of-us/workbench/pull/3058#pullrequestreview-350977512", "createdAt": "2020-01-30T16:47:45Z", "commit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0Nzo0NVrOFjyJTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo0MzowMlrOFj5S4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjA2MA==", "bodyText": "I know the LiveWorkspace name predates this change but I still find it a bit confusing. Can you change it to idToFirecloudWorkspace or something along those lines?", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373066060", "createdAt": "2020-01-30T16:47:45Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -185,6 +192,12 @@ public void setDistinctWorkspaceLimit(int limit) {\n                                 new AbstractMap.SimpleImmutableEntry<>(\n                                     dbWorkspace.getWorkspaceId(), dbWorkspace)))\n             .flatMap(Streams::stream)\n+            .collect(\n+                ImmutableMap.toImmutableMap(\n+                    SimpleImmutableEntry::getKey, SimpleImmutableEntry::getValue));\n+\n+    final Map<Long, FirecloudWorkspaceResponse> idToLiveWorkspace =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1MjM3OQ==", "bodyText": "Is there a ticket to migrate this to Mapstruct, and if there isn't, can you please make one?", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373152379", "createdAt": "2020-01-30T19:36:32Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/ManualWorkspaceMapper.java", "diffHunk": "@@ -6,22 +6,34 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import javax.inject.Provider;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace.FirecloudWorkspaceId;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.RecentWorkspace;\n import org.pmiops.workbench.model.ResearchPurpose;\n import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.UserRole;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-public class WorkspaceConversionUtils {\n+// We should migrate over to the Mapstruct supported WorkspaceMapper\n+@Service\n+public class ManualWorkspaceMapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgyNg=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MjM0Mw==", "bodyText": "I'm ok with this, I've seen it work before when the number of strings was pretty small. If you end up with more than ten lines in here you want to start thinking about why the string can't be part of a tiny component or whatever but this is totally fine.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373182343", "createdAt": "2020-01-30T20:41:14Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/strings.ts", "diffHunk": "@@ -0,0 +1 @@\n+export const ACTION_DISABLED_INVALID_BILLING = 'A valid billing account is required for this action';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTM2Mw=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MzIwMg==", "bodyText": "Another alternative would be to change RecentResource to include the entire workspace, but then I think you're still calling out to firecloud on each request... just not returning as much.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373183202", "createdAt": "2020-01-30T20:43:02Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -247,12 +260,21 @@ public boolean hasValidBlobIdIfNotebookNamePresent(DbUserRecentResource dbUserRe\n   }\n \n   private RecentResource buildRecentResource(\n-      ImmutableMap<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n+      Map<Long, DbWorkspace> idToDbWorkspace,\n+      Map<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n       DbUserRecentResource dbUserRecentResource) {\n     RecentResource resource = TO_CLIENT.apply(dbUserRecentResource);\n     FirecloudWorkspaceResponse workspaceDetails =\n         idToFcWorkspaceResponse.get(dbUserRecentResource.getWorkspaceId());\n-    resource.setPermission(workspaceDetails.getAccessLevel());\n+    if (workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      resource.setWorkspaceBillingStatus(\n+          idToDbWorkspace.get(dbUserRecentResource.getWorkspaceId()).getBillingStatus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjQ3MA=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 100}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxMTkxNDI2", "url": "https://github.com/all-of-us/workbench/pull/3058#pullrequestreview-351191426", "createdAt": "2020-01-30T22:38:14Z", "commit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozODoxNVrOFj8Rog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjo0MTo0MVrOFj8WmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMjAzNA==", "bodyText": "Done - https://precisionmedicineinitiative.atlassian.net/browse/RW-4367", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373232034", "createdAt": "2020-01-30T22:38:15Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/ManualWorkspaceMapper.java", "diffHunk": "@@ -6,22 +6,34 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import javax.inject.Provider;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace.FirecloudWorkspaceId;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.RecentWorkspace;\n import org.pmiops.workbench.model.ResearchPurpose;\n import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.UserRole;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-public class WorkspaceConversionUtils {\n+// We should migrate over to the Mapstruct supported WorkspaceMapper\n+@Service\n+public class ManualWorkspaceMapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgyNg=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMjU2NA==", "bodyText": "Agreed, I felt the same. I'll change it", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373232564", "createdAt": "2020-01-30T22:39:39Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -185,6 +192,12 @@ public void setDistinctWorkspaceLimit(int limit) {\n                                 new AbstractMap.SimpleImmutableEntry<>(\n                                     dbWorkspace.getWorkspaceId(), dbWorkspace)))\n             .flatMap(Streams::stream)\n+            .collect(\n+                ImmutableMap.toImmutableMap(\n+                    SimpleImmutableEntry::getKey, SimpleImmutableEntry::getValue));\n+\n+    final Map<Long, FirecloudWorkspaceResponse> idToLiveWorkspace =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjA2MA=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMzMwNA==", "bodyText": "yeah... adding the entire workspace feels cleaner but it would defeat the purpose of this change which is to improve performance", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373233304", "createdAt": "2020-01-30T22:41:41Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -247,12 +260,21 @@ public boolean hasValidBlobIdIfNotebookNamePresent(DbUserRecentResource dbUserRe\n   }\n \n   private RecentResource buildRecentResource(\n-      ImmutableMap<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n+      Map<Long, DbWorkspace> idToDbWorkspace,\n+      Map<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n       DbUserRecentResource dbUserRecentResource) {\n     RecentResource resource = TO_CLIENT.apply(dbUserRecentResource);\n     FirecloudWorkspaceResponse workspaceDetails =\n         idToFcWorkspaceResponse.get(dbUserRecentResource.getWorkspaceId());\n-    resource.setPermission(workspaceDetails.getAccessLevel());\n+    if (workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      resource.setWorkspaceBillingStatus(\n+          idToDbWorkspace.get(dbUserRecentResource.getWorkspaceId()).getBillingStatus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjQ3MA=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43b39c1df29aa858479e3e78019a807babbb757e", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/43b39c1df29aa858479e3e78019a807babbb757e", "committedDate": "2020-01-30T22:58:00Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be06d52810c9c34e122469eb0fa85dd7feeaf198", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/be06d52810c9c34e122469eb0fa85dd7feeaf198", "committedDate": "2020-01-30T22:58:24Z", "message": "spotless"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3763, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}