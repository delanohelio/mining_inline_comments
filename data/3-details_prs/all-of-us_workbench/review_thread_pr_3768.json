{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTA0MzYw", "number": 3768, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowNDozMlrOENWSjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowNToxOVrOENWTrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDMyMTQwOnYy", "diffSide": "RIGHT", "path": "e2e/jest.test-setup.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowNDozMlrOGv-1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoxNjozNVrOGv_Lkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NTY2MQ==", "bodyText": "I think you can use fp.includes() to see if the host in in one of the names you have here.", "url": "https://github.com/all-of-us/workbench/pull/3768#discussion_r452965661", "createdAt": "2020-07-10T17:04:32Z", "author": {"login": "jaycarlton"}, "path": "e2e/jest.test-setup.ts", "diffHunk": "@@ -1,35 +1,37 @@\n const url = require('url');\n-\n const userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36';\n \n-// Runs this beforeEach() before test's beforeEach().\n-beforeEach(async () => {\n+/**\n+ * Before starting any test, set up page common properties:\n+ * - Page view port\n+ * - Page user-agent\n+ * - Page navigation timeout\n+ * - waitFor functions timeout\n+ */\n+beforeAll(async () => {\n+  await page.setViewport({ width: 0, height: 0 });\n   await page.setUserAgent(userAgent);\n-  // Refer to https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagesetdefaultnavigationtimeouttimeout\n+  // See https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagesetdefaultnavigationtimeouttimeout\n   await page.setDefaultNavigationTimeout(90000);\n   await page.setDefaultTimeout(60000);\n });\n \n-// Runs this afterEach() before test's afterEach().\n-afterEach(async () => {\n-  await page.deleteCookie(...await page.cookies());\n-  await jestPuppeteer.resetBrowser();\n-});\n-\n-// Runs this beforeAll() before test's beforeAll().\n-beforeAll(async () => {\n+/**\n+ * Before start of each test, enable network interception in new page and block unwanted requests.\n+ */\n+beforeEach(async () => {\n   await page.setRequestInterception(true);\n   page.on('request', async (request) => {\n     const requestUrl = url.parse(request.url(), true);\n     const host = requestUrl.hostname;\n-    // to improve page load performance, block requests if it is not for application functions.\n+    // to improve page load performance, block network requests unrelated to application.\n     try {\n       if (host === 'www.google-analytics.com'\n-       || host === 'accounts.youtube.com'\n-       || host === 'static.zdassets.com'\n-       || host === 'play.google.com'\n-       || request.url().endsWith('content-security-index-report')) {\n-        await request.abort()\n+         || host === 'accounts.youtube.com'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc0049423e4861605836130c40f726cb309f7a9"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3MTQxMQ==", "bodyText": "That's a good tip. I'll test out in future PR.", "url": "https://github.com/all-of-us/workbench/pull/3768#discussion_r452971411", "createdAt": "2020-07-10T17:16:35Z", "author": {"login": "aweng98"}, "path": "e2e/jest.test-setup.ts", "diffHunk": "@@ -1,35 +1,37 @@\n const url = require('url');\n-\n const userAgent = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36';\n \n-// Runs this beforeEach() before test's beforeEach().\n-beforeEach(async () => {\n+/**\n+ * Before starting any test, set up page common properties:\n+ * - Page view port\n+ * - Page user-agent\n+ * - Page navigation timeout\n+ * - waitFor functions timeout\n+ */\n+beforeAll(async () => {\n+  await page.setViewport({ width: 0, height: 0 });\n   await page.setUserAgent(userAgent);\n-  // Refer to https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagesetdefaultnavigationtimeouttimeout\n+  // See https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagesetdefaultnavigationtimeouttimeout\n   await page.setDefaultNavigationTimeout(90000);\n   await page.setDefaultTimeout(60000);\n });\n \n-// Runs this afterEach() before test's afterEach().\n-afterEach(async () => {\n-  await page.deleteCookie(...await page.cookies());\n-  await jestPuppeteer.resetBrowser();\n-});\n-\n-// Runs this beforeAll() before test's beforeAll().\n-beforeAll(async () => {\n+/**\n+ * Before start of each test, enable network interception in new page and block unwanted requests.\n+ */\n+beforeEach(async () => {\n   await page.setRequestInterception(true);\n   page.on('request', async (request) => {\n     const requestUrl = url.parse(request.url(), true);\n     const host = requestUrl.hostname;\n-    // to improve page load performance, block requests if it is not for application functions.\n+    // to improve page load performance, block network requests unrelated to application.\n     try {\n       if (host === 'www.google-analytics.com'\n-       || host === 'accounts.youtube.com'\n-       || host === 'static.zdassets.com'\n-       || host === 'play.google.com'\n-       || request.url().endsWith('content-security-index-report')) {\n-        await request.abort()\n+         || host === 'accounts.youtube.com'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NTY2MQ=="}, "originalCommit": {"oid": "bcc0049423e4861605836130c40f726cb309f7a9"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDMyNDI4OnYy", "diffSide": "RIGHT", "path": "e2e/jest.test-setup.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowNToxOVrOGv-21w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzoxMzozOVrOGv_GEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NjEwMw==", "bodyText": "Do you also need an afterAll? Or would that not let you inspect the browser after a failure?", "url": "https://github.com/all-of-us/workbench/pull/3768#discussion_r452966103", "createdAt": "2020-07-10T17:05:19Z", "author": {"login": "jaycarlton"}, "path": "e2e/jest.test-setup.ts", "diffHunk": "@@ -39,7 +41,15 @@ beforeAll(async () => {\n   });\n });\n \n-// Runs this afterAll() before test's afterAll().\n-afterAll(async () => {\n+/**\n+ * At the end of each test completion, do:\n+ * - Disable network interception.\n+ * - Delete broswer cookies.\n+ * - Reset global page and browser variables.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcc0049423e4861605836130c40f726cb309f7a9"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk3MDAwMw==", "bodyText": "I don't think need afterAll at this time. We don't set up local server or DB anything like that.", "url": "https://github.com/all-of-us/workbench/pull/3768#discussion_r452970003", "createdAt": "2020-07-10T17:13:39Z", "author": {"login": "aweng98"}, "path": "e2e/jest.test-setup.ts", "diffHunk": "@@ -39,7 +41,15 @@ beforeAll(async () => {\n   });\n });\n \n-// Runs this afterAll() before test's afterAll().\n-afterAll(async () => {\n+/**\n+ * At the end of each test completion, do:\n+ * - Disable network interception.\n+ * - Delete broswer cookies.\n+ * - Reset global page and browser variables.\n+ */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NjEwMw=="}, "originalCommit": {"oid": "bcc0049423e4861605836130c40f726cb309f7a9"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2652, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}