{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NjM2NDk2", "number": 3813, "title": "[RW-5033][risk=no] Scripts to generate a randomish multisample VCF", "bodyText": "Usage:\naschwart@failboat:~/Documents/dev/workbench/api$ ./project.rb randomize-vcf --vcf ~/Documents/dev/misc/synthetic_vcf_testing/NA12878_204126160130_R01C01.vcf.gz --number-of-copies 10 --output-dir ~/Documents/dev/misc/synthetic_vcf_testing/\naschwart@failboat:~/Documents/dev/workbench/api$  ./project.rb combine-vcfs --dir ~/Documents/dev/misc/synthetic_vcf_testing/ --output ~/Documents/dev/misc/synthetic_vcf_testing/combined.vcf\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test:local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-07-21T17:09:16Z", "url": "https://github.com/all-of-us/workbench/pull/3813", "merged": true, "mergeCommit": {"oid": "9ae4921395013516562bc06d3d9e4a9503c0fe97"}, "closed": true, "closedAt": "2020-07-24T16:38:12Z", "author": {"login": "als364"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc03EiqgH2gAyNDU0NjM2NDk2OjYxM2U4NDIxYjBjOGJiNmNlNzA2YWI0ZGVkZGQyOGFmYjMyZTQ1YTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4F9CRAH2gAyNDU0NjM2NDk2OmI0ZjZjZWNiMjYzOGFiZDMyMjUxMDQwM2I1NmEyODM1ODQ2Mzc4MzE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "613e8421b0c8bb6ce706ab4deddd28afb32e45a8", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/613e8421b0c8bb6ce706ab4deddd28afb32e45a8", "committedDate": "2020-07-14T14:39:53Z", "message": "pushing up for environment help"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8860f2effa560bd3abbab424e3d454810ee04f8", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/d8860f2effa560bd3abbab424e3d454810ee04f8", "committedDate": "2020-07-14T17:33:24Z", "message": "now in api/src/main"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a775e27e261ac499faffc13d9a3212757645aa5", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/2a775e27e261ac499faffc13d9a3212757645aa5", "committedDate": "2020-07-16T20:31:09Z", "message": "shelving, again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2262d418c9099b788a50c3a51af5726bf0e52396", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/2262d418c9099b788a50c3a51af5726bf0e52396", "committedDate": "2020-07-21T14:49:26Z", "message": "good staging point"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41051d5190bc89db9350a89e5c6eb99857656b27", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/41051d5190bc89db9350a89e5c6eb99857656b27", "committedDate": "2020-07-21T16:53:22Z", "message": "working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1480bf2873536150fa23170ef6e82f31cf6d035", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/e1480bf2873536150fa23170ef6e82f31cf6d035", "committedDate": "2020-07-21T17:08:22Z", "message": "revert unnecessary top level gradle changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6974b7d3292b4f1ad9f3de2f866f11672de14495", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/6974b7d3292b4f1ad9f3de2f866f11672de14495", "committedDate": "2020-07-21T17:49:04Z", "message": "spotless..."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNjc1NzA2", "url": "https://github.com/all-of-us/workbench/pull/3813#pullrequestreview-452675706", "createdAt": "2020-07-21T17:25:48Z", "commit": {"oid": "e1480bf2873536150fa23170ef6e82f31cf6d035"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoyNTo0OFrOG1CVUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0OTo1M1rOG1DPUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2NTkzNw==", "bodyText": "stale comment I think - don't want to change the alleles", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r458265937", "createdAt": "2020-07-21T17:25:48Z", "author": {"login": "calbach"}, "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class\n+)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\",\n+      fullName = \"SAMPLE_NAME_SUFFIX\",\n+      shortName = \"S\"\n+  )\n+  protected static String sampleNameSuffix;\n+\n+  static Random random = new Random();\n+\n+  private VariantContextWriter vcfWriter;\n+\n+  @Override\n+  public void apply(VariantContext variant, ReadsContext readsContext,\n+      ReferenceContext referenceContext, FeatureContext featureContext) {\n+    vcfWriter.add(randomizeVariant(variant));\n+  }\n+\n+  @Override\n+  public void onTraversalStart() {\n+    final VCFHeader inputHeader = getHeaderForVariants();\n+    final List<String> newSampleNames = inputHeader.getSampleNamesInOrder().stream()\n+        .map(RandomizeVcf::appendSuffixToSampleName)\n+        .collect(Collectors.toList());\n+    final VCFHeader outputHeader = new VCFHeader(inputHeader.getMetaDataInInputOrder(), newSampleNames);\n+    vcfWriter = this.createVCFWriter(outputVcf);\n+    vcfWriter.writeHeader(outputHeader);\n+  }\n+\n+  @Override\n+  public void closeTool() {\n+    if ( vcfWriter != null ) {\n+      vcfWriter.close();\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  protected static VariantContext randomizeVariant(VariantContext variant) {\n+    // This initializes most of the VariantContextBuilder fields to what they were in the original variant.\n+    // We just want to change the alleles, genotypes, and quality score.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1480bf2873536150fa23170ef6e82f31cf6d035"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI2ODgyNA==", "bodyText": "nit: looks like these builder methods can be chained", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r458268824", "createdAt": "2020-07-21T17:30:23Z", "author": {"login": "calbach"}, "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class\n+)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\",\n+      fullName = \"SAMPLE_NAME_SUFFIX\",\n+      shortName = \"S\"\n+  )\n+  protected static String sampleNameSuffix;\n+\n+  static Random random = new Random();\n+\n+  private VariantContextWriter vcfWriter;\n+\n+  @Override\n+  public void apply(VariantContext variant, ReadsContext readsContext,\n+      ReferenceContext referenceContext, FeatureContext featureContext) {\n+    vcfWriter.add(randomizeVariant(variant));\n+  }\n+\n+  @Override\n+  public void onTraversalStart() {\n+    final VCFHeader inputHeader = getHeaderForVariants();\n+    final List<String> newSampleNames = inputHeader.getSampleNamesInOrder().stream()\n+        .map(RandomizeVcf::appendSuffixToSampleName)\n+        .collect(Collectors.toList());\n+    final VCFHeader outputHeader = new VCFHeader(inputHeader.getMetaDataInInputOrder(), newSampleNames);\n+    vcfWriter = this.createVCFWriter(outputVcf);\n+    vcfWriter.writeHeader(outputHeader);\n+  }\n+\n+  @Override\n+  public void closeTool() {\n+    if ( vcfWriter != null ) {\n+      vcfWriter.close();\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  protected static VariantContext randomizeVariant(VariantContext variant) {\n+    // This initializes most of the VariantContextBuilder fields to what they were in the original variant.\n+    // We just want to change the alleles, genotypes, and quality score.\n+    VariantContextBuilder variantContextBuilder = new VariantContextBuilder(variant);\n+    variantContextBuilder.alleles(variant.getAlleles());\n+\n+    List<Genotype> randomizedGenotypes = variant.getGenotypes()\n+        .stream()\n+        .map(genotype -> randomizeGenotype(variant, genotype))\n+        .collect(Collectors.toList());\n+    GenotypesContext randomizedGenotypesContext = GenotypesContext.create(new ArrayList<>(randomizedGenotypes));\n+\n+    variantContextBuilder.genotypes(randomizedGenotypesContext);\n+\n+    // We want kind of random error. If there's no error, have no error for the new variant as well.\n+    // If there's error, fuzz the error.\n+    if (variant.hasLog10PError()) {\n+      variantContextBuilder.log10PError(random.nextDouble() * variant.getLog10PError());\n+    }\n+\n+    return variantContextBuilder.make();\n+  }\n+\n+  protected static Genotype randomizeGenotype(VariantContext variantContext, Genotype genotype) {\n+    GenotypeBuilder genotypeBuilder = new GenotypeBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1480bf2873536150fa23170ef6e82f31cf6d035"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI4MDc4Nw==", "bodyText": "opt: another way we could do this would be to take the global rate of no-call in the VCF file (just look it up manually and hardcode it here), then pick no call with the corresponding probability. This would probably be better since the current approach will result in strictly fewer no-calls w.r.t. the original VCF, and only in the same positions.\nI was curious so I looked at the frequencies of each genotype in the sample VCF:\n  27629 ./.\n1518493 0/0\n 106755 0/1\n 117349 1/0\n 138615 1/1\n   1123 2/2\n\nPerhaps this randomizer should also favor homozygous reference as well.", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r458280787", "createdAt": "2020-07-21T17:49:53Z", "author": {"login": "calbach"}, "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class\n+)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\",\n+      fullName = \"SAMPLE_NAME_SUFFIX\",\n+      shortName = \"S\"\n+  )\n+  protected static String sampleNameSuffix;\n+\n+  static Random random = new Random();\n+\n+  private VariantContextWriter vcfWriter;\n+\n+  @Override\n+  public void apply(VariantContext variant, ReadsContext readsContext,\n+      ReferenceContext referenceContext, FeatureContext featureContext) {\n+    vcfWriter.add(randomizeVariant(variant));\n+  }\n+\n+  @Override\n+  public void onTraversalStart() {\n+    final VCFHeader inputHeader = getHeaderForVariants();\n+    final List<String> newSampleNames = inputHeader.getSampleNamesInOrder().stream()\n+        .map(RandomizeVcf::appendSuffixToSampleName)\n+        .collect(Collectors.toList());\n+    final VCFHeader outputHeader = new VCFHeader(inputHeader.getMetaDataInInputOrder(), newSampleNames);\n+    vcfWriter = this.createVCFWriter(outputVcf);\n+    vcfWriter.writeHeader(outputHeader);\n+  }\n+\n+  @Override\n+  public void closeTool() {\n+    if ( vcfWriter != null ) {\n+      vcfWriter.close();\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  protected static VariantContext randomizeVariant(VariantContext variant) {\n+    // This initializes most of the VariantContextBuilder fields to what they were in the original variant.\n+    // We just want to change the alleles, genotypes, and quality score.\n+    VariantContextBuilder variantContextBuilder = new VariantContextBuilder(variant);\n+    variantContextBuilder.alleles(variant.getAlleles());\n+\n+    List<Genotype> randomizedGenotypes = variant.getGenotypes()\n+        .stream()\n+        .map(genotype -> randomizeGenotype(variant, genotype))\n+        .collect(Collectors.toList());\n+    GenotypesContext randomizedGenotypesContext = GenotypesContext.create(new ArrayList<>(randomizedGenotypes));\n+\n+    variantContextBuilder.genotypes(randomizedGenotypesContext);\n+\n+    // We want kind of random error. If there's no error, have no error for the new variant as well.\n+    // If there's error, fuzz the error.\n+    if (variant.hasLog10PError()) {\n+      variantContextBuilder.log10PError(random.nextDouble() * variant.getLog10PError());\n+    }\n+\n+    return variantContextBuilder.make();\n+  }\n+\n+  protected static Genotype randomizeGenotype(VariantContext variantContext, Genotype genotype) {\n+    GenotypeBuilder genotypeBuilder = new GenotypeBuilder();\n+    genotypeBuilder.copy(genotype);\n+    genotypeBuilder.name(appendSuffixToSampleName(genotype.getSampleName()));\n+    genotypeBuilder.alleles(randomizeAlleles(variantContext, genotype.getAlleles()));\n+    return genotypeBuilder.make();\n+  }\n+\n+  @VisibleForTesting\n+  protected static List<Allele> randomizeAlleles(VariantContext variantContext, List<Allele> genotypeAlleles) {\n+    // The alleles list on the VariantContext has first the reference and then all possible alternates.\n+    // For each genotype, we pick from among those possible alternates (or we put a no-call.)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1480bf2873536150fa23170ef6e82f31cf6d035"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7744e4dda9f2631bf0e1a0ded4caf98ddadf0b78", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/7744e4dda9f2631bf0e1a0ded4caf98ddadf0b78", "committedDate": "2020-07-21T20:13:35Z", "message": "project.rb commands"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3301d46d134747b27dbfbb830066f756b869d94", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/b3301d46d134747b27dbfbb830066f756b869d94", "committedDate": "2020-07-22T15:28:26Z", "message": "better GT generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4812d11e6fd9529c6ef278b8889b4101dd41dfb1", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/4812d11e6fd9529c6ef278b8889b4101dd41dfb1", "committedDate": "2020-07-22T15:49:21Z", "message": "spotless. again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2b91c832b2608a56c793896a5d0e43331e4f2b9", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/e2b91c832b2608a56c793896a5d0e43331e4f2b9", "committedDate": "2020-07-22T16:42:55Z", "message": "shelving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6bac045a3deb7e2f87c4be261fbd79905757ba7", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/d6bac045a3deb7e2f87c4be261fbd79905757ba7", "committedDate": "2020-07-22T18:01:56Z", "message": "fix whitespace bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b7ae1b338d6aa3f33300b5ec8981603efe09cf3", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/3b7ae1b338d6aa3f33300b5ec8981603efe09cf3", "committedDate": "2020-07-22T18:37:51Z", "message": "gradle subproject"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35140bdd553be49972b88b24d88cee7648fc0455", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/35140bdd553be49972b88b24d88cee7648fc0455", "committedDate": "2020-07-22T18:43:07Z", "message": "ugh typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8199241f8a9643b07fd3776ee800506b9ec4ac0b", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/8199241f8a9643b07fd3776ee800506b9ec4ac0b", "committedDate": "2020-07-22T18:46:35Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2d0ca920e12328a18c60d25fd454110cfbe8c34", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/d2d0ca920e12328a18c60d25fd454110cfbe8c34", "committedDate": "2020-07-22T18:48:52Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f26212fdeddb337c5bf5272b186af6fefeb7275", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/4f26212fdeddb337c5bf5272b186af6fefeb7275", "committedDate": "2020-07-22T18:49:30Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTg5NDEx", "url": "https://github.com/all-of-us/workbench/pull/3813#pullrequestreview-453589411", "createdAt": "2020-07-22T18:44:56Z", "commit": {"oid": "35140bdd553be49972b88b24d88cee7648fc0455"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0NDo1N1rOG1vkZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxODo0NjoyMlrOG1vnmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNzA3Nw==", "bodyText": "We don't have common-api anymore.", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459007077", "createdAt": "2020-07-22T18:44:57Z", "author": {"login": "als364"}, "path": ".gitignore", "diffHunk": "@@ -25,9 +26,7 @@ cron-emulator-err.log\n /api/src/generated\n /api/tools/build/*\n /api/bin\n-/common-api/.swagger-codegen/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35140bdd553be49972b88b24d88cee7648fc0455"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTAwNzg5Ng==", "bodyText": "auto generated when refreshing gradle after creating the subproject", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459007896", "createdAt": "2020-07-22T18:46:22Z", "author": {"login": "als364"}, "path": "api/gradle/wrapper/gradle-wrapper.properties", "diffHunk": "@@ -1,6 +1,6 @@\n-#Thu May 10 14:42:28 CDT 2018\n+#Tue Jul 21 11:03:10 EDT 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35140bdd553be49972b88b24d88cee7648fc0455"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac506af57bf3d408bf218c5c91b9ae50e139f7fd", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/ac506af57bf3d408bf218c5c91b9ae50e139f7fd", "committedDate": "2020-07-22T21:17:21Z", "message": "try adding genomics to the test glob"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c82bcde15070cd8b489dfe320687c404a8918b1", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/5c82bcde15070cd8b489dfe320687c404a8918b1", "committedDate": "2020-07-22T21:27:16Z", "message": "print gradle args for test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24f199ce195f8d768f4768012fea9bae497246bb", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/24f199ce195f8d768f4768012fea9bae497246bb", "committedDate": "2020-07-22T21:30:05Z", "message": "add junitplatform"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "846a1a86db4cf2889e69b0958550762d3e695903", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/846a1a86db4cf2889e69b0958550762d3e695903", "committedDate": "2020-07-22T21:58:57Z", "message": "trying something with the circle config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a49ea5c50efe3ae4f293cf0223807df860cb3f6d", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/a49ea5c50efe3ae4f293cf0223807df860cb3f6d", "committedDate": "2020-07-23T13:03:33Z", "message": "merge conflict ugh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "982445f58586519021747db074e207f1ab7f6575", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/982445f58586519021747db074e207f1ab7f6575", "committedDate": "2020-07-23T13:05:22Z", "message": "what about this for filtering out genomics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a5b49def05f7610f3076d163cf40dc1eaf2a4aa", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/2a5b49def05f7610f3076d163cf40dc1eaf2a4aa", "committedDate": "2020-07-23T13:20:52Z", "message": "filter out genomics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d220f08fd024ce777cf35ff34c693eea1883c88", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/5d220f08fd024ce777cf35ff34c693eea1883c88", "committedDate": "2020-07-23T13:32:12Z", "message": "exclude genomics task"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3f7d6dc252df043eb886851ec2308ca27549fcb", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/c3f7d6dc252df043eb886851ec2308ca27549fcb", "committedDate": "2020-07-23T13:35:10Z", "message": "ugh"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48ac4bd0523df3110de85fa1f42436addd2f86f3", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/48ac4bd0523df3110de85fa1f42436addd2f86f3", "committedDate": "2020-07-23T13:49:31Z", "message": "now for genomics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "161afc56ba6a97dcf250e441e5fe7bdc228a6be1", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/161afc56ba6a97dcf250e441e5fe7bdc228a6be1", "committedDate": "2020-07-23T13:56:52Z", "message": "extraneous close paren..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e2ad76d557ca7a305fcdcb40009dff97331a6cf", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/7e2ad76d557ca7a305fcdcb40009dff97331a6cf", "committedDate": "2020-07-23T14:10:31Z", "message": "how is this not finding tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6eade455960916901f6c6487ba2bd2ea5a773c84", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/6eade455960916901f6c6487ba2bd2ea5a773c84", "committedDate": "2020-07-23T14:15:39Z", "message": "oops:"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f77f99aaf1ca6ad89f406ece83619fe7ec0a491b", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/f77f99aaf1ca6ad89f406ece83619fe7ec0a491b", "committedDate": "2020-07-23T14:18:54Z", "message": "fml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae72c6e3056e797104d617674dd24ddc113b4d97", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/ae72c6e3056e797104d617674dd24ddc113b4d97", "committedDate": "2020-07-23T14:23:05Z", "message": "incrementally resolving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad0b58f118fca05168dc43df5ce34a002f0bc539", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/ad0b58f118fca05168dc43df5ce34a002f0bc539", "committedDate": "2020-07-23T14:33:21Z", "message": "yay"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/746966b6dbd2231c7e84dc80c024f41109d0e162", "committedDate": "2020-07-23T14:48:41Z", "message": "explanatory comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MzE2Nzkx", "url": "https://github.com/all-of-us/workbench/pull/3813#pullrequestreview-454316791", "createdAt": "2020-07-23T16:46:40Z", "commit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo0Njo0MVrOG2S-kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNzo0MzoxMFrOG2U_2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU4NzIxOQ==", "bodyText": "Does this generate an index as well? This seems like a necessary intermediate step between randomize and combine. If yes, worth adding a note to this. If not, would be great to have a README that shows the full list of steps to generate the multisample VCF (including the index creation.)", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459587219", "createdAt": "2020-07-23T16:46:41Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2580,3 +2580,71 @@ def start_api_and_incremental_build(cmd_name, args)\n   :description => \"Used internally by other commands.\",\n   :fn => ->(*args) { start_api_and_incremental_build(\"start-api-and-incremental-build\", args) }\n })\n+\n+def randomize_vcf(cmd_name, *args)\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_option(\n+      \"--vcf [vcf]\",\n+      -> (opts, v) {opts.vcf = v},\n+      \"Input vcf to randomize. This vcf should be gzipped and its corresponding index file \" +\n+          \"should be in the same folder. The index file can be generated from a gzipped vcf \" +\n+          \"by running tabix -p vcf [vcf path]\"\n+  )\n+  op.add_option(\n+      \"--number-of-copies [n]\",\n+      -> (opts, n) {opts.n = n},\n+      \"How many random vcfs to generate.\"\n+  )\n+  op.add_option(\n+      \"--output-dir [out]\",\n+      -> (opts, o) {opts.out = o},\n+      \"Output dir in which to put randomized vcfs\"\n+  )\n+  op.parse.validate\n+\n+  for i in 1..op.opts.n.chomp.to_i\n+    basename = File.basename(op.opts.vcf, \".vcf.gz\")\n+    out = \"#{op.opts.out}#{basename}.#{i}.vcf\"\n+    app_args = \"-PappArgs=['-V#{op.opts.vcf}','-O#{out}','-S#{i}']\"\n+    Common.new.run_inline %W{./gradlew -p genomics randomizeVcf} + [app_args]\n+  end\n+end\n+\n+Common.register_command({\n+  :invocation => \"randomize-vcf\",\n+  :description => \"Given an example vcf and a number of copies to make, generates that many \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNjQwMA==", "bodyText": "nit: I'd probably just expose two constructors here, 1 default constructor, 1 that takes the sampleNameSuffix, used by the test (and @VisibleForTesting)", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459606400", "createdAt": "2020-07-23T17:19:04Z", "author": {"login": "calbach"}, "path": "api/genomics/src/test/java/org/pmiops/workbench/genomics/RandomizeVcfTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.pmiops.workbench.genomics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import java.io.File;\n+import java.util.List;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RandomizeVcfTest {\n+  private static final VCFFileReader reader =\n+      new VCFFileReader(new File(\"src/test/resources/NA12878_204126160130_R01C01.toy.vcf.gz\"));\n+  private static final VariantContext variantContext = reader.iterator().next();\n+  private static final RandomizeVcf randomizeVcf = new RandomizeVcf();\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    randomizeVcf.sampleNameSuffix = \"0\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYwNjg0MQ==", "bodyText": "nit: method names should be lower camel", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459606841", "createdAt": "2020-07-23T17:19:50Z", "author": {"login": "calbach"}, "path": "api/genomics/src/test/java/org/pmiops/workbench/genomics/RandomizeVcfTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.pmiops.workbench.genomics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import java.io.File;\n+import java.util.List;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RandomizeVcfTest {\n+  private static final VCFFileReader reader =\n+      new VCFFileReader(new File(\"src/test/resources/NA12878_204126160130_R01C01.toy.vcf.gz\"));\n+  private static final VariantContext variantContext = reader.iterator().next();\n+  private static final RandomizeVcf randomizeVcf = new RandomizeVcf();\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    randomizeVcf.sampleNameSuffix = \"0\";\n+  }\n+\n+  @Test\n+  public void TestRandomizeVariant() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMDA4MA==", "bodyText": "opt nit: you could probably reduce some nesting here by using stream flatMap. This basically lets you expand the current stream with more elements, i.e. map a small collection of genotypes into a larger collection alleles\n.getGenotypes()\n.stream()\n.flatMap(Genotype::getAlleles)\n.forEach(... assertion ...)", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459610080", "createdAt": "2020-07-23T17:25:33Z", "author": {"login": "calbach"}, "path": "api/genomics/src/test/java/org/pmiops/workbench/genomics/RandomizeVcfTest.java", "diffHunk": "@@ -0,0 +1,63 @@\n+package org.pmiops.workbench.genomics;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.vcf.VCFFileReader;\n+import java.io.File;\n+import java.util.List;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class RandomizeVcfTest {\n+  private static final VCFFileReader reader =\n+      new VCFFileReader(new File(\"src/test/resources/NA12878_204126160130_R01C01.toy.vcf.gz\"));\n+  private static final VariantContext variantContext = reader.iterator().next();\n+  private static final RandomizeVcf randomizeVcf = new RandomizeVcf();\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    randomizeVcf.sampleNameSuffix = \"0\";\n+  }\n+\n+  @Test\n+  public void TestRandomizeVariant() {\n+    VariantContext randomizedVariant = randomizeVcf.randomizeVariant(variantContext);\n+    // For each sample/GT in the variant...\n+    randomizedVariant\n+        .getGenotypes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxMTI1NQ==", "bodyText": "I recommend allowing the test to set a fixed seed to make the test more deterministic. See my comment in the test file for how you could plumb that through in a test constructor", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459611255", "createdAt": "2020-07-23T17:27:28Z", "author": {"login": "calbach"}, "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(\n+      doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\", fullName = \"SAMPLE_NAME_SUFFIX\", shortName = \"S\")\n+  protected String sampleNameSuffix;\n+\n+  private Random random = new Random();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxODc2NQ==", "bodyText": "This works for now, we're not too concerned with errors at the moment - I'd probably put a comment with possible improvements or deficiencies. Specifically:\n\nI'm not sure about applying a fractional scaling to a log10 value. The net effect on the original error value will be amplified. Though I'm not familiar enough with these error ranges to know whether the output is something that's still within reason.\nthis currently should strictly reduce the value; most likely we would want to fuzz it in either direction, or just generate a new value altogether here, unrelated to the original.", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459618765", "createdAt": "2020-07-23T17:40:34Z", "author": {"login": "calbach"}, "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcf.java", "diffHunk": "@@ -0,0 +1,165 @@\n+package org.pmiops.workbench.genomics;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import htsjdk.variant.variantcontext.Allele;\n+import htsjdk.variant.variantcontext.Genotype;\n+import htsjdk.variant.variantcontext.GenotypeBuilder;\n+import htsjdk.variant.variantcontext.GenotypesContext;\n+import htsjdk.variant.variantcontext.VariantContext;\n+import htsjdk.variant.variantcontext.VariantContextBuilder;\n+import htsjdk.variant.variantcontext.writer.VariantContextWriter;\n+import htsjdk.variant.vcf.VCFHeader;\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import org.broadinstitute.barclay.argparser.Argument;\n+import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;\n+import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;\n+import org.broadinstitute.hellbender.engine.FeatureContext;\n+import org.broadinstitute.hellbender.engine.ReadsContext;\n+import org.broadinstitute.hellbender.engine.ReferenceContext;\n+import org.broadinstitute.hellbender.engine.VariantWalker;\n+import picard.cmdline.programgroups.VariantManipulationProgramGroup;\n+\n+@CommandLineProgramProperties(\n+    summary = \"Generates random variant alleles at the same contigs as an example VCF\",\n+    oneLineSummary = \"Randomizes a VCF\",\n+    programGroup = VariantManipulationProgramGroup.class)\n+public class RandomizeVcf extends VariantWalker {\n+  @Argument(\n+      doc = \"Output vcf name.\",\n+      fullName = StandardArgumentDefinitions.OUTPUT_LONG_NAME,\n+      shortName = StandardArgumentDefinitions.OUTPUT_SHORT_NAME)\n+  protected File outputVcf;\n+\n+  @Argument(doc = \"Sample name suffix.\", fullName = \"SAMPLE_NAME_SUFFIX\", shortName = \"S\")\n+  protected String sampleNameSuffix;\n+\n+  private Random random = new Random();\n+\n+  private VariantContextWriter vcfWriter;\n+\n+  @Override\n+  public void apply(\n+      VariantContext variant,\n+      ReadsContext readsContext,\n+      ReferenceContext referenceContext,\n+      FeatureContext featureContext) {\n+    vcfWriter.add(randomizeVariant(variant));\n+  }\n+\n+  @Override\n+  public void onTraversalStart() {\n+    final VCFHeader inputHeader = getHeaderForVariants();\n+    final List<String> newSampleNames =\n+        inputHeader.getSampleNamesInOrder().stream()\n+            .map(this::appendSuffixToSampleName)\n+            .collect(Collectors.toList());\n+    final VCFHeader outputHeader =\n+        new VCFHeader(inputHeader.getMetaDataInInputOrder(), newSampleNames);\n+    vcfWriter = this.createVCFWriter(outputVcf);\n+    vcfWriter.writeHeader(outputHeader);\n+  }\n+\n+  @Override\n+  public void closeTool() {\n+    if (vcfWriter != null) {\n+      vcfWriter.close();\n+    }\n+  }\n+\n+  @VisibleForTesting\n+  protected VariantContext randomizeVariant(VariantContext variant) {\n+    // This initializes most of the VariantContextBuilder fields to what they were in the original\n+    // variant. We just want to change the genotypes and quality score.\n+    VariantContextBuilder variantContextBuilder = new VariantContextBuilder(variant);\n+    variantContextBuilder.alleles(variant.getAlleles());\n+\n+    List<Genotype> randomizedGenotypes =\n+        variant.getGenotypes().stream()\n+            .map(genotype -> randomizeGenotype(variant, genotype))\n+            .collect(Collectors.toList());\n+    GenotypesContext randomizedGenotypesContext =\n+        GenotypesContext.create(new ArrayList<>(randomizedGenotypes));\n+\n+    variantContextBuilder.genotypes(randomizedGenotypesContext);\n+\n+    // We want kind of random error. If there's no error, have no error for the new variant as well.\n+    // If there's error, fuzz the error.\n+    if (variant.hasLog10PError()) {\n+      variantContextBuilder.log10PError(random.nextDouble() * variant.getLog10PError());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYxOTMxOA==", "bodyText": "opt: personal preference, but I think this could just go into the RandomizeVcf file directly, rather than having the separate entrypoint file. I don't feel strongly.", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459619318", "createdAt": "2020-07-23T17:41:30Z", "author": {"login": "calbach"}, "path": "api/genomics/src/main/java/org/pmiops/workbench/genomics/RandomizeVcfEntryPoint.java", "diffHunk": "@@ -0,0 +1,7 @@\n+package org.pmiops.workbench.genomics;\n+\n+public class RandomizeVcfEntryPoint {\n+  public static void main(String[] argv) {\n+    new RandomizeVcf().instanceMain(argv);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMDMxNQ==", "bodyText": "I don't understand - why would the below glob pickup the genomics test files? Or is that not the issue?", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459620315", "createdAt": "2020-07-23T17:43:10Z", "author": {"login": "calbach"}, "path": ".circleci/config.yml", "diffHunk": "@@ -321,15 +333,18 @@ jobs:\n           #   src/test/java/org/pmiops/*********/monitoring/LogsBasedMetricsServiceTest.java src/test/java/org/pmiops/*********/monitoring/MonitoringServiceTest.java\n           # Example of Gradle command after formatting:\n           #   gradle test --tests org.pmiops.*********.monitoring.LogsBasedMetricsServiceTest --tests org.pmiops.*********.monitoring.MonitoringServiceTest\n+          #\n+          # We exclude the :genomics:test task below because otherwise gradle will attempt to run all the regular API unit tests under the genomics\n+          # submodule and will be unable to find them and will barf", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c59ef613cd48f94c13a8352b8bb9973945422e9", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/1c59ef613cd48f94c13a8352b8bb9973945422e9", "committedDate": "2020-07-23T19:56:06Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45fc8c2a13a89155029ff098439c7c0440d40ec1", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/45fc8c2a13a89155029ff098439c7c0440d40ec1", "committedDate": "2020-07-23T20:15:53Z", "message": "more review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d98add377672e1f7eb8409917706d13df39a932e", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/d98add377672e1f7eb8409917706d13df39a932e", "committedDate": "2020-07-23T20:28:38Z", "message": "dot slash gradle double-u spotless apply"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTAxNDI3", "url": "https://github.com/all-of-us/workbench/pull/3813#pullrequestreview-454501427", "createdAt": "2020-07-23T21:16:49Z", "commit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMToyMDozNlrOG2b-ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTozMzoyMVrOG2cVhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTczNDcxNA==", "bodyText": "opt: We have several other commands that need to prep args like this, I think the pattern could be reused here - or it may not be relevant if the flag construction for GATK is specialized:\n\n  \n    \n      workbench/api/libproject/devstart.rb\n    \n    \n         Line 1341\n      in\n      0ccccd0\n    \n    \n    \n    \n\n        \n          \n           flags = ([ \n        \n    \n  \n\n\nprobably there's enough instances to pull it into a helper eventually.", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459734714", "createdAt": "2020-07-23T21:20:36Z", "author": {"login": "calbach"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2580,3 +2580,71 @@ def start_api_and_incremental_build(cmd_name, args)\n   :description => \"Used internally by other commands.\",\n   :fn => ->(*args) { start_api_and_incremental_build(\"start-api-and-incremental-build\", args) }\n })\n+\n+def randomize_vcf(cmd_name, *args)\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_option(\n+      \"--vcf [vcf]\",\n+      -> (opts, v) {opts.vcf = v},\n+      \"Input vcf to randomize. This vcf should be gzipped and its corresponding index file \" +\n+          \"should be in the same folder. The index file can be generated from a gzipped vcf \" +\n+          \"by running tabix -p vcf [vcf path]\"\n+  )\n+  op.add_option(\n+      \"--number-of-copies [n]\",\n+      -> (opts, n) {opts.n = n},\n+      \"How many random vcfs to generate.\"\n+  )\n+  op.add_option(\n+      \"--output-dir [out]\",\n+      -> (opts, o) {opts.out = o},\n+      \"Output dir in which to put randomized vcfs\"\n+  )\n+  op.parse.validate\n+\n+  for i in 1..op.opts.n.chomp.to_i\n+    basename = File.basename(op.opts.vcf, \".vcf.gz\")\n+    out = \"#{op.opts.out}#{basename}.#{i}.vcf\"\n+    app_args = \"-PappArgs=['-V#{op.opts.vcf}','-O#{out}','-S#{i}']\"\n+    Common.new.run_inline %W{./gradlew -p genomics randomizeVcf} + [app_args]\n+  end\n+end\n+\n+Common.register_command({\n+  :invocation => \"randomize-vcf\",\n+  :description => \"Given an example vcf and a number of copies to make, generates that many \" +\n+    \"random copies in a given output directory\",\n+  :fn => ->(*args) { randomize_vcf(\"randomize-vcf\", *args) }\n+})\n+\n+def combine_vcfs(cmd_name, *args)\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.add_option(\n+      \"--dir [dir]\",\n+      -> (opts, d) {opts.dir = d},\n+      \"Dir with vcfs to combine. vcfs should have corresponding index files in the same \" +\n+          \"folder.\"\n+  )\n+  op.add_option(\n+      \"--output [output]\",\n+      -> (opts, o) {opts.output = o},\n+      \"Path to output the combined vcf\"\n+  )\n+  op.parse.validate\n+\n+  app_args = \"-PappArgs=[\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0MDU0OA==", "bodyText": "I see, thanks. My preferred fix would be gradle test --> gradle :test on this line (no -x), this only picks up the root test task which would have been more accurate to begin with but didn't matter until now. This way you're not needing to list out every subproject that has tests. I tested locally that this works.\nI would also clarify the above comment that it pertains specifically to the test filtering. If you filter down to 0 tests for a particular gradle test target, that's an error. This means it's impractical to use the test filter in combination with a multi-test gradle task.", "url": "https://github.com/all-of-us/workbench/pull/3813#discussion_r459740548", "createdAt": "2020-07-23T21:33:21Z", "author": {"login": "calbach"}, "path": ".circleci/config.yml", "diffHunk": "@@ -321,15 +333,18 @@ jobs:\n           #   src/test/java/org/pmiops/*********/monitoring/LogsBasedMetricsServiceTest.java src/test/java/org/pmiops/*********/monitoring/MonitoringServiceTest.java\n           # Example of Gradle command after formatting:\n           #   gradle test --tests org.pmiops.*********.monitoring.LogsBasedMetricsServiceTest --tests org.pmiops.*********.monitoring.MonitoringServiceTest\n+          #\n+          # We exclude the :genomics:test task below because otherwise gradle will attempt to run all the regular API unit tests under the genomics\n+          # submodule and will be unable to find them and will barf", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTYyMDMxNQ=="}, "originalCommit": {"oid": "746966b6dbd2231c7e84dc80c024f41109d0e162"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4f6cecb2638abd322510403b56a283584637831", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/b4f6cecb2638abd322510403b56a283584637831", "committedDate": "2020-07-24T15:42:02Z", "message": "one last circle tweak"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4485, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}