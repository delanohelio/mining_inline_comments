{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTY2Njk4", "number": 3020, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozMjowNFrODZ2gjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0NTo0NlrODZ20ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM0MDYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/interceptors/CloudTaskInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozMjowNFrOFgeMJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozMjowNFrOFgeMJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5MzM4MA==", "bodyText": "It would be helpful to add a bit more context here around why we're confident in this auth mechanism \u2013\u00a0a link out to https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_app_engine_task_request_headers should be sufficient, possibly with a quote: \"According to Google documentation, the X-AppEngine-QueueName is set and overridden internally, so it is guaranteed to only be present for requests which originated internally via Cloud Tasks infrastructure.", "url": "https://github.com/all-of-us/workbench/pull/3020#discussion_r369593380", "createdAt": "2020-01-22T14:32:04Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/CloudTaskInterceptor.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.pmiops.workbench.interceptors;\n+\n+import com.google.api.client.http.HttpMethods;\n+import io.swagger.annotations.ApiOperation;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n+\n+/**\n+ * Interceptor for endpoints with tag cloudTask. All such endpoints should have valid value for\n+ * request hander X-AppEngine-QueueName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aede134dcf08d47cb6ef1febbe14e4a2f05dda"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM1NzgyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/interceptors/CloudTaskInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozNjoyOVrOFgeWhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDozNjoyOVrOFgeWhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5NjAzOA==", "bodyText": "We should aim to make this easily extensible for future queues. Instead of a single constant with the current queue name, you could use an ImmutableSet here to store the set of expected queue names:\nprivate static final ImmutableSet VALID_QUEUE_NAMES = ImmutableSet.of(\"rdrQueueTest\");\nThen at L43, you'd check for set containment instead of string equality.\nThat should make it very clear how to extend this interceptor for additional queues.", "url": "https://github.com/all-of-us/workbench/pull/3020#discussion_r369596038", "createdAt": "2020-01-22T14:36:29Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/interceptors/CloudTaskInterceptor.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.pmiops.workbench.interceptors;\n+\n+import com.google.api.client.http.HttpMethods;\n+import io.swagger.annotations.ApiOperation;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.core.annotation.AnnotationUtils;\n+import org.springframework.stereotype.Service;\n+import org.springframework.web.method.HandlerMethod;\n+import org.springframework.web.servlet.handler.HandlerInterceptorAdapter;\n+\n+/**\n+ * Interceptor for endpoints with tag cloudTask. All such endpoints should have valid value for\n+ * request hander X-AppEngine-QueueName\n+ */\n+@Service\n+public class CloudTaskInterceptor extends HandlerInterceptorAdapter {\n+  public static final String QUEUE_NAME_HEADER = \"X-AppEngine-QueueName\";\n+  private static final String CLOUD_TASK_TAG = \"cloudTask\";\n+  public static final String RDR_QUEUE_NAME_HEADER = \"rdrQueueTest\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aede134dcf08d47cb6ef1febbe14e4a2f05dda"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM3Mzg1OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0MTowMlrOFgegjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0MTowMlrOFgegjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5ODYwNw==", "bodyText": "There's an interesting information gap here: nothing in workbench.yaml specifies which queue name each cloud task handler is associated with.\nI'd suggest adding something to the description of each method that makes this explicit, e.g. for /v1/cloudTask/exportResearcherData, you could add:\ndescription: >\nSends researcher data to the RDR. This is a Cloud Task handler intended to be invoked by tasks in the \"rdrQueueTest\" queue.\nThis should help any reader unfamiliar with this feature connect the dots and understand what's going on. I always try to document code / infrastructure with the \"smart but new to the team\" engineer in mind.", "url": "https://github.com/all-of-us/workbench/pull/3020#discussion_r369598607", "createdAt": "2020-01-22T14:41:02Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench.yaml", "diffHunk": "@@ -2254,12 +2254,17 @@ paths:\n \n \n ##########################################################################################\n-## Endpoints for task in cloud task queue\n+# Endpoints for task in cloud task queue\n+# Note: all requests tagged as \"cloudTask\" must have the header X-AppEngine-QueueName:\n+# to the queue name, which app engine itself only sets when invoking cloud task.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aede134dcf08d47cb6ef1febbe14e4a2f05dda"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM4MTA1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/interceptors/CloudTaskInterceptorTest", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0Mjo1NVrOFgek4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0Mjo1NVrOFgek4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTU5OTcxMw==", "bodyText": "This file is missing a .java suffix (GitHub isn't showing any syntax highlighting, which tipped me off).", "url": "https://github.com/all-of-us/workbench/pull/3020#discussion_r369599713", "createdAt": "2020-01-22T14:42:55Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/interceptors/CloudTaskInterceptorTest", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.interceptors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aede134dcf08d47cb6ef1febbe14e4a2f05dda"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM4NTEzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/interceptors/CloudTaskInterceptorTest", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0Mzo1NlrOFgenUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0Mzo1NlrOFgenUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwMDMzNw==", "bodyText": "Does this test pass? I'm pretty sure the mock should be returning \"rdrQueueTest\" for CloudTaskInterceptor. QUEUE_NAME_HEADER, not CloudTaskInterceptor.RDR_QUEUE_NAME_HEADER.", "url": "https://github.com/all-of-us/workbench/pull/3020#discussion_r369600337", "createdAt": "2020-01-22T14:43:56Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/interceptors/CloudTaskInterceptorTest", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.interceptors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.api.client.http.HttpMethods;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.pmiops.workbench.api.CloudTaskRdrExportController;\n+import org.pmiops.workbench.api.WorkspacesApi;\n+import org.springframework.web.method.HandlerMethod;\n+\n+public class CloudTaskInterceptorTest {\n+\t@Rule public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+\t@Mock private HandlerMethod handler;\n+\t@Mock private HttpServletRequest request;\n+\t@Mock private HttpServletResponse response;\n+\n+\tprivate CloudTaskInterceptor interceptor;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tinterceptor = new CloudTaskInterceptor();\n+\t}\n+\n+\t@Test\n+\tpublic void preHandleOptions_OPTIONS() throws Exception {\n+\t\twhen(request.getMethod()).thenReturn(HttpMethods.OPTIONS);\n+\t\tassertThat(interceptor.preHandle(request, response, handler)).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void prehandleForCloudTaskNoHeader() throws Exception {\n+\t\twhen(request.getMethod()).thenReturn(HttpMethods.POST);\n+\t\twhen(handler.getMethod()).thenReturn(CloudTaskRdrExportApi.class.getMethod(\"exportResearcherData\", Object.class));\n+\t\tassertThat(interceptor.preHandle(request, response, handler)).isFalse();\n+\t}\n+\n+\t@Test\n+\tpublic void prehandleForCloudTaskWithBadHeader() throws Exception {\n+\t\twhen(request.getMethod()).thenReturn(HttpMethods.POST);\n+\t\twhen(handler.getMethod()).thenReturn(CloudTaskRdrExportApi.class.getMethod(\"exportResearcherData\", Object.class));\n+\t\twhen(request.getHeader(CloudTaskInterceptor.RDR_QUEUE_NAME_HEADER)).thenReturn(\"asdf\");\n+\t\tassertThat(interceptor.preHandle(request, response, handler)).isFalse();\n+\t}\n+\n+\t@Test\n+\tpublic void prehandleForCloudTaskWithHeader() throws Exception {\n+\t\twhen(request.getMethod()).thenReturn(HttpMethods.POST);\n+\t\twhen(handler.getMethod()).thenReturn(CloudTaskRdrExportController.class.getMethod(\"exportResearcherData\", Object.class));\n+\t\twhen(request.getHeader(CloudTaskInterceptor.RDR_QUEUE_NAME_HEADER)).thenReturn(\"rdrQueueTest\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aede134dcf08d47cb6ef1febbe14e4a2f05dda"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDM5MTc4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/interceptors/CloudTaskInterceptorTest", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0NTo0NlrOFgerbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNDo0NTo0NlrOFgerbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYwMTM5MA==", "bodyText": "Is there a reason you specify the Controller class here, but in the previous test (which seems like it should be testing the identical controller method, but without the Cloud Task header value) at L49 you specify the Api class? I strongly suspect these should be consistent between the two test cases.\n(For what it's worth... in the CronInterceptorTest that this was derived from, the Api class was always used for the mocked method return value. This test case should probably switch to adopt that pattern.)", "url": "https://github.com/all-of-us/workbench/pull/3020#discussion_r369601390", "createdAt": "2020-01-22T14:45:46Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/interceptors/CloudTaskInterceptorTest", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.interceptors;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.api.client.http.HttpMethods;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnit;\n+import org.mockito.junit.MockitoRule;\n+import org.pmiops.workbench.api.CloudTaskRdrExportController;\n+import org.pmiops.workbench.api.WorkspacesApi;\n+import org.springframework.web.method.HandlerMethod;\n+\n+public class CloudTaskInterceptorTest {\n+\t@Rule public MockitoRule mockitoRule = MockitoJUnit.rule();\n+\n+\t@Mock private HandlerMethod handler;\n+\t@Mock private HttpServletRequest request;\n+\t@Mock private HttpServletResponse response;\n+\n+\tprivate CloudTaskInterceptor interceptor;\n+\n+\t@Before\n+\tpublic void setUp() {\n+\t\tinterceptor = new CloudTaskInterceptor();\n+\t}\n+\n+\t@Test\n+\tpublic void preHandleOptions_OPTIONS() throws Exception {\n+\t\twhen(request.getMethod()).thenReturn(HttpMethods.OPTIONS);\n+\t\tassertThat(interceptor.preHandle(request, response, handler)).isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void prehandleForCloudTaskNoHeader() throws Exception {\n+\t\twhen(request.getMethod()).thenReturn(HttpMethods.POST);\n+\t\twhen(handler.getMethod()).thenReturn(CloudTaskRdrExportApi.class.getMethod(\"exportResearcherData\", Object.class));\n+\t\tassertThat(interceptor.preHandle(request, response, handler)).isFalse();\n+\t}\n+\n+\t@Test\n+\tpublic void prehandleForCloudTaskWithBadHeader() throws Exception {\n+\t\twhen(request.getMethod()).thenReturn(HttpMethods.POST);\n+\t\twhen(handler.getMethod()).thenReturn(CloudTaskRdrExportApi.class.getMethod(\"exportResearcherData\", Object.class));\n+\t\twhen(request.getHeader(CloudTaskInterceptor.RDR_QUEUE_NAME_HEADER)).thenReturn(\"asdf\");\n+\t\tassertThat(interceptor.preHandle(request, response, handler)).isFalse();\n+\t}\n+\n+\t@Test\n+\tpublic void prehandleForCloudTaskWithHeader() throws Exception {\n+\t\twhen(request.getMethod()).thenReturn(HttpMethods.POST);\n+\t\twhen(handler.getMethod()).thenReturn(CloudTaskRdrExportController.class.getMethod(\"exportResearcherData\", Object.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aede134dcf08d47cb6ef1febbe14e4a2f05dda"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3470, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}