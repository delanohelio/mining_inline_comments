{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTczMzUz", "number": 3838, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozOToxNFrOET1hKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoyODozNlrOEVhzpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjM1MjQwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozOToxNFrOG5zAAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozOToxNFrOG5zAAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NzYwMA==", "bodyText": "Are there Unicode characters that get downgraded into these that need to be checked as well?", "url": "https://github.com/all-of-us/workbench/pull/3838#discussion_r463257600", "createdAt": "2020-07-30T20:39:14Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -554,7 +570,10 @@ export const ConceptHomepage = withCurrentWorkspace()(\n               <TextInput style={styles.searchBar} data-test-id='concept-search-input'\n                          placeholder='Search concepts in domain'\n                          value={currentInputString}\n-                         onChange={(e) => this.setState({currentInputString: e})}\n+                         onChange={(e) => this.setState({\n+                           currentInputString: e,\n+                           forbiddenCharactersEntered: /[~\\-@()\\[\\]|<>]/g.test(e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63467a8c37bdc53386876ddb2cbdab476f99643"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDA5NDQ2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoyODozNlrOG8Vlrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToyNjo0OFrOG8XfWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyMTQ1NQ==", "bodyText": "I guess since you have the ability to embed \" and ( ) you have to parse each character instead of using regex. I know this is a product decision on unifying this search with CB and DSB, but we should make this reusable by other components.", "url": "https://github.com/all-of-us/workbench/pull/3838#discussion_r465921455", "createdAt": "2020-08-05T18:28:36Z", "author": {"login": "freemabd"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -310,14 +318,69 @@ export const ConceptHomepage = withCurrentWorkspace()(\n       }\n     }\n \n+    validateInputForMySQL() {\n+      const {currentInputString} = this.state;\n+      const inputErrors = new Set(); // use Set to prevent duplicate messages\n+      let openParensCount = 0;\n+      let unclosedQuotes = false;\n+      for (let i = 0; i < currentInputString.length; i++) {\n+        const character = currentInputString[i];\n+        if (character === '\"') {\n+          unclosedQuotes = !unclosedQuotes;\n+          continue;\n+        }\n+        if (unclosedQuotes) {\n+          // inside a quote, no need to validate further\n+          continue;\n+        }\n+        // Check for characters that break search\n+        if ('~@[]|<>'.indexOf(character) > -1) {\n+          inputErrors.add('The following characters are not allowed in the search string: ~ @ [ ] | < >');\n+          continue;\n+        }\n+        // Check for trailing + or -\n+        if ('+-'.indexOf(character) > -1 && (currentInputString[i + 1] === ' ' || currentInputString[i + 1] === undefined)) {\n+          inputErrors.add(`Trailing ${character} characters are not allowed in the search string`);\n+          continue;\n+        }\n+        const parenPosition = '()'.indexOf(character);\n+        if (parenPosition === -1) {\n+          // Parens are the last character check, so we can continue if it's something else\n+          continue;\n+        }\n+        if (parenPosition === 0) {\n+          openParensCount++; // increment the number of unclosed parens\n+        } else {\n+          if (openParensCount === 0) {\n+            // too many closing parens\n+            inputErrors.add('There are too many ) characters in the search string');\n+            continue;\n+          }\n+          openParensCount--; // decrement the number of unclosed parens\n+        }\n+      }\n+      if (openParensCount > 0) {\n+        // unclosed paren\n+        inputErrors.add('There is an unclosed ( in the search string');\n+      }\n+      if (unclosedQuotes) {\n+        // unclosed quote\n+        inputErrors.add('There is an unclosed \" in the search string');\n+      }\n+      this.setState({inputErrors: Array.from(inputErrors)});\n+      return inputErrors.size === 0; // return true if no errors\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc57cdfecf7e42cfb04dc1f8ec42970af73e00c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0NTU0MQ==", "bodyText": "AFAIK there's no way to detect an imbalance of quotes or parens using regex. The SO solution we discussed seems to just strip out anything except letters, numbers and underscores.\nYeah, whenever we unify the tools, will definitely make this (or whatever validation we end up using) reusable.", "url": "https://github.com/all-of-us/workbench/pull/3838#discussion_r465945541", "createdAt": "2020-08-05T19:13:09Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -310,14 +318,69 @@ export const ConceptHomepage = withCurrentWorkspace()(\n       }\n     }\n \n+    validateInputForMySQL() {\n+      const {currentInputString} = this.state;\n+      const inputErrors = new Set(); // use Set to prevent duplicate messages\n+      let openParensCount = 0;\n+      let unclosedQuotes = false;\n+      for (let i = 0; i < currentInputString.length; i++) {\n+        const character = currentInputString[i];\n+        if (character === '\"') {\n+          unclosedQuotes = !unclosedQuotes;\n+          continue;\n+        }\n+        if (unclosedQuotes) {\n+          // inside a quote, no need to validate further\n+          continue;\n+        }\n+        // Check for characters that break search\n+        if ('~@[]|<>'.indexOf(character) > -1) {\n+          inputErrors.add('The following characters are not allowed in the search string: ~ @ [ ] | < >');\n+          continue;\n+        }\n+        // Check for trailing + or -\n+        if ('+-'.indexOf(character) > -1 && (currentInputString[i + 1] === ' ' || currentInputString[i + 1] === undefined)) {\n+          inputErrors.add(`Trailing ${character} characters are not allowed in the search string`);\n+          continue;\n+        }\n+        const parenPosition = '()'.indexOf(character);\n+        if (parenPosition === -1) {\n+          // Parens are the last character check, so we can continue if it's something else\n+          continue;\n+        }\n+        if (parenPosition === 0) {\n+          openParensCount++; // increment the number of unclosed parens\n+        } else {\n+          if (openParensCount === 0) {\n+            // too many closing parens\n+            inputErrors.add('There are too many ) characters in the search string');\n+            continue;\n+          }\n+          openParensCount--; // decrement the number of unclosed parens\n+        }\n+      }\n+      if (openParensCount > 0) {\n+        // unclosed paren\n+        inputErrors.add('There is an unclosed ( in the search string');\n+      }\n+      if (unclosedQuotes) {\n+        // unclosed quote\n+        inputErrors.add('There is an unclosed \" in the search string');\n+      }\n+      this.setState({inputErrors: Array.from(inputErrors)});\n+      return inputErrors.size === 0; // return true if no errors\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyMTQ1NQ=="}, "originalCommit": {"oid": "0fc57cdfecf7e42cfb04dc1f8ec42970af73e00c"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk1MjYwMw==", "bodyText": "I think we just need to write up what all apps currently do and then present it to the PMs and see if we can get consensus", "url": "https://github.com/all-of-us/workbench/pull/3838#discussion_r465952603", "createdAt": "2020-08-05T19:26:48Z", "author": {"login": "jscherdin"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -310,14 +318,69 @@ export const ConceptHomepage = withCurrentWorkspace()(\n       }\n     }\n \n+    validateInputForMySQL() {\n+      const {currentInputString} = this.state;\n+      const inputErrors = new Set(); // use Set to prevent duplicate messages\n+      let openParensCount = 0;\n+      let unclosedQuotes = false;\n+      for (let i = 0; i < currentInputString.length; i++) {\n+        const character = currentInputString[i];\n+        if (character === '\"') {\n+          unclosedQuotes = !unclosedQuotes;\n+          continue;\n+        }\n+        if (unclosedQuotes) {\n+          // inside a quote, no need to validate further\n+          continue;\n+        }\n+        // Check for characters that break search\n+        if ('~@[]|<>'.indexOf(character) > -1) {\n+          inputErrors.add('The following characters are not allowed in the search string: ~ @ [ ] | < >');\n+          continue;\n+        }\n+        // Check for trailing + or -\n+        if ('+-'.indexOf(character) > -1 && (currentInputString[i + 1] === ' ' || currentInputString[i + 1] === undefined)) {\n+          inputErrors.add(`Trailing ${character} characters are not allowed in the search string`);\n+          continue;\n+        }\n+        const parenPosition = '()'.indexOf(character);\n+        if (parenPosition === -1) {\n+          // Parens are the last character check, so we can continue if it's something else\n+          continue;\n+        }\n+        if (parenPosition === 0) {\n+          openParensCount++; // increment the number of unclosed parens\n+        } else {\n+          if (openParensCount === 0) {\n+            // too many closing parens\n+            inputErrors.add('There are too many ) characters in the search string');\n+            continue;\n+          }\n+          openParensCount--; // decrement the number of unclosed parens\n+        }\n+      }\n+      if (openParensCount > 0) {\n+        // unclosed paren\n+        inputErrors.add('There is an unclosed ( in the search string');\n+      }\n+      if (unclosedQuotes) {\n+        // unclosed quote\n+        inputErrors.add('There is an unclosed \" in the search string');\n+      }\n+      this.setState({inputErrors: Array.from(inputErrors)});\n+      return inputErrors.size === 0; // return true if no errors\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyMTQ1NQ=="}, "originalCommit": {"oid": "0fc57cdfecf7e42cfb04dc1f8ec42970af73e00c"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2480, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}