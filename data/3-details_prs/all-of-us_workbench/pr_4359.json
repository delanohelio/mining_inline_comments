{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDY2NTI3", "number": 4359, "title": "[no ticket][risk=no] Puppeteer refactor owner-copy-to-workspace test", "bodyText": "Refactor test to reduces playback time by half and use one less new workspace.", "createdAt": "2020-12-05T17:34:19Z", "url": "https://github.com/all-of-us/workbench/pull/4359", "merged": true, "mergeCommit": {"oid": "146b7db75854e706233a7468ed357f299e51802c"}, "closed": true, "closedAt": "2020-12-07T16:06:13Z", "author": {"login": "aweng98"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjP6vJgH2gAyNTMzMDY2NTI3Ojg1YmI3ZTcyMjdlMTRlN2NkN2U5MWQ4N2JhNzlkYjM3MzhmMDM5NGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj3eXkAFqTU0NjI2Nzg2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "85bb7e7227e14e7cd7e91d87ba79db3738f0394e", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/85bb7e7227e14e7cd7e91d87ba79db3738f0394e", "committedDate": "2020-12-05T17:37:19Z", "message": "rebase"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d6e583e9a52d70899576735e23416207e82d6c3b", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/d6e583e9a52d70899576735e23416207e82d6c3b", "committedDate": "2020-12-05T17:32:38Z", "message": "refactor owner-copy-to-workspace test"}, "afterCommit": {"oid": "85bb7e7227e14e7cd7e91d87ba79db3738f0394e", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/85bb7e7227e14e7cd7e91d87ba79db3738f0394e", "committedDate": "2020-12-05T17:37:19Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c73653cfeeb1878125b26d8e90bfb8356b111c29", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/c73653cfeeb1878125b26d8e90bfb8356b111c29", "committedDate": "2020-12-05T17:42:13Z", "message": "update"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MjU2NDM2", "url": "https://github.com/all-of-us/workbench/pull/4359#pullrequestreview-546256436", "createdAt": "2020-12-07T15:25:37Z", "commit": {"oid": "c73653cfeeb1878125b26d8e90bfb8356b111c29"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyNTozN1rOIAsJHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNToyNTozN1rOIAsJHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NDE0Mg==", "bodyText": "Let's call this defaultCdrWorkspace", "url": "https://github.com/all-of-us/workbench/pull/4359#discussion_r537594142", "createdAt": "2020-12-07T15:25:37Z", "author": {"login": "jmthibault79"}, "path": "e2e/tests/notebook/owner-copy-to-workspace.spec.ts", "diffHunk": "@@ -18,64 +19,87 @@ jest.setTimeout(20 * 60 * 1000);\n  * - Verify copied notebook is in destination Workspace.\n  * - Open copied notebook and run code to print WORKSPACE_NAMESPACE. It should match destination Workspace namespace.\n  * - Delete notebooks.\n+ *\n+ * @param {string} sourceWorkspaceName: Source workspace name\n+ * @param {string} to create new destination workspace with CDR Version\n  */\n-async function copyNotebookTest(srcCdrVersionName: string, destCdrVersionName: string) {\n-  const destWorkspace = await createWorkspace(page, destCdrVersionName).then(card => card.getWorkspaceName());\n-\n-  await createWorkspace(page, srcCdrVersionName).then(card => card.clickWorkspaceName());\n-\n-  // Create notebook in copy-from workspace.\n-  const sourceNotebookName = makeRandomName('pytest');\n-  const dataPage = new WorkspaceDataPage(page);\n-\n-  const sourceWorkspacePage = await dataPage.createNotebook(sourceNotebookName);\n-\n-  // Exit notebook and returns to the Workspace Analysis tab.\n-  const analysisPage = await sourceWorkspacePage.goAnalysisPage();\n-\n-  // Copy to destination Workspace and give notebook a new name.\n-  const copiedNotebookName = makeRandomName('copy-of');\n-  await analysisPage.copyNotebookToWorkspace(sourceNotebookName, destWorkspace, copiedNotebookName);\n-\n-  // Verify Copy Success modal.\n-  const modal = new Modal(page);\n-  await modal.waitForButton(LinkText.GoToCopiedNotebook);\n-  const textContent = await modal.getTextContent();\n-  const successMsg = `Successfully copied ${sourceNotebookName}  to ${destWorkspace} . Do you want to view the copied Notebook?`;\n-  expect(textContent).toContain(successMsg);\n-  // Dismiss modal.\n-  await modal.clickButton(LinkText.StayHere, {waitForClose: true});\n-\n-  // Delete notebook\n-  const deleteModalTextContent = await analysisPage.deleteResource(sourceNotebookName, ResourceCard.Notebook);\n-  expect(deleteModalTextContent).toContain(`Are you sure you want to delete Notebook: ${sourceNotebookName}?`);\n-\n-  // Perform actions in copied notebook.\n-  // Open destination Workspace\n-  await findOrCreateWorkspace(page, {workspaceName: destWorkspace}).then(card => card.clickWorkspaceName());\n-\n-  // Verify copy-to notebook exists in destination Workspace\n-  await dataPage.openAnalysisPage();\n-  const dataResourceCard = new DataResourceCard(page);\n-  const notebookCard = await dataResourceCard.findCard(copiedNotebookName, ResourceCard.Notebook);\n-  expect(notebookCard).toBeTruthy();\n-\n-  // Delete notebook\n-  const modalTextContent = await analysisPage.deleteResource(copiedNotebookName, ResourceCard.Notebook);\n-  expect(modalTextContent).toContain('This will permanently delete the Notebook.');\n+async function copyNotebookTest(sourceWorkspaceName: string, destCdrVersionName: string) {\n+\n+   const destWorkspace = await createWorkspace(page, destCdrVersionName).then(card => card.getWorkspaceName());\n+\n+   // Find and open source workspace Data page.\n+   const workspaceCard = await WorkspaceCard.findCard(page, sourceWorkspaceName);\n+   await workspaceCard.clickWorkspaceName();\n+\n+   // Create notebook in source workspace.\n+   const sourceNotebookName = makeRandomName('pytest');\n+   const dataPage = new WorkspaceDataPage(page);\n+\n+   const sourceWorkspacePage = await dataPage.createNotebook(sourceNotebookName);\n+\n+   // Exit notebook and returns to the Workspace Analysis tab.\n+   const analysisPage = await sourceWorkspacePage.goAnalysisPage();\n+\n+   // Copy to destination Workspace and give notebook a new name.\n+   const copiedNotebookName = makeRandomName('copy-of');\n+   await analysisPage.copyNotebookToWorkspace(sourceNotebookName, destWorkspace, copiedNotebookName);\n+\n+   // Verify Copy Success modal.\n+   const modal = new Modal(page);\n+   await modal.waitForButton(LinkText.GoToCopiedNotebook);\n+   const textContent = await modal.getTextContent();\n+   const successMsg = `Successfully copied ${sourceNotebookName}  to ${destWorkspace} . Do you want to view the copied Notebook?`;\n+   expect(textContent).toContain(successMsg);\n+   // Dismiss modal.\n+   await modal.clickButton(LinkText.StayHere, {waitForClose: true});\n+\n+   // Delete notebook\n+   const deleteModalTextContent = await analysisPage.deleteResource(sourceNotebookName, ResourceCard.Notebook);\n+   expect(deleteModalTextContent).toContain(`Are you sure you want to delete Notebook: ${sourceNotebookName}?`);\n+\n+   // Perform actions in copied notebook.\n+   // Open destination Workspace\n+   await findOrCreateWorkspace(page, {workspaceName: destWorkspace}).then(card => card.clickWorkspaceName());\n+\n+   // Verify copy-to notebook exists in destination Workspace\n+   await dataPage.openAnalysisPage();\n+   const dataResourceCard = new DataResourceCard(page);\n+   const notebookCard = await dataResourceCard.findCard(copiedNotebookName, ResourceCard.Notebook);\n+   expect(notebookCard).toBeTruthy();\n+\n+   // Delete notebook\n+   const modalTextContent = await analysisPage.deleteResource(copiedNotebookName, ResourceCard.Notebook);\n+   expect(modalTextContent).toContain('This will permanently delete the Notebook.');\n+\n+   // Delete destination workspace\n+   await analysisPage.deleteWorkspace();\n }\n \n-describe('Workspace owner Jupyter notebook action tests', () => {\n+async function createCustomCdrVersionWorkspace(cdrVersion: string): Promise<string> {\n+   const workspace = await createWorkspace(page, cdrVersion);\n+   return workspace.getWorkspaceName();\n+}\n \n-  beforeEach(async () => {\n-    await signIn(page);\n-  });\n+// Reuse same source workspace for all tests in this file, in order to reduce test playback time.\n+// Workspace to be created in first test. If create failed in first test, next test will try create it.\n+let srcWorkspace: string;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c73653cfeeb1878125b26d8e90bfb8356b111c29"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0587a4fdd0129c074eea8f8b246683700fdf05af", "author": {"user": {"login": "aweng98", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/0587a4fdd0129c074eea8f8b246683700fdf05af", "committedDate": "2020-12-07T15:39:45Z", "message": "address pr feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MjY3ODYx", "url": "https://github.com/all-of-us/workbench/pull/4359#pullrequestreview-546267861", "createdAt": "2020-12-07T15:37:13Z", "commit": {"oid": "c73653cfeeb1878125b26d8e90bfb8356b111c29"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozNzoxM1rOIAstRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozNzoxM1rOIAstRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwMzM5OQ==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/4359#discussion_r537603399", "createdAt": "2020-12-07T15:37:13Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/owner-copy-to-workspace.spec.ts", "diffHunk": "@@ -18,64 +19,87 @@ jest.setTimeout(20 * 60 * 1000);\n  * - Verify copied notebook is in destination Workspace.\n  * - Open copied notebook and run code to print WORKSPACE_NAMESPACE. It should match destination Workspace namespace.\n  * - Delete notebooks.\n+ *\n+ * @param {string} sourceWorkspaceName: Source workspace name\n+ * @param {string} to create new destination workspace with CDR Version\n  */\n-async function copyNotebookTest(srcCdrVersionName: string, destCdrVersionName: string) {\n-  const destWorkspace = await createWorkspace(page, destCdrVersionName).then(card => card.getWorkspaceName());\n-\n-  await createWorkspace(page, srcCdrVersionName).then(card => card.clickWorkspaceName());\n-\n-  // Create notebook in copy-from workspace.\n-  const sourceNotebookName = makeRandomName('pytest');\n-  const dataPage = new WorkspaceDataPage(page);\n-\n-  const sourceWorkspacePage = await dataPage.createNotebook(sourceNotebookName);\n-\n-  // Exit notebook and returns to the Workspace Analysis tab.\n-  const analysisPage = await sourceWorkspacePage.goAnalysisPage();\n-\n-  // Copy to destination Workspace and give notebook a new name.\n-  const copiedNotebookName = makeRandomName('copy-of');\n-  await analysisPage.copyNotebookToWorkspace(sourceNotebookName, destWorkspace, copiedNotebookName);\n-\n-  // Verify Copy Success modal.\n-  const modal = new Modal(page);\n-  await modal.waitForButton(LinkText.GoToCopiedNotebook);\n-  const textContent = await modal.getTextContent();\n-  const successMsg = `Successfully copied ${sourceNotebookName}  to ${destWorkspace} . Do you want to view the copied Notebook?`;\n-  expect(textContent).toContain(successMsg);\n-  // Dismiss modal.\n-  await modal.clickButton(LinkText.StayHere, {waitForClose: true});\n-\n-  // Delete notebook\n-  const deleteModalTextContent = await analysisPage.deleteResource(sourceNotebookName, ResourceCard.Notebook);\n-  expect(deleteModalTextContent).toContain(`Are you sure you want to delete Notebook: ${sourceNotebookName}?`);\n-\n-  // Perform actions in copied notebook.\n-  // Open destination Workspace\n-  await findOrCreateWorkspace(page, {workspaceName: destWorkspace}).then(card => card.clickWorkspaceName());\n-\n-  // Verify copy-to notebook exists in destination Workspace\n-  await dataPage.openAnalysisPage();\n-  const dataResourceCard = new DataResourceCard(page);\n-  const notebookCard = await dataResourceCard.findCard(copiedNotebookName, ResourceCard.Notebook);\n-  expect(notebookCard).toBeTruthy();\n-\n-  // Delete notebook\n-  const modalTextContent = await analysisPage.deleteResource(copiedNotebookName, ResourceCard.Notebook);\n-  expect(modalTextContent).toContain('This will permanently delete the Notebook.');\n+async function copyNotebookTest(sourceWorkspaceName: string, destCdrVersionName: string) {\n+\n+   const destWorkspace = await createWorkspace(page, destCdrVersionName).then(card => card.getWorkspaceName());\n+\n+   // Find and open source workspace Data page.\n+   const workspaceCard = await WorkspaceCard.findCard(page, sourceWorkspaceName);\n+   await workspaceCard.clickWorkspaceName();\n+\n+   // Create notebook in source workspace.\n+   const sourceNotebookName = makeRandomName('pytest');\n+   const dataPage = new WorkspaceDataPage(page);\n+\n+   const sourceWorkspacePage = await dataPage.createNotebook(sourceNotebookName);\n+\n+   // Exit notebook and returns to the Workspace Analysis tab.\n+   const analysisPage = await sourceWorkspacePage.goAnalysisPage();\n+\n+   // Copy to destination Workspace and give notebook a new name.\n+   const copiedNotebookName = makeRandomName('copy-of');\n+   await analysisPage.copyNotebookToWorkspace(sourceNotebookName, destWorkspace, copiedNotebookName);\n+\n+   // Verify Copy Success modal.\n+   const modal = new Modal(page);\n+   await modal.waitForButton(LinkText.GoToCopiedNotebook);\n+   const textContent = await modal.getTextContent();\n+   const successMsg = `Successfully copied ${sourceNotebookName}  to ${destWorkspace} . Do you want to view the copied Notebook?`;\n+   expect(textContent).toContain(successMsg);\n+   // Dismiss modal.\n+   await modal.clickButton(LinkText.StayHere, {waitForClose: true});\n+\n+   // Delete notebook\n+   const deleteModalTextContent = await analysisPage.deleteResource(sourceNotebookName, ResourceCard.Notebook);\n+   expect(deleteModalTextContent).toContain(`Are you sure you want to delete Notebook: ${sourceNotebookName}?`);\n+\n+   // Perform actions in copied notebook.\n+   // Open destination Workspace\n+   await findOrCreateWorkspace(page, {workspaceName: destWorkspace}).then(card => card.clickWorkspaceName());\n+\n+   // Verify copy-to notebook exists in destination Workspace\n+   await dataPage.openAnalysisPage();\n+   const dataResourceCard = new DataResourceCard(page);\n+   const notebookCard = await dataResourceCard.findCard(copiedNotebookName, ResourceCard.Notebook);\n+   expect(notebookCard).toBeTruthy();\n+\n+   // Delete notebook\n+   const modalTextContent = await analysisPage.deleteResource(copiedNotebookName, ResourceCard.Notebook);\n+   expect(modalTextContent).toContain('This will permanently delete the Notebook.');\n+\n+   // Delete destination workspace\n+   await analysisPage.deleteWorkspace();\n }\n \n-describe('Workspace owner Jupyter notebook action tests', () => {\n+async function createCustomCdrVersionWorkspace(cdrVersion: string): Promise<string> {\n+   const workspace = await createWorkspace(page, cdrVersion);\n+   return workspace.getWorkspaceName();\n+}\n \n-  beforeEach(async () => {\n-    await signIn(page);\n-  });\n+// Reuse same source workspace for all tests in this file, in order to reduce test playback time.\n+// Workspace to be created in first test. If create failed in first test, next test will try create it.\n+let srcWorkspace: string;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU5NDE0Mg=="}, "originalCommit": {"oid": "c73653cfeeb1878125b26d8e90bfb8356b111c29"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3714, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}