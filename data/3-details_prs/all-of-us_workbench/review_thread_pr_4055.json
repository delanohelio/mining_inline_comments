{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDEzOTUx", "number": 4055, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyMDo0NVrOEnGLww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1NjoxM1rOEnJ_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDMxMjM1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyMDo0NVrOHXgIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyMDo0NVrOHXgIMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNTY4MA==", "bodyText": "i think our standard is to use absolute paths from the src root", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494405680", "createdAt": "2020-09-24T15:20:45Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -9,7 +9,10 @@ import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n import {RuntimeApiStub} from 'testing/stubs/runtime-api-stub';\n import {RuntimeApi} from 'generated/fetch/api';\n import {WorkspaceAccessLevel} from 'generated/fetch';\n-\n+import {\n+  markRuntimeOperationCompleteForWorkspace,\n+  updateRuntimeOpsStoreForWorkspaceNamespace\n+} from \"../../utils/stores\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDMyMzMyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyMzowN1rOHXgPNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyMzowN1rOHXgPNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNzQ3OA==", "bodyText": "nit: separate with newline? there are two imports here unlike the other lines", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494407478", "createdAt": "2020-09-24T15:23:07Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -7,6 +7,14 @@ import {runtimeApi} from 'app/services/swagger-fetch-clients';\n import colors, {addOpacity} from 'app/styles/colors';\n import {reactStyles, withCurrentWorkspace} from 'app/utils';\n import {allMachineTypes, validLeonardoMachineTypes} from 'app/utils/machines';\n+import {\n+  abortRuntimeOperationForWorkspace,\n+  markRuntimeOperationCompleteForWorkspace,\n+  RuntimeOperation, RuntimeOpsStore,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDMzNDI5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyNToyN1rOHXgV_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyNToyN1rOHXgV_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwOTIxMg==", "bodyText": "I think the term \"Outstanding\" can be confusing for some of our users. Maybe \"Active\" or \"Running\"?", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494409212", "createdAt": "2020-09-24T15:25:27Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,7 +48,25 @@ const styles = reactStyles({\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n \n+const OutstandingRuntimeOp = ({operation, workspaceNamespace}) => {\n+  return <React.Fragment>\n+    <h3 style={styles.sectionHeader}>Outstanding Runtime Operations</h3>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDM2MTMxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozMDo1NlrOHXgmyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjo0ODozNlrOHXjzDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMzUxMw==", "bodyText": "can this be combined with the conditional above?", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494413513", "createdAt": "2020-09-24T15:30:56Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -88,14 +121,24 @@ export const RuntimePanel = withCurrentWorkspace()(\n     }\n \n     render() {\n+      const {runtimeOps, workspace} = this.props;\n       const {loading, error, runtime} = this.state;\n+\n+      const outstandingRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+\n       if (loading) {\n         return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n       } else if (error) {\n         return <div>Error loading compute configuration</div>;\n       } else if (!runtime) {\n         // TODO(RW-5591): Create runtime page goes here.\n-        return <div>No runtime exists yet</div>;\n+        return <React.Fragment>\n+          <div>No runtime exists yet</div>\n+          {outstandingRuntimeOp && <hr/>}\n+          {outstandingRuntimeOp && <div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2NTgwNw==", "bodyText": "It cannot - you can only use this syntax with one element. I suppose I could wrap it in React.Fragment but I've never seen that outside the top level of a render function", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494465807", "createdAt": "2020-09-24T16:48:36Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -88,14 +121,24 @@ export const RuntimePanel = withCurrentWorkspace()(\n     }\n \n     render() {\n+      const {runtimeOps, workspace} = this.props;\n       const {loading, error, runtime} = this.state;\n+\n+      const outstandingRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+\n       if (loading) {\n         return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n       } else if (error) {\n         return <div>Error loading compute configuration</div>;\n       } else if (!runtime) {\n         // TODO(RW-5591): Create runtime page goes here.\n-        return <div>No runtime exists yet</div>;\n+        return <React.Fragment>\n+          <div>No runtime exists yet</div>\n+          {outstandingRuntimeOp && <hr/>}\n+          {outstandingRuntimeOp && <div>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMzUxMw=="}, "originalCommit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDQyMjM0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo0NDo0MFrOHXhNHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjo0OTo1OFrOHXj2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyMzMyNA==", "bodyText": "This is probably due to my unfamiliarity with UI testing but, can you explain how we're testing different calls in each test? I can see that you're changing what gets mocked in each test but it looks like the same call, runInitializerAndTimers is getting invoked in each test.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494423324", "createdAt": "2020-09-24T15:44:40Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -311,4 +318,37 @@ describe('RuntimeInitializer', () => {\n     }\n   });\n \n+  it('should use and clean the runtimeOpsStore for get', async() => {\n+    mockGetRuntimeCalls([baseRuntime]);\n+    await runInitializerAndTimers();\n+    expect(mockSetRuntimeOpsStore).toHaveBeenCalled();\n+    expect(runtimeOpsStore.get().opsByWorkspaceNamespace[workspaceNamespace]).toBeUndefined();\n+  });\n+\n+  it('should use and clean the runtimeOpsStore for create', async() => {\n+    mockGetRuntime.mockRejectedValueOnce(new Response(null, {status: 404}));\n+    mockCreateRuntime.mockImplementationOnce(async(workspaceNamespace) => {\n+      return {status: RuntimeStatus.Creating};\n+    });\n+    await runInitializerAndTimers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2NjY1Mw==", "bodyText": "poll in leo-runtime-initializer does different runtime API calls based on the status of the runtime. The thing that's different in each of these tests is what I'm mocking the get with.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494466653", "createdAt": "2020-09-24T16:49:58Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -311,4 +318,37 @@ describe('RuntimeInitializer', () => {\n     }\n   });\n \n+  it('should use and clean the runtimeOpsStore for get', async() => {\n+    mockGetRuntimeCalls([baseRuntime]);\n+    await runInitializerAndTimers();\n+    expect(mockSetRuntimeOpsStore).toHaveBeenCalled();\n+    expect(runtimeOpsStore.get().opsByWorkspaceNamespace[workspaceNamespace]).toBeUndefined();\n+  });\n+\n+  it('should use and clean the runtimeOpsStore for create', async() => {\n+    mockGetRuntime.mockRejectedValueOnce(new Response(null, {status: 404}));\n+    mockCreateRuntime.mockImplementationOnce(async(workspaceNamespace) => {\n+      return {status: RuntimeStatus.Creating};\n+    });\n+    await runInitializerAndTimers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyMzMyNA=="}, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDQzOTMwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo0ODoxNlrOHXhXig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo0ODoxNlrOHXhXig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNTk5NA==", "bodyText": "this should probably be a dataprocConfig by default since that's what all of our runtimes are right now.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494425994", "createdAt": "2020-09-24T15:48:16Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -166,37 +171,82 @@ export class LeoRuntimeInitializer {\n   }\n \n   private async getRuntime(): Promise<Runtime> {\n-    return await runtimeApi().getRuntime(this.workspaceNamespace, {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'get',\n+      aborter: aborter\n+    });\n+    await promise;\n+    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n+    return promise;\n   }\n \n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    await runtimeApi().createRuntime(this.workspaceNamespace,\n-      {configurationType: RuntimeConfigurationType.DefaultDataproc},\n-      {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    let runtime: Runtime;\n+    if (serverConfigStore.getValue().enableCustomRuntimes) {\n+      // TODO(RW-3418): allow custom runtimes, maybe plumb default through serverConfigStore?\n+      runtime = {\n+        gceConfig: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDQ0NDMwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo0OToyMFrOHXhavA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1MzoxM1rOHXmJKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNjgxMg==", "bodyText": "nit: you can just await the createRuntime call without making a variable", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494426812", "createdAt": "2020-09-24T15:49:20Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -166,37 +171,82 @@ export class LeoRuntimeInitializer {\n   }\n \n   private async getRuntime(): Promise<Runtime> {\n-    return await runtimeApi().getRuntime(this.workspaceNamespace, {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'get',\n+      aborter: aborter\n+    });\n+    await promise;\n+    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n+    return promise;\n   }\n \n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    await runtimeApi().createRuntime(this.workspaceNamespace,\n-      {configurationType: RuntimeConfigurationType.DefaultDataproc},\n-      {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    let runtime: Runtime;\n+    if (serverConfigStore.getValue().enableCustomRuntimes) {\n+      // TODO(RW-3418): allow custom runtimes, maybe plumb default through serverConfigStore?\n+      runtime = {\n+        gceConfig: {\n+          diskSize: 50,\n+          machineType: 'n1-standard-4'\n+        }\n+      };\n+    } else {\n+      runtime = {configurationType: RuntimeConfigurationType.DefaultDataproc};\n+    }\n+    const promise = runtimeApi().createRuntime(this.workspaceNamespace,\n+      runtime,\n+      {signal: this.pollAbortSignal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'create',\n+      aborter: aborter\n+    });\n     this.createCount++;\n+    await promise;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2OTI2NQ==", "bodyText": "I'm putting the promise in the runtimesStore; I guess I could then access the store again to await that?", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494469265", "createdAt": "2020-09-24T16:54:11Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -166,37 +171,82 @@ export class LeoRuntimeInitializer {\n   }\n \n   private async getRuntime(): Promise<Runtime> {\n-    return await runtimeApi().getRuntime(this.workspaceNamespace, {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'get',\n+      aborter: aborter\n+    });\n+    await promise;\n+    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n+    return promise;\n   }\n \n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    await runtimeApi().createRuntime(this.workspaceNamespace,\n-      {configurationType: RuntimeConfigurationType.DefaultDataproc},\n-      {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    let runtime: Runtime;\n+    if (serverConfigStore.getValue().enableCustomRuntimes) {\n+      // TODO(RW-3418): allow custom runtimes, maybe plumb default through serverConfigStore?\n+      runtime = {\n+        gceConfig: {\n+          diskSize: 50,\n+          machineType: 'n1-standard-4'\n+        }\n+      };\n+    } else {\n+      runtime = {configurationType: RuntimeConfigurationType.DefaultDataproc};\n+    }\n+    const promise = runtimeApi().createRuntime(this.workspaceNamespace,\n+      runtime,\n+      {signal: this.pollAbortSignal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'create',\n+      aborter: aborter\n+    });\n     this.createCount++;\n+    await promise;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNjgxMg=="}, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNDIzMw==", "bodyText": "oh ok. missed that, this is good then.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494504233", "createdAt": "2020-09-24T17:53:13Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -166,37 +171,82 @@ export class LeoRuntimeInitializer {\n   }\n \n   private async getRuntime(): Promise<Runtime> {\n-    return await runtimeApi().getRuntime(this.workspaceNamespace, {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'get',\n+      aborter: aborter\n+    });\n+    await promise;\n+    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n+    return promise;\n   }\n \n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    await runtimeApi().createRuntime(this.workspaceNamespace,\n-      {configurationType: RuntimeConfigurationType.DefaultDataproc},\n-      {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    let runtime: Runtime;\n+    if (serverConfigStore.getValue().enableCustomRuntimes) {\n+      // TODO(RW-3418): allow custom runtimes, maybe plumb default through serverConfigStore?\n+      runtime = {\n+        gceConfig: {\n+          diskSize: 50,\n+          machineType: 'n1-standard-4'\n+        }\n+      };\n+    } else {\n+      runtime = {configurationType: RuntimeConfigurationType.DefaultDataproc};\n+    }\n+    const promise = runtimeApi().createRuntime(this.workspaceNamespace,\n+      runtime,\n+      {signal: this.pollAbortSignal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'create',\n+      aborter: aborter\n+    });\n     this.createCount++;\n+    await promise;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNjgxMg=="}, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDQ4MTQ0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/stores.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo1NzozOVrOHXhyEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo1NzozOVrOHXhyEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMjc4NQ==", "bodyText": "why is this one let while the others are const?", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494432785", "createdAt": "2020-09-24T15:57:39Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -30,6 +30,46 @@ interface ProfileStore {\n \n export const profileStore = atom<ProfileStore>({});\n \n+export interface RuntimeOperation {\n+  promise: Promise<any>;\n+  operation: string;\n+  aborter: AbortController;\n+}\n+\n+export interface WorkspaceRuntimeOperationMap {\n+  [workspaceNamespace: string]: RuntimeOperation;\n+}\n+\n+export interface RuntimeOpsStore {\n+  opsByWorkspaceNamespace: WorkspaceRuntimeOperationMap;\n+}\n+\n+export const runtimeOpsStore = atom<RuntimeOpsStore>({opsByWorkspaceNamespace: {}});\n+\n+export const updateRuntimeOpsStoreForWorkspaceNamespace = (workspaceNamespace: string, runtimeOperation: RuntimeOperation) => {\n+  const opsByWorkspaceNamespace = runtimeOpsStore.get().opsByWorkspaceNamespace;\n+  opsByWorkspaceNamespace[workspaceNamespace] = runtimeOperation;\n+  runtimeOpsStore.set({opsByWorkspaceNamespace: opsByWorkspaceNamespace});\n+};\n+\n+export let markRuntimeOperationCompleteForWorkspace = (workspaceNamespace: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDQ5NzMxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/stores.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjowMToyNFrOHXh8Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1NjoyOVrOHXmQng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNTQwNg==", "bodyText": "do we need to set the entire map for this to work? I would have thought that its sufficient to just update the map with the line above.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494435406", "createdAt": "2020-09-24T16:01:24Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -30,6 +30,46 @@ interface ProfileStore {\n \n export const profileStore = atom<ProfileStore>({});\n \n+export interface RuntimeOperation {\n+  promise: Promise<any>;\n+  operation: string;\n+  aborter: AbortController;\n+}\n+\n+export interface WorkspaceRuntimeOperationMap {\n+  [workspaceNamespace: string]: RuntimeOperation;\n+}\n+\n+export interface RuntimeOpsStore {\n+  opsByWorkspaceNamespace: WorkspaceRuntimeOperationMap;\n+}\n+\n+export const runtimeOpsStore = atom<RuntimeOpsStore>({opsByWorkspaceNamespace: {}});\n+\n+export const updateRuntimeOpsStoreForWorkspaceNamespace = (workspaceNamespace: string, runtimeOperation: RuntimeOperation) => {\n+  const opsByWorkspaceNamespace = runtimeOpsStore.get().opsByWorkspaceNamespace;\n+  opsByWorkspaceNamespace[workspaceNamespace] = runtimeOperation;\n+  runtimeOpsStore.set({opsByWorkspaceNamespace: opsByWorkspaceNamespace});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3MDA3OQ==", "bodyText": "Javascript is pass by value", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494470079", "createdAt": "2020-09-24T16:55:30Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -30,6 +30,46 @@ interface ProfileStore {\n \n export const profileStore = atom<ProfileStore>({});\n \n+export interface RuntimeOperation {\n+  promise: Promise<any>;\n+  operation: string;\n+  aborter: AbortController;\n+}\n+\n+export interface WorkspaceRuntimeOperationMap {\n+  [workspaceNamespace: string]: RuntimeOperation;\n+}\n+\n+export interface RuntimeOpsStore {\n+  opsByWorkspaceNamespace: WorkspaceRuntimeOperationMap;\n+}\n+\n+export const runtimeOpsStore = atom<RuntimeOpsStore>({opsByWorkspaceNamespace: {}});\n+\n+export const updateRuntimeOpsStoreForWorkspaceNamespace = (workspaceNamespace: string, runtimeOperation: RuntimeOperation) => {\n+  const opsByWorkspaceNamespace = runtimeOpsStore.get().opsByWorkspaceNamespace;\n+  opsByWorkspaceNamespace[workspaceNamespace] = runtimeOperation;\n+  runtimeOpsStore.set({opsByWorkspaceNamespace: opsByWorkspaceNamespace});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNTQwNg=="}, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMzQ5Mg==", "bodyText": "Is that still true for objects? I was able to modify an object with the follow code snippet.\nThe behavior may be different in your case though because of atomic store.\nfunction flipValue(map) {\n  map['key'] = \"newValue\"\n}\n\nmyMap = {'key': \"oldValue\"};\nflipValue(myMap);\n\nconsole.log(\"Key is: \" + myMap['key'])\n\nKey is: newValue", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494503492", "createdAt": "2020-09-24T17:51:50Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -30,6 +30,46 @@ interface ProfileStore {\n \n export const profileStore = atom<ProfileStore>({});\n \n+export interface RuntimeOperation {\n+  promise: Promise<any>;\n+  operation: string;\n+  aborter: AbortController;\n+}\n+\n+export interface WorkspaceRuntimeOperationMap {\n+  [workspaceNamespace: string]: RuntimeOperation;\n+}\n+\n+export interface RuntimeOpsStore {\n+  opsByWorkspaceNamespace: WorkspaceRuntimeOperationMap;\n+}\n+\n+export const runtimeOpsStore = atom<RuntimeOpsStore>({opsByWorkspaceNamespace: {}});\n+\n+export const updateRuntimeOpsStoreForWorkspaceNamespace = (workspaceNamespace: string, runtimeOperation: RuntimeOperation) => {\n+  const opsByWorkspaceNamespace = runtimeOpsStore.get().opsByWorkspaceNamespace;\n+  opsByWorkspaceNamespace[workspaceNamespace] = runtimeOperation;\n+  runtimeOpsStore.set({opsByWorkspaceNamespace: opsByWorkspaceNamespace});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNTQwNg=="}, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNjE0Mg==", "bodyText": "Hm, ok. Perhaps it is atom related, then. It was definitely failing to update the store when I didn't explicitly set it.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494506142", "createdAt": "2020-09-24T17:56:29Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -30,6 +30,46 @@ interface ProfileStore {\n \n export const profileStore = atom<ProfileStore>({});\n \n+export interface RuntimeOperation {\n+  promise: Promise<any>;\n+  operation: string;\n+  aborter: AbortController;\n+}\n+\n+export interface WorkspaceRuntimeOperationMap {\n+  [workspaceNamespace: string]: RuntimeOperation;\n+}\n+\n+export interface RuntimeOpsStore {\n+  opsByWorkspaceNamespace: WorkspaceRuntimeOperationMap;\n+}\n+\n+export const runtimeOpsStore = atom<RuntimeOpsStore>({opsByWorkspaceNamespace: {}});\n+\n+export const updateRuntimeOpsStoreForWorkspaceNamespace = (workspaceNamespace: string, runtimeOperation: RuntimeOperation) => {\n+  const opsByWorkspaceNamespace = runtimeOpsStore.get().opsByWorkspaceNamespace;\n+  opsByWorkspaceNamespace[workspaceNamespace] = runtimeOperation;\n+  runtimeOpsStore.set({opsByWorkspaceNamespace: opsByWorkspaceNamespace});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNTQwNg=="}, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDkzNTA3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1NjoxM1rOHXmQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1NzowNlrOHXmSBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTk5Nw==", "bodyText": "nit: I would either change all of the variable naming to go from outstanding -> active or only use the \"Active\" term on the user facing string.\nHaving both synonymous terms like in this line can be confusing when searching for code references.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494505997", "createdAt": "2020-09-24T17:56:13Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -242,10 +243,10 @@ export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOps\n         <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n           <Button disabled={true}>Create</Button>\n         </FlexRow>\n-        {outstandingRuntimeOp && <hr/>}\n-        {outstandingRuntimeOp && <div>\n-          <OutstandingRuntimeOp operation={outstandingRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </div>}\n+        {outstandingRuntimeOp && <React.Fragment>\n+          <hr/>\n+          <ActiveRuntimeOp operation={outstandingRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8137aab2fd1842a2084e73a1216ac593f420ac59"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNjUwMQ==", "bodyText": "whoops, thought I got them all. Thank you!", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494506501", "createdAt": "2020-09-24T17:57:06Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -242,10 +243,10 @@ export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOps\n         <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n           <Button disabled={true}>Create</Button>\n         </FlexRow>\n-        {outstandingRuntimeOp && <hr/>}\n-        {outstandingRuntimeOp && <div>\n-          <OutstandingRuntimeOp operation={outstandingRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </div>}\n+        {outstandingRuntimeOp && <React.Fragment>\n+          <hr/>\n+          <ActiveRuntimeOp operation={outstandingRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTk5Nw=="}, "originalCommit": {"oid": "8137aab2fd1842a2084e73a1216ac593f420ac59"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3951, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}