{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDgzNzcw", "number": 3550, "title": "[RW-3942][risk=moderate] Add readonly database user (1/2)", "bodyText": "Adds a new database user: dev-readonly, intended for developer readonly access. Our other usernames are: workbench (i.e. the application), root, and liquibase.\nAdds a new flag to ./project.rb connect-to-cloud-db of --db-user. Defaults to the new readonly user.\n\nIf this looks good, I will need to execute the following:\n\nApply a manual process to backfill the new username and generated passwords into all vars.env files in all environments\nManually run the create_db script in all environments to backfill the new user. Alternatively may issue this as manual SQL commands, will figure this out on the ticket.\n--> TIL: create_db.sql gets applied on all migrations", "createdAt": "2020-05-07T06:20:06Z", "url": "https://github.com/all-of-us/workbench/pull/3550", "merged": true, "mergeCommit": {"oid": "373a834be478fecc27bdf46b47cf976946aa865b"}, "closed": true, "closedAt": "2020-05-09T00:29:34Z", "author": {"login": "calbach"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABce8vOnAFqTQwNzQyNzY0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfbKmcgFqTQwODU4ODA2OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NDI3NjQx", "url": "https://github.com/all-of-us/workbench/pull/3550#pullrequestreview-407427641", "createdAt": "2020-05-07T12:37:09Z", "commit": {"oid": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjozNzowOVrOGR8dyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMjo0NToxMFrOGR8xDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ2OTY0Mg==", "bodyText": "Can you put a prominent notice right above here that the session is or isn't read-only?", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421469642", "createdAt": "2020-05-07T12:37:09Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2020,20 +2022,36 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  db_password = nil\n+  case op.opts.db_user\n+  when \"dev-readonly\"\n+    db_password = env[\"DEV_READONLY_DB_PASSWORD\"]\n+  when \"workbench\"\n+    db_password = env[\"WORKBENCH_DB_PASSWORD\"]\n+  when \"root\"\n+    db_password = env[\"MYSQL_ROOT_PASSWORD\"]\n+  else\n+    raise ArgumentError.new(\n+            \"invalid --db-user provided, wanted 'workbench', 'dev-readonly', or 'root', got '#{op.opts.db_user}'\")\n+  end\n+\n   CloudSqlProxyContext.new(gcc.project).run do\n-    password = op.opts.root ? env[\"MYSQL_ROOT_PASSWORD\"] : env[\"WORKBENCH_DB_PASSWORD\"]\n-    user = op.opts.root ? \"root\" : env[\"WORKBENCH_DB_USER\"]\n     common.run_inline %W{\n-      mysql --host=127.0.0.1 --port=3307 --user=#{user}\n-      --database=#{env[\"DB_NAME\"]} --password=#{password}},\n-      password\n+      mysql --host=127.0.0.1 --port=3307 --user=#{op.opts.db_user}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MDY0Mw==", "bodyText": "Maybe for a later pass, but do we have a policy about which systems we need named accounts per user for and which ones we can share? If at some point we wanted to audit who was running which statements, it would be helpful to associate these sessions with names.\nOr maybe there's another way to capture that outside of mysql.", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421470643", "createdAt": "2020-05-07T12:38:49Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1277,6 +1277,8 @@ def write_db_creds_file(project, cdr_db_name, root_password, workbench_password)\n       db_creds_file.puts \"MYSQL_ROOT_PASSWORD=#{root_password}\"\n       db_creds_file.puts \"WORKBENCH_DB_USER=workbench\"\n       db_creds_file.puts \"WORKBENCH_DB_PASSWORD=#{workbench_password}\"\n+      db_creds_file.puts \"DEV_READONLY_DB_USER=dev-readonly\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MTY2Ng==", "bodyText": "nit: I think this would be a bit more readable if the CREATE/PASSWORD/GRANT statements were grouped by user instead of by statement type.", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421471666", "createdAt": "2020-05-07T12:40:30Z", "author": {"login": "jaycarlton"}, "path": "api/db/create_db.sql", "diffHunk": "@@ -1,16 +1,20 @@\n CREATE DATABASE IF NOT EXISTS ${DB_NAME} CHARACTER SET utf8 COLLATE utf8_general_ci;\n \n+CREATE USER IF NOT EXISTS '${DEV_READONLY_DB_USER}'@'%' IDENTIFIED BY '${DEV_READONLY_DB_PASSWORD}';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MjQyMA==", "bodyText": "If I were looking at the help text quickly, I'd probably be looking for an option like --read-only or --access=read-only rather than --db-user (which is a bit of an implementation detail).", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421472420", "createdAt": "2020-05-07T12:41:45Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2020,20 +2022,36 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MzA0Mw==", "bodyText": "I'd probably make a map from user name to env variable name and do a lookup instead of a case here.", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421473043", "createdAt": "2020-05-07T12:42:44Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2020,20 +2022,36 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  db_password = nil\n+  case op.opts.db_user", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3MzQwNQ==", "bodyText": "nit: might want the ability to override this port from a citizenship standpoint", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421473405", "createdAt": "2020-05-07T12:43:18Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2020,20 +2022,36 @@ def connect_to_cloud_db(cmd_name, *args)\n   common = Common.new\n   op = WbOptionsParser.new(cmd_name, args)\n   op.add_option(\n-    \"--root\",\n-    ->(opts, _) { opts.root = true },\n-    \"Connect as root\")\n+    \"--db-user [user]\",\n+    ->(opts, v) { opts.db_user = v },\n+    \"Optional database user to connect as, defaults to 'dev-readonly'\")\n   gcc = GcloudContextV2.new(op)\n   op.parse.validate\n   gcc.validate\n+\n+  if op.opts.db_user.nil?\n+    op.opts.db_user = \"dev-readonly\"\n+  end\n+\n   env = read_db_vars(gcc)\n+  db_password = nil\n+  case op.opts.db_user\n+  when \"dev-readonly\"\n+    db_password = env[\"DEV_READONLY_DB_PASSWORD\"]\n+  when \"workbench\"\n+    db_password = env[\"WORKBENCH_DB_PASSWORD\"]\n+  when \"root\"\n+    db_password = env[\"MYSQL_ROOT_PASSWORD\"]\n+  else\n+    raise ArgumentError.new(\n+            \"invalid --db-user provided, wanted 'workbench', 'dev-readonly', or 'root', got '#{op.opts.db_user}'\")\n+  end\n+\n   CloudSqlProxyContext.new(gcc.project).run do\n-    password = op.opts.root ? env[\"MYSQL_ROOT_PASSWORD\"] : env[\"WORKBENCH_DB_PASSWORD\"]\n-    user = op.opts.root ? \"root\" : env[\"WORKBENCH_DB_USER\"]\n     common.run_inline %W{\n-      mysql --host=127.0.0.1 --port=3307 --user=#{user}\n-      --database=#{env[\"DB_NAME\"]} --password=#{password}},\n-      password\n+      mysql --host=127.0.0.1 --port=3307 --user=#{op.opts.db_user}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ3NDU3Mg==", "bodyText": "Please break this into three assignments, one on each line, or make a method that outputs an array of random passwords so it's like root_password, workbench_password, readonly_password = *random_passwords(3). I stared at it for a good minute before I realized it was a multi-assignment.", "url": "https://github.com/all-of-us/workbench/pull/3550#discussion_r421474572", "createdAt": "2020-05-07T12:45:10Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -2490,12 +2508,12 @@ def create_project_resources(gcc)\n end\n \n def setup_project_data(gcc, cdr_db_name)\n-  root_password, workbench_password = random_password(), random_password()\n+  root_password, workbench_password, readonly_password = random_password(), random_password(), random_password()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e51ab0668aad88f6b817e3845c8c0f6d363fd17e"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96d7e013507b7c2dfeeabf8b1dbc11c4666d357b", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/96d7e013507b7c2dfeeabf8b1dbc11c4666d357b", "committedDate": "2020-05-09T00:03:43Z", "message": "Add readonly user and support specifying a DB user for CLI access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "183682f3b3559c278bc39f04bead4a7d6309d647", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/183682f3b3559c278bc39f04bead4a7d6309d647", "committedDate": "2020-05-09T00:03:43Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d8955da64e62b2d12e04526af62cbc018e6bce5", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/4d8955da64e62b2d12e04526af62cbc018e6bce5", "committedDate": "2020-05-09T00:03:43Z", "message": "grant all"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4e601ce19f27af14fb915f839d338b2857c22b3", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/f4e601ce19f27af14fb915f839d338b2857c22b3", "committedDate": "2020-05-09T00:09:57Z", "message": "revert DB CLI changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd0c6b6a8bfdcd329abd80f48dd006b0b6449428", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/bd0c6b6a8bfdcd329abd80f48dd006b0b6449428", "committedDate": "2020-05-08T00:49:54Z", "message": "grant all"}, "afterCommit": {"oid": "f4e601ce19f27af14fb915f839d338b2857c22b3", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/f4e601ce19f27af14fb915f839d338b2857c22b3", "committedDate": "2020-05-09T00:09:57Z", "message": "revert DB CLI changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTg4MDY5", "url": "https://github.com/all-of-us/workbench/pull/3550#pullrequestreview-408588069", "createdAt": "2020-05-09T00:16:45Z", "commit": {"oid": "f4e601ce19f27af14fb915f839d338b2857c22b3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4970, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}