{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzU4NTEx", "number": 3058, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxMzozNlrODbxZBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0Nzo0NVrODb_DkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ3MzY3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxMzozNlrOFjcyPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNToyODozNFrOFjvLeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjA5Mw==", "bodyText": "I'm not opposed to using immutables. This was in the interest of using the least strict type which in this case is Map. IMO, immutability is an implementation detail.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372716093", "createdAt": "2020-01-30T01:13:36Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -174,7 +181,7 @@ public void setDistinctWorkspaceLimit(int limit) {\n             .limit(distinctWorkspacelimit)\n             .collect(Collectors.toList());\n \n-    final ImmutableMap<Long, FirecloudWorkspaceResponse> idToLiveWorkspace =\n+    final Map<Long, DbWorkspace> idToDbWorkspace =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjczMDkxMw==", "bodyText": "In the case of the Immutable variants, the general preferred style is actually to use the more specific Immutable type where possible. The reason is that it has a semantically meaningful distinction in its interface - it's not just an implementation detail. Code using this variable might need to know it's immutable, i.e. that certain methods will just fail.\nHere's the guidance from the Guava library (see: \"interfaces\", not implementations):\nhttps://guava.dev/releases/19.0/api/docs/com/google/common/collect/ImmutableCollection.html\nNote that since this is just a local variable, this guidance is not super meaningful, and arguably Map<> is also acceptable (or maybe correct?) in this case since it doesn't need to be immutable (that's probably how I would have written it, TBH).", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372730913", "createdAt": "2020-01-30T02:20:05Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -174,7 +181,7 @@ public void setDistinctWorkspaceLimit(int limit) {\n             .limit(distinctWorkspacelimit)\n             .collect(Collectors.toList());\n \n-    final ImmutableMap<Long, FirecloudWorkspaceResponse> idToLiveWorkspace =\n+    final Map<Long, DbWorkspace> idToDbWorkspace =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjA5Mw=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjczMTU1NQ==", "bodyText": "Sorry, I should reword \"where possible\" to \"where relevant\". In this particular instance, I could see an argument either way, but this is at least to point out that there are legitimate cases where you should be using the ImmutableMap type over Map.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372731555", "createdAt": "2020-01-30T02:23:14Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -174,7 +181,7 @@ public void setDistinctWorkspaceLimit(int limit) {\n             .limit(distinctWorkspacelimit)\n             .collect(Collectors.toList());\n \n-    final ImmutableMap<Long, FirecloudWorkspaceResponse> idToLiveWorkspace =\n+    final Map<Long, DbWorkspace> idToDbWorkspace =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjA5Mw=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxNzQ2NQ==", "bodyText": "Got it, that makes sense. I've definitely run into cases where I had collection methods fail on me.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373017465", "createdAt": "2020-01-30T15:28:34Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -174,7 +181,7 @@ public void setDistinctWorkspaceLimit(int limit) {\n             .limit(distinctWorkspacelimit)\n             .collect(Collectors.toList());\n \n-    final ImmutableMap<Long, FirecloudWorkspaceResponse> idToLiveWorkspace =\n+    final Map<Long, DbWorkspace> idToDbWorkspace =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjA5Mw=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ3NjIzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxNTowOFrOFjcztg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjo0MTo0MVrOFj8WmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjQ3MA==", "bodyText": "I decided to return this value as part of the RecentResource API model because the response object is used to construct UI resource cards which needs this info. The alternative was to make a getWorkspaces() call for each workspace in the response list and that seemed too heavy handed.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372716470", "createdAt": "2020-01-30T01:15:08Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -247,12 +260,21 @@ public boolean hasValidBlobIdIfNotebookNamePresent(DbUserRecentResource dbUserRe\n   }\n \n   private RecentResource buildRecentResource(\n-      ImmutableMap<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n+      Map<Long, DbWorkspace> idToDbWorkspace,\n+      Map<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n       DbUserRecentResource dbUserRecentResource) {\n     RecentResource resource = TO_CLIENT.apply(dbUserRecentResource);\n     FirecloudWorkspaceResponse workspaceDetails =\n         idToFcWorkspaceResponse.get(dbUserRecentResource.getWorkspaceId());\n-    resource.setPermission(workspaceDetails.getAccessLevel());\n+    if (workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      resource.setWorkspaceBillingStatus(\n+          idToDbWorkspace.get(dbUserRecentResource.getWorkspaceId()).getBillingStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MzIwMg==", "bodyText": "Another alternative would be to change RecentResource to include the entire workspace, but then I think you're still calling out to firecloud on each request... just not returning as much.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373183202", "createdAt": "2020-01-30T20:43:02Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -247,12 +260,21 @@ public boolean hasValidBlobIdIfNotebookNamePresent(DbUserRecentResource dbUserRe\n   }\n \n   private RecentResource buildRecentResource(\n-      ImmutableMap<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n+      Map<Long, DbWorkspace> idToDbWorkspace,\n+      Map<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n       DbUserRecentResource dbUserRecentResource) {\n     RecentResource resource = TO_CLIENT.apply(dbUserRecentResource);\n     FirecloudWorkspaceResponse workspaceDetails =\n         idToFcWorkspaceResponse.get(dbUserRecentResource.getWorkspaceId());\n-    resource.setPermission(workspaceDetails.getAccessLevel());\n+    if (workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      resource.setWorkspaceBillingStatus(\n+          idToDbWorkspace.get(dbUserRecentResource.getWorkspaceId()).getBillingStatus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjQ3MA=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMzMwNA==", "bodyText": "yeah... adding the entire workspace feels cleaner but it would defeat the purpose of this change which is to improve performance", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373233304", "createdAt": "2020-01-30T22:41:41Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -247,12 +260,21 @@ public boolean hasValidBlobIdIfNotebookNamePresent(DbUserRecentResource dbUserRe\n   }\n \n   private RecentResource buildRecentResource(\n-      ImmutableMap<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n+      Map<Long, DbWorkspace> idToDbWorkspace,\n+      Map<Long, FirecloudWorkspaceResponse> idToFcWorkspaceResponse,\n       DbUserRecentResource dbUserRecentResource) {\n     RecentResource resource = TO_CLIENT.apply(dbUserRecentResource);\n     FirecloudWorkspaceResponse workspaceDetails =\n         idToFcWorkspaceResponse.get(dbUserRecentResource.getWorkspaceId());\n-    resource.setPermission(workspaceDetails.getAccessLevel());\n+    if (workbenchConfigProvider.get().featureFlags.enableBillingLockout) {\n+      resource.setWorkspaceBillingStatus(\n+          idToDbWorkspace.get(dbUserRecentResource.getWorkspaceId()).getBillingStatus());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjQ3MA=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ3ODQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/ManualWorkspaceMapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxNjozNFrOFjc1Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozODoxNVrOFj8Rog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgyNg==", "bodyText": "I made this injectable so I can pull in the WorkbenchConfig provider.\nGood example of why static utility classes can be hard to refactor.\nI am guilty of writing this one heh.\nAlso, the name is intentionally a bit crude to draw attention to the need to migrate this class to the Mapstruct supported WorkspaceMapper.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372716826", "createdAt": "2020-01-30T01:16:34Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/ManualWorkspaceMapper.java", "diffHunk": "@@ -6,22 +6,34 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import javax.inject.Provider;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace.FirecloudWorkspaceId;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.RecentWorkspace;\n import org.pmiops.workbench.model.ResearchPurpose;\n import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.UserRole;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-public class WorkspaceConversionUtils {\n+// We should migrate over to the Mapstruct supported WorkspaceMapper\n+@Service\n+public class ManualWorkspaceMapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1MjM3OQ==", "bodyText": "Is there a ticket to migrate this to Mapstruct, and if there isn't, can you please make one?", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373152379", "createdAt": "2020-01-30T19:36:32Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/ManualWorkspaceMapper.java", "diffHunk": "@@ -6,22 +6,34 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import javax.inject.Provider;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace.FirecloudWorkspaceId;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.RecentWorkspace;\n import org.pmiops.workbench.model.ResearchPurpose;\n import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.UserRole;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-public class WorkspaceConversionUtils {\n+// We should migrate over to the Mapstruct supported WorkspaceMapper\n+@Service\n+public class ManualWorkspaceMapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgyNg=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMjAzNA==", "bodyText": "Done - https://precisionmedicineinitiative.atlassian.net/browse/RW-4367", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373232034", "createdAt": "2020-01-30T22:38:15Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/ManualWorkspaceMapper.java", "diffHunk": "@@ -6,22 +6,34 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import javax.inject.Provider;\n import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.db.model.DbWorkspace.FirecloudWorkspaceId;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspace;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.BillingStatus;\n import org.pmiops.workbench.model.RecentWorkspace;\n import org.pmiops.workbench.model.ResearchPurpose;\n import org.pmiops.workbench.model.SpecificPopulationEnum;\n import org.pmiops.workbench.model.UserRole;\n import org.pmiops.workbench.model.Workspace;\n import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.springframework.stereotype.Service;\n \n-public class WorkspaceConversionUtils {\n+// We should migrate over to the Mapstruct supported WorkspaceMapper\n+@Service\n+public class ManualWorkspaceMapper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgyNg=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ4MzAyOnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxOTo0MVrOFjc36A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxOTo0MVrOFjc36A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNzU0NA==", "bodyText": "AFAICS, we're using the @Autowired constructor so I removed this comment.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372717544", "createdAt": "2020-01-30T01:19:41Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceImpl.java", "diffHunk": "@@ -75,16 +75,15 @@\n   protected static final int RECENT_WORKSPACE_COUNT = 4;\n   private static final Logger log = Logger.getLogger(WorkspaceService.class.getName());\n \n-  // Note: Cannot use an @Autowired constructor with this version of Spring", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ5NDg2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/strings.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToyNjo1M1rOFjc_Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo0MToxNFrOFj5Phw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTM2Mw==", "bodyText": "I can see this being controversial but I felt like we don't really have a good way to organize shared code on the front end. Ex. no BillingService to shove this into.\nI've used this kind of approach with a global string file when I worked with Android and felt like it worked pretty well.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r372719363", "createdAt": "2020-01-30T01:26:53Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/strings.ts", "diffHunk": "@@ -0,0 +1 @@\n+export const ACTION_DISABLED_INVALID_BILLING = 'A valid billing account is required for this action';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4MjM0Mw==", "bodyText": "I'm ok with this, I've seen it work before when the number of strings was pretty small. If you end up with more than ten lines in here you want to start thinking about why the string can't be part of a tiny component or whatever but this is totally fine.", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373182343", "createdAt": "2020-01-30T20:41:14Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/strings.ts", "diffHunk": "@@ -0,0 +1 @@\n+export const ACTION_DISABLED_INVALID_BILLING = 'A valid billing account is required for this action';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxOTM2Mw=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjcxMjQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNjo0Nzo0NVrOFjyJTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjozOTozOVrOFj8TtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjA2MA==", "bodyText": "I know the LiveWorkspace name predates this change but I still find it a bit confusing. Can you change it to idToFirecloudWorkspace or something along those lines?", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373066060", "createdAt": "2020-01-30T16:47:45Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -185,6 +192,12 @@ public void setDistinctWorkspaceLimit(int limit) {\n                                 new AbstractMap.SimpleImmutableEntry<>(\n                                     dbWorkspace.getWorkspaceId(), dbWorkspace)))\n             .flatMap(Streams::stream)\n+            .collect(\n+                ImmutableMap.toImmutableMap(\n+                    SimpleImmutableEntry::getKey, SimpleImmutableEntry::getValue));\n+\n+    final Map<Long, FirecloudWorkspaceResponse> idToLiveWorkspace =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIzMjU2NA==", "bodyText": "Agreed, I felt the same. I'll change it", "url": "https://github.com/all-of-us/workbench/pull/3058#discussion_r373232564", "createdAt": "2020-01-30T22:39:39Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/api/UserMetricsController.java", "diffHunk": "@@ -185,6 +192,12 @@ public void setDistinctWorkspaceLimit(int limit) {\n                                 new AbstractMap.SimpleImmutableEntry<>(\n                                     dbWorkspace.getWorkspaceId(), dbWorkspace)))\n             .flatMap(Streams::stream)\n+            .collect(\n+                ImmutableMap.toImmutableMap(\n+                    SimpleImmutableEntry::getKey, SimpleImmutableEntry::getValue));\n+\n+    final Map<Long, FirecloudWorkspaceResponse> idToLiveWorkspace =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzA2NjA2MA=="}, "originalCommit": {"oid": "ca6c12534a514455b16688e52fad2ed30a2c6f97"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3527, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}