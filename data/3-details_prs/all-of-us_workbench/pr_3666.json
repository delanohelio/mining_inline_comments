{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzODU2OTA1", "number": 3666, "title": "[RW-5059][risk=no] Convert CB wizard to React", "bodyText": "Converts ModalComponent from Angular to React.\nThere are a lot of code changes here from clean up and side effects from the conversion. Feel free to focus on the converted component, modal.component.tsx.\nList View\n\nTree View\n\nModifiers\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally", "createdAt": "2020-06-12T19:48:32Z", "url": "https://github.com/all-of-us/workbench/pull/3666", "merged": true, "mergeCommit": {"oid": "d14a5af8f485e3b65d7dd074ccef657af31b6af2"}, "closed": true, "closedAt": "2020-06-16T19:30:08Z", "author": {"login": "dolbeew"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrknBlAFqTQzMDg3NDkxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr6ZT9AFqTQzMTgyNDAxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODc0OTEw", "url": "https://github.com/all-of-us/workbench/pull/3666#pullrequestreview-430874910", "createdAt": "2020-06-15T18:04:01Z", "commit": {"oid": "8a39db23881aa8cfd676725c683145ac26359390"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNDowMVrOGj9Acw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNDowMVrOGj9Acw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1Mjg4Mw==", "bodyText": "nit: backMode and mode can be initialized to 'list', we will not need else then", "url": "https://github.com/all-of-us/workbench/pull/3666#discussion_r440352883", "createdAt": "2020-06-15T18:04:01Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/modal/modal.component.tsx", "diffHunk": "@@ -0,0 +1,597 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearch} from 'app/cohort-search/list-search/list-search.component';\n+import {ModifierPage} from 'app/cohort-search/modifier-page/modifier-page.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {SelectionList} from 'app/cohort-search/selection-list/selection-list.component';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, stripHtml, typeToTitle} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {addOpacity, colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {environment} from 'environments/environment';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  modalContainer: {\n+    position: 'absolute',\n+    top: '50%',\n+    left: '50%',\n+    overflowY: 'auto',\n+    transform: 'translate(-50%, -50%)',\n+    backgroundColor: colors.white,\n+    borderRadius: '4px',\n+    display: 'flex',\n+    flexFlow: 'column nowrap',\n+    justifyContent: 'space-between',\n+  },\n+  modalContent: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '100%',\n+    width: '100%',\n+  },\n+  modalOverlay: {\n+    position: 'fixed',\n+    top: 0,\n+    left: 0,\n+    width: '100%',\n+    height: '100%',\n+    backgroundColor: `${addOpacity(colors.black, 0.5)}`,\n+    opacity: 0,\n+    visibility: 'hidden',\n+    transform: 'scale(1.1)',\n+    transition: 'visibility 0.25s linear, opacity 0.25s 0s, transform 0.25s',\n+    zIndex: 102,\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  panelLeftActive: {\n+    animation: 'fadeEffect 1s',\n+    display: 'block',\n+  },\n+  separator: {\n+    alignSelf: 'center',\n+    display: 'inline-block',\n+    margin: '0 0.75rem 0.5rem',\n+    boxSizing: 'border-box',\n+    height: '26px',\n+    width: '1px',\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.6)}`,\n+  },\n+  tabButton: {\n+    borderRadius: 0,\n+    fontSize: '14px',\n+    height: '2.25rem',\n+    letterSpacing: 'normal',\n+    margin: '0 1rem',\n+    padding: '0 0.5rem 0.25rem',\n+  },\n+  tabButtonActive: {\n+    color: colors.accent,\n+    borderBottom: `7px solid ${colors.accent}`,\n+    fontWeight: 'bold',\n+    padding: '0 0.5rem',\n+  },\n+  titleBar: {\n+    boxShadow: `0 0.12rem 0.125rem 0 ${colors.accent}`,\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const css = `\n+  .modal-container {\n+    height: 90vh;\n+    width: 80vw;\n+  }\n+  .modal-container.demographics {\n+    width: 50vw;\n+    height: auto;\n+  }\n+  @media (max-width: 1500px) {\n+  .modal-container {\n+    width: 90vw;\n+  }\n+  .modal-container.demographics {\n+    width: 70vw;\n+  }\n+  @media (max-width: 1200px) {\n+    .modal-container, .modal-container.demographics {\n+      width: 100vw;\n+    }\n+  }\n+  @media (max-height: 700px) {\n+    .modal-container {\n+      height: 100vh;\n+    }\n+  }\n+  @media (max-height: 400px) {\n+    .modal-container.demographics {\n+      height: 100vh;\n+    }\n+    .modal-container.demographics.age {\n+      height: auto;\n+    }\n+  }\n+  @media (max-height: 300px) {\n+    .modal-container.demographics.age {\n+      height: 100vh;\n+    }\n+  }\n+}\n+`;\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+  setSearchContext: (context: any) => void;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  conceptType: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  open: boolean;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CBModal extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: undefined,\n+      conceptType: null,\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      open: false,\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    if (!this.state.open) {\n+      const selections = item.searchParameters;\n+      const selectedIds = selections.map(s => s.parameterId);\n+      if (type === CriteriaType.DECEASED) {\n+        this.selectDeceased();\n+      } else {\n+        const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+        let backMode, hierarchyNode, mode;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a39db23881aa8cfd676725c683145ac26359390"}, "originalPosition": 224}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODc2NTI3", "url": "https://github.com/all-of-us/workbench/pull/3666#pullrequestreview-430876527", "createdAt": "2020-06-15T18:06:35Z", "commit": {"oid": "8a39db23881aa8cfd676725c683145ac26359390"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNjozNVrOGj9FhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODowNjozNVrOGj9FhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NDE4MA==", "bodyText": "nit: Totally optional, this can just be searchRequest[role].push(initGroup(role, item).", "url": "https://github.com/all-of-us/workbench/pull/3666#discussion_r440354180", "createdAt": "2020-06-15T18:06:35Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/modal/modal.component.tsx", "diffHunk": "@@ -0,0 +1,597 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearch} from 'app/cohort-search/list-search/list-search.component';\n+import {ModifierPage} from 'app/cohort-search/modifier-page/modifier-page.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {SelectionList} from 'app/cohort-search/selection-list/selection-list.component';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, stripHtml, typeToTitle} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {addOpacity, colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {environment} from 'environments/environment';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  modalContainer: {\n+    position: 'absolute',\n+    top: '50%',\n+    left: '50%',\n+    overflowY: 'auto',\n+    transform: 'translate(-50%, -50%)',\n+    backgroundColor: colors.white,\n+    borderRadius: '4px',\n+    display: 'flex',\n+    flexFlow: 'column nowrap',\n+    justifyContent: 'space-between',\n+  },\n+  modalContent: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '100%',\n+    width: '100%',\n+  },\n+  modalOverlay: {\n+    position: 'fixed',\n+    top: 0,\n+    left: 0,\n+    width: '100%',\n+    height: '100%',\n+    backgroundColor: `${addOpacity(colors.black, 0.5)}`,\n+    opacity: 0,\n+    visibility: 'hidden',\n+    transform: 'scale(1.1)',\n+    transition: 'visibility 0.25s linear, opacity 0.25s 0s, transform 0.25s',\n+    zIndex: 102,\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  panelLeftActive: {\n+    animation: 'fadeEffect 1s',\n+    display: 'block',\n+  },\n+  separator: {\n+    alignSelf: 'center',\n+    display: 'inline-block',\n+    margin: '0 0.75rem 0.5rem',\n+    boxSizing: 'border-box',\n+    height: '26px',\n+    width: '1px',\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.6)}`,\n+  },\n+  tabButton: {\n+    borderRadius: 0,\n+    fontSize: '14px',\n+    height: '2.25rem',\n+    letterSpacing: 'normal',\n+    margin: '0 1rem',\n+    padding: '0 0.5rem 0.25rem',\n+  },\n+  tabButtonActive: {\n+    color: colors.accent,\n+    borderBottom: `7px solid ${colors.accent}`,\n+    fontWeight: 'bold',\n+    padding: '0 0.5rem',\n+  },\n+  titleBar: {\n+    boxShadow: `0 0.12rem 0.125rem 0 ${colors.accent}`,\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const css = `\n+  .modal-container {\n+    height: 90vh;\n+    width: 80vw;\n+  }\n+  .modal-container.demographics {\n+    width: 50vw;\n+    height: auto;\n+  }\n+  @media (max-width: 1500px) {\n+  .modal-container {\n+    width: 90vw;\n+  }\n+  .modal-container.demographics {\n+    width: 70vw;\n+  }\n+  @media (max-width: 1200px) {\n+    .modal-container, .modal-container.demographics {\n+      width: 100vw;\n+    }\n+  }\n+  @media (max-height: 700px) {\n+    .modal-container {\n+      height: 100vh;\n+    }\n+  }\n+  @media (max-height: 400px) {\n+    .modal-container.demographics {\n+      height: 100vh;\n+    }\n+    .modal-container.demographics.age {\n+      height: auto;\n+    }\n+  }\n+  @media (max-height: 300px) {\n+    .modal-container.demographics.age {\n+      height: 100vh;\n+    }\n+  }\n+}\n+`;\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+  setSearchContext: (context: any) => void;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  conceptType: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  open: boolean;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CBModal extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: undefined,\n+      conceptType: null,\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      open: false,\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    if (!this.state.open) {\n+      const selections = item.searchParameters;\n+      const selectedIds = selections.map(s => s.parameterId);\n+      if (type === CriteriaType.DECEASED) {\n+        this.selectDeceased();\n+      } else {\n+        const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+        let backMode, hierarchyNode, mode;\n+        if (this.initTree) {\n+          hierarchyNode = {\n+            domainId: domain,\n+            type: type,\n+            isStandard: standard,\n+            id: 0,\n+          };\n+          backMode = 'tree';\n+          mode = 'tree';\n+        } else {\n+          backMode = 'list';\n+          mode = 'list';\n+        }\n+        this.setState({backMode, hierarchyNode, mode, open: true, selectedIds, selections, title});\n+      }\n+    }\n+  }\n+\n+  setScroll = (id: string) => {\n+    const nodeId = `node${id}`;\n+    const node = document.getElementById(nodeId);\n+    if (node) {\n+      setTimeout(() => node.scrollIntoView({behavior: 'smooth', block: 'center'}), 200);\n+    }\n+    this.setState({loadingSubtree: false});\n+  }\n+\n+  back = () => {\n+    if (this.state.mode === 'tree') {\n+      this.setState({autocompleteSelection: undefined, backMode: 'list', hierarchyNode: undefined, mode: 'list'});\n+    } else {\n+      this.setState({attributesNode: undefined, mode: this.state.backMode});\n+    }\n+  }\n+\n+  finish = () => {\n+    const {searchContext: {domain, groupId, item, role, type}} = this.props;\n+    const {selections} = this.state;\n+    if (domain === DomainType.PERSON) {\n+      triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(type)} - Finish`);\n+    }\n+    const searchRequest = searchRequestStore.getValue();\n+    item.searchParameters = selections;\n+    if (groupId) {\n+      const groupIndex = searchRequest[role].findIndex(grp => grp.id === groupId);\n+      if (groupIndex > -1) {\n+        const itemIndex = searchRequest[role][groupIndex].items.findIndex(it => it.id === item.id);\n+        if (itemIndex > -1) {\n+          searchRequest[role][groupIndex].items[itemIndex] = item;\n+        } else {\n+          searchRequest[role][groupIndex].items.push(item);\n+        }\n+      }\n+    } else {\n+      const group = initGroup(role, item);\n+      searchRequest[role].push(group);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a39db23881aa8cfd676725c683145ac26359390"}, "originalPosition": 280}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwODc5MzI2", "url": "https://github.com/all-of-us/workbench/pull/3666#pullrequestreview-430879326", "createdAt": "2020-06-15T18:10:55Z", "commit": {"oid": "8a39db23881aa8cfd676725c683145ac26359390"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoxMDo1NlrOGj9ODg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxODoxMDo1NlrOGj9ODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDM1NjM2Ng==", "bodyText": "We can use  from text-wrappers", "url": "https://github.com/all-of-us/workbench/pull/3666#discussion_r440356366", "createdAt": "2020-06-15T18:10:56Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/modal/modal.component.tsx", "diffHunk": "@@ -0,0 +1,597 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearch} from 'app/cohort-search/list-search/list-search.component';\n+import {ModifierPage} from 'app/cohort-search/modifier-page/modifier-page.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {SelectionList} from 'app/cohort-search/selection-list/selection-list.component';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, stripHtml, typeToTitle} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {addOpacity, colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {environment} from 'environments/environment';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  modalContainer: {\n+    position: 'absolute',\n+    top: '50%',\n+    left: '50%',\n+    overflowY: 'auto',\n+    transform: 'translate(-50%, -50%)',\n+    backgroundColor: colors.white,\n+    borderRadius: '4px',\n+    display: 'flex',\n+    flexFlow: 'column nowrap',\n+    justifyContent: 'space-between',\n+  },\n+  modalContent: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '100%',\n+    width: '100%',\n+  },\n+  modalOverlay: {\n+    position: 'fixed',\n+    top: 0,\n+    left: 0,\n+    width: '100%',\n+    height: '100%',\n+    backgroundColor: `${addOpacity(colors.black, 0.5)}`,\n+    opacity: 0,\n+    visibility: 'hidden',\n+    transform: 'scale(1.1)',\n+    transition: 'visibility 0.25s linear, opacity 0.25s 0s, transform 0.25s',\n+    zIndex: 102,\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  panelLeftActive: {\n+    animation: 'fadeEffect 1s',\n+    display: 'block',\n+  },\n+  separator: {\n+    alignSelf: 'center',\n+    display: 'inline-block',\n+    margin: '0 0.75rem 0.5rem',\n+    boxSizing: 'border-box',\n+    height: '26px',\n+    width: '1px',\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.6)}`,\n+  },\n+  tabButton: {\n+    borderRadius: 0,\n+    fontSize: '14px',\n+    height: '2.25rem',\n+    letterSpacing: 'normal',\n+    margin: '0 1rem',\n+    padding: '0 0.5rem 0.25rem',\n+  },\n+  tabButtonActive: {\n+    color: colors.accent,\n+    borderBottom: `7px solid ${colors.accent}`,\n+    fontWeight: 'bold',\n+    padding: '0 0.5rem',\n+  },\n+  titleBar: {\n+    boxShadow: `0 0.12rem 0.125rem 0 ${colors.accent}`,\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const css = `\n+  .modal-container {\n+    height: 90vh;\n+    width: 80vw;\n+  }\n+  .modal-container.demographics {\n+    width: 50vw;\n+    height: auto;\n+  }\n+  @media (max-width: 1500px) {\n+  .modal-container {\n+    width: 90vw;\n+  }\n+  .modal-container.demographics {\n+    width: 70vw;\n+  }\n+  @media (max-width: 1200px) {\n+    .modal-container, .modal-container.demographics {\n+      width: 100vw;\n+    }\n+  }\n+  @media (max-height: 700px) {\n+    .modal-container {\n+      height: 100vh;\n+    }\n+  }\n+  @media (max-height: 400px) {\n+    .modal-container.demographics {\n+      height: 100vh;\n+    }\n+    .modal-container.demographics.age {\n+      height: auto;\n+    }\n+  }\n+  @media (max-height: 300px) {\n+    .modal-container.demographics.age {\n+      height: 100vh;\n+    }\n+  }\n+}\n+`;\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+  setSearchContext: (context: any) => void;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  conceptType: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  open: boolean;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CBModal extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: undefined,\n+      conceptType: null,\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      open: false,\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    if (!this.state.open) {\n+      const selections = item.searchParameters;\n+      const selectedIds = selections.map(s => s.parameterId);\n+      if (type === CriteriaType.DECEASED) {\n+        this.selectDeceased();\n+      } else {\n+        const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+        let backMode, hierarchyNode, mode;\n+        if (this.initTree) {\n+          hierarchyNode = {\n+            domainId: domain,\n+            type: type,\n+            isStandard: standard,\n+            id: 0,\n+          };\n+          backMode = 'tree';\n+          mode = 'tree';\n+        } else {\n+          backMode = 'list';\n+          mode = 'list';\n+        }\n+        this.setState({backMode, hierarchyNode, mode, open: true, selectedIds, selections, title});\n+      }\n+    }\n+  }\n+\n+  setScroll = (id: string) => {\n+    const nodeId = `node${id}`;\n+    const node = document.getElementById(nodeId);\n+    if (node) {\n+      setTimeout(() => node.scrollIntoView({behavior: 'smooth', block: 'center'}), 200);\n+    }\n+    this.setState({loadingSubtree: false});\n+  }\n+\n+  back = () => {\n+    if (this.state.mode === 'tree') {\n+      this.setState({autocompleteSelection: undefined, backMode: 'list', hierarchyNode: undefined, mode: 'list'});\n+    } else {\n+      this.setState({attributesNode: undefined, mode: this.state.backMode});\n+    }\n+  }\n+\n+  finish = () => {\n+    const {searchContext: {domain, groupId, item, role, type}} = this.props;\n+    const {selections} = this.state;\n+    if (domain === DomainType.PERSON) {\n+      triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(type)} - Finish`);\n+    }\n+    const searchRequest = searchRequestStore.getValue();\n+    item.searchParameters = selections;\n+    if (groupId) {\n+      const groupIndex = searchRequest[role].findIndex(grp => grp.id === groupId);\n+      if (groupIndex > -1) {\n+        const itemIndex = searchRequest[role][groupIndex].items.findIndex(it => it.id === item.id);\n+        if (itemIndex > -1) {\n+          searchRequest[role][groupIndex].items[itemIndex] = item;\n+        } else {\n+          searchRequest[role][groupIndex].items.push(item);\n+        }\n+      }\n+    } else {\n+      const group = initGroup(role, item);\n+      searchRequest[role].push(group);\n+    }\n+    searchRequestStore.next(searchRequest);\n+    this.props.closeSearch();\n+  }\n+\n+  get attributeTitle() {\n+    const {attributesNode: {domainId, name}} = this.state;\n+    return domainId === DomainType.PHYSICALMEASUREMENT.toString() ? stripHtml(name) : domainId + ' Detail';\n+  }\n+\n+  get showModifiers() {\n+    const {searchContext: {domain}} = this.props;\n+    return domain !== DomainType.PHYSICALMEASUREMENT &&\n+      domain !== DomainType.PERSON &&\n+      domain !== DomainType.SURVEY;\n+  }\n+\n+  get initTree() {\n+    const {searchContext: {domain}} = this.props;\n+    return domain === DomainType.PHYSICALMEASUREMENT\n+      || domain === DomainType.SURVEY\n+      || domain === DomainType.VISIT;\n+  }\n+\n+  get showDataBrowserLink() {\n+    const {searchContext: {domain}} = this.props;\n+    const {mode} = this.state;\n+    return (domain === DomainType.CONDITION\n+      || domain === DomainType.PROCEDURE\n+      || domain === DomainType.MEASUREMENT\n+      || domain === DomainType.DRUG)\n+      && (mode === 'list' || mode === 'tree');\n+  }\n+\n+  get leftColumnStyle() {\n+    const {searchContext: {domain, type}} = this.props;\n+    let width = '66.66667%';\n+    if (domain === DomainType.PERSON) {\n+      width = type === CriteriaType.AGE ? '100%' : '50%';\n+    }\n+    return {\n+      flex: `0 0 ${width}`,\n+      height: '100%',\n+      maxWidth: width,\n+      position: 'relative',\n+    } as React.CSSProperties;\n+  }\n+\n+  get rightColumnStyle() {\n+    const width = this.props.searchContext.domain === DomainType.PERSON ? '50%' : '33.33333%';\n+    return {\n+      flex: `0 0 ${width}`,\n+      maxWidth: width,\n+      position: 'relative',\n+    } as React.CSSProperties;\n+  }\n+\n+  panelLeftStyle(mode: string) {\n+    let style = {\n+      display: 'none',\n+      flex: 1,\n+      minWidth: '14rem',\n+      overflowY: 'auto',\n+      overflowX: 'hidden',\n+      width: '100%',\n+      height: '100%',\n+      padding: '0 0.4rem 0 1rem',\n+    } as React.CSSProperties;\n+    if (this.state.mode === mode) {\n+      style = {...style, display: 'block', animation: 'fadeEffect 1s'};\n+    }\n+    return style;\n+  }\n+\n+  setMode = (newMode: any) => {\n+    const {searchContext: {domain}} = this.props;\n+    const {mode} = this.state;\n+    let {backMode} = this.state;\n+    if (newMode === 'modifiers') {\n+      triggerEvent(\n+        'Cohort Builder Search',\n+        'Click',\n+        `Modifiers - ${domainToTitle(domain)} - Cohort Builder Search`\n+      );\n+    }\n+    if (mode !== 'attributes') {\n+      backMode = mode;\n+    }\n+    this.setState({backMode, mode: newMode});\n+  }\n+\n+  showHierarchy = (criterion: Criteria) => {\n+    this.setState({\n+      autocompleteSelection: criterion,\n+      backMode: 'tree',\n+      hierarchyNode: {...criterion, id: 0},\n+      mode: 'tree',\n+      loadingSubtree: true,\n+      treeSearchTerms: criterion.name\n+    });\n+  }\n+\n+  modifiersFlag = (disabled: boolean) => {\n+    this.setState({disableFinish: disabled});\n+  }\n+\n+  setTreeSearchTerms = (input: string) => {\n+    this.setState({treeSearchTerms: input});\n+  }\n+\n+  setAutocompleteSelection = (selection: any) => {\n+    this.setState({loadingSubtree: true, autocompleteSelection: selection});\n+  }\n+\n+  setAttributes = (criterion: Criteria) => {\n+    this.setState({attributesNode: criterion, backMode: this.state.mode, mode: 'attributes'});\n+  }\n+\n+  addSelection = (param: any) => {\n+    let {groupSelections, selectedIds, selections} = this.state;\n+    if (selectedIds.includes(param.parameterId)) {\n+      selections = selections.filter(p => p.parameterId !== param.parameterId);\n+    } else {\n+      selectedIds = [...selectedIds, param.parameterId];\n+      if (param.group) {\n+        groupSelections = [...groupSelections, param.id];\n+      }\n+    }\n+    selections = [...selections, param];\n+    this.setState({groupSelections, selections, selectedIds});\n+  }\n+\n+  removeSelection = (param: any) => {\n+    let {groupSelections, selectedIds, selections} = this.state;\n+    selectedIds = selectedIds.filter(id => id !== param.parameterId);\n+    selections = selections.filter(sel => sel.parameterId !== param.parameterId);\n+    if (param.group) {\n+      groupSelections = groupSelections.filter(id => id !== param.id);\n+    }\n+    this.setState({groupSelections, selections, selectedIds});\n+  }\n+\n+  selectDeceased() {\n+    const param = {\n+      id: null,\n+      parentId: null,\n+      parameterId: '',\n+      type: CriteriaType.DECEASED.toString(),\n+      name: 'Deceased',\n+      group: false,\n+      domainId: DomainType.PERSON.toString(),\n+      hasAttributes: false,\n+      selectable: true,\n+      attributes: []\n+    } as Selection;\n+    // wrapping in a timeout here prevents 'ExpressionChangedAfterItHasBeenCheckedError' in the parent component\n+    // TODO remove timeout once cohort-search component is converted to React\n+    setTimeout(() => this.setState({selections: [param]}, () => this.finish()));\n+  }\n+\n+  render() {\n+    const {closeSearch, searchContext, searchContext: {domain, type}, setSearchContext} = this.props;\n+    const {attributesNode, autocompleteSelection, conceptType, count, disableFinish, groupSelections, hierarchyNode, loadingSubtree, mode,\n+      open, selectedIds, selections, title, treeSearchTerms} = this.state;\n+    return !!searchContext ? <React.Fragment>\n+      <style>{css}</style>\n+      <div style={{\n+        ...styles.modalOverlay,\n+        ...(open ? {opacity: 1, visibility: 'visible', transform: 'scale(1.0'} : {})\n+      }}>\n+        <div style={styles.modalContainer}\n+          className={`modal-container${domain === DomainType.PERSON ? ' demographics' : ''}${type === CriteriaType.AGE ? ' age' : ''}`}>\n+          <div style={styles.modalContent}>\n+            <div style={this.leftColumnStyle}>\n+              <div style={styles.titleBar}>\n+                <div style={{display: 'inline-flex', marginRight: '0.5rem'}}>\n+                  {!attributesNode ? <Button\n+                    style={{...styles.tabButton, ...((mode === 'list' || mode === 'tree') ? styles.tabButtonActive : {})}}\n+                    type='link'\n+                    disabled={selections.length !== 0 && conceptType === 'standard'}\n+                    onClick={() => this.setState({mode: this.state.backMode})}>\n+                    {title}\n+                  </Button>\n+                  : <Button\n+                    style={{...styles.tabButton, ...(mode === 'attributes' ? styles.tabButtonActive : {})}}\n+                    type='link'\n+                    onClick={() => this.setState({mode: 'attributes'})}>\n+                    {this.attributeTitle}\n+                  </Button>}\n+                  {this.showModifiers && <React.Fragment>\n+                    <div style={styles.separator}/>\n+                    <Button\n+                      style={{...styles.tabButton, ...(mode === 'modifiers' ? styles.tabButtonActive : {})}}\n+                      type='link'\n+                      disabled={selections.length === 0}\n+                      onClick={() => this.setMode('modifiers')}>\n+                      Modifiers\n+                    </Button>\n+                  </React.Fragment>}\n+                </div>\n+                <div style={{display: 'table', height: '100%'}}>\n+                  <div style={{display: 'table-cell', height: '100%', verticalAlign: 'middle'}}>\n+                    {domain === DomainType.DRUG && <div>\n+                      <a href='https://mor.nlm.nih.gov/RxNav/' target='_blank' rel='noopener noreferrer'>\n+                        Explore\n+                      </a>\n+                      &nbsp;drugs by brand names outside of <i>All of Us</i>.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a39db23881aa8cfd676725c683145ac26359390"}, "originalPosition": 487}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4e266541933347113db6116420c0b92c1562403", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/a4e266541933347113db6116420c0b92c1562403", "committedDate": "2020-06-15T20:43:56Z", "message": "RW-5059 intial react conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd0fb8186f5a8e64bf03506db0c7450c98e02e35", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/dd0fb8186f5a8e64bf03506db0c7450c98e02e35", "committedDate": "2020-06-15T20:43:56Z", "message": "RW-5059 move wizardStore into react props/state, rename as searchContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0a79eefab7f30c5b9895e83b72fc5c05ac2b2b2", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/a0a79eefab7f30c5b9895e83b72fc5c05ac2b2b2", "committedDate": "2020-06-15T20:43:57Z", "message": "RW-5059 convert styles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd2081631699cf396424a0a08de328dd67cb7d1c", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/dd2081631699cf396424a0a08de328dd67cb7d1c", "committedDate": "2020-06-15T20:43:57Z", "message": "RW-5059 adjust styles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cb553fca8bcce2a7418d181b7b56e9e972db28e", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/6cb553fca8bcce2a7418d181b7b56e9e972db28e", "committedDate": "2020-06-15T20:43:57Z", "message": "RW-5059 add media queries, use preset colors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcacc5447d2cd9be3456064f2c5e896248728517", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/fcacc5447d2cd9be3456064f2c5e896248728517", "committedDate": "2020-06-15T20:43:57Z", "message": "RW-5059 remove unused Angular files and references"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42575946deb6c52f3be7b0102c71db993500e85c", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/42575946deb6c52f3be7b0102c71db993500e85c", "committedDate": "2020-06-15T20:43:57Z", "message": "RW-5059 fix failing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b55e9a68b5adab19fa84e40fe49418e64ab20599", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/b55e9a68b5adab19fa84e40fe49418e64ab20599", "committedDate": "2020-06-15T20:43:57Z", "message": "RW-5059 clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/40c5d382714beed48045f1e846b212643c8776f5", "committedDate": "2020-06-15T20:43:57Z", "message": "RW-5059 pr feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d88921bc5db82a96f70f941f6b65627b32d64379", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/d88921bc5db82a96f70f941f6b65627b32d64379", "committedDate": "2020-06-15T19:57:57Z", "message": "RW-5059 pr feedback"}, "afterCommit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/40c5d382714beed48045f1e846b212643c8776f5", "committedDate": "2020-06-15T20:43:57Z", "message": "RW-5059 pr feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDA3NDcy", "url": "https://github.com/all-of-us/workbench/pull/3666#pullrequestreview-431007472", "createdAt": "2020-06-15T21:30:01Z", "commit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTozMDowMVrOGkDbjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTozMDowMVrOGkDbjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1ODEyNw==", "bodyText": "Nice! I did not know we can do that\nthis.setState({backMode, hierarchyNode i thought it was always like this.setState({backMode: backMode...", "url": "https://github.com/all-of-us/workbench/pull/3666#discussion_r440458127", "createdAt": "2020-06-15T21:30:01Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/modal/modal.component.tsx", "diffHunk": "@@ -0,0 +1,595 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearch} from 'app/cohort-search/list-search/list-search.component';\n+import {ModifierPage} from 'app/cohort-search/modifier-page/modifier-page.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {SelectionList} from 'app/cohort-search/selection-list/selection-list.component';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, stripHtml, typeToTitle} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AoU} from 'app/components/text-wrappers';\n+import colors, {addOpacity, colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {environment} from 'environments/environment';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  modalContainer: {\n+    position: 'absolute',\n+    top: '50%',\n+    left: '50%',\n+    overflowY: 'auto',\n+    transform: 'translate(-50%, -50%)',\n+    backgroundColor: colors.white,\n+    borderRadius: '4px',\n+    display: 'flex',\n+    flexFlow: 'column nowrap',\n+    justifyContent: 'space-between',\n+  },\n+  modalContent: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '100%',\n+    width: '100%',\n+  },\n+  modalOverlay: {\n+    position: 'fixed',\n+    top: 0,\n+    left: 0,\n+    width: '100%',\n+    height: '100%',\n+    backgroundColor: `${addOpacity(colors.black, 0.5)}`,\n+    opacity: 0,\n+    visibility: 'hidden',\n+    transform: 'scale(1.1)',\n+    transition: 'visibility 0.25s linear, opacity 0.25s 0s, transform 0.25s',\n+    zIndex: 102,\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  panelLeftActive: {\n+    animation: 'fadeEffect 1s',\n+    display: 'block',\n+  },\n+  separator: {\n+    alignSelf: 'center',\n+    display: 'inline-block',\n+    margin: '0 0.75rem 0.5rem',\n+    boxSizing: 'border-box',\n+    height: '26px',\n+    width: '1px',\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.6)}`,\n+  },\n+  tabButton: {\n+    borderRadius: 0,\n+    fontSize: '14px',\n+    height: '2.25rem',\n+    letterSpacing: 'normal',\n+    margin: '0 1rem',\n+    padding: '0 0.5rem 0.25rem',\n+  },\n+  tabButtonActive: {\n+    color: colors.accent,\n+    borderBottom: `7px solid ${colors.accent}`,\n+    fontWeight: 'bold',\n+    padding: '0 0.5rem',\n+  },\n+  titleBar: {\n+    boxShadow: `0 0.12rem 0.125rem 0 ${colors.accent}`,\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const css = `\n+  .modal-container {\n+    height: 90vh;\n+    width: 80vw;\n+  }\n+  .modal-container.demographics {\n+    width: 50vw;\n+    height: auto;\n+  }\n+  @media (max-width: 1500px) {\n+  .modal-container {\n+    width: 90vw;\n+  }\n+  .modal-container.demographics {\n+    width: 70vw;\n+  }\n+  @media (max-width: 1200px) {\n+    .modal-container, .modal-container.demographics {\n+      width: 100vw;\n+    }\n+  }\n+  @media (max-height: 700px) {\n+    .modal-container {\n+      height: 100vh;\n+    }\n+  }\n+  @media (max-height: 400px) {\n+    .modal-container.demographics {\n+      height: 100vh;\n+    }\n+    .modal-container.demographics.age {\n+      height: auto;\n+    }\n+  }\n+  @media (max-height: 300px) {\n+    .modal-container.demographics.age {\n+      height: 100vh;\n+    }\n+  }\n+}\n+`;\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+  setSearchContext: (context: any) => void;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  conceptType: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  open: boolean;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CBModal extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: 'list',\n+      conceptType: null,\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      open: false,\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    if (!this.state.open) {\n+      const selections = item.searchParameters;\n+      const selectedIds = selections.map(s => s.parameterId);\n+      if (type === CriteriaType.DECEASED) {\n+        this.selectDeceased();\n+      } else {\n+        const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+        let {backMode, mode} = this.state;\n+        let hierarchyNode;\n+        if (this.initTree) {\n+          hierarchyNode = {\n+            domainId: domain,\n+            type: type,\n+            isStandard: standard,\n+            id: 0,\n+          };\n+          backMode = 'tree';\n+          mode = 'tree';\n+        }\n+        this.setState({backMode, hierarchyNode, mode, open: true, selectedIds, selections, title});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5"}, "originalPosition": 237}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDA3ODg3", "url": "https://github.com/all-of-us/workbench/pull/3666#pullrequestreview-431007887", "createdAt": "2020-06-15T21:30:49Z", "commit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTozMDo0OVrOGkDc8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQyMTozMDo0OVrOGkDc8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1ODQ4MQ==", "bodyText": "optional:  if (document.getElementById(nodeId) rather than constant", "url": "https://github.com/all-of-us/workbench/pull/3666#discussion_r440458481", "createdAt": "2020-06-15T21:30:49Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/cohort-search/modal/modal.component.tsx", "diffHunk": "@@ -0,0 +1,595 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearch} from 'app/cohort-search/list-search/list-search.component';\n+import {ModifierPage} from 'app/cohort-search/modifier-page/modifier-page.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {SelectionList} from 'app/cohort-search/selection-list/selection-list.component';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, stripHtml, typeToTitle} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AoU} from 'app/components/text-wrappers';\n+import colors, {addOpacity, colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {environment} from 'environments/environment';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  modalContainer: {\n+    position: 'absolute',\n+    top: '50%',\n+    left: '50%',\n+    overflowY: 'auto',\n+    transform: 'translate(-50%, -50%)',\n+    backgroundColor: colors.white,\n+    borderRadius: '4px',\n+    display: 'flex',\n+    flexFlow: 'column nowrap',\n+    justifyContent: 'space-between',\n+  },\n+  modalContent: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '100%',\n+    width: '100%',\n+  },\n+  modalOverlay: {\n+    position: 'fixed',\n+    top: 0,\n+    left: 0,\n+    width: '100%',\n+    height: '100%',\n+    backgroundColor: `${addOpacity(colors.black, 0.5)}`,\n+    opacity: 0,\n+    visibility: 'hidden',\n+    transform: 'scale(1.1)',\n+    transition: 'visibility 0.25s linear, opacity 0.25s 0s, transform 0.25s',\n+    zIndex: 102,\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  panelLeftActive: {\n+    animation: 'fadeEffect 1s',\n+    display: 'block',\n+  },\n+  separator: {\n+    alignSelf: 'center',\n+    display: 'inline-block',\n+    margin: '0 0.75rem 0.5rem',\n+    boxSizing: 'border-box',\n+    height: '26px',\n+    width: '1px',\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.6)}`,\n+  },\n+  tabButton: {\n+    borderRadius: 0,\n+    fontSize: '14px',\n+    height: '2.25rem',\n+    letterSpacing: 'normal',\n+    margin: '0 1rem',\n+    padding: '0 0.5rem 0.25rem',\n+  },\n+  tabButtonActive: {\n+    color: colors.accent,\n+    borderBottom: `7px solid ${colors.accent}`,\n+    fontWeight: 'bold',\n+    padding: '0 0.5rem',\n+  },\n+  titleBar: {\n+    boxShadow: `0 0.12rem 0.125rem 0 ${colors.accent}`,\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const css = `\n+  .modal-container {\n+    height: 90vh;\n+    width: 80vw;\n+  }\n+  .modal-container.demographics {\n+    width: 50vw;\n+    height: auto;\n+  }\n+  @media (max-width: 1500px) {\n+  .modal-container {\n+    width: 90vw;\n+  }\n+  .modal-container.demographics {\n+    width: 70vw;\n+  }\n+  @media (max-width: 1200px) {\n+    .modal-container, .modal-container.demographics {\n+      width: 100vw;\n+    }\n+  }\n+  @media (max-height: 700px) {\n+    .modal-container {\n+      height: 100vh;\n+    }\n+  }\n+  @media (max-height: 400px) {\n+    .modal-container.demographics {\n+      height: 100vh;\n+    }\n+    .modal-container.demographics.age {\n+      height: auto;\n+    }\n+  }\n+  @media (max-height: 300px) {\n+    .modal-container.demographics.age {\n+      height: 100vh;\n+    }\n+  }\n+}\n+`;\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+  setSearchContext: (context: any) => void;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  conceptType: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  open: boolean;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CBModal extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: 'list',\n+      conceptType: null,\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      open: false,\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    if (!this.state.open) {\n+      const selections = item.searchParameters;\n+      const selectedIds = selections.map(s => s.parameterId);\n+      if (type === CriteriaType.DECEASED) {\n+        this.selectDeceased();\n+      } else {\n+        const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+        let {backMode, mode} = this.state;\n+        let hierarchyNode;\n+        if (this.initTree) {\n+          hierarchyNode = {\n+            domainId: domain,\n+            type: type,\n+            isStandard: standard,\n+            id: 0,\n+          };\n+          backMode = 'tree';\n+          mode = 'tree';\n+        }\n+        this.setState({backMode, hierarchyNode, mode, open: true, selectedIds, selections, title});\n+      }\n+    }\n+  }\n+\n+  setScroll = (id: string) => {\n+    const nodeId = `node${id}`;\n+    const node = document.getElementById(nodeId);\n+    if (node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5"}, "originalPosition": 245}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMDEwMTY1", "url": "https://github.com/all-of-us/workbench/pull/3666#pullrequestreview-431010165", "createdAt": "2020-06-15T21:34:51Z", "commit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODI0MDE3", "url": "https://github.com/all-of-us/workbench/pull/3666#pullrequestreview-431824017", "createdAt": "2020-06-16T19:25:00Z", "commit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOToyNTowMFrOGkp-Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxOToyNjoyN1rOGkqBIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA4OTU3NA==", "bodyText": "Yeah, I like it better. Seems a little cleaner this way.", "url": "https://github.com/all-of-us/workbench/pull/3666#discussion_r441089574", "createdAt": "2020-06-16T19:25:00Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/modal/modal.component.tsx", "diffHunk": "@@ -0,0 +1,595 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearch} from 'app/cohort-search/list-search/list-search.component';\n+import {ModifierPage} from 'app/cohort-search/modifier-page/modifier-page.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {SelectionList} from 'app/cohort-search/selection-list/selection-list.component';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, stripHtml, typeToTitle} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AoU} from 'app/components/text-wrappers';\n+import colors, {addOpacity, colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {environment} from 'environments/environment';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  modalContainer: {\n+    position: 'absolute',\n+    top: '50%',\n+    left: '50%',\n+    overflowY: 'auto',\n+    transform: 'translate(-50%, -50%)',\n+    backgroundColor: colors.white,\n+    borderRadius: '4px',\n+    display: 'flex',\n+    flexFlow: 'column nowrap',\n+    justifyContent: 'space-between',\n+  },\n+  modalContent: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '100%',\n+    width: '100%',\n+  },\n+  modalOverlay: {\n+    position: 'fixed',\n+    top: 0,\n+    left: 0,\n+    width: '100%',\n+    height: '100%',\n+    backgroundColor: `${addOpacity(colors.black, 0.5)}`,\n+    opacity: 0,\n+    visibility: 'hidden',\n+    transform: 'scale(1.1)',\n+    transition: 'visibility 0.25s linear, opacity 0.25s 0s, transform 0.25s',\n+    zIndex: 102,\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  panelLeftActive: {\n+    animation: 'fadeEffect 1s',\n+    display: 'block',\n+  },\n+  separator: {\n+    alignSelf: 'center',\n+    display: 'inline-block',\n+    margin: '0 0.75rem 0.5rem',\n+    boxSizing: 'border-box',\n+    height: '26px',\n+    width: '1px',\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.6)}`,\n+  },\n+  tabButton: {\n+    borderRadius: 0,\n+    fontSize: '14px',\n+    height: '2.25rem',\n+    letterSpacing: 'normal',\n+    margin: '0 1rem',\n+    padding: '0 0.5rem 0.25rem',\n+  },\n+  tabButtonActive: {\n+    color: colors.accent,\n+    borderBottom: `7px solid ${colors.accent}`,\n+    fontWeight: 'bold',\n+    padding: '0 0.5rem',\n+  },\n+  titleBar: {\n+    boxShadow: `0 0.12rem 0.125rem 0 ${colors.accent}`,\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const css = `\n+  .modal-container {\n+    height: 90vh;\n+    width: 80vw;\n+  }\n+  .modal-container.demographics {\n+    width: 50vw;\n+    height: auto;\n+  }\n+  @media (max-width: 1500px) {\n+  .modal-container {\n+    width: 90vw;\n+  }\n+  .modal-container.demographics {\n+    width: 70vw;\n+  }\n+  @media (max-width: 1200px) {\n+    .modal-container, .modal-container.demographics {\n+      width: 100vw;\n+    }\n+  }\n+  @media (max-height: 700px) {\n+    .modal-container {\n+      height: 100vh;\n+    }\n+  }\n+  @media (max-height: 400px) {\n+    .modal-container.demographics {\n+      height: 100vh;\n+    }\n+    .modal-container.demographics.age {\n+      height: auto;\n+    }\n+  }\n+  @media (max-height: 300px) {\n+    .modal-container.demographics.age {\n+      height: 100vh;\n+    }\n+  }\n+}\n+`;\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+  setSearchContext: (context: any) => void;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  conceptType: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  open: boolean;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CBModal extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: 'list',\n+      conceptType: null,\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      open: false,\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    if (!this.state.open) {\n+      const selections = item.searchParameters;\n+      const selectedIds = selections.map(s => s.parameterId);\n+      if (type === CriteriaType.DECEASED) {\n+        this.selectDeceased();\n+      } else {\n+        const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+        let {backMode, mode} = this.state;\n+        let hierarchyNode;\n+        if (this.initTree) {\n+          hierarchyNode = {\n+            domainId: domain,\n+            type: type,\n+            isStandard: standard,\n+            id: 0,\n+          };\n+          backMode = 'tree';\n+          mode = 'tree';\n+        }\n+        this.setState({backMode, hierarchyNode, mode, open: true, selectedIds, selections, title});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1ODEyNw=="}, "originalCommit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA5MDMzOA==", "bodyText": "In this case, I'm going to leave it as is since I need the node variable on the next line to scroll to that element.", "url": "https://github.com/all-of-us/workbench/pull/3666#discussion_r441090338", "createdAt": "2020-06-16T19:26:27Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/modal/modal.component.tsx", "diffHunk": "@@ -0,0 +1,595 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {AttributesPage} from 'app/cohort-search/attributes-page/attributes-page.component';\n+import {Demographics} from 'app/cohort-search/demographics/demographics.component';\n+import {ListSearch} from 'app/cohort-search/list-search/list-search.component';\n+import {ModifierPage} from 'app/cohort-search/modifier-page/modifier-page.component';\n+import {searchRequestStore} from 'app/cohort-search/search-state.service';\n+import {SelectionList} from 'app/cohort-search/selection-list/selection-list.component';\n+import {CriteriaTree} from 'app/cohort-search/tree/tree.component';\n+import {domainToTitle, generateId, stripHtml, typeToTitle} from 'app/cohort-search/utils';\n+import {Button} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AoU} from 'app/components/text-wrappers';\n+import colors, {addOpacity, colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {environment} from 'environments/environment';\n+import {Criteria, CriteriaType, DomainType, TemporalMention, TemporalTime} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  footer: {\n+    marginTop: '0.5rem',\n+    padding: '0.45rem 0rem',\n+    display: 'flex',\n+    justifyContent: 'flex-end',\n+  },\n+  modalContainer: {\n+    position: 'absolute',\n+    top: '50%',\n+    left: '50%',\n+    overflowY: 'auto',\n+    transform: 'translate(-50%, -50%)',\n+    backgroundColor: colors.white,\n+    borderRadius: '4px',\n+    display: 'flex',\n+    flexFlow: 'column nowrap',\n+    justifyContent: 'space-between',\n+  },\n+  modalContent: {\n+    display: 'flex',\n+    flexWrap: 'wrap',\n+    height: '100%',\n+    width: '100%',\n+  },\n+  modalOverlay: {\n+    position: 'fixed',\n+    top: 0,\n+    left: 0,\n+    width: '100%',\n+    height: '100%',\n+    backgroundColor: `${addOpacity(colors.black, 0.5)}`,\n+    opacity: 0,\n+    visibility: 'hidden',\n+    transform: 'scale(1.1)',\n+    transition: 'visibility 0.25s linear, opacity 0.25s 0s, transform 0.25s',\n+    zIndex: 102,\n+  },\n+  panelLeft: {\n+    display: 'none',\n+    flex: 1,\n+    minWidth: '14rem',\n+    overflowY: 'auto',\n+    overflowX: 'hidden',\n+    width: '100%',\n+    height: '100%',\n+    padding: '0 0.4rem 0 1rem',\n+  },\n+  panelLeftActive: {\n+    animation: 'fadeEffect 1s',\n+    display: 'block',\n+  },\n+  separator: {\n+    alignSelf: 'center',\n+    display: 'inline-block',\n+    margin: '0 0.75rem 0.5rem',\n+    boxSizing: 'border-box',\n+    height: '26px',\n+    width: '1px',\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.6)}`,\n+  },\n+  tabButton: {\n+    borderRadius: 0,\n+    fontSize: '14px',\n+    height: '2.25rem',\n+    letterSpacing: 'normal',\n+    margin: '0 1rem',\n+    padding: '0 0.5rem 0.25rem',\n+  },\n+  tabButtonActive: {\n+    color: colors.accent,\n+    borderBottom: `7px solid ${colors.accent}`,\n+    fontWeight: 'bold',\n+    padding: '0 0.5rem',\n+  },\n+  titleBar: {\n+    boxShadow: `0 0.12rem 0.125rem 0 ${colors.accent}`,\n+    marginBottom: '0.5rem',\n+    padding: '0rem 1rem',\n+    display: 'flex',\n+    justifyContent: 'space-between',\n+    alignItems: 'flex-end',\n+    height: '2.5rem',\n+    marginTop: '0.5rem',\n+  }\n+});\n+\n+const css = `\n+  .modal-container {\n+    height: 90vh;\n+    width: 80vw;\n+  }\n+  .modal-container.demographics {\n+    width: 50vw;\n+    height: auto;\n+  }\n+  @media (max-width: 1500px) {\n+  .modal-container {\n+    width: 90vw;\n+  }\n+  .modal-container.demographics {\n+    width: 70vw;\n+  }\n+  @media (max-width: 1200px) {\n+    .modal-container, .modal-container.demographics {\n+      width: 100vw;\n+    }\n+  }\n+  @media (max-height: 700px) {\n+    .modal-container {\n+      height: 100vh;\n+    }\n+  }\n+  @media (max-height: 400px) {\n+    .modal-container.demographics {\n+      height: 100vh;\n+    }\n+    .modal-container.demographics.age {\n+      height: auto;\n+    }\n+  }\n+  @media (max-height: 300px) {\n+    .modal-container.demographics.age {\n+      height: 100vh;\n+    }\n+  }\n+}\n+`;\n+\n+function initGroup(role: string, item: any) {\n+  return {\n+    id: generateId(role),\n+    items: [item],\n+    count: null,\n+    temporal: false,\n+    mention: TemporalMention.ANYMENTION,\n+    time: TemporalTime.DURINGSAMEENCOUNTERAS,\n+    timeValue: '',\n+    timeFrame: '',\n+    isRequesting: false,\n+    status: 'active'\n+  };\n+}\n+\n+interface Selection extends Criteria {\n+  parameterId: string;\n+}\n+\n+interface Props {\n+  closeSearch: () => void;\n+  searchContext: any;\n+  setSearchContext: (context: any) => void;\n+}\n+\n+interface State {\n+  attributesNode: Criteria;\n+  autocompleteSelection: Criteria;\n+  backMode: string;\n+  conceptType: string;\n+  count: number;\n+  disableFinish: boolean;\n+  groupSelections: Array<number>;\n+  hierarchyNode: Criteria;\n+  loadingSubtree: boolean;\n+  mode: string;\n+  open: boolean;\n+  selectedIds: Array<string>;\n+  selections: Array<Selection>;\n+  title: string;\n+  treeSearchTerms: string;\n+}\n+\n+export class CBModal extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      attributesNode: undefined,\n+      autocompleteSelection: undefined,\n+      backMode: 'list',\n+      conceptType: null,\n+      count: 0,\n+      disableFinish: false,\n+      groupSelections: [],\n+      hierarchyNode: undefined,\n+      loadingSubtree: false,\n+      mode: 'list',\n+      open: false,\n+      selectedIds: [],\n+      selections: [],\n+      title: '',\n+      treeSearchTerms: '',\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    const {searchContext: {domain, item, standard, type}} = this.props;\n+    if (!this.state.open) {\n+      const selections = item.searchParameters;\n+      const selectedIds = selections.map(s => s.parameterId);\n+      if (type === CriteriaType.DECEASED) {\n+        this.selectDeceased();\n+      } else {\n+        const title = domain === DomainType.PERSON ? typeToTitle(type) : domainToTitle(domain);\n+        let {backMode, mode} = this.state;\n+        let hierarchyNode;\n+        if (this.initTree) {\n+          hierarchyNode = {\n+            domainId: domain,\n+            type: type,\n+            isStandard: standard,\n+            id: 0,\n+          };\n+          backMode = 'tree';\n+          mode = 'tree';\n+        }\n+        this.setState({backMode, hierarchyNode, mode, open: true, selectedIds, selections, title});\n+      }\n+    }\n+  }\n+\n+  setScroll = (id: string) => {\n+    const nodeId = `node${id}`;\n+    const node = document.getElementById(nodeId);\n+    if (node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDQ1ODQ4MQ=="}, "originalCommit": {"oid": "40c5d382714beed48045f1e846b212643c8776f5"}, "originalPosition": 245}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4870, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}