{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTA2Nzgz", "number": 3736, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDo1MTowMlrOEN2o9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzoxMzoxNlrOEOxtCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyOTYyMTY1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDo1MTowMlrOGwsFlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo0MjoxNFrOGxZoyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwNzE1Ng==", "bodyText": "workaround for what?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r453707156", "createdAt": "2020-07-13T14:51:02Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -97,9 +97,11 @@ private String getTableName() {\n   public UserAuditLogQueryResponse queryEventsForUser(\n       long userDatabaseId, long limit, DateTime after, DateTime before) {\n \n+    // Workaround for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1MzQ1MA==", "bodyText": "RW-5289. knew I forgot something.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454453450", "createdAt": "2020-07-14T15:42:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -97,9 +97,11 @@ private String getTableName() {\n   public UserAuditLogQueryResponse queryEventsForUser(\n       long userDatabaseId, long limit, DateTime after, DateTime before) {\n \n+    // Workaround for", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwNzE1Ng=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzk3NTU1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1NDo1NVrOGxUx6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1NDo1NVrOGxUx6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3Mzg2Ng==", "bodyText": "nit: 'hideable'", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454373866", "createdAt": "2020-07-14T13:54:55Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMzk3ODE0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1NToyNVrOGxUzhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1NToyNVrOGxUzhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3NDI3Nw==", "bodyText": "You'll have to fix this sort of thing manually, but you should run yarn lint --fix in your UI project", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454374277", "createdAt": "2020-07-14T13:55:25Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDAwNzA1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDowMTozNlrOGxVFbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDowMTozNlrOGxVFbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3ODg2Mg==", "bodyText": "style nit:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n          \n          \n            \n              return <div style={{\n          \n          \n            \n                      backgroundColor: content ? 'white' : '#f0f3f5',\n          \n          \n            \n                      border: '1px solid',\n          \n          \n            \n                      boxSizing: 'border-box'\n          \n          \n            \n              }}>{content}</div>;", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454378862", "createdAt": "2020-07-14T14:01:36Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDAzMjAyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDowNzozNlrOGxVVWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDowNzozNlrOGxVVWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MjkzNg==", "bodyText": "nit: either put rem everywhere for consistency or break it out into margin-top and margin-left or whatever this is", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454382936", "createdAt": "2020-07-14T14:07:36Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA1MjQwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxMjoyMVrOGxVigw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxMjoyMVrOGxVigw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4NjMwNw==", "bodyText": "Pull this out of this const and into a top-level const:\nconst styles = reactStyles({\n    propertyCell: {\n        fontWeight: 600,\n        border: '1px solid'\n    }\n});\n\nand then use it below as:\n<div style={styles.propertyCell}>etc</div>", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454386307", "createdAt": "2020-07-14T14:12:21Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA3MjI1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxNjozOFrOGxVuxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMToyOTozNFrOGxmCxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTQ0Ng==", "bodyText": "style nit: put the ? and : at the beginning of new lines rather than at the end of lines or infixed", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454389446", "createdAt": "2020-07-14T14:16:38Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NjcwOQ==", "bodyText": "Yeah, that seems to be the standard. Jagged little pill, that.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454656709", "createdAt": "2020-07-14T21:29:34Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTQ0Ng=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA3NDQ3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxNzowNFrOGxVwGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo1MzoxN1rOGxaGsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTc4Ng==", "bodyText": "just use the colors directly.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454389786", "createdAt": "2020-07-14T14:17:04Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ2MTEwNQ==", "bodyText": "That makes sense, but now I'm tempted to break out two new named fragments so it's obvious what's what. It's not the most intuitive data structure to work with.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454461105", "createdAt": "2020-07-14T15:53:17Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTc4Ng=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA4MjA0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxODo1MlrOGxV00Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoxODo1MlrOGxV00Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MDk5Mw==", "bodyText": "same style nit as above with how to display multi-line props", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454390993", "createdAt": "2020-07-14T14:18:52Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA5MjI3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMToxMVrOGxV7Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMToxMVrOGxV7Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjY0Mg==", "bodyText": "backticks not necessary if you're not worried about preserving the space without doing + \" \" +\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      <div>{`${header.agent.agentUsername}`}</div>\n          \n          \n            \n                      <div>{header.agent.agentUsername}</div>", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454392642", "createdAt": "2020-07-14T14:21:11Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDA5OTgzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMjo1MVrOGxWABA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo1NTo0NVrOGxmxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5Mzg2MA==", "bodyText": "you use this frequently, could you 1) check whether there's already a fonts style for semi-bold in a utils file somewhere and use that if it exists, and 2) if it doesn't, extract it to the top-level reactStyles const I suggested earlier", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454393860", "createdAt": "2020-07-14T14:22:51Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2ODY3Ng==", "bodyText": "Searching for fontWeight: 600 I see lots of places we hardcode it. I've way overspent my time budget on this already so I'm going to have to let that go for now.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454668676", "createdAt": "2020-07-14T21:55:45Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5Mzg2MA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDEwMTM5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyMzoxM1rOGxWBEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowNzozMVrOGyyCVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA==", "bodyText": "I don't think that the props:  is necessary", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454394128", "createdAt": "2020-07-14T14:23:13Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3MDgwMg==", "bodyText": "How would you do it? Do you mean like\nconst EventBundleView = (eventBundle: AuditEventBundle) => {\n  return <div style={{marginBottom: '1rem'}}>\n    <AuditEventBundleHeaderView header={eventBundle.header}/>\n    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n  </div>;\n};\n\nIf I just make eventBundle the new argument, I have to pass each field separately when creating an EventBundleView, like\n            <EventBundleView key={index}\n                             header={eventBundle.header}\n                             propertyChanges={eventBundle.propertyChanges}/>)}\n\nSince the abstraction is that this is a view for an EventBundle, I don't think it's a win to force earlier unbundling. If I add fields to that type later for some reason, I'd expect to be able to make changes to the element that use it without changing the call sites. I think I'll keep it this way for now unless I'm missing something slick. I would likely not have created these types just to use them this way, though.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454670802", "createdAt": "2020-07-14T22:00:32Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDUyOQ==", "bodyText": "I meant like:\nconst EventBundleView = ({eventBundle: ActionEventBundle}) => {\n[...]", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455254529", "createdAt": "2020-07-15T18:25:00Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2NzUyMg==", "bodyText": "That looks a lot slicker, but I can't seem to get it to work.\n\nI like the semantics the way they are, since I designed these data types to map in a straightforward way to visual widgets or other units of computation or display. I want the calling code (the parent element) to be able to hand over the whole object and trust that the child will handle it.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455367522", "createdAt": "2020-07-15T21:34:20Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMTc4MQ==", "bodyText": "Ah, gotcha. Yeah, this is fine for now.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455901781", "createdAt": "2020-07-16T16:07:31Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDEwOTU3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyNDo1NFrOGxWGQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyNDo1NFrOGxWGQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NTQ1OA==", "bodyText": "I don't think this is necessary either", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454395458", "createdAt": "2020-07-14T14:24:54Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDEyMzQyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyNzozOVrOGxWOfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODoyNToyNlrOGyKjYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NzU2Nw==", "bodyText": "style nit for multi-line fp / stream operations:\nconst actionTypes = action.eventBundles\n    .map((eventBundle) => { return eventBundle.header.actionType; })\n    .join(' & ');", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454397567", "createdAt": "2020-07-14T14:27:39Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3NTgyNA==", "bodyText": "Now i'm getting hooked on fp:\n  const actionTypes = fp.flow(\n    fp.map(fp.get('header.actionType')),\n    s => s.join(' & '))\n  (action.eventBundles);", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454675824", "createdAt": "2020-07-14T22:13:11Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NzU2Nw=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NDg4Mw==", "bodyText": "lodash is pretty great as javascript goes.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455254883", "createdAt": "2020-07-15T18:25:26Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NzU2Nw=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDEyNjUxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyODoyMVrOGxWQcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyODoyMVrOGxWQcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODA2Ng==", "bodyText": "this could be spread over multiple lines for ease of reading.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454398066", "createdAt": "2020-07-14T14:28:21Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {\n+    return eventBundle.header.actionType;\n+  }).join(' & ');\n+  return (\n+      <ActionAuditCardBase>\n+        <FlexRow style={{\n+          fontWeight: 200,\n+          textAlign: 'left',\n+          fontSize: '0.825rem',\n+          padding: '5px'\n+        }}><div>{timeString}</div><div style={{marginLeft: 'auto'}}>{actionTypes}</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDEyNzUyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyODozMlrOGxWRDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyODozMlrOGxWRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODIyMw==", "bodyText": "nit: put a newline above this", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454398223", "createdAt": "2020-07-14T14:28:32Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {\n+    return eventBundle.header.actionType;\n+  }).join(' & ');\n+  return (\n+      <ActionAuditCardBase>\n+        <FlexRow style={{\n+          fontWeight: 200,\n+          textAlign: 'left',\n+          fontSize: '0.825rem',\n+          padding: '5px'\n+        }}><div>{timeString}</div><div style={{marginLeft: 'auto'}}>{actionTypes}</div>\n+        </FlexRow>\n+        {action.eventBundles.map((eventBundle, index) =>\n+            <EventBundleView key={index} eventBundle={eventBundle}/>)}\n+      </ActionAuditCardBase>\n+  );\n+};\n+export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDEyODA3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyODozOVrOGxWRaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDoyODozOVrOGxWRaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODMxMw==", "bodyText": "this is probably extraneous by this point", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454398313", "createdAt": "2020-07-14T14:28:39Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {\n+    return eventBundle.header.actionType;\n+  }).join(' & ');\n+  return (\n+      <ActionAuditCardBase>\n+        <FlexRow style={{\n+          fontWeight: 200,\n+          textAlign: 'left',\n+          fontSize: '0.825rem',\n+          padding: '5px'\n+        }}><div>{timeString}</div><div style={{marginLeft: 'auto'}}>{actionTypes}</div>\n+        </FlexRow>\n+        {action.eventBundles.map((eventBundle, index) =>\n+            <EventBundleView key={index} eventBundle={eventBundle}/>)}\n+      </ActionAuditCardBase>\n+  );\n+};\n+export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+  const {actions} = props;\n+  console.log(`actions length ${actions.length}`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDE1MTUxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-page-component.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozMzoyMFrOGxWfeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozMzoyMFrOGxWfeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwMTkxMw==", "bodyText": "nit: workspacd -> workspace", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454401913", "createdAt": "2020-07-14T14:33:20Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDE1MjUyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-page-component.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozMzozMlrOGxWgCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDozMzozMlrOGxWgCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwMjA1OQ==", "bodyText": "nit: assmptions -> assumptions", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454402059", "createdAt": "2020-07-14T14:33:32Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDIxNTIxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-page-component.tsx", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo0NTo1MVrOGxXFoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjowNzoxOFrOGyyByg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA==", "bodyText": "extraneous?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454411680", "createdAt": "2020-07-14T14:45:51Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  debug: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() => {\n+    loadNextSubject && setLoadNextSubject(false);\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}} disabled={fp.isEmpty(auditSubject)} onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {\n+    const timeoutId = setTimeout(() => onChange(displayNum), 250);\n+    return () => clearTimeout(timeoutId);\n+  }, [displayNum]);\n+\n+  return <div>\n+    <label style={{\n+      fontSize: 14,\n+      display: 'block',\n+      color: colors.primary,\n+      lineHeight: '22px',\n+      fontWeight: 600,\n+      marginRight: '0.25rem'\n+    }}>{`Number of Actions to Display (${totalActions} available)`}</label>\n+    <NumberInput value={Math.min(displayNum, totalActions)} min={1} max={totalActions} style={{width: '4rem'}} onChange={setDisplayNum}/>\n+  </div>;\n+};\n+\n+export const AuditPageComponent = (props: AuditPageProps) => {\n+  const {initialAuditSubject, queryAuditLog, getNextAuditPath, debug, auditSubjectType, buttonLabel} = props;\n+  const emptyResult = {actions: [], logEntries: [], sourceId: 0, query: ''};\n+  const [loading, setLoading] = useState(true);\n+  const [queryResult, setQueryResult] = useState<GenericAuditQueryResult>(emptyResult);\n+  const [displayNum, setDisplayNum] = useState(20);\n+  const {actions, sourceId, query} = queryResult;\n+\n+  useEffect(() => {\n+    if (debug) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ3NDM3Ng==", "bodyText": "I'd like to have something like Log Levels that come with the Java loggers, but it looks like I don't get that for free. Basically I want it to be an easier experience doing the next api type.\nMaybe changing debug to verboseLogging would be more respectable?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454474376", "createdAt": "2020-07-14T16:13:10Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  debug: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() => {\n+    loadNextSubject && setLoadNextSubject(false);\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}} disabled={fp.isEmpty(auditSubject)} onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {\n+    const timeoutId = setTimeout(() => onChange(displayNum), 250);\n+    return () => clearTimeout(timeoutId);\n+  }, [displayNum]);\n+\n+  return <div>\n+    <label style={{\n+      fontSize: 14,\n+      display: 'block',\n+      color: colors.primary,\n+      lineHeight: '22px',\n+      fontWeight: 600,\n+      marginRight: '0.25rem'\n+    }}>{`Number of Actions to Display (${totalActions} available)`}</label>\n+    <NumberInput value={Math.min(displayNum, totalActions)} min={1} max={totalActions} style={{width: '4rem'}} onChange={setDisplayNum}/>\n+  </div>;\n+};\n+\n+export const AuditPageComponent = (props: AuditPageProps) => {\n+  const {initialAuditSubject, queryAuditLog, getNextAuditPath, debug, auditSubjectType, buttonLabel} = props;\n+  const emptyResult = {actions: [], logEntries: [], sourceId: 0, query: ''};\n+  const [loading, setLoading] = useState(true);\n+  const [queryResult, setQueryResult] = useState<GenericAuditQueryResult>(emptyResult);\n+  const [displayNum, setDisplayNum] = useState(20);\n+  const {actions, sourceId, query} = queryResult;\n+\n+  useEffect(() => {\n+    if (debug) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1MTAyMw==", "bodyText": "I guess what I don't understand is why you'd console-log information that could be displayed on the screen.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455251023", "createdAt": "2020-07-15T18:19:52Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  debug: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() => {\n+    loadNextSubject && setLoadNextSubject(false);\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}} disabled={fp.isEmpty(auditSubject)} onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {\n+    const timeoutId = setTimeout(() => onChange(displayNum), 250);\n+    return () => clearTimeout(timeoutId);\n+  }, [displayNum]);\n+\n+  return <div>\n+    <label style={{\n+      fontSize: 14,\n+      display: 'block',\n+      color: colors.primary,\n+      lineHeight: '22px',\n+      fontWeight: 600,\n+      marginRight: '0.25rem'\n+    }}>{`Number of Actions to Display (${totalActions} available)`}</label>\n+    <NumberInput value={Math.min(displayNum, totalActions)} min={1} max={totalActions} style={{width: '4rem'}} onChange={setDisplayNum}/>\n+  </div>;\n+};\n+\n+export const AuditPageComponent = (props: AuditPageProps) => {\n+  const {initialAuditSubject, queryAuditLog, getNextAuditPath, debug, auditSubjectType, buttonLabel} = props;\n+  const emptyResult = {actions: [], logEntries: [], sourceId: 0, query: ''};\n+  const [loading, setLoading] = useState(true);\n+  const [queryResult, setQueryResult] = useState<GenericAuditQueryResult>(emptyResult);\n+  const [displayNum, setDisplayNum] = useState(20);\n+  const {actions, sourceId, query} = queryResult;\n+\n+  useEffect(() => {\n+    if (debug) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTMxNTExMw==", "bodyText": "I agree with Ariel. When developing it wouldn't/shouldn't be difficult to add a console.log of query results if needed. I am not a fan of leaving debug statements in, even if hidden behind a flag.\nOne reason for this is these statements can start leaking into the console unintentionally if we allow console statements in the code base at all. Having a lot of console messages can add noise to a search and the code. Unfortunately, right now there are a bunch of console statements for errors in the code rather than error notifications that are useful to the user (something showing up in the UI). I would prefer to not add more.\nPersonally, I would like to see a lint rule added in the not too distant future prohibiting the use of console.log. I believe that this helps keep the UI code clean and forces good (at least better) error notifications for users.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455315113", "createdAt": "2020-07-15T20:14:55Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  debug: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() => {\n+    loadNextSubject && setLoadNextSubject(false);\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}} disabled={fp.isEmpty(auditSubject)} onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {\n+    const timeoutId = setTimeout(() => onChange(displayNum), 250);\n+    return () => clearTimeout(timeoutId);\n+  }, [displayNum]);\n+\n+  return <div>\n+    <label style={{\n+      fontSize: 14,\n+      display: 'block',\n+      color: colors.primary,\n+      lineHeight: '22px',\n+      fontWeight: 600,\n+      marginRight: '0.25rem'\n+    }}>{`Number of Actions to Display (${totalActions} available)`}</label>\n+    <NumberInput value={Math.min(displayNum, totalActions)} min={1} max={totalActions} style={{width: '4rem'}} onChange={setDisplayNum}/>\n+  </div>;\n+};\n+\n+export const AuditPageComponent = (props: AuditPageProps) => {\n+  const {initialAuditSubject, queryAuditLog, getNextAuditPath, debug, auditSubjectType, buttonLabel} = props;\n+  const emptyResult = {actions: [], logEntries: [], sourceId: 0, query: ''};\n+  const [loading, setLoading] = useState(true);\n+  const [queryResult, setQueryResult] = useState<GenericAuditQueryResult>(emptyResult);\n+  const [displayNum, setDisplayNum] = useState(20);\n+  const {actions, sourceId, query} = queryResult;\n+\n+  useEffect(() => {\n+    if (debug) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MDkyOA==", "bodyText": "I hear ya. Without some kind of a log level we can adjust it's hard to have conditional output. I wouldn't kill all logging until there was a legitimate way to have optional diagnostic statements that end users couldn't turn on.\nCan we have an unobtrusive widget on the page to show it? Or even just a button launching a modal? Call it [Show BigQuery SQL] or something.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455360928", "createdAt": "2020-07-15T21:25:01Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  debug: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() => {\n+    loadNextSubject && setLoadNextSubject(false);\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}} disabled={fp.isEmpty(auditSubject)} onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {\n+    const timeoutId = setTimeout(() => onChange(displayNum), 250);\n+    return () => clearTimeout(timeoutId);\n+  }, [displayNum]);\n+\n+  return <div>\n+    <label style={{\n+      fontSize: 14,\n+      display: 'block',\n+      color: colors.primary,\n+      lineHeight: '22px',\n+      fontWeight: 600,\n+      marginRight: '0.25rem'\n+    }}>{`Number of Actions to Display (${totalActions} available)`}</label>\n+    <NumberInput value={Math.min(displayNum, totalActions)} min={1} max={totalActions} style={{width: '4rem'}} onChange={setDisplayNum}/>\n+  </div>;\n+};\n+\n+export const AuditPageComponent = (props: AuditPageProps) => {\n+  const {initialAuditSubject, queryAuditLog, getNextAuditPath, debug, auditSubjectType, buttonLabel} = props;\n+  const emptyResult = {actions: [], logEntries: [], sourceId: 0, query: ''};\n+  const [loading, setLoading] = useState(true);\n+  const [queryResult, setQueryResult] = useState<GenericAuditQueryResult>(emptyResult);\n+  const [displayNum, setDisplayNum] = useState(20);\n+  const {actions, sourceId, query} = queryResult;\n+\n+  useEffect(() => {\n+    if (debug) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkwMTY0Mg==", "bodyText": "Yes, I'd prefer to have it on the screen, behind a fold (e.g. the admin or profile dropdowns in the sidebar). I would personally find a modal annoying.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455901642", "createdAt": "2020-07-16T16:07:18Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  debug: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() => {\n+    loadNextSubject && setLoadNextSubject(false);\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}} disabled={fp.isEmpty(auditSubject)} onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {\n+    const timeoutId = setTimeout(() => onChange(displayNum), 250);\n+    return () => clearTimeout(timeoutId);\n+  }, [displayNum]);\n+\n+  return <div>\n+    <label style={{\n+      fontSize: 14,\n+      display: 'block',\n+      color: colors.primary,\n+      lineHeight: '22px',\n+      fontWeight: 600,\n+      marginRight: '0.25rem'\n+    }}>{`Number of Actions to Display (${totalActions} available)`}</label>\n+    <NumberInput value={Math.min(displayNum, totalActions)} min={1} max={totalActions} style={{width: '4rem'}} onChange={setDisplayNum}/>\n+  </div>;\n+};\n+\n+export const AuditPageComponent = (props: AuditPageProps) => {\n+  const {initialAuditSubject, queryAuditLog, getNextAuditPath, debug, auditSubjectType, buttonLabel} = props;\n+  const emptyResult = {actions: [], logEntries: [], sourceId: 0, query: ''};\n+  const [loading, setLoading] = useState(true);\n+  const [queryResult, setQueryResult] = useState<GenericAuditQueryResult>(emptyResult);\n+  const [displayNum, setDisplayNum] = useState(20);\n+  const {actions, sourceId, query} = queryResult;\n+\n+  useEffect(() => {\n+    if (debug) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDIzMDUyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/app-router.tsx", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo0OTowMlrOGxXO9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxOTowOVrOGyDLvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA==", "bodyText": "do we want this to work like this for ALL react routes?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454414068", "createdAt": "2020-07-14T14:49:02Z", "author": {"login": "als364"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -42,7 +42,7 @@ export const AppRoute = ({path, data = {}, component: Component}): React.ReactEl\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route path={path} >\n+  return <Route exact={true} path={path} >", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NzI3Nw==", "bodyText": "@petesantos what say you? I'm just happy it works at all.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454457277", "createdAt": "2020-07-14T15:47:45Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -42,7 +42,7 @@ export const AppRoute = ({path, data = {}, component: Component}): React.ReactEl\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route path={path} >\n+  return <Route exact={true} path={path} >", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTA4MzcyNA==", "bodyText": "Let me test this - I intended to open another PR for this - my apologies for that slipping through.\nIn my original testing with react router, it seemed that exact routes are a bit more predictable.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455083724", "createdAt": "2020-07-15T14:13:17Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -42,7 +42,7 @@ export const AppRoute = ({path, data = {}, component: Component}): React.ReactEl\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route path={path} >\n+  return <Route exact={true} path={path} >", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNDE0MQ==", "bodyText": "Tested - I don't see any issues. If we need to we can pass in a parameter to disable exact matching", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455134141", "createdAt": "2020-07-15T15:19:09Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -42,7 +42,7 @@ export const AppRoute = ({path, data = {}, component: Component}): React.ReactEl\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route path={path} >\n+  return <Route exact={true} path={path} >", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDI0MzcxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/user-audit.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1MToyOVrOGxXWvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODoyNjowOVrOGyKlYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjA2MQ==", "bodyText": "what ticket captures this work?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454416061", "createdAt": "2020-07-14T14:51:29Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -0,0 +1,46 @@\n+import {profileApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import {useParams} from 'react-router-dom';\n+import {AuditAction, AuditEventBundle} from '../../../generated';\n+import {AuditPageComponent} from '../../components/admin/audit-page-component';\n+\n+const getAuditLog = (subject: string) => {\n+  const bqRowLimit = 1000; // Workspaces take many rows because of the Research Purpose fields\n+  return profileApi().getAuditLogEntries(subject, bqRowLimit);\n+};\n+\n+const queryAuditLog = (subject: string) => {\n+  return getAuditLog(subject).then((queryResult) => {\n+    console.log(queryResult.query);\n+    return {\n+      actions: queryResult.actions,\n+      sourceId: queryResult.userDatabaseId,\n+      query: queryResult.query,\n+      logEntries: queryResult.logEntries\n+    };\n+  }).then(genericQueryResult => {\n+    // TODO(jaycarlton): This is a workaround for LOGIN event issues on the backend. Can be removed when that patch is in.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1NzY1OQ==", "bodyText": "https://precisionmedicineinitiative.atlassian.net/browse/RW-5249", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454457659", "createdAt": "2020-07-14T15:48:14Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -0,0 +1,46 @@\n+import {profileApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import {useParams} from 'react-router-dom';\n+import {AuditAction, AuditEventBundle} from '../../../generated';\n+import {AuditPageComponent} from '../../components/admin/audit-page-component';\n+\n+const getAuditLog = (subject: string) => {\n+  const bqRowLimit = 1000; // Workspaces take many rows because of the Research Purpose fields\n+  return profileApi().getAuditLogEntries(subject, bqRowLimit);\n+};\n+\n+const queryAuditLog = (subject: string) => {\n+  return getAuditLog(subject).then((queryResult) => {\n+    console.log(queryResult.query);\n+    return {\n+      actions: queryResult.actions,\n+      sourceId: queryResult.userDatabaseId,\n+      query: queryResult.query,\n+      logEntries: queryResult.logEntries\n+    };\n+  }).then(genericQueryResult => {\n+    // TODO(jaycarlton): This is a workaround for LOGIN event issues on the backend. Can be removed when that patch is in.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjA2MQ=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI1NTM5NA==", "bodyText": "sorry, I wasn't clear - can you put that information in the comment?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455255394", "createdAt": "2020-07-15T18:26:09Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -0,0 +1,46 @@\n+import {profileApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import {useParams} from 'react-router-dom';\n+import {AuditAction, AuditEventBundle} from '../../../generated';\n+import {AuditPageComponent} from '../../components/admin/audit-page-component';\n+\n+const getAuditLog = (subject: string) => {\n+  const bqRowLimit = 1000; // Workspaces take many rows because of the Research Purpose fields\n+  return profileApi().getAuditLogEntries(subject, bqRowLimit);\n+};\n+\n+const queryAuditLog = (subject: string) => {\n+  return getAuditLog(subject).then((queryResult) => {\n+    console.log(queryResult.query);\n+    return {\n+      actions: queryResult.actions,\n+      sourceId: queryResult.userDatabaseId,\n+      query: queryResult.query,\n+      logEntries: queryResult.logEntries\n+    };\n+  }).then(genericQueryResult => {\n+    // TODO(jaycarlton): This is a workaround for LOGIN event issues on the backend. Can be removed when that patch is in.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjA2MQ=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDI0NDEwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/user-audit.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1MTozN1rOGxXXBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNTo0OToyM1rOGxZ8WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjEzMw==", "bodyText": "is this necessary?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454416133", "createdAt": "2020-07-14T14:51:37Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -0,0 +1,46 @@\n+import {profileApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import {useParams} from 'react-router-dom';\n+import {AuditAction, AuditEventBundle} from '../../../generated';\n+import {AuditPageComponent} from '../../components/admin/audit-page-component';\n+\n+const getAuditLog = (subject: string) => {\n+  const bqRowLimit = 1000; // Workspaces take many rows because of the Research Purpose fields\n+  return profileApi().getAuditLogEntries(subject, bqRowLimit);\n+};\n+\n+const queryAuditLog = (subject: string) => {\n+  return getAuditLog(subject).then((queryResult) => {\n+    console.log(queryResult.query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1ODQ1Nw==", "bodyText": "I like it, because it gives you a jumping-off point in BigQuery for follow-up exploration (not to mention debugging). It would be nice to show it (optionally) in the UI.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454458457", "createdAt": "2020-07-14T15:49:23Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -0,0 +1,46 @@\n+import {profileApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import {useParams} from 'react-router-dom';\n+import {AuditAction, AuditEventBundle} from '../../../generated';\n+import {AuditPageComponent} from '../../components/admin/audit-page-component';\n+\n+const getAuditLog = (subject: string) => {\n+  const bqRowLimit = 1000; // Workspaces take many rows because of the Research Purpose fields\n+  return profileApi().getAuditLogEntries(subject, bqRowLimit);\n+};\n+\n+const queryAuditLog = (subject: string) => {\n+  return getAuditLog(subject).then((queryResult) => {\n+    console.log(queryResult.query);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjEzMw=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDI0ODY3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/audit-utils.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1MjozM1rOGxXZ0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMToxNzoxOVrOGxlrtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjg1MA==", "bodyText": "You probably didn't mean to do this twice and you probably also should explain what you mean by this", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454416850", "createdAt": "2020-07-14T14:52:33Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/audit-utils.tsx", "diffHunk": "@@ -0,0 +1,35 @@\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTarget,\n+  AuditTargetPropertyChange\n+} from '../../generated';\n+\n+// Type sold separately\n+// Type sold separately", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQ1ODk2Mw==", "bodyText": "that's left over. I'll collapse this whole file back into one of the others since there's only one place we need to do this now.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454458963", "createdAt": "2020-07-14T15:50:03Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/utils/audit-utils.tsx", "diffHunk": "@@ -0,0 +1,35 @@\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTarget,\n+  AuditTargetPropertyChange\n+} from '../../generated';\n+\n+// Type sold separately\n+// Type sold separately", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjg1MA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1MDgwNw==", "bodyText": "Actually there was enough reuse to keep this file. Cleaned up the old comments and dead method.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454650807", "createdAt": "2020-07-14T21:17:19Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/utils/audit-utils.tsx", "diffHunk": "@@ -0,0 +1,35 @@\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTarget,\n+  AuditTargetPropertyChange\n+} from '../../generated';\n+\n+// Type sold separately\n+// Type sold separately", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjg1MA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODY1Nzg5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/admin/audit-page-component.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDozNzo1OFrOGyBRCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyODoyMlrOGyRINA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjcyOA==", "bodyText": "I am going to add a comment here to make it clear what the purpose of this is:\nTo debounce the input action. Without this it will re-render immediately after every number change.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455102728", "createdAt": "2020-07-15T14:37:58Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,147 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import {AuditAction, AuditLogEntry} from 'generated';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspace audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assumptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  logVerbose: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() =>  {\n+    if (loadNextSubject) {\n+      setLoadNextSubject(false);\n+    }\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}\n+            disabled={fp.isEmpty(auditSubject)}\n+            onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d304ccb7ff9de6126f01708846c2e0026517e6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNDkyMQ==", "bodyText": "I added a useDebounce hook rather than a code comment. Hopefully this will make it clearer in the code what we are doing rather than using a comment to explain.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455134921", "createdAt": "2020-07-15T15:20:06Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,147 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import {AuditAction, AuditLogEntry} from 'generated';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspace audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assumptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  logVerbose: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() =>  {\n+    if (loadNextSubject) {\n+      setLoadNextSubject(false);\n+    }\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}\n+            disabled={fp.isEmpty(auditSubject)}\n+            onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjcyOA=="}, "originalCommit": {"oid": "d0d304ccb7ff9de6126f01708846c2e0026517e6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM2MjYxMg==", "bodyText": "Yeah, I remember it from a EE course. It does seem to help.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455362612", "createdAt": "2020-07-15T21:28:22Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,147 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import {AuditAction, AuditLogEntry} from 'generated';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspace audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assumptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  logVerbose: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() =>  {\n+    if (loadNextSubject) {\n+      setLoadNextSubject(false);\n+    }\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}\n+            disabled={fp.isEmpty(auditSubject)}\n+            onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjcyOA=="}, "originalCommit": {"oid": "d0d304ccb7ff9de6126f01708846c2e0026517e6"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTI5ODY2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/index.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzoxMzoxNlrOGyHg1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQyMToyMDoxNVrOGyQ4TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNTA3Nw==", "bodyText": "OK. How did this bit relate to the rest of the PR?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455205077", "createdAt": "2020-07-15T17:13:16Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/utils/index.tsx", "diffHunk": "@@ -527,3 +529,9 @@ export function renderUSD(value: number) {\n   }\n }\n \n+export const useDebounce = (fn: Function, updateList = [], ms = 250) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791273347a06ceff56da50a0bd846f25022c64b1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwODMxMA==", "bodyText": "Take a look at this line Line 76 in audit-page-component - the github link doesn't seem to work that well.\nDebouncing is a generally useful pattern, so rather than coding it up in the useEffect and leaving it up to the developer to figure out what the effect is doing (or adding comments), I created a custom hook useDebounce. Since this is a generally useful thing I put it in our utils file. This can be reused by any component that wants to utilize debounce functionality.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455208310", "createdAt": "2020-07-15T17:18:12Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/index.tsx", "diffHunk": "@@ -527,3 +529,9 @@ export function renderUSD(value: number) {\n   }\n }\n \n+export const useDebounce = (fn: Function, updateList = [], ms = 250) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNTA3Nw=="}, "originalCommit": {"oid": "791273347a06ceff56da50a0bd846f25022c64b1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTM1ODU0MA==", "bodyText": "yeah, a debouncing input box would be nice.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455358540", "createdAt": "2020-07-15T21:20:15Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/utils/index.tsx", "diffHunk": "@@ -527,3 +529,9 @@ export function renderUSD(value: number) {\n   }\n }\n \n+export const useDebounce = (fn: Function, updateList = [], ms = 250) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNTA3Nw=="}, "originalCommit": {"oid": "791273347a06ceff56da50a0bd846f25022c64b1"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2613, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}