{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODI5NDcz", "number": 3905, "title": "[risk=no][RW-5437] Allow reporting null values", "bodyText": "Description:\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test:local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-08-21T19:55:57Z", "url": "https://github.com/all-of-us/workbench/pull/3905", "merged": true, "mergeCommit": {"oid": "1967d9d16bfc64101b8ca64c8eaec9fca56f3d1e"}, "closed": true, "closedAt": "2020-08-21T21:32:34Z", "author": {"login": "jmthibault79"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBKRpSgH2gAyNDcxODI5NDczOjczNTBmZTliMTRiMzJkODZiZDcwZDkxZDYxZTRiMGMyNGI4YTAzODI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBLQGXAH2gAyNDcxODI5NDczOmRjNDQ0ZDljZGI1N2Y2NGE2ZWJiNjAyM2JmMGYzMTYwYWRmZjhhZTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7350fe9b14b32d86bd70d91d61e4b0c24b8a0382", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/7350fe9b14b32d86bd70d91d61e4b0c24b8a0382", "committedDate": "2020-08-21T19:49:29Z", "message": "be the null-toleration you want to see in the world"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d0e6b0c4cf12c172a1af58e2e12ea65870bf88b", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/5d0e6b0c4cf12c172a1af58e2e12ea65870bf88b", "committedDate": "2020-08-21T19:53:55Z", "message": "fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzg0MDYw", "url": "https://github.com/all-of-us/workbench/pull/3905#pullrequestreview-472784060", "createdAt": "2020-08-21T19:56:46Z", "commit": {"oid": "5d0e6b0c4cf12c172a1af58e2e12ea65870bf88b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTo1Njo0NlrOHE6iEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxOTo1Njo0NlrOHE6iEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxNTM0NQ==", "bodyText": "stream/foreach also works fine, if you prefer", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r474915345", "createdAt": "2020-08-21T19:56:46Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilder.java", "diffHunk": "@@ -28,15 +27,16 @@ default InsertAllRequest build(TableId tableId, List<T> models, Map<String, Obje\n   }\n \n   default RowToInsert modelToRow(T model, Map<String, Object> fixedValues) {\n-    final ImmutableMap.Builder<String, Object> builder = new ImmutableMap.Builder<>();\n     // First N columns are same for all rows (e.g. a partition key column)\n-    builder.putAll(fixedValues);\n-    builder.putAll(\n-        Arrays.stream(getQueryParameterColumns())\n-            .collect(\n-                ImmutableMap.toImmutableMap(\n-                    QueryParameterColumn::getParameterName, c -> c.getRowToInsertValue(model))));\n-    return RowToInsert.of(generateInsertId(), builder.build());\n+    final Map<String, Object> rowMap = Maps.newHashMap(fixedValues);\n+\n+    // can't stream/collect here because that uses HashMap.merge() which surprisingly does not\n+    // allow null values although they are valid for HashMap.  We do use null values.\n+    for (QueryParameterColumn<T> qpc : getQueryParameterColumns()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d0e6b0c4cf12c172a1af58e2e12ea65870bf88b"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7509ff65d6e06d878b50e5e80d47355b75e12a70", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/7509ff65d6e06d878b50e5e80d47355b75e12a70", "committedDate": "2020-08-21T19:57:56Z", "message": "add comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNzg2NDM4", "url": "https://github.com/all-of-us/workbench/pull/3905#pullrequestreview-472786438", "createdAt": "2020-08-21T20:01:11Z", "commit": {"oid": "7509ff65d6e06d878b50e5e80d47355b75e12a70"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDowMToxMVrOHE6wVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDowMzo1N1rOHE648Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxODk5OA==", "bodyText": "Please use a fixed instant (e.g. with Instant.parse(\"\")) so we don't have changing behavior between runs.", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r474918998", "createdAt": "2020-08-21T20:01:11Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/insertion/InsertAllRequestBuilderTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package org.pmiops.workbench.reporting.insertion;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.cloud.bigquery.InsertAllRequest;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Map;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.model.ReportingResearcher;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+public class InsertAllRequestBuilderTest {\n+  final InsertAllRequestBuilder<ReportingResearcher> researcherRequestBuilder =\n+      ResearcherParameter::values;\n+\n+  final Map<String, Object> fixedValues =\n+      ImmutableMap.of(\"snapshot_timestamp\", Instant.now().toEpochMilli());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509ff65d6e06d878b50e5e80d47355b75e12a70"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkxOTkzNg==", "bodyText": "FWIW I will probably eventually make the snapshot timestamp and individual wannabe PK columns required in BQ, but this is fine for now.", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r474919936", "createdAt": "2020-08-21T20:02:24Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java", "diffHunk": "@@ -142,6 +143,47 @@ public void setup() {\n                         .fakeSize(4444L)\n                         .creatorId(202L)));\n \n+    snapshotWithNulls =\n+        new ReportingSnapshot()\n+            .captureTimestamp(NOW.toEpochMilli())\n+            .researchers(\n+                ImmutableList.of(\n+                    new ReportingResearcher()\n+                        .username(null)\n+                        .firstName(\"Nullson\")\n+                        .isDisabled(false)\n+                        .researcherId(101L),\n+                    new ReportingResearcher()\n+                        .username(\"america@usa.gov\")\n+                        .firstName(null)\n+                        .isDisabled(false)\n+                        .researcherId(202L),\n+                    new ReportingResearcher()\n+                        .username(null)\n+                        .firstName(null)\n+                        .isDisabled(true)\n+                        .researcherId(303L)))\n+            .workspaces(\n+                ImmutableList.of(\n+                    new ReportingWorkspace()\n+                        .workspaceId(201L)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509ff65d6e06d878b50e5e80d47355b75e12a70"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyMTIwMQ==", "bodyText": "slightly out of scope, but it would be good to test both upload methods with a completely empty snapshot or snapshot with one table empty. We can either throw an IllegalArgumentException or treat it as valid (e.g. for brand-new environments).", "url": "https://github.com/all-of-us/workbench/pull/3905#discussion_r474921201", "createdAt": "2020-08-21T20:03:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java", "diffHunk": "@@ -224,14 +275,22 @@ public void testUploadSnapshot_dmlBatchInserts() {\n \n   @Test\n   public void testUploadSnapshot_streaming() {\n+    testUploadSnapshot_streaming(reportingSnapshot);\n+  }\n+\n+  @Test\n+  public void testUploadSnapshot_streaming_with_nulls() {\n+    testUploadSnapshot_streaming(snapshotWithNulls);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7509ff65d6e06d878b50e5e80d47355b75e12a70"}, "originalPosition": 85}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc444d9cdb57f64a6ebb6023bf0f3160adff8ae1", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/dc444d9cdb57f64a6ebb6023bf0f3160adff8ae1", "committedDate": "2020-08-21T20:57:42Z", "message": "fixed snapshot time and empty snapshot tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4312, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}