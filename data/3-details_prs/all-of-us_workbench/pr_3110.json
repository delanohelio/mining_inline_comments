{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjA3MzIw", "number": 3110, "title": "[RW-3685][risk=low] Add a config variable controlling invitation key verification", "bodyText": "In prep for launch, this PR adds a new config variable requireVerificationKey which controls the frontend & backend components which require a verification key to be input by users. When this is off, the frontend will not collect an invitation key & the backend will not verify it.\nA few notes:\nJira ticket\nI'm attaching this to the broader \"enable feature flag for registration pages\" issue, since it's thematically related and this is one more step on the way towards enabling that flag.\nEnvironment var vs. feature flag\nI'm modeling this flag as an \"access\" config variable rather than a feature flag, since we may wish to control access with an invitation key in lower environments (such as preprod) even once this is opened up in prod. Feature flags should have an expectation that they will be removed at some point in the future, which doesn't fit here.\nController tests\nI also took the opportunity to try and quickly clean up the ProfileControllerTest a bit. This was initially motivated by a desire to more easily change the WorkbenchConfig for individual test cases. I made two major changes: (1) create a BaseControllerTest class (similar to what I'd done in https://github.com/all-of-us/workbench/blob/master/api/src/integration/java/org/pmiops/workbench/BaseIntegrationTest.java), and (2) remove explicit constructors in favor of @Autowired and @MockBean. I think this came out a little cleaner on the other side, though it does add some extra weight to the PR \u2013 apologies!\nUI tests\nOn the UI side, I had a bit of \"fun\" trying to find a way to gain access to the inner React component from Enzyme. First off, with higher-order components and shallow rendering, you need to make a few extra calls to shallow() to ensure the inner component gets rendered. Secondly, the core component was originally an anonymous inner class, which didn't allow me to call its public methods from the Enzyme test. This was fixed by bumping the class up to the top-level and exporting it \u2013\u00a0a pattern that we may want to use elsewhere.\n\nPR checklist\n\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers", "createdAt": "2020-02-10T15:45:58Z", "url": "https://github.com/all-of-us/workbench/pull/3110", "merged": true, "mergeCommit": {"oid": "3645bffd70fa44003722798bddfb4744684e89aa"}, "closed": true, "closedAt": "2020-02-12T23:59:55Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDmP2zAH2gAyMzczMjA3MzIwOjA0NmVmMzE5Yjk2NDEyMmI3YjZhN2FiZDA2NTQ5ZTBjNmE4YzRlZDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDt7ETAFqTM1NzgyOTUwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "046ef319b964122b7b6a7abd06549e0c6a8c4ed3", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/046ef319b964122b7b6a7abd06549e0c6a8c4ed3", "committedDate": "2020-02-12T13:21:34Z", "message": "WIP adding new flag."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d645210f25e8e919ebf14630118d9935a94791", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/92d645210f25e8e919ebf14630118d9935a94791", "committedDate": "2020-02-12T13:21:34Z", "message": "Add feature flag and controller integrations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7a4ef9a91fd8df874955359f7c498bf369cb3ab", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/b7a4ef9a91fd8df874955359f7c498bf369cb3ab", "committedDate": "2020-02-12T13:21:34Z", "message": "Add UI support for requireInvitationKey flag."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/ac18b98f1c876287ee57db2a2cf635c978bf383a", "committedDate": "2020-02-12T13:21:34Z", "message": "Fix tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff4f610dfa3711628c0a67ad73820371be5435d4", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/ff4f610dfa3711628c0a67ad73820371be5435d4", "committedDate": "2020-02-12T13:20:27Z", "message": "Fix tests."}, "afterCommit": {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/ac18b98f1c876287ee57db2a2cf635c978bf383a", "committedDate": "2020-02-12T13:21:34Z", "message": "Fix tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDUyNTU4", "url": "https://github.com/all-of-us/workbench/pull/3110#pullrequestreview-357452558", "createdAt": "2020-02-12T13:33:34Z", "commit": {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozMzozNFrOFoupng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozMzozNFrOFoupng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTY3OA==", "bodyText": "GitHub is kinda mangling the diff here. The key change made was to extract the inner class and turn it into a top-level component called SignInReactImpl. This allows us to refer to that class from the unit test, which this PR uses to verify that the set of sign-in steps is correct when invitation key verification is turned off.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378251678", "createdAt": "2020-02-12T13:33:34Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98fbf61ff9b165eb5aaffd3bf2328473ac865275", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/98fbf61ff9b165eb5aaffd3bf2328473ac865275", "committedDate": "2020-02-12T14:04:59Z", "message": "Fix tests, add a small comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/7ad31366b9afad98c560483a3c6e8f051a72cb71", "committedDate": "2020-02-12T14:47:44Z", "message": "Fix clock increment issue."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzEzOTc4", "url": "https://github.com/all-of-us/workbench/pull/3110#pullrequestreview-357713978", "createdAt": "2020-02-12T19:10:16Z", "commit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToxMDoxNlrOFo7Emw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo1NTozN1rOFo8jLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NTE5NQ==", "bodyText": "Ooh. Will this mean that we'll no longer have to create a WorkbenchConfigProvider per test?", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378455195", "createdAt": "2020-02-12T19:10:16Z", "author": {"login": "als364"}, "path": "api/build.gradle", "diffHunk": "@@ -293,6 +293,10 @@ sourceSets {\n     runtimeClasspath += generated.output\n   }\n   test {\n+    // Allow unit tests to directly load config files.\n+    resources {\n+      srcDir \"config/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ==", "bodyText": "With a name like this, I'd expect everything to extend it. Can you call this something that makes it clearer this class is intended for composition? Maybe something like WithWorkbenchConfig?", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378470511", "createdAt": "2020-02-12T19:39:10Z", "author": {"login": "als364"}, "path": "api/src/test/java/org/pmiops/workbench/api/BaseControllerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.api;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.test.FakeLongRandom;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public abstract class BaseControllerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTQ0OQ==", "bodyText": "extraneous", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475449", "createdAt": "2020-02-12T19:48:11Z", "author": {"login": "als364"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -644,24 +660,8 @@ private void assertUser(\n     assertThat(user.getFamilyName()).isEqualTo(familyName);\n     assertThat(user.getGivenName()).isEqualTo(givenName);\n     assertThat(user.getDataAccessLevelEnum()).isEqualTo(dataAccessLevel);\n-    assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);\n+    assertThat(user.getFirstSignInTime().getTime()).isEqualTo(firstSignInTime.getTime());\n+    // assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTU2OQ==", "bodyText": "validate", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475569", "createdAt": "2020-02-12T19:48:23Z", "author": {"login": "als364"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTcwOQ==", "bodyText": "valide -> validate", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475709", "createdAt": "2020-02-12T19:48:38Z", "author": {"login": "als364"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg2Mg==", "bodyText": "This should be moved up to the new shallowComponent in line 23.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378477862", "createdAt": "2020-02-12T19:52:39Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -74,7 +80,7 @@ describe('SignInReact', () => {\n   it('should handle sign-up flow for legacy account creation', () => {\n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg5Ng==", "bodyText": "And so should this.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378477896", "createdAt": "2020-02-12T19:52:44Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -97,7 +103,7 @@ describe('SignInReact', () => {\n \n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3ODQzNw==", "bodyText": "it's mangled even with but at least it highlights the differences", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378478437", "createdAt": "2020-02-12T19:53:46Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTY3OA=="}, "originalCommit": {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3OTQwNA==", "bodyText": "nit: I'd prefer to just see separate lists returned in each of these cases. In this case, we're not going to change what enableNewAccountCreation or requireInvitationKey means.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378479404", "createdAt": "2020-02-12T19:55:37Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n-  class extends React.Component<SignInProps, SignInState> {\n+/**\n+ * The inner / implementation SignIn component. This class should only be rendered via the\n+ * SignInReact method, which wraps this with the expected higher-order components.\n+ */\n+export class SignInReactImpl extends React.Component<SignInProps, SignInState> {\n \n-    constructor(props: SignInProps) {\n-      super(props);\n-      this.state = {\n-        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n-        invitationKey: null,\n-        termsOfServiceVersion: null,\n-        // This defines the profile state for a new user flow. This will get passed to each\n-        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n-        // data in its onComplete callback.\n-        profile: this.createEmptyProfile()\n-      };\n-    }\n+  constructor(props: SignInProps) {\n+    super(props);\n+    this.state = {\n+      currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+      invitationKey: null,\n+      termsOfServiceVersion: null,\n+      // This defines the profile state for a new user flow. This will get passed to each\n+      // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+      // data in its onComplete callback.\n+      profile: this.createEmptyProfile()\n+    };\n+  }\n \n-    createEmptyProfile(): Profile {\n-      return {\n-        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n-        // profile creation, this field is populated with the full email address.\n-        username: '',\n-        dataAccessLevel: DataAccessLevel.Unregistered,\n-        givenName: '',\n-        familyName: '',\n-        contactEmail: '',\n-        currentPosition: '',\n-        organization: '',\n-        areaOfResearch: '',\n-        address: {\n-          streetAddress1: '',\n-          streetAddress2: '',\n-          city: '',\n-          state: '',\n-          country: '',\n-          zipCode: '',\n+  private createEmptyProfile(): Profile {\n+    return {\n+      // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+      // profile creation, this field is populated with the full email address.\n+      username: '',\n+      dataAccessLevel: DataAccessLevel.Unregistered,\n+      givenName: '',\n+      familyName: '',\n+      contactEmail: '',\n+      currentPosition: '',\n+      organization: '',\n+      areaOfResearch: '',\n+      address: {\n+        streetAddress1: '',\n+        streetAddress2: '',\n+        city: '',\n+        state: '',\n+        country: '',\n+        zipCode: '',\n+      },\n+      institutionalAffiliations: [\n+        // We only allow entering a single institutional affiliation from the create account\n+        // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n+        // form.\n+        {\n+          institution: undefined,\n+          nonAcademicAffiliation: undefined,\n+          role: undefined,\n         },\n-        institutionalAffiliations: [\n-          // We only allow entering a single institutional affiliation from the create account\n-          // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n-          // form.\n-          {\n-            institution: undefined,\n-            nonAcademicAffiliation: undefined,\n-            role: undefined,\n-          },\n-        ],\n-        demographicSurvey: {},\n-        degrees: [] as Degree[],\n-      };\n+      ],\n+      demographicSurvey: {},\n+      degrees: [] as Degree[],\n+    };\n+  }\n+\n+  componentDidMount() {\n+    document.body.style.backgroundColor = colors.light;\n+    this.props.onInit();\n+  }\n+\n+  /**\n+   * Creates the appropriate set of steps based on the server-side config.\n+   *\n+   * Made visible for ease of unit-testing.\n+   */\n+  public getAccountCreationSteps(): Array<SignInStep> {\n+    let steps = [\n+      SignInStep.LANDING,\n+      SignInStep.INVITATION_KEY,\n+      SignInStep.TERMS_OF_SERVICE,\n+      SignInStep.ACCOUNT_CREATION,\n+      SignInStep.DEMOGRAPHIC_SURVEY,\n+      SignInStep.SUCCESS_PAGE\n+    ];\n+\n+    const {enableNewAccountCreation, requireInvitationKey} = this.props.serverConfig;\n+\n+    if (!enableNewAccountCreation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cdfdfd1a4870ce59d8bd806ce1bdc97a5f1c145", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/8cdfdfd1a4870ce59d8bd806ce1bdc97a5f1c145", "committedDate": "2020-02-12T22:02:44Z", "message": "PR feedback."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODA3NjU5", "url": "https://github.com/all-of-us/workbench/pull/3110#pullrequestreview-357807659", "createdAt": "2020-02-12T21:40:37Z", "commit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo0MDozN1rOFo_ilw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1OToyMVrOFpAFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyODQwNw==", "bodyText": "This specific change allows us to load the config_test.json by default from within unit tests. IMO this is a realistic way to set up our tests, e.g. by default our unit & integration tests are configured the same way they are in \"test\" environment.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378528407", "createdAt": "2020-02-12T21:40:37Z", "author": {"login": "gjuggler"}, "path": "api/build.gradle", "diffHunk": "@@ -293,6 +293,10 @@ sourceSets {\n     runtimeClasspath += generated.output\n   }\n   test {\n+    // Allow unit tests to directly load config files.\n+    resources {\n+      srcDir \"config/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NTE5NQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMzM5NQ==", "bodyText": "Hmm, good point. My intention here would be for this to be a base class extended by all other test classes (I don't think there's enough variability in our tests to warrant full composition.\nBut given the number of controller test cases, I didn't want to bite this off as part of this PR. I filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4443 and added some class-level comments clarifying the intent.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378533395", "createdAt": "2020-02-12T21:51:12Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/api/BaseControllerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.api;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.test.FakeLongRandom;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public abstract class BaseControllerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMzcxNw==", "bodyText": "Yep, sorry. I'd been mucking with debugging some errors while refactoring the tests, forgot to clean up.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378533717", "createdAt": "2020-02-12T21:51:49Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -644,24 +660,8 @@ private void assertUser(\n     assertThat(user.getFamilyName()).isEqualTo(familyName);\n     assertThat(user.getGivenName()).isEqualTo(givenName);\n     assertThat(user.getDataAccessLevelEnum()).isEqualTo(dataAccessLevel);\n-    assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);\n+    assertThat(user.getFirstSignInTime().getTime()).isEqualTo(firstSignInTime.getTime());\n+    // assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTQ0OQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjU3Ng==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536576", "createdAt": "2020-02-12T21:57:57Z", "author": {"login": "gjuggler"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTcwOQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjU5OQ==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536599", "createdAt": "2020-02-12T21:58:01Z", "author": {"login": "gjuggler"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTU2OQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjg2NQ==", "bodyText": "Thanks \u2013\u00a0done.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536865", "createdAt": "2020-02-12T21:58:38Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -74,7 +80,7 @@ describe('SignInReact', () => {\n   it('should handle sign-up flow for legacy account creation', () => {\n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg2Mg=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjkyMQ==", "bodyText": "Done.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536921", "createdAt": "2020-02-12T21:58:44Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -97,7 +103,7 @@ describe('SignInReact', () => {\n \n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg5Ng=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNzIzMw==", "bodyText": "good idea \u2013\u00a0done.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378537233", "createdAt": "2020-02-12T21:59:21Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n-  class extends React.Component<SignInProps, SignInState> {\n+/**\n+ * The inner / implementation SignIn component. This class should only be rendered via the\n+ * SignInReact method, which wraps this with the expected higher-order components.\n+ */\n+export class SignInReactImpl extends React.Component<SignInProps, SignInState> {\n \n-    constructor(props: SignInProps) {\n-      super(props);\n-      this.state = {\n-        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n-        invitationKey: null,\n-        termsOfServiceVersion: null,\n-        // This defines the profile state for a new user flow. This will get passed to each\n-        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n-        // data in its onComplete callback.\n-        profile: this.createEmptyProfile()\n-      };\n-    }\n+  constructor(props: SignInProps) {\n+    super(props);\n+    this.state = {\n+      currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+      invitationKey: null,\n+      termsOfServiceVersion: null,\n+      // This defines the profile state for a new user flow. This will get passed to each\n+      // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+      // data in its onComplete callback.\n+      profile: this.createEmptyProfile()\n+    };\n+  }\n \n-    createEmptyProfile(): Profile {\n-      return {\n-        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n-        // profile creation, this field is populated with the full email address.\n-        username: '',\n-        dataAccessLevel: DataAccessLevel.Unregistered,\n-        givenName: '',\n-        familyName: '',\n-        contactEmail: '',\n-        currentPosition: '',\n-        organization: '',\n-        areaOfResearch: '',\n-        address: {\n-          streetAddress1: '',\n-          streetAddress2: '',\n-          city: '',\n-          state: '',\n-          country: '',\n-          zipCode: '',\n+  private createEmptyProfile(): Profile {\n+    return {\n+      // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+      // profile creation, this field is populated with the full email address.\n+      username: '',\n+      dataAccessLevel: DataAccessLevel.Unregistered,\n+      givenName: '',\n+      familyName: '',\n+      contactEmail: '',\n+      currentPosition: '',\n+      organization: '',\n+      areaOfResearch: '',\n+      address: {\n+        streetAddress1: '',\n+        streetAddress2: '',\n+        city: '',\n+        state: '',\n+        country: '',\n+        zipCode: '',\n+      },\n+      institutionalAffiliations: [\n+        // We only allow entering a single institutional affiliation from the create account\n+        // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n+        // form.\n+        {\n+          institution: undefined,\n+          nonAcademicAffiliation: undefined,\n+          role: undefined,\n         },\n-        institutionalAffiliations: [\n-          // We only allow entering a single institutional affiliation from the create account\n-          // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n-          // form.\n-          {\n-            institution: undefined,\n-            nonAcademicAffiliation: undefined,\n-            role: undefined,\n-          },\n-        ],\n-        demographicSurvey: {},\n-        degrees: [] as Degree[],\n-      };\n+      ],\n+      demographicSurvey: {},\n+      degrees: [] as Degree[],\n+    };\n+  }\n+\n+  componentDidMount() {\n+    document.body.style.backgroundColor = colors.light;\n+    this.props.onInit();\n+  }\n+\n+  /**\n+   * Creates the appropriate set of steps based on the server-side config.\n+   *\n+   * Made visible for ease of unit-testing.\n+   */\n+  public getAccountCreationSteps(): Array<SignInStep> {\n+    let steps = [\n+      SignInStep.LANDING,\n+      SignInStep.INVITATION_KEY,\n+      SignInStep.TERMS_OF_SERVICE,\n+      SignInStep.ACCOUNT_CREATION,\n+      SignInStep.DEMOGRAPHIC_SURVEY,\n+      SignInStep.SUCCESS_PAGE\n+    ];\n+\n+    const {enableNewAccountCreation, requireInvitationKey} = this.props.serverConfig;\n+\n+    if (!enableNewAccountCreation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3OTQwNA=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODI5NTAy", "url": "https://github.com/all-of-us/workbench/pull/3110#pullrequestreview-357829502", "createdAt": "2020-02-12T22:17:24Z", "commit": {"oid": "8cdfdfd1a4870ce59d8bd806ce1bdc97a5f1c145"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxNzoyNFrOFpAkkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxNzoyNFrOFpAkkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NTI5Ng==", "bodyText": "Works for me. Can you coordinate with Joel to put this on the list of best practices things?", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378545296", "createdAt": "2020-02-12T22:17:24Z", "author": {"login": "als364"}, "path": "api/src/test/java/org/pmiops/workbench/api/BaseControllerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.api;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.test.FakeLongRandom;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public abstract class BaseControllerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3547, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}