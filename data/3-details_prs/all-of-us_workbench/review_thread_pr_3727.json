{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNzA2MTk1", "number": 3727, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1MzozNFrOEKG7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo1NToxM1rOEKi6tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDM0NjM3OnYy", "diffSide": "RIGHT", "path": "e2e/app/component/share-modal.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1MzozNFrOGq9eEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo1MTowM1rOGrpUOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMDQ5Ng==", "bodyText": "works without setting viewport. I think finding element with {visible: true} is the reason.", "url": "https://github.com/all-of-us/workbench/pull/3727#discussion_r447700496", "createdAt": "2020-06-30T13:53:34Z", "author": {"login": "aweng98"}, "path": "e2e/app/component/share-modal.ts", "diffHunk": "@@ -14,11 +12,14 @@ export default class ShareModal extends Dialog {\n   }\n \n   async shareWithUser(username: string, level: WorkspaceAccessLevel): Promise<void> {\n+    /*\n     if (!this.page.viewport()) {\n       throw Error(\n         'testing of the share modal requires a viewport to be set on account ' +\n           'on odd rendering issues with the react-select component');\n     }\n+    */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ad6a05d83d41a33947b3bd3c7b3f3d94b357ca4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQxODg3Mw==", "bodyText": "If that's the case, please remove the commented code! :)", "url": "https://github.com/all-of-us/workbench/pull/3727#discussion_r448418873", "createdAt": "2020-07-01T14:51:03Z", "author": {"login": "gjuggler"}, "path": "e2e/app/component/share-modal.ts", "diffHunk": "@@ -14,11 +12,14 @@ export default class ShareModal extends Dialog {\n   }\n \n   async shareWithUser(username: string, level: WorkspaceAccessLevel): Promise<void> {\n+    /*\n     if (!this.page.viewport()) {\n       throw Error(\n         'testing of the share modal requires a viewport to be set on account ' +\n           'on odd rendering issues with the react-select component');\n     }\n+    */\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMDQ5Ng=="}, "originalCommit": {"oid": "6ad6a05d83d41a33947b3bd3c7b3f3d94b357ca4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDM2MjE1OnYy", "diffSide": "LEFT", "path": "e2e/app/component/share-modal.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1Njo0OFrOGq9nxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMzo1Njo0OFrOGq9nxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcwMjk4MA==", "bodyText": "Dupl. functions. clickButton() and waitForButton() are in Dialog class.", "url": "https://github.com/all-of-us/workbench/pull/3727#discussion_r447702980", "createdAt": "2020-06-30T13:56:48Z", "author": {"login": "aweng98"}, "path": "e2e/app/component/share-modal.ts", "diffHunk": "@@ -56,16 +56,6 @@ export default class ShareModal extends Dialog {\n         `@data-test-id=\"collab-user-email\" and contains(text(),\"${username}\")]]`;\n   }\n \n-  async clickButton(buttonLabel: LinkText): Promise<void> {\n-    const button = await this.waitForButton(buttonLabel);\n-    await button.waitUntilEnabled();\n-    return button.click();\n-  }\n-\n-  async waitForButton(buttonLabel: LinkText): Promise<Button> {\n-    return Button.findByName(this.page, {containsText: buttonLabel, type: ElementType.Button}, this);\n-  }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ad6a05d83d41a33947b3bd3c7b3f3d94b357ca4"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDkzMzAyOnYy", "diffSide": "RIGHT", "path": "e2e/tests/workspace/workspace-share.spec.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNDo1NToxM1rOGrpfdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjoxNjozMVrOGrspjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQyMTc0OQ==", "bodyText": "[no action] TIL that you can open the share modal even if you're a read-only user. Is this somehow expected / required for the product? The only thing I can think of is that this is the path for a read-only user to remove themself from the workspace... but it does feel like an awkward flow if that's the case. More common / expected (e.g. for things like Google Groups) would be a button that says \"Remove me from this workspace\".", "url": "https://github.com/all-of-us/workbench/pull/3727#discussion_r448421749", "createdAt": "2020-07-01T14:55:13Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/workspace/workspace-share.spec.ts", "diffHunk": "@@ -49,5 +55,69 @@ describe('Share workspace', () => {\n       accessLevel = await aboutPage.findUserInCollaboratorList(config.collaboratorUsername);\n       expect(accessLevel).toBeNull();\n     });\n+\n+\n+    /**\n+     * Test:\n+     * - Create a new workspace.\n+     * - Share with another user with role READER.\n+     * - Log in as another user.\n+     * - Workspace share action should be disabled.\n+     */\n+    test('Workspace READER cannot share edit or delete workspace', async () => {\n+\n+      const workspaceCard = await findWorkspace(page, true);\n+      const workspaceName = await workspaceCard.getWorkspaceName();\n+\n+      // Open the Share modal\n+      const menu = workspaceCard.getEllipsis();\n+      await menu.clickAction(EllipsisMenuAction.Share, {waitForNav: false});\n+\n+      const shareModal = new ShareModal(page);\n+      await shareModal.waitUntilVisible();\n+\n+      await shareModal.shareWithUser(config.collaboratorUsername, WorkspaceAccessLevel.Reader);\n+      await waitWhileLoading(page);\n+      await Navigation.navMenu(page, NavLink.SIGN_OUT);\n+\n+      // To verify READER role assigned correctly, user with READER role will sign in in new Incognito page.\n+      const newPage = await signInAs(config.collaboratorUsername, config.userPassword);\n+\n+      const homePage = new HomePage(newPage);\n+      await homePage.getSeeAllWorkspacesLink().then((link) => link.click());\n+\n+      const workspacesPage = new WorkspacesPage(newPage);\n+      await workspacesPage.waitForLoad();\n+\n+      // Verify Workspace Access Level is READER.\n+      const workspaceCard2 = await WorkspaceCard.findCard(newPage, workspaceName);\n+      const accessLevel = await workspaceCard2.getWorkspaceAccessLevel();\n+      expect(accessLevel).toBe(WorkspaceAccessLevel.Reader);\n+\n+      // Share, Edit and Delete actions are not available for click.\n+      const menu2 = workspaceCard2.getEllipsis();\n+      await menu2.clickEllipsis();\n+      await menu2.isDisabled(EllipsisMenuAction.Share);\n+      await menu2.isDisabled(EllipsisMenuAction.Edit);\n+      await menu2.isDisabled(EllipsisMenuAction.Delete);\n+\n+      // Duplicate action is available for click.\n+      await menu2.isDisabled(EllipsisMenuAction.Duplicate);\n+\n+      // Make sure the Search input-field in Share modal is disabled.\n+      await workspaceCard2.clickWorkspaceName();\n+      await (new DataPage(newPage)).openTab(TabLabelAlias.About);\n+      const aboutPage = new WorkspaceAboutPage(newPage);\n+      await aboutPage.waitForLoad();\n+      const modal2 = await aboutPage.openShareModal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ad6a05d83d41a33947b3bd3c7b3f3d94b357ca4"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ3MzQ4Ng==", "bodyText": "I thought it was odd to find enabled Share button in About page. Maybe the purpose of Share modal is to show information about this workspace who else are OWNER/READER/WRITER.", "url": "https://github.com/all-of-us/workbench/pull/3727#discussion_r448473486", "createdAt": "2020-07-01T16:16:31Z", "author": {"login": "aweng98"}, "path": "e2e/tests/workspace/workspace-share.spec.ts", "diffHunk": "@@ -49,5 +55,69 @@ describe('Share workspace', () => {\n       accessLevel = await aboutPage.findUserInCollaboratorList(config.collaboratorUsername);\n       expect(accessLevel).toBeNull();\n     });\n+\n+\n+    /**\n+     * Test:\n+     * - Create a new workspace.\n+     * - Share with another user with role READER.\n+     * - Log in as another user.\n+     * - Workspace share action should be disabled.\n+     */\n+    test('Workspace READER cannot share edit or delete workspace', async () => {\n+\n+      const workspaceCard = await findWorkspace(page, true);\n+      const workspaceName = await workspaceCard.getWorkspaceName();\n+\n+      // Open the Share modal\n+      const menu = workspaceCard.getEllipsis();\n+      await menu.clickAction(EllipsisMenuAction.Share, {waitForNav: false});\n+\n+      const shareModal = new ShareModal(page);\n+      await shareModal.waitUntilVisible();\n+\n+      await shareModal.shareWithUser(config.collaboratorUsername, WorkspaceAccessLevel.Reader);\n+      await waitWhileLoading(page);\n+      await Navigation.navMenu(page, NavLink.SIGN_OUT);\n+\n+      // To verify READER role assigned correctly, user with READER role will sign in in new Incognito page.\n+      const newPage = await signInAs(config.collaboratorUsername, config.userPassword);\n+\n+      const homePage = new HomePage(newPage);\n+      await homePage.getSeeAllWorkspacesLink().then((link) => link.click());\n+\n+      const workspacesPage = new WorkspacesPage(newPage);\n+      await workspacesPage.waitForLoad();\n+\n+      // Verify Workspace Access Level is READER.\n+      const workspaceCard2 = await WorkspaceCard.findCard(newPage, workspaceName);\n+      const accessLevel = await workspaceCard2.getWorkspaceAccessLevel();\n+      expect(accessLevel).toBe(WorkspaceAccessLevel.Reader);\n+\n+      // Share, Edit and Delete actions are not available for click.\n+      const menu2 = workspaceCard2.getEllipsis();\n+      await menu2.clickEllipsis();\n+      await menu2.isDisabled(EllipsisMenuAction.Share);\n+      await menu2.isDisabled(EllipsisMenuAction.Edit);\n+      await menu2.isDisabled(EllipsisMenuAction.Delete);\n+\n+      // Duplicate action is available for click.\n+      await menu2.isDisabled(EllipsisMenuAction.Duplicate);\n+\n+      // Make sure the Search input-field in Share modal is disabled.\n+      await workspaceCard2.clickWorkspaceName();\n+      await (new DataPage(newPage)).openTab(TabLabelAlias.About);\n+      const aboutPage = new WorkspaceAboutPage(newPage);\n+      await aboutPage.waitForLoad();\n+      const modal2 = await aboutPage.openShareModal();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQyMTc0OQ=="}, "originalCommit": {"oid": "6ad6a05d83d41a33947b3bd3c7b3f3d94b357ca4"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2597, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}