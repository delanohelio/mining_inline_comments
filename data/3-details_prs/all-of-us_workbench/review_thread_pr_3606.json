{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwODA0MTUx", "number": 3606, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1MDo0MlrOD-ldQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoyMDoxOVrOEALSUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTUyMDAyOnYy", "diffSide": "RIGHT", "path": "api/config/config_local.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1MDo0MlrOGYxlCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1MDo0MlrOGYxlCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMTMwNg==", "bodyText": "There's some duplication here, but it's because I can't guarantee we won't need to rename a table separately from the dataset or log. For example, adding a column to the JSON in the log means we technically need a new BQ schema for the table.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r428631306", "createdAt": "2020-05-21T12:50:42Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -105,7 +105,9 @@\n     \"enableEventDateModifier\": false\n   },\n   \"actionAudit\": {\n-    \"logName\": \"workbench-action-audit-local\"\n+    \"logName\": \"workbench-action-audit-local\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTUyNDEyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1MjowMVrOGYxneg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzowNjowM1rOGYyCXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMTkzMA==", "bodyText": "I'm really close to shopping for a template engine for this. I'm already up to three ordered substitutions and I don't have any time constraints, ordering options, etc.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r428631930", "createdAt": "2020-05-21T12:52:01Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.StreamSupport;\n+import javax.annotation.Nullable;\n+import javax.inject.Provider;\n+import org.joda.time.Instant;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private WorkspaceService workspaceService;\n+  public static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzODgxMw==", "bodyText": "Maybe look to https://cloud.google.com/bigquery/docs/parameterized-queries ? I think we use this on the CB side of the house, so there should be examples in our codebase (like this).", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r428638813", "createdAt": "2020-05-21T13:06:03Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.StreamSupport;\n+import javax.annotation.Nullable;\n+import javax.inject.Provider;\n+import org.joda.time.Instant;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private WorkspaceService workspaceService;\n+  public static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMTkzMA=="}, "originalCommit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTU0NzMyOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1OTozNlrOGYx2CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1OTozNlrOGYx2CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNTY1Nw==", "bodyText": "This is the first attempt at the more generic date & time handling. Maps to Joda DateTime in Java and Date in TypeScript.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r428635657", "createdAt": "2020-05-21T12:59:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7305,93 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop\n+      high-level queries with a better semantic mapping to the concepts and rules\n+      governing them, which is why a freeform queryMetadata field is tolerable for\n+      now.\n+    required:\n+    - logEntries\n+    - queryMetadata\n+    properties:\n+      logEntries:\n+        type: array\n+        items:\n+          \"$ref\": \"#/definitions/AuditLogEntry\"\n+      queryMetadata:\n+        description: >\n+          Since the audit system uses SQL database IDs and the rest of hte API layer\n+          does not, it's helpful to return additional properties in order to assist\n+          the client in interpreting the results.\n+        type: object\n+        additionalProperties: true\n+  AuditLogEntry:\n+    description: >\n+      Representation of the BigQuery Audit Log entry, post-translation from Stackdriver logging.\n+      All fields are treated as optional here, as there are no non-null constraints in the BigQery\n+      dataset.\n+\n+      It's possible that due to some error now or in the past that some columns might not match\n+      their expected values, though we take pains to avoid that. Regardless, nothing in this type\n+      definition is stricter than the BigQuery schema.\n+    type: object\n+    properties:\n+      actionId:\n+        description: Unique ID for this action. Used for grouping similar events under a\n+          single action, though in this representation we're returning a straight list of rows.\n+        type: string\n+        format: uuid\n+      actionType:\n+        description: >\n+          Defines what action is taking place in this event. (There can be several ACTION_TYPEs\n+          in a single Action assigned to different events. String representation of the ActionType\n+          enum (not generated).\n+        type: string\n+      agentId:\n+        description: >\n+          ID for the Agent (typically a User). If there's a SQL table for this agent type,\n+          this this is the PK for that table (e.g. user_id).\n+        type: integer\n+        format: int64\n+      agentUsername:\n+        description: >\n+          Username of the user or administrator taking the action. This is the agent_email column\n+          in BigQuery.\n+        type: string\n+        format: email\n+      agentType:\n+        description: >\n+          A member of the org.pmiops.workbench.actionaudit.AgentType enum (not generated). Since\n+          this is typed as a string in BigQuery (and not constrained to that type), we don't try\n+          to narrow the type in the admin API.\n+        type: string\n+      eventTime:\n+        description: >\n+          Timestamp recorded at time of the event. Called timestamp in the BigQuery table.\n+        type: string\n+        format: date-time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzIwMTYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo0Mzo0MlrOGZVvPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMzoxNTozMlrOGZlw7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyMzc0Mg==", "bodyText": "Maybe add some validation for checking a max limit on amount of AuditLogEntry that can be requested to keep OOM errors from happening on GAE. My assumption is that these audit tables can become large over time.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429223742", "createdAt": "2020-05-22T12:43:42Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE'\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"\n+          + \"LIMIT %d\";\n+\n+  public ActionAuditQueryServiceImpl(\n+      BigQueryService bigQueryService, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public AuditLogEntriesResponse queryEventsForWorkspace(long workspaceDatabaseId, long limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4NjMxNw==", "bodyText": "You mean at the service level? Sure. Maybe 1000 would work. Beyond that we'd need pagination, which is simple here since it only grows by appending.\nAuditable events are relatively rare, and the ending should be restricted to admin users.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429486317", "createdAt": "2020-05-22T23:15:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE'\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"\n+          + \"LIMIT %d\";\n+\n+  public ActionAuditQueryServiceImpl(\n+      BigQueryService bigQueryService, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public AuditLogEntriesResponse queryEventsForWorkspace(long workspaceDatabaseId, long limit) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyMzc0Mg=="}, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzIzMDc1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo1MzowNFrOGZWAdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMzoxMjozOVrOGZlvSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyODE0OA==", "bodyText": "Would it be useful for the client to be able to request a different ordering? Maybe a date range of audit logs?", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429228148", "createdAt": "2020-05-22T12:53:04Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE'\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4NTg5Nw==", "bodyText": "Definitely. The plan is to take in severe optional quiet params. I thought this was a reasonable stopping point until we design the UI. Happy to add them now though.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429485897", "createdAt": "2020-05-22T23:12:39Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE'\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyODE0OA=="}, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI1OTA0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzowMjozNFrOGZWSPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMTo0Mzo0MlrOGZmy5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMjcwMw==", "bodyText": "I would use a named parameter for any values injected from the client. We use the QueryParameterUtil  to help with this in CB land. Example: \n  \n    \n      workbench/api/src/main/java/org/pmiops/workbench/cohortbuilder/SearchGroupItemQueryBuilder.java\n    \n    \n         Line 401\n      in\n      c516872\n    \n    \n    \n    \n\n        \n          \n           QueryParameterUtil.addQueryParameterValue(", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429232703", "createdAt": "2020-05-22T13:02:34Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwMzIwNg==", "bodyText": "Brilliant! I was wondering what those were for.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429503206", "createdAt": "2020-05-23T01:43:42Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMjcwMw=="}, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI2MTUzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzowMzoxN1rOGZWTsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzowMzoxN1rOGZWTsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMzA3Mg==", "bodyText": "Nice. I like this pattern.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429233072", "createdAt": "2020-05-22T13:03:17Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE'\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"\n+          + \"LIMIT %d\";\n+\n+  public ActionAuditQueryServiceImpl(\n+      BigQueryService bigQueryService, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public AuditLogEntriesResponse queryEventsForWorkspace(long workspaceDatabaseId, long limit) {\n+    final ActionAuditConfig actionAuditConfig = workbenchConfigProvider.get().actionAudit;\n+    final String fullyQualifiedTableName =\n+        String.format(\n+            \"`%s.%s.%s`\",\n+            workbenchConfigProvider.get().server.projectId,\n+            actionAuditConfig.bigQueryDataset,\n+            actionAuditConfig.bigQueryTable);\n+\n+    final String queryString =\n+        String.format(\n+            WORKSPACE_EVENTS_QUERY_STRING_FORMAT,\n+            fullyQualifiedTableName,\n+            workspaceDatabaseId,\n+            limit);\n+    final QueryJobConfiguration queryJobConfiguration =\n+        QueryJobConfiguration.newBuilder(queryString).setUseLegacySql(false).build();\n+\n+    final TableResult tableResult = bigQueryService.executeQuery(queryJobConfiguration);\n+\n+    // Transform all results on all pages.\n+    final List<AuditLogEntry> logEntries =\n+        StreamSupport.stream(tableResult.iterateAll().spliterator(), false)\n+            .map(this::fieldValueListToAditLogEntry)\n+            .collect(ImmutableList.toImmutableList());\n+\n+    final ImmutableMap<String, String> metadata =\n+        ImmutableMap.of(\n+            \"workspaceDatabaseId\", Long.toString(workspaceDatabaseId), \"query\", queryString);\n+\n+    return new AuditLogEntriesResponse().logEntries(logEntries).queryMetadata(metadata);\n+  }\n+\n+  private AuditLogEntry fieldValueListToAditLogEntry(FieldValueList row) {\n+    final AuditLogEntry entry = new AuditLogEntry();\n+    FieldValues.getString(row, \"action_id\").ifPresent(entry::setActionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI3MzE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzowNzoyNlrOGZWa-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDowMToxMFrOGafrfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNDkzOQ==", "bodyText": "Nice. BigQueryService is doing something similar to this class. I think we could move this functionality into the BigQueryService and replace it's methods that are very similar, like getString(List row, int index), getBoolean(List row, int index).. etc.\n\n  \n    \n      workbench/api/src/main/java/org/pmiops/workbench/api/BigQueryService.java\n    \n    \n         Line 126\n      in\n      c516872\n    \n    \n    \n    \n\n        \n          \n           public String getString(List<FieldValue> row, int index) {", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429234939", "createdAt": "2020-05-22T13:07:26Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4NjYwNg==", "bodyText": "Yeah. I kinda like static helpers to live in a class named after the thing, and don't really expect static methods on services. But if you only need this when you already have BigQueryService, that makes sense too.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429486606", "createdAt": "2020-05-22T23:17:29Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNDkzOQ=="}, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQzNTE5OA==", "bodyText": "I decided to stick with a utility class so that I can use the methods inside an enum class (which can't inject BigQueryService). There are no dependencies on BigQuery itself.\nHowever, I've pretty much abandoned my enum idea that would've required these be static. I put a TODO in to tackle this in the next go-round.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r430435198", "createdAt": "2020-05-26T14:01:10Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNDkzOQ=="}, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI4MDU5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxMDowOVrOGZWf2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMzoyMDozNFrOGZl0Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNjE4NQ==", "bodyText": "Is this method useful outside of ActionAuditQueryServiceTest? Otherwise i would move this and the method above into the test itself.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429236185", "createdAt": "2020-05-22T13:10:09Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {\n+\n+  public static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  private FieldValues() {}\n+\n+  /** Return an Optional<FieldValue> which is empty if the value is null and present if not. */\n+  public static Optional<FieldValue> getOptional(FieldValueList row, String fieldName) {\n+    final FieldValue value = row.get(fieldName);\n+    if (value.isNull()) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(value);\n+    }\n+  }\n+\n+  public static Optional<String> getString(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getStringValue);\n+  }\n+\n+  public static Optional<Long> getLong(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getLongValue);\n+  }\n+\n+  public static Optional<Long> getTimestampMicroseconds(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getTimestampValue);\n+  }\n+\n+  public static Optional<DateTime> getDateTime(FieldValueList row, String fieldName) {\n+    return getTimestampMicroseconds(row, fieldName)\n+        .map(micro -> micro / MICROSECONDS_IN_MILLISECOND)\n+        .map(DateTime::new);\n+  }\n+\n+  public static FieldValue toPrimitiveFieldValue(Object value) {\n+    return FieldValue.of(Attribute.PRIMITIVE, value);\n+  }\n+\n+  public static FieldValueList buildFieldValueList(FieldList schemaFieldList, List<Object> values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4NzExNA==", "bodyText": "Yes. It's useful anytime you want to construct a BQ result. I can make another utility class for these.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429487114", "createdAt": "2020-05-22T23:20:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {\n+\n+  public static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  private FieldValues() {}\n+\n+  /** Return an Optional<FieldValue> which is empty if the value is null and present if not. */\n+  public static Optional<FieldValue> getOptional(FieldValueList row, String fieldName) {\n+    final FieldValue value = row.get(fieldName);\n+    if (value.isNull()) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(value);\n+    }\n+  }\n+\n+  public static Optional<String> getString(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getStringValue);\n+  }\n+\n+  public static Optional<Long> getLong(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getLongValue);\n+  }\n+\n+  public static Optional<Long> getTimestampMicroseconds(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getTimestampValue);\n+  }\n+\n+  public static Optional<DateTime> getDateTime(FieldValueList row, String fieldName) {\n+    return getTimestampMicroseconds(row, fieldName)\n+        .map(micro -> micro / MICROSECONDS_IN_MILLISECOND)\n+        .map(DateTime::new);\n+  }\n+\n+  public static FieldValue toPrimitiveFieldValue(Object value) {\n+    return FieldValue.of(Attribute.PRIMITIVE, value);\n+  }\n+\n+  public static FieldValueList buildFieldValueList(FieldList schemaFieldList, List<Object> values) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNjE4NQ=="}, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI4MzQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxMDo1OVrOGZWheQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMzoxOToxMVrOGZlzIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNjYwMQ==", "bodyText": "Could be private since nothing is accessing this method outside of this class.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429236601", "createdAt": "2020-05-22T13:10:59Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {\n+\n+  public static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  private FieldValues() {}\n+\n+  /** Return an Optional<FieldValue> which is empty if the value is null and present if not. */\n+  public static Optional<FieldValue> getOptional(FieldValueList row, String fieldName) {\n+    final FieldValue value = row.get(fieldName);\n+    if (value.isNull()) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(value);\n+    }\n+  }\n+\n+  public static Optional<String> getString(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getStringValue);\n+  }\n+\n+  public static Optional<Long> getLong(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getLongValue);\n+  }\n+\n+  public static Optional<Long> getTimestampMicroseconds(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getTimestampValue);\n+  }\n+\n+  public static Optional<DateTime> getDateTime(FieldValueList row, String fieldName) {\n+    return getTimestampMicroseconds(row, fieldName)\n+        .map(micro -> micro / MICROSECONDS_IN_MILLISECOND)\n+        .map(DateTime::new);\n+  }\n+\n+  public static FieldValue toPrimitiveFieldValue(Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4Njg4MQ==", "bodyText": "I think it could be useful for testing. I'll annotate it visiblefortesting or make it private.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429486881", "createdAt": "2020-05-22T23:19:11Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {\n+\n+  public static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  private FieldValues() {}\n+\n+  /** Return an Optional<FieldValue> which is empty if the value is null and present if not. */\n+  public static Optional<FieldValue> getOptional(FieldValueList row, String fieldName) {\n+    final FieldValue value = row.get(fieldName);\n+    if (value.isNull()) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(value);\n+    }\n+  }\n+\n+  public static Optional<String> getString(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getStringValue);\n+  }\n+\n+  public static Optional<Long> getLong(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getLongValue);\n+  }\n+\n+  public static Optional<Long> getTimestampMicroseconds(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getTimestampValue);\n+  }\n+\n+  public static Optional<DateTime> getDateTime(FieldValueList row, String fieldName) {\n+    return getTimestampMicroseconds(row, fieldName)\n+        .map(micro -> micro / MICROSECONDS_IN_MILLISECOND)\n+        .map(DateTime::new);\n+  }\n+\n+  public static FieldValue toPrimitiveFieldValue(Object value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNjYwMQ=="}, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzI5NjQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNTowN1rOGZWpgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQyMzoxNzo1NlrOGZlyYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODY1OA==", "bodyText": "Also, since this reusable can we add methods for all the possible BQ sql types?", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429238658", "createdAt": "2020-05-22T13:15:07Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {\n+\n+  public static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  private FieldValues() {}\n+\n+  /** Return an Optional<FieldValue> which is empty if the value is null and present if not. */\n+  public static Optional<FieldValue> getOptional(FieldValueList row, String fieldName) {\n+    final FieldValue value = row.get(fieldName);\n+    if (value.isNull()) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(value);\n+    }\n+  }\n+\n+  public static Optional<String> getString(FieldValueList row, String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQ4NjY5MQ==", "bodyText": "If you give a mouse a \ud83c\udf6a...", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429486691", "createdAt": "2020-05-22T23:17:56Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {\n+\n+  public static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  private FieldValues() {}\n+\n+  /** Return an Optional<FieldValue> which is empty if the value is null and present if not. */\n+  public static Optional<FieldValue> getOptional(FieldValueList row, String fieldName) {\n+    final FieldValue value = row.get(fieldName);\n+    if (value.isNull()) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(value);\n+    }\n+  }\n+\n+  public static Optional<String> getString(FieldValueList row, String fieldName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODY1OA=="}, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTU4MDY4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyMjoyN1rOGbMmgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowOToyMFrOGbXL2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MTIwMw==", "bodyText": "Why use an enum rather than a series of string constants? Is this more or less just a way to semantically group this set of constants?", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431171203", "createdAt": "2020-05-27T14:22:27Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.joda.time.DateTime;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  enum Parameters {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NDYwMw==", "bodyText": "Yes. Originally I was thinking we'd have all the column names as enum constants too and have some slick metadata to help. With ~5 parameters it's borderline helpful.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431344603", "createdAt": "2020-05-27T18:09:20Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.joda.time.DateTime;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  enum Parameters {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MTIwMw=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTU5MDkxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyNDozMlrOGbMtAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxMDo1NFrOGbXPow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3Mjg2Nw==", "bodyText": "The database ID is one of the inputs to this method... it seems redundant / unnecessary to be returning that value.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431172867", "createdAt": "2020-05-27T14:24:32Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.joda.time.DateTime;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  enum Parameters {\n+    LIMIT(\"limit\"),\n+    WORKSPACE_DB_ID(\"workspace_db_id\"),\n+    AFTER_INCLUSIVE(\"after_inclusive\"),\n+    BEFORE_EXCLUSIVE(\"before_exclusive\");\n+\n+    private String name;\n+\n+    Parameters(String name) {\n+      this.name = name;\n+    }\n+\n+    public String getName() {\n+      return name;\n+    }\n+  }\n+\n+  private final BigQueryService bigQueryService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  private static final long MAX_QUERY_LIMIT = 1000L;\n+  // The table name can't be in a QueryParameterValue, so we substitute it with String.format()\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = @workspace_db_id AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE' AND\\n\"\n+          + \"  @after_inclusive <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) AND\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before_exclusive\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"\n+          + \"LIMIT @limit\";\n+\n+  public ActionAuditQueryServiceImpl(\n+      BigQueryService bigQueryService, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public AuditLogEntriesResponse queryEventsForWorkspace(\n+      long workspaceDatabaseId, long limit, DateTime afterInclusive, DateTime beforeExclusive) {\n+    final ActionAuditConfig actionAuditConfig = workbenchConfigProvider.get().actionAudit;\n+    final String fullyQualifiedTableName =\n+        String.format(\n+            \"`%s.%s.%s`\",\n+            workbenchConfigProvider.get().server.projectId,\n+            actionAuditConfig.bigQueryDataset,\n+            actionAuditConfig.bigQueryTable);\n+\n+    final String queryString =\n+        String.format(WORKSPACE_EVENTS_QUERY_STRING_FORMAT, fullyQualifiedTableName);\n+\n+    final QueryJobConfiguration queryJobConfiguration =\n+        QueryJobConfiguration.newBuilder(queryString)\n+            .setNamedParameters(\n+                ImmutableMap.of(\n+                    Parameters.WORKSPACE_DB_ID.getName(),\n+                        QueryParameterValue.int64(workspaceDatabaseId),\n+                    Parameters.LIMIT.getName(),\n+                        QueryParameterValue.int64(Math.max(limit, MAX_QUERY_LIMIT)),\n+                    Parameters.AFTER_INCLUSIVE.getName(),\n+                        QueryParameterValue.timestamp(\n+                            afterInclusive.getMillis() * MICROSECONDS_IN_MILLISECOND),\n+                    Parameters.BEFORE_EXCLUSIVE.getName(),\n+                        QueryParameterValue.timestamp(\n+                            beforeExclusive.getMillis() * MICROSECONDS_IN_MILLISECOND)))\n+            .build();\n+\n+    final TableResult tableResult = bigQueryService.executeQuery(queryJobConfiguration);\n+\n+    final List<AuditLogEntry> logEntries =\n+        StreamSupport.stream(tableResult.iterateAll().spliterator(), false)\n+            .map(this::fieldValueListToAditLogEntry)\n+            .collect(ImmutableList.toImmutableList());\n+\n+    final ImmutableMap<String, String> metadata =\n+        ImmutableMap.of(\n+            \"workspaceDatabaseId\", Long.toString(workspaceDatabaseId),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NTU3MQ==", "bodyText": "That's true, in that we could fill it in in the controller. But then I need one more type if I'm also going to return the query, or I need to mutate the returned value (which I guess is OK).", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431345571", "createdAt": "2020-05-27T18:10:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.joda.time.DateTime;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  enum Parameters {\n+    LIMIT(\"limit\"),\n+    WORKSPACE_DB_ID(\"workspace_db_id\"),\n+    AFTER_INCLUSIVE(\"after_inclusive\"),\n+    BEFORE_EXCLUSIVE(\"before_exclusive\");\n+\n+    private String name;\n+\n+    Parameters(String name) {\n+      this.name = name;\n+    }\n+\n+    public String getName() {\n+      return name;\n+    }\n+  }\n+\n+  private final BigQueryService bigQueryService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  private static final long MAX_QUERY_LIMIT = 1000L;\n+  // The table name can't be in a QueryParameterValue, so we substitute it with String.format()\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = @workspace_db_id AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE' AND\\n\"\n+          + \"  @after_inclusive <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) AND\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before_exclusive\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"\n+          + \"LIMIT @limit\";\n+\n+  public ActionAuditQueryServiceImpl(\n+      BigQueryService bigQueryService, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public AuditLogEntriesResponse queryEventsForWorkspace(\n+      long workspaceDatabaseId, long limit, DateTime afterInclusive, DateTime beforeExclusive) {\n+    final ActionAuditConfig actionAuditConfig = workbenchConfigProvider.get().actionAudit;\n+    final String fullyQualifiedTableName =\n+        String.format(\n+            \"`%s.%s.%s`\",\n+            workbenchConfigProvider.get().server.projectId,\n+            actionAuditConfig.bigQueryDataset,\n+            actionAuditConfig.bigQueryTable);\n+\n+    final String queryString =\n+        String.format(WORKSPACE_EVENTS_QUERY_STRING_FORMAT, fullyQualifiedTableName);\n+\n+    final QueryJobConfiguration queryJobConfiguration =\n+        QueryJobConfiguration.newBuilder(queryString)\n+            .setNamedParameters(\n+                ImmutableMap.of(\n+                    Parameters.WORKSPACE_DB_ID.getName(),\n+                        QueryParameterValue.int64(workspaceDatabaseId),\n+                    Parameters.LIMIT.getName(),\n+                        QueryParameterValue.int64(Math.max(limit, MAX_QUERY_LIMIT)),\n+                    Parameters.AFTER_INCLUSIVE.getName(),\n+                        QueryParameterValue.timestamp(\n+                            afterInclusive.getMillis() * MICROSECONDS_IN_MILLISECOND),\n+                    Parameters.BEFORE_EXCLUSIVE.getName(),\n+                        QueryParameterValue.timestamp(\n+                            beforeExclusive.getMillis() * MICROSECONDS_IN_MILLISECOND)))\n+            .build();\n+\n+    final TableResult tableResult = bigQueryService.executeQuery(queryJobConfiguration);\n+\n+    final List<AuditLogEntry> logEntries =\n+        StreamSupport.stream(tableResult.iterateAll().spliterator(), false)\n+            .map(this::fieldValueListToAditLogEntry)\n+            .collect(ImmutableList.toImmutableList());\n+\n+    final ImmutableMap<String, String> metadata =\n+        ImmutableMap.of(\n+            \"workspaceDatabaseId\", Long.toString(workspaceDatabaseId),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3Mjg2Nw=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTU5OTM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyNjoxM1rOGbMyfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxMTozNlrOGbXRIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NDI2OA==", "bodyText": "Please document new config fields with a comment line. In particular it would be useful to note that these are not in any way connected with writing action audit logs, only with querying them. And maybe to include a pointer to the doc, RW ticket, etc. that describes how this dataset is populated.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431174268", "createdAt": "2020-05-27T14:26:13Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -249,6 +249,8 @@ public String freeTierBillingAccountName() {\n \n   public static class ActionAuditConfig {\n     public String logName;\n+    public String bigQueryDataset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NTk1Mg==", "bodyText": "That's a good point.  I forgot there was a place to hang comments.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431345952", "createdAt": "2020-05-27T18:11:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -249,6 +249,8 @@ public String freeTierBillingAccountName() {\n \n   public static class ActionAuditConfig {\n     public String logName;\n+    public String bigQueryDataset;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NDI2OA=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTYxNzY5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyOToyNlrOGbM-PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyOToyNlrOGbM-PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NzI3Nw==", "bodyText": "nit: I'm not sure the inclusive / exclusive wording is worth including here. It's a useful implementation note / comment on the API, but given that these audit events are not high-frequency, and the timestamp comparison is in milliseconds, the open / closed interval doesn't have much impact on usage.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431177277", "createdAt": "2020-05-27T14:29:26Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryService.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import org.joda.time.DateTime;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+\n+public interface ActionAuditQueryService {\n+  AuditLogEntriesResponse queryEventsForWorkspace(\n+      long workspaceDatabaseId, long limit, DateTime afterInclusive, DateTime beforeExclusive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjAzNzE5OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0NjoxNFrOGbRJdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDowNDozOFrOGb2rbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NTY4NA==", "bodyText": "API design nit: it's probably more consistent and neater to treat the audit logs as a subcollection within the admin/workspaces/{workspaceNamespace}/ resource (similar to how we've done cloudStorageTraffic).\nI can see it going both ways, though \u2013\u00a0was there a strong reason to treat \"audit\" as the higher-level entry in the hierarchy?\n(Generally speaking, I'm trying to do my best to model after https://cloud.google.com/apis/design/resource_names where possible in new APIs and methods.)", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431245684", "createdAt": "2020-05-27T15:46:14Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMzOTE3OQ==", "bodyText": "There could certainly be useful queries that involve both a user and a workspace (or various numbers of them). Though I don't know I've left room for that.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431339179", "createdAt": "2020-05-27T17:59:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NTY4NA=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg0MzQ4OQ==", "bodyText": "Makes sense, but it sounds a bit like YAGNI, as I don't know of any concrete use cases that would lead us to include such a query in the API.\nOn the balance, I think aligning with the existing collection hierarchy will be clearer and more consistent with existing API paths.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431843489", "createdAt": "2020-05-28T13:42:03Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NTY4NA=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg2MDU4OQ==", "bodyText": "That's fine I guess. I didn't want to be married to the namespace as the identifier though, which was the other reason for preferring query params.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431860589", "createdAt": "2020-05-28T14:04:38Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NTY4NA=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjA0MjM3OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0NzoxN1rOGbRMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0NzoxN1rOGbRMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NjQ3NQ==", "bodyText": "nit: remove first-person from description field.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431246475", "createdAt": "2020-05-27T15:47:17Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":\n+    get:\n+      tags:\n+        - workspaceAdmin\n+      description: 'Fetch audit logs involving this workspace as either a subject or object.'\n+      operationId: getAuditLogEntries\n+      parameters:\n+        - name: workspaceNamespace\n+          in: query\n+          type: string\n+          required: true\n+          description: >\n+            Firecloud Namespace for the AoU workspace to be queried.\n+        - name: limit\n+          in: query\n+          type: integer\n+          required: false\n+          default: 100\n+          description: >\n+            Maximum number of entries to return, sorted by timestamp descending.\n+        - name: afterInclusive\n+          description: >\n+            Earliest time matched by the query (inclusive). Epoch millis.\n+\n+            Note that while Swagger allows a date-time formatted string query parameter,\n+            it appears Spring doesn't handle that well today. I ran into this issue:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjA0ODY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTo0ODozM1rOGbRQZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODowMjowM1rOGbW8PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NzQ2Mw==", "bodyText": "What does \"Declared as a string\" mean here? This is type: integer and format:int64. Is this a commentary on how Swagger-codegen handles this type of parameter? If so, is it related to the client side or the server side?", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431247463", "createdAt": "2020-05-27T15:48:33Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":\n+    get:\n+      tags:\n+        - workspaceAdmin\n+      description: 'Fetch audit logs involving this workspace as either a subject or object.'\n+      operationId: getAuditLogEntries\n+      parameters:\n+        - name: workspaceNamespace\n+          in: query\n+          type: string\n+          required: true\n+          description: >\n+            Firecloud Namespace for the AoU workspace to be queried.\n+        - name: limit\n+          in: query\n+          type: integer\n+          required: false\n+          default: 100\n+          description: >\n+            Maximum number of entries to return, sorted by timestamp descending.\n+        - name: afterInclusive\n+          description: >\n+            Earliest time matched by the query (inclusive). Epoch millis.\n+\n+            Note that while Swagger allows a date-time formatted string query parameter,\n+            it appears Spring doesn't handle that well today. I ran into this issue:\n+            https://github.com/swagger-api/swagger-codegen/issues/4113 and decided a long\n+            is good enough for now.\n+          in: query\n+          type: integer\n+          format: int64\n+          required: false\n+          default: 0\n+        - name: beforeExclusive\n+          description: >\n+             Upper bound on timestamp of most recent result (exclusive). Specified as milliseconds since Epoch\n+             (though declared as a string). Defaults to current timestamp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MDYwNQ==", "bodyText": "OK. I need to update this one. There's a Spring bug where it doesn't really handle string timestamps correctly, so I changed it back to a long but neglected to update the description.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431340605", "createdAt": "2020-05-27T18:02:03Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":\n+    get:\n+      tags:\n+        - workspaceAdmin\n+      description: 'Fetch audit logs involving this workspace as either a subject or object.'\n+      operationId: getAuditLogEntries\n+      parameters:\n+        - name: workspaceNamespace\n+          in: query\n+          type: string\n+          required: true\n+          description: >\n+            Firecloud Namespace for the AoU workspace to be queried.\n+        - name: limit\n+          in: query\n+          type: integer\n+          required: false\n+          default: 100\n+          description: >\n+            Maximum number of entries to return, sorted by timestamp descending.\n+        - name: afterInclusive\n+          description: >\n+            Earliest time matched by the query (inclusive). Epoch millis.\n+\n+            Note that while Swagger allows a date-time formatted string query parameter,\n+            it appears Spring doesn't handle that well today. I ran into this issue:\n+            https://github.com/swagger-api/swagger-codegen/issues/4113 and decided a long\n+            is good enough for now.\n+          in: query\n+          type: integer\n+          format: int64\n+          required: false\n+          default: 0\n+        - name: beforeExclusive\n+          description: >\n+             Upper bound on timestamp of most recent result (exclusive). Specified as milliseconds since Epoch\n+             (though declared as a string). Defaults to current timestamp.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NzQ2Mw=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjE4NTkzOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxNTo1MVrOGbSnjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzozNDoxNFrOGb1TNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2OTc3NA==", "bodyText": "I'm generally not a fan of unspecified objects / fields in APIs. There really isn't too much additional cost in specifying field names and types, and IMO there's a huge benefit in API specificity.\nThere's also no other use of \"additionalProperties\" in this file, which suggests an argument by consistency, that we have a strong pattern to fully specify our API response objects.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431269774", "createdAt": "2020-05-27T16:15:51Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7329,95 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop\n+      high-level queries with a better semantic mapping to the concepts and rules\n+      governing them, which is why a freeform queryMetadata field is tolerable for\n+      now.\n+    required:\n+    - logEntries\n+    - queryMetadata\n+    properties:\n+      logEntries:\n+        type: array\n+        items:\n+          \"$ref\": \"#/definitions/AuditLogEntry\"\n+      queryMetadata:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0MzgwNA==", "bodyText": "I generally agree. There's a historical problem here, because the audit system uses the DB id and the API does not.\nThe reason to do it here is to allow reusing the response object with several different kinds of queries. For example, the user query endpoint might take in a user ID, but the output is in terms of the database identifier.\nNow, in the special case of this query, the DB ID is easy to extract from the result set, since it only shows up in one column. In the case of hte User query, I'm probably going to include both rows where the user is the agent as well as the target, so it's not obvious which ID should be used.\nThe client will likely be interested in distinguishing which column is describing the user in question.\nNow, why not just have a databaseId field for both the user and the workspace (and others)? That gets you a little way down the road, but then you can easily have queries with more than one input (in principle).\nThe best solution not involving an arbitrary map is separate response types for each query type that look very similar but all contain a list of rows. That's cheap enough I suppose.\nThe balancing factor was that this was all going to be temporary until we built more high-level \"storytelling\" APIs for different types of things for different use cases. But that colud be a while.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431343804", "createdAt": "2020-05-27T18:07:53Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7329,95 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop\n+      high-level queries with a better semantic mapping to the concepts and rules\n+      governing them, which is why a freeform queryMetadata field is tolerable for\n+      now.\n+    required:\n+    - logEntries\n+    - queryMetadata\n+    properties:\n+      logEntries:\n+        type: array\n+        items:\n+          \"$ref\": \"#/definitions/AuditLogEntry\"\n+      queryMetadata:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2OTc3NA=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzODAwNg==", "bodyText": "I think I like the solution in your second to last paragraph best \u2013\u00a0separate out the user-and-workspace specific response types, but use a common AuditLogEntries data definition for each.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431838006", "createdAt": "2020-05-28T13:34:14Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7329,95 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop\n+      high-level queries with a better semantic mapping to the concepts and rules\n+      governing them, which is why a freeform queryMetadata field is tolerable for\n+      now.\n+    required:\n+    - logEntries\n+    - queryMetadata\n+    properties:\n+      logEntries:\n+        type: array\n+        items:\n+          \"$ref\": \"#/definitions/AuditLogEntry\"\n+      queryMetadata:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2OTc3NA=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjIwMTQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxOTo0NlrOGbSxuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoxOTo0NlrOGbSxuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MjM3Ng==", "bodyText": "This comment might feel better placed in a design document or Jira ticket rather than API documentation.\nI'm not sure I fully understand why this is considered a stopgap \u2013\u00a0can you give any examples of higher-level queries or semantic mapping that you would want to build? From my viewpoint, it covers just about everything I would have imagined we'd want for the admin pages.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431272376", "createdAt": "2020-05-27T16:19:46Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7329,95 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjIwMzcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoyMDoxOVrOGbSzIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoyMDoxOVrOGbSzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MjczOQ==", "bodyText": "Thanks for the detailed documentation on these fields! Super helpful.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431272739", "createdAt": "2020-05-27T16:20:19Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7329,95 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop\n+      high-level queries with a better semantic mapping to the concepts and rules\n+      governing them, which is why a freeform queryMetadata field is tolerable for\n+      now.\n+    required:\n+    - logEntries\n+    - queryMetadata\n+    properties:\n+      logEntries:\n+        type: array\n+        items:\n+          \"$ref\": \"#/definitions/AuditLogEntry\"\n+      queryMetadata:\n+        description: >\n+          Since the audit system uses SQL database IDs and the rest of hte API layer\n+          does not, it's helpful to return additional properties in order to assist\n+          the client in interpreting the results.\n+        type: object\n+        additionalProperties: true\n+  AuditLogEntry:\n+    description: >\n+      Representation of the BigQuery Audit Log entry, post-translation from Stackdriver logging.\n+      All fields are treated as optional here, as there are no non-null constraints in the BigQery\n+      dataset.\n+\n+      It's possible that due to some error now or in the past that some columns might not match\n+      their expected values, though we take pains to avoid that. Regardless, nothing in this type\n+      definition is stricter than the BigQuery schema.\n+    type: object\n+    properties:\n+      actionId:\n+        description: Unique ID for this action. Used for grouping similar events under a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2706, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}