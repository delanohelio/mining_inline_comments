{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTg5NjU2", "number": 3457, "title": "[risk=no][RW-4678]Followup: don't spam logs and make proper float comparisons", "bodyText": "Description:\nThe motivation for this change was seeing a large number of logs like this:\nUser [redacted] has 4.041393 in total free tier spending in BigQuery, which is less than the 4.041393 previous spending we have recorded in the DB (FreeTierBillingService.java:182)\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-04-22T22:59:02Z", "url": "https://github.com/all-of-us/workbench/pull/3457", "merged": true, "mergeCommit": {"oid": "325e6d2e00d04cac4312204611b6d4bd158412d2"}, "closed": true, "closedAt": "2020-04-23T17:21:48Z", "author": {"login": "jmthibault79"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaQMItgH2gAyNDA3NTg5NjU2OjM4YTc3Y2FmZDg3ZTA1MzJmODliN2Y3YzVkMWI1MTM5MTY4ZjkwOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcagEO_AFqTM5OTMwNjI1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "38a77cafd87e0532f89b7f7c5d1b5139168f9096", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/38a77cafd87e0532f89b7f7c5d1b5139168f9096", "committedDate": "2020-04-22T22:39:51Z", "message": "only log anomalies withinCostTolerance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "440a34c9de7a1c005ff0a56ead985087329a7fc7", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/440a34c9de7a1c005ff0a56ead985087329a7fc7", "committedDate": "2020-04-22T22:49:03Z", "message": "lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MDQ3MjE1", "url": "https://github.com/all-of-us/workbench/pull/3457#pullrequestreview-399047215", "createdAt": "2020-04-23T12:26:47Z", "commit": {"oid": "440a34c9de7a1c005ff0a56ead985087329a7fc7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyNjo0OFrOGKmoUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyNzo1MFrOGKmq5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MTg1OA==", "bodyText": "Please check if there's a library function for this. As excited as I am to see actual math for the first time in 2020, we shouldn't be doing it this way. If we keep this, we probably need to make a constant out of the tolerance.\nAdditionally, why are we using doubles instead of a Currency class?", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413771858", "createdAt": "2020-04-23T12:26:48Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -151,6 +151,12 @@ private void sendAlertsForCostThresholds(\n         });\n   }\n \n+  // are these two cost values approximately equal?\n+  // used to determine whether we should log anomalies\n+  private boolean withinCostTolerance(double currentCost, double previousCost) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440a34c9de7a1c005ff0a56ead985087329a7fc7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MjUxOA==", "bodyText": "Let's see if we can add an audit entry for this, since it's more user-oriented than system- or application-oriented.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413772518", "createdAt": "2020-04-23T12:27:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -170,7 +176,10 @@ private void maybeAlertOnCostThresholds(\n \n     // this shouldn't happen, but it did (RW-4678)\n     // alert if it happens again\n-    if (currentCost < previousCost) {\n+    if (currentCost < previousCost\n+        &&\n+        // was logging many false positives\n+        !withinCostTolerance(currentCost, previousCost)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440a34c9de7a1c005ff0a56ead985087329a7fc7"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d520d0c749740f4c50eae8dd959af149c9682c04", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/d520d0c749740f4c50eae8dd959af149c9682c04", "committedDate": "2020-04-23T15:11:18Z", "message": "proper double math"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjExODU2", "url": "https://github.com/all-of-us/workbench/pull/3457#pullrequestreview-399211856", "createdAt": "2020-04-23T15:23:43Z", "commit": {"oid": "d520d0c749740f4c50eae8dd959af149c9682c04"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToyMzo0M1rOGKt_qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo0ODoxMFrOGKvNBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5MjUyMg==", "bodyText": "I wrote a little utility class for this so you don't have to remember the convention. org.pmiops.workbench.utils.Comparables\nIf you wanted to use it here, you'd need to have a little Comparable class wrapping the fuzzyCompare method. Assuming the convention is the same. I think you'd have make a comparable FuzzyCost class to wrap Double or something though, so not a huge win.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413892522", "createdAt": "2020-04-23T15:23:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -123,8 +128,16 @@ public void checkFreeTierBillingUsage() {\n     sendAlertsForCostThresholds(usersToThresholdCheck, previousUserCosts, userCosts);\n   }\n \n+  private int compareCosts(final double a, final double b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d520d0c749740f4c50eae8dd959af149c9682c04"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMjMyNw==", "bodyText": "There's probably a way to figure this out based on use cases. I know from geometry angle and linear tolerance are different too. This is probably OK.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413912327", "createdAt": "2020-04-23T15:48:10Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -46,6 +47,10 @@\n \n   private static final Logger logger = Logger.getLogger(FreeTierBillingService.class.getName());\n \n+  // somewhat arbitrary\n+  private static final double COST_COMPARISON_TOLERANCE = 0.0001;\n+  private static final double COST_FRACTION_TOLERANCE = 0.0001;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d520d0c749740f4c50eae8dd959af149c9682c04"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbb76ee49ce1646aa02ae94a5230766120421bb1", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/dbb76ee49ce1646aa02ae94a5230766120421bb1", "committedDate": "2020-04-23T16:49:36Z", "message": "Decrease tolerance to catch one-cent changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8ab071aca51ffb294c3d6d8abd7e1b34015274d", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/d8ab071aca51ffb294c3d6d8abd7e1b34015274d", "committedDate": "2020-04-23T16:55:27Z", "message": "tighter tolerances exposed a bad test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzA1NTUy", "url": "https://github.com/all-of-us/workbench/pull/3457#pullrequestreview-399305552", "createdAt": "2020-04-23T17:08:49Z", "commit": {"oid": "d8ab071aca51ffb294c3d6d8abd7e1b34015274d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowODo0OVrOGKy6xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowODo0OVrOGKy6xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3MzE4OA==", "bodyText": "copypaste.  this test uses different thresholds.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413973188", "createdAt": "2020-04-23T17:08:49Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "diffHunk": "@@ -241,7 +241,7 @@ public void checkFreeTierBillingUsage_altDollarThresholds() throws MessagingExce\n         .alertUserFreeTierDollarThreshold(\n             eq(user), eq(threshold), eq(costOverThreshold), eq(remaining));\n \n-    // check that we do not alert twice for the 75% threshold\n+    // check that we do not alert twice for the 65% threshold", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ab071aca51ffb294c3d6d8abd7e1b34015274d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzA2MjUy", "url": "https://github.com/all-of-us/workbench/pull/3457#pullrequestreview-399306252", "createdAt": "2020-04-23T17:09:41Z", "commit": {"oid": "d8ab071aca51ffb294c3d6d8abd7e1b34015274d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowOTo0MVrOGKy9Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowOTo0MVrOGKy9Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3Mzc5MQ==", "bodyText": "this was wrong!  but close enough due to loose tolerance.  No longer.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413973791", "createdAt": "2020-04-23T17:09:41Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "diffHunk": "@@ -555,14 +555,14 @@ public void getUserCachedFreeTierUsage() {\n     createWorkspace(user1, \"another project\");\n \n     final Map<String, Double> costs =\n-        ImmutableMap.of(SINGLE_WORKSPACE_TEST_PROJECT, 1000.0, \"another project\", 100.0);\n+        ImmutableMap.of(SINGLE_WORKSPACE_TEST_PROJECT, 1000.0, \"another project\", 200.0);\n     doReturn(mockBQTableResult(costs)).when(bigQueryService).executeQuery(any());\n \n     // we have not yet cached the new workspace costs\n     assertWithinBillingTolerance(freeTierBillingService.getCachedFreeTierUsage(user1), 100.01);\n \n     freeTierBillingService.checkFreeTierBillingUsage();\n-    final double expectedTotalCachedFreeTierUsage = 1000.0 + 100.01;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ab071aca51ffb294c3d6d8abd7e1b34015274d"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3230, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}