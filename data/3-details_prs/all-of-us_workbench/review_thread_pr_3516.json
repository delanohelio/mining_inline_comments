{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTc4ODEy", "number": 3516, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowNjoxMFrOD5JSUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoyMTowMVrOD5JmLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjQ3NTY5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowNjoxMFrOGQQL_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNDoxMTozOFrOGQrVVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NTYxMg==", "bodyText": "Nit: Should use colors variables.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r419695612", "createdAt": "2020-05-04T20:06:10Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE0MDM3NA==", "bodyText": "Ah, missed that one. Fixed.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r420140374", "createdAt": "2020-05-05T14:11:38Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NTYxMg=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjQ3OTU4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowNzoxMVrOGQQOWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxMzozNVrOGQw71w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NjIxNw==", "bodyText": "Can you type this as a React.Element or something? Just is there anything more specific than any you can use?", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r419696217", "createdAt": "2020-05-04T20:07:11Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMjE1MQ==", "bodyText": "Decided to separate into two new props and drop wizard since we were only using the type and count properties.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r420232151", "createdAt": "2020-05-05T16:13:35Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NjIxNw=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjQ4MDMxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowNzoyM1rOGQQO0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjoxNDowMVrOGTjWOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NjMzNw==", "bodyText": "Can these be typed as more specific than any?", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r419696337", "createdAt": "2020-05-04T20:07:23Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNjUwMw==", "bodyText": "Typed ageType as AttrName but not sure there's a good option for ageTypeNodes. Would need to be something like\ninterface AgeTypeNodes {\n  [AttrName.AGE]: Array<AgeTypeCount>;\n  [AttrName.AGEATCONSENT]: Array<AgeTypeCount>;\n  [AttrName.AGEATCDR]: Array<AgeTypeCount>;\n}\n\nbut it didn't like enums as the property names.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r420236503", "createdAt": "2020-05-05T16:19:55Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NjMzNw=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTI1OQ==", "bodyText": "Got it. this is probably fine for now then.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r423155259", "createdAt": "2020-05-11T16:14:01Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NjMzNw=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjQ4MTg4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowNzo1M1rOGQQPxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDowMToxNlrOGUgqsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NjU4MA==", "bodyText": "Can this be typed as React.ReactNode or something? I think we have examples of other typings of elements elsewhere in code.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r419696580", "createdAt": "2020-05-04T20:07:53Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0NzIxOQ==", "bodyText": "This is the actual slider object, so ReactNode doesn't work. We only use the get and set methods, so setting the type to\n{\n  get: Function;\n  set: Function;\n}\n\nseems to work.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r420247219", "createdAt": "2020-05-05T16:35:29Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NjU4MA=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NTY5NA==", "bodyText": "You could do a more specific typing by doing:\nget: () => TYPE\nset: (TYPE) => {}\n(I think)", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r423155694", "createdAt": "2020-05-11T16:14:42Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NjU4MA=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE1OTkyMg==", "bodyText": "Ah, nice. Changed to\n{\n  get: () => Array<string>;\n  set: (values: Array<number>) => void;\n}", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r424159922", "createdAt": "2020-05-13T04:01:16Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NjU4MA=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjQ4NDQyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowODo0M1rOGQQRbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoxMToxMVrOGQw1kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NzAwNA==", "bodyText": "I would probably rather type these as the enum itself, and then use toString at render time.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r419697004", "createdAt": "2020-05-04T20:08:43Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzMDU0NQ==", "bodyText": "Agreed. I was converting to string since they'll eventually need to be strings on the api call request, but makes more sense to use the enum here and just convert before adding to the request.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r420230545", "createdAt": "2020-05-05T16:11:11Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NzAwNA=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjQ4NDk5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDowODo1NlrOGQQR0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjoyMTo0NlrOGQxRzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NzEwNg==", "bodyText": "Is there a reason to store this as a string rather than the enum?", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r419697106", "createdAt": "2020-05-04T20:08:56Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIzNzc3NQ==", "bodyText": "Dropped  .toString() since we're converting when adding to the request now.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r420237775", "createdAt": "2020-05-05T16:21:46Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5NzEwNg=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjQ5NzgwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoxMjozN1rOGQQZpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzo1OTowNlrOGUgoxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5OTEwOA==", "bodyText": "We have a code style preference to use await here, rather than .then. I have no clue if this has been broadcast to the y'all? (I think we talked about it at the eng sync?)\nSo this could be done as:\nconst ageTypeNodes = await cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).items.reduce((acc, item) => {\nacc[item.ageType].push(item);\nreturn acc;\n}, initialValue);\nthis.setState({ageTypeNodes}, () => this.calculateAgeFromNodes());", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r419699108", "createdAt": "2020-05-04T20:12:37Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2Nzk5Mw==", "bodyText": "Ok, good to know. Is there style guide somewhere? Seems like I've heard it mentioned but don't think I've seen the doc before.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r420267993", "createdAt": "2020-05-05T17:05:17Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5OTEwOA=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NjIxMA==", "bodyText": "Yes! The style guide is here: https://github.com/all-of-us/workbench/blob/master/ui/docs/style-guide.md", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r423156210", "createdAt": "2020-05-11T16:15:31Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5OTEwOA=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE1OTQyOQ==", "bodyText": "Perfect, thanks!", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r424159429", "createdAt": "2020-05-13T03:59:06Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY5OTEwOA=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjUxODU4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoxODo0MlrOGQQmrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzowNToyOVrOGQzIRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMjQ0NA==", "bodyText": "Same as above, we want to try to prefer await statements rather than .then.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r419702444", "createdAt": "2020-05-04T20:18:42Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {\n+      const ageTypeNodes = response.items.reduce((acc, item) => {\n+        acc[item.ageType].push(item);\n+        return acc;\n+      }, initialValue);\n+      this.setState({ageTypeNodes}, () => this.calculateAgeFromNodes());\n+    });\n+  }\n+\n+  initAgeRange() {\n+    const {selections, wizard} = this.props;\n+    if (selections.length) {\n+      const {attributes} = selections[0];\n+      const {name, operands} = attributes[0];\n+      this.slider.set([+operands[0], +operands[1]]);\n+      this.setState({count: wizard.count, maxAge: operands[1], minAge: operands[0]});\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.setState({ageType: name});\n+      }\n+    } else {\n+      // timeout prevents Angular 'ExpressionChangedAfterItHasBeenCheckedError' in CB modal component\n+      setTimeout(() => this.updateAgeSelection());\n+    }\n+    if (!serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+      const {cdrVersionId} = currentWorkspaceStore.getValue();\n+      if (!ageCountStore.getValue()[cdrVersionId]) {\n+        // Get total age count for this cdr version if it doesn't exist in the store yet\n+        this.calculateAge(true);\n+      } else if (this.setTotalAge) {\n+        this.setState({count:  ageCountStore.getValue()[cdrVersionId]});\n+      }\n+    }\n+  }\n+\n+  onMinChange(minAge: string) {\n+    const {maxAge} = this.state;\n+    let sliderMin = +minAge;\n+    if (+minAge < +defaultMinAge) {\n+      sliderMin = +defaultMinAge;\n+    } else if (+minAge > +maxAge) {\n+      sliderMin = +maxAge;\n+    }\n+    this.slider.set([sliderMin, null]);\n+    this.setState({minAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('min');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxChange(maxAge: string) {\n+    const {minAge} = this.state;\n+    let sliderMax = +maxAge;\n+    if (+maxAge > +defaultMaxAge) {\n+      sliderMax = +defaultMaxAge;\n+    } else if (+maxAge < +minAge) {\n+      sliderMax = +minAge;\n+    }\n+    this.slider.set([null, sliderMax]);\n+    this.setState({maxAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('max');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxBlur() {\n+    const {minAge} = this.state;\n+    let {maxAge} = this.state;\n+    if (+maxAge < +minAge) {\n+      maxAge = minAge;\n+    } else if (+maxAge > +defaultMaxAge || maxAge === '') {\n+      maxAge = defaultMaxAge;\n+    }\n+    this.slider.set([null, +maxAge]);\n+    this.setState({maxAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onMinBlur() {\n+    const {maxAge} = this.state;\n+    let {minAge} = this.state;\n+    if (+minAge > +maxAge) {\n+      minAge = maxAge;\n+    } else if (+minAge < +defaultMinAge || minAge === '') {\n+      minAge = defaultMinAge;\n+    }\n+    this.slider.set([+minAge, null]);\n+    this.setState({minAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onRadioChange(ageType: string) {\n+    this.setState({ageType}, () => {\n+      this.updateAgeSelection();\n+      this.calculateAgeFromNodes();\n+    });\n+  }\n+\n+  onSliderInit(slider: any) {\n+    this.slider = slider['noUiSlider'];\n+    if (this.slider) {\n+      this.initAgeRange();\n+      this.centerAgeCount();\n+    }\n+  }\n+\n+  onSliderUpdate(range: Array<string>) {\n+    // Use split here to drop the decimals (the slider defaults to 2 decimal places)\n+    const [min, max] = range.map(n => n.split('.')[0]);\n+    this.setState({maxAge: max, minAge: min}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes();\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  updateAgeSelection() {\n+    const {ageType, maxAge, minAge} = this.state;\n+    const selectedNode = {\n+      ...ageNode,\n+      name: `Age In Range ${minAge} - ${maxAge}`,\n+      attributes: [{\n+        name: ageType,\n+        operator: Operator.BETWEEN,\n+        operands: [minAge, maxAge]\n+      }],\n+    };\n+    this.props.select(selectedNode);\n+  }\n+\n+  centerAgeCount() {\n+    if (serverConfigStore.getValue().enableCBAgeTypeOptions && !!this.slider) {\n+      // get range from slider element and convert the strings to numbers\n+      const [sliderMin, sliderMax] = this.slider.get().map(v => +v);\n+      // get width as a % by dividing the selected age range by the full slider range\n+      const width = (sliderMax - sliderMin) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      // get left margin as a % by dividing the change in minAge by the full slider range\n+      const marginLeft = (sliderMin - +defaultMinAge) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      const wrapper = document.getElementById('count-wrapper');\n+      if (!!wrapper) {\n+        wrapper.setAttribute('style', `margin-left: ${marginLeft}%; width: ${width}%; text-align: center;`);\n+        // set style properties also for cross-browser compatibility\n+        wrapper.style.marginLeft = `${marginLeft}%`;\n+        wrapper.style.width = `${width}%`;\n+        wrapper.style.textAlign = 'center';\n+      }\n+    }\n+  }\n+\n+  selectOption(opt: any) {\n+    triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(opt.type)} - ${opt.name}`);\n+    this.props.select({...opt, name: `${typeToTitle(opt.type)} - ${opt.name}`});\n+  }\n+\n+  calculate(init?: boolean) {\n+    let count = 0;\n+    this.props.selections.forEach(sp => {\n+      if (init) {\n+        const node = this.state.nodes.find(n => n.conceptId === sp.conceptId);\n+        if (node) {\n+          sp.count = node.count;\n+        }\n+      }\n+      count += sp.count;\n+    });\n+    this.setState({count});\n+  }\n+\n+  calculateAge(init?: boolean) {\n+    const {maxAge, minAge} = this.state;\n+    if (!init || this.setTotalAge) {\n+      this.setState({calculating: true});\n+    }\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const min = init ? defaultMinAge : minAge;\n+    const max = init ? defaultMaxAge : maxAge;\n+    const parameter = {\n+      ...ageNode,\n+      name: `Age In Range ${min} - ${max}`,\n+      attributes: [{\n+        name: AttrName.AGE,\n+        operator: Operator.BETWEEN,\n+        operands: [min, max]\n+      }],\n+    };\n+    const request = {\n+      excludes: [],\n+      includes: [{\n+        items: [{\n+          type: DomainType.PERSON.toString(),\n+          searchParameters: [mapParameter(parameter)],\n+          modifiers: []\n+        }],\n+        temporal: false\n+      }],\n+      dataFilters: []\n+    };\n+    cohortBuilderApi().countParticipants(+cdrVersionId, request).then(response => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 432}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI2ODEwMQ==", "bodyText": "Done.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r420268101", "createdAt": "2020-05-05T17:05:29Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {\n+      const ageTypeNodes = response.items.reduce((acc, item) => {\n+        acc[item.ageType].push(item);\n+        return acc;\n+      }, initialValue);\n+      this.setState({ageTypeNodes}, () => this.calculateAgeFromNodes());\n+    });\n+  }\n+\n+  initAgeRange() {\n+    const {selections, wizard} = this.props;\n+    if (selections.length) {\n+      const {attributes} = selections[0];\n+      const {name, operands} = attributes[0];\n+      this.slider.set([+operands[0], +operands[1]]);\n+      this.setState({count: wizard.count, maxAge: operands[1], minAge: operands[0]});\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.setState({ageType: name});\n+      }\n+    } else {\n+      // timeout prevents Angular 'ExpressionChangedAfterItHasBeenCheckedError' in CB modal component\n+      setTimeout(() => this.updateAgeSelection());\n+    }\n+    if (!serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+      const {cdrVersionId} = currentWorkspaceStore.getValue();\n+      if (!ageCountStore.getValue()[cdrVersionId]) {\n+        // Get total age count for this cdr version if it doesn't exist in the store yet\n+        this.calculateAge(true);\n+      } else if (this.setTotalAge) {\n+        this.setState({count:  ageCountStore.getValue()[cdrVersionId]});\n+      }\n+    }\n+  }\n+\n+  onMinChange(minAge: string) {\n+    const {maxAge} = this.state;\n+    let sliderMin = +minAge;\n+    if (+minAge < +defaultMinAge) {\n+      sliderMin = +defaultMinAge;\n+    } else if (+minAge > +maxAge) {\n+      sliderMin = +maxAge;\n+    }\n+    this.slider.set([sliderMin, null]);\n+    this.setState({minAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('min');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxChange(maxAge: string) {\n+    const {minAge} = this.state;\n+    let sliderMax = +maxAge;\n+    if (+maxAge > +defaultMaxAge) {\n+      sliderMax = +defaultMaxAge;\n+    } else if (+maxAge < +minAge) {\n+      sliderMax = +minAge;\n+    }\n+    this.slider.set([null, sliderMax]);\n+    this.setState({maxAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('max');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxBlur() {\n+    const {minAge} = this.state;\n+    let {maxAge} = this.state;\n+    if (+maxAge < +minAge) {\n+      maxAge = minAge;\n+    } else if (+maxAge > +defaultMaxAge || maxAge === '') {\n+      maxAge = defaultMaxAge;\n+    }\n+    this.slider.set([null, +maxAge]);\n+    this.setState({maxAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onMinBlur() {\n+    const {maxAge} = this.state;\n+    let {minAge} = this.state;\n+    if (+minAge > +maxAge) {\n+      minAge = maxAge;\n+    } else if (+minAge < +defaultMinAge || minAge === '') {\n+      minAge = defaultMinAge;\n+    }\n+    this.slider.set([+minAge, null]);\n+    this.setState({minAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onRadioChange(ageType: string) {\n+    this.setState({ageType}, () => {\n+      this.updateAgeSelection();\n+      this.calculateAgeFromNodes();\n+    });\n+  }\n+\n+  onSliderInit(slider: any) {\n+    this.slider = slider['noUiSlider'];\n+    if (this.slider) {\n+      this.initAgeRange();\n+      this.centerAgeCount();\n+    }\n+  }\n+\n+  onSliderUpdate(range: Array<string>) {\n+    // Use split here to drop the decimals (the slider defaults to 2 decimal places)\n+    const [min, max] = range.map(n => n.split('.')[0]);\n+    this.setState({maxAge: max, minAge: min}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes();\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  updateAgeSelection() {\n+    const {ageType, maxAge, minAge} = this.state;\n+    const selectedNode = {\n+      ...ageNode,\n+      name: `Age In Range ${minAge} - ${maxAge}`,\n+      attributes: [{\n+        name: ageType,\n+        operator: Operator.BETWEEN,\n+        operands: [minAge, maxAge]\n+      }],\n+    };\n+    this.props.select(selectedNode);\n+  }\n+\n+  centerAgeCount() {\n+    if (serverConfigStore.getValue().enableCBAgeTypeOptions && !!this.slider) {\n+      // get range from slider element and convert the strings to numbers\n+      const [sliderMin, sliderMax] = this.slider.get().map(v => +v);\n+      // get width as a % by dividing the selected age range by the full slider range\n+      const width = (sliderMax - sliderMin) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      // get left margin as a % by dividing the change in minAge by the full slider range\n+      const marginLeft = (sliderMin - +defaultMinAge) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      const wrapper = document.getElementById('count-wrapper');\n+      if (!!wrapper) {\n+        wrapper.setAttribute('style', `margin-left: ${marginLeft}%; width: ${width}%; text-align: center;`);\n+        // set style properties also for cross-browser compatibility\n+        wrapper.style.marginLeft = `${marginLeft}%`;\n+        wrapper.style.width = `${width}%`;\n+        wrapper.style.textAlign = 'center';\n+      }\n+    }\n+  }\n+\n+  selectOption(opt: any) {\n+    triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(opt.type)} - ${opt.name}`);\n+    this.props.select({...opt, name: `${typeToTitle(opt.type)} - ${opt.name}`});\n+  }\n+\n+  calculate(init?: boolean) {\n+    let count = 0;\n+    this.props.selections.forEach(sp => {\n+      if (init) {\n+        const node = this.state.nodes.find(n => n.conceptId === sp.conceptId);\n+        if (node) {\n+          sp.count = node.count;\n+        }\n+      }\n+      count += sp.count;\n+    });\n+    this.setState({count});\n+  }\n+\n+  calculateAge(init?: boolean) {\n+    const {maxAge, minAge} = this.state;\n+    if (!init || this.setTotalAge) {\n+      this.setState({calculating: true});\n+    }\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const min = init ? defaultMinAge : minAge;\n+    const max = init ? defaultMaxAge : maxAge;\n+    const parameter = {\n+      ...ageNode,\n+      name: `Age In Range ${min} - ${max}`,\n+      attributes: [{\n+        name: AttrName.AGE,\n+        operator: Operator.BETWEEN,\n+        operands: [min, max]\n+      }],\n+    };\n+    const request = {\n+      excludes: [],\n+      includes: [{\n+        items: [{\n+          type: DomainType.PERSON.toString(),\n+          searchParameters: [mapParameter(parameter)],\n+          modifiers: []\n+        }],\n+        temporal: false\n+      }],\n+      dataFilters: []\n+    };\n+    cohortBuilderApi().countParticipants(+cdrVersionId, request).then(response => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMjQ0NA=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 432}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjUyNjU0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQyMDoyMTowMVrOGQQrjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMzo1ODozMVrOGUgoHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMzY5Mg==", "bodyText": "Could this be pulled out into a NumberInput component? I know we have a TextInput and this seems similar.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r419703692", "createdAt": "2020-05-04T20:21:01Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {\n+      const ageTypeNodes = response.items.reduce((acc, item) => {\n+        acc[item.ageType].push(item);\n+        return acc;\n+      }, initialValue);\n+      this.setState({ageTypeNodes}, () => this.calculateAgeFromNodes());\n+    });\n+  }\n+\n+  initAgeRange() {\n+    const {selections, wizard} = this.props;\n+    if (selections.length) {\n+      const {attributes} = selections[0];\n+      const {name, operands} = attributes[0];\n+      this.slider.set([+operands[0], +operands[1]]);\n+      this.setState({count: wizard.count, maxAge: operands[1], minAge: operands[0]});\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.setState({ageType: name});\n+      }\n+    } else {\n+      // timeout prevents Angular 'ExpressionChangedAfterItHasBeenCheckedError' in CB modal component\n+      setTimeout(() => this.updateAgeSelection());\n+    }\n+    if (!serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+      const {cdrVersionId} = currentWorkspaceStore.getValue();\n+      if (!ageCountStore.getValue()[cdrVersionId]) {\n+        // Get total age count for this cdr version if it doesn't exist in the store yet\n+        this.calculateAge(true);\n+      } else if (this.setTotalAge) {\n+        this.setState({count:  ageCountStore.getValue()[cdrVersionId]});\n+      }\n+    }\n+  }\n+\n+  onMinChange(minAge: string) {\n+    const {maxAge} = this.state;\n+    let sliderMin = +minAge;\n+    if (+minAge < +defaultMinAge) {\n+      sliderMin = +defaultMinAge;\n+    } else if (+minAge > +maxAge) {\n+      sliderMin = +maxAge;\n+    }\n+    this.slider.set([sliderMin, null]);\n+    this.setState({minAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('min');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxChange(maxAge: string) {\n+    const {minAge} = this.state;\n+    let sliderMax = +maxAge;\n+    if (+maxAge > +defaultMaxAge) {\n+      sliderMax = +defaultMaxAge;\n+    } else if (+maxAge < +minAge) {\n+      sliderMax = +minAge;\n+    }\n+    this.slider.set([null, sliderMax]);\n+    this.setState({maxAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('max');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxBlur() {\n+    const {minAge} = this.state;\n+    let {maxAge} = this.state;\n+    if (+maxAge < +minAge) {\n+      maxAge = minAge;\n+    } else if (+maxAge > +defaultMaxAge || maxAge === '') {\n+      maxAge = defaultMaxAge;\n+    }\n+    this.slider.set([null, +maxAge]);\n+    this.setState({maxAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onMinBlur() {\n+    const {maxAge} = this.state;\n+    let {minAge} = this.state;\n+    if (+minAge > +maxAge) {\n+      minAge = maxAge;\n+    } else if (+minAge < +defaultMinAge || minAge === '') {\n+      minAge = defaultMinAge;\n+    }\n+    this.slider.set([+minAge, null]);\n+    this.setState({minAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onRadioChange(ageType: string) {\n+    this.setState({ageType}, () => {\n+      this.updateAgeSelection();\n+      this.calculateAgeFromNodes();\n+    });\n+  }\n+\n+  onSliderInit(slider: any) {\n+    this.slider = slider['noUiSlider'];\n+    if (this.slider) {\n+      this.initAgeRange();\n+      this.centerAgeCount();\n+    }\n+  }\n+\n+  onSliderUpdate(range: Array<string>) {\n+    // Use split here to drop the decimals (the slider defaults to 2 decimal places)\n+    const [min, max] = range.map(n => n.split('.')[0]);\n+    this.setState({maxAge: max, minAge: min}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes();\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  updateAgeSelection() {\n+    const {ageType, maxAge, minAge} = this.state;\n+    const selectedNode = {\n+      ...ageNode,\n+      name: `Age In Range ${minAge} - ${maxAge}`,\n+      attributes: [{\n+        name: ageType,\n+        operator: Operator.BETWEEN,\n+        operands: [minAge, maxAge]\n+      }],\n+    };\n+    this.props.select(selectedNode);\n+  }\n+\n+  centerAgeCount() {\n+    if (serverConfigStore.getValue().enableCBAgeTypeOptions && !!this.slider) {\n+      // get range from slider element and convert the strings to numbers\n+      const [sliderMin, sliderMax] = this.slider.get().map(v => +v);\n+      // get width as a % by dividing the selected age range by the full slider range\n+      const width = (sliderMax - sliderMin) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      // get left margin as a % by dividing the change in minAge by the full slider range\n+      const marginLeft = (sliderMin - +defaultMinAge) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      const wrapper = document.getElementById('count-wrapper');\n+      if (!!wrapper) {\n+        wrapper.setAttribute('style', `margin-left: ${marginLeft}%; width: ${width}%; text-align: center;`);\n+        // set style properties also for cross-browser compatibility\n+        wrapper.style.marginLeft = `${marginLeft}%`;\n+        wrapper.style.width = `${width}%`;\n+        wrapper.style.textAlign = 'center';\n+      }\n+    }\n+  }\n+\n+  selectOption(opt: any) {\n+    triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(opt.type)} - ${opt.name}`);\n+    this.props.select({...opt, name: `${typeToTitle(opt.type)} - ${opt.name}`});\n+  }\n+\n+  calculate(init?: boolean) {\n+    let count = 0;\n+    this.props.selections.forEach(sp => {\n+      if (init) {\n+        const node = this.state.nodes.find(n => n.conceptId === sp.conceptId);\n+        if (node) {\n+          sp.count = node.count;\n+        }\n+      }\n+      count += sp.count;\n+    });\n+    this.setState({count});\n+  }\n+\n+  calculateAge(init?: boolean) {\n+    const {maxAge, minAge} = this.state;\n+    if (!init || this.setTotalAge) {\n+      this.setState({calculating: true});\n+    }\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const min = init ? defaultMinAge : minAge;\n+    const max = init ? defaultMaxAge : maxAge;\n+    const parameter = {\n+      ...ageNode,\n+      name: `Age In Range ${min} - ${max}`,\n+      attributes: [{\n+        name: AttrName.AGE,\n+        operator: Operator.BETWEEN,\n+        operands: [min, max]\n+      }],\n+    };\n+    const request = {\n+      excludes: [],\n+      includes: [{\n+        items: [{\n+          type: DomainType.PERSON.toString(),\n+          searchParameters: [mapParameter(parameter)],\n+          modifiers: []\n+        }],\n+        temporal: false\n+      }],\n+      dataFilters: []\n+    };\n+    cohortBuilderApi().countParticipants(+cdrVersionId, request).then(response => {\n+      if (init) {\n+        const ageCounts = ageCountStore.getValue();\n+        ageCounts[cdrVersionId] = response;\n+        ageCountStore.next(ageCounts);\n+        if (this.setTotalAge) {\n+          this.setState({count: response});\n+        }\n+      } else {\n+        this.setState({count: response});\n+      }\n+      this.setState({calculating: false});\n+    }, (err) => {\n+      console.error(err);\n+      this.setState({calculating: false});\n+    });\n+  }\n+\n+  calculateAgeFromNodes(minOrMax?: string) {\n+    const {ageTypeNodes, ageType, maxAge, minAge} = this.state;\n+    let max = +maxAge;\n+    let min = +minAge;\n+    if (minOrMax === 'min' && min > +max) {\n+      min = max;\n+    } else if (minOrMax === 'max' && max < min) {\n+      max = min;\n+    }\n+    const count = ageTypeNodes[ageType]\n+      .filter(node => node.age >= min && node.age <= max)\n+      .reduce((acc, node) => acc + node.count, 0);\n+    this.setState({count, loading: false}, () => this.centerAgeCount());\n+  }\n+\n+  get showPreview() {\n+    const {selections, wizard} = this.props;\n+    return !this.state.loading\n+      && (selections && selections.length > 0)\n+      && !(wizard.type === CriteriaType.AGE && serverConfigStore.getValue().enableCBAgeTypeOptions);\n+  }\n+\n+  // Checks if form is in its initial state and if a count already exists before setting the total age count\n+  get setTotalAge() {\n+    const {count, maxAge, minAge} = this.state;\n+    return minAge === defaultMinAge && maxAge === defaultMaxAge && !count;\n+  }\n+\n+  render() {\n+    const {selectedIds, wizard} = this.props;\n+    const {ageType, calculating, count, loading, maxAge, minAge, nodes} = this.state;\n+    const isAge = wizard.type === CriteriaType.AGE;\n+    const calcDisabled = calculating || count !== null;\n+    return loading\n+      ? <div style={{textAlign: 'center'}}><Spinner style={{marginTop: '3rem'}}/></div>\n+      : <React.Fragment>\n+        {isAge\n+          // Age slider with number inputs\n+          ? <div style={styles.ageContainer}>\n+            <div style={styles.ageLabel}>\n+              Age Range\n+            </div>\n+            <div style={styles.sliderContainer}>\n+              <input style={styles.ageInput}\n+                type='number'\n+                id='min-age'\n+                min={defaultMinAge} max={maxAge}\n+                value={minAge}\n+                onBlur={() => this.onMinBlur()}\n+                onChange={(e) => this.onMinChange(e.target.value)}/>\n+              <div style={serverConfigStore.getValue().enableCBAgeTypeOptions\n+                ? {...styles.slider, marginBottom: '0.75rem'}\n+                : styles.slider}>\n+                {serverConfigStore.getValue().enableCBAgeTypeOptions && <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n+                  {calculating\n+                    ? <Spinner size={16}/>\n+                    : <span style={styles.count} id='age-count'>\n+                      {count.toLocaleString()}\n+                    </span>\n+                  }\n+                </div>}\n+                <Nouislider behaviour='drag'\n+                  connect\n+                  instanceRef={(slider) => this.onSliderInit(slider)}\n+                  onChange={() => this.updateAgeSelection()}\n+                  onSlide={(v) => this.onSliderUpdate(v)}\n+                  range={{min: +defaultMinAge, max: +defaultMaxAge}}\n+                  start={[+defaultMinAge, +defaultMaxAge]}\n+                  step={1}/>\n+              </div>\n+              <input style={styles.ageInput}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 520}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI3NTI1NA==", "bodyText": "There is a NumberInput component but it actually returns a regular text input, even though it tries to set type='number'. I can file a follow-up ticket to fix that component (doesn't look like it's currently being used anywhere else).", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r420275254", "createdAt": "2020-05-05T17:16:43Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {\n+      const ageTypeNodes = response.items.reduce((acc, item) => {\n+        acc[item.ageType].push(item);\n+        return acc;\n+      }, initialValue);\n+      this.setState({ageTypeNodes}, () => this.calculateAgeFromNodes());\n+    });\n+  }\n+\n+  initAgeRange() {\n+    const {selections, wizard} = this.props;\n+    if (selections.length) {\n+      const {attributes} = selections[0];\n+      const {name, operands} = attributes[0];\n+      this.slider.set([+operands[0], +operands[1]]);\n+      this.setState({count: wizard.count, maxAge: operands[1], minAge: operands[0]});\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.setState({ageType: name});\n+      }\n+    } else {\n+      // timeout prevents Angular 'ExpressionChangedAfterItHasBeenCheckedError' in CB modal component\n+      setTimeout(() => this.updateAgeSelection());\n+    }\n+    if (!serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+      const {cdrVersionId} = currentWorkspaceStore.getValue();\n+      if (!ageCountStore.getValue()[cdrVersionId]) {\n+        // Get total age count for this cdr version if it doesn't exist in the store yet\n+        this.calculateAge(true);\n+      } else if (this.setTotalAge) {\n+        this.setState({count:  ageCountStore.getValue()[cdrVersionId]});\n+      }\n+    }\n+  }\n+\n+  onMinChange(minAge: string) {\n+    const {maxAge} = this.state;\n+    let sliderMin = +minAge;\n+    if (+minAge < +defaultMinAge) {\n+      sliderMin = +defaultMinAge;\n+    } else if (+minAge > +maxAge) {\n+      sliderMin = +maxAge;\n+    }\n+    this.slider.set([sliderMin, null]);\n+    this.setState({minAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('min');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxChange(maxAge: string) {\n+    const {minAge} = this.state;\n+    let sliderMax = +maxAge;\n+    if (+maxAge > +defaultMaxAge) {\n+      sliderMax = +defaultMaxAge;\n+    } else if (+maxAge < +minAge) {\n+      sliderMax = +minAge;\n+    }\n+    this.slider.set([null, sliderMax]);\n+    this.setState({maxAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('max');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxBlur() {\n+    const {minAge} = this.state;\n+    let {maxAge} = this.state;\n+    if (+maxAge < +minAge) {\n+      maxAge = minAge;\n+    } else if (+maxAge > +defaultMaxAge || maxAge === '') {\n+      maxAge = defaultMaxAge;\n+    }\n+    this.slider.set([null, +maxAge]);\n+    this.setState({maxAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onMinBlur() {\n+    const {maxAge} = this.state;\n+    let {minAge} = this.state;\n+    if (+minAge > +maxAge) {\n+      minAge = maxAge;\n+    } else if (+minAge < +defaultMinAge || minAge === '') {\n+      minAge = defaultMinAge;\n+    }\n+    this.slider.set([+minAge, null]);\n+    this.setState({minAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onRadioChange(ageType: string) {\n+    this.setState({ageType}, () => {\n+      this.updateAgeSelection();\n+      this.calculateAgeFromNodes();\n+    });\n+  }\n+\n+  onSliderInit(slider: any) {\n+    this.slider = slider['noUiSlider'];\n+    if (this.slider) {\n+      this.initAgeRange();\n+      this.centerAgeCount();\n+    }\n+  }\n+\n+  onSliderUpdate(range: Array<string>) {\n+    // Use split here to drop the decimals (the slider defaults to 2 decimal places)\n+    const [min, max] = range.map(n => n.split('.')[0]);\n+    this.setState({maxAge: max, minAge: min}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes();\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  updateAgeSelection() {\n+    const {ageType, maxAge, minAge} = this.state;\n+    const selectedNode = {\n+      ...ageNode,\n+      name: `Age In Range ${minAge} - ${maxAge}`,\n+      attributes: [{\n+        name: ageType,\n+        operator: Operator.BETWEEN,\n+        operands: [minAge, maxAge]\n+      }],\n+    };\n+    this.props.select(selectedNode);\n+  }\n+\n+  centerAgeCount() {\n+    if (serverConfigStore.getValue().enableCBAgeTypeOptions && !!this.slider) {\n+      // get range from slider element and convert the strings to numbers\n+      const [sliderMin, sliderMax] = this.slider.get().map(v => +v);\n+      // get width as a % by dividing the selected age range by the full slider range\n+      const width = (sliderMax - sliderMin) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      // get left margin as a % by dividing the change in minAge by the full slider range\n+      const marginLeft = (sliderMin - +defaultMinAge) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      const wrapper = document.getElementById('count-wrapper');\n+      if (!!wrapper) {\n+        wrapper.setAttribute('style', `margin-left: ${marginLeft}%; width: ${width}%; text-align: center;`);\n+        // set style properties also for cross-browser compatibility\n+        wrapper.style.marginLeft = `${marginLeft}%`;\n+        wrapper.style.width = `${width}%`;\n+        wrapper.style.textAlign = 'center';\n+      }\n+    }\n+  }\n+\n+  selectOption(opt: any) {\n+    triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(opt.type)} - ${opt.name}`);\n+    this.props.select({...opt, name: `${typeToTitle(opt.type)} - ${opt.name}`});\n+  }\n+\n+  calculate(init?: boolean) {\n+    let count = 0;\n+    this.props.selections.forEach(sp => {\n+      if (init) {\n+        const node = this.state.nodes.find(n => n.conceptId === sp.conceptId);\n+        if (node) {\n+          sp.count = node.count;\n+        }\n+      }\n+      count += sp.count;\n+    });\n+    this.setState({count});\n+  }\n+\n+  calculateAge(init?: boolean) {\n+    const {maxAge, minAge} = this.state;\n+    if (!init || this.setTotalAge) {\n+      this.setState({calculating: true});\n+    }\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const min = init ? defaultMinAge : minAge;\n+    const max = init ? defaultMaxAge : maxAge;\n+    const parameter = {\n+      ...ageNode,\n+      name: `Age In Range ${min} - ${max}`,\n+      attributes: [{\n+        name: AttrName.AGE,\n+        operator: Operator.BETWEEN,\n+        operands: [min, max]\n+      }],\n+    };\n+    const request = {\n+      excludes: [],\n+      includes: [{\n+        items: [{\n+          type: DomainType.PERSON.toString(),\n+          searchParameters: [mapParameter(parameter)],\n+          modifiers: []\n+        }],\n+        temporal: false\n+      }],\n+      dataFilters: []\n+    };\n+    cohortBuilderApi().countParticipants(+cdrVersionId, request).then(response => {\n+      if (init) {\n+        const ageCounts = ageCountStore.getValue();\n+        ageCounts[cdrVersionId] = response;\n+        ageCountStore.next(ageCounts);\n+        if (this.setTotalAge) {\n+          this.setState({count: response});\n+        }\n+      } else {\n+        this.setState({count: response});\n+      }\n+      this.setState({calculating: false});\n+    }, (err) => {\n+      console.error(err);\n+      this.setState({calculating: false});\n+    });\n+  }\n+\n+  calculateAgeFromNodes(minOrMax?: string) {\n+    const {ageTypeNodes, ageType, maxAge, minAge} = this.state;\n+    let max = +maxAge;\n+    let min = +minAge;\n+    if (minOrMax === 'min' && min > +max) {\n+      min = max;\n+    } else if (minOrMax === 'max' && max < min) {\n+      max = min;\n+    }\n+    const count = ageTypeNodes[ageType]\n+      .filter(node => node.age >= min && node.age <= max)\n+      .reduce((acc, node) => acc + node.count, 0);\n+    this.setState({count, loading: false}, () => this.centerAgeCount());\n+  }\n+\n+  get showPreview() {\n+    const {selections, wizard} = this.props;\n+    return !this.state.loading\n+      && (selections && selections.length > 0)\n+      && !(wizard.type === CriteriaType.AGE && serverConfigStore.getValue().enableCBAgeTypeOptions);\n+  }\n+\n+  // Checks if form is in its initial state and if a count already exists before setting the total age count\n+  get setTotalAge() {\n+    const {count, maxAge, minAge} = this.state;\n+    return minAge === defaultMinAge && maxAge === defaultMaxAge && !count;\n+  }\n+\n+  render() {\n+    const {selectedIds, wizard} = this.props;\n+    const {ageType, calculating, count, loading, maxAge, minAge, nodes} = this.state;\n+    const isAge = wizard.type === CriteriaType.AGE;\n+    const calcDisabled = calculating || count !== null;\n+    return loading\n+      ? <div style={{textAlign: 'center'}}><Spinner style={{marginTop: '3rem'}}/></div>\n+      : <React.Fragment>\n+        {isAge\n+          // Age slider with number inputs\n+          ? <div style={styles.ageContainer}>\n+            <div style={styles.ageLabel}>\n+              Age Range\n+            </div>\n+            <div style={styles.sliderContainer}>\n+              <input style={styles.ageInput}\n+                type='number'\n+                id='min-age'\n+                min={defaultMinAge} max={maxAge}\n+                value={minAge}\n+                onBlur={() => this.onMinBlur()}\n+                onChange={(e) => this.onMinChange(e.target.value)}/>\n+              <div style={serverConfigStore.getValue().enableCBAgeTypeOptions\n+                ? {...styles.slider, marginBottom: '0.75rem'}\n+                : styles.slider}>\n+                {serverConfigStore.getValue().enableCBAgeTypeOptions && <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n+                  {calculating\n+                    ? <Spinner size={16}/>\n+                    : <span style={styles.count} id='age-count'>\n+                      {count.toLocaleString()}\n+                    </span>\n+                  }\n+                </div>}\n+                <Nouislider behaviour='drag'\n+                  connect\n+                  instanceRef={(slider) => this.onSliderInit(slider)}\n+                  onChange={() => this.updateAgeSelection()}\n+                  onSlide={(v) => this.onSliderUpdate(v)}\n+                  range={{min: +defaultMinAge, max: +defaultMaxAge}}\n+                  start={[+defaultMinAge, +defaultMaxAge]}\n+                  step={1}/>\n+              </div>\n+              <input style={styles.ageInput}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMzY5Mg=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 520}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE1NjQ5Nw==", "bodyText": "Yeah, lets follow up by fixing that. Sounds good.", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r423156497", "createdAt": "2020-05-11T16:15:55Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {\n+      const ageTypeNodes = response.items.reduce((acc, item) => {\n+        acc[item.ageType].push(item);\n+        return acc;\n+      }, initialValue);\n+      this.setState({ageTypeNodes}, () => this.calculateAgeFromNodes());\n+    });\n+  }\n+\n+  initAgeRange() {\n+    const {selections, wizard} = this.props;\n+    if (selections.length) {\n+      const {attributes} = selections[0];\n+      const {name, operands} = attributes[0];\n+      this.slider.set([+operands[0], +operands[1]]);\n+      this.setState({count: wizard.count, maxAge: operands[1], minAge: operands[0]});\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.setState({ageType: name});\n+      }\n+    } else {\n+      // timeout prevents Angular 'ExpressionChangedAfterItHasBeenCheckedError' in CB modal component\n+      setTimeout(() => this.updateAgeSelection());\n+    }\n+    if (!serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+      const {cdrVersionId} = currentWorkspaceStore.getValue();\n+      if (!ageCountStore.getValue()[cdrVersionId]) {\n+        // Get total age count for this cdr version if it doesn't exist in the store yet\n+        this.calculateAge(true);\n+      } else if (this.setTotalAge) {\n+        this.setState({count:  ageCountStore.getValue()[cdrVersionId]});\n+      }\n+    }\n+  }\n+\n+  onMinChange(minAge: string) {\n+    const {maxAge} = this.state;\n+    let sliderMin = +minAge;\n+    if (+minAge < +defaultMinAge) {\n+      sliderMin = +defaultMinAge;\n+    } else if (+minAge > +maxAge) {\n+      sliderMin = +maxAge;\n+    }\n+    this.slider.set([sliderMin, null]);\n+    this.setState({minAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('min');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxChange(maxAge: string) {\n+    const {minAge} = this.state;\n+    let sliderMax = +maxAge;\n+    if (+maxAge > +defaultMaxAge) {\n+      sliderMax = +defaultMaxAge;\n+    } else if (+maxAge < +minAge) {\n+      sliderMax = +minAge;\n+    }\n+    this.slider.set([null, sliderMax]);\n+    this.setState({maxAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('max');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxBlur() {\n+    const {minAge} = this.state;\n+    let {maxAge} = this.state;\n+    if (+maxAge < +minAge) {\n+      maxAge = minAge;\n+    } else if (+maxAge > +defaultMaxAge || maxAge === '') {\n+      maxAge = defaultMaxAge;\n+    }\n+    this.slider.set([null, +maxAge]);\n+    this.setState({maxAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onMinBlur() {\n+    const {maxAge} = this.state;\n+    let {minAge} = this.state;\n+    if (+minAge > +maxAge) {\n+      minAge = maxAge;\n+    } else if (+minAge < +defaultMinAge || minAge === '') {\n+      minAge = defaultMinAge;\n+    }\n+    this.slider.set([+minAge, null]);\n+    this.setState({minAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onRadioChange(ageType: string) {\n+    this.setState({ageType}, () => {\n+      this.updateAgeSelection();\n+      this.calculateAgeFromNodes();\n+    });\n+  }\n+\n+  onSliderInit(slider: any) {\n+    this.slider = slider['noUiSlider'];\n+    if (this.slider) {\n+      this.initAgeRange();\n+      this.centerAgeCount();\n+    }\n+  }\n+\n+  onSliderUpdate(range: Array<string>) {\n+    // Use split here to drop the decimals (the slider defaults to 2 decimal places)\n+    const [min, max] = range.map(n => n.split('.')[0]);\n+    this.setState({maxAge: max, minAge: min}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes();\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  updateAgeSelection() {\n+    const {ageType, maxAge, minAge} = this.state;\n+    const selectedNode = {\n+      ...ageNode,\n+      name: `Age In Range ${minAge} - ${maxAge}`,\n+      attributes: [{\n+        name: ageType,\n+        operator: Operator.BETWEEN,\n+        operands: [minAge, maxAge]\n+      }],\n+    };\n+    this.props.select(selectedNode);\n+  }\n+\n+  centerAgeCount() {\n+    if (serverConfigStore.getValue().enableCBAgeTypeOptions && !!this.slider) {\n+      // get range from slider element and convert the strings to numbers\n+      const [sliderMin, sliderMax] = this.slider.get().map(v => +v);\n+      // get width as a % by dividing the selected age range by the full slider range\n+      const width = (sliderMax - sliderMin) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      // get left margin as a % by dividing the change in minAge by the full slider range\n+      const marginLeft = (sliderMin - +defaultMinAge) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      const wrapper = document.getElementById('count-wrapper');\n+      if (!!wrapper) {\n+        wrapper.setAttribute('style', `margin-left: ${marginLeft}%; width: ${width}%; text-align: center;`);\n+        // set style properties also for cross-browser compatibility\n+        wrapper.style.marginLeft = `${marginLeft}%`;\n+        wrapper.style.width = `${width}%`;\n+        wrapper.style.textAlign = 'center';\n+      }\n+    }\n+  }\n+\n+  selectOption(opt: any) {\n+    triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(opt.type)} - ${opt.name}`);\n+    this.props.select({...opt, name: `${typeToTitle(opt.type)} - ${opt.name}`});\n+  }\n+\n+  calculate(init?: boolean) {\n+    let count = 0;\n+    this.props.selections.forEach(sp => {\n+      if (init) {\n+        const node = this.state.nodes.find(n => n.conceptId === sp.conceptId);\n+        if (node) {\n+          sp.count = node.count;\n+        }\n+      }\n+      count += sp.count;\n+    });\n+    this.setState({count});\n+  }\n+\n+  calculateAge(init?: boolean) {\n+    const {maxAge, minAge} = this.state;\n+    if (!init || this.setTotalAge) {\n+      this.setState({calculating: true});\n+    }\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const min = init ? defaultMinAge : minAge;\n+    const max = init ? defaultMaxAge : maxAge;\n+    const parameter = {\n+      ...ageNode,\n+      name: `Age In Range ${min} - ${max}`,\n+      attributes: [{\n+        name: AttrName.AGE,\n+        operator: Operator.BETWEEN,\n+        operands: [min, max]\n+      }],\n+    };\n+    const request = {\n+      excludes: [],\n+      includes: [{\n+        items: [{\n+          type: DomainType.PERSON.toString(),\n+          searchParameters: [mapParameter(parameter)],\n+          modifiers: []\n+        }],\n+        temporal: false\n+      }],\n+      dataFilters: []\n+    };\n+    cohortBuilderApi().countParticipants(+cdrVersionId, request).then(response => {\n+      if (init) {\n+        const ageCounts = ageCountStore.getValue();\n+        ageCounts[cdrVersionId] = response;\n+        ageCountStore.next(ageCounts);\n+        if (this.setTotalAge) {\n+          this.setState({count: response});\n+        }\n+      } else {\n+        this.setState({count: response});\n+      }\n+      this.setState({calculating: false});\n+    }, (err) => {\n+      console.error(err);\n+      this.setState({calculating: false});\n+    });\n+  }\n+\n+  calculateAgeFromNodes(minOrMax?: string) {\n+    const {ageTypeNodes, ageType, maxAge, minAge} = this.state;\n+    let max = +maxAge;\n+    let min = +minAge;\n+    if (minOrMax === 'min' && min > +max) {\n+      min = max;\n+    } else if (minOrMax === 'max' && max < min) {\n+      max = min;\n+    }\n+    const count = ageTypeNodes[ageType]\n+      .filter(node => node.age >= min && node.age <= max)\n+      .reduce((acc, node) => acc + node.count, 0);\n+    this.setState({count, loading: false}, () => this.centerAgeCount());\n+  }\n+\n+  get showPreview() {\n+    const {selections, wizard} = this.props;\n+    return !this.state.loading\n+      && (selections && selections.length > 0)\n+      && !(wizard.type === CriteriaType.AGE && serverConfigStore.getValue().enableCBAgeTypeOptions);\n+  }\n+\n+  // Checks if form is in its initial state and if a count already exists before setting the total age count\n+  get setTotalAge() {\n+    const {count, maxAge, minAge} = this.state;\n+    return minAge === defaultMinAge && maxAge === defaultMaxAge && !count;\n+  }\n+\n+  render() {\n+    const {selectedIds, wizard} = this.props;\n+    const {ageType, calculating, count, loading, maxAge, minAge, nodes} = this.state;\n+    const isAge = wizard.type === CriteriaType.AGE;\n+    const calcDisabled = calculating || count !== null;\n+    return loading\n+      ? <div style={{textAlign: 'center'}}><Spinner style={{marginTop: '3rem'}}/></div>\n+      : <React.Fragment>\n+        {isAge\n+          // Age slider with number inputs\n+          ? <div style={styles.ageContainer}>\n+            <div style={styles.ageLabel}>\n+              Age Range\n+            </div>\n+            <div style={styles.sliderContainer}>\n+              <input style={styles.ageInput}\n+                type='number'\n+                id='min-age'\n+                min={defaultMinAge} max={maxAge}\n+                value={minAge}\n+                onBlur={() => this.onMinBlur()}\n+                onChange={(e) => this.onMinChange(e.target.value)}/>\n+              <div style={serverConfigStore.getValue().enableCBAgeTypeOptions\n+                ? {...styles.slider, marginBottom: '0.75rem'}\n+                : styles.slider}>\n+                {serverConfigStore.getValue().enableCBAgeTypeOptions && <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n+                  {calculating\n+                    ? <Spinner size={16}/>\n+                    : <span style={styles.count} id='age-count'>\n+                      {count.toLocaleString()}\n+                    </span>\n+                  }\n+                </div>}\n+                <Nouislider behaviour='drag'\n+                  connect\n+                  instanceRef={(slider) => this.onSliderInit(slider)}\n+                  onChange={() => this.updateAgeSelection()}\n+                  onSlide={(v) => this.onSliderUpdate(v)}\n+                  range={{min: +defaultMinAge, max: +defaultMaxAge}}\n+                  start={[+defaultMinAge, +defaultMaxAge]}\n+                  step={1}/>\n+              </div>\n+              <input style={styles.ageInput}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMzY5Mg=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 520}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE1OTI2MQ==", "bodyText": "Filed RW-4947", "url": "https://github.com/all-of-us/workbench/pull/3516#discussion_r424159261", "createdAt": "2020-05-13T03:58:31Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/demographics/demographics.component.tsx", "diffHunk": "@@ -0,0 +1,592 @@\n+import {Component, Input} from '@angular/core';\n+import Nouislider from 'nouislider-react';\n+import * as React from 'react';\n+\n+import {ageCountStore} from 'app/cohort-search/search-state.service';\n+import {mapParameter, typeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore, serverConfigStore} from 'app/utils/navigation';\n+import {AttrName, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  ageContainer: {\n+    border: '1px solid #cccccc',\n+    borderRadius: '5px',\n+    margin: '0.5rem 1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 1.5rem 1rem'\n+  },\n+  ageInput: {\n+    border: `1px solid ${colors.black}`,\n+    borderRadius: '3px',\n+    fontSize: '0.5rem',\n+    fontWeight: 300,\n+    marginTop: '0.25rem',\n+    padding: '0 0.5rem',\n+    width: '1rem',\n+  },\n+  ageLabel: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    color: colors.primary\n+  },\n+  agePreview: {\n+    minWidth: '50%',\n+    padding: '0.25rem 1rem',\n+    width: 'auto'\n+  },\n+  calculateBtn: {\n+    background: colors.primary,\n+    border: 'none',\n+    borderRadius: '0.3rem',\n+    color: colors.white,\n+    cursor: 'pointer',\n+    fontSize: '12px',\n+    height: '1.5rem',\n+    letterSpacing: '0.02rem',\n+    lineHeight: '0.75rem',\n+    margin: '0.25rem 0.5rem 0.25rem 0',\n+    padding: '0rem 0.75rem',\n+    textTransform: 'uppercase',\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  countPreview: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    padding: '0.5rem',\n+    margin: '0 2.5%',\n+    position: 'absolute',\n+    width: '95%',\n+    bottom: '0.5rem',\n+  },\n+  option: {\n+    color: colors.black,\n+    cursor: 'pointer',\n+    fontSize: '13px',\n+    fontWeight: 400,\n+    marginBottom: '0.5rem',\n+    padding: '0 0.25rem',\n+    textTransform: 'capitalize',\n+  },\n+  resultText: {\n+    color: colors.primary,\n+    fontWeight: 500,\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    marginRight: '0.25rem'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  selectList: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    maxHeight: '15rem',\n+    padding: '0.5rem 0 0 1rem'\n+  },\n+  slider: {\n+    flex: 1,\n+    padding: '0 0.5rem',\n+    margin: '0 1rem',\n+  },\n+  sliderContainer: {\n+    alignItems: 'center',\n+    display: 'flex',\n+    marginRight: '1rem',\n+    paddingLeft: '1rem',\n+    width: '96%',\n+  }\n+});\n+// Template node used for age selections\n+const ageNode = {\n+  hasAncestorData: false,\n+  attributes: [],\n+  code: '',\n+  domainId: DomainType.PERSON,\n+  group: false,\n+  name: 'Age',\n+  parameterId: 'age-param',\n+  isStandard: true,\n+  type: CriteriaType.AGE,\n+  value: ''\n+};\n+\n+const ageTypes = [\n+  {label: 'Current Age', type: AttrName.AGE.toString()},\n+  {label: 'Age at Consent', type: AttrName.AGEATCONSENT.toString()},\n+  {label: 'Age at CDR Date', type: AttrName.AGEATCDR.toString()}\n+];\n+\n+const defaultMinAge = '18';\n+const defaultMaxAge = '120';\n+\n+function sortByCountThenName(critA, critB) {\n+  const A = critA.count || 0;\n+  const B = critB.count || 0;\n+  const diff = B - A;\n+  return diff === 0\n+        ? (critA.name > critB.name ? 1 : -1)\n+        : diff;\n+}\n+interface Props {\n+  select: Function;\n+  selectedIds: Array<string>;\n+  selections: Array<any>;\n+  wizard: any;\n+}\n+\n+interface State {\n+  ageType: any;\n+  ageTypeNodes: any;\n+  calculating: boolean;\n+  count: number;\n+  loading: boolean;\n+  maxAge: string;\n+  minAge: string;\n+  nodes: Array<any>;\n+}\n+\n+export class Demographics extends React.Component<Props, State> {\n+  ageWrapper: HTMLDivElement;\n+  slider: any;\n+\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      ageType: AttrName.AGE.toString(),\n+      ageTypeNodes: undefined,\n+      calculating: false,\n+      count: null,\n+      loading: true,\n+      maxAge: defaultMaxAge,\n+      minAge: defaultMinAge,\n+      nodes: undefined,\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (this.props.wizard.type === CriteriaType.AGE) {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.loadAgeNodesFromApi();\n+      } else {\n+        this.setState({loading: false});\n+      }\n+    } else {\n+      this.loadNodesFromApi();\n+    }\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {selections, wizard} = this.props;\n+    if (selections !== prevProps.selections && wizard.type !== CriteriaType.AGE) {\n+      this.calculate();\n+    }\n+  }\n+\n+  loadNodesFromApi() {\n+    const {selections, wizard} = this.props;\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    this.setState({loading: true});\n+    cohortBuilderApi().findCriteriaBy(+cdrVersionId, DomainType.PERSON.toString(), wizard.type).then(response => {\n+      const nodes = response.items\n+        .filter(item => item.parentId !== 0)\n+        .sort(sortByCountThenName)\n+        .map(node => ({...node, parameterId: `param${node.conceptId || node.code}`}));\n+      if (selections.length) {\n+        this.calculate(true);\n+      }\n+      this.setState({loading: false, nodes});\n+    });\n+  }\n+\n+  loadAgeNodesFromApi() {\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const initialValue = {\n+      [AttrName.AGE.toString()]: [],\n+      [AttrName.AGEATCONSENT.toString()]: [],\n+      [AttrName.AGEATCDR.toString()]: []\n+    };\n+    cohortBuilderApi().findAgeTypeCounts(+cdrVersionId).then(response => {\n+      const ageTypeNodes = response.items.reduce((acc, item) => {\n+        acc[item.ageType].push(item);\n+        return acc;\n+      }, initialValue);\n+      this.setState({ageTypeNodes}, () => this.calculateAgeFromNodes());\n+    });\n+  }\n+\n+  initAgeRange() {\n+    const {selections, wizard} = this.props;\n+    if (selections.length) {\n+      const {attributes} = selections[0];\n+      const {name, operands} = attributes[0];\n+      this.slider.set([+operands[0], +operands[1]]);\n+      this.setState({count: wizard.count, maxAge: operands[1], minAge: operands[0]});\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.setState({ageType: name});\n+      }\n+    } else {\n+      // timeout prevents Angular 'ExpressionChangedAfterItHasBeenCheckedError' in CB modal component\n+      setTimeout(() => this.updateAgeSelection());\n+    }\n+    if (!serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+      const {cdrVersionId} = currentWorkspaceStore.getValue();\n+      if (!ageCountStore.getValue()[cdrVersionId]) {\n+        // Get total age count for this cdr version if it doesn't exist in the store yet\n+        this.calculateAge(true);\n+      } else if (this.setTotalAge) {\n+        this.setState({count:  ageCountStore.getValue()[cdrVersionId]});\n+      }\n+    }\n+  }\n+\n+  onMinChange(minAge: string) {\n+    const {maxAge} = this.state;\n+    let sliderMin = +minAge;\n+    if (+minAge < +defaultMinAge) {\n+      sliderMin = +defaultMinAge;\n+    } else if (+minAge > +maxAge) {\n+      sliderMin = +maxAge;\n+    }\n+    this.slider.set([sliderMin, null]);\n+    this.setState({minAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('min');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxChange(maxAge: string) {\n+    const {minAge} = this.state;\n+    let sliderMax = +maxAge;\n+    if (+maxAge > +defaultMaxAge) {\n+      sliderMax = +defaultMaxAge;\n+    } else if (+maxAge < +minAge) {\n+      sliderMax = +minAge;\n+    }\n+    this.slider.set([null, sliderMax]);\n+    this.setState({maxAge}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes('max');\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  onMaxBlur() {\n+    const {minAge} = this.state;\n+    let {maxAge} = this.state;\n+    if (+maxAge < +minAge) {\n+      maxAge = minAge;\n+    } else if (+maxAge > +defaultMaxAge || maxAge === '') {\n+      maxAge = defaultMaxAge;\n+    }\n+    this.slider.set([null, +maxAge]);\n+    this.setState({maxAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onMinBlur() {\n+    const {maxAge} = this.state;\n+    let {minAge} = this.state;\n+    if (+minAge > +maxAge) {\n+      minAge = maxAge;\n+    } else if (+minAge < +defaultMinAge || minAge === '') {\n+      minAge = defaultMinAge;\n+    }\n+    this.slider.set([+minAge, null]);\n+    this.setState({minAge}, () => this.updateAgeSelection());\n+  }\n+\n+  onRadioChange(ageType: string) {\n+    this.setState({ageType}, () => {\n+      this.updateAgeSelection();\n+      this.calculateAgeFromNodes();\n+    });\n+  }\n+\n+  onSliderInit(slider: any) {\n+    this.slider = slider['noUiSlider'];\n+    if (this.slider) {\n+      this.initAgeRange();\n+      this.centerAgeCount();\n+    }\n+  }\n+\n+  onSliderUpdate(range: Array<string>) {\n+    // Use split here to drop the decimals (the slider defaults to 2 decimal places)\n+    const [min, max] = range.map(n => n.split('.')[0]);\n+    this.setState({maxAge: max, minAge: min}, () => {\n+      if (serverConfigStore.getValue().enableCBAgeTypeOptions) {\n+        this.calculateAgeFromNodes();\n+      } else {\n+        this.setState({count: null});\n+      }\n+    });\n+  }\n+\n+  updateAgeSelection() {\n+    const {ageType, maxAge, minAge} = this.state;\n+    const selectedNode = {\n+      ...ageNode,\n+      name: `Age In Range ${minAge} - ${maxAge}`,\n+      attributes: [{\n+        name: ageType,\n+        operator: Operator.BETWEEN,\n+        operands: [minAge, maxAge]\n+      }],\n+    };\n+    this.props.select(selectedNode);\n+  }\n+\n+  centerAgeCount() {\n+    if (serverConfigStore.getValue().enableCBAgeTypeOptions && !!this.slider) {\n+      // get range from slider element and convert the strings to numbers\n+      const [sliderMin, sliderMax] = this.slider.get().map(v => +v);\n+      // get width as a % by dividing the selected age range by the full slider range\n+      const width = (sliderMax - sliderMin) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      // get left margin as a % by dividing the change in minAge by the full slider range\n+      const marginLeft = (sliderMin - +defaultMinAge) / (+defaultMaxAge - +defaultMinAge) * 100;\n+      const wrapper = document.getElementById('count-wrapper');\n+      if (!!wrapper) {\n+        wrapper.setAttribute('style', `margin-left: ${marginLeft}%; width: ${width}%; text-align: center;`);\n+        // set style properties also for cross-browser compatibility\n+        wrapper.style.marginLeft = `${marginLeft}%`;\n+        wrapper.style.width = `${width}%`;\n+        wrapper.style.textAlign = 'center';\n+      }\n+    }\n+  }\n+\n+  selectOption(opt: any) {\n+    triggerEvent('Cohort Builder Search', 'Click', `Demo - ${typeToTitle(opt.type)} - ${opt.name}`);\n+    this.props.select({...opt, name: `${typeToTitle(opt.type)} - ${opt.name}`});\n+  }\n+\n+  calculate(init?: boolean) {\n+    let count = 0;\n+    this.props.selections.forEach(sp => {\n+      if (init) {\n+        const node = this.state.nodes.find(n => n.conceptId === sp.conceptId);\n+        if (node) {\n+          sp.count = node.count;\n+        }\n+      }\n+      count += sp.count;\n+    });\n+    this.setState({count});\n+  }\n+\n+  calculateAge(init?: boolean) {\n+    const {maxAge, minAge} = this.state;\n+    if (!init || this.setTotalAge) {\n+      this.setState({calculating: true});\n+    }\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const min = init ? defaultMinAge : minAge;\n+    const max = init ? defaultMaxAge : maxAge;\n+    const parameter = {\n+      ...ageNode,\n+      name: `Age In Range ${min} - ${max}`,\n+      attributes: [{\n+        name: AttrName.AGE,\n+        operator: Operator.BETWEEN,\n+        operands: [min, max]\n+      }],\n+    };\n+    const request = {\n+      excludes: [],\n+      includes: [{\n+        items: [{\n+          type: DomainType.PERSON.toString(),\n+          searchParameters: [mapParameter(parameter)],\n+          modifiers: []\n+        }],\n+        temporal: false\n+      }],\n+      dataFilters: []\n+    };\n+    cohortBuilderApi().countParticipants(+cdrVersionId, request).then(response => {\n+      if (init) {\n+        const ageCounts = ageCountStore.getValue();\n+        ageCounts[cdrVersionId] = response;\n+        ageCountStore.next(ageCounts);\n+        if (this.setTotalAge) {\n+          this.setState({count: response});\n+        }\n+      } else {\n+        this.setState({count: response});\n+      }\n+      this.setState({calculating: false});\n+    }, (err) => {\n+      console.error(err);\n+      this.setState({calculating: false});\n+    });\n+  }\n+\n+  calculateAgeFromNodes(minOrMax?: string) {\n+    const {ageTypeNodes, ageType, maxAge, minAge} = this.state;\n+    let max = +maxAge;\n+    let min = +minAge;\n+    if (minOrMax === 'min' && min > +max) {\n+      min = max;\n+    } else if (minOrMax === 'max' && max < min) {\n+      max = min;\n+    }\n+    const count = ageTypeNodes[ageType]\n+      .filter(node => node.age >= min && node.age <= max)\n+      .reduce((acc, node) => acc + node.count, 0);\n+    this.setState({count, loading: false}, () => this.centerAgeCount());\n+  }\n+\n+  get showPreview() {\n+    const {selections, wizard} = this.props;\n+    return !this.state.loading\n+      && (selections && selections.length > 0)\n+      && !(wizard.type === CriteriaType.AGE && serverConfigStore.getValue().enableCBAgeTypeOptions);\n+  }\n+\n+  // Checks if form is in its initial state and if a count already exists before setting the total age count\n+  get setTotalAge() {\n+    const {count, maxAge, minAge} = this.state;\n+    return minAge === defaultMinAge && maxAge === defaultMaxAge && !count;\n+  }\n+\n+  render() {\n+    const {selectedIds, wizard} = this.props;\n+    const {ageType, calculating, count, loading, maxAge, minAge, nodes} = this.state;\n+    const isAge = wizard.type === CriteriaType.AGE;\n+    const calcDisabled = calculating || count !== null;\n+    return loading\n+      ? <div style={{textAlign: 'center'}}><Spinner style={{marginTop: '3rem'}}/></div>\n+      : <React.Fragment>\n+        {isAge\n+          // Age slider with number inputs\n+          ? <div style={styles.ageContainer}>\n+            <div style={styles.ageLabel}>\n+              Age Range\n+            </div>\n+            <div style={styles.sliderContainer}>\n+              <input style={styles.ageInput}\n+                type='number'\n+                id='min-age'\n+                min={defaultMinAge} max={maxAge}\n+                value={minAge}\n+                onBlur={() => this.onMinBlur()}\n+                onChange={(e) => this.onMinChange(e.target.value)}/>\n+              <div style={serverConfigStore.getValue().enableCBAgeTypeOptions\n+                ? {...styles.slider, marginBottom: '0.75rem'}\n+                : styles.slider}>\n+                {serverConfigStore.getValue().enableCBAgeTypeOptions && <div ref={(el) => this.ageWrapper = el} id='count-wrapper'>\n+                  {calculating\n+                    ? <Spinner size={16}/>\n+                    : <span style={styles.count} id='age-count'>\n+                      {count.toLocaleString()}\n+                    </span>\n+                  }\n+                </div>}\n+                <Nouislider behaviour='drag'\n+                  connect\n+                  instanceRef={(slider) => this.onSliderInit(slider)}\n+                  onChange={() => this.updateAgeSelection()}\n+                  onSlide={(v) => this.onSliderUpdate(v)}\n+                  range={{min: +defaultMinAge, max: +defaultMaxAge}}\n+                  start={[+defaultMinAge, +defaultMaxAge]}\n+                  step={1}/>\n+              </div>\n+              <input style={styles.ageInput}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTcwMzY5Mg=="}, "originalCommit": {"oid": "be25b814cb62a83cae6c9c625d5cb6cd998290b0"}, "originalPosition": 520}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2845, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}