{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NjQ1NTk1", "number": 3832, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowODozMlrOESZ1cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTozNjo1MVrOEVDj6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzMzMTA2OnYy", "diffSide": "LEFT", "path": "e2e/jest.test-setup.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowODozMlrOG3kINg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowODozMlrOG3kINg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNjc5MA==", "bodyText": "non-async functions, await not needed.", "url": "https://github.com/all-of-us/workbench/pull/3832#discussion_r460916790", "createdAt": "2020-07-27T14:08:32Z", "author": {"login": "aweng98"}, "path": "e2e/jest.test-setup.ts", "diffHunk": "@@ -15,8 +15,8 @@ const timeOut = parseInt(process.env.PUPPETEER_TIMEOUT, 10) || 90000;\n beforeEach(async () => {\n   await page.setUserAgent(userAgent);\n   // See https://github.com/puppeteer/puppeteer/blob/master/docs/api.md#pagesetdefaultnavigationtimeouttimeout\n-  await page.setDefaultNavigationTimeout(navTimeOut);\n-  await page.setDefaultTimeout(timeOut);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e098e10ab644babe2b37ce4d2fafa3f6a915a21"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzMzNDMzOnYy", "diffSide": "RIGHT", "path": "e2e/tests/cohorts/cohorts-create.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowOToxM1rOG3kKLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxNDowOToxM1rOG3kKLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDkxNzI5Mg==", "bodyText": "page.url() is also non-async call. removed await here and several other places.", "url": "https://github.com/all-of-us/workbench/pull/3832#discussion_r460917292", "createdAt": "2020-07-27T14:09:13Z", "author": {"login": "aweng98"}, "path": "e2e/tests/cohorts/cohorts-create.spec.ts", "diffHunk": "@@ -121,7 +121,7 @@ describe('User can create new Cohorts', () => {\n     const dataPage = new DataPage(page);\n \n     // Save url\n-    const workspaceDataUrl = await page.url();\n+    const workspaceDataUrl = page.url();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e098e10ab644babe2b37ce4d2fafa3f6a915a21"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTEyNjc2OnYy", "diffSide": "RIGHT", "path": "e2e/utils/element-utils.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTozNDowN1rOG7l84w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxOTowNVrOG7qAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0MDk2Mw==", "bodyText": "What does link argument name mean in this context? Maybe it should be renamed to el for consistency with attr.\nAm I right in assessing that this function is basically designed to have Puppeteer evaluate the ElementHandle into an actual Element which is then used to return the attribute value?", "url": "https://github.com/all-of-us/workbench/pull/3832#discussion_r465140963", "createdAt": "2020-08-04T15:34:07Z", "author": {"login": "gjuggler"}, "path": "e2e/utils/element-utils.ts", "diffHunk": "@@ -7,24 +7,24 @@ import {ElementHandle, JSHandle, Page} from 'puppeteer';\n  * @param {string} attribute Attribute name.\n  */\n export const getAttrValue = async (page: Page, element: ElementHandle, attribute: string): Promise<string> => {\n-  return page.evaluate((link, attr) => link.getAttribute(attr), element, attribute);\n+  return page.evaluate((link, attr) => {return link.getAttribute(attr)}, element, attribute);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e098e10ab644babe2b37ce4d2fafa3f6a915a21"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNzM1Nw==", "bodyText": "\ud83d\udc4d renamed link to elemt for consistency.\nand yes to the second question, the evaluate function does just that.", "url": "https://github.com/all-of-us/workbench/pull/3832#discussion_r465207357", "createdAt": "2020-08-04T17:19:05Z", "author": {"login": "aweng98"}, "path": "e2e/utils/element-utils.ts", "diffHunk": "@@ -7,24 +7,24 @@ import {ElementHandle, JSHandle, Page} from 'puppeteer';\n  * @param {string} attribute Attribute name.\n  */\n export const getAttrValue = async (page: Page, element: ElementHandle, attribute: string): Promise<string> => {\n-  return page.evaluate((link, attr) => link.getAttribute(attr), element, attribute);\n+  return page.evaluate((link, attr) => {return link.getAttribute(attr)}, element, attribute);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0MDk2Mw=="}, "originalCommit": {"oid": "3e098e10ab644babe2b37ce4d2fafa3f6a915a21"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTEzODk5OnYy", "diffSide": "RIGHT", "path": "e2e/utils/element-utils.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTozNjo1MVrOG7mEWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoyMToxNFrOG7qFCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0Mjg3Mg==", "bodyText": "What is the purpose of this change? This seems like the opposite syntax compared to the method above.", "url": "https://github.com/all-of-us/workbench/pull/3832#discussion_r465142872", "createdAt": "2020-08-04T15:36:51Z", "author": {"login": "gjuggler"}, "path": "e2e/utils/element-utils.ts", "diffHunk": "@@ -7,24 +7,24 @@ import {ElementHandle, JSHandle, Page} from 'puppeteer';\n  * @param {string} attribute Attribute name.\n  */\n export const getAttrValue = async (page: Page, element: ElementHandle, attribute: string): Promise<string> => {\n-  return page.evaluate((link, attr) => link.getAttribute(attr), element, attribute);\n+  return page.evaluate((link, attr) => {return link.getAttribute(attr)}, element, attribute);\n }\n \n /**\n  * Gets the property value.\n  * @param {ElementHandle} element Element.\n  * @param {string} property Property name.\n  */\n-export const getPropValue = async (element: ElementHandle, property: string): Promise<string> => {\n+export async function getPropValue<T> (element: ElementHandle, property: string): Promise<T> {\n   const value = await element.getProperty(property).then((prop) => prop.jsonValue());\n-  return value.toString().trim();\n+  return value as T;\n }\n \n /*\n  * Wait until the existing element changed in DOM.\n  * @param {Page} page Instance of Puppeteer page object.\n  * @param {ElementHandle} element Element.\n  */\n-export async function waitUntilChanged(page: Page, element: ElementHandle): Promise<JSHandle> {\n+export const waitUntilChanged = async (page: Page, element: ElementHandle): Promise<JSHandle> => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e098e10ab644babe2b37ce4d2fafa3f6a915a21"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwODU4Nw==", "bodyText": "forgot to change it back. I was experimenting.", "url": "https://github.com/all-of-us/workbench/pull/3832#discussion_r465208587", "createdAt": "2020-08-04T17:21:14Z", "author": {"login": "aweng98"}, "path": "e2e/utils/element-utils.ts", "diffHunk": "@@ -7,24 +7,24 @@ import {ElementHandle, JSHandle, Page} from 'puppeteer';\n  * @param {string} attribute Attribute name.\n  */\n export const getAttrValue = async (page: Page, element: ElementHandle, attribute: string): Promise<string> => {\n-  return page.evaluate((link, attr) => link.getAttribute(attr), element, attribute);\n+  return page.evaluate((link, attr) => {return link.getAttribute(attr)}, element, attribute);\n }\n \n /**\n  * Gets the property value.\n  * @param {ElementHandle} element Element.\n  * @param {string} property Property name.\n  */\n-export const getPropValue = async (element: ElementHandle, property: string): Promise<string> => {\n+export async function getPropValue<T> (element: ElementHandle, property: string): Promise<T> {\n   const value = await element.getProperty(property).then((prop) => prop.jsonValue());\n-  return value.toString().trim();\n+  return value as T;\n }\n \n /*\n  * Wait until the existing element changed in DOM.\n  * @param {Page} page Instance of Puppeteer page object.\n  * @param {ElementHandle} element Element.\n  */\n-export async function waitUntilChanged(page: Page, element: ElementHandle): Promise<JSHandle> {\n+export const waitUntilChanged = async (page: Page, element: ElementHandle): Promise<JSHandle> => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0Mjg3Mg=="}, "originalCommit": {"oid": "3e098e10ab644babe2b37ce4d2fafa3f6a915a21"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2467, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}