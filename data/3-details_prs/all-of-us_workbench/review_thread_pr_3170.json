{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDAyNDEy", "number": 3170, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyODo1NVrODh-K7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1MDowNFrODh-iDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ4MjA0OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyODo1NVrOFtAbcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzozOTozMVrOFtpojg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzI2Nw==", "bodyText": "Can I also call this with gradle directly?", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382737267", "createdAt": "2020-02-21T18:28:55Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -698,6 +698,16 @@ task exportWorkspaceData(type: JavaExec) {\n   }\n }\n \n+// See project.rb command: delete-workspaces", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2MTEwMg==", "bodyText": "Wouldn't recommend it. You need the cloud sql database proxy that project.rb will set up for you.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383361102", "createdAt": "2020-02-24T16:12:37Z", "author": {"login": "ericsong"}, "path": "api/build.gradle", "diffHunk": "@@ -698,6 +698,16 @@ task exportWorkspaceData(type: JavaExec) {\n   }\n }\n \n+// See project.rb command: delete-workspaces", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzI2Nw=="}, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjM2Ng==", "bodyText": "interesting.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383412366", "createdAt": "2020-02-24T17:39:31Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -698,6 +698,16 @@ task exportWorkspaceData(type: JavaExec) {\n   }\n }\n \n+// See project.rb command: delete-workspaces", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzI2Nw=="}, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ5Mjg3OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODozMjo1NFrOFtAifA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzowNjo0OFrOFtojuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczOTA2OA==", "bodyText": "Could you add a dry-run option that verifies the file list and logs whether each workspace exists or not?", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382739068", "createdAt": "2020-02-21T18:32:54Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1217,6 +1217,45 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def delete_workspaces(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--delete-list-filename [delete-list-filename]\",\n+      String,\n+      ->(opts, v) { opts.deleteListFilename = v},\n+      \"File containing list of workspaces to delete.\n+      Each line should contain a single workspace's namespace and firecloud name, separated by a comma\n+      Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM5NDc0Nw==", "bodyText": "good idea", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383394747", "createdAt": "2020-02-24T17:06:48Z", "author": {"login": "ericsong"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1217,6 +1217,45 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def delete_workspaces(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--delete-list-filename [delete-list-filename]\",\n+      String,\n+      ->(opts, v) { opts.deleteListFilename = v},\n+      \"File containing list of workspaces to delete.\n+      Each line should contain a single workspace's namespace and firecloud name, separated by a comma\n+      Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczOTA2OA=="}, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ5NzU2OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODozNDozNFrOFtAlZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODozNDozNFrOFtAlZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczOTgxMg==", "bodyText": "aside: I'm surprised this function doesn't pass anything to the block.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382739812", "createdAt": "2020-02-21T18:34:34Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1217,6 +1217,45 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def delete_workspaces(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--delete-list-filename [delete-list-filename]\",\n+      String,\n+      ->(opts, v) { opts.deleteListFilename = v},\n+      \"File containing list of workspaces to delete.\n+      Each line should contain a single workspace's namespace and firecloud name, separated by a comma\n+      Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+\n+  # Create a cloud context and apply the DB connection variables to the environment.\n+  # These will be read by Gradle and passed as Spring Boot properties to the command-line.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate()\n+\n+  flags = ([\n+      [\"--delete-list-filename\", op.opts.deleteListFilename]\n+  ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  flags.map! { |f| \"'#{f}'\" }\n+\n+  with_cloud_proxy_and_db(gcc) do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTQ5ODg4OnYy", "diffSide": "RIGHT", "path": "api/libproject/devstart.rb", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODozNTowM1rOFtAmMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODozNTowM1rOFtAmMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDAxOQ==", "bodyText": "Can we define a constant for the string \"delete-workspaces\"?", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382740019", "createdAt": "2020-02-21T18:35:03Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1217,6 +1217,45 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def delete_workspaces(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--delete-list-filename [delete-list-filename]\",\n+      String,\n+      ->(opts, v) { opts.deleteListFilename = v},\n+      \"File containing list of workspaces to delete.\n+      Each line should contain a single workspace's namespace and firecloud name, separated by a comma\n+      Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+\n+  # Create a cloud context and apply the DB connection variables to the environment.\n+  # These will be read by Gradle and passed as Spring Boot properties to the command-line.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate()\n+\n+  flags = ([\n+      [\"--delete-list-filename\", op.opts.deleteListFilename]\n+  ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  flags.map! { |f| \"'#{f}'\" }\n+\n+  with_cloud_proxy_and_db(gcc) do\n+    common.run_inline %W{\n+        gradle deleteWorkspaces\n+       -PappArgs=[#{flags.join(',')}]}\n+  end\n+end\n+\n+Common.register_command({\n+    :invocation => \"delete-workspaces\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTUwMzU2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODozNjo0MFrOFtApCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0MDo1MlrOFtprAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDc0NA==", "bodyText": "If it's not too tricky, I'd probably return some kind of status for whether the workspace was successfully deleted, wasn't there in the first place, or was otherwise not deletable. Might want to capture this on both our side and the firecloud side.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382740744", "createdAt": "2020-02-21T18:36:40Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -45,6 +45,8 @@\n \n   DbWorkspace saveWithLastModified(DbWorkspace workspace);\n \n+  void deleteWorkspace(DbWorkspace dbWorkspace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM2ODE4Mg==", "bodyText": "my preference is to handle failures through exceptions", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383368182", "createdAt": "2020-02-24T16:23:28Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -45,6 +45,8 @@\n \n   DbWorkspace saveWithLastModified(DbWorkspace workspace);\n \n+  void deleteWorkspace(DbWorkspace dbWorkspace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDc0NA=="}, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxMjk5Mw==", "bodyText": "But if you're deleting 1000 workspaces and 3 of them fail, an exception at the outer level isn't that helpful. Since we're in an eventually-consistent-ish system, I think you have to consider partial success cases (especially if it's not all in one transaction).", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383412993", "createdAt": "2020-02-24T17:40:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -45,6 +45,8 @@\n \n   DbWorkspace saveWithLastModified(DbWorkspace workspace);\n \n+  void deleteWorkspace(DbWorkspace dbWorkspace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDc0NA=="}, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTUxMzI2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo0MDoxNFrOFtAvSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo0MDoxNFrOFtAvSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MjM0NA==", "bodyText": "BTW, most of these are coming out soon in favor of the interceptor approach. I'm keeping them in place for a week or so since they're one release ahead and I need to get automation working on the logs-based stuff.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382742344", "createdAt": "2020-02-21T18:40:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -369,24 +369,15 @@ private void setDbWorkspaceFields(\n   public ResponseEntity<EmptyResponse> deleteWorkspace(\n       String workspaceNamespace, String workspaceId) {\n     recordOperationTime(\n-        () -> deleteWorkspaceImpl(workspaceNamespace, workspaceId), \"deleteWorkspace\");\n+        () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTUxNjQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo0MTozMFrOFtAxWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjoyODozOFrOFtnJHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0Mjg3NA==", "bodyText": "If you want, you could also inject the auditor into the service and fire from there. This is the only controller that has one I think, and that was due to how it was structured at the time. It's fine here though.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382742874", "createdAt": "2020-02-21T18:41:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -369,24 +369,15 @@ private void setDbWorkspaceFields(\n   public ResponseEntity<EmptyResponse> deleteWorkspace(\n       String workspaceNamespace, String workspaceId) {\n     recordOperationTime(\n-        () -> deleteWorkspaceImpl(workspaceNamespace, workspaceId), \"deleteWorkspace\");\n+        () -> {\n+          DbWorkspace dbWorkspace = workspaceService.getRequired(workspaceNamespace, workspaceId);\n+          workspaceService.deleteWorkspace(dbWorkspace);\n+          workspaceAuditor.fireDeleteAction(dbWorkspace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3MTU1MQ==", "bodyText": "I left it in the controller because it seemed like that was the level where all of the audit actions were being fired and it made sense to me if the intent is to track user actions", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383371551", "createdAt": "2020-02-24T16:28:38Z", "author": {"login": "ericsong"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -369,24 +369,15 @@ private void setDbWorkspaceFields(\n   public ResponseEntity<EmptyResponse> deleteWorkspace(\n       String workspaceNamespace, String workspaceId) {\n     recordOperationTime(\n-        () -> deleteWorkspaceImpl(workspaceNamespace, workspaceId), \"deleteWorkspace\");\n+        () -> {\n+          DbWorkspace dbWorkspace = workspaceService.getRequired(workspaceNamespace, workspaceId);\n+          workspaceService.deleteWorkspace(dbWorkspace);\n+          workspaceAuditor.fireDeleteAction(dbWorkspace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0Mjg3NA=="}, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTUxOTQ3OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo0MjoyN1rOFtAzNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0NDowNVrOFtpxrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MzM0OQ==", "bodyText": "Was this easier than simply implementing a batch delete API endpoint? I'd rather have swagger boilerplate than have to hack the service injection like this.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382743349", "createdAt": "2020-02-21T18:42:27Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3NDQxNA==", "bodyText": "For me, yes. Adding it as an admin endpoint would involve adding a one-off to our API, adding a new authority role, and writing some front end to fire the endpoint. Writing the calls in ruby/node isn't trivial either since we don't have API client packages for either and we'd have to figure out an authentication workflow to fire them.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383374414", "createdAt": "2020-02-24T16:32:58Z", "author": {"login": "ericsong"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MzM0OQ=="}, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxNDcwMw==", "bodyText": "I know it feels heavy, but some of these are one-time things that will pay off.\nFor example, if we don't already have an administrative/devops authority, that's something I'll be wanting. If you want to use Ruby, I've already got a ticket to start generating a client library for that at https://precisionmedicineinitiative.atlassian.net/browse/RW-4499. But really, couldn't you just use curl for this?\nThe other consideration is that we already have testing patterns for this kind of thing, but with the tools, it's less clear how we make sure they keep working if they're infrequently used.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383414703", "createdAt": "2020-02-24T17:44:05Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MzM0OQ=="}, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTUyMzg2OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo0Mzo1OFrOFtA2FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo0Mzo1OFrOFtA2FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NDA4NQ==", "bodyText": "future: if we determine a useful core of the workspaceService we could break that into its own service and inject the whole thing.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382744085", "createdAt": "2020-02-21T18:43:58Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean\n+  public WorkspaceService workspaceService(\n+      FireCloudService fireCloudService,\n+      Clock clock,\n+      WorkspaceDao workspaceDao,\n+      UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<DbUser> dbUserProvider) {\n+    return new WorkspaceServiceImpl(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTUyOTQ0OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo0NjowMlrOFtA5dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNjozNzo0M1rOFtnffA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NDk0OA==", "bodyText": "This user will actually show up in the audit logs. @calbach and I have been discussing several angles to this problem (i.e. attributing the agent correctly with an anonymous user), and we considered but ultimately shied away from a placeholder user.\nHow would you feel about providing the username of the devops person running the tool on the command line and looking them up so that we have an actual, helpful user ID & email address in the log?", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382744948", "createdAt": "2020-02-21T18:46:02Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean\n+  public WorkspaceService workspaceService(\n+      FireCloudService fireCloudService,\n+      Clock clock,\n+      WorkspaceDao workspaceDao,\n+      UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<DbUser> dbUserProvider) {\n+    return new WorkspaceServiceImpl(\n+        null,\n+        null,\n+        clock,\n+        null,\n+        null,\n+        null,\n+        fireCloudService,\n+        null,\n+        dbUserProvider,\n+        userRecentWorkspaceDao,\n+        null,\n+        workspaceDao,\n+        null,\n+        null);\n+  }\n+\n+  static DbUser currentImpersonatedUser;\n+\n+  @Bean\n+  @Primary\n+  @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+  DbUser user() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM3NzI3Ng==", "bodyText": "I don't think we're logging the delete action ATM.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r383377276", "createdAt": "2020-02-24T16:37:43Z", "author": {"login": "ericsong"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean\n+  public WorkspaceService workspaceService(\n+      FireCloudService fireCloudService,\n+      Clock clock,\n+      WorkspaceDao workspaceDao,\n+      UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<DbUser> dbUserProvider) {\n+    return new WorkspaceServiceImpl(\n+        null,\n+        null,\n+        clock,\n+        null,\n+        null,\n+        null,\n+        fireCloudService,\n+        null,\n+        dbUserProvider,\n+        userRecentWorkspaceDao,\n+        null,\n+        workspaceDao,\n+        null,\n+        null);\n+  }\n+\n+  static DbUser currentImpersonatedUser;\n+\n+  @Bean\n+  @Primary\n+  @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+  DbUser user() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NDk0OA=="}, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2OTU0MTI0OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchFireCloudUserProfile.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1MDowNFrOFtBAxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1MDowNFrOFtBAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NjgyMA==", "bodyText": "\ud83d\udc4f  ComponentScan assumes a lot about our package management discipline.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382746820", "createdAt": "2020-02-21T18:50:04Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchFireCloudUserProfile.java", "diffHunk": "@@ -23,7 +25,7 @@\n  * domain-wide delegation to make FireCloud API calls impersonating other users.\n  */\n @Configuration\n-@ComponentScan(\"org.pmiops.workbench.firecloud\")\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3391, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}