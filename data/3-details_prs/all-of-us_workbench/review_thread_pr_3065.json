{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzA1NDk5", "number": 3065, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjowMTozOVrODcEyKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjowMzowNlrODcEznw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzY1MDk2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjowMTozOVrOFj7YOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjowMTozOVrOFj7YOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNzMzOA==", "bodyText": "Naming nit: for consistency w/ the class name, prefer 'workspaceService' as the member variable name.", "url": "https://github.com/all-of-us/workbench/pull/3065#discussion_r373217338", "createdAt": "2020-01-30T22:01:39Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -42,6 +41,7 @@\n   private RdrExportDao rdrExportDao;\n   private WorkspaceDao workspaceDao;\n   private UserDao userDao;\n+  private WorkspaceService workspacesApi;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7a3c46ca92296f150a4256858eaf340aa1948b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzY1NDcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMjowMzowNlrOFj7aog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTozOTowOVrOFk1woQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNzk1NA==", "bodyText": "Will the RDR really be happy to receive a totally-empty entry for workspace users? I might have expected here to either: (1) skip exporting this workspace entirely, since the collaborators list is pretty important to the state of the workspace, or (2) leave the collaborators list empty.", "url": "https://github.com/all-of-us/workbench/pull/3065#discussion_r373217954", "createdAt": "2020-01-30T22:03:06Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -245,22 +247,28 @@ private RdrWorkspace toRdrWorkspace(DbWorkspace dbWorkspace) {\n     rdrWorkspace.setIntendToStudy(dbWorkspace.getIntendedStudy());\n     rdrWorkspace.setFindingsFromStudy(dbWorkspace.getAnticipatedFindings());\n \n-    // Call Firecloud to get a list of Collaborators\n-    FirecloudWorkspaceACL firecloudResponse =\n-        fireCloudService.getWorkspaceAcl(\n-            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n-    Map<String, FirecloudWorkspaceAccessEntry> aclMap = firecloudResponse.getAcl();\n+    try {\n+      // Call Firecloud to get a list of Collaborators\n+      List<UserRole> collaboratorsMap =\n+          workspacesApi.getFirecloudUserRoles(\n+              dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n \n-    // Since the USERS cannot be deleted from workbench yet, hence sending the the status of\n-    // COLLABORATOR as ACTIVE\n-    aclMap.forEach(\n-        (email, access) -> {\n-          RdrWorkspaceUser workspaceUserMap = new RdrWorkspaceUser();\n-          workspaceUserMap.setUserId((int) userDao.findUserByUsername(email).getUserId());\n-          workspaceUserMap.setRole(RdrWorkspaceUser.RoleEnum.fromValue(access.getAccessLevel()));\n-          workspaceUserMap.setStatus(RdrWorkspaceUser.StatusEnum.ACTIVE);\n-          rdrWorkspace.addWorkspaceUsersItem(workspaceUserMap);\n-        });\n+      // Since the USERS cannot be deleted from workbench yet, hence sending the the status of\n+      // COLLABORATOR as ACTIVE\n+      collaboratorsMap.forEach(\n+          (userRole) -> {\n+            RdrWorkspaceUser workspaceUserMap = new RdrWorkspaceUser();\n+            workspaceUserMap.setUserId(\n+                (int) userDao.findUserByUsername(userRole.getEmail()).getUserId());\n+            workspaceUserMap.setRole(\n+                RdrWorkspaceUser.RoleEnum.fromValue(userRole.getRole().toString()));\n+            workspaceUserMap.setStatus(RdrWorkspaceUser.StatusEnum.ACTIVE);\n+            rdrWorkspace.addWorkspaceUsersItem(workspaceUserMap);\n+          });\n+    } catch (Exception ex) {\n+      log.warning(\"Exception while retrieving workspace Collaborators\");\n+      rdrWorkspace.addWorkspaceUsersItem(new RdrWorkspaceUser());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d7a3c46ca92296f150a4256858eaf340aa1948b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE3Mzg1Nw==", "bodyText": "As discussed offline ,in case of error we will not log the workspace id for which there was an error and will skip it", "url": "https://github.com/all-of-us/workbench/pull/3065#discussion_r374173857", "createdAt": "2020-02-03T15:39:09Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/rdr/RdrExportServiceImpl.java", "diffHunk": "@@ -245,22 +247,28 @@ private RdrWorkspace toRdrWorkspace(DbWorkspace dbWorkspace) {\n     rdrWorkspace.setIntendToStudy(dbWorkspace.getIntendedStudy());\n     rdrWorkspace.setFindingsFromStudy(dbWorkspace.getAnticipatedFindings());\n \n-    // Call Firecloud to get a list of Collaborators\n-    FirecloudWorkspaceACL firecloudResponse =\n-        fireCloudService.getWorkspaceAcl(\n-            dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n-    Map<String, FirecloudWorkspaceAccessEntry> aclMap = firecloudResponse.getAcl();\n+    try {\n+      // Call Firecloud to get a list of Collaborators\n+      List<UserRole> collaboratorsMap =\n+          workspacesApi.getFirecloudUserRoles(\n+              dbWorkspace.getWorkspaceNamespace(), dbWorkspace.getFirecloudName());\n \n-    // Since the USERS cannot be deleted from workbench yet, hence sending the the status of\n-    // COLLABORATOR as ACTIVE\n-    aclMap.forEach(\n-        (email, access) -> {\n-          RdrWorkspaceUser workspaceUserMap = new RdrWorkspaceUser();\n-          workspaceUserMap.setUserId((int) userDao.findUserByUsername(email).getUserId());\n-          workspaceUserMap.setRole(RdrWorkspaceUser.RoleEnum.fromValue(access.getAccessLevel()));\n-          workspaceUserMap.setStatus(RdrWorkspaceUser.StatusEnum.ACTIVE);\n-          rdrWorkspace.addWorkspaceUsersItem(workspaceUserMap);\n-        });\n+      // Since the USERS cannot be deleted from workbench yet, hence sending the the status of\n+      // COLLABORATOR as ACTIVE\n+      collaboratorsMap.forEach(\n+          (userRole) -> {\n+            RdrWorkspaceUser workspaceUserMap = new RdrWorkspaceUser();\n+            workspaceUserMap.setUserId(\n+                (int) userDao.findUserByUsername(userRole.getEmail()).getUserId());\n+            workspaceUserMap.setRole(\n+                RdrWorkspaceUser.RoleEnum.fromValue(userRole.getRole().toString()));\n+            workspaceUserMap.setStatus(RdrWorkspaceUser.StatusEnum.ACTIVE);\n+            rdrWorkspace.addWorkspaceUsersItem(workspaceUserMap);\n+          });\n+    } catch (Exception ex) {\n+      log.warning(\"Exception while retrieving workspace Collaborators\");\n+      rdrWorkspace.addWorkspaceUsersItem(new RdrWorkspaceUser());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNzk1NA=="}, "originalCommit": {"oid": "9d7a3c46ca92296f150a4256858eaf340aa1948b"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3532, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}