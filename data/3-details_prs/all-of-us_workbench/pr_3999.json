{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzcyMDM0", "number": 3999, "title": "[risk=low][RW-5475] Admin read-only notebook endpoint", "bodyText": "Description:\nTested by verifying a match between contents for admin and non-admin versions:\nAuthed as a non-admin user with a notebook in a workspace:\ncurl (plus bearer and JSON headers) -X POST -d' ' -o j2_user.json \\ http://localhost:8081/v1/workspaces/aou-rw-local1-de188ff4/joel2ws1/notebooks/spend.ipynb/readonly\nUser endpoint - Saves j2_user.json\ncurl (plus bearer and JSON headers) -X POST -d' ' \\ http://localhost:8081/v1/admin/workspaces/aou-rw-local1-de188ff4/joel2ws1/notebooks/spend.ipynb/readonly\nAdmin endpoint - returns 403\nAuthed as a different user with RESEARCHER_DATA_VIEW Authority:\ncurl (plus bearer and JSON headers)  -X POST -d' ' \\ http://localhost:8081/v1/workspaces/aou-rw-local1-de188ff4/joel2ws1/notebooks/spend.ipynb/readonly\nUser endpoint - returns 401 because it's the wrong user\ncurl (plus bearer and JSON headers) -X POST -d'{\"reason\": \"test\"}' -o j_admin.json \\ http://localhost:8081/v1/admin/workspaces/aou-rw-local1-de188ff4/joel2ws1/notebooks/spend.ipynb/readonly\nAdmin endpoint - saves j_admin.json\nVerified these files are identical.\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test:local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-09-14T17:29:12Z", "url": "https://github.com/all-of-us/workbench/pull/3999", "merged": true, "mergeCommit": {"oid": "c2fed4f7bf527603ba17adb17a291be4153440f6"}, "closed": true, "closedAt": "2020-09-14T20:30:36Z", "author": {"login": "jmthibault79"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI2Ta_gH2gAyNDg2NzcyMDM0OmU5NzYyMzFkMDY1OTQ4MzdmNDYxNjE0NzIyY2YxYjYzNjFmNDMxMDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdI5Gk0AFqTQ4ODExMTI2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e976231d06594837f461614722cf1b6361f43102", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/e976231d06594837f461614722cf1b6361f43102", "committedDate": "2020-09-14T17:04:43Z", "message": "first attempt at adminReadOnlyNotebooks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71e5e2d86c05f0861b086b6cca884fd36b853b0b", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/71e5e2d86c05f0861b086b6cca884fd36b853b0b", "committedDate": "2020-09-14T17:04:43Z", "message": "Audit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c49bef5594977049fde79c8512aa5935f159aa18", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/c49bef5594977049fde79c8512aa5935f159aa18", "committedDate": "2020-09-14T17:04:57Z", "message": "Add adminGetReadOnlyHtml()\n\nAdd serviceAccountStaticNotebooksApi\n\nSwitch to non-String body due to Swagger bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abb3801809d3471674fd25c48d3a4edb3db6aa59", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/abb3801809d3471674fd25c48d3a4edb3db6aa59", "committedDate": "2020-09-14T17:14:40Z", "message": "rebase fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "992d972537070052137ec567fec647ec318dc468", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/992d972537070052137ec567fec647ec318dc468", "committedDate": "2020-09-14T17:16:59Z", "message": "lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e216e517492d57ea145d4d80f2b7123cb236107", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/5e216e517492d57ea145d4d80f2b7123cb236107", "committedDate": "2020-09-14T17:37:11Z", "message": "restore original method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/e49c23f2a1605a5a8100d344e4c905d7add003bb", "committedDate": "2020-09-14T18:22:52Z", "message": "Add MockBean of AdminAuditor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDM3NDU0", "url": "https://github.com/all-of-us/workbench/pull/3999#pullrequestreview-488037454", "createdAt": "2020-09-14T18:30:30Z", "commit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozMDozMFrOHRhmXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0MToxN1rOHRh8_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzODMzMg==", "bodyText": "So far the convention has been snake_case for property names, though to be fair I cut them up in the client for display. I have a slight preference for consistency on the DB side.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488138332", "createdAt": "2020-09-14T18:30:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/AdminAuditorImpl.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent\n+import org.pmiops.workbench.actionaudit.ActionAuditService\n+import org.pmiops.workbench.actionaudit.ActionType\n+import org.pmiops.workbench.actionaudit.AgentType\n+import org.pmiops.workbench.actionaudit.TargetType\n+import org.pmiops.workbench.db.model.DbUser\n+import org.pmiops.workbench.model.AccessReason\n+import org.springframework.beans.factory.annotation.Autowired\n+import org.springframework.beans.factory.annotation.Qualifier\n+import org.springframework.stereotype.Service\n+import java.time.Clock\n+import java.util.logging.Logger\n+import javax.inject.Provider\n+\n+@Service\n+class AdminAuditorImpl @Autowired\n+constructor(\n+    private val userProvider: Provider<DbUser>,\n+    private val actionAuditService: ActionAuditService,\n+    private val clock: Clock,\n+    @Qualifier(\"ACTION_ID\") private val actionIdProvider: Provider<String>\n+) : AdminAuditor {\n+\n+    override fun fireViewNotebookAction(workspaceNamespace: String, workspaceName: String, accessReason: AccessReason, notebookFilename: String) {\n+        val dbUser = userProvider.get()\n+        val actionId = actionIdProvider.get()\n+\n+        val props = mapOf(\n+            \"Workspace Namespace\" to workspaceNamespace,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzODg5MA==", "bodyText": "nit: please use a single timestamp for the whole action (i.e. all events under the action id). There are places where I think I make that assumption.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488138890", "createdAt": "2020-09-14T18:31:35Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/auditors/AdminAuditorImpl.kt", "diffHunk": "@@ -0,0 +1,55 @@\n+package org.pmiops.workbench.actionaudit.auditors\n+\n+import org.pmiops.workbench.actionaudit.ActionAuditEvent\n+import org.pmiops.workbench.actionaudit.ActionAuditService\n+import org.pmiops.workbench.actionaudit.ActionType\n+import org.pmiops.workbench.actionaudit.AgentType\n+import org.pmiops.workbench.actionaudit.TargetType\n+import org.pmiops.workbench.db.model.DbUser\n+import org.pmiops.workbench.model.AccessReason\n+import org.springframework.beans.factory.annotation.Autowired\n+import org.springframework.beans.factory.annotation.Qualifier\n+import org.springframework.stereotype.Service\n+import java.time.Clock\n+import java.util.logging.Logger\n+import javax.inject.Provider\n+\n+@Service\n+class AdminAuditorImpl @Autowired\n+constructor(\n+    private val userProvider: Provider<DbUser>,\n+    private val actionAuditService: ActionAuditService,\n+    private val clock: Clock,\n+    @Qualifier(\"ACTION_ID\") private val actionIdProvider: Provider<String>\n+) : AdminAuditor {\n+\n+    override fun fireViewNotebookAction(workspaceNamespace: String, workspaceName: String, accessReason: AccessReason, notebookFilename: String) {\n+        val dbUser = userProvider.get()\n+        val actionId = actionIdProvider.get()\n+\n+        val props = mapOf(\n+            \"Workspace Namespace\" to workspaceNamespace,\n+            \"Workspace Name\" to workspaceName,\n+            \"Notebook Name\" to notebookFilename,\n+            \"Access Reason\" to accessReason.reason\n+        )\n+\n+        val events = props.map {\n+            ActionAuditEvent(\n+                    actionId = actionId,\n+                    actionType = ActionType.VIEW,\n+                    agentType = AgentType.ADMINISTRATOR,\n+                    agentEmailMaybe = dbUser.username,\n+                    agentIdMaybe = dbUser.userId,\n+                    targetType = TargetType.NOTEBOOK,\n+                    targetPropertyMaybe = it.key,\n+                    newValueMaybe = it.value,\n+                    timestamp = clock.millis()) }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzOTY3NA==", "bodyText": "Please update the PR description with the general approach here. I didn't expect to see FC cloud changes, but it makes sense.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488139674", "createdAt": "2020-09-14T18:33:03Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "diffHunk": "@@ -38,6 +38,9 @@\n   public static final String SERVICE_ACCOUNT_GROUPS_API = \"serviceAccountGroupsApi\";\n   public static final String SERVICE_ACCOUNT_WORKSPACE_API = \"workspaceAclsApi\";\n   public static final String END_USER_WORKSPACE_API = \"workspacesApi\";\n+  public static final String SERVICE_ACCOUNT_STATIC_NOTEBOOKS_API =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDIxOQ==", "bodyText": "Looks like these three lines could be their own helper function called by both beans.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488140219", "createdAt": "2020-09-14T18:34:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudConfig.java", "diffHunk": "@@ -91,15 +94,24 @@ public WorkspacesApi workspacesApiAcls(\n     return api;\n   }\n \n-  @Bean\n+  @Bean(name = END_USER_STATIC_NOTEBOOKS_API)\n   @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n-  public StaticNotebooksApi staticNotebooksApi(\n+  public StaticNotebooksApi endUserStaticNotebooksApi(\n       @Qualifier(END_USER_API_CLIENT) ApiClient apiClient) {\n     StaticNotebooksApi api = new StaticNotebooksApi();\n     api.setApiClient(apiClient);\n     return api;\n   }\n \n+  @Bean(name = SERVICE_ACCOUNT_STATIC_NOTEBOOKS_API)\n+  @RequestScope(proxyMode = ScopedProxyMode.DEFAULT)\n+  public StaticNotebooksApi serviceAccountStaticNotebooksApi(\n+      @Qualifier(SERVICE_ACCOUNT_API_CLIENT) ApiClient apiClient) {\n+    StaticNotebooksApi api = new StaticNotebooksApi();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDcwOQ==", "bodyText": "nit: change context to unused here and below.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488140709", "createdAt": "2020-09-14T18:34:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/firecloud/FireCloudServiceImpl.java", "diffHunk": "@@ -471,7 +476,13 @@ public boolean isUserMemberOfGroup(String email, String groupName) {\n   @Override\n   public String staticNotebooksConvert(byte[] notebook) {\n     return retryHandler.run(\n-        (context) -> staticNotebooksApiProvider.get().convertNotebook(notebook));\n+        (context) -> endUserStaticNotebooksApiProvider.get().convertNotebook(notebook));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MjExNA==", "bodyText": "Huh. I'm surprised there's not a flag or something to avoid this.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488142114", "createdAt": "2020-09-14T18:37:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/NotebooksServiceImpl.java", "diffHunk": "@@ -255,6 +255,24 @@ public String getReadOnlyHtml(\n     return PREVIEW_SANITIZER.sanitize(fireCloudService.staticNotebooksConvert(blob.getContent()));\n   }\n \n+  @Override\n+  public String adminGetReadOnlyHtml(\n+      String workspaceNamespace, String workspaceName, String notebookName) {\n+    String bucketName =\n+        fireCloudService\n+            .getWorkspaceAsService(workspaceNamespace, workspaceName)\n+            .getWorkspace()\n+            .getBucketName();\n+\n+    Blob blob = getBlobWithSizeConstraint(bucketName, notebookName);\n+    // We need to send a byte array so the ApiClient attaches the body as is instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MjYxOA==", "bodyText": "super-nit: I'd kind of expect the notebook name to come before the reason, as it's the third in a line of increasingly specific identifiers.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488142618", "createdAt": "2020-09-14T18:38:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminService.java", "diffHunk": "@@ -26,4 +27,10 @@ WorkspaceAuditLogQueryResponse getAuditLogEntries(\n       Integer limit,\n       Long afterMillis,\n       @Nullable Long beforeMillisNullable);\n+\n+  String getReadOnlyNotebook(\n+      String workspaceNamespace,\n+      String workspaceName,\n+      AccessReason accessReason,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NDEyNg==", "bodyText": "Can you please add a unit test on this service (and possibly notebooks service)? I'm especially interested in showing this serialization workaround.", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488144126", "createdAt": "2020-09-14T18:41:17Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaceadmin/WorkspaceAdminServiceImpl.java", "diffHunk": "@@ -220,6 +227,21 @@ public WorkspaceAuditLogQueryResponse getAuditLogEntries(\n         workspaceDatabaseId, limit, after, before);\n   }\n \n+  @Override\n+  public String getReadOnlyNotebook(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDQ4ODQ5", "url": "https://github.com/all-of-us/workbench/pull/3999#pullrequestreview-488048849", "createdAt": "2020-09-14T18:47:05Z", "commit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NzowNVrOHRiJbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NzowNVrOHRiJbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NzMwOQ==", "bodyText": "Is the html base64 encoded or something? How do you get it to play nice with JSON otherwise?", "url": "https://github.com/all-of-us/workbench/pull/3999#discussion_r488147309", "createdAt": "2020-09-14T18:47:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -1697,6 +1697,30 @@ paths:\n           description: HTML Read Only version of the notebook\n           schema:\n             \"$ref\": \"#/definitions/ReadOnlyNotebookResponse\"\n+  \"/v1/admin/workspaces/{workspaceNamespace}/{workspaceId}/notebooks/{notebookName}/readonly\":\n+    parameters:\n+      - \"$ref\": \"#/parameters/workspaceNamespace\"\n+      - \"$ref\": \"#/parameters/workspaceId\"\n+    post:\n+      tags:\n+        - workspaceAdmin\n+      description: Get the HTML for a read only view of the notebook. RESEARCHER_DATA_VIEW authority required.\n+      operationId: adminReadOnlyNotebook\n+      parameters:\n+        - in: body\n+          name: accessReason\n+          required: true\n+          schema:\n+            \"$ref\": \"#/definitions/AccessReason\"\n+        - in: path\n+          name: notebookName\n+          required: true\n+          type: string\n+      responses:\n+        200:\n+          description: HTML Read Only version of the notebook\n+          schema:\n+            \"$ref\": \"#/definitions/ReadOnlyNotebookResponse\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49c23f2a1605a5a8100d344e4c905d7add003bb"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3599d1dfddd31091151ce9fa944944c1f7cb67a", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/e3599d1dfddd31091151ce9fa944944c1f7cb67a", "committedDate": "2020-09-14T18:55:12Z", "message": "snake_case prop names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8de9b424437e3125d9fb8260ad1bd94863a17bab", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/8de9b424437e3125d9fb8260ad1bd94863a17bab", "committedDate": "2020-09-14T18:55:56Z", "message": "common timestamp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f177a7b78198b87ee23d12d275f8127b6cbd799", "author": {"user": {"login": "jmthibault79", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/8f177a7b78198b87ee23d12d275f8127b6cbd799", "committedDate": "2020-09-14T19:04:28Z", "message": "reorder params"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MTExMjY4", "url": "https://github.com/all-of-us/workbench/pull/3999#pullrequestreview-488111268", "createdAt": "2020-09-14T20:20:24Z", "commit": {"oid": "8f177a7b78198b87ee23d12d275f8127b6cbd799"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4216, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}