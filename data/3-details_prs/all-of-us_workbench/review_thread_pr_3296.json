{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDA2OTg0", "number": 3296, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxODoxN1rODqz9jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1ODo0NVrODq6H3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjE4MTI3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxODoxN1rOF6yX5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDoxODoxN1rOF6yX5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzE4NzA0NQ==", "bodyText": "I was a little surprised that we didn't have this in our backend config already. I think it's distinct enough from the API base URL (they're different App Engine services with different base paths) that it's worth including here. I'm open to alternative suggestions, though.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397187045", "createdAt": "2020-03-24T14:18:17Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -141,6 +141,9 @@ public String freeTierBillingAccountName() {\n   }\n \n   public static class ServerConfig {\n+    // Base URL for the webapp (e.g. client / ui service).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "295c37a88b84c1e8f1a0d85755bce811d26037fc"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzA3MTM3OnYy", "diffSide": "RIGHT", "path": "api/config/config_local.json", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzoyODozOVrOF67X4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDoxNjo1NFrOF7sn3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNDQ5OQ==", "bodyText": "nit: Can/should this port be parameterized somehow (independently of the url)? I guess it's fine to wait on that.\nDo we not support https locally?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397334499", "createdAt": "2020-03-24T17:28:39Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -46,6 +46,7 @@\n     \"gSuiteDomain\": \"fake-research-aou.org\"\n   },\n   \"server\": {\n+    \"clientBaseUrl\": \"http:\\/\\/localhost:4200\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4NDUzNw==", "bodyText": "I think it's reasonable for a dev to edit this config when developing locally, if it doesn't fit their needs. I don't recall anyone ever having issues with this port number though.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398084537", "createdAt": "2020-03-25T18:38:04Z", "author": {"login": "gjuggler"}, "path": "api/config/config_local.json", "diffHunk": "@@ -46,6 +46,7 @@\n     \"gSuiteDomain\": \"fake-research-aou.org\"\n   },\n   \"server\": {\n+    \"clientBaseUrl\": \"http:\\/\\/localhost:4200\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNDQ5OQ=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MTQwNQ==", "bodyText": "Sounds good. It's mainly just aesthetics and my hyperactive tendency to attack any place two pieces of information are stored in a single field.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398141405", "createdAt": "2020-03-25T20:16:54Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -46,6 +46,7 @@\n     \"gSuiteDomain\": \"fake-research-aou.org\"\n   },\n   \"server\": {\n+    \"clientBaseUrl\": \"http:\\/\\/localhost:4200\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNDQ5OQ=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzA3Nzk2OnYy", "diffSide": "RIGHT", "path": "api/config/config_perf.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzozMDoyMFrOF67cNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzozNDoxOFrOF7mjug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNTYwNw==", "bodyText": "I'm slightly confused by the client prefix on this name, as we're in the server section, and I don't know exactly which client we're talking about. Would it be correct to call it uiBaseUrl?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397335607", "createdAt": "2020-03-24T17:30:20Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_perf.json", "diffHunk": "@@ -49,6 +49,7 @@\n     \"gSuiteDomain\": \"perf.fake-research-aou.org\"\n   },\n   \"server\": {\n+    \"clientBaseUrl\": \"https:\\/\\/all-of-us-rw-perf.appspot.com\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA0MjA0Mg==", "bodyText": "Yeah... that makes a ton more sense. Done!", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398042042", "createdAt": "2020-03-25T17:34:18Z", "author": {"login": "gjuggler"}, "path": "api/config/config_perf.json", "diffHunk": "@@ -49,6 +49,7 @@\n     \"gSuiteDomain\": \"perf.fake-research-aou.org\"\n   },\n   \"server\": {\n+    \"clientBaseUrl\": \"https:\\/\\/all-of-us-rw-perf.appspot.com\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNTYwNw=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzA5MjMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzozMzo1M1rOF67ljQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDoxNToyNVrOF7skcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNzk5Nw==", "bodyText": "It still seems odd for this to be named SumoLogicController, since it doesn't directly depend on or control SumoLogic at all. Maybe EgressEventController?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397337997", "createdAt": "2020-03-24T17:33:53Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -26,15 +27,18 @@\n   private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n   private final EgressEventAuditor egressEventAuditor;\n   private final CloudStorageService cloudStorageService;\n+  private final OpsGenieService opsGenieService;\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n \n   @Autowired\n   SumoLogicController(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA1MTI5MQ==", "bodyText": "I added some class-level comments addressing this. This controller is an inbound API that is very much tied to SumoLogic's data export structure, so it is absolutely Sumo-specific.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398051291", "createdAt": "2020-03-25T17:47:51Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -26,15 +27,18 @@\n   private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n   private final EgressEventAuditor egressEventAuditor;\n   private final CloudStorageService cloudStorageService;\n+  private final OpsGenieService opsGenieService;\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n \n   @Autowired\n   SumoLogicController(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNzk5Nw=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0MDUyOA==", "bodyText": "Good point.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398140528", "createdAt": "2020-03-25T20:15:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/SumoLogicController.java", "diffHunk": "@@ -26,15 +27,18 @@\n   private static final Logger log = Logger.getLogger(SumoLogicController.class.getName());\n   private final EgressEventAuditor egressEventAuditor;\n   private final CloudStorageService cloudStorageService;\n+  private final OpsGenieService opsGenieService;\n   private final Provider<WorkbenchConfig> workbenchConfigProvider;\n \n   @Autowired\n   SumoLogicController(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzNzk5Nw=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzA5OTc2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzozNTo0NFrOF67qZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo0NToyN1rOF7pboQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzOTIzOA==", "bodyText": "nit: it might help to organize all the file names in this bucket into a CedentialFile enum so you can ensure that you don't accidentally reuse one. I guess the bigger benefit is containing all these strings into one class that knows what to do with them.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397339238", "createdAt": "2020-03-24T17:35:44Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.OpsGenieClient;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+public class OpsGenieConfig {\n+\n+  static final String OPSGENIE_API_KEY_FILENAME = \"opsgenie-key.txt\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA4OTEyMQ==", "bodyText": "I'll punt on this, it might be a nice cleanup though \u2013\u00a0filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4661 to track.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398089121", "createdAt": "2020-03-25T18:45:27Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.OpsGenieClient;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+public class OpsGenieConfig {\n+\n+  static final String OPSGENIE_API_KEY_FILENAME = \"opsgenie-key.txt\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMzOTIzOA=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzEwNjE2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzozNzoyM1rOF67uvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzozNzoyM1rOF67uvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MDM0OQ==", "bodyText": "TOL: I think it would be good to have a policy here for what kinds of changes should be dynamic vs requiring a restart. I agree that a credential rotation shouldn't require a restart.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397340349", "createdAt": "2020-03-24T17:37:23Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.OpsGenieClient;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+public class OpsGenieConfig {\n+\n+  static final String OPSGENIE_API_KEY_FILENAME = \"opsgenie-key.txt\";\n+\n+  // This bean is prototype-scoped, so a Cloud Storage API call will be made every time a new\n+  // instance is injected. This is okay since we expect alert API requests to be rare; the benefit\n+  // is that API key changes will be reflected immediately rather than requiring a restart of all\n+  // App Engine tasks.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzEwOTcxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzozODoxNVrOF67xBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzozODoxNVrOF67xBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0MDkzMg==", "bodyText": "Not your fault, but this is a pretty awkward way to set up the constructor/builder.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397340932", "createdAt": "2020-03-24T17:38:15Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieConfig.java", "diffHunk": "@@ -0,0 +1,29 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.OpsGenieClient;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import org.pmiops.workbench.google.CloudStorageService;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+public class OpsGenieConfig {\n+\n+  static final String OPSGENIE_API_KEY_FILENAME = \"opsgenie-key.txt\";\n+\n+  // This bean is prototype-scoped, so a Cloud Storage API call will be made every time a new\n+  // instance is injected. This is okay since we expect alert API requests to be rare; the benefit\n+  // is that API key changes will be reflected immediately rather than requiring a restart of all\n+  // App Engine tasks.\n+  @Bean\n+  @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+  public AlertApi getAlertApi(CloudStorageService cloudStorageService) {\n+    AlertApi client = new OpsGenieClient().alertV2();\n+    client", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzEyODEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0Mjo1MlrOF679Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODowOToyM1rOF7oBrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NDAwNg==", "bodyText": "One thing to think about would be making one service for sending things to OpsGenie (that traffics in that libraries objects, like CreateAlertRequest), and a slightly higher-level service for handling egress events (that, among possibly other things, would make one of those requests and call the OpsGenieService to send it).\nIn other words, even though this is small and readable, there's a minor smell I think in OpsGenieServiceImpl, because it knows about a workbench-specific concept (i.e. the EgressEvent).\nThere are potentially some testing advantages to this split as well (such as mocking the lower service), and we can add another alert trigger later with less tear-up. Though I realize you don't want this to become a pattern.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397344006", "createdAt": "2020-03-24T17:42:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieService.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import org.pmiops.workbench.model.EgressEvent;\n+\n+public interface OpsGenieService {\n+\n+  // Creates an Opsgenie alert for a high-egress event detected in the Workbench system.\n+  public void createEgressEventAlert(EgressEvent egressEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NjA5Mg==", "bodyText": "I'm treating the OpsGenie client as the lower-level library that we're trusting is well-tested enough to use for our higher-level needs (and which is mocked out in unit tests).\nAnd since we're talking about ~dozens of lines of code here, I'm not too worried about not having the perfect / optimal structure. This can be easily changed as our needs shift over time.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398066092", "createdAt": "2020-03-25T18:09:23Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieService.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import org.pmiops.workbench.model.EgressEvent;\n+\n+public interface OpsGenieService {\n+\n+  // Creates an Opsgenie alert for a high-egress event detected in the Workbench system.\n+  public void createEgressEventAlert(EgressEvent egressEvent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NDAwNg=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzEzNTY2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0NDo1NVrOF68CKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyNTo1M1rOF7orjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NTMyMw==", "bodyText": "With the void return here, you won't be able to distinguish easily which Egress Alert maps to which OG alert if there are many happening at once. I'd try to provide bi-directional traceability if possible.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397345323", "createdAt": "2020-03-24T17:44:55Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))\n+            .append(String.format(\"VM name: %s\\n\", egressEvent.getVmName()))\n+            .append(String.format(\"Egress amount: %.2f Mib\\n\\n\", egressEvent.getEgressMib()))\n+            .append(\n+                String.format(\n+                    \"Admin link (PMI-Ops): %s/admin/workspaces/%s/\\n\",\n+                    workbenchConfig.server.clientBaseUrl, egressEvent.getProjectName()))\n+            .append(\"Playbook: https://broad.io/aou-high-egress-event\")\n+            .toString());\n+    // Add a note with some more specific details about the alerting criteria and threshold. Notes\n+    // are appended to an existing Opsgenie ticket if this request is de-duplicated against an\n+    // existing ticket, so they're a helpful way to summarize temporal updates to the status of\n+    // an incident.\n+    request.setNote(\n+        String.format(\n+            \"Time window: %d secs, threshold: %.2f Mib, observed: %.2f Mib\",\n+            egressEvent.getTimeWindowDuration(),\n+            egressEvent.getEgressMibThreshold(),\n+            egressEvent.getEgressMib()));\n+    // Set the alias, which is Opsgenie's string key for alert de-duplication. See\n+    // https://docs.opsgenie.com/docs/alert-deduplication\n+    request.setAlias(egressEvent.getProjectName() + \" - \" + egressEvent.getVmName());\n+    return request;\n+  }\n+\n+  @Override\n+  public void createEgressEventAlert(EgressEvent egressEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NjgxMw==", "bodyText": "I'm not sure quite what you're getting at. Traceability from where to where? I'm not sure this would be needed, or I'd at least like to validate the need / requirement in practice before potentially over-building here.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398076813", "createdAt": "2020-03-25T18:25:53Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))\n+            .append(String.format(\"VM name: %s\\n\", egressEvent.getVmName()))\n+            .append(String.format(\"Egress amount: %.2f Mib\\n\\n\", egressEvent.getEgressMib()))\n+            .append(\n+                String.format(\n+                    \"Admin link (PMI-Ops): %s/admin/workspaces/%s/\\n\",\n+                    workbenchConfig.server.clientBaseUrl, egressEvent.getProjectName()))\n+            .append(\"Playbook: https://broad.io/aou-high-egress-event\")\n+            .toString());\n+    // Add a note with some more specific details about the alerting criteria and threshold. Notes\n+    // are appended to an existing Opsgenie ticket if this request is de-duplicated against an\n+    // existing ticket, so they're a helpful way to summarize temporal updates to the status of\n+    // an incident.\n+    request.setNote(\n+        String.format(\n+            \"Time window: %d secs, threshold: %.2f Mib, observed: %.2f Mib\",\n+            egressEvent.getTimeWindowDuration(),\n+            egressEvent.getEgressMibThreshold(),\n+            egressEvent.getEgressMib()));\n+    // Set the alias, which is Opsgenie's string key for alert de-duplication. See\n+    // https://docs.opsgenie.com/docs/alert-deduplication\n+    request.setAlias(egressEvent.getProjectName() + \" - \" + egressEvent.getVmName());\n+    return request;\n+  }\n+\n+  @Override\n+  public void createEgressEventAlert(EgressEvent egressEvent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NTMyMw=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE0MTQxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0NjoyMVrOF68F7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoxMDo1MFrOF7oFKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NjI4Nw==", "bodyText": "You don't strictly need this yet, but I'm a bit surprised there's no cancelAlert endpoint here. For testing, etc, it would be nice to have a button or script to kill the alert after it's created. Plus, we could be sure that we have a good handle on the alert we've created with the create API.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397346287", "createdAt": "2020-03-24T17:46:21Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieService.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import org.pmiops.workbench.model.EgressEvent;\n+\n+public interface OpsGenieService {\n+\n+  // Creates an Opsgenie alert for a high-egress event detected in the Workbench system.\n+  public void createEgressEventAlert(EgressEvent egressEvent);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2Njk4NA==", "bodyText": "It would be a YAGNI smell \u2013 for now, there is no active flow where the Workbench should close a high-egress alert. It can only open a new alert or add a note to an existing alert.\nI could imagine such a thing being useful for an end-to-end test of the high-egress alerting functionality; it will be trivial to add at that point.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398066984", "createdAt": "2020-03-25T18:10:50Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieService.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import org.pmiops.workbench.model.EgressEvent;\n+\n+public interface OpsGenieService {\n+\n+  // Creates an Opsgenie alert for a high-egress event detected in the Workbench system.\n+  public void createEgressEventAlert(EgressEvent egressEvent);\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NjI4Nw=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE0NjcwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0NzozN1rOF68JRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoxMToyNFrOF7oGcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzE0Mw==", "bodyText": "I would log this (at least as a warning) in the main application logs. I guess it's already in the audit log.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397347143", "createdAt": "2020-03-24T17:47:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2NzMxMw==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398067313", "createdAt": "2020-03-25T18:11:24Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzE0Mw=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE0ODQ1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0ODowMFrOF68KVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyMzowOVrOF7ok3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzQxMw==", "bodyText": "nit: is there a more precise term that amount?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397347413", "createdAt": "2020-03-24T17:48:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))\n+            .append(String.format(\"VM name: %s\\n\", egressEvent.getVmName()))\n+            .append(String.format(\"Egress amount: %.2f Mib\\n\\n\", egressEvent.getEgressMib()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NTEwMg==", "bodyText": "Not really, but I tried re-wording and adding the time window.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398075102", "createdAt": "2020-03-25T18:23:09Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))\n+            .append(String.format(\"VM name: %s\\n\", egressEvent.getVmName()))\n+            .append(String.format(\"Egress amount: %.2f Mib\\n\\n\", egressEvent.getEgressMib()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0NzQxMw=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE1Mzc2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0OTozMVrOF68N_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo0OTozMVrOF68N_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0ODM1MA==", "bodyText": "TOL: This would be a good excuse to try using handlebars/moustache.\nIt's too bad we can't just put a getDescription field on EgressEvent.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397348350", "createdAt": "2020-03-24T17:49:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE1NzY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1MDozNFrOF68QoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyNDo1NlrOF7opSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0OTAyNQ==", "bodyText": "This is neat. If an alert is closed but then another one is fired with that same alias, is it a new alert or a reopened one?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397349025", "createdAt": "2020-03-24T17:50:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))\n+            .append(String.format(\"VM name: %s\\n\", egressEvent.getVmName()))\n+            .append(String.format(\"Egress amount: %.2f Mib\\n\\n\", egressEvent.getEgressMib()))\n+            .append(\n+                String.format(\n+                    \"Admin link (PMI-Ops): %s/admin/workspaces/%s/\\n\",\n+                    workbenchConfig.server.clientBaseUrl, egressEvent.getProjectName()))\n+            .append(\"Playbook: https://broad.io/aou-high-egress-event\")\n+            .toString());\n+    // Add a note with some more specific details about the alerting criteria and threshold. Notes\n+    // are appended to an existing Opsgenie ticket if this request is de-duplicated against an\n+    // existing ticket, so they're a helpful way to summarize temporal updates to the status of\n+    // an incident.\n+    request.setNote(\n+        String.format(\n+            \"Time window: %d secs, threshold: %.2f Mib, observed: %.2f Mib\",\n+            egressEvent.getTimeWindowDuration(),\n+            egressEvent.getEgressMibThreshold(),\n+            egressEvent.getEgressMib()));\n+    // Set the alias, which is Opsgenie's string key for alert de-duplication. See\n+    // https://docs.opsgenie.com/docs/alert-deduplication\n+    request.setAlias(egressEvent.getProjectName() + \" - \" + egressEvent.getVmName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3NjIzNQ==", "bodyText": "I haven't tested. My reading of the Opsgenie docs is that it will create a new alert.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398076235", "createdAt": "2020-03-25T18:24:56Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))\n+            .append(String.format(\"VM name: %s\\n\", egressEvent.getVmName()))\n+            .append(String.format(\"Egress amount: %.2f Mib\\n\\n\", egressEvent.getEgressMib()))\n+            .append(\n+                String.format(\n+                    \"Admin link (PMI-Ops): %s/admin/workspaces/%s/\\n\",\n+                    workbenchConfig.server.clientBaseUrl, egressEvent.getProjectName()))\n+            .append(\"Playbook: https://broad.io/aou-high-egress-event\")\n+            .toString());\n+    // Add a note with some more specific details about the alerting criteria and threshold. Notes\n+    // are appended to an existing Opsgenie ticket if this request is de-duplicated against an\n+    // existing ticket, so they're a helpful way to summarize temporal updates to the status of\n+    // an incident.\n+    request.setNote(\n+        String.format(\n+            \"Time window: %d secs, threshold: %.2f Mib, observed: %.2f Mib\",\n+            egressEvent.getTimeWindowDuration(),\n+            egressEvent.getEgressMibThreshold(),\n+            egressEvent.getEgressMib()));\n+    // Set the alias, which is Opsgenie's string key for alert de-duplication. See\n+    // https://docs.opsgenie.com/docs/alert-deduplication\n+    request.setAlias(egressEvent.getProjectName() + \" - \" + egressEvent.getVmName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM0OTAyNQ=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE4MTY1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/opsgenie/OpsGenieServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1NjoyN1rOF68gSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyODoyNVrOF7oyEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MzAzMw==", "bodyText": "nit: why not just make this static final?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397353033", "createdAt": "2020-03-24T17:56:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/opsgenie/OpsGenieServiceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class OpsGenieServiceTest {\n+  private static WorkbenchConfig workbenchConfig;\n+  private EgressEvent egressEvent;\n+\n+  @MockBean private AlertApi mockAlertApi;\n+  @Captor private ArgumentCaptor<CreateAlertRequest> alertRequestCaptor;\n+  @Autowired private OpsGenieService opsGenieService;\n+\n+  @TestConfiguration\n+  @Import({OpsGenieServiceImpl.class})\n+  static class Configuration {\n+    @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    WorkbenchConfig getWorkbenchConfig() {\n+      return workbenchConfig;\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    workbenchConfig = WorkbenchConfig.createEmptyConfig();\n+    workbenchConfig.server.clientBaseUrl = \"https://workbench.researchallofus.org\";\n+\n+    egressEvent =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3ODQ4MA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398078480", "createdAt": "2020-03-25T18:28:25Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/opsgenie/OpsGenieServiceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class OpsGenieServiceTest {\n+  private static WorkbenchConfig workbenchConfig;\n+  private EgressEvent egressEvent;\n+\n+  @MockBean private AlertApi mockAlertApi;\n+  @Captor private ArgumentCaptor<CreateAlertRequest> alertRequestCaptor;\n+  @Autowired private OpsGenieService opsGenieService;\n+\n+  @TestConfiguration\n+  @Import({OpsGenieServiceImpl.class})\n+  static class Configuration {\n+    @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    WorkbenchConfig getWorkbenchConfig() {\n+      return workbenchConfig;\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    workbenchConfig = WorkbenchConfig.createEmptyConfig();\n+    workbenchConfig.server.clientBaseUrl = \"https://workbench.researchallofus.org\";\n+\n+    egressEvent =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1MzAzMw=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE4NjQ0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1NzozNFrOF68jRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDoyMjo1NlrOF7s0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1Mzc5Ng==", "bodyText": "Can we also fetch information about the user like username, email, and institution?", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397353796", "createdAt": "2020-03-24T17:57:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3MzMzMw==", "bodyText": "I considered this, but it turns out programmatically looking up the username / email / etc is a bit more complicated (effectively, we'd have to extract this method body into a central service of some sort). I'm not sure the value is huge, since that info is presented directly in the workspace admin landing page which is the clear alert call-to-action.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398073333", "createdAt": "2020-03-25T18:20:28Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1Mzc5Ng=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODEzOTgxMw==", "bodyText": "OK. Can we link directly to that page in the description?\nFrom a belt-and-suspenders standpoint, there's a slight chance that the person receiving the alert won't be able to get to the admin console or that it isn't working for some reason. So it would still be spiffy to have that info in the alert. Likewise, if you've got a stack of closed egress alerts, it would be easier to flip through them afterwards without leaving OpsGenie.\nThat could be follow-on work though.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398139813", "createdAt": "2020-03-25T20:14:04Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1Mzc5Ng=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE0NDY4OQ==", "bodyText": "Yep \u2013\u00a0I don't disagree it will be nice, but I wanted to hold off from getting too fancy so we have at least something running in prod to start working with.\nAnd see 2 lines below this, we do have a direct link to the admin page.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398144689", "createdAt": "2020-03-25T20:22:56Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/opsgenie/OpsGenieServiceImpl.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class OpsGenieServiceImpl implements OpsGenieService {\n+  private static final Logger logger = Logger.getLogger(OpsGenieServiceImpl.class.getName());\n+\n+  private Provider<AlertApi> alertApiProvider;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  @Autowired\n+  public OpsGenieServiceImpl(\n+      Provider<AlertApi> alertApiProvider, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.alertApiProvider = alertApiProvider;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  private CreateAlertRequest egressEventToOpsGenieAlert(\n+      EgressEvent egressEvent, WorkbenchConfig workbenchConfig) {\n+    CreateAlertRequest request = new CreateAlertRequest();\n+    request.setMessage(String.format(\"High-egress event (%s)\", egressEvent.getProjectName()));\n+    request.setDescription(\n+        new StringBuilder()\n+            .append(String.format(\"Workspace project: %s\\n\", egressEvent.getProjectName()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1Mzc5Ng=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzE5MDcwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/opsgenie/OpsGenieServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzo1ODo0NVrOF68mLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODoyOTo1OVrOF7o2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1NDU0Mw==", "bodyText": "for the format here, the hyphens in each token and - between them is tough on my brain. I.e. if they're a word character, it's hard to use them as a separator. I bet you could just do\n\"{project=aou-rw-test-c7dec260, vm=aou-rw-1}\"", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r397354543", "createdAt": "2020-03-24T17:58:45Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/opsgenie/OpsGenieServiceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class OpsGenieServiceTest {\n+  private static WorkbenchConfig workbenchConfig;\n+  private EgressEvent egressEvent;\n+\n+  @MockBean private AlertApi mockAlertApi;\n+  @Captor private ArgumentCaptor<CreateAlertRequest> alertRequestCaptor;\n+  @Autowired private OpsGenieService opsGenieService;\n+\n+  @TestConfiguration\n+  @Import({OpsGenieServiceImpl.class})\n+  static class Configuration {\n+    @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    WorkbenchConfig getWorkbenchConfig() {\n+      return workbenchConfig;\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    workbenchConfig = WorkbenchConfig.createEmptyConfig();\n+    workbenchConfig.server.clientBaseUrl = \"https://workbench.researchallofus.org\";\n+\n+    egressEvent =\n+        new EgressEvent()\n+            .projectName(\"aou-rw-test-c7dec260\")\n+            .vmName(\"aou-rw-1\")\n+            .egressMib(120.7)\n+            .egressMibThreshold(100.0)\n+            .timeWindowDuration(600L);\n+  }\n+\n+  @Test\n+  public void createEgressEventAlert() throws ApiException {\n+    opsGenieService.createEgressEventAlert(egressEvent);\n+    verify(mockAlertApi).createAlert(alertRequestCaptor.capture());\n+\n+    CreateAlertRequest request = alertRequestCaptor.getValue();\n+    assertThat(request.getDescription()).contains(\"Workspace project: aou-rw-test-c7dec260\");\n+    assertThat(request.getDescription())\n+        .contains(\"https://workbench.researchallofus.org/admin/workspaces/aou-rw-test-c7dec260/\");\n+    assertThat(request.getAlias()).isEqualTo(\"aou-rw-test-c7dec260 - aou-rw-1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA3OTUzNg==", "bodyText": "I'll use a pipe separator, should be clearer.", "url": "https://github.com/all-of-us/workbench/pull/3296#discussion_r398079536", "createdAt": "2020-03-25T18:29:59Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/opsgenie/OpsGenieServiceTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pmiops.workbench.opsgenie;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.verify;\n+\n+import com.ifountain.opsgenie.client.swagger.ApiException;\n+import com.ifountain.opsgenie.client.swagger.api.AlertApi;\n+import com.ifountain.opsgenie.client.swagger.model.CreateAlertRequest;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.EgressEvent;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class OpsGenieServiceTest {\n+  private static WorkbenchConfig workbenchConfig;\n+  private EgressEvent egressEvent;\n+\n+  @MockBean private AlertApi mockAlertApi;\n+  @Captor private ArgumentCaptor<CreateAlertRequest> alertRequestCaptor;\n+  @Autowired private OpsGenieService opsGenieService;\n+\n+  @TestConfiguration\n+  @Import({OpsGenieServiceImpl.class})\n+  static class Configuration {\n+    @Bean\n+    @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+    WorkbenchConfig getWorkbenchConfig() {\n+      return workbenchConfig;\n+    }\n+  }\n+\n+  @Before\n+  public void setUp() {\n+    workbenchConfig = WorkbenchConfig.createEmptyConfig();\n+    workbenchConfig.server.clientBaseUrl = \"https://workbench.researchallofus.org\";\n+\n+    egressEvent =\n+        new EgressEvent()\n+            .projectName(\"aou-rw-test-c7dec260\")\n+            .vmName(\"aou-rw-1\")\n+            .egressMib(120.7)\n+            .egressMibThreshold(100.0)\n+            .timeWindowDuration(600L);\n+  }\n+\n+  @Test\n+  public void createEgressEventAlert() throws ApiException {\n+    opsGenieService.createEgressEventAlert(egressEvent);\n+    verify(mockAlertApi).createAlert(alertRequestCaptor.capture());\n+\n+    CreateAlertRequest request = alertRequestCaptor.getValue();\n+    assertThat(request.getDescription()).contains(\"Workspace project: aou-rw-test-c7dec260\");\n+    assertThat(request.getDescription())\n+        .contains(\"https://workbench.researchallofus.org/admin/workspaces/aou-rw-test-c7dec260/\");\n+    assertThat(request.getAlias()).isEqualTo(\"aou-rw-test-c7dec260 - aou-rw-1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzM1NDU0Mw=="}, "originalCommit": {"oid": "08a3d806f4a5108a45aaa296b23d8f9d4ccad1de"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3064, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}