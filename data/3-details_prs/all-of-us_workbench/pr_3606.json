{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwODA0MTUx", "number": 3606, "title": "[risk=no][RW-4921] Audit Log Entry API", "bodyText": "Add an API to query a workspace's history in the audit dataset. This is a low-level query, so all fields are returned typed and ordered like they are in the query (as opposed to combined into a higher-level semantic structure). The same query service will be used for the user admin endpoint.\nI added some tests, as well as some utility code to deal with FieldValueList structures more easily. These are now usable via Optional chaining.\nI'm using Joda time now as sot of a head start on RW-4682, generated by using format: date-time on a string field.\nOne interesting thing about this format is that swagger-codegen's REST/JSON translation actually writes an int64 value of the microseconds since epoch, even though it generates DateTime and Date in Java and TypeScript, respectively.\nTo call the API, log in as a user with the right authority and do something like\ncurl -X GET 'http://localhost:8081/v1/admin/audit/workspace/?limit=99&workspaceNamespace=aou-rw-local1-89786e50'   \\\n--header \"Authorization: Bearer `gcloud auth print-access-token`\" \\\n| jq\n\nAn example output entry looks like this:\n  {\n      \"actionId\": \"b937413e-ff66-4e7b-a639-f7947730b2c0\",\n      \"actionType\": \"CREATE\",\n      \"agentId\": 1,\n      \"agentType\": \"USER\",\n      \"agentUsername\": \"ericsong@fake-research-aou.org\",\n      \"eventTime\": 1579293096978,\n      \"newValue\": \"\\\"1\\\"\",\n      \"previousValue\": null,\n      \"targetId\": 3,\n      \"targetProperty\": \"etag\",\n      \"targetType\": \"WORKSPACE\"\n    }\nI've added a freeform map for useful things that, depending on the endpoint needing to make the query, might make sense. The two things I have now are the workspace's database ID (which is needed for further queries and interpreting the result set potentially) and the query itself (for use in BigQuery).\nI felt that including the query would help with debugging and teaching users to use the BQ Console, so that they have a launch point for further queries. There should be no security issue in doing this, as the dataset names are currently public in the config files and no one without the right access can run the query anyway.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-05-20T14:52:56Z", "url": "https://github.com/all-of-us/workbench/pull/3606", "merged": true, "mergeCommit": {"oid": "03c6de5021541a8954abd5136ffbdcff2d6764de"}, "closed": true, "closedAt": "2020-05-29T16:06:12Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjKR2pgH2gAyNDIwODA0MTUxOjk0N2I3OTQyNjdlOWFlZTUzNGYyNmVhZDQ1ZWFlYTc2MDFhZDdhZDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmEt5CgFqTQyMTA4OTMyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "947b794267e9aee534f26ead45eaea7601ad7ad4", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/947b794267e9aee534f26ead45eaea7601ad7ad4", "committedDate": "2020-05-20T14:51:59Z", "message": "most of the types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a7dc3fc5696f77e27af01eb5b887a02c8fc7c40", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/7a7dc3fc5696f77e27af01eb5b887a02c8fc7c40", "committedDate": "2020-05-20T17:22:05Z", "message": "first cut at querying"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "283383d854b2a1def54a53ae54688b4bdf22e3bb", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/283383d854b2a1def54a53ae54688b4bdf22e3bb", "committedDate": "2020-05-20T17:22:47Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7da66e72450e2bb08554323593a4275498f58ccc", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/7da66e72450e2bb08554323593a4275498f58ccc", "committedDate": "2020-05-20T22:28:31Z", "message": "first working version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09ab27c9e19d1635d4324f5d5442077b869ba7b8", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/09ab27c9e19d1635d4324f5d5442077b869ba7b8", "committedDate": "2020-05-21T12:43:33Z", "message": "comment out"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/8055fa186cfd307f91a95c3f7c5c601cd4ceb364", "committedDate": "2020-05-21T12:46:32Z", "message": "fix path [skip ci]"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTE3NDY1", "url": "https://github.com/all-of-us/workbench/pull/3606#pullrequestreview-416117465", "createdAt": "2020-05-21T12:50:42Z", "commit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1MDo0MlrOGYxlCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1MjowMVrOGYxneg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMTMwNg==", "bodyText": "There's some duplication here, but it's because I can't guarantee we won't need to rename a table separately from the dataset or log. For example, adding a column to the JSON in the log means we technically need a new BQ schema for the table.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r428631306", "createdAt": "2020-05-21T12:50:42Z", "author": {"login": "jaycarlton"}, "path": "api/config/config_local.json", "diffHunk": "@@ -105,7 +105,9 @@\n     \"enableEventDateModifier\": false\n   },\n   \"actionAudit\": {\n-    \"logName\": \"workbench-action-audit-local\"\n+    \"logName\": \"workbench-action-audit-local\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzMTkzMA==", "bodyText": "I'm really close to shopping for a template engine for this. I'm already up to three ordered substitutions and I don't have any time constraints, ordering options, etc.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r428631930", "createdAt": "2020-05-21T12:52:01Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,158 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.stream.StreamSupport;\n+import javax.annotation.Nullable;\n+import javax.inject.Provider;\n+import org.joda.time.Instant;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private WorkspaceService workspaceService;\n+  public static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTIzMzQw", "url": "https://github.com/all-of-us/workbench/pull/3606#pullrequestreview-416123340", "createdAt": "2020-05-21T12:59:36Z", "commit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1OTozNlrOGYx2CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjo1OTozNlrOGYx2CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNTY1Nw==", "bodyText": "This is the first attempt at the more generic date & time handling. Maps to Joda DateTime in Java and Date in TypeScript.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r428635657", "createdAt": "2020-05-21T12:59:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7305,93 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop\n+      high-level queries with a better semantic mapping to the concepts and rules\n+      governing them, which is why a freeform queryMetadata field is tolerable for\n+      now.\n+    required:\n+    - logEntries\n+    - queryMetadata\n+    properties:\n+      logEntries:\n+        type: array\n+        items:\n+          \"$ref\": \"#/definitions/AuditLogEntry\"\n+      queryMetadata:\n+        description: >\n+          Since the audit system uses SQL database IDs and the rest of hte API layer\n+          does not, it's helpful to return additional properties in order to assist\n+          the client in interpreting the results.\n+        type: object\n+        additionalProperties: true\n+  AuditLogEntry:\n+    description: >\n+      Representation of the BigQuery Audit Log entry, post-translation from Stackdriver logging.\n+      All fields are treated as optional here, as there are no non-null constraints in the BigQery\n+      dataset.\n+\n+      It's possible that due to some error now or in the past that some columns might not match\n+      their expected values, though we take pains to avoid that. Regardless, nothing in this type\n+      definition is stricter than the BigQuery schema.\n+    type: object\n+    properties:\n+      actionId:\n+        description: Unique ID for this action. Used for grouping similar events under a\n+          single action, though in this representation we're returning a straight list of rows.\n+        type: string\n+        format: uuid\n+      actionType:\n+        description: >\n+          Defines what action is taking place in this event. (There can be several ACTION_TYPEs\n+          in a single Action assigned to different events. String representation of the ActionType\n+          enum (not generated).\n+        type: string\n+      agentId:\n+        description: >\n+          ID for the Agent (typically a User). If there's a SQL table for this agent type,\n+          this this is the PK for that table (e.g. user_id).\n+        type: integer\n+        format: int64\n+      agentUsername:\n+        description: >\n+          Username of the user or administrator taking the action. This is the agent_email column\n+          in BigQuery.\n+        type: string\n+        format: email\n+      agentType:\n+        description: >\n+          A member of the org.pmiops.workbench.actionaudit.AgentType enum (not generated). Since\n+          this is typed as a string in BigQuery (and not constrained to that type), we don't try\n+          to narrow the type in the admin API.\n+        type: string\n+      eventTime:\n+        description: >\n+          Timestamp recorded at time of the event. Called timestamp in the BigQuery table.\n+        type: string\n+        format: date-time", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8055fa186cfd307f91a95c3f7c5c601cd4ceb364"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d71b7d0503470fedbbf794a40581942885f5fcb", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/9d71b7d0503470fedbbf794a40581942885f5fcb", "committedDate": "2020-05-21T15:52:15Z", "message": "start on unit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17a9c1f948e7d47b841dc00906a8d3c84f274b52", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/17a9c1f948e7d47b841dc00906a8d3c84f274b52", "committedDate": "2020-05-21T20:59:39Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "991ad868ce4f8c686718fd48e0cd3266af0435d3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/991ad868ce4f8c686718fd48e0cd3266af0435d3", "committedDate": "2020-05-21T21:40:38Z", "message": "fix datetime comparison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/244bf8a82376359e2e7c3a68afc03518f88f6aee", "committedDate": "2020-05-21T22:32:05Z", "message": "no result test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2ODgwMzQz", "url": "https://github.com/all-of-us/workbench/pull/3606#pullrequestreview-416880343", "createdAt": "2020-05-22T12:43:42Z", "commit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo0Mzo0MlrOGZVvPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzoxNTowN1rOGZWpgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyMzc0Mg==", "bodyText": "Maybe add some validation for checking a max limit on amount of AuditLogEntry that can be requested to keep OOM errors from happening on GAE. My assumption is that these audit tables can become large over time.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429223742", "createdAt": "2020-05-22T12:43:42Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE'\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"\n+          + \"LIMIT %d\";\n+\n+  public ActionAuditQueryServiceImpl(\n+      BigQueryService bigQueryService, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public AuditLogEntriesResponse queryEventsForWorkspace(long workspaceDatabaseId, long limit) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyODE0OA==", "bodyText": "Would it be useful for the client to be able to request a different ordering? Maybe a date range of audit logs?", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429228148", "createdAt": "2020-05-22T12:53:04Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE'\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMjcwMw==", "bodyText": "I would use a named parameter for any values injected from the client. We use the QueryParameterUtil  to help with this in CB land. Example: \n  \n    \n      workbench/api/src/main/java/org/pmiops/workbench/cohortbuilder/SearchGroupItemQueryBuilder.java\n    \n    \n         Line 401\n      in\n      c516872\n    \n    \n    \n    \n\n        \n          \n           QueryParameterUtil.addQueryParameterValue(", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429232703", "createdAt": "2020-05-22T13:02:34Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzMzA3Mg==", "bodyText": "Nice. I like this pattern.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429233072", "createdAt": "2020-05-22T13:03:17Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private BigQueryService bigQueryService;\n+  private Provider<WorkbenchConfig> workbenchConfigProvider;\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = %d AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE'\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"\n+          + \"LIMIT %d\";\n+\n+  public ActionAuditQueryServiceImpl(\n+      BigQueryService bigQueryService, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public AuditLogEntriesResponse queryEventsForWorkspace(long workspaceDatabaseId, long limit) {\n+    final ActionAuditConfig actionAuditConfig = workbenchConfigProvider.get().actionAudit;\n+    final String fullyQualifiedTableName =\n+        String.format(\n+            \"`%s.%s.%s`\",\n+            workbenchConfigProvider.get().server.projectId,\n+            actionAuditConfig.bigQueryDataset,\n+            actionAuditConfig.bigQueryTable);\n+\n+    final String queryString =\n+        String.format(\n+            WORKSPACE_EVENTS_QUERY_STRING_FORMAT,\n+            fullyQualifiedTableName,\n+            workspaceDatabaseId,\n+            limit);\n+    final QueryJobConfiguration queryJobConfiguration =\n+        QueryJobConfiguration.newBuilder(queryString).setUseLegacySql(false).build();\n+\n+    final TableResult tableResult = bigQueryService.executeQuery(queryJobConfiguration);\n+\n+    // Transform all results on all pages.\n+    final List<AuditLogEntry> logEntries =\n+        StreamSupport.stream(tableResult.iterateAll().spliterator(), false)\n+            .map(this::fieldValueListToAditLogEntry)\n+            .collect(ImmutableList.toImmutableList());\n+\n+    final ImmutableMap<String, String> metadata =\n+        ImmutableMap.of(\n+            \"workspaceDatabaseId\", Long.toString(workspaceDatabaseId), \"query\", queryString);\n+\n+    return new AuditLogEntriesResponse().logEntries(logEntries).queryMetadata(metadata);\n+  }\n+\n+  private AuditLogEntry fieldValueListToAditLogEntry(FieldValueList row) {\n+    final AuditLogEntry entry = new AuditLogEntry();\n+    FieldValues.getString(row, \"action_id\").ifPresent(entry::setActionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNDkzOQ==", "bodyText": "Nice. BigQueryService is doing something similar to this class. I think we could move this functionality into the BigQueryService and replace it's methods that are very similar, like getString(List row, int index), getBoolean(List row, int index).. etc.\n\n  \n    \n      workbench/api/src/main/java/org/pmiops/workbench/api/BigQueryService.java\n    \n    \n         Line 126\n      in\n      c516872\n    \n    \n    \n    \n\n        \n          \n           public String getString(List<FieldValue> row, int index) {", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429234939", "createdAt": "2020-05-22T13:07:26Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNjE4NQ==", "bodyText": "Is this method useful outside of ActionAuditQueryServiceTest? Otherwise i would move this and the method above into the test itself.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429236185", "createdAt": "2020-05-22T13:10:09Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {\n+\n+  public static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  private FieldValues() {}\n+\n+  /** Return an Optional<FieldValue> which is empty if the value is null and present if not. */\n+  public static Optional<FieldValue> getOptional(FieldValueList row, String fieldName) {\n+    final FieldValue value = row.get(fieldName);\n+    if (value.isNull()) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(value);\n+    }\n+  }\n+\n+  public static Optional<String> getString(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getStringValue);\n+  }\n+\n+  public static Optional<Long> getLong(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getLongValue);\n+  }\n+\n+  public static Optional<Long> getTimestampMicroseconds(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getTimestampValue);\n+  }\n+\n+  public static Optional<DateTime> getDateTime(FieldValueList row, String fieldName) {\n+    return getTimestampMicroseconds(row, fieldName)\n+        .map(micro -> micro / MICROSECONDS_IN_MILLISECOND)\n+        .map(DateTime::new);\n+  }\n+\n+  public static FieldValue toPrimitiveFieldValue(Object value) {\n+    return FieldValue.of(Attribute.PRIMITIVE, value);\n+  }\n+\n+  public static FieldValueList buildFieldValueList(FieldList schemaFieldList, List<Object> values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzNjYwMQ==", "bodyText": "Could be private since nothing is accessing this method outside of this class.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429236601", "createdAt": "2020-05-22T13:10:59Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {\n+\n+  public static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  private FieldValues() {}\n+\n+  /** Return an Optional<FieldValue> which is empty if the value is null and present if not. */\n+  public static Optional<FieldValue> getOptional(FieldValueList row, String fieldName) {\n+    final FieldValue value = row.get(fieldName);\n+    if (value.isNull()) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(value);\n+    }\n+  }\n+\n+  public static Optional<String> getString(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getStringValue);\n+  }\n+\n+  public static Optional<Long> getLong(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getLongValue);\n+  }\n+\n+  public static Optional<Long> getTimestampMicroseconds(FieldValueList row, String fieldName) {\n+    return FieldValues.getOptional(row, fieldName).map(FieldValue::getTimestampValue);\n+  }\n+\n+  public static Optional<DateTime> getDateTime(FieldValueList row, String fieldName) {\n+    return getTimestampMicroseconds(row, fieldName)\n+        .map(micro -> micro / MICROSECONDS_IN_MILLISECOND)\n+        .map(DateTime::new);\n+  }\n+\n+  public static FieldValue toPrimitiveFieldValue(Object value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIzODY1OA==", "bodyText": "Also, since this reusable can we add methods for all the possible BQ sql types?", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r429238658", "createdAt": "2020-05-22T13:15:07Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/FieldValues.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.pmiops.workbench.utils;\n+\n+import com.google.cloud.bigquery.FieldList;\n+import com.google.cloud.bigquery.FieldValue;\n+import com.google.cloud.bigquery.FieldValue.Attribute;\n+import com.google.cloud.bigquery.FieldValueList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+import org.joda.time.DateTime;\n+\n+/** Utility class for working with FieldValueLists, FieldValues, and Fields */\n+public final class FieldValues {\n+\n+  public static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  private FieldValues() {}\n+\n+  /** Return an Optional<FieldValue> which is empty if the value is null and present if not. */\n+  public static Optional<FieldValue> getOptional(FieldValueList row, String fieldName) {\n+    final FieldValue value = row.get(fieldName);\n+    if (value.isNull()) {\n+      return Optional.empty();\n+    } else {\n+      return Optional.of(value);\n+    }\n+  }\n+\n+  public static Optional<String> getString(FieldValueList row, String fieldName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "244bf8a82376359e2e7c3a68afc03518f88f6aee"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dc97b1d64eb8aef54f926f245debfb2973efc27", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/2dc97b1d64eb8aef54f926f245debfb2973efc27", "committedDate": "2020-05-26T13:59:45Z", "message": "add more methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e30da7e8e7c53a1c2f1726ec18099067823bf0cf", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/e30da7e8e7c53a1c2f1726ec18099067823bf0cf", "committedDate": "2020-05-26T14:12:58Z", "message": "update description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1b76260834a181721fc33a502d12c49219d7837", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c1b76260834a181721fc33a502d12c49219d7837", "committedDate": "2020-05-26T17:50:25Z", "message": "test improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "179ae60005e7b90d3912ffb88838e0e8bed3538b", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/179ae60005e7b90d3912ffb88838e0e8bed3538b", "committedDate": "2020-05-26T19:32:27Z", "message": "make more readable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/76857e11f40671678ead337e36b71453c3b75f11", "committedDate": "2020-05-26T19:49:40Z", "message": "docs and tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjYwNTk4", "url": "https://github.com/all-of-us/workbench/pull/3606#pullrequestreview-419260598", "createdAt": "2020-05-27T14:22:27Z", "commit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyMjoyN1rOGbMmgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNjoyMDoxOVrOGbSzIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3MTIwMw==", "bodyText": "Why use an enum rather than a series of string constants? Is this more or less just a way to semantically group this set of constants?", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431171203", "createdAt": "2020-05-27T14:22:27Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.joda.time.DateTime;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  enum Parameters {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3Mjg2Nw==", "bodyText": "The database ID is one of the inputs to this method... it seems redundant / unnecessary to be returning that value.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431172867", "createdAt": "2020-05-27T14:24:32Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -0,0 +1,135 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import com.google.cloud.bigquery.FieldValueList;\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.stream.StreamSupport;\n+import javax.inject.Provider;\n+import org.joda.time.DateTime;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.config.WorkbenchConfig.ActionAuditConfig;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+import org.pmiops.workbench.model.AuditLogEntry;\n+import org.pmiops.workbench.utils.FieldValues;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ActionAuditQueryServiceImpl implements ActionAuditQueryService {\n+\n+  private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n+\n+  enum Parameters {\n+    LIMIT(\"limit\"),\n+    WORKSPACE_DB_ID(\"workspace_db_id\"),\n+    AFTER_INCLUSIVE(\"after_inclusive\"),\n+    BEFORE_EXCLUSIVE(\"before_exclusive\");\n+\n+    private String name;\n+\n+    Parameters(String name) {\n+      this.name = name;\n+    }\n+\n+    public String getName() {\n+      return name;\n+    }\n+  }\n+\n+  private final BigQueryService bigQueryService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  private static final long MAX_QUERY_LIMIT = 1000L;\n+  // The table name can't be in a QueryParameterValue, so we substitute it with String.format()\n+  private static final String WORKSPACE_EVENTS_QUERY_STRING_FORMAT =\n+      \"SELECT\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) as event_time,\\n\"\n+          + \"  jsonPayload.agent_type AS agent_type,\\n\"\n+          + \"  CAST(jsonPayload.agent_id AS INT64) AS agent_id,\\n\"\n+          + \"  jsonPayload.agent_email AS agent_username,\\n\"\n+          + \"  jsonPayload.action_id AS action_id,\\n\"\n+          + \"  jsonPayload.action_type AS action_type,\\n\"\n+          + \"  jsonPayload.target_type AS target_type,\\n\"\n+          + \"  CAST(jsonPayload.target_id AS INT64) AS target_id,\\n\"\n+          + \"  jsonPayload.target_property AS target_property,\\n\"\n+          + \"  jsonPayload.prev_value AS prev_value,\\n\"\n+          + \"  jsonPayload.new_value AS new_value\\n\"\n+          + \"FROM %s\\n\"\n+          + \"WHERE jsonPayload.target_id = @workspace_db_id AND\\n\"\n+          + \"  jsonPayload.target_type = 'WORKSPACE' AND\\n\"\n+          + \"  @after_inclusive <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) AND\\n\"\n+          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before_exclusive\\n\"\n+          + \"ORDER BY event_time, agent_id, action_id\\n\"\n+          + \"LIMIT @limit\";\n+\n+  public ActionAuditQueryServiceImpl(\n+      BigQueryService bigQueryService, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public AuditLogEntriesResponse queryEventsForWorkspace(\n+      long workspaceDatabaseId, long limit, DateTime afterInclusive, DateTime beforeExclusive) {\n+    final ActionAuditConfig actionAuditConfig = workbenchConfigProvider.get().actionAudit;\n+    final String fullyQualifiedTableName =\n+        String.format(\n+            \"`%s.%s.%s`\",\n+            workbenchConfigProvider.get().server.projectId,\n+            actionAuditConfig.bigQueryDataset,\n+            actionAuditConfig.bigQueryTable);\n+\n+    final String queryString =\n+        String.format(WORKSPACE_EVENTS_QUERY_STRING_FORMAT, fullyQualifiedTableName);\n+\n+    final QueryJobConfiguration queryJobConfiguration =\n+        QueryJobConfiguration.newBuilder(queryString)\n+            .setNamedParameters(\n+                ImmutableMap.of(\n+                    Parameters.WORKSPACE_DB_ID.getName(),\n+                        QueryParameterValue.int64(workspaceDatabaseId),\n+                    Parameters.LIMIT.getName(),\n+                        QueryParameterValue.int64(Math.max(limit, MAX_QUERY_LIMIT)),\n+                    Parameters.AFTER_INCLUSIVE.getName(),\n+                        QueryParameterValue.timestamp(\n+                            afterInclusive.getMillis() * MICROSECONDS_IN_MILLISECOND),\n+                    Parameters.BEFORE_EXCLUSIVE.getName(),\n+                        QueryParameterValue.timestamp(\n+                            beforeExclusive.getMillis() * MICROSECONDS_IN_MILLISECOND)))\n+            .build();\n+\n+    final TableResult tableResult = bigQueryService.executeQuery(queryJobConfiguration);\n+\n+    final List<AuditLogEntry> logEntries =\n+        StreamSupport.stream(tableResult.iterateAll().spliterator(), false)\n+            .map(this::fieldValueListToAditLogEntry)\n+            .collect(ImmutableList.toImmutableList());\n+\n+    final ImmutableMap<String, String> metadata =\n+        ImmutableMap.of(\n+            \"workspaceDatabaseId\", Long.toString(workspaceDatabaseId),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NDI2OA==", "bodyText": "Please document new config fields with a comment line. In particular it would be useful to note that these are not in any way connected with writing action audit logs, only with querying them. And maybe to include a pointer to the doc, RW ticket, etc. that describes how this dataset is populated.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431174268", "createdAt": "2020-05-27T14:26:13Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -249,6 +249,8 @@ public String freeTierBillingAccountName() {\n \n   public static class ActionAuditConfig {\n     public String logName;\n+    public String bigQueryDataset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NzI3Nw==", "bodyText": "nit: I'm not sure the inclusive / exclusive wording is worth including here. It's a useful implementation note / comment on the API, but given that these audit events are not high-frequency, and the timestamp comparison is in milliseconds, the open / closed interval doesn't have much impact on usage.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431177277", "createdAt": "2020-05-27T14:29:26Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryService.java", "diffHunk": "@@ -0,0 +1,9 @@\n+package org.pmiops.workbench.actionaudit;\n+\n+import org.joda.time.DateTime;\n+import org.pmiops.workbench.model.AuditLogEntriesResponse;\n+\n+public interface ActionAuditQueryService {\n+  AuditLogEntriesResponse queryEventsForWorkspace(\n+      long workspaceDatabaseId, long limit, DateTime afterInclusive, DateTime beforeExclusive);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NTY4NA==", "bodyText": "API design nit: it's probably more consistent and neater to treat the audit logs as a subcollection within the admin/workspaces/{workspaceNamespace}/ resource (similar to how we've done cloudStorageTraffic).\nI can see it going both ways, though \u2013\u00a0was there a strong reason to treat \"audit\" as the higher-level entry in the hierarchy?\n(Generally speaking, I'm trying to do my best to model after https://cloud.google.com/apis/design/resource_names where possible in new APIs and methods.)", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431245684", "createdAt": "2020-05-27T15:46:14Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NjQ3NQ==", "bodyText": "nit: remove first-person from description field.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431246475", "createdAt": "2020-05-27T15:47:17Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":\n+    get:\n+      tags:\n+        - workspaceAdmin\n+      description: 'Fetch audit logs involving this workspace as either a subject or object.'\n+      operationId: getAuditLogEntries\n+      parameters:\n+        - name: workspaceNamespace\n+          in: query\n+          type: string\n+          required: true\n+          description: >\n+            Firecloud Namespace for the AoU workspace to be queried.\n+        - name: limit\n+          in: query\n+          type: integer\n+          required: false\n+          default: 100\n+          description: >\n+            Maximum number of entries to return, sorted by timestamp descending.\n+        - name: afterInclusive\n+          description: >\n+            Earliest time matched by the query (inclusive). Epoch millis.\n+\n+            Note that while Swagger allows a date-time formatted string query parameter,\n+            it appears Spring doesn't handle that well today. I ran into this issue:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI0NzQ2Mw==", "bodyText": "What does \"Declared as a string\" mean here? This is type: integer and format:int64. Is this a commentary on how Swagger-codegen handles this type of parameter? If so, is it related to the client side or the server side?", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431247463", "createdAt": "2020-05-27T15:48:33Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -933,6 +933,55 @@ paths:\n           description: A list of workspaces\n           schema:\n             \"$ref\": \"#/definitions/WorkspaceListResponse\"\n+  \"/v1/admin/audit/workspace\":\n+    get:\n+      tags:\n+        - workspaceAdmin\n+      description: 'Fetch audit logs involving this workspace as either a subject or object.'\n+      operationId: getAuditLogEntries\n+      parameters:\n+        - name: workspaceNamespace\n+          in: query\n+          type: string\n+          required: true\n+          description: >\n+            Firecloud Namespace for the AoU workspace to be queried.\n+        - name: limit\n+          in: query\n+          type: integer\n+          required: false\n+          default: 100\n+          description: >\n+            Maximum number of entries to return, sorted by timestamp descending.\n+        - name: afterInclusive\n+          description: >\n+            Earliest time matched by the query (inclusive). Epoch millis.\n+\n+            Note that while Swagger allows a date-time formatted string query parameter,\n+            it appears Spring doesn't handle that well today. I ran into this issue:\n+            https://github.com/swagger-api/swagger-codegen/issues/4113 and decided a long\n+            is good enough for now.\n+          in: query\n+          type: integer\n+          format: int64\n+          required: false\n+          default: 0\n+        - name: beforeExclusive\n+          description: >\n+             Upper bound on timestamp of most recent result (exclusive). Specified as milliseconds since Epoch\n+             (though declared as a string). Defaults to current timestamp.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI2OTc3NA==", "bodyText": "I'm generally not a fan of unspecified objects / fields in APIs. There really isn't too much additional cost in specifying field names and types, and IMO there's a huge benefit in API specificity.\nThere's also no other use of \"additionalProperties\" in this file, which suggests an argument by consistency, that we have a strong pattern to fully specify our API response objects.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431269774", "createdAt": "2020-05-27T16:15:51Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7329,95 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop\n+      high-level queries with a better semantic mapping to the concepts and rules\n+      governing them, which is why a freeform queryMetadata field is tolerable for\n+      now.\n+    required:\n+    - logEntries\n+    - queryMetadata\n+    properties:\n+      logEntries:\n+        type: array\n+        items:\n+          \"$ref\": \"#/definitions/AuditLogEntry\"\n+      queryMetadata:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MjM3Ng==", "bodyText": "This comment might feel better placed in a design document or Jira ticket rather than API documentation.\nI'm not sure I fully understand why this is considered a stopgap \u2013\u00a0can you give any examples of higher-level queries or semantic mapping that you would want to build? From my viewpoint, it covers just about everything I would have imagined we'd want for the admin pages.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431272376", "createdAt": "2020-05-27T16:19:46Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7329,95 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTI3MjczOQ==", "bodyText": "Thanks for the detailed documentation on these fields! Super helpful.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431272739", "createdAt": "2020-05-27T16:20:19Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -7280,3 +7329,95 @@ definitions:\n         format: int64\n       conceptName:\n         type: string\n+  AuditLogEntriesResponse:\n+    type: object\n+    description: >\n+      Represents the results of a query into the audit dataset in BigQery without\n+      filtering or transformation. This response type is a stopgap until we develop\n+      high-level queries with a better semantic mapping to the concepts and rules\n+      governing them, which is why a freeform queryMetadata field is tolerable for\n+      now.\n+    required:\n+    - logEntries\n+    - queryMetadata\n+    properties:\n+      logEntries:\n+        type: array\n+        items:\n+          \"$ref\": \"#/definitions/AuditLogEntry\"\n+      queryMetadata:\n+        description: >\n+          Since the audit system uses SQL database IDs and the rest of hte API layer\n+          does not, it's helpful to return additional properties in order to assist\n+          the client in interpreting the results.\n+        type: object\n+        additionalProperties: true\n+  AuditLogEntry:\n+    description: >\n+      Representation of the BigQuery Audit Log entry, post-translation from Stackdriver logging.\n+      All fields are treated as optional here, as there are no non-null constraints in the BigQery\n+      dataset.\n+\n+      It's possible that due to some error now or in the past that some columns might not match\n+      their expected values, though we take pains to avoid that. Regardless, nothing in this type\n+      definition is stricter than the BigQuery schema.\n+    type: object\n+    properties:\n+      actionId:\n+        description: Unique ID for this action. Used for grouping similar events under a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1612bd29ab7ecfe4b4190cecc78f27ccb54009b", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b1612bd29ab7ecfe4b4190cecc78f27ccb54009b", "committedDate": "2020-05-27T18:46:08Z", "message": "Merge branch 'master' into jaycarlton/RW-4921"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c3e6993620f3d334569219163acfa7032985478", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/9c3e6993620f3d334569219163acfa7032985478", "committedDate": "2020-05-27T21:17:52Z", "message": "comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDg2ODYy", "url": "https://github.com/all-of-us/workbench/pull/3606#pullrequestreview-419486862", "createdAt": "2020-05-27T18:11:36Z", "commit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxMTozNlrOGbXRIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODoxMTozNlrOGbXRIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM0NTk1Mg==", "bodyText": "That's a good point.  I forgot there was a place to hang comments.", "url": "https://github.com/all-of-us/workbench/pull/3606#discussion_r431345952", "createdAt": "2020-05-27T18:11:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -249,6 +249,8 @@ public String freeTierBillingAccountName() {\n \n   public static class ActionAuditConfig {\n     public String logName;\n+    public String bigQueryDataset;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NDI2OA=="}, "originalCommit": {"oid": "76857e11f40671678ead337e36b71453c3b75f11"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "991043e62ce222bd3ebd5cd70d94a1ed96f16070", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/991043e62ce222bd3ebd5cd70d94a1ed96f16070", "committedDate": "2020-05-28T14:56:14Z", "message": "most of the recommendations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1188d90284767cfe44d339a0d06318cf9f9b346", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b1188d90284767cfe44d339a0d06318cf9f9b346", "committedDate": "2020-05-28T16:08:02Z", "message": "fixup formats"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "085d5d1db8e450d189679e3f881af832a28d2516", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/085d5d1db8e450d189679e3f881af832a28d2516", "committedDate": "2020-05-28T17:22:23Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMDg5MzIw", "url": "https://github.com/all-of-us/workbench/pull/3606#pullrequestreview-421089320", "createdAt": "2020-05-29T16:04:57Z", "commit": {"oid": "085d5d1db8e450d189679e3f881af832a28d2516"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4769, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}