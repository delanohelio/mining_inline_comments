{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyODgxOTM5", "number": 3108, "title": "[RW-4315][risk=no] Distribution metrics and timing functions using Logs-based metrics", "bodyText": "Please forgive the typing: I have a gremlin in my keyboard.\nSince OpenCensus isn't working yet with GAE Standard, I'm using Logs-based metrics as a stand-in. Stackdriver logging can collect and aggregate the metrics for me. This is an off-label usage of Stackdriver logging, and not a long-term solution, but better than nothing. This PR includes support for timing arbitrary. functions and pieces of runnable code, starting with the WorkspacesController. I have code for CohortsController for another PR.\nI tried to make this timing mechanism as simple as possible. while making sure it worked the same everywhere. We're hopeful that we can move it to the generated API code so it's out of the way completely. If there's resistance to passing in service calls as Runnable or Supplier lambdas, I think. the only other way to do it is just do the timing. yourself (in two statements) and record. That's three statements that have to be kept in the right places,  and it's easy for things to move around. Building a \"smart stopwatch\" that also records probably would be awkward, as it's a value object that depends on a service, and I don't know of anything but entities that do that.\nTo minimize the disruption (and avoid indenting large functions and blowing up the diff), I moved the guts into implementation functions to be moved tot he service layer (which I've long wanted to do anyway).\nWe simply build a LogEntry for. each metric we want to record and give it the name, labels map, value, and unit. Other fields might be added. later (like distribution, description, and logs-based. metric type (i.e. counter &. distribution).\nThe only difference in the distribution and count metric is a selection when building the logs-based metric. This still happens in the Stackdriver Logging UI, although it can be automated.\nI made a new log for this, at debug-logs-based-metrics. I'm debating changing. this to logs-based-metrics, which was the. original plan.\nFor workspace_operation_time, the log query is. here.\nThe log entries look like this. in the logging viewer:\n\nThe chart for this metric is here and pictured below. This is. only showing. local events, so it's pretty sparse.\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-02-09T22:31:53Z", "url": "https://github.com/all-of-us/workbench/pull/3108", "merged": true, "mergeCommit": {"oid": "352c84794a82b47abd4a80388c5d0f3095c05945"}, "closed": true, "closedAt": "2020-02-14T18:42:32Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-1CLhgH2gAyMzcyODgxOTM5OmU5ZWNiYTQ5Zjg4MzUzMDk1ZjQ3MzViYWZkNDAwZGNjZTM3YjE4MWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcETcbzAFqTM1OTEyMDIyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e9ecba49f88353095f4735bafd400dcce37b181f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/e9ecba49f88353095f4735bafd400dcce37b181f", "committedDate": "2020-01-28T17:45:35Z", "message": "distribution stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c558810c3ba6f04f628bc205fcf2c37e549660de", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c558810c3ba6f04f628bc205fcf2c37e549660de", "committedDate": "2020-01-28T18:01:45Z", "message": "typo & spt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26266d4f45b4649de6e0e91d530dd1cc63681027", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/26266d4f45b4649de6e0e91d530dd1cc63681027", "committedDate": "2020-01-28T19:56:52Z", "message": "start recording all workspaces api methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2007eb7c9dbb74db93dbcd500db4b5cea992522", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/a2007eb7c9dbb74db93dbcd500db4b5cea992522", "committedDate": "2020-01-28T21:58:55Z", "message": "refactoring some  more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d1e71c0f5d3f117399cb37f7a20bb7181d113b7", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/1d1e71c0f5d3f117399cb37f7a20bb7181d113b7", "committedDate": "2020-01-28T22:29:56Z", "message": "some more instrumentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c0d81d54b0ed97828dfcef0fd713f1530b770b", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b4c0d81d54b0ed97828dfcef0fd713f1530b770b", "committedDate": "2020-01-28T22:36:31Z", "message": "more timings and spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c425152678f3df93c86d3764df5a31ff162fb035", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c425152678f3df93c86d3764df5a31ff162fb035", "committedDate": "2020-01-28T22:44:19Z", "message": "add timings to cohort controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5edf7cee5db10ebb910d4bba9e61d3809e9b09b", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/d5edf7cee5db10ebb910d4bba9e61d3809e9b09b", "committedDate": "2020-01-29T03:15:42Z", "message": "debug code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a309953a3be03555aea41482a9397a35148148f8", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/a309953a3be03555aea41482a9397a35148148f8", "committedDate": "2020-01-29T14:45:28Z", "message": "some  renames"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6041d3eba630f1120f0f306271d3c4b08dc29cad", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/6041d3eba630f1120f0f306271d3c4b08dc29cad", "committedDate": "2020-01-29T21:59:30Z", "message": "merge & fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b4cf8b7a9474de5a8e19c4ac46ab10462992231", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/1b4cf8b7a9474de5a8e19c4ac46ab10462992231", "committedDate": "2020-02-07T16:11:06Z", "message": "mismerge - sort out later"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d120f33671681fe59759651cdc25f71a871d7727", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/d120f33671681fe59759651cdc25f71a871d7727", "committedDate": "2020-02-07T16:19:39Z", "message": "cleanup merge && spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18f50e3e448d311b74211e5a87642c776bbc79a0", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/18f50e3e448d311b74211e5a87642c776bbc79a0", "committedDate": "2020-02-07T16:23:29Z", "message": "delete temp merge files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d05dbedddcfb3afabf5196dd2c84239caa324131", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/d05dbedddcfb3afabf5196dd2c84239caa324131", "committedDate": "2020-02-07T16:48:35Z", "message": "more merge fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df41bcc5018d21e49f45381e8944374978fd4ebc", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/df41bcc5018d21e49f45381e8944374978fd4ebc", "committedDate": "2020-02-07T20:04:01Z", "message": "progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb3314159d4247a910314678c4c88ff993187186", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/cb3314159d4247a910314678c4c88ff993187186", "committedDate": "2020-02-08T00:05:39Z", "message": "some changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbdf296209a9d6b83b2b543e2ca6b97b06df0b6e", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/cbdf296209a9d6b83b2b543e2ca6b97b06df0b6e", "committedDate": "2020-02-09T14:19:49Z", "message": "tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a25b93a2a4ae84acd6d10458939321b4dc0da03", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/7a25b93a2a4ae84acd6d10458939321b4dc0da03", "committedDate": "2020-02-09T20:26:48Z", "message": "test fixes & merge fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e98130c2079bd68c4734a392a050626b84971634", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/e98130c2079bd68c4734a392a050626b84971634", "committedDate": "2020-02-10T14:21:31Z", "message": "more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f89bdc0ae20b72df9b56c4554f5a543ec008515", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/4f89bdc0ae20b72df9b56c4554f5a543ec008515", "committedDate": "2020-02-10T14:48:55Z", "message": "restore status ctrlr"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "541f5bad9892ecbbcc968e563d195683fa810f45", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/541f5bad9892ecbbcc968e563d195683fa810f45", "committedDate": "2020-02-10T14:53:01Z", "message": "restore cohorts stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "027db8bc5acd31adb67da4bd4fb28a191370bcd4", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/027db8bc5acd31adb67da4bd4fb28a191370bcd4", "committedDate": "2020-02-10T14:53:33Z", "message": "restore .gitignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "359f813f5e741d5e3097cee648a32164e412398f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/359f813f5e741d5e3097cee648a32164e412398f", "committedDate": "2020-02-10T20:30:15Z", "message": "log levels"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dac70bc595aaa2cc35172928901e28d673fbb425", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/dac70bc595aaa2cc35172928901e28d673fbb425", "committedDate": "2020-02-11T02:05:22Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a163259fbbd47ede8f25f0ea80994984ce7b1fa4", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/a163259fbbd47ede8f25f0ea80994984ce7b1fa4", "committedDate": "2020-02-11T02:43:08Z", "message": "mock fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/78171accb6e37a5939b7cb97beafffb9288ba1ee", "committedDate": "2020-02-11T12:33:27Z", "message": "pull out implementation  methods to go to service & minimize diff"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NjIzNDQ3", "url": "https://github.com/all-of-us/workbench/pull/3108#pullrequestreview-356623447", "createdAt": "2020-02-11T12:40:11Z", "commit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo0MDoxMVrOFoHcNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo0MDoxMVrOFoHcNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTI3MQ==", "bodyText": "todo: return just the workspaceResponse here and build OK at outer level. same below.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377609271", "createdAt": "2020-02-11T12:40:11Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -359,27 +386,45 @@ private void setDbWorkspaceFields(\n     dbWorkspace = workspaceService.saveWithLastModified(dbWorkspace);\n     workspaceService.maybeDeleteRecentWorkspace(dbWorkspace.getWorkspaceId());\n     workspaceAuditor.fireDeleteAction(dbWorkspace);\n-    return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<WorkspaceResponse> getWorkspace(\n       String workspaceNamespace, String workspaceId) {\n-    return ResponseEntity.ok(workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    final WorkspaceResponse workspaceResponse =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"getWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    return ResponseEntity.ok(workspaceResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 119}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MDQxMjcz", "url": "https://github.com/all-of-us/workbench/pull/3108#pullrequestreview-357041273", "createdAt": "2020-02-11T22:23:07Z", "commit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoyMzowOFrOFobWxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowMjowOFrOFocVsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzNTU1OQ==", "bodyText": "Is there a need for both?", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377935559", "createdAt": "2020-02-11T22:23:08Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricService.java", "diffHunk": "@@ -28,4 +31,30 @@\n   default void recordEvent(EventMetric eventMetric) {\n     record(MeasurementBundle.builder().addEvent(eventMetric).build());\n   }\n+  /**\n+   * Use a Stopwatch to time the supplied operation, then add a measurement to the supplied\n+   * measurementBundleBuilder and record the associated DistributionMetric.\n+   *\n+   * @param measurementBundleBuilder - Builder for a MeasurementBundle to be recorded. Typically\n+   *     only has tags.\n+   * @param distributionMetric - Metric to be recorded. Always a distribution, as gauge and count\n+   *     don't make sense for timings\n+   * @param operation - Code to be run, e.g. () -> myService.computeThings()\n+   */\n+  void recordElapsedTime(\n+      Builder measurementBundleBuilder, DistributionMetric distributionMetric, Runnable operation);\n+\n+  /**\n+   * Same as above, but returns the result of the operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTE0Mw==", "bodyText": "Please add comments describing what this enum is and what its values mean", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377939143", "createdAt": "2020-02-11T22:31:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Aggregation.Distribution;\n+import io.opencensus.stats.BucketBoundaries;\n+\n+public enum DistributionAggregation {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzOTk1Ng==", "bodyText": "Same comment as DistributionAggregation", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377939956", "createdAt": "2020-02-11T22:33:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionMetric.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Measure.MeasureDouble;\n+import io.opencensus.stats.Measure.MeasureLong;\n+import java.util.Collections;\n+import java.util.List;\n+import org.pmiops.workbench.monitoring.labels.MetricLabel;\n+\n+public enum DistributionMetric implements Metric {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MDI5MQ==", "bodyText": "why 2?", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377940291", "createdAt": "2020-02-11T22:34:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionMetric.java", "diffHunk": "@@ -0,0 +1,78 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Measure.MeasureDouble;\n+import io.opencensus.stats.Measure.MeasureLong;\n+import java.util.Collections;\n+import java.util.List;\n+import org.pmiops.workbench.monitoring.labels.MetricLabel;\n+\n+public enum DistributionMetric implements Metric {\n+  COHORT_OPERATION_TIME(\n+      \"cohort_operation_time\",\n+      \"Time to complete Cohort-related operation.\",\n+      Collections.singletonList(MetricLabel.OPERATION_NAME),\n+      DistributionAggregation.OPERATION_TIME,\n+      MeasureLong.class),\n+  UNIFORM_RANDOM_SAMPLE(\n+      \"random_sample_2\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzM5NQ==", "bodyText": "Do we want callers to have to think about MeasurementBundle.Builder?  I'd prefer an interface like one of these:\nlogsBasedMetricService.recordElapsedTime(\n            \"createWorkspace\",\n            DistributionMetric.WORKSPACE_OPERATION_TIME,\n            () -> createWorkspaceImpl(workspace));\n\nor\nlogsBasedMetricService.recordElapsedTime(\n            MeasurementBundle.operationTag(\"createWorkspace\"),\n            DistributionMetric.WORKSPACE_OPERATION_TIME,\n            () -> createWorkspaceImpl(workspace));", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377943395", "createdAt": "2020-02-11T22:41:27Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +253,17 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    final Workspace result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"createWorkspace\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzUzMQ==", "bodyText": "Preach!", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377943531", "createdAt": "2020-02-11T22:41:49Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +253,17 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    final Workspace result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"createWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> createWorkspaceImpl(workspace));\n+    return ResponseEntity.ok(result);\n+  }\n+\n+  // TODO(jaycarlton): migrate this and other \"impl\" methods to WorkspaceService &", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDAwNg==", "bodyText": "if you're going to reflow this text, keep going :)", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377944006", "createdAt": "2020-02-11T22:43:00Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -266,7 +284,8 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n     Timestamp now = new Timestamp(clock.instant().toEpochMilli());\n     DbWorkspace dbWorkspace = new DbWorkspace();\n     // A little unintuitive but setting this here reflects the current state of the workspace\n-    // while it was in the billing buffer. Setting this value will inform the update billing code to\n+    // while it was in the billing buffer. Setting this value will inform the update billing\n+    // code to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDE1NA==", "bodyText": "same", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377944154", "createdAt": "2020-02-11T22:43:20Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -295,11 +314,11 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n     } catch (Exception e) {\n       throw new ServerErrorException(\"Could not update the workspace's billing account\", e);\n     }\n-\n     try {\n       dbWorkspace = workspaceService.getDao().save(dbWorkspace);\n     } catch (Exception e) {\n-      // Tell Google to set the billing account back to the free tier if the workspace creation\n+      // Tell Google to set the billing account back to the free tier if the workspace\n+      // creation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NDk3Ng==", "bodyText": "restore", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377944976", "createdAt": "2020-02-11T22:45:24Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -408,8 +453,6 @@ private void setDbWorkspaceFields(\n     }\n     ResearchPurpose researchPurpose = request.getWorkspace().getResearchPurpose();\n     if (researchPurpose != null) {\n-      // Note: this utility does not set the \"review requested\" bit or time. This is currently", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NTA3Mw==", "bodyText": "flow issue again", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377945073", "createdAt": "2020-02-11T22:45:37Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -421,13 +464,13 @@ private void setDbWorkspaceFields(\n         throw new ServerErrorException(\"Could not update the workspace's billing account\", e);\n       }\n     }\n-\n     try {\n       // The version asserted on save is the same as the one we read via\n       // getRequired() above, see RW-215 for details.\n       dbWorkspace = workspaceService.saveWithLastModified(dbWorkspace);\n     } catch (Exception e) {\n-      // Tell Google Cloud to set the billing account back to the original one since our update\n+      // Tell Google Cloud to set the billing account back to the original one since our\n+      // update", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NjIwNQ==", "bodyText": "since the metric is the same for all of these, can you add a little helper method that takes care of it? Something like recordElapsedWorkspaceOperation(\"cloneWorkspace\", () -> cloneWorkspaceImpl(...))", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377946205", "createdAt": "2020-02-11T22:48:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -438,13 +481,21 @@ private void setDbWorkspaceFields(\n \n     workspaceAuditor.fireEditAction(\n         originalWorkspace, editedWorkspace, dbWorkspace.getWorkspaceId());\n-    return ResponseEntity.ok(manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace));\n+    return manualWorkspaceMapper.toApiWorkspace(dbWorkspace, fcWorkspace);\n   }\n \n   @Override\n   public ResponseEntity<CloneWorkspaceResponse> cloneWorkspace(\n       String fromWorkspaceNamespace, String fromWorkspaceId, CloneWorkspaceRequest body)\n       throws BadRequestException, TooManyRequestsException {\n+    return logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"cloneWorkspace\"),\n+        DistributionMetric.WORKSPACE_OPERATION_TIME,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NzA0NA==", "bodyText": "Maybe as part of a future refactoring of these to a Service?  not sure it makes sense in this PR - let's keep this one focused.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377947044", "createdAt": "2020-02-11T22:50:12Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -359,27 +386,45 @@ private void setDbWorkspaceFields(\n     dbWorkspace = workspaceService.saveWithLastModified(dbWorkspace);\n     workspaceService.maybeDeleteRecentWorkspace(dbWorkspace.getWorkspaceId());\n     workspaceAuditor.fireDeleteAction(dbWorkspace);\n-    return ResponseEntity.ok(new EmptyResponse());\n   }\n \n   @Override\n   public ResponseEntity<WorkspaceResponse> getWorkspace(\n       String workspaceNamespace, String workspaceId) {\n-    return ResponseEntity.ok(workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    final WorkspaceResponse workspaceResponse =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"getWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> workspaceService.getWorkspace(workspaceNamespace, workspaceId));\n+    return ResponseEntity.ok(workspaceResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwOTI3MQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0NzUxNA==", "bodyText": "This change seems unrelated", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377947514", "createdAt": "2020-02-11T22:51:21Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -236,8 +237,10 @@\n   @Autowired WorkspaceMapper workspaceMapper;\n \n   @Autowired ManualWorkspaceMapper manualWorkspaceMapper;\n+  @Autowired LogsBasedMetricService logsBasedMetricService;\n \n-  @Autowired Provider<Zendesk> mockZendeskProvider;\n+  @MockBean Provider<Zendesk> mockZendeskProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0ODU3Mg==", "bodyText": "is there a nice const or other value you can use here that shows why 4 is correct?  Is it PayloadKey.values().size()?", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377948572", "createdAt": "2020-02-11T22:53:58Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "diffHunk": "@@ -79,20 +92,18 @@ public void testRecordMeasurementBundle_writes() {\n     assertThat(logEntry.getSeverity()).isEqualTo(Severity.INFO);\n \n     final Map<String, Object> payloadMap = logEntry.<JsonPayload>getPayload().getDataAsMap();\n-    assertThat(payloadMap).hasSize(3);\n+    assertThat(payloadMap).hasSize(4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MTY2NQ==", "bodyText": "worth making some asserts on the logs here?", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r377951665", "createdAt": "2020-02-11T23:02:08Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/monitoring/LogsBasedMetricsServiceTest.java", "diffHunk": "@@ -121,12 +132,103 @@ public void testRecord_handlesMultipleMeasurements() {\n         sentEntries.stream()\n             .map(e -> (JsonPayload) e.getPayload())\n             .map(JsonPayload::getDataAsMap)\n-            .map(m -> (String) m.get(LogsBasedMetricService.METRIC_NAME_KEY))\n+            .map(m -> (String) m.get(PayloadKey.NAME.getKeyName()))\n             .filter(Objects::nonNull)\n             .collect(ImmutableSet.toImmutableSet());\n     assertThat(metricNames)\n         .containsAllIn(\n             ImmutableSet.of(\n                 EventMetric.NOTEBOOK_CLONE.getName(), EventMetric.NOTEBOOK_DELETE.getName()));\n   }\n+\n+  @Test\n+  public void testTimeAndRecordWithRunnable() {\n+    Set<Integer> sideEffectSet = new HashSet<>();\n+    logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"test1\"),\n+        DistributionMetric.WORKSPACE_OPERATION_TIME,\n+        () -> {\n+          int innerInt = 2;\n+          sideEffectSet.add(3);\n+          innerInt -= 3;\n+          assertThat(innerInt).isEqualTo(-1);\n+        });\n+    assertThat(sideEffectSet).contains(3);\n+    verify(mockLogging).write(logEntriesCaptor.capture());\n+    final Map<String, Object> entryData =\n+        StreamSupport.stream(logEntriesCaptor.getValue().spliterator(), false)\n+            .map(LogEntry::getPayload)\n+            .map(p -> (JsonPayload) p)\n+            .map(JsonPayload::getDataAsMap)\n+            .findFirst()\n+            .orElse(Collections.emptyMap());\n+    assertThat(entryData).hasSize(4);\n+    assertThat(entryData.get(PayloadKey.NAME.getKeyName()))\n+        .isEqualTo(DistributionMetric.WORKSPACE_OPERATION_TIME.getName());\n+    assertThat((double) entryData.get(PayloadKey.VALUE.getKeyName()))\n+        .isEqualTo((double) OPERATION_DURATION.toMillis());\n+  }\n+\n+  public void testTimeAndRecordWithSupplier() {\n+    Set<Integer> aSet = new HashSet<>();\n+    final int result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"test1\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> {\n+              return 99;\n+            });\n+    assertThat(aSet).contains(3);\n+    assertThat(result).isEqualTo(99);\n+\n+    verify(mockLogging).write(logEntriesCaptor.capture());\n+    final Map<String, Object> entryData =\n+        StreamSupport.stream(logEntriesCaptor.getValue().spliterator(), false)\n+            .map(LogEntry::getPayload)\n+            .map(p -> (JsonPayload) p)\n+            .map(JsonPayload::getDataAsMap)\n+            .findFirst()\n+            .orElse(Collections.emptyMap());\n+    assertThat(entryData).hasSize(4);\n+    assertThat(entryData.get(PayloadKey.NAME.getKeyName()))\n+        .isEqualTo(DistributionMetric.WORKSPACE_OPERATION_TIME.getName());\n+    assertThat(entryData.get(PayloadKey.UNIT.getKeyName()))\n+        .isEqualTo(UnitOfMeasure.MILLISECOND.getUcmSymbol());\n+\n+    assertThat((Double) entryData.get(PayloadKey.VALUE.getKeyName()))\n+        .isEqualTo(OPERATION_DURATION.toMillis());\n+  }\n+\n+  @Test(expected = IllegalAccessError.class)\n+  public void testRecordElapsedTime_throws() {\n+    logsBasedMetricService.recordElapsedTime(\n+        MeasurementBundle.builder(),\n+        DistributionMetric.COHORT_OPERATION_TIME,\n+        () -> {\n+          throw new IllegalAccessError(\"Boo!\");\n+        });\n+  }\n+\n+  @Test\n+  public void testRecordElapsedTime_nestedWorks() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 164}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/ccbec34e063fc0896f6d515df8f75ad1991ac176", "committedDate": "2020-02-12T16:24:51Z", "message": "cleanup  w/ helper methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NjYyMjQy", "url": "https://github.com/all-of-us/workbench/pull/3108#pullrequestreview-357662242", "createdAt": "2020-02-12T17:52:45Z", "commit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzo1Mjo0NVrOFo4mJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODowMDowN1rOFo41pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNDYyOA==", "bodyText": "Really like this pattern.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378414628", "createdAt": "2020-02-12T17:52:45Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricServiceFakeImpl.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package org.pmiops.workbench.monitoring;\n+\n+import java.util.function.Supplier;\n+import org.pmiops.workbench.monitoring.MeasurementBundle.Builder;\n+import org.pmiops.workbench.monitoring.views.DistributionMetric;\n+import org.pmiops.workbench.monitoring.views.EventMetric;\n+import org.springframework.stereotype.Service;\n+\n+/**\n+ * While it's possible to mock this service correctly, it's much less intrusive to simply provide a\n+ * no-op implementation. If you're curious on what the stubbing looks like, see\n+ * https://stackoverflow.com/questions/60138415/which-breaks-first-mockito-or-java-generics for\n+ * details on how to mock the generic supplier matcher.\n+ */\n+@Service(\"LOGS_BASED_METRIC_SERVICE_FAKE\")\n+public class LogsBasedMetricServiceFakeImpl implements LogsBasedMetricService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNTY2OA==", "bodyText": "spelling: manually", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378415668", "createdAt": "2020-02-12T17:54:43Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/LogsBasedMetricServiceImpl.java", "diffHunk": "@@ -79,4 +121,41 @@ private LogEntry payloadToLogEntry(JsonPayload jsonPayload) {\n         .setResource(stackdriverStatsExporterService.getLoggingMonitoredResource())\n         .build();\n   }\n+\n+  /**\n+   * Allowed labels for the JsonPayload are here.\n+   *\n+   * <p>NAME: name of the metric, to show up in the Metric Explorer. Should be snake_case. Existing\n+   * EventMetric class's getName() method works.\n+   *\n+   * <p>VALUE: double value for the metric for this sample. Either 1.0 for count metrics, or some\n+   * number in the distribution for a distribution metric. For cumulative metrics, just use a value\n+   * to be summed, and choose the right aggregation on the Stackdriver side. That is, there's no\n+   * separate option for it.\n+   *\n+   * <p>LABELS: String-String map of label to value. Should only contain keys and discrete values\n+   * allowed by the EventMetric and MetricLabel classes, respectively. (Using a MeasurementBundle\n+   * ensures this).\n+   *\n+   * <p>UNIT: Official unit of measure. It looks like you still have to set this up manuaally when", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNjMxNg==", "bodyText": "spelling: OpenCensus here and below", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378416316", "createdAt": "2020-02-12T17:55:54Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Aggregation.Distribution;\n+import io.opencensus.stats.BucketBoundaries;\n+\n+/**\n+ * Aggregation values to use with OpenCensus Distribution metrics. The bucket bounadries are inner\n+ * boundaries, so a list of [0.25, 0.50, 0.75] would actually make 5 buckets, with the lowest being\n+ * [0.0, 0.25), [0.25, 0.5), [0.5, 0.75), [0.75, MAX_DOUBLE].\n+ *\n+ * <p>Note: These buckets are provided for use with OpenCenss distribution metrics, which are not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNjM4NQ==", "bodyText": "currently", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378416385", "createdAt": "2020-02-12T17:56:02Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/DistributionAggregation.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package org.pmiops.workbench.monitoring.views;\n+\n+import com.google.common.collect.ImmutableList;\n+import io.opencensus.stats.Aggregation;\n+import io.opencensus.stats.Aggregation.Distribution;\n+import io.opencensus.stats.BucketBoundaries;\n+\n+/**\n+ * Aggregation values to use with OpenCensus Distribution metrics. The bucket bounadries are inner\n+ * boundaries, so a list of [0.25, 0.50, 0.75] would actually make 5 buckets, with the lowest being\n+ * [0.0, 0.25), [0.25, 0.5), [0.5, 0.75), [0.75, MAX_DOUBLE].\n+ *\n+ * <p>Note: These buckets are provided for use with OpenCenss distribution metrics, which are not\n+ * currenlty in service. Since every MetricBase needs an Aggregation anyway, and I wanted the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxNzQ4NA==", "bodyText": "This doesn't exactly match the pattern you've added in the log service, but I think it would be less intrusive to handle method-level timing in an interceptor, e.g. https://github.com/all-of-us/workbench/blob/8541d09075b0bbc3e4ad786212a4fea8c84aee54/api/src/main/java/org/pmiops/workbench/interceptors/TracingInterceptor.java", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378417484", "createdAt": "2020-02-12T17:58:08Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +254,13 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    return ResponseEntity.ok(\n+        recordOperationTime(() -> createWorkspaceImpl(workspace), \"createWorkspace\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccbec34e063fc0896f6d515df8f75ad1991ac176"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQxODU5OA==", "bodyText": "Still not really sold on this. This is only useful if this controller plays a role that's different from WorkspaceService, and isn't just passing through every method call. If that's what's happening (e.g. if this change here exemplifies the expected division of labor), then WorkspacesController may as well become WorkspaceService. Unless there are Spring reasons to want to use WorkspaceService over WorkspaceController in other places.", "url": "https://github.com/all-of-us/workbench/pull/3108#discussion_r378418598", "createdAt": "2020-02-12T18:00:07Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -246,6 +253,17 @@ private void maybeFileZendeskReviewRequest(Workspace workspace) {\n \n   @Override\n   public ResponseEntity<Workspace> createWorkspace(Workspace workspace) throws BadRequestException {\n+    final Workspace result =\n+        logsBasedMetricService.recordElapsedTime(\n+            MeasurementBundle.builder().addTag(MetricLabel.OPERATION_NAME, \"createWorkspace\"),\n+            DistributionMetric.WORKSPACE_OPERATION_TIME,\n+            () -> createWorkspaceImpl(workspace));\n+    return ResponseEntity.ok(result);\n+  }\n+\n+  // TODO(jaycarlton): migrate this and other \"impl\" methods to WorkspaceService &", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk0MzUzMQ=="}, "originalCommit": {"oid": "78171accb6e37a5939b7cb97beafffb9288ba1ee"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c61a455cdfc68380560b8cfb9cbbaea06e92504", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/8c61a455cdfc68380560b8cfb9cbbaea06e92504", "committedDate": "2020-02-12T21:24:21Z", "message": "pr fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edc30030f149600010e063b707184f51c37f3e23", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/edc30030f149600010e063b707184f51c37f3e23", "committedDate": "2020-02-12T21:24:43Z", "message": "spt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2262a94c235dd7e61e871b0e209fcc773fe7bf0", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/c2262a94c235dd7e61e871b0e209fcc773fe7bf0", "committedDate": "2020-02-12T21:36:26Z", "message": "add assertions at  both levels  in nested ttest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba37882a3d9a382afc1a5ac48cf8c49a9599d0f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/4ba37882a3d9a382afc1a5ac48cf8c49a9599d0f", "committedDate": "2020-02-13T17:31:55Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ca640f668ec2443f55de1d7c3d7ed095a867cea", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/7ca640f668ec2443f55de1d7c3d7ed095a867cea", "committedDate": "2020-02-13T22:17:00Z", "message": "record gauge collection times"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9c23b8fdd4d3b1ea05544735cbf6656c8f65a2b", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/a9c23b8fdd4d3b1ea05544735cbf6656c8f65a2b", "committedDate": "2020-02-13T23:08:22Z", "message": "merge master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70adc47133f6171c974ac16bf3ba2e725d76197e", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/70adc47133f6171c974ac16bf3ba2e725d76197e", "committedDate": "2020-02-14T02:47:50Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47bdf13e28b582c2e2dbf7848e4828183a0d805c", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/47bdf13e28b582c2e2dbf7848e4828183a0d805c", "committedDate": "2020-02-14T02:54:33Z", "message": "simplifyu"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f70c38b62d26f516a479536658008eda9134a46", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/1f70c38b62d26f516a479536658008eda9134a46", "committedDate": "2020-02-14T03:01:31Z", "message": "remove extraneous tmp file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00af4bfdd30bfd01550a0b72b5ad73e6d098d21a", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/00af4bfdd30bfd01550a0b72b5ad73e6d098d21a", "committedDate": "2020-02-14T03:16:20Z", "message": "dep"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MDExNjI4", "url": "https://github.com/all-of-us/workbench/pull/3108#pullrequestreview-359011628", "createdAt": "2020-02-14T15:15:47Z", "commit": {"oid": "00af4bfdd30bfd01550a0b72b5ad73e6d098d21a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4daf118079db199673ac3363255076071519e53d", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/4daf118079db199673ac3363255076071519e53d", "committedDate": "2020-02-14T15:38:31Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTIwMjIy", "url": "https://github.com/all-of-us/workbench/pull/3108#pullrequestreview-359120222", "createdAt": "2020-02-14T18:01:02Z", "commit": {"oid": "4daf118079db199673ac3363255076071519e53d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3540, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}