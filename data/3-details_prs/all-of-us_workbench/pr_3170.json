{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4MDAyNDEy", "number": 3170, "title": "[RW-4418][risk=low] Add project.rb tool to delete workspaces", "bodyText": "Example Usage\n./project.rb delete-workspaces --dry-run=false --delete-list-filename delete.txt --project all-of-us-rw-staging\ndelete_list.txt\naou-rw-test-1, fcname\naou-rw-test-2, fcname2\naou-rw-test-3, fcname3\naou-rw-test-4, fcname4\n\nNotes\n\nfetch-firecloud-user-profile was broken so I fixed that while I was in here\nHigh level approach (for importing a complex class like WorkspaceService) was to build the Bean directly in the tool class and manually providing the necessary dependencies and null for the unnecessary ones.\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-02-20T22:15:23Z", "url": "https://github.com/all-of-us/workbench/pull/3170", "merged": true, "mergeCommit": {"oid": "8dcdb63c76268b5a252054acc6b6aee191d80c40"}, "closed": true, "closedAt": "2020-02-25T21:36:07Z", "author": {"login": "ericsong"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGQmXigH2gAyMzc4MDAyNDEyOjFmMGYyOGM4ODFjZmUzMmIwYTcxM2Q2MmNkY2FlODk0OTk1OTUyYzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcH44CxgH2gAyMzc4MDAyNDEyOmFjNTk5NTYzZWI4OWQzZjJkMGY4NzQwZjkxMmZmOWM2YmJjOTRhZDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1f0f28c881cfe32b0a713d62cdcae894995952c4", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/1f0f28c881cfe32b0a713d62cdcae894995952c4", "committedDate": "2020-02-20T19:50:01Z", "message": "fix fetch fc user profile tool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdab1002a6321625d75df9569559b34beb87230a", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/fdab1002a6321625d75df9569559b34beb87230a", "committedDate": "2020-02-20T22:03:39Z", "message": "add script to delete workspaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbe6549a15d9fe70fe66337bea4aae38f9feadd5", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/fbe6549a15d9fe70fe66337bea4aae38f9feadd5", "committedDate": "2020-02-20T22:08:45Z", "message": "remove dead code and add exception handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/cf4bca3abd2164dbb3c078e250bb48738031e9cc", "committedDate": "2020-02-20T22:09:50Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyODI4ODQ3", "url": "https://github.com/all-of-us/workbench/pull/3170#pullrequestreview-362828847", "createdAt": "2020-02-21T18:28:54Z", "commit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODoyODo1NVrOFtAbcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxODo1MDowNFrOFtBAxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczNzI2Nw==", "bodyText": "Can I also call this with gradle directly?", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382737267", "createdAt": "2020-02-21T18:28:55Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -698,6 +698,16 @@ task exportWorkspaceData(type: JavaExec) {\n   }\n }\n \n+// See project.rb command: delete-workspaces", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczOTA2OA==", "bodyText": "Could you add a dry-run option that verifies the file list and logs whether each workspace exists or not?", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382739068", "createdAt": "2020-02-21T18:32:54Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1217,6 +1217,45 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def delete_workspaces(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--delete-list-filename [delete-list-filename]\",\n+      String,\n+      ->(opts, v) { opts.deleteListFilename = v},\n+      \"File containing list of workspaces to delete.\n+      Each line should contain a single workspace's namespace and firecloud name, separated by a comma\n+      Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjczOTgxMg==", "bodyText": "aside: I'm surprised this function doesn't pass anything to the block.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382739812", "createdAt": "2020-02-21T18:34:34Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1217,6 +1217,45 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def delete_workspaces(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--delete-list-filename [delete-list-filename]\",\n+      String,\n+      ->(opts, v) { opts.deleteListFilename = v},\n+      \"File containing list of workspaces to delete.\n+      Each line should contain a single workspace's namespace and firecloud name, separated by a comma\n+      Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+\n+  # Create a cloud context and apply the DB connection variables to the environment.\n+  # These will be read by Gradle and passed as Spring Boot properties to the command-line.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate()\n+\n+  flags = ([\n+      [\"--delete-list-filename\", op.opts.deleteListFilename]\n+  ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  flags.map! { |f| \"'#{f}'\" }\n+\n+  with_cloud_proxy_and_db(gcc) do", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDAxOQ==", "bodyText": "Can we define a constant for the string \"delete-workspaces\"?", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382740019", "createdAt": "2020-02-21T18:35:03Z", "author": {"login": "jaycarlton"}, "path": "api/libproject/devstart.rb", "diffHunk": "@@ -1217,6 +1217,45 @@ def export_workspace_data(cmd_name, *args)\n     :fn => ->(*args) {export_workspace_data(\"export-workspace-data\", *args)}\n })\n \n+def delete_workspaces(cmd_name, *args)\n+  common = Common.new\n+  ensure_docker cmd_name, args\n+\n+  op = WbOptionsParser.new(cmd_name, args)\n+  op.opts.project = TEST_PROJECT\n+\n+  op.add_typed_option(\n+      \"--delete-list-filename [delete-list-filename]\",\n+      String,\n+      ->(opts, v) { opts.deleteListFilename = v},\n+      \"File containing list of workspaces to delete.\n+      Each line should contain a single workspace's namespace and firecloud name, separated by a comma\n+      Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+\n+  # Create a cloud context and apply the DB connection variables to the environment.\n+  # These will be read by Gradle and passed as Spring Boot properties to the command-line.\n+  gcc = GcloudContextV2.new(op)\n+  op.parse.validate\n+  gcc.validate()\n+\n+  flags = ([\n+      [\"--delete-list-filename\", op.opts.deleteListFilename]\n+  ]).map { |kv| \"#{kv[0]}=#{kv[1]}\" }\n+  flags.map! { |f| \"'#{f}'\" }\n+\n+  with_cloud_proxy_and_db(gcc) do\n+    common.run_inline %W{\n+        gradle deleteWorkspaces\n+       -PappArgs=[#{flags.join(',')}]}\n+  end\n+end\n+\n+Common.register_command({\n+    :invocation => \"delete-workspaces\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MDc0NA==", "bodyText": "If it's not too tricky, I'd probably return some kind of status for whether the workspace was successfully deleted, wasn't there in the first place, or was otherwise not deletable. Might want to capture this on both our side and the firecloud side.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382740744", "createdAt": "2020-02-21T18:36:40Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceService.java", "diffHunk": "@@ -45,6 +45,8 @@\n \n   DbWorkspace saveWithLastModified(DbWorkspace workspace);\n \n+  void deleteWorkspace(DbWorkspace dbWorkspace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MjM0NA==", "bodyText": "BTW, most of these are coming out soon in favor of the interceptor approach. I'm keeping them in place for a week or so since they're one release ahead and I need to get automation working on the logs-based stuff.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382742344", "createdAt": "2020-02-21T18:40:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -369,24 +369,15 @@ private void setDbWorkspaceFields(\n   public ResponseEntity<EmptyResponse> deleteWorkspace(\n       String workspaceNamespace, String workspaceId) {\n     recordOperationTime(\n-        () -> deleteWorkspaceImpl(workspaceNamespace, workspaceId), \"deleteWorkspace\");\n+        () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0Mjg3NA==", "bodyText": "If you want, you could also inject the auditor into the service and fire from there. This is the only controller that has one I think, and that was due to how it was structured at the time. It's fine here though.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382742874", "createdAt": "2020-02-21T18:41:30Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -369,24 +369,15 @@ private void setDbWorkspaceFields(\n   public ResponseEntity<EmptyResponse> deleteWorkspace(\n       String workspaceNamespace, String workspaceId) {\n     recordOperationTime(\n-        () -> deleteWorkspaceImpl(workspaceNamespace, workspaceId), \"deleteWorkspace\");\n+        () -> {\n+          DbWorkspace dbWorkspace = workspaceService.getRequired(workspaceNamespace, workspaceId);\n+          workspaceService.deleteWorkspace(dbWorkspace);\n+          workspaceAuditor.fireDeleteAction(dbWorkspace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0MzM0OQ==", "bodyText": "Was this easier than simply implementing a batch delete API endpoint? I'd rather have swagger boilerplate than have to hack the service injection like this.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382743349", "createdAt": "2020-02-21T18:42:27Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NDA4NQ==", "bodyText": "future: if we determine a useful core of the workspaceService we could break that into its own service and inject the whole thing.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382744085", "createdAt": "2020-02-21T18:43:58Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean\n+  public WorkspaceService workspaceService(\n+      FireCloudService fireCloudService,\n+      Clock clock,\n+      WorkspaceDao workspaceDao,\n+      UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<DbUser> dbUserProvider) {\n+    return new WorkspaceServiceImpl(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NDk0OA==", "bodyText": "This user will actually show up in the audit logs. @calbach and I have been discussing several angles to this problem (i.e. attributing the agent correctly with an anonymous user), and we considered but ultimately shied away from a placeholder user.\nHow would you feel about providing the username of the devops person running the tool on the command line and looking them up so that we have an actual, helpful user ID & email address in the log?", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382744948", "createdAt": "2020-02-21T18:46:02Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/DeleteWorkspaces.java", "diffHunk": "@@ -0,0 +1,175 @@\n+package org.pmiops.workbench.tools;\n+\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.time.Clock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.apache.commons.cli.CommandLine;\n+import org.apache.commons.cli.DefaultParser;\n+import org.apache.commons.cli.Option;\n+import org.apache.commons.cli.Options;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.dao.UserRecentWorkspaceDao;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.ApiClient;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n+import org.pmiops.workbench.firecloud.api.ProfileApi;\n+import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n+import org.pmiops.workbench.model.WorkspaceActiveStatus;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.pmiops.workbench.workspaces.WorkspaceServiceImpl;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.CommandLineRunner;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.context.annotation.Scope;\n+\n+@Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n+public class DeleteWorkspaces {\n+\n+  private static final Logger log = Logger.getLogger(DeleteWorkspaces.class.getName());\n+\n+  private static Option deleteListFilename =\n+      Option.builder()\n+          .longOpt(\"delete-list-filename\")\n+          .desc(\n+              \"File containing list of workspaces to delete. Each line should contain a single workspace's namespace and firecloud name, separated by a comma\"\n+                  + \"Example: ws-namespace-1,fc-id-1 \\n ws-namespace-2,fc-id-2 \\n ws-namespace-3, fc-id-3\")\n+          .required()\n+          .hasArg()\n+          .build();\n+\n+  private static Options options = new Options().addOption(deleteListFilename);\n+\n+  @Bean\n+  public WorkspaceService workspaceService(\n+      FireCloudService fireCloudService,\n+      Clock clock,\n+      WorkspaceDao workspaceDao,\n+      UserRecentWorkspaceDao userRecentWorkspaceDao,\n+      Provider<DbUser> dbUserProvider) {\n+    return new WorkspaceServiceImpl(\n+        null,\n+        null,\n+        clock,\n+        null,\n+        null,\n+        null,\n+        fireCloudService,\n+        null,\n+        dbUserProvider,\n+        userRecentWorkspaceDao,\n+        null,\n+        workspaceDao,\n+        null,\n+        null);\n+  }\n+\n+  static DbUser currentImpersonatedUser;\n+\n+  @Bean\n+  @Primary\n+  @Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)\n+  DbUser user() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjc0NjgyMA==", "bodyText": "\ud83d\udc4f  ComponentScan assumes a lot about our package management discipline.", "url": "https://github.com/all-of-us/workbench/pull/3170#discussion_r382746820", "createdAt": "2020-02-21T18:50:04Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchFireCloudUserProfile.java", "diffHunk": "@@ -23,7 +25,7 @@\n  * domain-wide delegation to make FireCloud API calls impersonating other users.\n  */\n @Configuration\n-@ComponentScan(\"org.pmiops.workbench.firecloud\")\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4bca3abd2164dbb3c078e250bb48738031e9cc"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f75325bb18115257d658d23bf10a7a03c9cbdb70", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/f75325bb18115257d658d23bf10a7a03c9cbdb70", "committedDate": "2020-02-24T17:44:56Z", "message": "add dry run"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzNzAxNzcx", "url": "https://github.com/all-of-us/workbench/pull/3170#pullrequestreview-363701771", "createdAt": "2020-02-24T21:08:59Z", "commit": {"oid": "f75325bb18115257d658d23bf10a7a03c9cbdb70"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac599563eb89d3f2d0f8740f912ff9c6bbc94ad2", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/ac599563eb89d3f2d0f8740f912ff9c6bbc94ad2", "committedDate": "2020-02-25T21:19:27Z", "message": "spotles"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3628, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}