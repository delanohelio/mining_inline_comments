{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTEwMDgx", "number": 4044, "title": "[RW-5404][risk=low] GetRuntime: support user override runtime semantics", "bodyText": "Description:\nImplements the logic where we will check the user's latest deleted runtime if we cannot find an active one through getRuntime.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-09-22T18:10:40Z", "url": "https://github.com/all-of-us/workbench/pull/4044", "merged": true, "mergeCommit": {"oid": "269ee757a72bab128114b253afc692f66ab6e077"}, "closed": true, "closedAt": "2020-09-25T14:34:34Z", "author": {"login": "ericsong"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLZLV2gH2gAyNDkxMTEwMDgxOmI0NzU5MTQ2ZmE0MjdmZjA4ZGU2YWM3MGU3ZGFkYWUyYzBlYzMzY2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMWOtJAH2gAyNDkxMTEwMDgxOmU0NzI2NmI0NTE4ZTY5NzNkNTdkNjdkZmFmMjE1MDUxZDIwODVkYTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b4759146fa427ff08de6ac70e7dadae2c0ec33cc", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/b4759146fa427ff08de6ac70e7dadae2c0ec33cc", "committedDate": "2020-09-22T14:50:25Z", "message": "add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ad8e69cfef160b1c1d6c8f02ecfe51c61c52eea", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/7ad8e69cfef160b1c1d6c8f02ecfe51c61c52eea", "committedDate": "2020-09-22T17:40:09Z", "message": "passing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c48d9215df1bc171c4d9f9d67485a5eef4b7642c", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/c48d9215df1bc171c4d9f9d67485a5eef4b7642c", "committedDate": "2020-09-22T17:40:39Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfa5881d415b50aca4cfb86e8c428c54ec97dc12", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/bfa5881d415b50aca4cfb86e8c428c54ec97dc12", "committedDate": "2020-09-22T18:08:59Z", "message": "move constants to interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f76535037b039060f38087b0ff729433b93a7ad", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/7f76535037b039060f38087b0ff729433b93a7ad", "committedDate": "2020-09-22T19:33:11Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MDYwNjY2", "url": "https://github.com/all-of-us/workbench/pull/4044#pullrequestreview-495060666", "createdAt": "2020-09-23T21:26:17Z", "commit": {"oid": "7f76535037b039060f38087b0ff729433b93a7ad"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMToyNjoxN1rOHXBj-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMTozODozN1rOHXB5GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNDg4OA==", "bodyText": "Shouldn't this check be after the stream/filter?", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r493904888", "createdAt": "2020-09-23T21:26:17Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -173,10 +175,51 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n     workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    return ResponseEntity.ok(\n-        leonardoMapper.toApiRuntime(\n-            leonardoNotebooksClient.getRuntime(\n-                workspaceNamespace, userProvider.get().getRuntimeName())));\n+    try {\n+      return ResponseEntity.ok(\n+          leonardoMapper.toApiRuntime(\n+              leonardoNotebooksClient.getRuntime(\n+                  workspaceNamespace, userProvider.get().getRuntimeName())));\n+    } catch (NotFoundException e) {\n+      if (!workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+        throw e;\n+      }\n+\n+      List<LeonardoListRuntimeResponse> runtimes =\n+          leonardoNotebooksClient.listRuntimesByProject(workspaceNamespace);\n+      if (runtimes.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f76535037b039060f38087b0ff729433b93a7ad"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNTY4Ng==", "bodyText": "I would clarify that this includes deleted runtimes, e.g. listRuntimesByProjectWithDeleted(); or else plumb the boolean through. Distinction is otherwise unclear between these two methods", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r493905686", "createdAt": "2020-09-23T21:28:03Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/notebooks/LeonardoNotebooksClient.java", "diffHunk": "@@ -16,6 +16,8 @@\n   /** lists all notebook runtimes as the appengine SA, to be used only for admin operations */\n   List<LeonardoListRuntimeResponse> listRuntimesByProjectAsService(String googleProject);\n \n+  List<LeonardoListRuntimeResponse> listRuntimesByProject(String googleProject);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f76535037b039060f38087b0ff729433b93a7ad"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNzMyMQ==", "bodyText": "I don't know if there's an elegant way of doing this, but if we encounter an old and invalid runtime, it would be nice to bail here and just return a 404. I'm not sure if we can expect that manifest as an NPE out of the mapper, or perhaps as a malformed runtime.", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r493907321", "createdAt": "2020-09-23T21:31:33Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -173,10 +175,51 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n     workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    return ResponseEntity.ok(\n-        leonardoMapper.toApiRuntime(\n-            leonardoNotebooksClient.getRuntime(\n-                workspaceNamespace, userProvider.get().getRuntimeName())));\n+    try {\n+      return ResponseEntity.ok(\n+          leonardoMapper.toApiRuntime(\n+              leonardoNotebooksClient.getRuntime(\n+                  workspaceNamespace, userProvider.get().getRuntimeName())));\n+    } catch (NotFoundException e) {\n+      if (!workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+        throw e;\n+      }\n+\n+      List<LeonardoListRuntimeResponse> runtimes =\n+          leonardoNotebooksClient.listRuntimesByProject(workspaceNamespace);\n+      if (runtimes.isEmpty()) {\n+        throw e;\n+      }\n+\n+      LeonardoListRuntimeResponse mostRecentRuntime =\n+          runtimes.stream()\n+              .sorted(\n+                  (a, b) ->\n+                      b.getAuditInfo()\n+                          .getCreatedDate()\n+                          .compareTo(a.getAuditInfo().getCreatedDate()))\n+              .findFirst()\n+              .get();\n+\n+      final String OVERRIDE_LABEL =\n+          LeonardoMapper.RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(\n+              RuntimeConfigurationType.USEROVERRIDE);\n+      Map<String, String> runtimeLabels = (Map<String, String>) mostRecentRuntime.getLabels();\n+      if (runtimeLabels != null\n+          && OVERRIDE_LABEL.equals(runtimeLabels.get(LeonardoMapper.RUNTIME_LABEL_AOU_CONFIG))) {\n+        Runtime runtime = leonardoMapper.toApiRuntime(mostRecentRuntime);\n+        if (!runtime.getStatus().equals(RuntimeStatus.DELETED)) {\n+          log.warning(\n+              \"Runtimes returned from ListRuntimes should be DELETED but found \"\n+                  + runtime.getStatus());\n+        }\n+\n+        return ResponseEntity.ok(\n+            leonardoMapper.toApiRuntime(mostRecentRuntime).status(RuntimeStatus.DELETED));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f76535037b039060f38087b0ff729433b93a7ad"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwNzc5MQ==", "bodyText": "opt_nit: should there just be mapper methods between the enum and storage string ? Feels like this could provide better isolation", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r493907791", "createdAt": "2020-09-23T21:32:42Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -173,10 +175,51 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n     workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    return ResponseEntity.ok(\n-        leonardoMapper.toApiRuntime(\n-            leonardoNotebooksClient.getRuntime(\n-                workspaceNamespace, userProvider.get().getRuntimeName())));\n+    try {\n+      return ResponseEntity.ok(\n+          leonardoMapper.toApiRuntime(\n+              leonardoNotebooksClient.getRuntime(\n+                  workspaceNamespace, userProvider.get().getRuntimeName())));\n+    } catch (NotFoundException e) {\n+      if (!workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+        throw e;\n+      }\n+\n+      List<LeonardoListRuntimeResponse> runtimes =\n+          leonardoNotebooksClient.listRuntimesByProject(workspaceNamespace);\n+      if (runtimes.isEmpty()) {\n+        throw e;\n+      }\n+\n+      LeonardoListRuntimeResponse mostRecentRuntime =\n+          runtimes.stream()\n+              .sorted(\n+                  (a, b) ->\n+                      b.getAuditInfo()\n+                          .getCreatedDate()\n+                          .compareTo(a.getAuditInfo().getCreatedDate()))\n+              .findFirst()\n+              .get();\n+\n+      final String OVERRIDE_LABEL =\n+          LeonardoMapper.RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f76535037b039060f38087b0ff729433b93a7ad"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwODQzNQ==", "bodyText": "nit: would put constant first", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r493908435", "createdAt": "2020-09-23T21:34:12Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -173,10 +175,51 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n     workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    return ResponseEntity.ok(\n-        leonardoMapper.toApiRuntime(\n-            leonardoNotebooksClient.getRuntime(\n-                workspaceNamespace, userProvider.get().getRuntimeName())));\n+    try {\n+      return ResponseEntity.ok(\n+          leonardoMapper.toApiRuntime(\n+              leonardoNotebooksClient.getRuntime(\n+                  workspaceNamespace, userProvider.get().getRuntimeName())));\n+    } catch (NotFoundException e) {\n+      if (!workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+        throw e;\n+      }\n+\n+      List<LeonardoListRuntimeResponse> runtimes =\n+          leonardoNotebooksClient.listRuntimesByProject(workspaceNamespace);\n+      if (runtimes.isEmpty()) {\n+        throw e;\n+      }\n+\n+      LeonardoListRuntimeResponse mostRecentRuntime =\n+          runtimes.stream()\n+              .sorted(\n+                  (a, b) ->\n+                      b.getAuditInfo()\n+                          .getCreatedDate()\n+                          .compareTo(a.getAuditInfo().getCreatedDate()))\n+              .findFirst()\n+              .get();\n+\n+      final String OVERRIDE_LABEL =\n+          LeonardoMapper.RUNTIME_CONFIGURATION_TYPE_ENUM_TO_STORAGE_MAP.get(\n+              RuntimeConfigurationType.USEROVERRIDE);\n+      Map<String, String> runtimeLabels = (Map<String, String>) mostRecentRuntime.getLabels();\n+      if (runtimeLabels != null\n+          && OVERRIDE_LABEL.equals(runtimeLabels.get(LeonardoMapper.RUNTIME_LABEL_AOU_CONFIG))) {\n+        Runtime runtime = leonardoMapper.toApiRuntime(mostRecentRuntime);\n+        if (!runtime.getStatus().equals(RuntimeStatus.DELETED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f76535037b039060f38087b0ff729433b93a7ad"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkwOTc1MQ==", "bodyText": "It's possible there are some degenerate entries missing this  - I would make this sort method immune to null auditInfo and createdDate (treat these as older)", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r493909751", "createdAt": "2020-09-23T21:37:15Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -173,10 +175,51 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n     workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    return ResponseEntity.ok(\n-        leonardoMapper.toApiRuntime(\n-            leonardoNotebooksClient.getRuntime(\n-                workspaceNamespace, userProvider.get().getRuntimeName())));\n+    try {\n+      return ResponseEntity.ok(\n+          leonardoMapper.toApiRuntime(\n+              leonardoNotebooksClient.getRuntime(\n+                  workspaceNamespace, userProvider.get().getRuntimeName())));\n+    } catch (NotFoundException e) {\n+      if (!workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+        throw e;\n+      }\n+\n+      List<LeonardoListRuntimeResponse> runtimes =\n+          leonardoNotebooksClient.listRuntimesByProject(workspaceNamespace);\n+      if (runtimes.isEmpty()) {\n+        throw e;\n+      }\n+\n+      LeonardoListRuntimeResponse mostRecentRuntime =\n+          runtimes.stream()\n+              .sorted(\n+                  (a, b) ->\n+                      b.getAuditInfo()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f76535037b039060f38087b0ff729433b93a7ad"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkxMDI5Ng==", "bodyText": "What's the status on this? Is it intentionally omitted by Leo?", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r493910296", "createdAt": "2020-09-23T21:38:37Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/LeonardoMapper.java", "diffHunk": "@@ -59,27 +72,55 @@ ListRuntimeResponse toApiListRuntimeResponse(\n   @Mapping(target = \"dataprocConfig\", ignore = true)\n   Runtime toApiRuntime(LeonardoGetRuntimeResponse runtime);\n \n+  @Mapping(target = \"createdDate\", source = \"auditInfo.createdDate\")\n+  @Mapping(target = \"autopauseThreshold\", ignore = true)\n+  @Mapping(target = \"toolDockerImage\", ignore = true)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f76535037b039060f38087b0ff729433b93a7ad"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "228ab3c0974df85ffa5162abb62db0837ee56010", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/228ab3c0974df85ffa5162abb62db0837ee56010", "committedDate": "2020-09-24T19:08:03Z", "message": "address code review; handle null cases in ListRuntimes response; throw 404s on error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89facb2814c95dfa5edaac135e3b51274cfb3039", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/89facb2814c95dfa5edaac135e3b51274cfb3039", "committedDate": "2020-09-24T19:09:53Z", "message": "forgot to commit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODg2MzA5", "url": "https://github.com/all-of-us/workbench/pull/4044#pullrequestreview-495886309", "createdAt": "2020-09-24T19:26:19Z", "commit": {"oid": "89facb2814c95dfa5edaac135e3b51274cfb3039"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToyNjoxOVrOHXpgKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTozMjo1NVrOHXtY-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1OTI3NQ==", "bodyText": "This should at least be logged", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r494559275", "createdAt": "2020-09-24T19:26:19Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -173,10 +176,69 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n     workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    return ResponseEntity.ok(\n-        leonardoMapper.toApiRuntime(\n-            leonardoNotebooksClient.getRuntime(\n-                workspaceNamespace, userProvider.get().getRuntimeName())));\n+    try {\n+      return ResponseEntity.ok(\n+          leonardoMapper.toApiRuntime(\n+              leonardoNotebooksClient.getRuntime(\n+                  workspaceNamespace, userProvider.get().getRuntimeName())));\n+    } catch (NotFoundException e) {\n+      if (!workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+        throw e;\n+      }\n+\n+      try {\n+        return ResponseEntity.ok(getOverrideFromListRuntimes(workspaceNamespace));\n+      } catch (RuntimeException e2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89facb2814c95dfa5edaac135e3b51274cfb3039"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1OTg0Ng==", "bodyText": "I would scope this as tightly as possible, i.e. directly around the mapper call - RuntimeException catch-alls are problematic in that they may mask programming errors.", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r494559846", "createdAt": "2020-09-24T19:27:25Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -173,10 +176,69 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n     workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    return ResponseEntity.ok(\n-        leonardoMapper.toApiRuntime(\n-            leonardoNotebooksClient.getRuntime(\n-                workspaceNamespace, userProvider.get().getRuntimeName())));\n+    try {\n+      return ResponseEntity.ok(\n+          leonardoMapper.toApiRuntime(\n+              leonardoNotebooksClient.getRuntime(\n+                  workspaceNamespace, userProvider.get().getRuntimeName())));\n+    } catch (NotFoundException e) {\n+      if (!workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+        throw e;\n+      }\n+\n+      try {\n+        return ResponseEntity.ok(getOverrideFromListRuntimes(workspaceNamespace));\n+      } catch (RuntimeException e2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89facb2814c95dfa5edaac135e3b51274cfb3039"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MTQ4Mw==", "bodyText": "opt_nit: I would just exercise the LeonardoMapper here. If you're also trying to cover conversion testing here, probably I'd split that out into a LeonardoMapperTest", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r494561483", "createdAt": "2020-09-24T19:30:27Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/api/RuntimeControllerTest.java", "diffHunk": "@@ -247,17 +255,25 @@ public void setUp() {\n \n     String createdDate = Date.fromYearMonthDay(1988, 12, 26).toString();\n \n-    DataprocConfig dataprocConfig =\n+    dataprocConfig =\n         new DataprocConfig()\n             .numberOfWorkers(0)\n             .masterMachineType(\"n1-standard-4\")\n             .masterDiskSize(50);\n \n-    LinkedTreeMap<String, Object> dataProcConfigObj = new LinkedTreeMap<>();\n-    dataProcConfigObj.put(\"cloudService\", \"DATAPROC\");\n-    dataProcConfigObj.put(\"numberOfWorkers\", 0);\n-    dataProcConfigObj.put(\"masterMachineType\", \"n1-standard-4\");\n-    dataProcConfigObj.put(\"masterDiskSize\", 50.0);\n+    dataprocConfigObj = new LinkedTreeMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89facb2814c95dfa5edaac135e3b51274cfb3039"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MjQwMA==", "bodyText": "Please add a comment here. I believe this logic exists because older runtimes without the label can only be default dataproc configs.", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r494562400", "createdAt": "2020-09-24T19:32:05Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/LeonardoMapper.java", "diffHunk": "@@ -59,27 +72,55 @@ ListRuntimeResponse toApiListRuntimeResponse(\n   @Mapping(target = \"dataprocConfig\", ignore = true)\n   Runtime toApiRuntime(LeonardoGetRuntimeResponse runtime);\n \n+  @Mapping(target = \"createdDate\", source = \"auditInfo.createdDate\")\n+  @Mapping(target = \"autopauseThreshold\", ignore = true)\n+  @Mapping(target = \"toolDockerImage\", ignore = true)\n+  @Mapping(target = \"configurationType\", ignore = true)\n+  @Mapping(target = \"gceConfig\", ignore = true)\n+  @Mapping(target = \"dataprocConfig\", ignore = true)\n+  Runtime toApiRuntime(LeonardoListRuntimeResponse runtime);\n+\n   @AfterMapping\n-  default void mapRuntimeConfig(\n+  default void getRuntimeAfterMapper(\n       @MappingTarget Runtime runtime, LeonardoGetRuntimeResponse leonardoGetRuntimeResponse) {\n+    mapLabels(runtime, (Map<String, String>) leonardoGetRuntimeResponse.getLabels());\n+    mapRuntimeConfig(runtime, leonardoGetRuntimeResponse.getRuntimeConfig());\n+  }\n+\n+  @AfterMapping\n+  default void listRuntimeAfterMapper(\n+      @MappingTarget Runtime runtime, LeonardoListRuntimeResponse leonardoListRuntimeResponse) {\n+    mapLabels(runtime, (Map<String, String>) leonardoListRuntimeResponse.getLabels());\n+    mapRuntimeConfig(runtime, leonardoListRuntimeResponse.getRuntimeConfig());\n+  }\n+\n+  default void mapLabels(Runtime runtime, Map<String, String> runtimeLabels) {\n+    if (runtimeLabels == null || runtimeLabels.get(RUNTIME_LABEL_AOU_CONFIG) == null) {\n+      runtime.setConfigurationType(RuntimeConfigurationType.DEFAULTDATAPROC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89facb2814c95dfa5edaac135e3b51274cfb3039"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyMjY1NA==", "bodyText": "nit: generally java local vars should not have underscores in them", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r494622654", "createdAt": "2020-09-24T21:32:16Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -173,10 +176,69 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n     workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    return ResponseEntity.ok(\n-        leonardoMapper.toApiRuntime(\n-            leonardoNotebooksClient.getRuntime(\n-                workspaceNamespace, userProvider.get().getRuntimeName())));\n+    try {\n+      return ResponseEntity.ok(\n+          leonardoMapper.toApiRuntime(\n+              leonardoNotebooksClient.getRuntime(\n+                  workspaceNamespace, userProvider.get().getRuntimeName())));\n+    } catch (NotFoundException e) {\n+      if (!workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+        throw e;\n+      }\n+\n+      try {\n+        return ResponseEntity.ok(getOverrideFromListRuntimes(workspaceNamespace));\n+      } catch (RuntimeException e2) {\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  private Runtime getOverrideFromListRuntimes(String workspaceNamespace) {\n+    Optional<LeonardoListRuntimeResponse> mostRecentRuntimeMaybe =\n+        leonardoNotebooksClient.listRuntimesByProject(workspaceNamespace, true).stream()\n+            .sorted(\n+                (a, b) -> {\n+                  String a_createdDate, b_createdDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89facb2814c95dfa5edaac135e3b51274cfb3039"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYyMjk3MA==", "bodyText": "Wait - these are strings? If so, I don't think the comparison below is going to work as expected. Probably need a date / instant parsing step in here.", "url": "https://github.com/all-of-us/workbench/pull/4044#discussion_r494622970", "createdAt": "2020-09-24T21:32:55Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/RuntimeController.java", "diffHunk": "@@ -173,10 +176,69 @@ private DbWorkspace lookupWorkspace(String workspaceNamespace) throws NotFoundEx\n         workspaceNamespace, firecloudWorkspaceName, WorkspaceAccessLevel.WRITER);\n     workspaceService.validateActiveBilling(workspaceNamespace, firecloudWorkspaceName);\n \n-    return ResponseEntity.ok(\n-        leonardoMapper.toApiRuntime(\n-            leonardoNotebooksClient.getRuntime(\n-                workspaceNamespace, userProvider.get().getRuntimeName())));\n+    try {\n+      return ResponseEntity.ok(\n+          leonardoMapper.toApiRuntime(\n+              leonardoNotebooksClient.getRuntime(\n+                  workspaceNamespace, userProvider.get().getRuntimeName())));\n+    } catch (NotFoundException e) {\n+      if (!workbenchConfigProvider.get().featureFlags.enableCustomRuntimes) {\n+        throw e;\n+      }\n+\n+      try {\n+        return ResponseEntity.ok(getOverrideFromListRuntimes(workspaceNamespace));\n+      } catch (RuntimeException e2) {\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  private Runtime getOverrideFromListRuntimes(String workspaceNamespace) {\n+    Optional<LeonardoListRuntimeResponse> mostRecentRuntimeMaybe =\n+        leonardoNotebooksClient.listRuntimesByProject(workspaceNamespace, true).stream()\n+            .sorted(\n+                (a, b) -> {\n+                  String a_createdDate, b_createdDate;\n+                  if (a.getAuditInfo() == null || a.getAuditInfo().getCreatedDate() == null) {\n+                    a_createdDate = \"\";\n+                  } else {\n+                    a_createdDate = a.getAuditInfo().getCreatedDate();\n+                  }\n+\n+                  if (b.getAuditInfo() == null || b.getAuditInfo().getCreatedDate() == null) {\n+                    b_createdDate = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89facb2814c95dfa5edaac135e3b51274cfb3039"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e47266b4518e6973d57d67dfaf215051d2085da0", "author": {"user": {"login": "ericsong", "name": "Eric Song"}}, "url": "https://github.com/all-of-us/workbench/commit/e47266b4518e6973d57d67dfaf215051d2085da0", "committedDate": "2020-09-25T13:58:18Z", "message": "code review - tightening try/catch scope, some test modifications"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4080, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}