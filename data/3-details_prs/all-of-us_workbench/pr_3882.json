{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDM1Mzc3", "number": 3882, "title": "[RW-5382][risk=no] Streaming BQ upload service", "bodyText": "As a hedge against potential issues with batch inserts, this implementation gives the \"easy way\" of streaming to BigQuery. We need to watch out for duplication, but the random insert ID should help.\nAdded some timing around forming the snapshot and each stream upload.\nHad a heck of a time with timestamp conversions. It seems some places expect different formats on input, and I thought I observed another format coming off the QueryParameterValues yesterday.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test:local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-08-14T15:05:50Z", "url": "https://github.com/all-of-us/workbench/pull/3882", "merged": true, "mergeCommit": {"oid": "8cbd70cd7fe270162a7b2caa2c6d856e6dfbb03e"}, "closed": true, "closedAt": "2020-08-20T16:12:26Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-3KWMABqjM2NTY4OTQ4NzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAx43pAFqTQ3MTcyNjIwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14e6ec233cd8b37fcee55d10c21221a6a0935134", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/14e6ec233cd8b37fcee55d10c21221a6a0935134", "committedDate": "2020-08-14T15:04:46Z", "message": "initial progress [skip ci]"}, "afterCommit": {"oid": "895af7a75ee99915c5179fcaaff29b22836b67c0", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/895af7a75ee99915c5179fcaaff29b22836b67c0", "committedDate": "2020-08-14T16:25:15Z", "message": "reporting upload via InsertAll streaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef60c5f52df557e889be8780cd24bd980d9c9f05", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/ef60c5f52df557e889be8780cd24bd980d9c9f05", "committedDate": "2020-08-14T16:31:59Z", "message": "streaming bigquery upload for reporting"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "895af7a75ee99915c5179fcaaff29b22836b67c0", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/895af7a75ee99915c5179fcaaff29b22836b67c0", "committedDate": "2020-08-14T16:25:15Z", "message": "reporting upload via InsertAll streaming"}, "afterCommit": {"oid": "ef60c5f52df557e889be8780cd24bd980d9c9f05", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/ef60c5f52df557e889be8780cd24bd980d9c9f05", "committedDate": "2020-08-14T16:31:59Z", "message": "streaming bigquery upload for reporting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e5abed1aa36940f2de448534a895663627f097a", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/2e5abed1aa36940f2de448534a895663627f097a", "committedDate": "2020-08-14T20:50:44Z", "message": "transaction support and other fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODcwMTU3", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-467870157", "createdAt": "2020-08-14T20:56:14Z", "commit": {"oid": "2e5abed1aa36940f2de448534a895663627f097a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDo1NjoxNFrOHBDFVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDo1NjoxNFrOHBDFVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg2MTE0MA==", "bodyText": "Sadly we can't do this in the DI, because the config isn't available at bootstrap time. So I'm always injecting dead code unless there's a runtime change to it.\nThough perhaps I could manual-wire it instead of using ctor injection. Not really worth that though.", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r470861140", "createdAt": "2020-08-14T20:56:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingServiceImpl.java", "diffHunk": "@@ -1,24 +1,52 @@\n package org.pmiops.workbench.reporting;\n \n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n \n @Service\n public class ReportingServiceImpl implements ReportingService {\n \n-  private final ReportingUploadService reportingUploadService;\n+  private static enum UploadMethod {\n+    DML,\n+    STREAMING;\n+  }\n+\n   private final ReportingSnapshotService reportingSnapshotService;\n+  private final ReportingUploadService reportingUploadServiceDmlImpl;\n+  private final ReportingUploadService reportingUploadServiceStreamingImpl;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n \n   public ReportingServiceImpl(\n-      ReportingUploadService reportingUploadService,\n-      ReportingSnapshotService reportingSnapshotService) {\n-    this.reportingUploadService = reportingUploadService;\n+      @Qualifier(\"REPORTING_UPLOAD_SERVICE_DML_IMPL\")\n+          ReportingUploadService reportingUploadServiceDmlImpl,\n+      @Qualifier(\"REPORTING_UPLOAD_SERVICE_STREAMING_IMPL\")\n+          ReportingUploadService reportingUploadServiceStreamingImpl,\n+      ReportingSnapshotService reportingSnapshotService,\n+      Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.reportingUploadServiceDmlImpl = reportingUploadServiceDmlImpl;\n+    this.reportingUploadServiceStreamingImpl = reportingUploadServiceStreamingImpl;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n     this.reportingSnapshotService = reportingSnapshotService;\n   }\n \n   @Override\n   public ReportingJobResult takeAndUploadSnapshot() {\n     final ReportingSnapshot snapshot = reportingSnapshotService.takeSnapshot();\n-    return reportingUploadService.uploadSnapshot(snapshot);\n+    return getConfiguredUploadService().uploadSnapshot(snapshot);\n+  }\n+\n+  private ReportingUploadService getConfiguredUploadService() {\n+    final String uploadMethod = workbenchConfigProvider.get().reporting.uploadMethod;\n+    if (UploadMethod.DML.name().equals(uploadMethod)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e5abed1aa36940f2de448534a895663627f097a"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58503b889a13878512ab4662590b0040e7d62901", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/58503b889a13878512ab4662590b0040e7d62901", "committedDate": "2020-08-17T18:20:51Z", "message": "Merge branch 'master' into jaycarlrton/RW-5382"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbc35a1557a0645bf557bd1bb0ac547fcf83cb03", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/cbc35a1557a0645bf557bd1bb0ac547fcf83cb03", "committedDate": "2020-08-17T23:14:38Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb9f506952f31e1009577e8c2267ebc4ca4a63d3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/fb9f506952f31e1009577e8c2267ebc4ca4a63d3", "committedDate": "2020-08-17T23:15:15Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcb7e507f23214e1644ca517cbf745795851cadd", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/fcb7e507f23214e1644ca517cbf745795851cadd", "committedDate": "2020-08-18T13:52:26Z", "message": "fixed time conversion issue...again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de86c9d58ca52be5ca65d9927cc248e9d289cb5f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/de86c9d58ca52be5ca65d9927cc248e9d289cb5f", "committedDate": "2020-08-18T14:18:03Z", "message": "fixed harder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78645b98bc78544a161afa291c31814b08f384d2", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/78645b98bc78544a161afa291c31814b08f384d2", "committedDate": "2020-08-18T14:18:24Z", "message": "spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51c1be85cdabd1aa4592169fdfc4f7d2f195c132", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/51c1be85cdabd1aa4592169fdfc4f7d2f195c132", "committedDate": "2020-08-18T16:24:01Z", "message": "try string rep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e5d7875d026f088a1733c8528178b25e4b89087", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/9e5d7875d026f088a1733c8528178b25e4b89087", "committedDate": "2020-08-18T17:21:00Z", "message": "un-consolidate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/8e99b18171e5ec807c6fab02c128388ef4d5363d", "committedDate": "2020-08-18T17:34:33Z", "message": "remaining configs [skip ci]"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODIxOTE4", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-469821918", "createdAt": "2020-08-18T20:52:07Z", "commit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1MjowN1rOHCmQFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1MjowN1rOHCmQFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NTkxMQ==", "bodyText": "this one is not used", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472485911", "createdAt": "2020-08-18T20:52:07Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/QueryParameterValues.java", "diffHunk": "@@ -14,6 +17,18 @@\n public final class QueryParameterValues {\n   private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n \n+  // For creating a Timestamp QueryParameterValue, use this formatter.\n+  // example error when using the RowToInsert version (below): \"Invalid format:\n+  // \"1989-02-17 00:00:00.000000\" is too short\".\n+  public static final DateTimeFormatter QPV_TIMESTAMP_FORMATTER =\n+      DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSSZZ\").withZone(ZoneOffset.UTC);\n+  // For parsing the string value of a timestamp QPV, use this formatter (with colon).\n+  public static final DateTimeFormatter QPV_TIMESTAMP_TO_STRING_FORMATTER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODIyNjQ3", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-469822647", "createdAt": "2020-08-18T20:53:15Z", "commit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1MzoxNVrOHCmSYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1MzoxNVrOHCmSYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NjQ5OA==", "bodyText": "?", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472486498", "createdAt": "2020-08-18T20:53:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingJobResult.java", "diffHunk": "@@ -2,7 +2,6 @@\n \n public enum ReportingJobResult {\n   SUCCEEDED,\n-  ABORTED,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODI0ODAw", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-469824800", "createdAt": "2020-08-18T20:56:27Z", "commit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo1NjoyN1rOHCmZGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMToyMTo1MFrOHCnJBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4ODIxOA==", "bodyText": "Please add a comment about what this means", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472488218", "createdAt": "2020-08-18T20:56:27Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingServiceImpl.java", "diffHunk": "@@ -1,24 +1,52 @@\n package org.pmiops.workbench.reporting;\n \n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n \n @Service\n public class ReportingServiceImpl implements ReportingService {\n \n-  private final ReportingUploadService reportingUploadService;\n+  private static enum UploadMethod {\n+    DML,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5MDA3Mg==", "bodyText": "Flagging this: needs review by someone more Spring savvy", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472490072", "createdAt": "2020-08-18T21:00:06Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java", "diffHunk": "@@ -1,45 +1,68 @@\n package org.pmiops.workbench.reporting;\n \n+import com.google.common.base.Stopwatch;\n import java.time.Clock;\n import java.util.List;\n import java.util.Random;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n import org.pmiops.workbench.db.dao.UserService;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.model.ReportingResearcher;\n import org.pmiops.workbench.model.ReportingSnapshot;\n import org.pmiops.workbench.model.ReportingWorkspace;\n import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionTemplate;\n \n @Service\n public class ReportingSnapshotServiceImpl implements ReportingSnapshotService {\n+  private static final Logger log = Logger.getLogger(ReportingSnapshotServiceImpl.class.getName());\n \n   private final Clock clock;\n   private final ReportingMapper reportingMapper;\n-  private Random random;\n+  private final Random random;\n+  private final PlatformTransactionManager platformTransactionManager;\n+  private final Provider<Stopwatch> stopwatchProvider;\n   private final UserService userService;\n   private final WorkspaceService workspaceService;\n \n   public ReportingSnapshotServiceImpl(\n       Clock clock,\n       ReportingMapper reportingMapper,\n       Random random,\n+      @Qualifier(\"transactionManager\") PlatformTransactionManager platformTransactionManager,\n+      Provider<Stopwatch> stopwatchProvider,\n       UserService userService,\n       WorkspaceService workspaceService) {\n     this.clock = clock;\n     this.reportingMapper = reportingMapper;\n     this.random = random;\n+    this.platformTransactionManager = platformTransactionManager;\n+    this.stopwatchProvider = stopwatchProvider;\n     this.userService = userService;\n     this.workspaceService = workspaceService;\n   }\n \n   @Override\n   public ReportingSnapshot takeSnapshot() {\n-    return new ReportingSnapshot()\n-        .captureTimestamp(clock.millis())\n-        .researchers(getResearchers())\n-        .workspaces(getWorkspaces());\n+    final Stopwatch stopwatch = stopwatchProvider.get().start();\n+    final TransactionTemplate template = new TransactionTemplate(platformTransactionManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5Mjc4Mg==", "bodyText": "nit: could you flip this to size > 0?  I find that more readable", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472492782", "createdAt": "2020-08-18T21:05:49Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceStreamingImpl.java", "diffHunk": "@@ -0,0 +1,122 @@\n+package org.pmiops.workbench.reporting;\n+\n+import com.google.cloud.bigquery.BigQueryError;\n+import com.google.cloud.bigquery.InsertAllRequest;\n+import com.google.cloud.bigquery.InsertAllResponse;\n+import com.google.cloud.bigquery.TableId;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.time.Duration;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.ReportingResearcher;\n+import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.pmiops.workbench.reporting.insertion.InsertAllRequestBuilder;\n+import org.pmiops.workbench.reporting.insertion.ResearcherParameter;\n+import org.pmiops.workbench.reporting.insertion.WorkspaceParameter;\n+import org.springframework.stereotype.Service;\n+\n+@Service(\"REPORTING_UPLOAD_SERVICE_STREAMING_IMPL\")\n+public class ReportingUploadServiceStreamingImpl implements ReportingUploadService {\n+  private static final Logger log =\n+      Logger.getLogger(ReportingUploadServiceStreamingImpl.class.getName());\n+  private static final InsertAllRequestBuilder<ReportingResearcher> researcherRequestBuilder =\n+      ResearcherParameter::values;\n+  private static final InsertAllRequestBuilder<ReportingWorkspace> workspaceRequestBuilder =\n+      WorkspaceParameter::values;\n+\n+  private final BigQueryService bigQueryService;\n+  private final Provider<WorkbenchConfig> configProvider;\n+  private final Provider<Stopwatch> stopwatchProvider;\n+\n+  public ReportingUploadServiceStreamingImpl(\n+      BigQueryService bigQueryService,\n+      Provider<WorkbenchConfig> configProvider,\n+      Provider<Stopwatch> stopwatchProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.configProvider = configProvider;\n+    this.stopwatchProvider = stopwatchProvider;\n+  }\n+\n+  @Override\n+  public ReportingJobResult uploadSnapshot(ReportingSnapshot reportingSnapshot) {\n+    final Stopwatch stopwatch = stopwatchProvider.get();\n+    final ImmutableMap.Builder<TableId, InsertAllResponse> responseMapBuilder =\n+        ImmutableMap.builder();\n+    for (InsertAllRequest request : getInsertAllRequests(reportingSnapshot)) {\n+      stopwatch.start();\n+      final InsertAllResponse currentResponse = bigQueryService.insertAll(request);\n+      responseMapBuilder.put(request.getTable(), currentResponse);\n+      stopwatch.stop();\n+      logDuration(\n+          stopwatch.elapsed(),\n+          String.format(\n+              \"Stream %d rows into %s\", request.getRows().size(), request.getTable().getTable()));\n+      stopwatch.reset();\n+    }\n+    return computeOverallResult(responseMapBuilder.build());\n+  }\n+\n+  public void logDuration(Duration duration, String description) {\n+    final long millis = duration.toMillis();\n+    log.info(String.format(\"%s: %d.%d seconds\", description, millis / 1000, millis % 1000));\n+  }\n+\n+  private List<InsertAllRequest> getInsertAllRequests(ReportingSnapshot reportingSnapshot) {\n+    final String projectId = configProvider.get().server.projectId;\n+    final String dataset = configProvider.get().reporting.dataset;\n+    final Map<String, Object> fixedValues =\n+        ImmutableMap.of(\"snapshot_timestamp\", reportingSnapshot.getCaptureTimestamp());\n+\n+    return ImmutableList.of(\n+            researcherRequestBuilder.build(\n+                TableId.of(projectId, dataset, \"researcher\"),\n+                reportingSnapshot.getResearchers(),\n+                fixedValues),\n+            workspaceRequestBuilder.build(\n+                TableId.of(projectId, dataset, \"workspace\"),\n+                reportingSnapshot.getWorkspaces(),\n+                fixedValues))\n+        .stream()\n+        .filter(r -> 0 < r.getRows().size())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5OTkwMw==", "bodyText": "this name is misleading - there is one row per workspace.  This is not Workspace 1's rows.\nPlease also assert that there are 3 workspaces here.", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472499903", "createdAt": "2020-08-18T21:20:35Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java", "diffHunk": "@@ -157,17 +197,54 @@ public void testUploadSnapshot_batchInserts() {\n                 .fakeSize(4444L)\n                 .creatorId(101L)));\n \n-    reportingUploadService.uploadSnapshot(largeSnapshot);\n+    reportingUploadServiceDmlImpl.uploadSnapshot(largeSnapshot);\n     verify(mockBigQueryService, times(6))\n         .executeQuery(queryJobConfigurationCaptor.capture(), anyLong());\n \n     final List<QueryJobConfiguration> jobs = queryJobConfigurationCaptor.getAllValues();\n     assertThat(jobs).hasSize(6);\n-    final int researcherColumnCount = 4;\n-    final int workspaceColumnCount = 5;\n \n-    assertThat(jobs.get(0).getNamedParameters()).hasSize(researcherColumnCount * 5 + 1);\n-    assertThat(jobs.get(4).getNamedParameters()).hasSize(researcherColumnCount + 1);\n-    assertThat(jobs.get(5).getNamedParameters()).hasSize(workspaceColumnCount + 1);\n+    assertThat(jobs.get(0).getNamedParameters()).hasSize(RESEARCHER_COLUMN_COUNT * 5 + 1);\n+    assertThat(jobs.get(4).getNamedParameters()).hasSize(RESEARCHER_COLUMN_COUNT + 1);\n+    assertThat(jobs.get(5).getNamedParameters()).hasSize(WORKSPACE_COLUMN_COUNT + 1);\n+\n+    final QueryParameterValue creationTime =\n+        jobs.get(5).getNamedParameters().get(\"creation_time__0\");\n+    assertThat(creationTime).isNotNull();\n+    final Instant instant = QueryParameterValues.timestampQpvToInstant(creationTime);\n+    assertThat((double) instant.toEpochMilli()).isWithin(500.0).of(THEN.toEpochMilli());\n+  }\n+\n+  @Test\n+  public void testUploadSnapshot_streaming() {\n+    final InsertAllResponse mockInsertAllResponse = mock(InsertAllResponse.class);\n+    doReturn(Collections.emptyMap()).when(mockInsertAllResponse).getInsertErrors();\n+\n+    doReturn(mockInsertAllResponse)\n+        .when(mockBigQueryService)\n+        .insertAll(any(InsertAllRequest.class));\n+    final ReportingJobResult result =\n+        reportingUploadServiceStreamingImpl.uploadSnapshot(reportingSnapshot);\n+    verify(mockBigQueryService, times(2)).insertAll(insertAllRequestCaptor.capture());\n+    final List<InsertAllRequest> requests = insertAllRequestCaptor.getAllValues();\n+\n+    assertThat(requests).hasSize(2);\n+\n+    final List<RowToInsert> researcherRows = requests.get(0).getRows();\n+    assertThat(researcherRows).hasSize(3);\n+    assertThat(researcherRows.get(0).getId()).hasLength(16);\n+    assertThat(researcherRows.get(0).getContent()).hasSize(RESEARCHER_COLUMN_COUNT + 1);\n+\n+    final List<RowToInsert> workspace1Rows = requests.get(1).getRows();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDQ4NA==", "bodyText": "should we test the streaming version of this?", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472500484", "createdAt": "2020-08-18T21:21:50Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java", "diffHunk": "@@ -127,12 +161,18 @@ public void testUploadSnapshot() {\n \n     final String expandedQuery =\n         QueryParameterValues.formatQuery(QueryParameterValues.replaceNamedParameters(job0));\n-\n     assertThat(expandedQuery).containsMatch(\"INSERT\\\\s+INTO\");\n+\n+    assertThat(\n+            (double)\n+                timestampQpvToInstant(jobs.get(1).getNamedParameters().get(\"creation_time__0\"))\n+                    .toEpochMilli())\n+        .isWithin(500.0)\n+        .of(THEN.toEpochMilli());\n   }\n \n   @Test\n-  public void testUploadSnapshot_batchInserts() {\n+  public void testUploadSnapshot_dmlBatchInserts() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 137}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODU5ODQ4", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-469859848", "createdAt": "2020-08-18T21:58:55Z", "commit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMTo1ODo1NlrOHCoJ8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjoyNzozM1rOHCo10w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUxNzEwNg==", "bodyText": "What is the advantage of programmatic vs declarative transaction management in the case?", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472517106", "createdAt": "2020-08-18T21:58:56Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java", "diffHunk": "@@ -1,45 +1,68 @@\n package org.pmiops.workbench.reporting;\n \n+import com.google.common.base.Stopwatch;\n import java.time.Clock;\n import java.util.List;\n import java.util.Random;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n import org.pmiops.workbench.db.dao.UserService;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.model.ReportingResearcher;\n import org.pmiops.workbench.model.ReportingSnapshot;\n import org.pmiops.workbench.model.ReportingWorkspace;\n import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionTemplate;\n \n @Service\n public class ReportingSnapshotServiceImpl implements ReportingSnapshotService {\n+  private static final Logger log = Logger.getLogger(ReportingSnapshotServiceImpl.class.getName());\n \n   private final Clock clock;\n   private final ReportingMapper reportingMapper;\n-  private Random random;\n+  private final Random random;\n+  private final PlatformTransactionManager platformTransactionManager;\n+  private final Provider<Stopwatch> stopwatchProvider;\n   private final UserService userService;\n   private final WorkspaceService workspaceService;\n \n   public ReportingSnapshotServiceImpl(\n       Clock clock,\n       ReportingMapper reportingMapper,\n       Random random,\n+      @Qualifier(\"transactionManager\") PlatformTransactionManager platformTransactionManager,\n+      Provider<Stopwatch> stopwatchProvider,\n       UserService userService,\n       WorkspaceService workspaceService) {\n     this.clock = clock;\n     this.reportingMapper = reportingMapper;\n     this.random = random;\n+    this.platformTransactionManager = platformTransactionManager;\n+    this.stopwatchProvider = stopwatchProvider;\n     this.userService = userService;\n     this.workspaceService = workspaceService;\n   }\n \n   @Override\n   public ReportingSnapshot takeSnapshot() {\n-    return new ReportingSnapshot()\n-        .captureTimestamp(clock.millis())\n-        .researchers(getResearchers())\n-        .workspaces(getWorkspaces());\n+    final Stopwatch stopwatch = stopwatchProvider.get().start();\n+    final TransactionTemplate template = new TransactionTemplate(platformTransactionManager);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyODMzOQ==", "bodyText": "Do we use this enum for anything? Recovering from bad states or is that coming in a future PR?", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472528339", "createdAt": "2020-08-18T22:27:33Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingJobResult.java", "diffHunk": "@@ -2,7 +2,6 @@\n \n public enum ReportingJobResult {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5Njc1NTY4", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-469675568", "createdAt": "2020-08-18T17:31:48Z", "commit": {"oid": "9e5d7875d026f088a1733c8528178b25e4b89087"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzozMTo0OVrOHCe4Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzozMTo0OVrOHCe4Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2NTE0Ng==", "bodyText": "I had it set up where the second function was a function of the first one, but there's an inconsistency (or two) in how timestamps are expected to be formatted, so I had to separate them.", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r472365146", "createdAt": "2020-08-18T17:31:49Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/insertion/WorkspaceParameter.java", "diffHunk": "@@ -1,25 +1,44 @@\n package org.pmiops.workbench.reporting.insertion;\n \n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.QPV_TIMESTAMP_FORMATTER;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.ROW_TO_INSERT_TIMESTAMP_FORMATTER;\n+\n import com.google.cloud.bigquery.QueryParameterValue;\n+import java.time.Instant;\n import java.util.function.Function;\n import org.pmiops.workbench.model.ReportingWorkspace;\n \n public enum WorkspaceParameter implements QueryParameterColumn<ReportingWorkspace> {\n-  WORKSPACE_ID(\"workspace_id\", w -> QueryParameterValue.int64(w.getWorkspaceId())),\n-  CREATOR_ID(\"creator_id\", w -> QueryParameterValue.int64(w.getCreatorId())),\n-  NAME(\"name\", w -> QueryParameterValue.string(w.getName())),\n-  FAKE_SIZE(\"fake_size\", w -> QueryParameterValue.int64(w.getFakeSize())),\n+  WORKSPACE_ID(\n+      \"workspace_id\",\n+      ReportingWorkspace::getWorkspaceId,\n+      w -> QueryParameterValue.int64(w.getWorkspaceId())),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e5d7875d026f088a1733c8528178b25e4b89087"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjY1OTU3", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-470665957", "createdAt": "2020-08-19T16:57:36Z", "commit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1NzozN1rOHDQw2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNjo1NzozN1rOHDQw2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4MjQyNw==", "bodyText": "@jmthibault79 here is the streaming test. It's actually a bit harder to unit test, because not all of the conversions are documented (which gave me fits).", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r473182427", "createdAt": "2020-08-19T16:57:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java", "diffHunk": "@@ -157,17 +197,54 @@ public void testUploadSnapshot_batchInserts() {\n                 .fakeSize(4444L)\n                 .creatorId(101L)));\n \n-    reportingUploadService.uploadSnapshot(largeSnapshot);\n+    reportingUploadServiceDmlImpl.uploadSnapshot(largeSnapshot);\n     verify(mockBigQueryService, times(6))\n         .executeQuery(queryJobConfigurationCaptor.capture(), anyLong());\n \n     final List<QueryJobConfiguration> jobs = queryJobConfigurationCaptor.getAllValues();\n     assertThat(jobs).hasSize(6);\n-    final int researcherColumnCount = 4;\n-    final int workspaceColumnCount = 5;\n \n-    assertThat(jobs.get(0).getNamedParameters()).hasSize(researcherColumnCount * 5 + 1);\n-    assertThat(jobs.get(4).getNamedParameters()).hasSize(researcherColumnCount + 1);\n-    assertThat(jobs.get(5).getNamedParameters()).hasSize(workspaceColumnCount + 1);\n+    assertThat(jobs.get(0).getNamedParameters()).hasSize(RESEARCHER_COLUMN_COUNT * 5 + 1);\n+    assertThat(jobs.get(4).getNamedParameters()).hasSize(RESEARCHER_COLUMN_COUNT + 1);\n+    assertThat(jobs.get(5).getNamedParameters()).hasSize(WORKSPACE_COLUMN_COUNT + 1);\n+\n+    final QueryParameterValue creationTime =\n+        jobs.get(5).getNamedParameters().get(\"creation_time__0\");\n+    assertThat(creationTime).isNotNull();\n+    final Instant instant = QueryParameterValues.timestampQpvToInstant(creationTime);\n+    assertThat((double) instant.toEpochMilli()).isWithin(500.0).of(THEN.toEpochMilli());\n+  }\n+\n+  @Test\n+  public void testUploadSnapshot_streaming() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 170}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjY4MDM4", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-470668038", "createdAt": "2020-08-19T17:00:16Z", "commit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMDoxNlrOHDQ77A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowNjoxNlrOHDRSlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NTI2MA==", "bodyText": "I expect to revisit it when I do the perf testing ticket. I think it's going to be important to schedule a couple of these soon after the initial delivery if we can.\nIs there a  way to flag it as read-only if I don't use the template stuff?", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r473185260", "createdAt": "2020-08-19T17:00:16Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java", "diffHunk": "@@ -1,45 +1,68 @@\n package org.pmiops.workbench.reporting;\n \n+import com.google.common.base.Stopwatch;\n import java.time.Clock;\n import java.util.List;\n import java.util.Random;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n import org.pmiops.workbench.db.dao.UserService;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbWorkspace;\n import org.pmiops.workbench.model.ReportingResearcher;\n import org.pmiops.workbench.model.ReportingSnapshot;\n import org.pmiops.workbench.model.ReportingWorkspace;\n import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.support.TransactionTemplate;\n \n @Service\n public class ReportingSnapshotServiceImpl implements ReportingSnapshotService {\n+  private static final Logger log = Logger.getLogger(ReportingSnapshotServiceImpl.class.getName());\n \n   private final Clock clock;\n   private final ReportingMapper reportingMapper;\n-  private Random random;\n+  private final Random random;\n+  private final PlatformTransactionManager platformTransactionManager;\n+  private final Provider<Stopwatch> stopwatchProvider;\n   private final UserService userService;\n   private final WorkspaceService workspaceService;\n \n   public ReportingSnapshotServiceImpl(\n       Clock clock,\n       ReportingMapper reportingMapper,\n       Random random,\n+      @Qualifier(\"transactionManager\") PlatformTransactionManager platformTransactionManager,\n+      Provider<Stopwatch> stopwatchProvider,\n       UserService userService,\n       WorkspaceService workspaceService) {\n     this.clock = clock;\n     this.reportingMapper = reportingMapper;\n     this.random = random;\n+    this.platformTransactionManager = platformTransactionManager;\n+    this.stopwatchProvider = stopwatchProvider;\n     this.userService = userService;\n     this.workspaceService = workspaceService;\n   }\n \n   @Override\n   public ReportingSnapshot takeSnapshot() {\n-    return new ReportingSnapshot()\n-        .captureTimestamp(clock.millis())\n-        .researchers(getResearchers())\n-        .workspaces(getWorkspaces());\n+    final Stopwatch stopwatch = stopwatchProvider.get().start();\n+    final TransactionTemplate template = new TransactionTemplate(platformTransactionManager);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ5MDA3Mg=="}, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NzI4Mg==", "bodyText": "This was just a placeholder. After the alpha delivery, I want to implement an actual error handling/reporting/mitigating strategy.", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r473187282", "createdAt": "2020-08-19T17:02:18Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingJobResult.java", "diffHunk": "@@ -2,7 +2,6 @@\n \n public enum ReportingJobResult {\n   SUCCEEDED,\n-  ABORTED,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4NjQ5OA=="}, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4ODA5NA==", "bodyText": "Sure. It's data manipulation language, aka an Insert/Update/Drop/Create, or everything except a query. I think BigQuery is the only place I've seen this term.", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r473188094", "createdAt": "2020-08-19T17:03:09Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingServiceImpl.java", "diffHunk": "@@ -1,24 +1,52 @@\n package org.pmiops.workbench.reporting;\n \n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n \n @Service\n public class ReportingServiceImpl implements ReportingService {\n \n-  private final ReportingUploadService reportingUploadService;\n+  private static enum UploadMethod {\n+    DML,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4ODIxOA=="}, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4OTI4NQ==", "bodyText": "Note  I'm testing two different implementations of upload here. All this fanciness is really only necessary because my local DB doesn't have nearly as many rows as the Test DB, but I don't want to get into a one-off deployments. We can also compare test against Perf, for example.", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r473189285", "createdAt": "2020-08-19T17:04:20Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingServiceImpl.java", "diffHunk": "@@ -1,24 +1,52 @@\n package org.pmiops.workbench.reporting;\n \n+import javax.inject.Provider;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.springframework.beans.factory.annotation.Qualifier;\n import org.springframework.stereotype.Service;\n \n @Service\n public class ReportingServiceImpl implements ReportingService {\n \n-  private final ReportingUploadService reportingUploadService;\n+  private static enum UploadMethod {\n+    DML,\n+    STREAMING;\n+  }\n+\n   private final ReportingSnapshotService reportingSnapshotService;\n+  private final ReportingUploadService reportingUploadServiceDmlImpl;\n+  private final ReportingUploadService reportingUploadServiceStreamingImpl;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n \n   public ReportingServiceImpl(\n-      ReportingUploadService reportingUploadService,\n-      ReportingSnapshotService reportingSnapshotService) {\n-    this.reportingUploadService = reportingUploadService;\n+      @Qualifier(\"REPORTING_UPLOAD_SERVICE_DML_IMPL\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTA2Mw==", "bodyText": "We do, right below. There's no manual batching with the stream approach though. The BQ client does that for us I'm assuming.", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r473191063", "createdAt": "2020-08-19T17:06:16Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java", "diffHunk": "@@ -127,12 +161,18 @@ public void testUploadSnapshot() {\n \n     final String expandedQuery =\n         QueryParameterValues.formatQuery(QueryParameterValues.replaceNamedParameters(job0));\n-\n     assertThat(expandedQuery).containsMatch(\"INSERT\\\\s+INTO\");\n+\n+    assertThat(\n+            (double)\n+                timestampQpvToInstant(jobs.get(1).getNamedParameters().get(\"creation_time__0\"))\n+                    .toEpochMilli())\n+        .isWithin(500.0)\n+        .of(THEN.toEpochMilli());\n   }\n \n   @Test\n-  public void testUploadSnapshot_batchInserts() {\n+  public void testUploadSnapshot_dmlBatchInserts() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUwMDQ4NA=="}, "originalCommit": {"oid": "8e99b18171e5ec807c6fab02c128388ef4d5363d"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0369524b76794f935e8ee47a377ece6734c020e3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/0369524b76794f935e8ee47a377ece6734c020e3", "committedDate": "2020-08-19T20:19:32Z", "message": "streaming upload implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad3348e289690b0211a7b2130227776b662c4ef1", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/ad3348e289690b0211a7b2130227776b662c4ef1", "committedDate": "2020-08-19T22:46:16Z", "message": "fixup test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "258ed02210d974c789f7d7b9a73290ee1b4341a7", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/258ed02210d974c789f7d7b9a73290ee1b4341a7", "committedDate": "2020-08-19T22:57:48Z", "message": "updates to sync with origin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e6d437302ce78bc27f154f294573a8c12644970", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/8e6d437302ce78bc27f154f294573a8c12644970", "committedDate": "2020-08-19T23:01:13Z", "message": "remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27b8d2693db465fbbf768675682740920e74ba68", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/27b8d2693db465fbbf768675682740920e74ba68", "committedDate": "2020-08-19T23:01:28Z", "message": "Merge branch 'master' into jaycarlrton/RW-5382"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxMDIxNzA3", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-471021707", "createdAt": "2020-08-19T23:03:08Z", "commit": {"oid": "27b8d2693db465fbbf768675682740920e74ba68"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNjM2MDM4", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-471636038", "createdAt": "2020-08-20T13:52:07Z", "commit": {"oid": "27b8d2693db465fbbf768675682740920e74ba68"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzo1MjowN1rOHECjwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzo1MjowN1rOHECjwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk5ODI3Mw==", "bodyText": "dupe", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r473998273", "createdAt": "2020-08-20T13:52:07Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingUploadServiceTest.java", "diffHunk": "@@ -1,18 +1,31 @@\n package org.pmiops.workbench.reporting;\n \n import static com.google.common.truth.Truth.assertThat;\n+import static com.google.common.truth.Truth8.assertThat;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.ArgumentMatchers.anyLong;\n import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n import static org.mockito.Mockito.times;\n import static org.mockito.Mockito.verify;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.timestampQpvToInstant;\n+import static org.pmiops.workbench.cohortbuilder.util.QueryParameterValues.timestampStringToInstant;\n \n-import com.google.cloud.bigquery.EmptyTableResult;\n+import com.google.cloud.bigquery.InsertAllRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b8d2693db465fbbf768675682740920e74ba68"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4feae65b5ce4a0dcf74d98c484de58e2c313d43", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b4feae65b5ce4a0dcf74d98c484de58e2c313d43", "committedDate": "2020-08-20T14:19:40Z", "message": "fix tests and stopwatch mocking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "439ba9e07b1ac91a1ae07741e91ebd8892975184", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/439ba9e07b1ac91a1ae07741e91ebd8892975184", "committedDate": "2020-08-20T14:20:20Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNjY1ODk0", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-471665894", "createdAt": "2020-08-20T14:23:04Z", "commit": {"oid": "27b8d2693db465fbbf768675682740920e74ba68"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDoyMzowNVrOHEEAwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDoyMzowNVrOHEEAwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAyMjA4MA==", "bodyText": "Per Spring documentation:\nMethod visibility and @Transactional\nWhen using proxies, you should apply the @Transactional annotation only to methods with public visibility. If you do annotate protected, private or package-visible methods with the @Transactional annotation, no error is raised, but the annotated method does not exhibit the configured transactional settings.\nThe annotation needs to exist on method called from outside the proxy class. So the takeSnapshot method would be a candidate for the annotation.", "url": "https://github.com/all-of-us/workbench/pull/3882#discussion_r474022080", "createdAt": "2020-08-20T14:23:05Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java", "diffHunk": "@@ -1,59 +1,100 @@\n package org.pmiops.workbench.reporting;\n \n+import com.google.common.base.Stopwatch;\n import java.time.Clock;\n import java.util.List;\n import java.util.Random;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n import org.pmiops.workbench.db.dao.UserService;\n import org.pmiops.workbench.db.model.DbUser;\n import org.pmiops.workbench.db.model.DbWorkspace;\n-import org.pmiops.workbench.model.ReportingResearcher;\n import org.pmiops.workbench.model.ReportingSnapshot;\n import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.pmiops.workbench.utils.LogFormatters;\n import org.pmiops.workbench.workspaces.WorkspaceService;\n import org.springframework.stereotype.Service;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Service\n public class ReportingSnapshotServiceImpl implements ReportingSnapshotService {\n+  private static final Logger log = Logger.getLogger(ReportingSnapshotServiceImpl.class.getName());\n \n   private final Clock clock;\n   private final ReportingMapper reportingMapper;\n-  private Random random;\n+  private final Random random;\n+  private final Provider<Stopwatch> stopwatchProvider;\n   private final UserService userService;\n   private final WorkspaceService workspaceService;\n \n+  // Define immutable value class to hold results of queries within a transaction. Mapping to\n+  // Reporting DTO classes will happen outside the transaction.\n+  private static class EntityBundle {\n+    private final List<DbUser> users;\n+    private final List<DbWorkspace> workspaces;\n+\n+    public EntityBundle(List<DbUser> users, List<DbWorkspace> workspaces) {\n+      this.users = users;\n+      this.workspaces = workspaces;\n+    }\n+\n+    public List<DbUser> getUsers() {\n+      return users;\n+    }\n+\n+    public List<DbWorkspace> getWorkspaces() {\n+      return workspaces;\n+    }\n+  }\n+\n   public ReportingSnapshotServiceImpl(\n       Clock clock,\n       ReportingMapper reportingMapper,\n       Random random,\n+      Provider<Stopwatch> stopwatchProvider,\n       UserService userService,\n       WorkspaceService workspaceService) {\n     this.clock = clock;\n     this.reportingMapper = reportingMapper;\n     this.random = random;\n+    this.stopwatchProvider = stopwatchProvider;\n     this.userService = userService;\n     this.workspaceService = workspaceService;\n   }\n \n   @Override\n   public ReportingSnapshot takeSnapshot() {\n-    return new ReportingSnapshot()\n-        .captureTimestamp(clock.millis())\n-        .researchers(getResearchers())\n-        .workspaces(getWorkspaces());\n-  }\n+    final EntityBundle entityBundle = getApplicationDbData();\n+    final Stopwatch stopwatch = stopwatchProvider.get().start();\n \n-  private List<ReportingResearcher> getResearchers() {\n-    final List<DbUser> users = userService.getAllUsers();\n-    return reportingMapper.toReportingResearcherList(users);\n+    final List<ReportingWorkspace> workspaces =\n+        reportingMapper.toReportingWorkspaceList(entityBundle.getWorkspaces());\n+    for (ReportingWorkspace model : workspaces) {\n+      model.setFakeSize(\n+          getFakeSize()); // TODO(jaycarlton): remove after initial query & view testing\n+    }\n+\n+    final ReportingSnapshot result =\n+        new ReportingSnapshot()\n+            .captureTimestamp(clock.millis())\n+            .researchers(reportingMapper.toReportingResearcherList(entityBundle.getUsers()))\n+            .workspaces(workspaces);\n+    stopwatch.stop();\n+    log.info(LogFormatters.duration(\"Conversion to ReportingSnapshot\", stopwatch.elapsed()));\n+    return result;\n   }\n \n-  private List<ReportingWorkspace> getWorkspaces() {\n+  // Retrieve all the data we need from the MySQL database in a single transaction for\n+  // consistency.\n+  @Transactional(readOnly = true)\n+  protected EntityBundle getApplicationDbData() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27b8d2693db465fbbf768675682740920e74ba68"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3778aecec5c53372b70a0c535613805d2c197e5b", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/3778aecec5c53372b70a0c535613805d2c197e5b", "committedDate": "2020-08-20T15:05:54Z", "message": "Merge branch 'master' into jaycarlrton/RW-5382"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70d32945d23f22936cd0596835591657b327be39", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/70d32945d23f22936cd0596835591657b327be39", "committedDate": "2020-08-20T15:18:40Z", "message": "put transaction on public method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNzI2MjA1", "url": "https://github.com/all-of-us/workbench/pull/3882#pullrequestreview-471726205", "createdAt": "2020-08-20T15:24:42Z", "commit": {"oid": "70d32945d23f22936cd0596835591657b327be39"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4273, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}