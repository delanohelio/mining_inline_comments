{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTI0MTAy", "number": 4100, "reviewThreads": {"totalCount": 45, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMToxNjozMFrOEpoh1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTozMDozOVrOEsM-ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDkxMDkyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMToxNjozMFrOHbbGfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMjozODo1OFrOHbsBjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNzYyOQ==", "bodyText": "THe machine type names here are provided by GCP and the corresponding resource usage is defined by GCP. They should never change what they correspond to in terms of resources, i.e. n1-standard-4 is always 4CPU, 15GB. Not sure if this is what you were asking about here.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498517629", "createdAt": "2020-10-01T21:16:30Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +87,227 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, runtime}) => {\n+  const {dataprocConfig, gceConfig} = runtime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88adad2328eed5030435b85511fb54f3283719c4"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc5NDg5Mg==", "bodyText": "Yes it is - thanks", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498794892", "createdAt": "2020-10-02T12:38:58Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +87,227 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, runtime}) => {\n+  const {dataprocConfig, gceConfig} = runtime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNzYyOQ=="}, "originalCommit": {"oid": "88adad2328eed5030435b85511fb54f3283719c4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDkzNjI3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMToyNzoyMVrOHbbW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMjoyOToyMlrOHdcJvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyMTgyOQ==", "bodyText": "I would probably generalize this to Runtime, we'll almost immediately want this after you rebase (where I've added conditional support for GCE instead), there's a default value you can grab from a helper file that I added: see runtimePresets.\nFor the purposes of this utility, I would also name this more specifically. The semantics of passing this option are a bit tricky. createRuntimePayload, runtimeToCreate, targetRuntime, runtimeToCreate, runtimeTemplate. We should also spell out whether this is a config that might be used (if the initializer needs to create), or if it's explicitly the goal of the initializer to reach the provided config state  - as currently written it's the former.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498521829", "createdAt": "2020-10-01T21:27:21Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -92,7 +95,8 @@ const DEFAULT_OPTIONS: Partial<LeoRuntimeInitializerOptions> = {\n   maxCreateCount: DEFAULT_MAX_CREATE_COUNT,\n   maxDeleteCount: DEFAULT_MAX_DELETE_COUNT,\n   maxResumeCount: DEFAULT_MAX_RESUME_COUNT,\n-  maxServerErrorCount: DEFAULT_MAX_SERVER_ERROR_COUNT\n+  maxServerErrorCount: DEFAULT_MAX_SERVER_ERROR_COUNT,\n+  dataprocConfig: DEFAULT_DATAPROC_CONFIG", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2NDMzNQ==", "bodyText": "There is a lot to unpack here, but I am using the runtimePresets now.\nDo you want to see the initializer handle more options?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500264335", "createdAt": "2020-10-06T13:13:12Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -92,7 +95,8 @@ const DEFAULT_OPTIONS: Partial<LeoRuntimeInitializerOptions> = {\n   maxCreateCount: DEFAULT_MAX_CREATE_COUNT,\n   maxDeleteCount: DEFAULT_MAX_DELETE_COUNT,\n   maxResumeCount: DEFAULT_MAX_RESUME_COUNT,\n-  maxServerErrorCount: DEFAULT_MAX_SERVER_ERROR_COUNT\n+  maxServerErrorCount: DEFAULT_MAX_SERVER_ERROR_COUNT,\n+  dataprocConfig: DEFAULT_DATAPROC_CONFIG", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyMTgyOQ=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYzMTk5OQ==", "bodyText": "Sorry, I missed this comment. Looking at the current version, the only outstanding issue from my comment (which isn't covered by my latest round) is that the property name runtime is too vague - it's not clear what the semantics of settings this property on the initializer options is. Any of the names I suggested above I think would be more explicit/accurate.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500631999", "createdAt": "2020-10-06T22:29:22Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -92,7 +95,8 @@ const DEFAULT_OPTIONS: Partial<LeoRuntimeInitializerOptions> = {\n   maxCreateCount: DEFAULT_MAX_CREATE_COUNT,\n   maxDeleteCount: DEFAULT_MAX_DELETE_COUNT,\n   maxResumeCount: DEFAULT_MAX_RESUME_COUNT,\n-  maxServerErrorCount: DEFAULT_MAX_SERVER_ERROR_COUNT\n+  maxServerErrorCount: DEFAULT_MAX_SERVER_ERROR_COUNT,\n+  dataprocConfig: DEFAULT_DATAPROC_CONFIG", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyMTgyOQ=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDk2ODk1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo0MDozOVrOHbbrdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoxMzo0M1rOHdFvJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNzA5NQ==", "bodyText": "I'm still concerned about subtle bugs here as a result of multiple initializers running concurrently. I think this is probably fine for now, but let me know if you have thoughts about how to centralize the management of this store more cleanly. In Angular, we would have used a singleton service to achieve this.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498527095", "createdAt": "2020-10-01T21:40:39Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -309,61 +308,61 @@ export class LeoRuntimeInitializer {\n     if (this.pollAbortSignal && this.pollAbortSignal.aborted) {\n       // We'll bail out early if an abort signal was triggered while waiting for the poll cycle.\n       return this.reject(\n-        new LeoRuntimeInitializationFailedError('Request was aborted', this.currentRuntime));\n+        new LeoRuntimeInitializationFailedError('Request was aborted', currentRuntimeStore.get()));\n     }\n     if (Date.now() - this.initializeStartTime > this.overallTimeout) {\n       return this.reject(\n         new LeoRuntimeInitializationFailedError(\n           `Initialization attempt took longer than the max time allowed (${this.overallTimeout}ms)`,\n-          this.currentRuntime));\n+          currentRuntimeStore.get()));\n     }\n \n     // Fetch the current runtime status, with some graceful error handling for NOT_FOUND response\n     // and abort signals.\n     try {\n-      this.currentRuntime = await this.getRuntime();\n-      this.onStatusUpdate(this.currentRuntime.status);\n+      currentRuntimeStore.set(await this.getRuntime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgwNTg3NA==", "bodyText": "I think a hook to handle this may work. I have been working on it this morning. It seems like this may be a clean solution to the problem. Right now the hook is using the LeoRuntimeInitializer, but it could eventually handle the entire runtime cycle.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498805874", "createdAt": "2020-10-02T13:00:47Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -309,61 +308,61 @@ export class LeoRuntimeInitializer {\n     if (this.pollAbortSignal && this.pollAbortSignal.aborted) {\n       // We'll bail out early if an abort signal was triggered while waiting for the poll cycle.\n       return this.reject(\n-        new LeoRuntimeInitializationFailedError('Request was aborted', this.currentRuntime));\n+        new LeoRuntimeInitializationFailedError('Request was aborted', currentRuntimeStore.get()));\n     }\n     if (Date.now() - this.initializeStartTime > this.overallTimeout) {\n       return this.reject(\n         new LeoRuntimeInitializationFailedError(\n           `Initialization attempt took longer than the max time allowed (${this.overallTimeout}ms)`,\n-          this.currentRuntime));\n+          currentRuntimeStore.get()));\n     }\n \n     // Fetch the current runtime status, with some graceful error handling for NOT_FOUND response\n     // and abort signals.\n     try {\n-      this.currentRuntime = await this.getRuntime();\n-      this.onStatusUpdate(this.currentRuntime.status);\n+      currentRuntimeStore.set(await this.getRuntime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNzA5NQ=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI2NDc0MQ==", "bodyText": "I am resolving this conversation as this code has changed", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500264741", "createdAt": "2020-10-06T13:13:43Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -309,61 +308,61 @@ export class LeoRuntimeInitializer {\n     if (this.pollAbortSignal && this.pollAbortSignal.aborted) {\n       // We'll bail out early if an abort signal was triggered while waiting for the poll cycle.\n       return this.reject(\n-        new LeoRuntimeInitializationFailedError('Request was aborted', this.currentRuntime));\n+        new LeoRuntimeInitializationFailedError('Request was aborted', currentRuntimeStore.get()));\n     }\n     if (Date.now() - this.initializeStartTime > this.overallTimeout) {\n       return this.reject(\n         new LeoRuntimeInitializationFailedError(\n           `Initialization attempt took longer than the max time allowed (${this.overallTimeout}ms)`,\n-          this.currentRuntime));\n+          currentRuntimeStore.get()));\n     }\n \n     // Fetch the current runtime status, with some graceful error handling for NOT_FOUND response\n     // and abort signals.\n     try {\n-      this.currentRuntime = await this.getRuntime();\n-      this.onStatusUpdate(this.currentRuntime.status);\n+      currentRuntimeStore.set(await this.getRuntime());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNzA5NQ=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDk3MDIyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/stores.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo0MTowN1rOHbbsRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzo1NzowOVrOHbuqSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNzMwMQ==", "bodyText": "Runtime?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498527301", "createdAt": "2020-10-01T21:41:07Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -70,6 +70,9 @@ export const abortRuntimeOperationForWorkspace = (workspaceNamespace: string) =>\n   }\n };\n \n+\n+export const currentRuntimeStore = atom<any>({});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzODA4OQ==", "bodyText": "Yes, indeed - I was having some type errors with Runtime and wanted to continue working on the runtime state (delete/create cycle) and syncing issues. I will address this and assign the proper type before I take this PR out of Draft.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498838089", "createdAt": "2020-10-02T13:57:09Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -70,6 +70,9 @@ export const abortRuntimeOperationForWorkspace = (workspaceNamespace: string) =>\n   }\n };\n \n+\n+export const currentRuntimeStore = atom<any>({});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyNzMwMQ=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDk3NTg4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo0MzoyNlrOHbbvyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToyODoyNVrOHb5Nzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyODIwMg==", "bodyText": "Noting as a reminder: per slack thread, I suggest having a tooltip here which gets displayed while this is disabled, explaining why.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498528202", "createdAt": "2020-10-01T21:43:26Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()\n+  });\n+}\n \n-      const isDataproc = !!runtime.dataprocConfig;\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const currentRuntime = useStore(currentRuntimeStore);\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = null } = currentRuntime || {};\n \n-      let masterMachineName;\n-      let masterDiskSize;\n-      if (isDataproc) {\n-        masterMachineName = runtime.dataprocConfig.masterMachineType;\n-        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n-      } else {\n-        masterMachineName = runtime.gceConfig.machineType;\n-        masterDiskSize = runtime.gceConfig.bootDiskSize;\n+  // How do we reflect the state of the runtime to the user?\n+  // How should we handle errors?\n+\n+  useEffect(() => {\n+      const aborter = new AbortController();\n+      const {namespace} = workspace;\n+      const loadRuntime = async () => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n+        try {\n+          const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});\n+          updateRuntimeOpsStoreForWorkspaceNamespace(namespace, {\n+            promise: promise,\n+            operation: 'get',\n+            aborter: aborter\n+          });\n+          currentRuntimeStore.set(await promise);\n+        } catch (e) {\n+          // 404 is expected if the runtime doesn't exist, represent this as a null\n+          // runtime rather than an error mode.\n+          if (e.status !== 404) {\n+            setError(true);\n+          }\n+        } finally {\n+          setLoading(false);\n+        }\n+        markRuntimeOperationCompleteForWorkspace(namespace);\n       }\n-      const machineType = allMachineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n \n-      return <div data-test-id='runtime-panel'>\n-        <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n-        <div>\n-          Your analysis environment consists of an application and compute resources.\n-          Your cloud environment is unique to this workspace and not shared with other users.\n-        </div>\n-        {/* TODO(RW-5419): Cost estimates go here. */}\n-        <div style={styles.controlSection}>\n-          {/* Recommended runtime: pick from default templates or change the image. */}\n-          <PopupTrigger side='bottom'\n-                        closeOnClick\n-                        content={\n-                          <React.Fragment>\n-                            <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                            <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n-                          </React.Fragment>\n-                        }>\n-            <Clickable data-test-id='runtime-presets-menu'\n-                       disabled={true}>\n-              Recommended environments <ClrIcon shape='caret down'/>\n-            </Clickable>\n-          </PopupTrigger>\n-          <h3 style={styles.sectionHeader}>Application configuration</h3>\n-          {/* TODO(RW-5413): Populate the image list with server driven options. */}\n-          <Dropdown style={{width: '100%'}}\n-                    data-test-id='runtime-image-dropdown'\n-                    disabled={true}\n-                    options={[runtime.toolDockerImage]}\n-                    value={runtime.toolDockerImage}/>\n-          {/* Runtime customization: change detailed machine configuration options. */}\n-          <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n-          <FlexRow style={{justifyContent: 'space-between'}}>\n-            <div>\n-              <label htmlFor='runtime-cpu'\n-                     style={{marginRight: '.25rem'}}>CPUs</label>\n-              <Dropdown id='runtime-cpu'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show all CPU options.\n-                          fp.map('cpu'),\n-                          // In the event that was remove a machine type from our set of valid\n-                          // configs, we want to continue to allow rendering of the value here.\n-                          // Union also makes the CPU values unique.\n-                          fp.union([machineType.cpu]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.cpu}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-ram'\n-                     style={{marginRight: '.25rem'}}>RAM (GB)</label>\n-              <Dropdown id='runtime-ram'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show valid memory options as constrained by the currently selected CPU.\n-                          fp.filter(({cpu}) => cpu === machineType.cpu),\n-                          fp.map('memory'),\n-                          // See above comment on CPU union.\n-                          fp.union([machineType.memory]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.memory}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-disk'\n-                     style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-              <InputNumber id='runtime-disk'\n-                           disabled={true}\n-                           showButtons\n-                           decrementButtonClassName='p-button-secondary'\n-                           incrementButtonClassName='p-button-secondary'\n-                           value={masterDiskSize}\n-                           inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                           min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-            </div>\n-          </FlexRow>\n-          <FlexColumn style={{marginTop: '1rem'}}>\n-            <label htmlFor='runtime-compute'>Compute type</label>\n-            <Dropdown id='runtime-compute'\n-                      style={{width: '10rem'}}\n-                      disabled={true}\n-                      options={['Dataproc cluster', 'Standard VM']}\n-                      value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n-          </FlexColumn>\n-        </div>\n-        <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n-          <Button disabled={true}>Create</Button>\n-        </FlexRow>\n-        {activeRuntimeOp && <React.Fragment>\n-          <hr/>\n-          <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </React.Fragment>}\n-      </div>;\n-    }\n+      loadRuntime()\n+      return () => aborter.abort();\n+  }, []);\n \n-    componentWillUnmount() {\n-      this.aborter.abort();\n-    }\n-  });\n+  if (loading) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (error) {\n+    return <div>Error loading compute configuration</div>;\n+  } else if (!currentRuntime) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n+\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = selectedMachine || selectedDiskSize;\n+\n+  console.log('Status:', currentRuntime, status);\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[currentRuntime.toolDockerImage]}\n+                value={currentRuntime.toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}  \n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector selectedMachine={selectedMachine} onChange={setselectedMachine} currentRuntime={currentRuntime}/>\n+        <DiskSizeSelection selectedDiskSize={selectedDiskSize} onChange={setSelectedDiskSize} currentRuntime={currentRuntime}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button \n+        disabled={status !== 'Running' || !runtimeChanged}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 408}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgzOTU5Mg==", "bodyText": "I was playing with the Terra app on this - they have an additional \"This will make your runtime unavailable\" type of confirmation screen in the runtime panel. Once the user confirms they get pushed back to preview mode. The flow seems to make a lot of sense and create a nice UX for the user. Though they do have some bugs wrt runtime state and saving (which I noticed in AoU as well).\nI am thinking of following this UX flow as it answers a lot of questions", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498839592", "createdAt": "2020-10-02T13:59:41Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()\n+  });\n+}\n \n-      const isDataproc = !!runtime.dataprocConfig;\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const currentRuntime = useStore(currentRuntimeStore);\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = null } = currentRuntime || {};\n \n-      let masterMachineName;\n-      let masterDiskSize;\n-      if (isDataproc) {\n-        masterMachineName = runtime.dataprocConfig.masterMachineType;\n-        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n-      } else {\n-        masterMachineName = runtime.gceConfig.machineType;\n-        masterDiskSize = runtime.gceConfig.bootDiskSize;\n+  // How do we reflect the state of the runtime to the user?\n+  // How should we handle errors?\n+\n+  useEffect(() => {\n+      const aborter = new AbortController();\n+      const {namespace} = workspace;\n+      const loadRuntime = async () => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n+        try {\n+          const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});\n+          updateRuntimeOpsStoreForWorkspaceNamespace(namespace, {\n+            promise: promise,\n+            operation: 'get',\n+            aborter: aborter\n+          });\n+          currentRuntimeStore.set(await promise);\n+        } catch (e) {\n+          // 404 is expected if the runtime doesn't exist, represent this as a null\n+          // runtime rather than an error mode.\n+          if (e.status !== 404) {\n+            setError(true);\n+          }\n+        } finally {\n+          setLoading(false);\n+        }\n+        markRuntimeOperationCompleteForWorkspace(namespace);\n       }\n-      const machineType = allMachineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n \n-      return <div data-test-id='runtime-panel'>\n-        <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n-        <div>\n-          Your analysis environment consists of an application and compute resources.\n-          Your cloud environment is unique to this workspace and not shared with other users.\n-        </div>\n-        {/* TODO(RW-5419): Cost estimates go here. */}\n-        <div style={styles.controlSection}>\n-          {/* Recommended runtime: pick from default templates or change the image. */}\n-          <PopupTrigger side='bottom'\n-                        closeOnClick\n-                        content={\n-                          <React.Fragment>\n-                            <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                            <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n-                          </React.Fragment>\n-                        }>\n-            <Clickable data-test-id='runtime-presets-menu'\n-                       disabled={true}>\n-              Recommended environments <ClrIcon shape='caret down'/>\n-            </Clickable>\n-          </PopupTrigger>\n-          <h3 style={styles.sectionHeader}>Application configuration</h3>\n-          {/* TODO(RW-5413): Populate the image list with server driven options. */}\n-          <Dropdown style={{width: '100%'}}\n-                    data-test-id='runtime-image-dropdown'\n-                    disabled={true}\n-                    options={[runtime.toolDockerImage]}\n-                    value={runtime.toolDockerImage}/>\n-          {/* Runtime customization: change detailed machine configuration options. */}\n-          <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n-          <FlexRow style={{justifyContent: 'space-between'}}>\n-            <div>\n-              <label htmlFor='runtime-cpu'\n-                     style={{marginRight: '.25rem'}}>CPUs</label>\n-              <Dropdown id='runtime-cpu'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show all CPU options.\n-                          fp.map('cpu'),\n-                          // In the event that was remove a machine type from our set of valid\n-                          // configs, we want to continue to allow rendering of the value here.\n-                          // Union also makes the CPU values unique.\n-                          fp.union([machineType.cpu]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.cpu}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-ram'\n-                     style={{marginRight: '.25rem'}}>RAM (GB)</label>\n-              <Dropdown id='runtime-ram'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show valid memory options as constrained by the currently selected CPU.\n-                          fp.filter(({cpu}) => cpu === machineType.cpu),\n-                          fp.map('memory'),\n-                          // See above comment on CPU union.\n-                          fp.union([machineType.memory]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.memory}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-disk'\n-                     style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-              <InputNumber id='runtime-disk'\n-                           disabled={true}\n-                           showButtons\n-                           decrementButtonClassName='p-button-secondary'\n-                           incrementButtonClassName='p-button-secondary'\n-                           value={masterDiskSize}\n-                           inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                           min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-            </div>\n-          </FlexRow>\n-          <FlexColumn style={{marginTop: '1rem'}}>\n-            <label htmlFor='runtime-compute'>Compute type</label>\n-            <Dropdown id='runtime-compute'\n-                      style={{width: '10rem'}}\n-                      disabled={true}\n-                      options={['Dataproc cluster', 'Standard VM']}\n-                      value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n-          </FlexColumn>\n-        </div>\n-        <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n-          <Button disabled={true}>Create</Button>\n-        </FlexRow>\n-        {activeRuntimeOp && <React.Fragment>\n-          <hr/>\n-          <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </React.Fragment>}\n-      </div>;\n-    }\n+      loadRuntime()\n+      return () => aborter.abort();\n+  }, []);\n \n-    componentWillUnmount() {\n-      this.aborter.abort();\n-    }\n-  });\n+  if (loading) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (error) {\n+    return <div>Error loading compute configuration</div>;\n+  } else if (!currentRuntime) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n+\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = selectedMachine || selectedDiskSize;\n+\n+  console.log('Status:', currentRuntime, status);\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[currentRuntime.toolDockerImage]}\n+                value={currentRuntime.toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}  \n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector selectedMachine={selectedMachine} onChange={setselectedMachine} currentRuntime={currentRuntime}/>\n+        <DiskSizeSelection selectedDiskSize={selectedDiskSize} onChange={setSelectedDiskSize} currentRuntime={currentRuntime}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button \n+        disabled={status !== 'Running' || !runtimeChanged}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyODIwMg=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 408}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkwNzI0NQ==", "bodyText": "Note that we have a confirmation page as part of the mocks. I didn't include it explicitly in the scope of this ticket because the update functionality is critical path, and the confirm page is not. However, if you can easily add a simple version of that confirm page here - go for it: https://projects.invisionapp.com/d/main#/console/20179213/431732265/preview\nAs to what the bugs are, please let me know what these are if you are referencing existing bugs in AoU", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498907245", "createdAt": "2020-10-02T15:53:37Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()\n+  });\n+}\n \n-      const isDataproc = !!runtime.dataprocConfig;\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const currentRuntime = useStore(currentRuntimeStore);\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = null } = currentRuntime || {};\n \n-      let masterMachineName;\n-      let masterDiskSize;\n-      if (isDataproc) {\n-        masterMachineName = runtime.dataprocConfig.masterMachineType;\n-        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n-      } else {\n-        masterMachineName = runtime.gceConfig.machineType;\n-        masterDiskSize = runtime.gceConfig.bootDiskSize;\n+  // How do we reflect the state of the runtime to the user?\n+  // How should we handle errors?\n+\n+  useEffect(() => {\n+      const aborter = new AbortController();\n+      const {namespace} = workspace;\n+      const loadRuntime = async () => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n+        try {\n+          const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});\n+          updateRuntimeOpsStoreForWorkspaceNamespace(namespace, {\n+            promise: promise,\n+            operation: 'get',\n+            aborter: aborter\n+          });\n+          currentRuntimeStore.set(await promise);\n+        } catch (e) {\n+          // 404 is expected if the runtime doesn't exist, represent this as a null\n+          // runtime rather than an error mode.\n+          if (e.status !== 404) {\n+            setError(true);\n+          }\n+        } finally {\n+          setLoading(false);\n+        }\n+        markRuntimeOperationCompleteForWorkspace(namespace);\n       }\n-      const machineType = allMachineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n \n-      return <div data-test-id='runtime-panel'>\n-        <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n-        <div>\n-          Your analysis environment consists of an application and compute resources.\n-          Your cloud environment is unique to this workspace and not shared with other users.\n-        </div>\n-        {/* TODO(RW-5419): Cost estimates go here. */}\n-        <div style={styles.controlSection}>\n-          {/* Recommended runtime: pick from default templates or change the image. */}\n-          <PopupTrigger side='bottom'\n-                        closeOnClick\n-                        content={\n-                          <React.Fragment>\n-                            <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                            <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n-                          </React.Fragment>\n-                        }>\n-            <Clickable data-test-id='runtime-presets-menu'\n-                       disabled={true}>\n-              Recommended environments <ClrIcon shape='caret down'/>\n-            </Clickable>\n-          </PopupTrigger>\n-          <h3 style={styles.sectionHeader}>Application configuration</h3>\n-          {/* TODO(RW-5413): Populate the image list with server driven options. */}\n-          <Dropdown style={{width: '100%'}}\n-                    data-test-id='runtime-image-dropdown'\n-                    disabled={true}\n-                    options={[runtime.toolDockerImage]}\n-                    value={runtime.toolDockerImage}/>\n-          {/* Runtime customization: change detailed machine configuration options. */}\n-          <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n-          <FlexRow style={{justifyContent: 'space-between'}}>\n-            <div>\n-              <label htmlFor='runtime-cpu'\n-                     style={{marginRight: '.25rem'}}>CPUs</label>\n-              <Dropdown id='runtime-cpu'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show all CPU options.\n-                          fp.map('cpu'),\n-                          // In the event that was remove a machine type from our set of valid\n-                          // configs, we want to continue to allow rendering of the value here.\n-                          // Union also makes the CPU values unique.\n-                          fp.union([machineType.cpu]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.cpu}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-ram'\n-                     style={{marginRight: '.25rem'}}>RAM (GB)</label>\n-              <Dropdown id='runtime-ram'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show valid memory options as constrained by the currently selected CPU.\n-                          fp.filter(({cpu}) => cpu === machineType.cpu),\n-                          fp.map('memory'),\n-                          // See above comment on CPU union.\n-                          fp.union([machineType.memory]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.memory}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-disk'\n-                     style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-              <InputNumber id='runtime-disk'\n-                           disabled={true}\n-                           showButtons\n-                           decrementButtonClassName='p-button-secondary'\n-                           incrementButtonClassName='p-button-secondary'\n-                           value={masterDiskSize}\n-                           inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                           min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-            </div>\n-          </FlexRow>\n-          <FlexColumn style={{marginTop: '1rem'}}>\n-            <label htmlFor='runtime-compute'>Compute type</label>\n-            <Dropdown id='runtime-compute'\n-                      style={{width: '10rem'}}\n-                      disabled={true}\n-                      options={['Dataproc cluster', 'Standard VM']}\n-                      value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n-          </FlexColumn>\n-        </div>\n-        <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n-          <Button disabled={true}>Create</Button>\n-        </FlexRow>\n-        {activeRuntimeOp && <React.Fragment>\n-          <hr/>\n-          <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </React.Fragment>}\n-      </div>;\n-    }\n+      loadRuntime()\n+      return () => aborter.abort();\n+  }, []);\n \n-    componentWillUnmount() {\n-      this.aborter.abort();\n-    }\n-  });\n+  if (loading) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (error) {\n+    return <div>Error loading compute configuration</div>;\n+  } else if (!currentRuntime) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n+\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = selectedMachine || selectedDiskSize;\n+\n+  console.log('Status:', currentRuntime, status);\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[currentRuntime.toolDockerImage]}\n+                value={currentRuntime.toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}  \n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector selectedMachine={selectedMachine} onChange={setselectedMachine} currentRuntime={currentRuntime}/>\n+        <DiskSizeSelection selectedDiskSize={selectedDiskSize} onChange={setSelectedDiskSize} currentRuntime={currentRuntime}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button \n+        disabled={status !== 'Running' || !runtimeChanged}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyODIwMg=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 408}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAxMTAyMg==", "bodyText": "The bugs were around saving the notebook during, or even after the update cycle. I do not believe AoU has any bug like this in production since there is currently no way to update the runtime.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r499011022", "createdAt": "2020-10-02T19:28:25Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()\n+  });\n+}\n \n-      const isDataproc = !!runtime.dataprocConfig;\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const currentRuntime = useStore(currentRuntimeStore);\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = null } = currentRuntime || {};\n \n-      let masterMachineName;\n-      let masterDiskSize;\n-      if (isDataproc) {\n-        masterMachineName = runtime.dataprocConfig.masterMachineType;\n-        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n-      } else {\n-        masterMachineName = runtime.gceConfig.machineType;\n-        masterDiskSize = runtime.gceConfig.bootDiskSize;\n+  // How do we reflect the state of the runtime to the user?\n+  // How should we handle errors?\n+\n+  useEffect(() => {\n+      const aborter = new AbortController();\n+      const {namespace} = workspace;\n+      const loadRuntime = async () => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n+        try {\n+          const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});\n+          updateRuntimeOpsStoreForWorkspaceNamespace(namespace, {\n+            promise: promise,\n+            operation: 'get',\n+            aborter: aborter\n+          });\n+          currentRuntimeStore.set(await promise);\n+        } catch (e) {\n+          // 404 is expected if the runtime doesn't exist, represent this as a null\n+          // runtime rather than an error mode.\n+          if (e.status !== 404) {\n+            setError(true);\n+          }\n+        } finally {\n+          setLoading(false);\n+        }\n+        markRuntimeOperationCompleteForWorkspace(namespace);\n       }\n-      const machineType = allMachineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n \n-      return <div data-test-id='runtime-panel'>\n-        <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n-        <div>\n-          Your analysis environment consists of an application and compute resources.\n-          Your cloud environment is unique to this workspace and not shared with other users.\n-        </div>\n-        {/* TODO(RW-5419): Cost estimates go here. */}\n-        <div style={styles.controlSection}>\n-          {/* Recommended runtime: pick from default templates or change the image. */}\n-          <PopupTrigger side='bottom'\n-                        closeOnClick\n-                        content={\n-                          <React.Fragment>\n-                            <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                            <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n-                          </React.Fragment>\n-                        }>\n-            <Clickable data-test-id='runtime-presets-menu'\n-                       disabled={true}>\n-              Recommended environments <ClrIcon shape='caret down'/>\n-            </Clickable>\n-          </PopupTrigger>\n-          <h3 style={styles.sectionHeader}>Application configuration</h3>\n-          {/* TODO(RW-5413): Populate the image list with server driven options. */}\n-          <Dropdown style={{width: '100%'}}\n-                    data-test-id='runtime-image-dropdown'\n-                    disabled={true}\n-                    options={[runtime.toolDockerImage]}\n-                    value={runtime.toolDockerImage}/>\n-          {/* Runtime customization: change detailed machine configuration options. */}\n-          <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n-          <FlexRow style={{justifyContent: 'space-between'}}>\n-            <div>\n-              <label htmlFor='runtime-cpu'\n-                     style={{marginRight: '.25rem'}}>CPUs</label>\n-              <Dropdown id='runtime-cpu'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show all CPU options.\n-                          fp.map('cpu'),\n-                          // In the event that was remove a machine type from our set of valid\n-                          // configs, we want to continue to allow rendering of the value here.\n-                          // Union also makes the CPU values unique.\n-                          fp.union([machineType.cpu]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.cpu}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-ram'\n-                     style={{marginRight: '.25rem'}}>RAM (GB)</label>\n-              <Dropdown id='runtime-ram'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show valid memory options as constrained by the currently selected CPU.\n-                          fp.filter(({cpu}) => cpu === machineType.cpu),\n-                          fp.map('memory'),\n-                          // See above comment on CPU union.\n-                          fp.union([machineType.memory]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.memory}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-disk'\n-                     style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-              <InputNumber id='runtime-disk'\n-                           disabled={true}\n-                           showButtons\n-                           decrementButtonClassName='p-button-secondary'\n-                           incrementButtonClassName='p-button-secondary'\n-                           value={masterDiskSize}\n-                           inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                           min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-            </div>\n-          </FlexRow>\n-          <FlexColumn style={{marginTop: '1rem'}}>\n-            <label htmlFor='runtime-compute'>Compute type</label>\n-            <Dropdown id='runtime-compute'\n-                      style={{width: '10rem'}}\n-                      disabled={true}\n-                      options={['Dataproc cluster', 'Standard VM']}\n-                      value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n-          </FlexColumn>\n-        </div>\n-        <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n-          <Button disabled={true}>Create</Button>\n-        </FlexRow>\n-        {activeRuntimeOp && <React.Fragment>\n-          <hr/>\n-          <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </React.Fragment>}\n-      </div>;\n-    }\n+      loadRuntime()\n+      return () => aborter.abort();\n+  }, []);\n \n-    componentWillUnmount() {\n-      this.aborter.abort();\n-    }\n-  });\n+  if (loading) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (error) {\n+    return <div>Error loading compute configuration</div>;\n+  } else if (!currentRuntime) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n+\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = selectedMachine || selectedDiskSize;\n+\n+  console.log('Status:', currentRuntime, status);\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[currentRuntime.toolDockerImage]}\n+                value={currentRuntime.toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}  \n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector selectedMachine={selectedMachine} onChange={setselectedMachine} currentRuntime={currentRuntime}/>\n+        <DiskSizeSelection selectedDiskSize={selectedDiskSize} onChange={setSelectedDiskSize} currentRuntime={currentRuntime}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button \n+        disabled={status !== 'Running' || !runtimeChanged}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUyODIwMg=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 408}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDk4OTU4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo0OTozNFrOHbb40Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNzozMDoyOVrOHb10fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDUxMw==", "bodyText": "The aborter is not for us to manually abort the intializer on completion. Rather, the aborter should be maintained by this panel component and aborted if it gets dismounted (which should be accounted for somewhere here), thereby avoiding having this continue running in the background after we've gone elsewhere (e.g. switched to a different workspace in the app).\nThe initializer will already finish once it reaches a terminal state, i.e. running (or it fails to do so and throws an error).", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498530513", "createdAt": "2020-10-01T21:49:34Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg0MTY0Ng==", "bodyText": "Ah - thanks - I will remove this.\nI had the aborter setup on unmount, but I don't think this is what we want - the UX was unpredictable. If a user chooses to change their runtime and navigates away, refreshes, etc... Then they lose the customization of their runtime. The next time they go in to the notebook they will get the default runtime, causing them to have to customize all over again and essentially wait for 2 creates and 1 delete, which can be lengthy.\nI don't think it would be unreasonable or out of the ordinary for a user to refresh the page during a long running operation.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498841646", "createdAt": "2020-10-02T14:03:06Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDUxMw=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MTA3OQ==", "bodyText": "Yes - I agree we need this scenario to work properly, I'm not suggesting that you break it. But this specific implementation doesn't work as-is, since it will introduce nasty bugs when you switch between workspaces in the application.\nThe motivation for the runtimeOperationStore was to address this exact issue. My proposal was to use that to track this long-running operation so that you can restore when rerendering the panel. If you need to attach the pending runtime config value so you can restore the state of the panel - that's definitely within reason.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498951079", "createdAt": "2020-10-02T17:21:34Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDUxMw=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1MjI0NA==", "bodyText": "The problem here is that we're using the LeoInitializer, which is having side-effects I think there are two potential ways I can think to move forward:\n\nInstead of currentRuntimeStore, switch to a store per runtime (i.e. per workspace), similar to the runtimeOpStore\nSomehow invalidate the LeoRuntimeInitializer updates to the currentRuntimeStore when the store goes out of context. Possibly disallow it to make an update if the runtime name/namespace don't match the previous one - only allow switches via workspace-page.ts", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498952244", "createdAt": "2020-10-02T17:24:05Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDUxMw=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk1NTM5MQ==", "bodyText": "In RW-5409 what I have right now is a currentRuntimeStore that clears the store and creates a new LeoRuntimeInitializer whenever the workspace context switches. I'm going to have a PR up for that in a little while. If a per-workspace store would make your life easier, I can make that store in to a workspaceRuntimeStore pretty easily.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498955391", "createdAt": "2020-10-02T17:30:29Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMDUxMw=="}, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDk5OTA4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo1Mzo1M1rOHbb_Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo1Mzo1M1rOHbb_Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMjA5OQ==", "bodyText": "SHould be a comment somewhere that this onChange dispatches null if the user selects the original runtime setting.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498532099", "createdAt": "2020-10-01T21:53:53Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTAwNDM0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo1NjoyOFrOHbcCiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMTo1NjoyOFrOHbcCiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUzMzAwMQ==", "bodyText": "RuntimeStatus.Running", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498533001", "createdAt": "2020-10-01T21:56:28Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +86,226 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  // What happens when a config changes? If the user chooses 4 cpus, but that that machine type is changed to 6 cpus? Can this happen?\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+const updateRuntime = async ({workspaceNamespace, currentRuntime, selectedDiskSize, selectedMachine}) => {\n+  const {dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime;\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n+  const pollAbortSignal = new AbortController();\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+  await runtimeApi().deleteRuntime(workspaceNamespace);\n+\n+  await LeoRuntimeInitializer.initialize({\n+    workspaceNamespace,\n+    dataprocConfig: {\n+      masterMachineType: nextMachineType || masterMachineType,\n+      masterDiskSize: selectedDiskSize || masterDiskSize\n+    },\n+    pollAbortSignal: pollAbortSignal.signal,\n+    onStatusUpdate: status => status === 'Running' && pollAbortSignal.abort()\n+  });\n+}\n \n-      const isDataproc = !!runtime.dataprocConfig;\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const currentRuntime = useStore(currentRuntimeStore);\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = null } = currentRuntime || {};\n \n-      let masterMachineName;\n-      let masterDiskSize;\n-      if (isDataproc) {\n-        masterMachineName = runtime.dataprocConfig.masterMachineType;\n-        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n-      } else {\n-        masterMachineName = runtime.gceConfig.machineType;\n-        masterDiskSize = runtime.gceConfig.bootDiskSize;\n+  // How do we reflect the state of the runtime to the user?\n+  // How should we handle errors?\n+\n+  useEffect(() => {\n+      const aborter = new AbortController();\n+      const {namespace} = workspace;\n+      const loadRuntime = async () => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n+        try {\n+          const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});\n+          updateRuntimeOpsStoreForWorkspaceNamespace(namespace, {\n+            promise: promise,\n+            operation: 'get',\n+            aborter: aborter\n+          });\n+          currentRuntimeStore.set(await promise);\n+        } catch (e) {\n+          // 404 is expected if the runtime doesn't exist, represent this as a null\n+          // runtime rather than an error mode.\n+          if (e.status !== 404) {\n+            setError(true);\n+          }\n+        } finally {\n+          setLoading(false);\n+        }\n+        markRuntimeOperationCompleteForWorkspace(namespace);\n       }\n-      const machineType = allMachineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n \n-      return <div data-test-id='runtime-panel'>\n-        <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n-        <div>\n-          Your analysis environment consists of an application and compute resources.\n-          Your cloud environment is unique to this workspace and not shared with other users.\n-        </div>\n-        {/* TODO(RW-5419): Cost estimates go here. */}\n-        <div style={styles.controlSection}>\n-          {/* Recommended runtime: pick from default templates or change the image. */}\n-          <PopupTrigger side='bottom'\n-                        closeOnClick\n-                        content={\n-                          <React.Fragment>\n-                            <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                            <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n-                          </React.Fragment>\n-                        }>\n-            <Clickable data-test-id='runtime-presets-menu'\n-                       disabled={true}>\n-              Recommended environments <ClrIcon shape='caret down'/>\n-            </Clickable>\n-          </PopupTrigger>\n-          <h3 style={styles.sectionHeader}>Application configuration</h3>\n-          {/* TODO(RW-5413): Populate the image list with server driven options. */}\n-          <Dropdown style={{width: '100%'}}\n-                    data-test-id='runtime-image-dropdown'\n-                    disabled={true}\n-                    options={[runtime.toolDockerImage]}\n-                    value={runtime.toolDockerImage}/>\n-          {/* Runtime customization: change detailed machine configuration options. */}\n-          <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n-          <FlexRow style={{justifyContent: 'space-between'}}>\n-            <div>\n-              <label htmlFor='runtime-cpu'\n-                     style={{marginRight: '.25rem'}}>CPUs</label>\n-              <Dropdown id='runtime-cpu'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show all CPU options.\n-                          fp.map('cpu'),\n-                          // In the event that was remove a machine type from our set of valid\n-                          // configs, we want to continue to allow rendering of the value here.\n-                          // Union also makes the CPU values unique.\n-                          fp.union([machineType.cpu]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.cpu}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-ram'\n-                     style={{marginRight: '.25rem'}}>RAM (GB)</label>\n-              <Dropdown id='runtime-ram'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show valid memory options as constrained by the currently selected CPU.\n-                          fp.filter(({cpu}) => cpu === machineType.cpu),\n-                          fp.map('memory'),\n-                          // See above comment on CPU union.\n-                          fp.union([machineType.memory]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.memory}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-disk'\n-                     style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-              <InputNumber id='runtime-disk'\n-                           disabled={true}\n-                           showButtons\n-                           decrementButtonClassName='p-button-secondary'\n-                           incrementButtonClassName='p-button-secondary'\n-                           value={masterDiskSize}\n-                           inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                           min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-            </div>\n-          </FlexRow>\n-          <FlexColumn style={{marginTop: '1rem'}}>\n-            <label htmlFor='runtime-compute'>Compute type</label>\n-            <Dropdown id='runtime-compute'\n-                      style={{width: '10rem'}}\n-                      disabled={true}\n-                      options={['Dataproc cluster', 'Standard VM']}\n-                      value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n-          </FlexColumn>\n-        </div>\n-        <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n-          <Button disabled={true}>Create</Button>\n-        </FlexRow>\n-        {activeRuntimeOp && <React.Fragment>\n-          <hr/>\n-          <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </React.Fragment>}\n-      </div>;\n-    }\n+      loadRuntime()\n+      return () => aborter.abort();\n+  }, []);\n \n-    componentWillUnmount() {\n-      this.aborter.abort();\n-    }\n-  });\n+  if (loading) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (error) {\n+    return <div>Error loading compute configuration</div>;\n+  } else if (!currentRuntime) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n+\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = selectedMachine || selectedDiskSize;\n+\n+  console.log('Status:', currentRuntime, status);\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[currentRuntime.toolDockerImage]}\n+                value={currentRuntime.toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}  \n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector selectedMachine={selectedMachine} onChange={setselectedMachine} currentRuntime={currentRuntime}/>\n+        <DiskSizeSelection selectedDiskSize={selectedDiskSize} onChange={setSelectedDiskSize} currentRuntime={currentRuntime}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button \n+        disabled={status !== 'Running' || !runtimeChanged}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "98c1794438a5a0c60afc2e7e1247861869a37107"}, "originalPosition": 408}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA0NjA1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozMzozM1rOHbv_2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozMzozM1rOHbv_2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg1OTk5NQ==", "bodyText": "Converted to function component", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498859995", "createdAt": "2020-10-02T14:33:33Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +83,207 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n+\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d287f113ad0dcd7dfaadd7185b07ab24498599b"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA2MDE3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozNzoxOVrOHbwIcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozNzoxOVrOHbwIcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MjE5Mw==", "bodyText": "Usage of useRuntime.\nSupply the workspaceNamespace and recieve the currentRuntime and a setter for a new runtime.\nAny runtime updates that go through the underlying runtimeStore will trigger a render.\nIdeally all runtime changes should go through this hook. Only the LeoRuntimeInitializer this hook, and this component (I am looking to factor that out) will directly reference the store.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498862193", "createdAt": "2020-10-02T14:37:19Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +83,207 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n+\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useRuntime(workspace.namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d287f113ad0dcd7dfaadd7185b07ab24498599b"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA2MTYwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozNzo0M1rOHbwJVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozNzo0M1rOHbwJVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MjQyMQ==", "bodyText": "Setting a new runtime", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498862421", "createdAt": "2020-10-02T14:37:43Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -79,178 +83,207 @@ interface State {\n   // The runtime. null if none exists, or if there was an error in loading the\n   // runtime.\n   runtime: Runtime|null;\n+  // machine: Machine;\n+  selectedDiskSize: number;\n+  selectedMachine: Machine;\n }\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+ const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;  \n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = selectedMachine => fp.equals(selectedMachine, initialMachineType) ? null : selectedMachine;\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]), \n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'), \n+                    fp.find({cpu: value}), \n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes) \n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={ \n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}), \n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>\n+}\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n-        }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize\n \n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>\n+}\n+\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useRuntime(workspace.namespace);\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = null, dataprocConfig: {masterDiskSize, masterMachineType}} = currentRuntime || { dataprocConfig: {}};\n+  const nextMachineType = selectedMachine && selectedMachine.name;\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  // How do we reflect the state of the runtime to the user?\n+  // How should we handle errors?\n \n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n+  useOnMount(() => {\n+      const aborter = new AbortController();\n+      const {namespace} = workspace;\n+      const loadRuntime = async () => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n+        try {\n+          const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});\n+          updateRuntimeOpsStoreForWorkspaceNamespace(namespace, {\n+            promise: promise,\n+            operation: 'get',\n+            aborter: aborter\n+          });\n+          runtimeStore.set(await promise);\n+        } catch (e) {\n+          // 404 is expected if the runtime doesn't exist, represent this as a null\n+          // runtime rather than an error mode.\n+          if (e.status !== 404) {\n+            setError(true);\n+          }\n+        } finally {\n+          setLoading(false);\n+        }\n+        markRuntimeOperationCompleteForWorkspace(namespace);\n       }\n \n-      const isDataproc = !!runtime.dataprocConfig;\n+      loadRuntime()\n+      return () => aborter.abort();\n+  });\n \n-      let masterMachineName;\n-      let masterDiskSize;\n-      if (isDataproc) {\n-        masterMachineName = runtime.dataprocConfig.masterMachineType;\n-        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n-      } else {\n-        masterMachineName = runtime.gceConfig.machineType;\n-        masterDiskSize = runtime.gceConfig.bootDiskSize;\n-      }\n-      const machineType = allMachineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n+  if (loading) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (error) {\n+    return <div>Error loading compute configuration</div>;\n+  } else if (!currentRuntime) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n \n-      return <div data-test-id='runtime-panel'>\n-        <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n-        <div>\n-          Your analysis environment consists of an application and compute resources.\n-          Your cloud environment is unique to this workspace and not shared with other users.\n-        </div>\n-        {/* TODO(RW-5419): Cost estimates go here. */}\n-        <div style={styles.controlSection}>\n-          {/* Recommended runtime: pick from default templates or change the image. */}\n-          <PopupTrigger side='bottom'\n-                        closeOnClick\n-                        content={\n-                          <React.Fragment>\n-                            <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                            <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n-                          </React.Fragment>\n-                        }>\n-            <Clickable data-test-id='runtime-presets-menu'\n-                       disabled={true}>\n-              Recommended environments <ClrIcon shape='caret down'/>\n-            </Clickable>\n-          </PopupTrigger>\n-          <h3 style={styles.sectionHeader}>Application configuration</h3>\n-          {/* TODO(RW-5413): Populate the image list with server driven options. */}\n-          <Dropdown style={{width: '100%'}}\n-                    data-test-id='runtime-image-dropdown'\n-                    disabled={true}\n-                    options={[runtime.toolDockerImage]}\n-                    value={runtime.toolDockerImage}/>\n-          {/* Runtime customization: change detailed machine configuration options. */}\n-          <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n-          <FlexRow style={{justifyContent: 'space-between'}}>\n-            <div>\n-              <label htmlFor='runtime-cpu'\n-                     style={{marginRight: '.25rem'}}>CPUs</label>\n-              <Dropdown id='runtime-cpu'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show all CPU options.\n-                          fp.map('cpu'),\n-                          // In the event that was remove a machine type from our set of valid\n-                          // configs, we want to continue to allow rendering of the value here.\n-                          // Union also makes the CPU values unique.\n-                          fp.union([machineType.cpu]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.cpu}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-ram'\n-                     style={{marginRight: '.25rem'}}>RAM (GB)</label>\n-              <Dropdown id='runtime-ram'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show valid memory options as constrained by the currently selected CPU.\n-                          fp.filter(({cpu}) => cpu === machineType.cpu),\n-                          fp.map('memory'),\n-                          // See above comment on CPU union.\n-                          fp.union([machineType.memory]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.memory}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-disk'\n-                     style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-              <InputNumber id='runtime-disk'\n-                           disabled={true}\n-                           showButtons\n-                           decrementButtonClassName='p-button-secondary'\n-                           incrementButtonClassName='p-button-secondary'\n-                           value={masterDiskSize}\n-                           inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                           min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-            </div>\n-          </FlexRow>\n-          <FlexColumn style={{marginTop: '1rem'}}>\n-            <label htmlFor='runtime-compute'>Compute type</label>\n-            <Dropdown id='runtime-compute'\n-                      style={{width: '10rem'}}\n-                      disabled={true}\n-                      options={['Dataproc cluster', 'Standard VM']}\n-                      value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n-          </FlexColumn>\n-        </div>\n-        <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n-          <Button disabled={true}>Create</Button>\n-        </FlexRow>\n-        {activeRuntimeOp && <React.Fragment>\n-          <hr/>\n-          <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </React.Fragment>}\n-      </div>;\n-    }\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = selectedMachine || selectedDiskSize;\n \n-    componentWillUnmount() {\n-      this.aborter.abort();\n-    }\n-  });\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[currentRuntime.toolDockerImage]}\n+                value={currentRuntime.toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}  \n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector selectedMachine={selectedMachine} onChange={setselectedMachine} currentRuntime={currentRuntime}/>\n+        <DiskSizeSelection selectedDiskSize={selectedDiskSize} onChange={setSelectedDiskSize} currentRuntime={currentRuntime}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button \n+        disabled={status !== RuntimeStatus.Running || !runtimeChanged}\n+        onClick={async () => setRequestedRuntime({dataprocConfig: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d287f113ad0dcd7dfaadd7185b07ab24498599b"}, "originalPosition": 389}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA2NzcyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozOToyNlrOHbwNQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDozOToyNlrOHbwNQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2MzQyNA==", "bodyText": "The behavior of the panel will change before the final review.\n\nA confirm panel will show up after a runtime change is requested\nOnce confirmed the page will navigate back to the preview mode\n\nThat behavior mirrors what is happening in Terra UI", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498863424", "createdAt": "2020-10-02T14:39:26Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -6,25 +6,29 @@ import {Spinner} from 'app/components/spinners';\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n import colors, {addOpacity} from 'app/styles/colors';\n import {reactStyles, withCurrentWorkspace} from 'app/utils';\n-import {allMachineTypes, validLeonardoMachineTypes} from 'app/utils/machines';\n+import {allMachineTypes, validLeonardoMachineTypes, Machine} from 'app/utils/machines';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d287f113ad0dcd7dfaadd7185b07ab24498599b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA3MTAwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo0MDozMFrOHbwPfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo0MDozMFrOHbwPfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2Mzk5Ng==", "bodyText": "All runtime state changes and reads will go through the runtime store", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498863996", "createdAt": "2020-10-02T14:40:30Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -1,12 +1,13 @@\n import {leoRuntimesApi} from 'app/services/notebooks-swagger-fetch-clients';\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n import {isAbortError, reportError} from 'app/utils/errors';\n-import {Runtime, RuntimeConfigurationType, RuntimeStatus} from 'generated/fetch';\n+import {Runtime, RuntimeConfigurationType, RuntimeStatus, DataprocConfig} from 'generated/fetch';\n import {serverConfigStore} from './navigation';\n import {\n   markRuntimeOperationCompleteForWorkspace,\n-  updateRuntimeOpsStoreForWorkspaceNamespace\n-} from './stores';\n+  updateRuntimeOpsStoreForWorkspaceNamespace,\n+  runtimeStore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d287f113ad0dcd7dfaadd7185b07ab24498599b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA3NjYyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo0MTo1OVrOHbwS-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo0MTo1OVrOHbwS-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2NDg4OQ==", "bodyText": "Initialize the store if is not already populated with the runtime", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498864889", "createdAt": "2020-10-02T14:41:59Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,58 @@\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {useOnMount} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {Runtime} from 'generated';\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+// Hook used to manage runtime state.\n+// The runtime can be set to null to delete a runtime, or a new runtime config\n+// The LeoRuntimeInitializer could potentially be rolled into this code to completely manage\n+// all runtime state.\n+export const useRuntime = (workspaceNamespace) => {\n+  const runtime = useStore(runtimeStore);\n+  const [requestedRuntime, setRequestedRuntime] = useState<Runtime|null>()\n+\n+  useOnMount(() => {\n+    const getRuntime = async () => {\n+      runtime === undefined && runtimeStore.set(await runtimeApi().getRuntime(workspaceNamespace));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c4d36ff9cd9e1f78456d05eb5edb1c242ec7f9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA3ODE5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo0MjoyNVrOHbwUAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo0MjoyNVrOHbwUAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2NTE1NA==", "bodyText": "Allow for delete and update actions", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498865154", "createdAt": "2020-10-02T14:42:25Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,58 @@\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {useOnMount} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {Runtime} from 'generated';\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+// Hook used to manage runtime state.\n+// The runtime can be set to null to delete a runtime, or a new runtime config\n+// The LeoRuntimeInitializer could potentially be rolled into this code to completely manage\n+// all runtime state.\n+export const useRuntime = (workspaceNamespace) => {\n+  const runtime = useStore(runtimeStore);\n+  const [requestedRuntime, setRequestedRuntime] = useState<Runtime|null>()\n+\n+  useOnMount(() => {\n+    const getRuntime = async () => {\n+      runtime === undefined && runtimeStore.set(await runtimeApi().getRuntime(workspaceNamespace));\n+    }\n+    getRuntime();\n+  });\n+\n+  useEffect(() => {\n+    const action = requestedRuntime === null \n+    ? async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c4d36ff9cd9e1f78456d05eb5edb1c242ec7f9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzA4NTg2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo0NDoyNFrOHbwY3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNDo0NDoyNFrOHbwY3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg2NjM5OA==", "bodyText": "Return the runtime and a setter. Note that the setter first sets the state of a requested runtime. The actual store is only populated with null or data returned from the runtimeApi - not directly set by the developer.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r498866398", "createdAt": "2020-10-02T14:44:24Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,58 @@\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {useOnMount} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {Runtime} from 'generated';\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+// Hook used to manage runtime state.\n+// The runtime can be set to null to delete a runtime, or a new runtime config\n+// The LeoRuntimeInitializer could potentially be rolled into this code to completely manage\n+// all runtime state.\n+export const useRuntime = (workspaceNamespace) => {\n+  const runtime = useStore(runtimeStore);\n+  const [requestedRuntime, setRequestedRuntime] = useState<Runtime|null>()\n+\n+  useOnMount(() => {\n+    const getRuntime = async () => {\n+      runtime === undefined && runtimeStore.set(await runtimeApi().getRuntime(workspaceNamespace));\n+    }\n+    getRuntime();\n+  });\n+\n+  useEffect(() => {\n+    const action = requestedRuntime === null \n+    ? async () => {\n+        await runtimeApi().deleteRuntime(workspaceNamespace);\n+        await LeoRuntimeInitializer.initialize({workspaceNamespace, maxCreateCount: 0});\n+      }\n+    : async () => {\n+        await runtimeApi().deleteRuntime(workspaceNamespace);\n+        await LeoRuntimeInitializer.initialize({\n+          workspaceNamespace,\n+          dataprocConfig: runtime.dataprocConfig\n+        });\n+      }; \n+\n+    const runAction = async () => {\n+      await action();\n+      const currentRuntime = await runtimeApi().getRuntime(workspaceNamespace);\n+      runtimeStore.set(currentRuntime);\n+    }\n+\n+    requestedRuntime !== undefined && !fp.equals(requestedRuntime, runtime) && runAction();\n+  }, [requestedRuntime]);\n+\n+\n+\n+  return [runtime, setRequestedRuntime]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0c4d36ff9cd9e1f78456d05eb5edb1c242ec7f9"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzAwNTExOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTowODo0MFrOHdMRRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTowODo0MFrOHdMRRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3MTc4Mg==", "bodyText": "This hook now only manages setting a new custom runtime config", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500371782", "createdAt": "2020-10-06T15:08:40Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,93 @@\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import {useOnMount} from 'app/utils';\n+import {switchCase} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+export type RuntimeStatusRequest = 'Delete';\n+\n+export const RuntimeStateRequest = {\n+  Delete: 'Delete' as RuntimeStatusRequest\n+};\n+\n+// useRuntime hook is a simple hook to populate the runtime store.\n+// This is only used by other runtime hooks\n+const useRuntime = (currentWorkspaceNamespace) => {\n+  useOnMount(() => {\n+    const getRuntime = async() => {\n+      const leoRuntime = await runtimeApi().getRuntime(currentWorkspaceNamespace);\n+      runtimeStore.set({\n+        workspaceNamespace: currentWorkspaceNamespace,\n+        runtime: leoRuntime\n+      });\n+    };\n+    getRuntime();\n+  });\n+};\n+\n+// useRuntimeState hook can be used to change the state of the runtime\n+// Only 'Delete' is supported at the moment\n+export const useRuntimeState = (currentWorkspaceNamespace): [RuntimeStatus, Function]  => {\n+  const [requestedRuntimeState, setRuntimeState] = useState<RuntimeStatusRequest>();\n+  const {runtime} = useStore(runtimeStore);\n+  useRuntime(currentWorkspaceNamespace);\n+\n+  useEffect(() => {\n+    // Additional state changes can be put here\n+    if (!!requestedRuntimeState) {\n+      switchCase(requestedRuntimeState,\n+        [RuntimeStateRequest.Delete, async() => {\n+          await runtimeApi().deleteRuntime(currentWorkspaceNamespace);\n+          await LeoRuntimeInitializer.initialize({workspaceNamespace: currentWorkspaceNamespace, maxCreateCount: 0});\n+        }]);\n+    }\n+\n+  }, [requestedRuntimeState]);\n+\n+  return [runtime.status, setRuntimeState];\n+};\n+\n+// useCustomRuntime Hook can request a new runtime config\n+// The LeoRuntimeInitializer could potentially be rolled into this code to completely manage\n+// all runtime state.\n+export const useCustomRuntime = (currentWorkspaceNamespace): [Runtime, Function] => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzAxMDMzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTowOTozMFrOHdMUnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTowOTozMFrOHdMUnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM3MjYzOQ==", "bodyText": "This hook can be used to change the state of an existing runtime (e.g. delete only, pause, resume). This currently only handles \"delete\".", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500372639", "createdAt": "2020-10-06T15:09:30Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,93 @@\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import {useOnMount} from 'app/utils';\n+import {switchCase} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+export type RuntimeStatusRequest = 'Delete';\n+\n+export const RuntimeStateRequest = {\n+  Delete: 'Delete' as RuntimeStatusRequest\n+};\n+\n+// useRuntime hook is a simple hook to populate the runtime store.\n+// This is only used by other runtime hooks\n+const useRuntime = (currentWorkspaceNamespace) => {\n+  useOnMount(() => {\n+    const getRuntime = async() => {\n+      const leoRuntime = await runtimeApi().getRuntime(currentWorkspaceNamespace);\n+      runtimeStore.set({\n+        workspaceNamespace: currentWorkspaceNamespace,\n+        runtime: leoRuntime\n+      });\n+    };\n+    getRuntime();\n+  });\n+};\n+\n+// useRuntimeState hook can be used to change the state of the runtime\n+// Only 'Delete' is supported at the moment\n+export const useRuntimeState = (currentWorkspaceNamespace): [RuntimeStatus, Function]  => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ2OTMzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0NDozNlrOHdQxzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0NDozNlrOHdQxzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NTY0Nw==", "bodyText": "Can you type the Function here and above? Presumably it's a setter for the Runtime.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500445647", "createdAt": "2020-10-06T16:44:36Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,93 @@\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import {useOnMount} from 'app/utils';\n+import {switchCase} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+export type RuntimeStatusRequest = 'Delete';\n+\n+export const RuntimeStateRequest = {\n+  Delete: 'Delete' as RuntimeStatusRequest\n+};\n+\n+// useRuntime hook is a simple hook to populate the runtime store.\n+// This is only used by other runtime hooks\n+const useRuntime = (currentWorkspaceNamespace) => {\n+  useOnMount(() => {\n+    const getRuntime = async() => {\n+      const leoRuntime = await runtimeApi().getRuntime(currentWorkspaceNamespace);\n+      runtimeStore.set({\n+        workspaceNamespace: currentWorkspaceNamespace,\n+        runtime: leoRuntime\n+      });\n+    };\n+    getRuntime();\n+  });\n+};\n+\n+// useRuntimeState hook can be used to change the state of the runtime\n+// Only 'Delete' is supported at the moment\n+export const useRuntimeState = (currentWorkspaceNamespace): [RuntimeStatus, Function]  => {\n+  const [requestedRuntimeState, setRuntimeState] = useState<RuntimeStatusRequest>();\n+  const {runtime} = useStore(runtimeStore);\n+  useRuntime(currentWorkspaceNamespace);\n+\n+  useEffect(() => {\n+    // Additional state changes can be put here\n+    if (!!requestedRuntimeState) {\n+      switchCase(requestedRuntimeState,\n+        [RuntimeStateRequest.Delete, async() => {\n+          await runtimeApi().deleteRuntime(currentWorkspaceNamespace);\n+          await LeoRuntimeInitializer.initialize({workspaceNamespace: currentWorkspaceNamespace, maxCreateCount: 0});\n+        }]);\n+    }\n+\n+  }, [requestedRuntimeState]);\n+\n+  return [runtime.status, setRuntimeState];\n+};\n+\n+// useCustomRuntime Hook can request a new runtime config\n+// The LeoRuntimeInitializer could potentially be rolled into this code to completely manage\n+// all runtime state.\n+export const useCustomRuntime = (currentWorkspaceNamespace): [Runtime, Function] => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ3MzI4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0NTozNVrOHdQ0Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0NTozNVrOHdQ0Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NjI3NQ==", "bodyText": "nit: variable names: runtimeStatus or just status as the prefix?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500446275", "createdAt": "2020-10-06T16:45:35Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,93 @@\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import {useOnMount} from 'app/utils';\n+import {switchCase} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+export type RuntimeStatusRequest = 'Delete';\n+\n+export const RuntimeStateRequest = {\n+  Delete: 'Delete' as RuntimeStatusRequest\n+};\n+\n+// useRuntime hook is a simple hook to populate the runtime store.\n+// This is only used by other runtime hooks\n+const useRuntime = (currentWorkspaceNamespace) => {\n+  useOnMount(() => {\n+    const getRuntime = async() => {\n+      const leoRuntime = await runtimeApi().getRuntime(currentWorkspaceNamespace);\n+      runtimeStore.set({\n+        workspaceNamespace: currentWorkspaceNamespace,\n+        runtime: leoRuntime\n+      });\n+    };\n+    getRuntime();\n+  });\n+};\n+\n+// useRuntimeState hook can be used to change the state of the runtime\n+// Only 'Delete' is supported at the moment\n+export const useRuntimeState = (currentWorkspaceNamespace): [RuntimeStatus, Function]  => {\n+  const [requestedRuntimeState, setRuntimeState] = useState<RuntimeStatusRequest>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzQ4MDM0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0NzozOVrOHdQ4_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo0NzozOVrOHdQ4_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ0NzQ4NQ==", "bodyText": "I would just take the return value from LeoRuntimeInitializer.initializer() instead. It should be equivalent", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500447485", "createdAt": "2020-10-06T16:47:39Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,93 @@\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import {useOnMount} from 'app/utils';\n+import {switchCase} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+export type RuntimeStatusRequest = 'Delete';\n+\n+export const RuntimeStateRequest = {\n+  Delete: 'Delete' as RuntimeStatusRequest\n+};\n+\n+// useRuntime hook is a simple hook to populate the runtime store.\n+// This is only used by other runtime hooks\n+const useRuntime = (currentWorkspaceNamespace) => {\n+  useOnMount(() => {\n+    const getRuntime = async() => {\n+      const leoRuntime = await runtimeApi().getRuntime(currentWorkspaceNamespace);\n+      runtimeStore.set({\n+        workspaceNamespace: currentWorkspaceNamespace,\n+        runtime: leoRuntime\n+      });\n+    };\n+    getRuntime();\n+  });\n+};\n+\n+// useRuntimeState hook can be used to change the state of the runtime\n+// Only 'Delete' is supported at the moment\n+export const useRuntimeState = (currentWorkspaceNamespace): [RuntimeStatus, Function]  => {\n+  const [requestedRuntimeState, setRuntimeState] = useState<RuntimeStatusRequest>();\n+  const {runtime} = useStore(runtimeStore);\n+  useRuntime(currentWorkspaceNamespace);\n+\n+  useEffect(() => {\n+    // Additional state changes can be put here\n+    if (!!requestedRuntimeState) {\n+      switchCase(requestedRuntimeState,\n+        [RuntimeStateRequest.Delete, async() => {\n+          await runtimeApi().deleteRuntime(currentWorkspaceNamespace);\n+          await LeoRuntimeInitializer.initialize({workspaceNamespace: currentWorkspaceNamespace, maxCreateCount: 0});\n+        }]);\n+    }\n+\n+  }, [requestedRuntimeState]);\n+\n+  return [runtime.status, setRuntimeState];\n+};\n+\n+// useCustomRuntime Hook can request a new runtime config\n+// The LeoRuntimeInitializer could potentially be rolled into this code to completely manage\n+// all runtime state.\n+export const useCustomRuntime = (currentWorkspaceNamespace): [Runtime, Function] => {\n+  const {runtime, workspaceNamespace} = useStore(runtimeStore);\n+  const [requestedRuntime, setRequestedRuntime] = useState<Runtime>();\n+  useRuntime(currentWorkspaceNamespace);\n+\n+  useEffect(() => {\n+    const runAction = async() => {\n+      await runtimeApi().deleteRuntime(currentWorkspaceNamespace);\n+      await LeoRuntimeInitializer.initialize({\n+        workspaceNamespace,\n+        runtime: requestedRuntime\n+      });\n+\n+      const currentRuntime = await runtimeApi().getRuntime(currentWorkspaceNamespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU5NjI1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxNzoyNlrOHdSBhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxNzoyNlrOHdSBhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjA1NA==", "bodyText": "Please add a comment about cleanup here. I was going to suggest that you should create an aborter and provide the abort callback as the useEffect cleanup function - however, I now realize there is probably a desire to keep this async operation going, even if you navigate away.\nIn my head, persistent operations would have been kept alive by the runtimeOperationStore rather than as a sole side effect of component usage - so that future components can still attach to said pending operation, and avoid generating duplicate work -  but I'm not sure if the current pattern is amenable to this.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500466054", "createdAt": "2020-10-06T17:17:26Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,93 @@\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import {useOnMount} from 'app/utils';\n+import {switchCase} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+export type RuntimeStatusRequest = 'Delete';\n+\n+export const RuntimeStateRequest = {\n+  Delete: 'Delete' as RuntimeStatusRequest\n+};\n+\n+// useRuntime hook is a simple hook to populate the runtime store.\n+// This is only used by other runtime hooks\n+const useRuntime = (currentWorkspaceNamespace) => {\n+  useOnMount(() => {\n+    const getRuntime = async() => {\n+      const leoRuntime = await runtimeApi().getRuntime(currentWorkspaceNamespace);\n+      runtimeStore.set({\n+        workspaceNamespace: currentWorkspaceNamespace,\n+        runtime: leoRuntime\n+      });\n+    };\n+    getRuntime();\n+  });\n+};\n+\n+// useRuntimeState hook can be used to change the state of the runtime\n+// Only 'Delete' is supported at the moment\n+export const useRuntimeState = (currentWorkspaceNamespace): [RuntimeStatus, Function]  => {\n+  const [requestedRuntimeState, setRuntimeState] = useState<RuntimeStatusRequest>();\n+  const {runtime} = useStore(runtimeStore);\n+  useRuntime(currentWorkspaceNamespace);\n+\n+  useEffect(() => {\n+    // Additional state changes can be put here\n+    if (!!requestedRuntimeState) {\n+      switchCase(requestedRuntimeState,\n+        [RuntimeStateRequest.Delete, async() => {\n+          await runtimeApi().deleteRuntime(currentWorkspaceNamespace);\n+          await LeoRuntimeInitializer.initialize({workspaceNamespace: currentWorkspaceNamespace, maxCreateCount: 0});\n+        }]);\n+    }\n+\n+  }, [requestedRuntimeState]);\n+\n+  return [runtime.status, setRuntimeState];\n+};\n+\n+// useCustomRuntime Hook can request a new runtime config\n+// The LeoRuntimeInitializer could potentially be rolled into this code to completely manage\n+// all runtime state.\n+export const useCustomRuntime = (currentWorkspaceNamespace): [Runtime, Function] => {\n+  const {runtime, workspaceNamespace} = useStore(runtimeStore);\n+  const [requestedRuntime, setRequestedRuntime] = useState<Runtime>();\n+  useRuntime(currentWorkspaceNamespace);\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzU5OTc1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxODoyNlrOHdSD2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxODoyNlrOHdSD2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjY0OQ==", "bodyText": "nit: merge import with next line", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500466649", "createdAt": "2020-10-06T17:18:26Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,93 @@\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import {useOnMount} from 'app/utils';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYxMDQ3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMToxMFrOHdSKeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMToxMFrOHdSKeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2ODM0NA==", "bodyText": "opt: I think I'd prefer to just use the React library directly in this case. useOnMount is more semantically understandable, but it adds a layer of redirection which is not portable outside of our immediate codebase, and doesn't really get around the reader needing to know what useEffect does.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500468344", "createdAt": "2020-10-06T17:21:10Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/index.tsx", "diffHunk": "@@ -565,6 +565,10 @@ export const useToggle = (): [boolean, Function] => {\n   return [state, setState];\n };\n \n+export const useOnMount = (fn: Function) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYxNDIyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMjoxMFrOHdSMxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMjoxMFrOHdSMxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2ODkzMw==", "bodyText": "rm?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500468933", "createdAt": "2020-10-06T17:22:10Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -71,186 +73,201 @@ export interface Props {\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n+\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>;\n+};\n+\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = RuntimeStatus.Unknown, toolDockerImage = null, dataprocConfig = {}, gceConfig = {}} = currentRuntime || {};\n+  const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n+  const selectedMachineType = selectedMachine && selectedMachine.name;\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n+  useOnMount(() => {\n+    const aborter = new AbortController();\n+    const {namespace} = workspace;\n+    const loadRuntime = async() => {\n+        // TODO(RW-5420): Centralize a runtimeStore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYxNTYyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMjozMlrOHdSNpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMjozMlrOHdSNpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2OTE1OA==", "bodyText": "rm these commented out disabled lines - here and throughout", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500469158", "createdAt": "2020-10-06T17:22:32Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -71,186 +73,201 @@ export interface Props {\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n+\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYxNzg5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMzoxNFrOHdSPNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyMzoxNFrOHdSPNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2OTU1OQ==", "bodyText": "I wasn't expecting to see a get call here - shouldn't this just be using the store now?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500469559", "createdAt": "2020-10-06T17:23:14Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -71,186 +73,201 @@ export interface Props {\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n+\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>;\n+};\n+\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = RuntimeStatus.Unknown, toolDockerImage = null, dataprocConfig = {}, gceConfig = {}} = currentRuntime || {};\n+  const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n+  const selectedMachineType = selectedMachine && selectedMachine.name;\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n+  useOnMount(() => {\n+    const aborter = new AbortController();\n+    const {namespace} = workspace;\n+    const loadRuntime = async() => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n       try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n+        const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYzNTEyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoyNzozN1rOHdSabQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNjo0Nzo1N1rOHd8epg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MjQyOQ==", "bodyText": "opt: This leading \"_\" is not a naming convention I've seen anywhere else in our codebase, though I see why you're using it here.\nRelatedly, I think the property setter has too many side effects. I might prefer a normal method.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500472429", "createdAt": "2020-10-06T17:27:37Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -134,9 +138,22 @@ export class LeoRuntimeInitializer {\n   private resumeCount = 0;\n   private serverErrorCount = 0;\n   private initializeStartTime?: number;\n+  private runtime?: Runtime;\n   // The latest runtime retrieved from getRuntime. If the last getRuntime call returned a NOT_FOUND\n   // response, this will be null.\n-  private currentRuntime?: Runtime;\n+  private _currentRuntime?: Runtime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyNTM1OQ==", "bodyText": "What does \"opt\" mean in your commenting?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501125359", "createdAt": "2020-10-07T15:54:53Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -134,9 +138,22 @@ export class LeoRuntimeInitializer {\n   private resumeCount = 0;\n   private serverErrorCount = 0;\n   private initializeStartTime?: number;\n+  private runtime?: Runtime;\n   // The latest runtime retrieved from getRuntime. If the last getRuntime call returned a NOT_FOUND\n   // response, this will be null.\n-  private currentRuntime?: Runtime;\n+  private _currentRuntime?: Runtime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MjQyOQ=="}, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTE2MTYzOA==", "bodyText": "Sorry, my review short-hand (pasting this in from a previous explanation):\nnit: Minor comment on style/spelling. I use this to communicate that this comment is not critical to approval and should generally be dealt with at a lower priority than other comments. If resolving the comment results in tons of unanticipated work or other complications, it can probably be abandoned.\nopt: Optional. You can use your judgement to accept/reject this comment (of course, this is true for any PR comment, but here I'm conveying my own expectations). It is either an alternative approach you could consider, or it is based on personal subjective opinion - as opposed to agreed upon style guide / best practices.\nFYI: no action required, just making a comment", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501161638", "createdAt": "2020-10-07T16:47:57Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -134,9 +138,22 @@ export class LeoRuntimeInitializer {\n   private resumeCount = 0;\n   private serverErrorCount = 0;\n   private initializeStartTime?: number;\n+  private runtime?: Runtime;\n   // The latest runtime retrieved from getRuntime. If the last getRuntime call returned a NOT_FOUND\n   // response, this will be null.\n-  private currentRuntime?: Runtime;\n+  private _currentRuntime?: Runtime;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3MjQyOQ=="}, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY3MDExOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/stores.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozNjozOFrOHdSwLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMzowMTozNVrOHdyKiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3Nzk5OQ==", "bodyText": "I'm not sure why runtime would start as being defined with a stub value, and in particular why it would be set to dataprocConfig. There should specifically be no runtime when we are not in a workspace context, which is the initial state. Was this for testing purposes? If so, I'd direct you here: \n  \n    \n      workbench/ui/src/test.ts\n    \n    \n         Line 30\n      in\n      f272563\n    \n    \n    \n    \n\n        \n          \n           beforeEach(() => {", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500477999", "createdAt": "2020-10-06T17:36:38Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -73,11 +73,11 @@ export const abortRuntimeOperationForWorkspace = (workspaceNamespace: string) =>\n \n // runtime store states: undefined(initial state) -> Runtime (user selected) <--> null (delete only - no recreate)\n interface RuntimeStore {\n-  workspaceNamespace: string;\n+  workspaceNamespace: string | null | undefined;\n   runtime: Runtime | null | undefined;\n }\n \n-export const runtimeStore = atom<RuntimeStore>(undefined);\n+export const runtimeStore = atom<RuntimeStore>({workspaceNamespace: undefined, runtime: { dataprocConfig: {}}});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk5MjY0OA==", "bodyText": "I was running into some typing issues earlier. I updated this to be undefined.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500992648", "createdAt": "2020-10-07T13:01:35Z", "author": {"login": "petesantos"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -73,11 +73,11 @@ export const abortRuntimeOperationForWorkspace = (workspaceNamespace: string) =>\n \n // runtime store states: undefined(initial state) -> Runtime (user selected) <--> null (delete only - no recreate)\n interface RuntimeStore {\n-  workspaceNamespace: string;\n+  workspaceNamespace: string | null | undefined;\n   runtime: Runtime | null | undefined;\n }\n \n-export const runtimeStore = atom<RuntimeStore>(undefined);\n+export const runtimeStore = atom<RuntimeStore>({workspaceNamespace: undefined, runtime: { dataprocConfig: {}}});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3Nzk5OQ=="}, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY3NzgxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozODo1MlrOHdS1Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMjowMzoxMVrOHeHGUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3OTI4Mw==", "bodyText": "nit: ideally the default would follow this logic, but if that requires a lot of code changes you can just leave it as is (GCE will be launched soon, so we probably won't need to worry about this):\n\n  \n    \n      workbench/ui/src/app/utils/leo-runtime-initializer.tsx\n    \n    \n        Lines 194 to 198\n      in\n      f272563\n    \n    \n    \n    \n\n        \n          \n           if (serverConfigStore.getValue().enableGceAsNotebookRuntimeDefault) { \n        \n\n        \n          \n             runtime = {...runtimePresets.generalAnalysis.runtimeTemplate}; \n        \n\n        \n          \n           } else { \n        \n\n        \n          \n             runtime = {...runtimePresets.legacyGeneralAnalysis.runtimeTemplate}; \n        \n\n        \n          \n           }", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500479283", "createdAt": "2020-10-06T17:38:52Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -22,6 +23,7 @@ const DEFAULT_MAX_DELETE_COUNT = 2;\n const DEFAULT_MAX_RESUME_COUNT = 2;\n // We allow a certain # of server errors to occur before we error-out of the initialization flow.\n const DEFAULT_MAX_SERVER_ERROR_COUNT = 10;\n+const DEFAULT_RUNTIME_CONFIG = runtimePresets.generalAnalysis.runtimeTemplate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzNTYzNA==", "bodyText": "Don't bother with this anymore, I don't think, since I've already started enabling GCE by default. The way you have it now should work fine.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501335634", "createdAt": "2020-10-07T22:03:11Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -22,6 +23,7 @@ const DEFAULT_MAX_DELETE_COUNT = 2;\n const DEFAULT_MAX_RESUME_COUNT = 2;\n // We allow a certain # of server errors to occur before we error-out of the initialization flow.\n const DEFAULT_MAX_SERVER_ERROR_COUNT = 10;\n+const DEFAULT_RUNTIME_CONFIG = runtimePresets.generalAnalysis.runtimeTemplate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3OTI4Mw=="}, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzcwMzI5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo0NTo1MlrOHdTE-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzo0NTo1MlrOHdTE-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ4MzMyMw==", "bodyText": "I'm confused as to why these two values are needed - can you just have a single enum?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500483323", "createdAt": "2020-10-06T17:45:52Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,93 @@\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import {useOnMount} from 'app/utils';\n+import {switchCase} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+export type RuntimeStatusRequest = 'Delete';\n+\n+export const RuntimeStateRequest = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzg4OTAxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODozMToyOFrOHdU07Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODozMToyOFrOHdU07Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxMTk4MQ==", "bodyText": "remove commented out code", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500511981", "createdAt": "2020-10-06T18:31:28Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -71,186 +73,201 @@ export interface Props {\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzkzMTYxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0MjoxMVrOHdVOQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0MjoxMVrOHdVOQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUxODQ2NA==", "bodyText": "If you're using the CurrentRuntimeStore to get information about the runtime, then loading, error, etc. state should become unnecessary; instead you'd want to look at whether the runtime store is null / undefined", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500518464", "createdAt": "2020-10-06T18:42:11Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -71,186 +73,201 @@ export interface Props {\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n+\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>;\n+};\n+\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = RuntimeStatus.Unknown, toolDockerImage = null, dataprocConfig = {}, gceConfig = {}} = currentRuntime || {};\n+  const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n+  const selectedMachineType = selectedMachine && selectedMachine.name;\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n+  useOnMount(() => {\n+    const aborter = new AbortController();\n+    const {namespace} = workspace;\n+    const loadRuntime = async() => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n       try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n+        const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});\n+        updateRuntimeOpsStoreForWorkspaceNamespace(namespace, {\n           promise: promise,\n           operation: 'get',\n-          aborter: this.aborter\n+          aborter: aborter\n         });\n-        runtime = await promise;\n       } catch (e) {\n         // 404 is expected if the runtime doesn't exist, represent this as a null\n         // runtime rather than an error mode.\n         if (e.status !== 404) {\n-          error = true;\n+          setError(true);\n         }\n+      } finally {\n+        setLoading(false);\n       }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n-\n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+      markRuntimeOperationCompleteForWorkspace(namespace);\n+    };\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n-\n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+    loadRuntime();\n+    return () => aborter.abort();\n+  });\n \n-      const isDataproc = !!runtime.dataprocConfig;\n+  if (loading) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk0OTIwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0NzowOVrOHdVZGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0NzowOVrOHdVZGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMTI0Mw==", "bodyText": "ty for factoring these out!", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500521243", "createdAt": "2020-10-06T18:47:09Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -71,186 +73,201 @@ export interface Props {\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk1MjY2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo0ODoxMFrOHdVbVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNTo0ODowOVrOHd5-Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMTgxNQ==", "bodyText": "Won't this still be true if the user sets it to a different machine or disk size and then sets it back to what it was before?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500521815", "createdAt": "2020-10-06T18:48:10Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -71,186 +73,201 @@ export interface Props {\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n+\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>;\n+};\n+\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = RuntimeStatus.Unknown, toolDockerImage = null, dataprocConfig = {}, gceConfig = {}} = currentRuntime || {};\n+  const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n+  const selectedMachineType = selectedMachine && selectedMachine.name;\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n+  useOnMount(() => {\n+    const aborter = new AbortController();\n+    const {namespace} = workspace;\n+    const loadRuntime = async() => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n       try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n+        const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});\n+        updateRuntimeOpsStoreForWorkspaceNamespace(namespace, {\n           promise: promise,\n           operation: 'get',\n-          aborter: this.aborter\n+          aborter: aborter\n         });\n-        runtime = await promise;\n       } catch (e) {\n         // 404 is expected if the runtime doesn't exist, represent this as a null\n         // runtime rather than an error mode.\n         if (e.status !== 404) {\n-          error = true;\n+          setError(true);\n         }\n+      } finally {\n+        setLoading(false);\n       }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n-\n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+      markRuntimeOperationCompleteForWorkspace(namespace);\n+    };\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n-\n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+    loadRuntime();\n+    return () => aborter.abort();\n+  });\n \n-      const isDataproc = !!runtime.dataprocConfig;\n+  if (loading) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (error) {\n+    return <div>Error loading compute configuration</div>;\n+  } else if (!currentRuntime) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n \n-      let masterMachineName;\n-      let masterDiskSize;\n-      if (isDataproc) {\n-        masterMachineName = runtime.dataprocConfig.masterMachineType;\n-        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n-      } else {\n-        masterMachineName = runtime.gceConfig.machineType;\n-        masterDiskSize = runtime.gceConfig.bootDiskSize;\n-      }\n-      const machineType = allMachineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = selectedMachine || selectedDiskSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTEyMDUyNw==", "bodyText": "The machine and disk selectors will only update with a value if the value has changed from the initial value, otherwise they will be set to null. I changed the name to updatedMachine and updatedDiskSize - does that make it any clearer in the code?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501120527", "createdAt": "2020-10-07T15:48:09Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -71,186 +73,201 @@ export interface Props {\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, selectedMachine, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterMachineName = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const initialMachineType = fp.find(({name}) => name === masterMachineName, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = selectedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                // disabled={true}\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n+\n+const DiskSizeSelection = ({onChange, selectedDiskSize, currentRuntime}) => {\n+  const {dataprocConfig, gceConfig} = currentRuntime;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                //  disabled={true}\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={selectedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>;\n+};\n+\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [loading, setLoading] = useState(true);\n+  const [error, setError] = useState(false);\n+  const [selectedDiskSize, setSelectedDiskSize] = useState(null);\n+  const [selectedMachine, setselectedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = RuntimeStatus.Unknown, toolDockerImage = null, dataprocConfig = {}, gceConfig = {}} = currentRuntime || {};\n+  const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n+  const selectedMachineType = selectedMachine && selectedMachine.name;\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n+  useOnMount(() => {\n+    const aborter = new AbortController();\n+    const {namespace} = workspace;\n+    const loadRuntime = async() => {\n+        // TODO(RW-5420): Centralize a runtimeStore.\n       try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n+        const promise = runtimeApi().getRuntime(namespace, {signal: aborter.signal});\n+        updateRuntimeOpsStoreForWorkspaceNamespace(namespace, {\n           promise: promise,\n           operation: 'get',\n-          aborter: this.aborter\n+          aborter: aborter\n         });\n-        runtime = await promise;\n       } catch (e) {\n         // 404 is expected if the runtime doesn't exist, represent this as a null\n         // runtime rather than an error mode.\n         if (e.status !== 404) {\n-          error = true;\n+          setError(true);\n         }\n+      } finally {\n+        setLoading(false);\n       }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n-\n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n+      markRuntimeOperationCompleteForWorkspace(namespace);\n+    };\n \n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n-\n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n+    loadRuntime();\n+    return () => aborter.abort();\n+  });\n \n-      const isDataproc = !!runtime.dataprocConfig;\n+  if (loading) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (error) {\n+    return <div>Error loading compute configuration</div>;\n+  } else if (!currentRuntime) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n \n-      let masterMachineName;\n-      let masterDiskSize;\n-      if (isDataproc) {\n-        masterMachineName = runtime.dataprocConfig.masterMachineType;\n-        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n-      } else {\n-        masterMachineName = runtime.gceConfig.machineType;\n-        masterDiskSize = runtime.gceConfig.bootDiskSize;\n-      }\n-      const machineType = allMachineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = selectedMachine || selectedDiskSize;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyMTgxNQ=="}, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzk5MDE1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1ODoxNVrOHdVyXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxODo1ODoxNVrOHdVyXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyNzcwOA==", "bodyText": "Could you explain how this is enforced?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r500527708", "createdAt": "2020-10-06T18:58:15Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/runtime-utils.ts", "diffHunk": "@@ -0,0 +1,93 @@\n+import {runtimeApi} from 'app/services/swagger-fetch-clients';\n+import {useOnMount} from 'app/utils';\n+import {switchCase} from 'app/utils';\n+import {\n+  LeoRuntimeInitializer,\n+} from 'app/utils/leo-runtime-initializer';\n+import {\n+  runtimeStore,\n+  useStore\n+} from 'app/utils/stores';\n+import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+\n+import * as React from 'react';\n+\n+const {useState, useEffect} = React;\n+\n+export type RuntimeStatusRequest = 'Delete';\n+\n+export const RuntimeStateRequest = {\n+  Delete: 'Delete' as RuntimeStatusRequest\n+};\n+\n+// useRuntime hook is a simple hook to populate the runtime store.\n+// This is only used by other runtime hooks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4de215adb3bc184315f878aced35df538138c996"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTExOTQzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0OToyMFrOHeGvMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo0OToyMFrOHeGvMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMyOTcxNQ==", "bodyText": "This is interesting - I'm surprised we haven't had to use this previously. Is it specifically critical for hooks etc?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501329715", "createdAt": "2020-10-07T21:49:20Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -21,20 +24,27 @@ describe('RuntimePanel', () => {\n     return mount(<RuntimePanel {...props}/>);\n   };\n \n+  const handleUseEffect = async (component) => {\n+    await act(async () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761a0f8626344adbca7eb3288fe3ffbd898be14c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTEyNTY5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo1MToyMlrOHeGy6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo1MToyMlrOHeGy6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDY2NA==", "bodyText": "I'm failing to understand the purpose of this line. Is this just a cute way to accept a parameter (component) which may or may not be a promise, and if it is a promise - wait for it to complete?", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501330664", "createdAt": "2020-10-07T21:51:22Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -21,20 +24,27 @@ describe('RuntimePanel', () => {\n     return mount(<RuntimePanel {...props}/>);\n   };\n \n+  const handleUseEffect = async (component) => {\n+    await act(async () => {\n+      await Promise.resolve(component);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761a0f8626344adbca7eb3288fe3ffbd898be14c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTEyNzE3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo1MTo1MVrOHeGz0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo1MTo1MVrOHeGz0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMDg5Nw==", "bodyText": "opt: Consider putting this into our test-utils and adding some documentation on usage", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501330897", "createdAt": "2020-10-07T21:51:51Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -21,20 +24,27 @@ describe('RuntimePanel', () => {\n     return mount(<RuntimePanel {...props}/>);\n   };\n \n+  const handleUseEffect = async (component) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761a0f8626344adbca7eb3288fe3ffbd898be14c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTEzNDU1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/index.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo1NDozMVrOHeG4Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTo1NDozMVrOHeG4Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMzMjA1NQ==", "bodyText": "Please document this. In particular, it seems to require that fn return a promise - which cannot be inferred from the method name or type signature.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501332055", "createdAt": "2020-10-07T21:54:31Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/index.tsx", "diffHunk": "@@ -565,6 +565,15 @@ export const useToggle = (): [boolean, Function] => {\n   return [state, setState];\n };\n \n+export const withErrorHandling = fp.curry((handler, fn) => async(...args) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761a0f8626344adbca7eb3288fe3ffbd898be14c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTQ2MDMyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoxNzoyNFrOHeJ2nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoxNzoyNFrOHeJ2nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM4MDc2NQ==", "bodyText": "Could you drop this for now? It is flashing in and out of existence on the page, which is quite jarring.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501380765", "createdAt": "2020-10-08T00:17:24Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -67,190 +64,165 @@ const ActiveRuntimeOp = ({operation, workspaceNamespace}) => {\n };\n \n export interface Props {\n-  runtimeOps: RuntimeOpsStore;\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = updatedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={updatedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>;\n+};\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(null);\n+  const [updatedMachine, setUpdatedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n+\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = RuntimeStatus.Unknown, toolDockerImage = '', dataprocConfig = null, gceConfig = {}} = currentRuntime || {};\n+  const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n+  const updatedMachineType = updatedMachine && updatedMachine.name;\n+\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = updatedMachine || updatedDiskSize;\n+\n+  if (currentRuntime === undefined) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (currentRuntime === null) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[toolDockerImage]}\n+                value={toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}\n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector updatedMachine={updatedMachine} onChange={setUpdatedMachine} masterMachineType={masterMachineType}/>\n+        <DiskSizeSelection updatedDiskSize={updatedDiskSize} onChange={setUpdatedDiskSize} masterDiskSize={masterDiskSize}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button\n+        aria-label={currentRuntime ? 'Update' : 'Create'}\n+        disabled={status !== RuntimeStatus.Running || !runtimeChanged}\n+        onClick={() =>\n+          setRequestedRuntime({dataprocConfig: {\n+            masterMachineType: updatedMachineType || masterMachineType,\n+            masterDiskSize: updatedDiskSize || masterDiskSize\n+          }})\n         }\n-      }\n-      markRuntimeOperationCompleteForWorkspace(this.props.workspace.namespace);\n-      this.setState({\n-        runtime,\n-        error,\n-        loading: false\n-      });\n-    }\n-\n-    render() {\n-      const {runtimeOps, workspace} = this.props;\n-      const {loading, error, runtime} = this.state;\n-\n-      const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n-\n-      if (loading) {\n-        return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n-      } else if (error) {\n-        return <div>Error loading compute configuration</div>;\n-      } else if (!runtime) {\n-        // TODO(RW-5591): Create runtime page goes here.\n-        return <React.Fragment>\n-          <div>No runtime exists yet</div>\n-          {activeRuntimeOp && <hr/>}\n-          {activeRuntimeOp && <div>\n-            <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-          </div>}\n-        </React.Fragment>;\n-      }\n-\n-      const isDataproc = !!runtime.dataprocConfig;\n-\n-      let masterMachineName;\n-      let masterDiskSize;\n-      if (isDataproc) {\n-        masterMachineName = runtime.dataprocConfig.masterMachineType;\n-        masterDiskSize = runtime.dataprocConfig.masterDiskSize;\n-      } else {\n-        masterMachineName = runtime.gceConfig.machineType;\n-        masterDiskSize = runtime.gceConfig.bootDiskSize;\n-      }\n-      const machineType = allMachineTypes.find(({name}) => name === masterMachineName) || defaultMachineType;\n-\n-      return <div data-test-id='runtime-panel'>\n-        <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n-        <div>\n-          Your analysis environment consists of an application and compute resources.\n-          Your cloud environment is unique to this workspace and not shared with other users.\n-        </div>\n-        {/* TODO(RW-5419): Cost estimates go here. */}\n-        <div style={styles.controlSection}>\n-          {/* Recommended runtime: pick from default templates or change the image. */}\n-          <PopupTrigger side='bottom'\n-                        closeOnClick\n-                        content={\n-                          <React.Fragment>\n-                            <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n-                            <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n-                          </React.Fragment>\n-                        }>\n-            <Clickable data-test-id='runtime-presets-menu'\n-                       disabled={true}>\n-              Recommended environments <ClrIcon shape='caret down'/>\n-            </Clickable>\n-          </PopupTrigger>\n-          <h3 style={styles.sectionHeader}>Application configuration</h3>\n-          {/* TODO(RW-5413): Populate the image list with server driven options. */}\n-          <Dropdown style={{width: '100%'}}\n-                    data-test-id='runtime-image-dropdown'\n-                    disabled={true}\n-                    options={[runtime.toolDockerImage]}\n-                    value={runtime.toolDockerImage}/>\n-          {/* Runtime customization: change detailed machine configuration options. */}\n-          <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n-          <FlexRow style={{justifyContent: 'space-between'}}>\n-            <div>\n-              <label htmlFor='runtime-cpu'\n-                     style={{marginRight: '.25rem'}}>CPUs</label>\n-              <Dropdown id='runtime-cpu'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show all CPU options.\n-                          fp.map('cpu'),\n-                          // In the event that was remove a machine type from our set of valid\n-                          // configs, we want to continue to allow rendering of the value here.\n-                          // Union also makes the CPU values unique.\n-                          fp.union([machineType.cpu]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.cpu}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-ram'\n-                     style={{marginRight: '.25rem'}}>RAM (GB)</label>\n-              <Dropdown id='runtime-ram'\n-                        disabled={true}\n-                        options={fp.flow(\n-                          // Show valid memory options as constrained by the currently selected CPU.\n-                          fp.filter(({cpu}) => cpu === machineType.cpu),\n-                          fp.map('memory'),\n-                          // See above comment on CPU union.\n-                          fp.union([machineType.memory]),\n-                          fp.sortBy(fp.identity)\n-                        )(validLeonardoMachineTypes)}\n-                        value={machineType.memory}/>\n-            </div>\n-            <div>\n-              <label htmlFor='runtime-disk'\n-                     style={{marginRight: '.25rem'}}>Disk (GB)</label>\n-              <InputNumber id='runtime-disk'\n-                           disabled={true}\n-                           showButtons\n-                           decrementButtonClassName='p-button-secondary'\n-                           incrementButtonClassName='p-button-secondary'\n-                           value={masterDiskSize}\n-                           inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n-                           min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n-            </div>\n-          </FlexRow>\n-          <FlexColumn style={{marginTop: '1rem'}}>\n-            <label htmlFor='runtime-compute'>Compute type</label>\n-            <Dropdown id='runtime-compute'\n-                      style={{width: '10rem'}}\n-                      disabled={true}\n-                      options={['Dataproc cluster', 'Standard VM']}\n-                      value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n-          </FlexColumn>\n-        </div>\n-        <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n-          <Button disabled={true}>Create</Button>\n-        </FlexRow>\n-        {activeRuntimeOp && <React.Fragment>\n-          <hr/>\n-          <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </React.Fragment>}\n-      </div>;\n-    }\n+      >{currentRuntime ? 'Update' : 'Create'}</Button>\n+    </FlexRow>\n+    {activeRuntimeOp && <React.Fragment>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761a0f8626344adbca7eb3288fe3ffbd898be14c"}, "originalPosition": 367}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTQ2Mjg1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoxOTowMlrOHeJ4Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoxOTowMlrOHeJ4Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM4MTE0Nw==", "bodyText": "Please change this to gceConfig, since this panel is currently for modifying a standard VM and GCE is now the default (in test/local)", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501381147", "createdAt": "2020-10-08T00:19:02Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -67,190 +64,165 @@ const ActiveRuntimeOp = ({operation, workspaceNamespace}) => {\n };\n \n export interface Props {\n-  runtimeOps: RuntimeOpsStore;\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = updatedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={updatedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>;\n+};\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(null);\n+  const [updatedMachine, setUpdatedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n+\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = RuntimeStatus.Unknown, toolDockerImage = '', dataprocConfig = null, gceConfig = {}} = currentRuntime || {};\n+  const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n+  const updatedMachineType = updatedMachine && updatedMachine.name;\n+\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = updatedMachine || updatedDiskSize;\n+\n+  if (currentRuntime === undefined) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (currentRuntime === null) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[toolDockerImage]}\n+                value={toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}\n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector updatedMachine={updatedMachine} onChange={setUpdatedMachine} masterMachineType={masterMachineType}/>\n+        <DiskSizeSelection updatedDiskSize={updatedDiskSize} onChange={setUpdatedDiskSize} masterDiskSize={masterDiskSize}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button\n+        aria-label={currentRuntime ? 'Update' : 'Create'}\n+        disabled={status !== RuntimeStatus.Running || !runtimeChanged}\n+        onClick={() =>\n+          setRequestedRuntime({dataprocConfig: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761a0f8626344adbca7eb3288fe3ffbd898be14c"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTQ2NzQ2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoyMTozN1rOHeJ6uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoyMTozN1rOHeJ6uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM4MTgxOQ==", "bodyText": "I would also pass configurationType: RuntimeConfigurationType.UserOverride ; later this will be derived from whether or not this matches one of the presets, but that can just be a TODO for now.", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501381819", "createdAt": "2020-10-08T00:21:37Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -67,190 +64,165 @@ const ActiveRuntimeOp = ({operation, workspaceNamespace}) => {\n };\n \n export interface Props {\n-  runtimeOps: RuntimeOpsStore;\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = updatedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={updatedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>;\n+};\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(null);\n+  const [updatedMachine, setUpdatedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n+\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = RuntimeStatus.Unknown, toolDockerImage = '', dataprocConfig = null, gceConfig = {}} = currentRuntime || {};\n+  const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n+  const updatedMachineType = updatedMachine && updatedMachine.name;\n+\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = updatedMachine || updatedDiskSize;\n+\n+  if (currentRuntime === undefined) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (currentRuntime === null) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[toolDockerImage]}\n+                value={toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}\n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector updatedMachine={updatedMachine} onChange={setUpdatedMachine} masterMachineType={masterMachineType}/>\n+        <DiskSizeSelection updatedDiskSize={updatedDiskSize} onChange={setUpdatedDiskSize} masterDiskSize={masterDiskSize}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button\n+        aria-label={currentRuntime ? 'Update' : 'Create'}\n+        disabled={status !== RuntimeStatus.Running || !runtimeChanged}\n+        onClick={() =>\n+          setRequestedRuntime({dataprocConfig: {\n+            masterMachineType: updatedMachineType || masterMachineType,\n+            masterDiskSize: updatedDiskSize || masterDiskSize", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761a0f8626344adbca7eb3288fe3ffbd898be14c"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzOTQ2OTIxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoyMjozNVrOHeJ7vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwMDoyMjozNVrOHeJ7vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTM4MjA3Ng==", "bodyText": "I did the following test:\n\nOpened existing runtime\nobserve n1-standard-4 settings\nswitch cpu to 2\nswitch ram to 7.5\nwait\nobserve runtime deleted\nobserved runtime created; network request shows a request for n1-standard-4; expected n1-standard-2", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r501382076", "createdAt": "2020-10-08T00:22:35Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -67,190 +64,165 @@ const ActiveRuntimeOp = ({operation, workspaceNamespace}) => {\n };\n \n export interface Props {\n-  runtimeOps: RuntimeOpsStore;\n   workspace: WorkspaceData;\n }\n \n-interface State {\n-  // Whether the initial runtime load is still in progress.\n-  loading: boolean;\n-  // Whether there was an error in loading the runtime data.\n-  error: boolean;\n-  // The runtime. null if none exists, or if there was an error in loading the\n-  // runtime.\n-  runtime: Runtime|null;\n-}\n+const MachineSelector = ({onChange, updatedMachine, masterMachineType}) => {\n+  const initialMachineType = fp.find(({name}) => name === masterMachineType, allMachineTypes) || defaultMachineType;\n+  const {cpu, memory} = updatedMachine || initialMachineType;\n+  const maybeGetMachine = machineRequested => fp.equals(machineRequested, initialMachineType) ? null : machineRequested;\n+\n+  return <Fragment>\n+    <div>\n+      <label htmlFor='runtime-cpu'\n+            style={{marginRight: '.25rem'}}>CPUs</label>\n+      <Dropdown id='runtime-cpu'\n+                options={fp.flow(\n+                  // Show all CPU options.\n+                  fp.map('cpu'),\n+                  // In the event that was remove a machine type from our set of valid\n+                  // configs, we want to continue to allow rendering of the value here.\n+                  // Union also makes the CPU values unique.\n+                  fp.union([cpu]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.sortBy('memory'),\n+                    fp.find({cpu: value}),\n+                    maybeGetMachine,\n+                    onChange)(validLeonardoMachineTypes)\n+                }\n+                value={cpu}/>\n+    </div>\n+    <div>\n+      <label htmlFor='runtime-ram'\n+            style={{marginRight: '.25rem'}}>RAM (GB)</label>\n+      <Dropdown id='runtime-ram'\n+                options={fp.flow(\n+                  // Show valid memory options as constrained by the currently selected CPU.\n+                  fp.filter(({cpu: availableCpu}) => availableCpu === cpu),\n+                  fp.map('memory'),\n+                  // See above comment on CPU union.\n+                  fp.union([memory]),\n+                  fp.sortBy(fp.identity)\n+                )(validLeonardoMachineTypes)}\n+                onChange={\n+                  ({value}) => fp.flow(\n+                    fp.find({cpu, memory: value}),\n+                    // If the selected machine is not different from the current machine return null\n+                    maybeGetMachine,\n+                    onChange\n+                    )(validLeonardoMachineTypes) }\n+                value={memory}\n+                />\n+    </div>\n+  </Fragment>;\n+};\n \n-export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOpsStore, 'runtimeOps'))(\n-  class extends React.Component<Props, State> {\n-    private aborter = new AbortController();\n+const DiskSizeSelection = ({onChange, updatedDiskSize, masterDiskSize}) => {\n+  return <div>\n+    <label htmlFor='runtime-disk'\n+          style={{marginRight: '.25rem'}}>Disk (GB)</label>\n+      <InputNumber id='runtime-disk'\n+                showButtons\n+                decrementButtonClassName='p-button-secondary'\n+                incrementButtonClassName='p-button-secondary'\n+                value={updatedDiskSize || masterDiskSize}\n+                inputStyle={{padding: '.75rem .5rem', width: '2rem'}}\n+                onChange={({value}) => onChange(value === masterDiskSize ? null : value)}\n+                min={50 /* Runtime API has a minimum 50GB requirement. */}/>\n+  </div>;\n+};\n \n-    constructor(props: Props) {\n-      super(props);\n-      this.state = {\n-        loading: true,\n-        error: false,\n-        runtime: null\n-      };\n-    }\n+export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n+  const [updatedDiskSize, setUpdatedDiskSize] = useState(null);\n+  const [updatedMachine, setUpdatedMachine] = useState(null);\n+  const runtimeOps = useStore(runtimeOpsStore);\n+  const [currentRuntime, setRequestedRuntime] = useCustomRuntime(workspace.namespace);\n+\n+  const activeRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+  const {status = RuntimeStatus.Unknown, toolDockerImage = '', dataprocConfig = null, gceConfig = {}} = currentRuntime || {};\n+  const masterMachineType = !!dataprocConfig ? dataprocConfig.masterMachineType : gceConfig.machineType;\n+  const masterDiskSize = !!dataprocConfig ? dataprocConfig.masterDiskSize : gceConfig.bootDiskSize;\n+  const updatedMachineType = updatedMachine && updatedMachine.name;\n+\n+  const isDataproc = (currentRuntime && !!currentRuntime.dataprocConfig);\n+  const runtimeChanged = updatedMachine || updatedDiskSize;\n+\n+  if (currentRuntime === undefined) {\n+    return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n+  } else if (currentRuntime === null) {\n+    // TODO(RW-5591): Create runtime page goes here.\n+    return <React.Fragment>\n+      <div>No runtime exists yet</div>\n+      {activeRuntimeOp && <hr/>}\n+      {activeRuntimeOp && <div>\n+        <ActiveRuntimeOp operation={activeRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n+      </div>}\n+    </React.Fragment>;\n+  }\n \n-    async componentDidMount() {\n-      // TODO(RW-5420): Centralize a runtimeStore.\n-      let runtime = null;\n-      let error = false;\n-      try {\n-        const promise = runtimeApi().getRuntime(this.props.workspace.namespace, {signal: this.aborter.signal});\n-        updateRuntimeOpsStoreForWorkspaceNamespace(this.props.workspace.namespace, {\n-          promise: promise,\n-          operation: 'get',\n-          aborter: this.aborter\n-        });\n-        runtime = await promise;\n-      } catch (e) {\n-        // 404 is expected if the runtime doesn't exist, represent this as a null\n-        // runtime rather than an error mode.\n-        if (e.status !== 404) {\n-          error = true;\n+  return <div data-test-id='runtime-panel'>\n+    <h3 style={styles.sectionHeader}>Cloud analysis environment</h3>\n+    <div>\n+      Your analysis environment consists of an application and compute resources.\n+      Your cloud environment is unique to this workspace and not shared with other users.\n+    </div>\n+    {/* TODO(RW-5419): Cost estimates go here. */}\n+    <div style={styles.controlSection}>\n+      {/* Recommended runtime: pick from default templates or change the image. */}\n+      <PopupTrigger side='bottom'\n+                    closeOnClick\n+                    content={\n+                      <React.Fragment>\n+                        <MenuItem style={styles.presetMenuItem}>General purpose analysis</MenuItem>\n+                        <MenuItem style={styles.presetMenuItem}>Genomics analysis</MenuItem>\n+                      </React.Fragment>\n+                    }>\n+        <Clickable data-test-id='runtime-presets-menu'\n+                   disabled={true}>\n+          Recommended environments <ClrIcon shape='caret down'/>\n+        </Clickable>\n+      </PopupTrigger>\n+      <h3 style={styles.sectionHeader}>Application configuration</h3>\n+      {/* TODO(RW-5413): Populate the image list with server driven options. */}\n+      <Dropdown style={{width: '100%'}}\n+                data-test-id='runtime-image-dropdown'\n+                disabled={true}\n+                options={[toolDockerImage]}\n+                value={toolDockerImage}/>\n+      {/* Runtime customization: change detailed machine configuration options. */}\n+      <h3 style={styles.sectionHeader}>Cloud compute profile</h3>\n+      <FlexRow style={{justifyContent: 'space-between'}}>\n+        <MachineSelector updatedMachine={updatedMachine} onChange={setUpdatedMachine} masterMachineType={masterMachineType}/>\n+        <DiskSizeSelection updatedDiskSize={updatedDiskSize} onChange={setUpdatedDiskSize} masterDiskSize={masterDiskSize}/>\n+      </FlexRow>\n+      <FlexColumn style={{marginTop: '1rem'}}>\n+        <label htmlFor='runtime-compute'>Compute type</label>\n+        <Dropdown id='runtime-compute'\n+                  style={{width: '10rem'}}\n+                  disabled={true}\n+                  options={['Dataproc cluster', 'Standard VM']}\n+                  value={isDataproc ? 'Dataproc cluster' : 'Standard VM'}/>\n+      </FlexColumn>\n+    </div>\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button\n+        aria-label={currentRuntime ? 'Update' : 'Create'}\n+        disabled={status !== RuntimeStatus.Running || !runtimeChanged}\n+        onClick={() =>\n+          setRequestedRuntime({dataprocConfig: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "761a0f8626344adbca7eb3288fe3ffbd898be14c"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0Nzg1MzgxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTozMDozOVrOHfZJog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQyMTozMDozOVrOHfZJog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjY3OTk3MA==", "bodyText": "please remove these two lines as well; I noticed the hr/ flashing into existence during the demo", "url": "https://github.com/all-of-us/workbench/pull/4100#discussion_r502679970", "createdAt": "2020-10-09T21:30:39Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -141,7 +140,6 @@ export const RuntimePanel = withCurrentWorkspace()(({workspace}) => {\n       <div>No runtime exists yet</div>\n       {activeRuntimeOp && <hr/>}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5085320693f95549dd1e3159791e2577d0f09f66"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4005, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}