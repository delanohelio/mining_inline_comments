{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMDk1OTgx", "number": 2990, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODo0OTozMVrODW81Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODo1Mjo1M1rODW84pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzkxOTUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODo0OTozMVrOFb_9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxOToxMzo0MFrOFcAkpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMzc3Ng==", "bodyText": "comment is no longer accurate", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364903776", "createdAt": "2020-01-09T18:49:31Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -13,14 +17,46 @@\n   private static final String SIGN_JWT_URL_FORMAT =\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n+  /**\n+   * Returns an appropriate set of service credentials based on the current operating environment.\n+   *\n+   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   *\n+   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n+   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * within an App Engine environment, the returned credentials will be an instance of\n+   * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n+   * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n+   * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n+   *\n+   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n+   * be a common pain point for users of the com.google.auth.oauth2 library.\n+   *\n+   * @param scopes\n+   * @return\n+   * @throws IOException\n+   */\n+  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+      throws IOException {\n+    if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {\n+      return GoogleCredentials.getApplicationDefault().createScoped(scopes);\n+    } else {\n+      AppIdentityService appIdentityService = AppIdentityServiceFactory.getAppIdentityService();\n+      return AppEngineCredentials.newBuilder()\n+          .setScopes(scopes)\n+          .setAppIdentityService(appIdentityService)\n+          .build();\n+    }\n+  }\n+\n   /**\n    * Retrieves an access token with the specified set of scopes derived from a given set of Google", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkxMzgzMA==", "bodyText": "Thanks \u2013\u00a0updated.", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364913830", "createdAt": "2020-01-09T19:13:40Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -13,14 +17,46 @@\n   private static final String SIGN_JWT_URL_FORMAT =\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n+  /**\n+   * Returns an appropriate set of service credentials based on the current operating environment.\n+   *\n+   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   *\n+   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n+   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * within an App Engine environment, the returned credentials will be an instance of\n+   * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n+   * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n+   * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n+   *\n+   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n+   * be a common pain point for users of the com.google.auth.oauth2 library.\n+   *\n+   * @param scopes\n+   * @return\n+   * @throws IOException\n+   */\n+  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+      throws IOException {\n+    if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {\n+      return GoogleCredentials.getApplicationDefault().createScoped(scopes);\n+    } else {\n+      AppIdentityService appIdentityService = AppIdentityServiceFactory.getAppIdentityService();\n+      return AppEngineCredentials.newBuilder()\n+          .setScopes(scopes)\n+          .setAppIdentityService(appIdentityService)\n+          .build();\n+    }\n+  }\n+\n   /**\n    * Retrieves an access token with the specified set of scopes derived from a given set of Google", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwMzc3Ng=="}, "originalCommit": {"oid": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzkyODA0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxODo1Mjo1M1rOFcADDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMjoxODowNFrOFcFErg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwNTIzMQ==", "bodyText": "Could use the just-removed WorkbenchEnvironment here if it still existed.  Would it make sense to bring it back?", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364905231", "createdAt": "2020-01-09T18:52:53Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -13,14 +17,46 @@\n   private static final String SIGN_JWT_URL_FORMAT =\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n+  /**\n+   * Returns an appropriate set of service credentials based on the current operating environment.\n+   *\n+   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   *\n+   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n+   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * within an App Engine environment, the returned credentials will be an instance of\n+   * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n+   * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n+   * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n+   *\n+   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n+   * be a common pain point for users of the com.google.auth.oauth2 library.\n+   *\n+   * @param scopes\n+   * @return\n+   * @throws IOException\n+   */\n+  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+      throws IOException {\n+    if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk4NzU2Ng==", "bodyText": "Yeah, I thought about that... I'm not convinced that a separate dependency-injected class is worth it for the single usage instance here. If there's no other obvious advantage that I'm missing, I'm inclined to keep the \"am I in dev\" check local here.\n[Update] as a last-ditch effort, I tried seeing if the AppIdentityService branch would work correctly even when running locally. I tested this out locally and it does work fine (I suspect that somewhere under the hood there is a fallback call to GoogleCredentials.getApplicationDefault), but I'm not confident enough to push out that change. I'd rather leave as-is for now and possibly follow-up later with that simplification.", "url": "https://github.com/all-of-us/workbench/pull/2990#discussion_r364987566", "createdAt": "2020-01-09T22:18:04Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/auth/ServiceAccounts.java", "diffHunk": "@@ -13,14 +17,46 @@\n   private static final String SIGN_JWT_URL_FORMAT =\n       \"https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/%s:signJwt\";\n \n+  /**\n+   * Returns an appropriate set of service credentials based on the current operating environment.\n+   *\n+   * <p>When running a local server, Application Default Credentials (ADCs) are used.\n+   *\n+   * <p>When running in App Engine, we use AppIdentityService to return an instance of\n+   * AppEngineCredentials. Unfortunately, if we use GoogleCredentials.getApplicationDefault() from\n+   * within an App Engine environment, the returned credentials will be an instance of\n+   * ComputeEngineCredentials, which doesn't support scoped access tokens. Frustratingly, the call\n+   * to .createScoped will silently proceed by doing nothing -- meaning we only learn about the\n+   * error once an attempt to use these credentials fails in a downstream service due to bad scopes.\n+   *\n+   * <p>See https://github.com/googleapis/google-auth-library-java/issues/272 and\n+   * https://github.com/googleapis/google-auth-library-java/issues/172 for reference; this seems to\n+   * be a common pain point for users of the com.google.auth.oauth2 library.\n+   *\n+   * @param scopes\n+   * @return\n+   * @throws IOException\n+   */\n+  private static GoogleCredentials getScopedServiceCredentials(List<String> scopes)\n+      throws IOException {\n+    if (SystemProperty.environment.value().equals(SystemProperty.Environment.Value.Development)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDkwNTIzMQ=="}, "originalCommit": {"oid": "eedc1a36a2381ba3380f2c08e31f3b6ebf5e0780"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3408, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}