{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjg0MzY5", "number": 4030, "title": "[RW-4884] Expose the GCS bucket name to the workspace admin page and fetch-workspace-details tool", "bodyText": "As we handle more high-egress alerts, viewing notebooks and files within the workspace bucket is becoming a common task for manual inspection. While we do have plans to support that activity via the admin page (see RW-5471 and RW-5481), it is useful for manual fallback to show admins the direct \"gs://\" path. This makes it much easier for the oncall to locate the workspace bucket.\nThis PR adds the bucket path to the workspace admin page and to the workspace-focused CLI tool.\nWhen adding this to the CLI tool I ran into our age-old problem: the firecloud API client exposes request-scoped beans, since it depends on the WorkbenchConfig which is itself request-scoped. So, when I tried to add the firecloud API call to the CLI tool, I got the error \"no scope 'request' exists.\".\nRather than modify our production code to adjust the scope of those beans (it's theoretically possible, but complicates things and may make bugs in the main webapp harder to detect), I dug in a bit and found a way to create a fake 'request' scope for all of our CLI tools. This was the lowest-effort way to enable this small addition, and I think it opens up more possibilities for reusing RW code in our CLI tools in the future.\nExample CLI output:\nWorkspace Name: My Workspace\nWorkspace Namespace: aou-rw-1234\nCreator: asdf@researchallofus.org\nGCS bucket path: gs://fc-secure-1234-5678\nCollaborators:\nasdf@researchallofus.org (OWNER)\nExample workspace admin:", "createdAt": "2020-09-21T13:07:54Z", "url": "https://github.com/all-of-us/workbench/pull/4030", "merged": true, "mergeCommit": {"oid": "2d56e29b24a7bd1300f75de3cb00e32d5dce9f29"}, "closed": true, "closedAt": "2020-09-22T16:58:25Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLFJ7HAFqTQ5MjcyMTM1MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLXxFfAH2gAyNDkwMjg0MzY5OmZlZDlkOTE0NTU1N2ZlMzQyMjEzOTNjNWE5MTJjOGFlZGIyMGY3MmM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNzIxMzUx", "url": "https://github.com/all-of-us/workbench/pull/4030#pullrequestreview-492721351", "createdAt": "2020-09-21T15:14:50Z", "commit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxNDo1MFrOHVVneA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyOTo1NFrOHVWrCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzNjMxMg==", "bodyText": "Maybe include a short description here describing how this the absolute URI (including the bucket name) and the relative path. That's pretty clear though.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492136312", "createdAt": "2020-09-21T15:14:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5876,6 +5876,8 @@ definitions:\n   AdminWorkspaceCloudStorageCounts:\n     type: object\n     properties:\n+      storageBucketPath:\n+        type: string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzODI1MA==", "bodyText": "It's almost  worth making an AbstractApplicationRunListener with empty overrides for everything and extending that so you only have methods that actually do things in this class.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492138250", "createdAt": "2020-09-21T15:16:29Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MjM3Nw==", "bodyText": "It would be great to have a comment specific to this implementation of the method giving the why/how, etc. Could this break any existing code (ours or anyone else's) that depends on this scope, or is the idea that it will be clobbered later on in the application startup and be associated with the usual scope and properties, etc.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492142377", "createdAt": "2020-09-21T15:20:09Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**\n+   * Called immediately when the run method has first started. Can be used for very early\n+   * initialization.\n+   */\n+  @Override\n+  public void starting() {}\n+\n+  /**\n+   * Called once the environment has been prepared, but before the {@link ApplicationContext} has\n+   * been created.\n+   *\n+   * @param environment the environment\n+   */\n+  @Override\n+  public void environmentPrepared(ConfigurableEnvironment environment) {}\n+\n+  /**\n+   * Called once the {@link ApplicationContext} has been created and prepared, but before sources\n+   * have been loaded.\n+   *\n+   * @param context the application context\n+   */\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MjkxNg==", "bodyText": "I'd log something here as a breadcrumb to indicate that you're tweaking the default behavior of scope requests.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492142916", "createdAt": "2020-09-21T15:20:45Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**\n+   * Called immediately when the run method has first started. Can be used for very early\n+   * initialization.\n+   */\n+  @Override\n+  public void starting() {}\n+\n+  /**\n+   * Called once the environment has been prepared, but before the {@link ApplicationContext} has\n+   * been created.\n+   *\n+   * @param environment the environment\n+   */\n+  @Override\n+  public void environmentPrepared(ConfigurableEnvironment environment) {}\n+\n+  /**\n+   * Called once the {@link ApplicationContext} has been created and prepared, but before sources\n+   * have been loaded.\n+   *\n+   * @param context the application context\n+   */\n+  @Override\n+  public void contextPrepared(ConfigurableApplicationContext context) {\n+    context\n+        .getBeanFactory()\n+        .registerScope(WebApplicationContext.SCOPE_REQUEST, new SimpleThreadScope());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0NjgzNA==", "bodyText": "Also, I'd consider extending SimpleThreadScope with something like AoUPreConfigRequestScopePlaceholder or otherwise suspicious and using that so it shows up in stack traces or config graphs, which would increase the likelihood of a maintainer finding this.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492146834", "createdAt": "2020-09-21T15:24:00Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**\n+   * Called immediately when the run method has first started. Can be used for very early\n+   * initialization.\n+   */\n+  @Override\n+  public void starting() {}\n+\n+  /**\n+   * Called once the environment has been prepared, but before the {@link ApplicationContext} has\n+   * been created.\n+   *\n+   * @param environment the environment\n+   */\n+  @Override\n+  public void environmentPrepared(ConfigurableEnvironment environment) {}\n+\n+  /**\n+   * Called once the {@link ApplicationContext} has been created and prepared, but before sources\n+   * have been loaded.\n+   *\n+   * @param context the application context\n+   */\n+  @Override\n+  public void contextPrepared(ConfigurableApplicationContext context) {\n+    context\n+        .getBeanFactory()\n+        .registerScope(WebApplicationContext.SCOPE_REQUEST, new SimpleThreadScope());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0OTI5MQ==", "bodyText": "nit/tangent: I didn't know about this class (haven't worked with the tools much), but a couple of our other configs are named with a SpringConfiguration suffix (to distinguish from other config classes). I navigate randomly so much that I forget to look at package names, though I'm getting better.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492149291", "createdAt": "2020-09-21T15:26:03Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "diffHunk": "@@ -9,20 +9,23 @@\n import org.apache.commons.cli.Options;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n import org.pmiops.workbench.firecloud.FirecloudTransforms;\n import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n \n /**\n  * A tool that takes a Workspace namespace / Firecloud Project ID and returns details for any\n  * workspaces found.\n- *\n- * <p>Details currently include... - Name - Creator Email - Collaborator Emails and Access Levels\n  */\n @Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n public class FetchWorkspaceDetails {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1MzAyNw==", "bodyText": "Is it possible to pull in the WorkspaceAdminService (or other high-level service) instead? Some of this information is already being compiled for the admin page. There are a ton of transient dependencies though, so I can understand why you wouldn't.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492153027", "createdAt": "2020-09-21T15:29:08Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "diffHunk": "@@ -9,20 +9,23 @@\n import org.apache.commons.cli.Options;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n import org.pmiops.workbench.firecloud.FirecloudTransforms;\n import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n \n /**\n  * A tool that takes a Workspace namespace / Firecloud Project ID and returns details for any\n  * workspaces found.\n- *\n- * <p>Details currently include... - Name - Creator Email - Collaborator Emails and Access Levels\n  */\n @Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1MzYwOQ==", "bodyText": "nit: maybe name this ToolApplicationRunListener so it's more obvious when it gets pulled in.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492153609", "createdAt": "2020-09-21T15:29:54Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb35071617d803b07c0d30d6015c8e70b4d690df", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/fb35071617d803b07c0d30d6015c8e70b4d690df", "committedDate": "2020-09-22T01:30:15Z", "message": "Add GCS bucket path to the workpace admin UI and CLI."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b07e48e1a34aff3200a50cc703264eb3e4f819c", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/7b07e48e1a34aff3200a50cc703264eb3e4f819c", "committedDate": "2020-09-22T01:30:25Z", "message": "Spotless format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f561c7e735c961f39755bbf613e2212a08ce9a7", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/0f561c7e735c961f39755bbf613e2212a08ce9a7", "committedDate": "2020-09-22T01:30:45Z", "message": "Add some comments and use a typed reference to the Request scope magic string."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13c3ffd798c51d84fe61117fe3707743c7ca044f", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/13c3ffd798c51d84fe61117fe3707743c7ca044f", "committedDate": "2020-09-22T01:51:52Z", "message": "PR feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9", "committedDate": "2020-09-21T13:18:05Z", "message": "Add some comments and use a typed reference to the Request scope magic string."}, "afterCommit": {"oid": "13c3ffd798c51d84fe61117fe3707743c7ca044f", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/13c3ffd798c51d84fe61117fe3707743c7ca044f", "committedDate": "2020-09-22T01:51:52Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fed9d9145557fe34221393c5a912c8aedb20f72c", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/fed9d9145557fe34221393c5a912c8aedb20f72c", "committedDate": "2020-09-22T13:11:50Z", "message": "Fix unit test"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4061, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}