{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyNjYyMjM5", "number": 3292, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0MTo0NVrODq0pIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1NTo0M1rODrWsEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjI5MjgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0MTo0NVrOF6zf7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0MTo0NVrOF6zf7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNTQ4Ng==", "bodyText": "opportunistic reordering/grouping.  I can revert.", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r397205486", "createdAt": "2020-03-24T14:41:45Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -78,53 +78,55 @@\n   private static final int CURRENT_DATA_USE_AGREEMENT_VERSION = 2;\n   private static final int CURRENT_TERMS_OF_SERVICE_VERSION = 1;\n \n+  private final Provider<WorkbenchConfig> configProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf66dc26742f4361a20763f3c44656856458eb5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjI5NjE3OnYy", "diffSide": "LEFT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0MjoyOVrOF6ziKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNDo0MjoyOVrOF6ziKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIwNjA1OA==", "bodyText": "Everwhere this was called, it was required to exist", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r397206058", "createdAt": "2020-03-24T14:42:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -15,7 +16,8 @@\n \n   Optional<Institution> getInstitution(final String shortName);\n \n-  Optional<DbInstitution> getDbInstitution(final String shortName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddf66dc26742f4361a20763f3c44656856458eb5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjQ1MzgyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/AuthDomainControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxNDo0N1rOF61HGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxNDo0N1rOF61HGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMTg5OQ==", "bodyText": "just a reordering to match", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r397231899", "createdAt": "2020-03-24T15:14:47Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/AuthDomainControllerTest.java", "diffHunk": "@@ -81,20 +81,20 @@ public void setUp() {\n     FakeClock clock = new FakeClock(Instant.now());\n     UserService userService =\n         new UserServiceImpl(\n+            Providers.of(config),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c981fbbf1b92bc2c16dc1c7473b2c87d8f1fc1c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MjQ1ODgzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNToxNTo0N1rOF61KRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoxMzo1MlrOF7lrGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMjcwOQ==", "bodyText": "Open to naming suggestions", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r397232709", "createdAt": "2020-03-24T15:15:47Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -15,7 +16,8 @@\n \n   Optional<Institution> getInstitution(final String shortName);\n \n-  Optional<DbInstitution> getDbInstitution(final String shortName);\n+  // throws NotFoundException if the DbInstitution is not found\n+  DbInstitution getDbInstitutionOrThrow(final String shortName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c981fbbf1b92bc2c16dc1c7473b2c87d8f1fc1c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyNzU0NA==", "bodyText": "looks more like findDBInstitutionElseThrow but i know our convention is get so we can keep it as is", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398027544", "createdAt": "2020-03-25T17:13:52Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionService.java", "diffHunk": "@@ -15,7 +16,8 @@\n \n   Optional<Institution> getInstitution(final String shortName);\n \n-  Optional<DbInstitution> getDbInstitution(final String shortName);\n+  // throws NotFoundException if the DbInstitution is not found\n+  DbInstitution getDbInstitutionOrThrow(final String shortName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzIzMjcwOQ=="}, "originalCommit": {"oid": "4c981fbbf1b92bc2c16dc1c7473b2c87d8f1fc1c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQyNDAyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionUserInstructions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzowNzo0MlrOF7lYoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODowNTowN1rOF7n29g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjgxNg==", "bodyText": "should this be institutionUserInstructionsId and institutionId rather than institutionUserInstructionsId and userInstructions", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398022816", "createdAt": "2020-03-25T17:07:42Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionUserInstructions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_user_instructions\")\n+public class DbInstitutionUserInstructions {\n+\n+  private long institutionUserInstructionsId;\n+  private long institutionId;\n+  private String userInstructions;\n+\n+  public DbInstitutionUserInstructions() {}\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_user_instructions_id\", nullable = false)\n+  public long getInstitutionUserInstructionsId() {\n+    return institutionUserInstructionsId;\n+  }\n+\n+  public DbInstitutionUserInstructions setInstitutionUserInstructionsId(\n+      long institutionUserInstructionsId) {\n+    this.institutionUserInstructionsId = institutionUserInstructionsId;\n+    return this;\n+  }\n+\n+  @Column(name = \"institution_id\", nullable = false)\n+  public long getInstitutionId() {\n+    return institutionId;\n+  }\n+\n+  public DbInstitutionUserInstructions setInstitutionId(long institutionId) {\n+    this.institutionId = institutionId;\n+    return this;\n+  }\n+\n+  @Column(name = \"user_instructions\", nullable = false)\n+  public String getUserInstructions() {\n+    return userInstructions;\n+  }\n+\n+  public DbInstitutionUserInstructions setUserInstructions(String userInstructions) {\n+    this.userInstructions = userInstructions;\n+    return this;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+\n+    DbInstitutionUserInstructions that = (DbInstitutionUserInstructions) o;\n+\n+    return Objects.equals(institutionUserInstructionsId, that.institutionUserInstructionsId)\n+        && Objects.equals(userInstructions, that.userInstructions);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(institutionUserInstructionsId, userInstructions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91362b99cf8a5680accedca490c2456ac3ba1adf"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2MzM1MA==", "bodyText": "institutionId and userInstructions actually - I'll fix and comment", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398063350", "createdAt": "2020-03-25T18:05:07Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbInstitutionUserInstructions.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.pmiops.workbench.db.model;\n+\n+import java.util.Objects;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.Table;\n+\n+@Entity\n+@Table(name = \"institution_user_instructions\")\n+public class DbInstitutionUserInstructions {\n+\n+  private long institutionUserInstructionsId;\n+  private long institutionId;\n+  private String userInstructions;\n+\n+  public DbInstitutionUserInstructions() {}\n+\n+  @Id\n+  @GeneratedValue(strategy = GenerationType.IDENTITY)\n+  @Column(name = \"institution_user_instructions_id\", nullable = false)\n+  public long getInstitutionUserInstructionsId() {\n+    return institutionUserInstructionsId;\n+  }\n+\n+  public DbInstitutionUserInstructions setInstitutionUserInstructionsId(\n+      long institutionUserInstructionsId) {\n+    this.institutionUserInstructionsId = institutionUserInstructionsId;\n+    return this;\n+  }\n+\n+  @Column(name = \"institution_id\", nullable = false)\n+  public long getInstitutionId() {\n+    return institutionId;\n+  }\n+\n+  public DbInstitutionUserInstructions setInstitutionId(long institutionId) {\n+    this.institutionId = institutionId;\n+    return this;\n+  }\n+\n+  @Column(name = \"user_instructions\", nullable = false)\n+  public String getUserInstructions() {\n+    return userInstructions;\n+  }\n+\n+  public DbInstitutionUserInstructions setUserInstructions(String userInstructions) {\n+    this.userInstructions = userInstructions;\n+    return this;\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+\n+    DbInstitutionUserInstructions that = (DbInstitutionUserInstructions) o;\n+\n+    return Objects.equals(institutionUserInstructionsId, that.institutionUserInstructionsId)\n+        && Objects.equals(userInstructions, that.userInstructions);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(institutionUserInstructionsId, userInstructions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAyMjgxNg=="}, "originalCommit": {"oid": "91362b99cf8a5680accedca490c2456ac3ba1adf"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzQ5NzkwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionUserInstructionsMapper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoyMzozMlrOF7mG1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo0NzoyOFrOF7pgVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNDY0NA==", "bodyText": "will it make sense to have a method that takes in shortName and send institutionID as well in addition to getDbInstitutionOrThrow because thats being used at a lot of places.", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398034644", "createdAt": "2020-03-25T17:23:32Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionUserInstructionsMapper.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.pmiops.workbench.institution;\n+\n+import org.mapstruct.AfterMapping;\n+import org.mapstruct.Context;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.MappingTarget;\n+import org.owasp.html.HtmlPolicyBuilder;\n+import org.owasp.html.PolicyFactory;\n+import org.pmiops.workbench.db.model.DbInstitutionUserInstructions;\n+import org.pmiops.workbench.model.InstitutionUserInstructions;\n+\n+@Mapper(componentModel = \"spring\")\n+public interface InstitutionUserInstructionsMapper {\n+  @Mapping(target = \"institutionUserInstructionsId\", ignore = true)\n+  @Mapping(target = \"institutionId\", ignore = true) // set by setFields()\n+  @Mapping(target = \"userInstructions\", ignore = true) // set by setFields()\n+  DbInstitutionUserInstructions modelToDb(\n+      InstitutionUserInstructions modelObject, @Context InstitutionService institutionService);\n+\n+  @AfterMapping\n+  default void setFields(\n+      @MappingTarget DbInstitutionUserInstructions target,\n+      InstitutionUserInstructions modelObject,\n+      @Context InstitutionService institutionService) {\n+\n+    final long institutionId =\n+        institutionService\n+            .getDbInstitutionOrThrow(modelObject.getInstitutionShortName())\n+            .getInstitutionId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91362b99cf8a5680accedca490c2456ac3ba1adf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA2OTE0NQ==", "bodyText": "We do need the full DbInstitution in a few places so we'd need to have both.\nSo my preferences is to keep it as-is.", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398069145", "createdAt": "2020-03-25T18:14:11Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionUserInstructionsMapper.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.pmiops.workbench.institution;\n+\n+import org.mapstruct.AfterMapping;\n+import org.mapstruct.Context;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.MappingTarget;\n+import org.owasp.html.HtmlPolicyBuilder;\n+import org.owasp.html.PolicyFactory;\n+import org.pmiops.workbench.db.model.DbInstitutionUserInstructions;\n+import org.pmiops.workbench.model.InstitutionUserInstructions;\n+\n+@Mapper(componentModel = \"spring\")\n+public interface InstitutionUserInstructionsMapper {\n+  @Mapping(target = \"institutionUserInstructionsId\", ignore = true)\n+  @Mapping(target = \"institutionId\", ignore = true) // set by setFields()\n+  @Mapping(target = \"userInstructions\", ignore = true) // set by setFields()\n+  DbInstitutionUserInstructions modelToDb(\n+      InstitutionUserInstructions modelObject, @Context InstitutionService institutionService);\n+\n+  @AfterMapping\n+  default void setFields(\n+      @MappingTarget DbInstitutionUserInstructions target,\n+      InstitutionUserInstructions modelObject,\n+      @Context InstitutionService institutionService) {\n+\n+    final long institutionId =\n+        institutionService\n+            .getDbInstitutionOrThrow(modelObject.getInstitutionShortName())\n+            .getInstitutionId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNDY0NA=="}, "originalCommit": {"oid": "91362b99cf8a5680accedca490c2456ac3ba1adf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5MDMyNg==", "bodyText": "i meant adding a new method in addition to getDBInstitution", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398090326", "createdAt": "2020-03-25T18:47:28Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionUserInstructionsMapper.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package org.pmiops.workbench.institution;\n+\n+import org.mapstruct.AfterMapping;\n+import org.mapstruct.Context;\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.mapstruct.MappingTarget;\n+import org.owasp.html.HtmlPolicyBuilder;\n+import org.owasp.html.PolicyFactory;\n+import org.pmiops.workbench.db.model.DbInstitutionUserInstructions;\n+import org.pmiops.workbench.model.InstitutionUserInstructions;\n+\n+@Mapper(componentModel = \"spring\")\n+public interface InstitutionUserInstructionsMapper {\n+  @Mapping(target = \"institutionUserInstructionsId\", ignore = true)\n+  @Mapping(target = \"institutionId\", ignore = true) // set by setFields()\n+  @Mapping(target = \"userInstructions\", ignore = true) // set by setFields()\n+  DbInstitutionUserInstructions modelToDb(\n+      InstitutionUserInstructions modelObject, @Context InstitutionService institutionService);\n+\n+  @AfterMapping\n+  default void setFields(\n+      @MappingTarget DbInstitutionUserInstructions target,\n+      InstitutionUserInstructions modelObject,\n+      @Context InstitutionService institutionService) {\n+\n+    final long institutionId =\n+        institutionService\n+            .getDbInstitutionOrThrow(modelObject.getInstitutionShortName())\n+            .getInstitutionId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNDY0NA=="}, "originalCommit": {"oid": "91362b99cf8a5680accedca490c2456ac3ba1adf"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NzUxNDE5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoyNzoxNlrOF7mRQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNzoyNzoxNlrOF7mRQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODAzNzMxMg==", "bodyText": "\ud83d\ude06", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398037312", "createdAt": "2020-03-25T17:27:16Z", "author": {"login": "NehaBroad"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -676,6 +669,82 @@ public void resendWelcomeEmail_OK() throws MessagingException {\n     verify(directoryService, times(1)).resetUserPassword(anyString());\n   }\n \n+  @Test\n+  public void sendUserInstructions_none() throws MessagingException {\n+    config.featureFlags.requireInstitutionalVerification = true;\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        createVerifiedInstitutionalAffiliation();\n+\n+    createAccountRequest\n+        .getProfile()\n+        .setVerifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation);\n+\n+    createUser();\n+    verify(mailService).sendWelcomeEmail(any(), any(), any());\n+\n+    // don't send the user instructions email if there are no instructions\n+    verifyNoMoreInteractions(mailService);\n+  }\n+\n+  @Test\n+  public void sendUserInstructions_sanitized() throws MessagingException {\n+    config.featureFlags.requireInstitutionalVerification = true;\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        createVerifiedInstitutionalAffiliation();\n+\n+    createAccountRequest\n+        .getProfile()\n+        .setVerifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation);\n+\n+    final String rawInstructions =\n+        \"<html><script>window.alert('hacked');</script></html>\"\n+            + \"Wash your hands for 20 seconds\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91362b99cf8a5680accedca490c2456ac3ba1adf"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Nzg3MDg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/emails/instructionsemail/content.html", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxODo1NTo0M1rOF7p02g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQyMDo0MDo1NFrOF7tcrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTU3OA==", "bodyText": "I know this is more of Karthik question but should we make this as a link which sends email to support@researchallofus.org just like in welcome email", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398095578", "createdAt": "2020-03-25T18:55:43Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/resources/emails/instructionsemail/content.html", "diffHunk": "@@ -0,0 +1,51 @@\n+<head>\n+  <meta charset=\"UTF-8\">\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+  <link href=\"https://fonts.googleapis.com/css?family=Montserrat\" rel=\"stylesheet\">\n+  <style>\n+    body {\n+      background-color: #F1F1F1;\n+      padding-left: 1rem;\n+      padding-top: 1rem;\n+    }\n+    * {\n+      font-family: 'Montserrat', sans-serif;\n+      font-weight: 300;\n+    }\n+    .welcome-message {\n+      margin-top: 2rem;\n+      margin-bottom: 1rem;\n+      color: #302C71;\n+      font-size: 30px;\n+      font-weight: 300;\n+      line-height: 36px;\n+    }\n+    .text {\n+      color: rgba(0,0,0,0.87);\n+      font-size: 16px;\n+      font-weight: 300;\n+      line-height: 22px;\n+      margin-bottom: 1rem;\n+    }\n+    .text.thanks {\n+      margin-bottom: 0;\n+    }\n+\n+\n+  </style>\n+</head>\n+<body>\n+<div><img src=\"${HEADER_IMG}\"></div>\n+<div class=\"welcome-message\">Welcome to the <i>All of Us</i> Researcher Workbench!</div>\n+<div class=\"text\">\n+  Thank you for signing up for the <i>All of Us</i> Researcher Workbench.\n+  Your institution expects you to adhere to the following while using the Researcher Workbench.\n+</div>\n+<div class=\"text\">${INSTRUCTIONS}</div>\n+<div class=\"text\">\n+  If you have questions, please contact our support team using the Help Desk widget in the\n+  Workbench or by emailing support@researchallofus.org.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b933cfb6609ae686159f99ba4e51a18db6d71f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODE1NDkyNw==", "bodyText": "You are right - I'll update", "url": "https://github.com/all-of-us/workbench/pull/3292#discussion_r398154927", "createdAt": "2020-03-25T20:40:54Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/emails/instructionsemail/content.html", "diffHunk": "@@ -0,0 +1,51 @@\n+<head>\n+  <meta charset=\"UTF-8\">\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n+  <link href=\"https://fonts.googleapis.com/css?family=Montserrat\" rel=\"stylesheet\">\n+  <style>\n+    body {\n+      background-color: #F1F1F1;\n+      padding-left: 1rem;\n+      padding-top: 1rem;\n+    }\n+    * {\n+      font-family: 'Montserrat', sans-serif;\n+      font-weight: 300;\n+    }\n+    .welcome-message {\n+      margin-top: 2rem;\n+      margin-bottom: 1rem;\n+      color: #302C71;\n+      font-size: 30px;\n+      font-weight: 300;\n+      line-height: 36px;\n+    }\n+    .text {\n+      color: rgba(0,0,0,0.87);\n+      font-size: 16px;\n+      font-weight: 300;\n+      line-height: 22px;\n+      margin-bottom: 1rem;\n+    }\n+    .text.thanks {\n+      margin-bottom: 0;\n+    }\n+\n+\n+  </style>\n+</head>\n+<body>\n+<div><img src=\"${HEADER_IMG}\"></div>\n+<div class=\"welcome-message\">Welcome to the <i>All of Us</i> Researcher Workbench!</div>\n+<div class=\"text\">\n+  Thank you for signing up for the <i>All of Us</i> Researcher Workbench.\n+  Your institution expects you to adhere to the following while using the Researcher Workbench.\n+</div>\n+<div class=\"text\">${INSTRUCTIONS}</div>\n+<div class=\"text\">\n+  If you have questions, please contact our support team using the Help Desk widget in the\n+  Workbench or by emailing support@researchallofus.org.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODA5NTU3OA=="}, "originalCommit": {"oid": "f8b933cfb6609ae686159f99ba4e51a18db6d71f"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3057, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}