{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTgzMjcy", "number": 3738, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyMToyN1rOEK6wrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyODoyMlrOEK68xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODgzOTQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/cohorts/CohortService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyMToyN1rOGsPGeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDo0Mjo0NFrOGsQBaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNzk0Ng==", "bodyText": "Can this be .map(cohortMapper::dbModelToClient)", "url": "https://github.com/all-of-us/workbench/pull/3738#discussion_r449037946", "createdAt": "2020-07-02T14:21:27Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/cohorts/CohortService.java", "diffHunk": "@@ -1,19 +1,28 @@\n package org.pmiops.workbench.cohorts;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n import org.pmiops.workbench.db.dao.CohortDao;\n import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.model.Cohort;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n public class CohortService {\n-  private CohortDao cohortDao;\n+  private final CohortDao cohortDao;\n+  private final CohortMapper cohortMapper;\n \n-  public CohortService(CohortDao cohortDao) {\n+  @Autowired\n+  public CohortService(CohortDao cohortDao, CohortMapper cohortMapper) {\n     this.cohortDao = cohortDao;\n+    this.cohortMapper = cohortMapper;\n   }\n \n-  public List<DbCohort> findAll(List<Long> cohortIds) {\n-    return (List<DbCohort>) cohortDao.findAll(cohortIds);\n+  public List<Cohort> findAll(List<Long> cohortIds) {\n+    return ((List<DbCohort>) cohortDao.findAll(cohortIds))\n+        .stream()\n+            .map(dbCohort -> cohortMapper.dbModelToClient(dbCohort))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9c9d419f20c755414a86e0059392e231105ac8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1MzAzMw==", "bodyText": "Done.", "url": "https://github.com/all-of-us/workbench/pull/3738#discussion_r449053033", "createdAt": "2020-07-02T14:42:44Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/cohorts/CohortService.java", "diffHunk": "@@ -1,19 +1,28 @@\n package org.pmiops.workbench.cohorts;\n \n import java.util.List;\n+import java.util.stream.Collectors;\n import org.pmiops.workbench.db.dao.CohortDao;\n import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.model.Cohort;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n public class CohortService {\n-  private CohortDao cohortDao;\n+  private final CohortDao cohortDao;\n+  private final CohortMapper cohortMapper;\n \n-  public CohortService(CohortDao cohortDao) {\n+  @Autowired\n+  public CohortService(CohortDao cohortDao, CohortMapper cohortMapper) {\n     this.cohortDao = cohortDao;\n+    this.cohortMapper = cohortMapper;\n   }\n \n-  public List<DbCohort> findAll(List<Long> cohortIds) {\n-    return (List<DbCohort>) cohortDao.findAll(cohortIds);\n+  public List<Cohort> findAll(List<Long> cohortIds) {\n+    return ((List<DbCohort>) cohortDao.findAll(cohortIds))\n+        .stream()\n+            .map(dbCohort -> cohortMapper.dbModelToClient(dbCohort))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTAzNzk0Ng=="}, "originalCommit": {"oid": "fb9c9d419f20c755414a86e0059392e231105ac8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODg3MDQ3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/dataset/DataSetMapperTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNDoyODoyMlrOGsPZ4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowMjo0MVrOGsQ2xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MjkxNQ==", "bodyText": "Rather than individual elements since DataDictionaryEntry has equal and hashcode can we just have assertThat(dbDataDictionaryEntry).isEqual(dataDictionaryEntry)?", "url": "https://github.com/all-of-us/workbench/pull/3738#discussion_r449042915", "createdAt": "2020-07-02T14:28:22Z", "author": {"login": "NehaBroad"}, "path": "api/src/test/java/org/pmiops/workbench/dataset/DataSetMapperTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.pmiops.workbench.dataset;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.cdr.ConceptBigQueryService;\n+import org.pmiops.workbench.cohorts.CohortMapperImpl;\n+import org.pmiops.workbench.cohorts.CohortService;\n+import org.pmiops.workbench.concept.ConceptService;\n+import org.pmiops.workbench.conceptset.ConceptSetMapperImpl;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbDatasetValue;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Cohort;\n+import org.pmiops.workbench.model.ConceptSet;\n+import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class DataSetMapperTest {\n+\n+  private DbDataset dbDataset;\n+  private DbDataDictionaryEntry dbDataDictionaryEntry;\n+\n+  @Autowired private DataSetMapper dataSetMapper;\n+  @Autowired private ConceptSetDao mockConceptSetDao;\n+  @Autowired private CohortDao mockCohortDao;\n+\n+  @TestConfiguration\n+  @Import({\n+    DataSetMapperImpl.class,\n+    CommonMappers.class,\n+    ConceptSetService.class,\n+    ConceptSetMapperImpl.class,\n+    CohortService.class,\n+    CohortMapperImpl.class\n+  })\n+  @MockBean({\n+    ConceptSetDao.class,\n+    ConceptBigQueryService.class,\n+    ConceptService.class,\n+    CohortDao.class,\n+    UserDao.class\n+  })\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    dbDataset =\n+        DbDataset.builder()\n+            .addVersion(1)\n+            .addDataSetId(101L)\n+            .addName(\"All Blue-eyed Blondes\")\n+            .addIncludesAllParticipants(false)\n+            .addDescription(\"All Blue-eyed Blondes\")\n+            .addLastModifiedTime(Timestamp.from(Instant.now()))\n+            .addWorkspaceId(1L)\n+            .addPrePackagedConceptSets(\n+                DbStorageEnums.prePackagedConceptSetsToStorage(PrePackagedConceptSetEnum.NONE))\n+            .addCohortIds(ImmutableList.of(1L))\n+            .addConceptSetIds(ImmutableList.of(1L))\n+            .addValues(\n+                ImmutableList.of(\n+                    new DbDatasetValue(\n+                        DbStorageEnums.domainToStorage(Domain.CONDITION).toString(), \"value\")))\n+            .build();\n+    DbConceptSet dbConceptSet = new DbConceptSet();\n+    dbConceptSet.setConceptSetId(1L);\n+    DbCohort dbCohort = new DbCohort();\n+    dbCohort.setCohortId(1L);\n+\n+    doReturn(Collections.singletonList(dbConceptSet))\n+        .when(mockConceptSetDao)\n+        .findAll(dbDataset.getConceptSetIds());\n+    doReturn(Collections.singletonList(dbCohort))\n+        .when(mockCohortDao)\n+        .findAll(dbDataset.getCohortIds());\n+\n+    DbCdrVersion cdrVersion = new DbCdrVersion();\n+    cdrVersion.setCdrVersionId(1L);\n+    dbDataDictionaryEntry = new DbDataDictionaryEntry();\n+    dbDataDictionaryEntry.setCdrVersion(cdrVersion);\n+    dbDataDictionaryEntry.setDefinedTime(Timestamp.from(Instant.now()));\n+    dbDataDictionaryEntry.setDataProvenance(\"p\");\n+    dbDataDictionaryEntry.setRelevantOmopTable(\"person\");\n+    dbDataDictionaryEntry.setFieldName(\"field\");\n+    dbDataDictionaryEntry.setOmopCdmStandardOrCustomField(\"field\");\n+    dbDataDictionaryEntry.setDescription(\"desc\");\n+    dbDataDictionaryEntry.setFieldType(\"type\");\n+    dbDataDictionaryEntry.setSourcePpiModule(\"s\");\n+    dbDataDictionaryEntry.setTransformedByRegisteredTierPrivacyMethods(false);\n+  }\n+\n+  @Test\n+  public void dbModelToClientLight() {\n+    final DataSet toClientDataSet = dataSetMapper.dbModelToClientLight(dbDataset);\n+    assertDbModelToClientLight(toClientDataSet, dbDataset);\n+  }\n+\n+  @Test\n+  public void dbModelToClientDataSet() {\n+    final DataSet toClientDataSet = dataSetMapper.dbModelToClient(dbDataset);\n+    assertDbModelToClient(toClientDataSet, dbDataset);\n+  }\n+\n+  @Test\n+  public void dbModelToClientDataDictionaryEntry() {\n+    final DataDictionaryEntry toClientDataDictionaryEntry =\n+        dataSetMapper.dbModelToClient(dbDataDictionaryEntry);\n+    assertDbModelToClient(toClientDataDictionaryEntry, dbDataDictionaryEntry);\n+  }\n+\n+  private void assertDbModelToClient(DataSet dataSet, DbDataset dbDataset) {\n+    assertThat(dbDataset.getCohortIds())\n+        .isEqualTo(dataSet.getCohorts().stream().map(Cohort::getId).collect(Collectors.toList()));\n+    assertThat(dbDataset.getConceptSetIds())\n+        .isEqualTo(\n+            dataSet.getConceptSets().stream().map(ConceptSet::getId).collect(Collectors.toList()));\n+    assertThat(dbDataset.getValues())\n+        .isEqualTo(\n+            dataSet.getDomainValuePairs().stream()\n+                .map(\n+                    dvp ->\n+                        new DbDatasetValue(\n+                            DbStorageEnums.domainToStorage(dvp.getDomain()).toString(),\n+                            dvp.getValue()))\n+                .collect(Collectors.toList()));\n+    assertDbModelToClientLight(dataSet, dbDataset);\n+  }\n+\n+  private void assertDbModelToClientLight(DataSet dataSet, DbDataset dbDataset) {\n+    assertThat(dbDataset.getDataSetId()).isEqualTo(dataSet.getId());\n+    assertThat(dbDataset.getVersion()).isEqualTo(Etags.toVersion(dataSet.getEtag()));\n+    assertThat(dbDataset.getName()).isEqualTo(dataSet.getName());\n+    assertThat(dbDataset.getIncludesAllParticipants())\n+        .isEqualTo(dataSet.getIncludesAllParticipants());\n+    assertThat(dbDataset.getDescription()).isEqualTo(dataSet.getDescription());\n+    assertThat(dbDataset.getWorkspaceId()).isEqualTo(dataSet.getWorkspaceId());\n+    assertThat(dbDataset.getLastModifiedTime().toInstant().toEpochMilli())\n+        .isEqualTo(dataSet.getLastModifiedTime());\n+    assertThat(dbDataset.getPrePackagedConceptSet())\n+        .isEqualTo(\n+            DbStorageEnums.prePackagedConceptSetsToStorage(dataSet.getPrePackagedConceptSet()));\n+  }\n+\n+  private void assertDbModelToClient(\n+      DataDictionaryEntry dataDictionaryEntry, DbDataDictionaryEntry dbDataDictionaryEntry) {\n+    assertThat(dbDataDictionaryEntry.getCdrVersion().getCdrVersionId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9c9d419f20c755414a86e0059392e231105ac8"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA1NjMwNA==", "bodyText": "dbDataDictionaryEntry and dataDictionaryEntry are different types. The equal and hashcode defined in DataDictionaryEntry is only for comparison to objects of type DataDictionaryEntry not DbDataDictionaryEntry", "url": "https://github.com/all-of-us/workbench/pull/3738#discussion_r449056304", "createdAt": "2020-07-02T14:47:34Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/dataset/DataSetMapperTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.pmiops.workbench.dataset;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.cdr.ConceptBigQueryService;\n+import org.pmiops.workbench.cohorts.CohortMapperImpl;\n+import org.pmiops.workbench.cohorts.CohortService;\n+import org.pmiops.workbench.concept.ConceptService;\n+import org.pmiops.workbench.conceptset.ConceptSetMapperImpl;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbDatasetValue;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Cohort;\n+import org.pmiops.workbench.model.ConceptSet;\n+import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class DataSetMapperTest {\n+\n+  private DbDataset dbDataset;\n+  private DbDataDictionaryEntry dbDataDictionaryEntry;\n+\n+  @Autowired private DataSetMapper dataSetMapper;\n+  @Autowired private ConceptSetDao mockConceptSetDao;\n+  @Autowired private CohortDao mockCohortDao;\n+\n+  @TestConfiguration\n+  @Import({\n+    DataSetMapperImpl.class,\n+    CommonMappers.class,\n+    ConceptSetService.class,\n+    ConceptSetMapperImpl.class,\n+    CohortService.class,\n+    CohortMapperImpl.class\n+  })\n+  @MockBean({\n+    ConceptSetDao.class,\n+    ConceptBigQueryService.class,\n+    ConceptService.class,\n+    CohortDao.class,\n+    UserDao.class\n+  })\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    dbDataset =\n+        DbDataset.builder()\n+            .addVersion(1)\n+            .addDataSetId(101L)\n+            .addName(\"All Blue-eyed Blondes\")\n+            .addIncludesAllParticipants(false)\n+            .addDescription(\"All Blue-eyed Blondes\")\n+            .addLastModifiedTime(Timestamp.from(Instant.now()))\n+            .addWorkspaceId(1L)\n+            .addPrePackagedConceptSets(\n+                DbStorageEnums.prePackagedConceptSetsToStorage(PrePackagedConceptSetEnum.NONE))\n+            .addCohortIds(ImmutableList.of(1L))\n+            .addConceptSetIds(ImmutableList.of(1L))\n+            .addValues(\n+                ImmutableList.of(\n+                    new DbDatasetValue(\n+                        DbStorageEnums.domainToStorage(Domain.CONDITION).toString(), \"value\")))\n+            .build();\n+    DbConceptSet dbConceptSet = new DbConceptSet();\n+    dbConceptSet.setConceptSetId(1L);\n+    DbCohort dbCohort = new DbCohort();\n+    dbCohort.setCohortId(1L);\n+\n+    doReturn(Collections.singletonList(dbConceptSet))\n+        .when(mockConceptSetDao)\n+        .findAll(dbDataset.getConceptSetIds());\n+    doReturn(Collections.singletonList(dbCohort))\n+        .when(mockCohortDao)\n+        .findAll(dbDataset.getCohortIds());\n+\n+    DbCdrVersion cdrVersion = new DbCdrVersion();\n+    cdrVersion.setCdrVersionId(1L);\n+    dbDataDictionaryEntry = new DbDataDictionaryEntry();\n+    dbDataDictionaryEntry.setCdrVersion(cdrVersion);\n+    dbDataDictionaryEntry.setDefinedTime(Timestamp.from(Instant.now()));\n+    dbDataDictionaryEntry.setDataProvenance(\"p\");\n+    dbDataDictionaryEntry.setRelevantOmopTable(\"person\");\n+    dbDataDictionaryEntry.setFieldName(\"field\");\n+    dbDataDictionaryEntry.setOmopCdmStandardOrCustomField(\"field\");\n+    dbDataDictionaryEntry.setDescription(\"desc\");\n+    dbDataDictionaryEntry.setFieldType(\"type\");\n+    dbDataDictionaryEntry.setSourcePpiModule(\"s\");\n+    dbDataDictionaryEntry.setTransformedByRegisteredTierPrivacyMethods(false);\n+  }\n+\n+  @Test\n+  public void dbModelToClientLight() {\n+    final DataSet toClientDataSet = dataSetMapper.dbModelToClientLight(dbDataset);\n+    assertDbModelToClientLight(toClientDataSet, dbDataset);\n+  }\n+\n+  @Test\n+  public void dbModelToClientDataSet() {\n+    final DataSet toClientDataSet = dataSetMapper.dbModelToClient(dbDataset);\n+    assertDbModelToClient(toClientDataSet, dbDataset);\n+  }\n+\n+  @Test\n+  public void dbModelToClientDataDictionaryEntry() {\n+    final DataDictionaryEntry toClientDataDictionaryEntry =\n+        dataSetMapper.dbModelToClient(dbDataDictionaryEntry);\n+    assertDbModelToClient(toClientDataDictionaryEntry, dbDataDictionaryEntry);\n+  }\n+\n+  private void assertDbModelToClient(DataSet dataSet, DbDataset dbDataset) {\n+    assertThat(dbDataset.getCohortIds())\n+        .isEqualTo(dataSet.getCohorts().stream().map(Cohort::getId).collect(Collectors.toList()));\n+    assertThat(dbDataset.getConceptSetIds())\n+        .isEqualTo(\n+            dataSet.getConceptSets().stream().map(ConceptSet::getId).collect(Collectors.toList()));\n+    assertThat(dbDataset.getValues())\n+        .isEqualTo(\n+            dataSet.getDomainValuePairs().stream()\n+                .map(\n+                    dvp ->\n+                        new DbDatasetValue(\n+                            DbStorageEnums.domainToStorage(dvp.getDomain()).toString(),\n+                            dvp.getValue()))\n+                .collect(Collectors.toList()));\n+    assertDbModelToClientLight(dataSet, dbDataset);\n+  }\n+\n+  private void assertDbModelToClientLight(DataSet dataSet, DbDataset dbDataset) {\n+    assertThat(dbDataset.getDataSetId()).isEqualTo(dataSet.getId());\n+    assertThat(dbDataset.getVersion()).isEqualTo(Etags.toVersion(dataSet.getEtag()));\n+    assertThat(dbDataset.getName()).isEqualTo(dataSet.getName());\n+    assertThat(dbDataset.getIncludesAllParticipants())\n+        .isEqualTo(dataSet.getIncludesAllParticipants());\n+    assertThat(dbDataset.getDescription()).isEqualTo(dataSet.getDescription());\n+    assertThat(dbDataset.getWorkspaceId()).isEqualTo(dataSet.getWorkspaceId());\n+    assertThat(dbDataset.getLastModifiedTime().toInstant().toEpochMilli())\n+        .isEqualTo(dataSet.getLastModifiedTime());\n+    assertThat(dbDataset.getPrePackagedConceptSet())\n+        .isEqualTo(\n+            DbStorageEnums.prePackagedConceptSetsToStorage(dataSet.getPrePackagedConceptSet()));\n+  }\n+\n+  private void assertDbModelToClient(\n+      DataDictionaryEntry dataDictionaryEntry, DbDataDictionaryEntry dbDataDictionaryEntry) {\n+    assertThat(dbDataDictionaryEntry.getCdrVersion().getCdrVersionId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MjkxNQ=="}, "originalCommit": {"oid": "fb9c9d419f20c755414a86e0059392e231105ac8"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2NjY5Mw==", "bodyText": "Oh man i just missed that :D i thought its the same type DataDictionaryEntry", "url": "https://github.com/all-of-us/workbench/pull/3738#discussion_r449066693", "createdAt": "2020-07-02T15:02:41Z", "author": {"login": "NehaBroad"}, "path": "api/src/test/java/org/pmiops/workbench/dataset/DataSetMapperTest.java", "diffHunk": "@@ -0,0 +1,194 @@\n+package org.pmiops.workbench.dataset;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.doReturn;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.sql.Timestamp;\n+import java.time.Instant;\n+import java.util.Collections;\n+import java.util.stream.Collectors;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.cdr.ConceptBigQueryService;\n+import org.pmiops.workbench.cohorts.CohortMapperImpl;\n+import org.pmiops.workbench.cohorts.CohortService;\n+import org.pmiops.workbench.concept.ConceptService;\n+import org.pmiops.workbench.conceptset.ConceptSetMapperImpl;\n+import org.pmiops.workbench.conceptset.ConceptSetService;\n+import org.pmiops.workbench.db.dao.CohortDao;\n+import org.pmiops.workbench.db.dao.ConceptSetDao;\n+import org.pmiops.workbench.db.dao.UserDao;\n+import org.pmiops.workbench.db.model.DbCdrVersion;\n+import org.pmiops.workbench.db.model.DbCohort;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbDataDictionaryEntry;\n+import org.pmiops.workbench.db.model.DbDataset;\n+import org.pmiops.workbench.db.model.DbDatasetValue;\n+import org.pmiops.workbench.db.model.DbStorageEnums;\n+import org.pmiops.workbench.model.Cohort;\n+import org.pmiops.workbench.model.ConceptSet;\n+import org.pmiops.workbench.model.DataDictionaryEntry;\n+import org.pmiops.workbench.model.DataSet;\n+import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.PrePackagedConceptSetEnum;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class DataSetMapperTest {\n+\n+  private DbDataset dbDataset;\n+  private DbDataDictionaryEntry dbDataDictionaryEntry;\n+\n+  @Autowired private DataSetMapper dataSetMapper;\n+  @Autowired private ConceptSetDao mockConceptSetDao;\n+  @Autowired private CohortDao mockCohortDao;\n+\n+  @TestConfiguration\n+  @Import({\n+    DataSetMapperImpl.class,\n+    CommonMappers.class,\n+    ConceptSetService.class,\n+    ConceptSetMapperImpl.class,\n+    CohortService.class,\n+    CohortMapperImpl.class\n+  })\n+  @MockBean({\n+    ConceptSetDao.class,\n+    ConceptBigQueryService.class,\n+    ConceptService.class,\n+    CohortDao.class,\n+    UserDao.class\n+  })\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    dbDataset =\n+        DbDataset.builder()\n+            .addVersion(1)\n+            .addDataSetId(101L)\n+            .addName(\"All Blue-eyed Blondes\")\n+            .addIncludesAllParticipants(false)\n+            .addDescription(\"All Blue-eyed Blondes\")\n+            .addLastModifiedTime(Timestamp.from(Instant.now()))\n+            .addWorkspaceId(1L)\n+            .addPrePackagedConceptSets(\n+                DbStorageEnums.prePackagedConceptSetsToStorage(PrePackagedConceptSetEnum.NONE))\n+            .addCohortIds(ImmutableList.of(1L))\n+            .addConceptSetIds(ImmutableList.of(1L))\n+            .addValues(\n+                ImmutableList.of(\n+                    new DbDatasetValue(\n+                        DbStorageEnums.domainToStorage(Domain.CONDITION).toString(), \"value\")))\n+            .build();\n+    DbConceptSet dbConceptSet = new DbConceptSet();\n+    dbConceptSet.setConceptSetId(1L);\n+    DbCohort dbCohort = new DbCohort();\n+    dbCohort.setCohortId(1L);\n+\n+    doReturn(Collections.singletonList(dbConceptSet))\n+        .when(mockConceptSetDao)\n+        .findAll(dbDataset.getConceptSetIds());\n+    doReturn(Collections.singletonList(dbCohort))\n+        .when(mockCohortDao)\n+        .findAll(dbDataset.getCohortIds());\n+\n+    DbCdrVersion cdrVersion = new DbCdrVersion();\n+    cdrVersion.setCdrVersionId(1L);\n+    dbDataDictionaryEntry = new DbDataDictionaryEntry();\n+    dbDataDictionaryEntry.setCdrVersion(cdrVersion);\n+    dbDataDictionaryEntry.setDefinedTime(Timestamp.from(Instant.now()));\n+    dbDataDictionaryEntry.setDataProvenance(\"p\");\n+    dbDataDictionaryEntry.setRelevantOmopTable(\"person\");\n+    dbDataDictionaryEntry.setFieldName(\"field\");\n+    dbDataDictionaryEntry.setOmopCdmStandardOrCustomField(\"field\");\n+    dbDataDictionaryEntry.setDescription(\"desc\");\n+    dbDataDictionaryEntry.setFieldType(\"type\");\n+    dbDataDictionaryEntry.setSourcePpiModule(\"s\");\n+    dbDataDictionaryEntry.setTransformedByRegisteredTierPrivacyMethods(false);\n+  }\n+\n+  @Test\n+  public void dbModelToClientLight() {\n+    final DataSet toClientDataSet = dataSetMapper.dbModelToClientLight(dbDataset);\n+    assertDbModelToClientLight(toClientDataSet, dbDataset);\n+  }\n+\n+  @Test\n+  public void dbModelToClientDataSet() {\n+    final DataSet toClientDataSet = dataSetMapper.dbModelToClient(dbDataset);\n+    assertDbModelToClient(toClientDataSet, dbDataset);\n+  }\n+\n+  @Test\n+  public void dbModelToClientDataDictionaryEntry() {\n+    final DataDictionaryEntry toClientDataDictionaryEntry =\n+        dataSetMapper.dbModelToClient(dbDataDictionaryEntry);\n+    assertDbModelToClient(toClientDataDictionaryEntry, dbDataDictionaryEntry);\n+  }\n+\n+  private void assertDbModelToClient(DataSet dataSet, DbDataset dbDataset) {\n+    assertThat(dbDataset.getCohortIds())\n+        .isEqualTo(dataSet.getCohorts().stream().map(Cohort::getId).collect(Collectors.toList()));\n+    assertThat(dbDataset.getConceptSetIds())\n+        .isEqualTo(\n+            dataSet.getConceptSets().stream().map(ConceptSet::getId).collect(Collectors.toList()));\n+    assertThat(dbDataset.getValues())\n+        .isEqualTo(\n+            dataSet.getDomainValuePairs().stream()\n+                .map(\n+                    dvp ->\n+                        new DbDatasetValue(\n+                            DbStorageEnums.domainToStorage(dvp.getDomain()).toString(),\n+                            dvp.getValue()))\n+                .collect(Collectors.toList()));\n+    assertDbModelToClientLight(dataSet, dbDataset);\n+  }\n+\n+  private void assertDbModelToClientLight(DataSet dataSet, DbDataset dbDataset) {\n+    assertThat(dbDataset.getDataSetId()).isEqualTo(dataSet.getId());\n+    assertThat(dbDataset.getVersion()).isEqualTo(Etags.toVersion(dataSet.getEtag()));\n+    assertThat(dbDataset.getName()).isEqualTo(dataSet.getName());\n+    assertThat(dbDataset.getIncludesAllParticipants())\n+        .isEqualTo(dataSet.getIncludesAllParticipants());\n+    assertThat(dbDataset.getDescription()).isEqualTo(dataSet.getDescription());\n+    assertThat(dbDataset.getWorkspaceId()).isEqualTo(dataSet.getWorkspaceId());\n+    assertThat(dbDataset.getLastModifiedTime().toInstant().toEpochMilli())\n+        .isEqualTo(dataSet.getLastModifiedTime());\n+    assertThat(dbDataset.getPrePackagedConceptSet())\n+        .isEqualTo(\n+            DbStorageEnums.prePackagedConceptSetsToStorage(dataSet.getPrePackagedConceptSet()));\n+  }\n+\n+  private void assertDbModelToClient(\n+      DataDictionaryEntry dataDictionaryEntry, DbDataDictionaryEntry dbDataDictionaryEntry) {\n+    assertThat(dbDataDictionaryEntry.getCdrVersion().getCdrVersionId())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA0MjkxNQ=="}, "originalCommit": {"oid": "fb9c9d419f20c755414a86e0059392e231105ac8"}, "originalPosition": 173}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2619, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}