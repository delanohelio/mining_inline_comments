{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMDEzOTUx", "number": 4055, "title": "[RW-5420][risk=no] Runtime operations store", "bodyText": "runtimeOpsStore holds a map of workspace namespaces to any ongoing requests pertaining to that workspace's cluster.\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-09-23T20:10:41Z", "url": "https://github.com/all-of-us/workbench/pull/4055", "merged": true, "mergeCommit": {"oid": "4d834a3756e7f332000c4c1d627d06279ab36652"}, "closed": true, "closedAt": "2020-09-24T18:46:55Z", "author": {"login": "als364"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLIy4SgH2gAyNDkyMDEzOTUxOmEzMTllMjgyODNmZmM1MWU2YzQ2MThlNDM0YzNlNjhjOWMxYjU2ZDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMFPvtgH2gAyNDkyMDEzOTUxOjdlN2M4MGU4MjNlNDczMWY0YTMyODRkMTExN2Q1NzY0OGRiZTQzMmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a319e28283ffc51e6c4618e434c3e68c9c1b56d8", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/a319e28283ffc51e6c4618e434c3e68c9c1b56d8", "committedDate": "2020-09-21T19:45:13Z", "message": "unborking rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db02a3fe9e27beea884c42576a015d34eddb73db", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/db02a3fe9e27beea884c42576a015d34eddb73db", "committedDate": "2020-09-22T14:49:41Z", "message": "shelving..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a8057d51e18edacc7289bd7a0c60878fec1e5e", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/26a8057d51e18edacc7289bd7a0c60878fec1e5e", "committedDate": "2020-09-22T17:53:00Z", "message": "unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07054e1dbf3602e64c44bd974a08d4a82f8f8459", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/07054e1dbf3602e64c44bd974a08d4a82f8f8459", "committedDate": "2020-09-23T14:35:10Z", "message": "shelving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b04e50b20a0504fb284850c5e91c515760ff62ba", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/b04e50b20a0504fb284850c5e91c515760ff62ba", "committedDate": "2020-09-23T15:26:47Z", "message": "oh my god"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bcd6bade8288b6a3e60aa94bc4715d2afcc2f38", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/8bcd6bade8288b6a3e60aa94bc4715d2afcc2f38", "committedDate": "2020-09-23T17:08:06Z", "message": "think this works now"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16468fdd4c84dcb0fbd15864a90870c24001e2eb", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/16468fdd4c84dcb0fbd15864a90870c24001e2eb", "committedDate": "2020-09-23T17:26:36Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e67724b48084a9a5435463fbfc3bdb7314102cb4", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/e67724b48084a9a5435463fbfc3bdb7314102cb4", "committedDate": "2020-09-23T20:21:06Z", "message": "unshadow runtimeOpsStore in runtime panel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "439c6792b54fc28ba2005841a5e2b8d698a56552", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/439c6792b54fc28ba2005841a5e2b8d698a56552", "committedDate": "2020-09-23T21:27:27Z", "message": "fixing immediate problems"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/3be7a031bff416b3c300b686d8f0e6dc95e9eaf2", "committedDate": "2020-09-24T15:11:29Z", "message": "show outstanding runtime op test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/50355806be9349bf88960f88ceeb30372ece1f11", "committedDate": "2020-09-24T15:32:40Z", "message": "another tick"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Njg3MDEy", "url": "https://github.com/all-of-us/workbench/pull/4055#pullrequestreview-495687012", "createdAt": "2020-09-24T15:20:45Z", "commit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyMDo0NVrOHXgIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjowMToyNFrOHXh8Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNTY4MA==", "bodyText": "i think our standard is to use absolute paths from the src root", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494405680", "createdAt": "2020-09-24T15:20:45Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -9,7 +9,10 @@ import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n import {RuntimeApiStub} from 'testing/stubs/runtime-api-stub';\n import {RuntimeApi} from 'generated/fetch/api';\n import {WorkspaceAccessLevel} from 'generated/fetch';\n-\n+import {\n+  markRuntimeOperationCompleteForWorkspace,\n+  updateRuntimeOpsStoreForWorkspaceNamespace\n+} from \"../../utils/stores\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNzQ3OA==", "bodyText": "nit: separate with newline? there are two imports here unlike the other lines", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494407478", "createdAt": "2020-09-24T15:23:07Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -7,6 +7,14 @@ import {runtimeApi} from 'app/services/swagger-fetch-clients';\n import colors, {addOpacity} from 'app/styles/colors';\n import {reactStyles, withCurrentWorkspace} from 'app/utils';\n import {allMachineTypes, validLeonardoMachineTypes} from 'app/utils/machines';\n+import {\n+  abortRuntimeOperationForWorkspace,\n+  markRuntimeOperationCompleteForWorkspace,\n+  RuntimeOperation, RuntimeOpsStore,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwOTIxMg==", "bodyText": "I think the term \"Outstanding\" can be confusing for some of our users. Maybe \"Active\" or \"Running\"?", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494409212", "createdAt": "2020-09-24T15:25:27Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -40,7 +48,25 @@ const styles = reactStyles({\n \n const defaultMachineType = allMachineTypes.find(({name}) => name === 'n1-standard-4');\n \n+const OutstandingRuntimeOp = ({operation, workspaceNamespace}) => {\n+  return <React.Fragment>\n+    <h3 style={styles.sectionHeader}>Outstanding Runtime Operations</h3>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMzUxMw==", "bodyText": "can this be combined with the conditional above?", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494413513", "createdAt": "2020-09-24T15:30:56Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -88,14 +121,24 @@ export const RuntimePanel = withCurrentWorkspace()(\n     }\n \n     render() {\n+      const {runtimeOps, workspace} = this.props;\n       const {loading, error, runtime} = this.state;\n+\n+      const outstandingRuntimeOp: RuntimeOperation = runtimeOps.opsByWorkspaceNamespace[workspace.namespace];\n+\n       if (loading) {\n         return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n       } else if (error) {\n         return <div>Error loading compute configuration</div>;\n       } else if (!runtime) {\n         // TODO(RW-5591): Create runtime page goes here.\n-        return <div>No runtime exists yet</div>;\n+        return <React.Fragment>\n+          <div>No runtime exists yet</div>\n+          {outstandingRuntimeOp && <hr/>}\n+          {outstandingRuntimeOp && <div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be7a031bff416b3c300b686d8f0e6dc95e9eaf2"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyMzMyNA==", "bodyText": "This is probably due to my unfamiliarity with UI testing but, can you explain how we're testing different calls in each test? I can see that you're changing what gets mocked in each test but it looks like the same call, runInitializerAndTimers is getting invoked in each test.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494423324", "createdAt": "2020-09-24T15:44:40Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -311,4 +318,37 @@ describe('RuntimeInitializer', () => {\n     }\n   });\n \n+  it('should use and clean the runtimeOpsStore for get', async() => {\n+    mockGetRuntimeCalls([baseRuntime]);\n+    await runInitializerAndTimers();\n+    expect(mockSetRuntimeOpsStore).toHaveBeenCalled();\n+    expect(runtimeOpsStore.get().opsByWorkspaceNamespace[workspaceNamespace]).toBeUndefined();\n+  });\n+\n+  it('should use and clean the runtimeOpsStore for create', async() => {\n+    mockGetRuntime.mockRejectedValueOnce(new Response(null, {status: 404}));\n+    mockCreateRuntime.mockImplementationOnce(async(workspaceNamespace) => {\n+      return {status: RuntimeStatus.Creating};\n+    });\n+    await runInitializerAndTimers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNTk5NA==", "bodyText": "this should probably be a dataprocConfig by default since that's what all of our runtimes are right now.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494425994", "createdAt": "2020-09-24T15:48:16Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -166,37 +171,82 @@ export class LeoRuntimeInitializer {\n   }\n \n   private async getRuntime(): Promise<Runtime> {\n-    return await runtimeApi().getRuntime(this.workspaceNamespace, {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'get',\n+      aborter: aborter\n+    });\n+    await promise;\n+    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n+    return promise;\n   }\n \n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    await runtimeApi().createRuntime(this.workspaceNamespace,\n-      {configurationType: RuntimeConfigurationType.DefaultDataproc},\n-      {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    let runtime: Runtime;\n+    if (serverConfigStore.getValue().enableCustomRuntimes) {\n+      // TODO(RW-3418): allow custom runtimes, maybe plumb default through serverConfigStore?\n+      runtime = {\n+        gceConfig: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQyNjgxMg==", "bodyText": "nit: you can just await the createRuntime call without making a variable", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494426812", "createdAt": "2020-09-24T15:49:20Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -166,37 +171,82 @@ export class LeoRuntimeInitializer {\n   }\n \n   private async getRuntime(): Promise<Runtime> {\n-    return await runtimeApi().getRuntime(this.workspaceNamespace, {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'get',\n+      aborter: aborter\n+    });\n+    await promise;\n+    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n+    return promise;\n   }\n \n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    await runtimeApi().createRuntime(this.workspaceNamespace,\n-      {configurationType: RuntimeConfigurationType.DefaultDataproc},\n-      {signal: this.abortSignal});\n+    const aborter = new AbortController();\n+    let runtime: Runtime;\n+    if (serverConfigStore.getValue().enableCustomRuntimes) {\n+      // TODO(RW-3418): allow custom runtimes, maybe plumb default through serverConfigStore?\n+      runtime = {\n+        gceConfig: {\n+          diskSize: 50,\n+          machineType: 'n1-standard-4'\n+        }\n+      };\n+    } else {\n+      runtime = {configurationType: RuntimeConfigurationType.DefaultDataproc};\n+    }\n+    const promise = runtimeApi().createRuntime(this.workspaceNamespace,\n+      runtime,\n+      {signal: this.pollAbortSignal});\n+    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n+      promise: promise,\n+      operation: 'create',\n+      aborter: aborter\n+    });\n     this.createCount++;\n+    await promise;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMjc4NQ==", "bodyText": "why is this one let while the others are const?", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494432785", "createdAt": "2020-09-24T15:57:39Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -30,6 +30,46 @@ interface ProfileStore {\n \n export const profileStore = atom<ProfileStore>({});\n \n+export interface RuntimeOperation {\n+  promise: Promise<any>;\n+  operation: string;\n+  aborter: AbortController;\n+}\n+\n+export interface WorkspaceRuntimeOperationMap {\n+  [workspaceNamespace: string]: RuntimeOperation;\n+}\n+\n+export interface RuntimeOpsStore {\n+  opsByWorkspaceNamespace: WorkspaceRuntimeOperationMap;\n+}\n+\n+export const runtimeOpsStore = atom<RuntimeOpsStore>({opsByWorkspaceNamespace: {}});\n+\n+export const updateRuntimeOpsStoreForWorkspaceNamespace = (workspaceNamespace: string, runtimeOperation: RuntimeOperation) => {\n+  const opsByWorkspaceNamespace = runtimeOpsStore.get().opsByWorkspaceNamespace;\n+  opsByWorkspaceNamespace[workspaceNamespace] = runtimeOperation;\n+  runtimeOpsStore.set({opsByWorkspaceNamespace: opsByWorkspaceNamespace});\n+};\n+\n+export let markRuntimeOperationCompleteForWorkspace = (workspaceNamespace: string) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzNTQwNg==", "bodyText": "do we need to set the entire map for this to work? I would have thought that its sufficient to just update the map with the line above.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494435406", "createdAt": "2020-09-24T16:01:24Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/stores.tsx", "diffHunk": "@@ -30,6 +30,46 @@ interface ProfileStore {\n \n export const profileStore = atom<ProfileStore>({});\n \n+export interface RuntimeOperation {\n+  promise: Promise<any>;\n+  operation: string;\n+  aborter: AbortController;\n+}\n+\n+export interface WorkspaceRuntimeOperationMap {\n+  [workspaceNamespace: string]: RuntimeOperation;\n+}\n+\n+export interface RuntimeOpsStore {\n+  opsByWorkspaceNamespace: WorkspaceRuntimeOperationMap;\n+}\n+\n+export const runtimeOpsStore = atom<RuntimeOpsStore>({opsByWorkspaceNamespace: {}});\n+\n+export const updateRuntimeOpsStoreForWorkspaceNamespace = (workspaceNamespace: string, runtimeOperation: RuntimeOperation) => {\n+  const opsByWorkspaceNamespace = runtimeOpsStore.get().opsByWorkspaceNamespace;\n+  opsByWorkspaceNamespace[workspaceNamespace] = runtimeOperation;\n+  runtimeOpsStore.set({opsByWorkspaceNamespace: opsByWorkspaceNamespace});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50355806be9349bf88960f88ceeb30372ece1f11"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c569b7b82672a0ceb72830c52b06b5e3f82d32a5", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/c569b7b82672a0ceb72830c52b06b5e3f82d32a5", "committedDate": "2020-09-24T17:09:18Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61ce0ca42a085c6a60b5499f2c0c42cfd08887d9", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/61ce0ca42a085c6a60b5499f2c0c42cfd08887d9", "committedDate": "2020-09-24T17:21:03Z", "message": "oops dataproc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8137aab2fd1842a2084e73a1216ac593f420ac59", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/8137aab2fd1842a2084e73a1216ac593f420ac59", "committedDate": "2020-09-24T17:21:31Z", "message": "argh"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODE2MjAz", "url": "https://github.com/all-of-us/workbench/pull/4055#pullrequestreview-495816203", "createdAt": "2020-09-24T17:56:13Z", "commit": {"oid": "8137aab2fd1842a2084e73a1216ac593f420ac59"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1NjoxM1rOHXmQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1NjoxM1rOHXmQDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNTk5Nw==", "bodyText": "nit: I would either change all of the variable naming to go from outstanding -> active or only use the \"Active\" term on the user facing string.\nHaving both synonymous terms like in this line can be confusing when searching for code references.", "url": "https://github.com/all-of-us/workbench/pull/4055#discussion_r494505997", "createdAt": "2020-09-24T17:56:13Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -242,10 +243,10 @@ export const RuntimePanel = fp.flow(withCurrentWorkspace(), withStore(runtimeOps\n         <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n           <Button disabled={true}>Create</Button>\n         </FlexRow>\n-        {outstandingRuntimeOp && <hr/>}\n-        {outstandingRuntimeOp && <div>\n-          <OutstandingRuntimeOp operation={outstandingRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>\n-        </div>}\n+        {outstandingRuntimeOp && <React.Fragment>\n+          <hr/>\n+          <ActiveRuntimeOp operation={outstandingRuntimeOp.operation} workspaceNamespace={workspace.namespace}/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8137aab2fd1842a2084e73a1216ac593f420ac59"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8767b61c3e9f87597a54616f8e93d1b51f917550", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/8767b61c3e9f87597a54616f8e93d1b51f917550", "committedDate": "2020-09-24T17:58:50Z", "message": "outstanding -> active"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e7c80e823e4731f4a3284d1117d57648dbe432a", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/7e7c80e823e4731f4a3284d1117d57648dbe432a", "committedDate": "2020-09-24T18:11:03Z", "message": "oy gevalt"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4091, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}