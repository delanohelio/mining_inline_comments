{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwMjg0MzY5", "number": 4030, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxNDo1MFrOEltntA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyOTo1NFrOEluQxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTgwMjEyOnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxNDo1MFrOHVVneA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTo1MTowOVrOHVn7wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzNjMxMg==", "bodyText": "Maybe include a short description here describing how this the absolute URI (including the bucket name) and the relative path. That's pretty clear though.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492136312", "createdAt": "2020-09-21T15:14:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5876,6 +5876,8 @@ definitions:\n   AdminWorkspaceCloudStorageCounts:\n     type: object\n     properties:\n+      storageBucketPath:\n+        type: string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNjQxNg==", "bodyText": "Yep \u2013\u00a0done.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492436416", "createdAt": "2020-09-22T01:51:09Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5876,6 +5876,8 @@ definitions:\n   AdminWorkspaceCloudStorageCounts:\n     type: object\n     properties:\n+      storageBucketPath:\n+        type: string", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzNjMxMg=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTgxMzk2OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToxNjoyOVrOHVVvCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTozNzo0N1rOHVnwuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzODI1MA==", "bodyText": "It's almost  worth making an AbstractApplicationRunListener with empty overrides for everything and extending that so you only have methods that actually do things in this class.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492138250", "createdAt": "2020-09-21T15:16:29Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzMzU5Mw==", "bodyText": "Not worth creating two class files for one line of code, IMO", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492433593", "createdAt": "2020-09-22T01:37:47Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjEzODI1MA=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTgzOTQyOnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMDowOVrOHVV_KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTozNzoyOFrOHVnweg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MjM3Nw==", "bodyText": "It would be great to have a comment specific to this implementation of the method giving the why/how, etc. Could this break any existing code (ours or anyone else's) that depends on this scope, or is the idea that it will be clobbered later on in the application startup and be associated with the usual scope and properties, etc.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492142377", "createdAt": "2020-09-21T15:20:09Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**\n+   * Called immediately when the run method has first started. Can be used for very early\n+   * initialization.\n+   */\n+  @Override\n+  public void starting() {}\n+\n+  /**\n+   * Called once the environment has been prepared, but before the {@link ApplicationContext} has\n+   * been created.\n+   *\n+   * @param environment the environment\n+   */\n+  @Override\n+  public void environmentPrepared(ConfigurableEnvironment environment) {}\n+\n+  /**\n+   * Called once the {@link ApplicationContext} has been created and prepared, but before sources\n+   * have been loaded.\n+   *\n+   * @param context the application context\n+   */\n+  @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzMzUzMA==", "bodyText": "I removed most of the boilerplate Javadoc. The class-level comment is meant to capture what's going on here, I don't think there's much else to add at this level.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492433530", "createdAt": "2020-09-22T01:37:28Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**\n+   * Called immediately when the run method has first started. Can be used for very early\n+   * initialization.\n+   */\n+  @Override\n+  public void starting() {}\n+\n+  /**\n+   * Called once the environment has been prepared, but before the {@link ApplicationContext} has\n+   * been created.\n+   *\n+   * @param environment the environment\n+   */\n+  @Override\n+  public void environmentPrepared(ConfigurableEnvironment environment) {}\n+\n+  /**\n+   * Called once the {@link ApplicationContext} has been created and prepared, but before sources\n+   * have been loaded.\n+   *\n+   * @param context the application context\n+   */\n+  @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MjM3Nw=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTg0Mjk5OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyMDo0NVrOHVWBRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTo0MzoyM1rOHVn1Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MjkxNg==", "bodyText": "I'd log something here as a breadcrumb to indicate that you're tweaking the default behavior of scope requests.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492142916", "createdAt": "2020-09-21T15:20:45Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**\n+   * Called immediately when the run method has first started. Can be used for very early\n+   * initialization.\n+   */\n+  @Override\n+  public void starting() {}\n+\n+  /**\n+   * Called once the environment has been prepared, but before the {@link ApplicationContext} has\n+   * been created.\n+   *\n+   * @param environment the environment\n+   */\n+  @Override\n+  public void environmentPrepared(ConfigurableEnvironment environment) {}\n+\n+  /**\n+   * Called once the {@link ApplicationContext} has been created and prepared, but before sources\n+   * have been loaded.\n+   *\n+   * @param context the application context\n+   */\n+  @Override\n+  public void contextPrepared(ConfigurableApplicationContext context) {\n+    context\n+        .getBeanFactory()\n+        .registerScope(WebApplicationContext.SCOPE_REQUEST, new SimpleThreadScope());\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNDcwNw==", "bodyText": "Is anyone ever really paying attention to Spring's startup text parade? I'm skeptical, but adding something b/c it's easy.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492434707", "createdAt": "2020-09-22T01:43:23Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**\n+   * Called immediately when the run method has first started. Can be used for very early\n+   * initialization.\n+   */\n+  @Override\n+  public void starting() {}\n+\n+  /**\n+   * Called once the environment has been prepared, but before the {@link ApplicationContext} has\n+   * been created.\n+   *\n+   * @param environment the environment\n+   */\n+  @Override\n+  public void environmentPrepared(ConfigurableEnvironment environment) {}\n+\n+  /**\n+   * Called once the {@link ApplicationContext} has been created and prepared, but before sources\n+   * have been loaded.\n+   *\n+   * @param context the application context\n+   */\n+  @Override\n+  public void contextPrepared(ConfigurableApplicationContext context) {\n+    context\n+        .getBeanFactory()\n+        .registerScope(WebApplicationContext.SCOPE_REQUEST, new SimpleThreadScope());\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0MjkxNg=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTg2NjU2OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyNDowMFrOHVWQkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTo0MDo0MVrOHVnzFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0NjgzNA==", "bodyText": "Also, I'd consider extending SimpleThreadScope with something like AoUPreConfigRequestScopePlaceholder or otherwise suspicious and using that so it shows up in stack traces or config graphs, which would increase the likelihood of a maintainer finding this.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492146834", "createdAt": "2020-09-21T15:24:00Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**\n+   * Called immediately when the run method has first started. Can be used for very early\n+   * initialization.\n+   */\n+  @Override\n+  public void starting() {}\n+\n+  /**\n+   * Called once the environment has been prepared, but before the {@link ApplicationContext} has\n+   * been created.\n+   *\n+   * @param environment the environment\n+   */\n+  @Override\n+  public void environmentPrepared(ConfigurableEnvironment environment) {}\n+\n+  /**\n+   * Called once the {@link ApplicationContext} has been created and prepared, but before sources\n+   * have been loaded.\n+   *\n+   * @param context the application context\n+   */\n+  @Override\n+  public void contextPrepared(ConfigurableApplicationContext context) {\n+    context\n+        .getBeanFactory()\n+        .registerScope(WebApplicationContext.SCOPE_REQUEST, new SimpleThreadScope());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNDE5OA==", "bodyText": "Could be nice, but sounds pretty hypothetical. I'd rather not end up with more files floating around here.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492434198", "createdAt": "2020-09-22T01:40:41Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {\n+\n+  public ApplicationRunListener(SpringApplication application, String[] args) {}\n+\n+  /**\n+   * Called immediately when the run method has first started. Can be used for very early\n+   * initialization.\n+   */\n+  @Override\n+  public void starting() {}\n+\n+  /**\n+   * Called once the environment has been prepared, but before the {@link ApplicationContext} has\n+   * been created.\n+   *\n+   * @param environment the environment\n+   */\n+  @Override\n+  public void environmentPrepared(ConfigurableEnvironment environment) {}\n+\n+  /**\n+   * Called once the {@link ApplicationContext} has been created and prepared, but before sources\n+   * have been loaded.\n+   *\n+   * @param context the application context\n+   */\n+  @Override\n+  public void contextPrepared(ConfigurableApplicationContext context) {\n+    context\n+        .getBeanFactory()\n+        .registerScope(WebApplicationContext.SCOPE_REQUEST, new SimpleThreadScope());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0NjgzNA=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTg4MTY4OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyNjowM1rOHVWaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMjo1Njo0N1rOHV4q9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0OTI5MQ==", "bodyText": "nit/tangent: I didn't know about this class (haven't worked with the tools much), but a couple of our other configs are named with a SpringConfiguration suffix (to distinguish from other config classes). I navigate randomly so much that I forget to look at package names, though I'm getting better.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492149291", "createdAt": "2020-09-21T15:26:03Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "diffHunk": "@@ -9,20 +9,23 @@\n import org.apache.commons.cli.Options;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n import org.pmiops.workbench.firecloud.FirecloudTransforms;\n import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n \n /**\n  * A tool that takes a Workspace namespace / Firecloud Project ID and returns details for any\n  * workspaces found.\n- *\n- * <p>Details currently include... - Name - Creator Email - Collaborator Emails and Access Levels\n  */\n @Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n public class FetchWorkspaceDetails {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNTg1Nw==", "bodyText": "Was this meant to be attached to the CommandLineToolConfig file?\nI also got annoyed at that naming degeneracy at some point. We have many, many more Spring configs than other configs, so I'd probably bend towards adding a suffix to non-Spring config files if we did need to add clarity. (Something like \"AppConfig\" or \"ConfigModel\" might be clear.)\nBut I've mostly just accepted that there's probably no great solution here.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492435857", "createdAt": "2020-09-22T01:48:48Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "diffHunk": "@@ -9,20 +9,23 @@\n import org.apache.commons.cli.Options;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n import org.pmiops.workbench.firecloud.FirecloudTransforms;\n import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n \n /**\n  * A tool that takes a Workspace namespace / Firecloud Project ID and returns details for any\n  * workspaces found.\n- *\n- * <p>Details currently include... - Name - Creator Email - Collaborator Emails and Access Levels\n  */\n @Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n public class FetchWorkspaceDetails {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0OTI5MQ=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcwMTAyOA==", "bodyText": "I was confused mainly on why FileWorkspaceDetails seems to have @Configuration in it. But maybe all the tools work that way.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492701028", "createdAt": "2020-09-22T12:42:09Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "diffHunk": "@@ -9,20 +9,23 @@\n import org.apache.commons.cli.Options;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n import org.pmiops.workbench.firecloud.FirecloudTransforms;\n import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n \n /**\n  * A tool that takes a Workspace namespace / Firecloud Project ID and returns details for any\n  * workspaces found.\n- *\n- * <p>Details currently include... - Name - Creator Email - Collaborator Emails and Access Levels\n  */\n @Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n public class FetchWorkspaceDetails {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0OTI5MQ=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjcxMDY0NA==", "bodyText": "Ah \u2013 yes, all the tools work this way. Technically, it's just a configuration that provides a @CommandLineRunner bean. Spring docs for that annotation:\nInterface used to indicate that a bean should <em>run</em> when it is contained within a {@link SpringApplication}.\n\nIt's a bit roundabout, but it's definitely the most reliable setup we've had for CLI tools yet.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492710644", "createdAt": "2020-09-22T12:56:47Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "diffHunk": "@@ -9,20 +9,23 @@\n import org.apache.commons.cli.Options;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n import org.pmiops.workbench.firecloud.FirecloudTransforms;\n import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n \n /**\n  * A tool that takes a Workspace namespace / Firecloud Project ID and returns details for any\n  * workspaces found.\n- *\n- * <p>Details currently include... - Name - Creator Email - Collaborator Emails and Access Levels\n  */\n @Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})\n public class FetchWorkspaceDetails {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE0OTI5MQ=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkwMzcyOnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyOTowOFrOHVWoww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTo0NDozM1rOHVn2FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1MzAyNw==", "bodyText": "Is it possible to pull in the WorkspaceAdminService (or other high-level service) instead? Some of this information is already being compiled for the admin page. There are a ton of transient dependencies though, so I can understand why you wouldn't.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492153027", "createdAt": "2020-09-21T15:29:08Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "diffHunk": "@@ -9,20 +9,23 @@\n import org.apache.commons.cli.Options;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n import org.pmiops.workbench.firecloud.FirecloudTransforms;\n import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n \n /**\n  * A tool that takes a Workspace namespace / Firecloud Project ID and returns details for any\n  * workspaces found.\n- *\n- * <p>Details currently include... - Name - Creator Email - Collaborator Emails and Access Levels\n  */\n @Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzNDk2NA==", "bodyText": "Maybe it's possible, but I don't think it would be preferable. I'm pulling in the smallest service that has the methods needed for this PR, which I think is the right thing to do, dependency-wise.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492434964", "createdAt": "2020-09-22T01:44:33Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/FetchWorkspaceDetails.java", "diffHunk": "@@ -9,20 +9,23 @@\n import org.apache.commons.cli.Options;\n import org.pmiops.workbench.db.dao.WorkspaceDao;\n import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.firecloud.FireCloudConfig;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.FireCloudServiceImpl;\n import org.pmiops.workbench.firecloud.FirecloudTransforms;\n import org.pmiops.workbench.firecloud.api.WorkspacesApi;\n import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n import org.springframework.boot.CommandLineRunner;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Import;\n \n /**\n  * A tool that takes a Workspace namespace / Firecloud Project ID and returns details for any\n  * workspaces found.\n- *\n- * <p>Details currently include... - Name - Creator Email - Collaborator Emails and Access Levels\n  */\n @Configuration\n+@Import({FireCloudServiceImpl.class, FireCloudConfig.class})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1MzAyNw=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkwNzI3OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNToyOTo1NFrOHVWrCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwMTozODo0N1rOHVnxpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1MzYwOQ==", "bodyText": "nit: maybe name this ToolApplicationRunListener so it's more obvious when it gets pulled in.", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492153609", "createdAt": "2020-09-21T15:29:54Z", "author": {"login": "jaycarlton"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQzMzgzMQ==", "bodyText": "Good idea \u2013\u00a0I renamed to CommandLineToolApplicationRunListener for (1) consistency with CommandLineToolConfig and (2) ApproachingPeakJavaCamelCase", "url": "https://github.com/all-of-us/workbench/pull/4030#discussion_r492433831", "createdAt": "2020-09-22T01:38:47Z", "author": {"login": "gjuggler"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ApplicationRunListener.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.tools;\n+\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.boot.SpringApplicationRunListener;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.context.support.SimpleThreadScope;\n+import org.springframework.core.env.ConfigurableEnvironment;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+/**\n+ * A custom application listener to allow us to mutate the application context before any\n+ * command-line tools are run.\n+ *\n+ * <p>This class currently serves a single purpose, which is to create a fake \"request\" bean scope\n+ * to allow command-line tools to load RW beans that are request-scoped for use in the main webapp.\n+ *\n+ * <p>See https://stackoverflow.com/a/28275111 which is the pattern we roughly followed here. This\n+ * class is referenced from resources/META-INF/spring.factories, which causes this class to be\n+ * loaded before the Spring context is initialized.\n+ */\n+public class ApplicationRunListener implements SpringApplicationRunListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1MzYwOQ=="}, "originalCommit": {"oid": "8c1bd95d6cb499b91ce50a6bd2fc54812cfa12a9"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3925, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}