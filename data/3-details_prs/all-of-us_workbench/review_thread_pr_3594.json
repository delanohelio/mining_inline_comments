{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NzUwOTEy", "number": 3594, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo0NDo0NlrOD9zjJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo1ODoxMFrOD91qDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTM0MzEwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/profile/data-user-code-of-conduct.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo0NDo0NlrOGXhJqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo0NDo0NlrOGXhJqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxMzU3Ng==", "bodyText": "Hiding whitespace changes for this file will clean up the diff", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427313576", "createdAt": "2020-05-19T13:44:46Z", "author": {"login": "petesantos"}, "path": "ui/src/app/pages/profile/data-user-code-of-conduct.spec.tsx", "diffHunk": "@@ -95,66 +95,75 @@ describe('DataUserCodeOfConduct', () => {\n     expect(wrapper).toBeTruthy();\n   });\n \n-  it('should not allow DataUserCodeOfConduct without identical initials', async () => {\n+  it('should not allow DataUserCodeOfConduct without identical initials', async() => {\n     serverConfigStore.next({...defaultConfig, enableV3DataUserCodeOfConduct: true});\n     const wrapper = component();\n-    wrapper.find('[data-test-id=\"ducc-next-button\"]').simulate('click');\n-    await waitOneTickAndUpdate(wrapper);\n-    expect(wrapper.find('[data-test-id=\"submit-ducc-button\"]').prop('disabled')).toBeTruthy();\n-\n-    // fill required fields\n-    wrapper.find('[data-test-id=\"dua-initials-input\"]').forEach((node, index) => {\n-      node.simulate('change', {target: {value: 'X' + index.toString()}});\n+    wrapper.setState({proceedDisabled: false}, async() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTM2NDI2OnYy", "diffSide": "RIGHT", "path": "e2e/app/element/xpath-finder.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo0OToyNVrOGXhXEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoyNzo1N1rOGXooKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxNzAxMQ==", "bodyText": "nit: please add typedefs for function parameters and the return type.\nAlso, the single-object parameter pattern doesn't seem to be used elsewhere in the e2e directory. I'd switch to normal function params for consistency. (I generally treat consistency as less important than any documented style guide, and more important than any personal preference.)", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427317011", "createdAt": "2020-05-19T13:49:25Z", "author": {"login": "gjuggler"}, "path": "e2e/app/element/xpath-finder.ts", "diffHunk": "@@ -1,7 +1,26 @@\n-import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {ElementHandle, Page, WaitForSelectorOptions, Frame} from 'puppeteer';\n import TextOptions from './text-options';\n import * as xpathDefaults from './xpath-defaults';\n \n+const waitForFn = async ({ fn, interval = 2000, timeout = 10000 }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzNjA3NQ==", "bodyText": "Fixed. I do prefer the single argument style, but agree with your views on consistency. Parameterization will make for a good discussion in the style guide.", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427436075", "createdAt": "2020-05-19T16:27:57Z", "author": {"login": "petesantos"}, "path": "e2e/app/element/xpath-finder.ts", "diffHunk": "@@ -1,7 +1,26 @@\n-import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {ElementHandle, Page, WaitForSelectorOptions, Frame} from 'puppeteer';\n import TextOptions from './text-options';\n import * as xpathDefaults from './xpath-defaults';\n \n+const waitForFn = async ({ fn, interval = 2000, timeout = 10000 }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxNzAxMQ=="}, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTQwNTI3OnYy", "diffSide": "RIGHT", "path": "e2e/app/element/xpath-finder.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo1OTozN1rOGXhxnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoyNzo0N1rOGXonvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyMzgwNw==", "bodyText": "The logic here seems fine \u2013 just throwing out a potentially simpler alternative async while loop approach, which may avoid some of the Promise boilerplate.\nwhile (Date.now() > start + timeout) {\n  await new Promise(resolve => setTimeout(resolve, interval));\n  if (fn()) {\n    return true;\n  }\n}\nreturn false;", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427323807", "createdAt": "2020-05-19T13:59:37Z", "author": {"login": "gjuggler"}, "path": "e2e/app/element/xpath-finder.ts", "diffHunk": "@@ -1,7 +1,26 @@\n-import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {ElementHandle, Page, WaitForSelectorOptions, Frame} from 'puppeteer';\n import TextOptions from './text-options';\n import * as xpathDefaults from './xpath-defaults';\n \n+const waitForFn = async ({ fn, interval = 2000, timeout = 10000 }) => {\n+  const readyState = new Promise<{success?: Frame, intervalId: NodeJS.Timeout}>(resolve => {\n+    const start = Date.now()\n+    const currentInterval = setInterval(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzNTk2Nw==", "bodyText": "That is a nice simplification - thanks!", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427435967", "createdAt": "2020-05-19T16:27:47Z", "author": {"login": "petesantos"}, "path": "e2e/app/element/xpath-finder.ts", "diffHunk": "@@ -1,7 +1,26 @@\n-import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {ElementHandle, Page, WaitForSelectorOptions, Frame} from 'puppeteer';\n import TextOptions from './text-options';\n import * as xpathDefaults from './xpath-defaults';\n \n+const waitForFn = async ({ fn, interval = 2000, timeout = 10000 }) => {\n+  const readyState = new Promise<{success?: Frame, intervalId: NodeJS.Timeout}>(resolve => {\n+    const start = Date.now()\n+    const currentInterval = setInterval(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMyMzgwNw=="}, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU2MzUyOnYy", "diffSide": "RIGHT", "path": "e2e/app/element/xpath-finder.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozMjo0NVrOGXjZDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoyODowMVrOGXooaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MDI4NA==", "bodyText": "I'm a little mystified by the Frame type annotation. Should this be a boolean?\n[After reading a bit further] Oh \u2013\u00a0the fn() is assumed to be a function that returns a Frame. That means this setup is significantly less general; I would either rename this to waitForFrame, or otherwise keep this function extremely generic and adjust the call site to re-collect the Frame after waiting for it to appear.", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427350284", "createdAt": "2020-05-19T14:32:45Z", "author": {"login": "gjuggler"}, "path": "e2e/app/element/xpath-finder.ts", "diffHunk": "@@ -1,7 +1,26 @@\n-import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {ElementHandle, Page, WaitForSelectorOptions, Frame} from 'puppeteer';\n import TextOptions from './text-options';\n import * as xpathDefaults from './xpath-defaults';\n \n+const waitForFn = async ({ fn, interval = 2000, timeout = 10000 }) => {\n+  const readyState = new Promise<{success?: Frame, intervalId: NodeJS.Timeout}>(resolve => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQzNjEzNg==", "bodyText": "Updated with your other suggestions and kept the name - it now should work for any function.", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427436136", "createdAt": "2020-05-19T16:28:01Z", "author": {"login": "petesantos"}, "path": "e2e/app/element/xpath-finder.ts", "diffHunk": "@@ -1,7 +1,26 @@\n-import {ElementHandle, Page, WaitForSelectorOptions} from 'puppeteer';\n+import {ElementHandle, Page, WaitForSelectorOptions, Frame} from 'puppeteer';\n import TextOptions from './text-options';\n import * as xpathDefaults from './xpath-defaults';\n \n+const waitForFn = async ({ fn, interval = 2000, timeout = 10000 }) => {\n+  const readyState = new Promise<{success?: Frame, intervalId: NodeJS.Timeout}>(resolve => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MDI4NA=="}, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU4MDQ4OnYy", "diffSide": "RIGHT", "path": "e2e/app/element/xpath-finder.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozNjowOFrOGXjjtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjozNDo1M1rOGXo7fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MzAxNA==", "bodyText": "You could refactor this slightly to allow waitForFn to return a Promise, and just extract the Frame after waiting:\nawait waitForFn(hasFrame);\nreturn hasFrame()", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427353014", "createdAt": "2020-05-19T14:36:08Z", "author": {"login": "gjuggler"}, "path": "e2e/app/element/xpath-finder.ts", "diffHunk": "@@ -126,3 +145,12 @@ export async function findImage(page: Page, label: string, waitOptions?: WaitFor\n   }\n   return page.waitForXPath(selector, waitOptions);\n }\n+\n+export async function findIframe(page: Page, label: string): Promise<Frame> {\n+  const iframeNode = await page.waitForXPath(xpathDefaults.iframeXpath(label))\n+  const srcHandle = await iframeNode.getProperty('src')\n+  const src = await srcHandle.jsonValue()\n+  const hasFrame = (): Frame => page.frames().find(frame => frame.url() === src)\n+\n+  return hasFrame() || await waitForFn({ fn: hasFrame })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0MTAyMA==", "bodyText": "done", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427441020", "createdAt": "2020-05-19T16:34:53Z", "author": {"login": "petesantos"}, "path": "e2e/app/element/xpath-finder.ts", "diffHunk": "@@ -126,3 +145,12 @@ export async function findImage(page: Page, label: string, waitOptions?: WaitFor\n   }\n   return page.waitForXPath(selector, waitOptions);\n }\n+\n+export async function findIframe(page: Page, label: string): Promise<Frame> {\n+  const iframeNode = await page.waitForXPath(xpathDefaults.iframeXpath(label))\n+  const srcHandle = await iframeNode.getProperty('src')\n+  const src = await srcHandle.jsonValue()\n+  const hasFrame = (): Frame => page.frames().find(frame => frame.url() === src)\n+\n+  return hasFrame() || await waitForFn({ fn: hasFrame })", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1MzAxNA=="}, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTU4OTgxOnYy", "diffSide": "RIGHT", "path": "ui/app.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozODowMlrOGXjpjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDozODowMlrOGXjpjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM1NDUwOA==", "bodyText": "These changes seem sane, but @calbach is much closer to our CSP rules and may have comments.", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427354508", "createdAt": "2020-05-19T14:38:02Z", "author": {"login": "gjuggler"}, "path": "ui/app.yaml", "diffHunk": "@@ -12,7 +12,7 @@ handlers:\n     Strict-Transport-Security: \"max-age=31536000; includeSubDomains; preload\"\n     X-XSS-Protection: 1\n     X-Content-Type-Options: \"nosniff\"\n-    Content-Security-Policy: \"default-src 'none'; frame-ancestors 'none'; report-uri /content-security-report\"\n+    Content-Security-Policy: \"default-src 'none'; img-src 'self'; style-src 'unsafe-inline'; frame-ancestors 'self'; report-uri /content-security-report\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTY2MTQ5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/html-viewer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo1MjozM1rOGXkXsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo0MToxOVrOGXpLRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2NjMyMg==", "bodyText": "[opt / nit] Now that I look at this again, the naming here is silly... should probably be \"onLastPageView\" or something similar. Feel free to rename, or leave as-is if it will be a pain to change.", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427366322", "createdAt": "2020-05-19T14:52:33Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/components/html-viewer.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+\n+\n+export interface Props {\n+  containerStyles?: React.CSSProperties;\n+  onLastPageRender: () => void;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ0NTA2Mw==", "bodyText": "done", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427445063", "createdAt": "2020-05-19T16:41:19Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/html-viewer.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+\n+\n+export interface Props {\n+  containerStyles?: React.CSSProperties;\n+  onLastPageRender: () => void;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2NjMyMg=="}, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTY2NTgwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/html-viewer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo1MzoyOVrOGXkapQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzowNDoyOVrOGXqFsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2NzA3Nw==", "bodyText": "It should be possible to extend from WindowSizeProps for these \u2013\u00a0see https://github.com/all-of-us/workbench/blob/master/ui/src/app/pages/login/sign-in.tsx#L119-L119 for example usage.", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427367077", "createdAt": "2020-05-19T14:53:29Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/components/html-viewer.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+\n+\n+export interface Props {\n+  containerStyles?: React.CSSProperties;\n+  onLastPageRender: () => void;\n+  filePath: string;\n+  ariaLabel: string;\n+  windowSize: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ2MDAxOA==", "bodyText": "done", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427460018", "createdAt": "2020-05-19T17:04:29Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/html-viewer.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+\n+\n+export interface Props {\n+  containerStyles?: React.CSSProperties;\n+  onLastPageRender: () => void;\n+  filePath: string;\n+  ariaLabel: string;\n+  windowSize: {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM2NzA3Nw=="}, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTY4NDUzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/html-viewer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo1NzoyMlrOGXknDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjo1MjowMFrOGXpmUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MDI1NQ==", "bodyText": "[opt / nit] This one-liner is a bit clever with the array destructuring. Is there a built-in assumption here that our callback only ever needs to look at the first IntersectionObserverEntry? It's at least worth a comment justifying that, if so.", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427370255", "createdAt": "2020-05-19T14:57:22Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/components/html-viewer.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+\n+\n+export interface Props {\n+  containerStyles?: React.CSSProperties;\n+  onLastPageRender: () => void;\n+  filePath: string;\n+  ariaLabel: string;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  hasReadEntireDoc: boolean;\n+  iframeFailed: boolean;\n+  loading: boolean;\n+}\n+\n+export const HtmlViewer = withWindowSize()( class extends React.Component<Props,  State> {\n+  iframeRef: React.RefObject<any>;\n+\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      hasReadEntireDoc: false,\n+      iframeFailed: false,\n+      loading: true\n+    };\n+\n+    this.iframeRef = React.createRef();\n+  }\n+\n+  componentDidUpdate({}, {hasReadEntireDoc}) {\n+    const { onLastPageRender = () => false } = this.props;\n+    if (!hasReadEntireDoc && this.state.hasReadEntireDoc) {\n+      onLastPageRender();\n+    }\n+  }\n+\n+  private handleIframeLoaded() {\n+    try {\n+      const iframeDocument = this.iframeRef.current.contentDocument;\n+      const { body } = iframeDocument;\n+      const openLinksInNewTab = iframeDocument.createElement('base');\n+      const endOfPage = iframeDocument.createElement('div');\n+\n+      openLinksInNewTab.setAttribute('target', '_blank');\n+      body.prepend(openLinksInNewTab);\n+      body.appendChild(endOfPage);\n+\n+      const observer = new IntersectionObserver(\n+        ([{ isIntersecting }]) => isIntersecting && !this.state.hasReadEntireDoc && this.setState({ hasReadEntireDoc: true }),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ1MTk4Nw==", "bodyText": "Yes, since there is only one threshold there should only be on entry. Added a comment describing this.", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427451987", "createdAt": "2020-05-19T16:52:00Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/html-viewer.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {withWindowSize} from 'app/utils';\n+import * as React from 'react';\n+\n+\n+export interface Props {\n+  containerStyles?: React.CSSProperties;\n+  onLastPageRender: () => void;\n+  filePath: string;\n+  ariaLabel: string;\n+  windowSize: {\n+    width: number,\n+    height: number\n+  };\n+}\n+\n+interface State {\n+  hasReadEntireDoc: boolean;\n+  iframeFailed: boolean;\n+  loading: boolean;\n+}\n+\n+export const HtmlViewer = withWindowSize()( class extends React.Component<Props,  State> {\n+  iframeRef: React.RefObject<any>;\n+\n+  constructor(props) {\n+    super(props);\n+\n+    this.state = {\n+      hasReadEntireDoc: false,\n+      iframeFailed: false,\n+      loading: true\n+    };\n+\n+    this.iframeRef = React.createRef();\n+  }\n+\n+  componentDidUpdate({}, {hasReadEntireDoc}) {\n+    const { onLastPageRender = () => false } = this.props;\n+    if (!hasReadEntireDoc && this.state.hasReadEntireDoc) {\n+      onLastPageRender();\n+    }\n+  }\n+\n+  private handleIframeLoaded() {\n+    try {\n+      const iframeDocument = this.iframeRef.current.contentDocument;\n+      const { body } = iframeDocument;\n+      const openLinksInNewTab = iframeDocument.createElement('base');\n+      const endOfPage = iframeDocument.createElement('div');\n+\n+      openLinksInNewTab.setAttribute('target', '_blank');\n+      body.prepend(openLinksInNewTab);\n+      body.appendChild(endOfPage);\n+\n+      const observer = new IntersectionObserver(\n+        ([{ isIntersecting }]) => isIntersecting && !this.state.hasReadEntireDoc && this.setState({ hasReadEntireDoc: true }),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MDI1NQ=="}, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MTY4ODQ0OnYy", "diffSide": "RIGHT", "path": "ui/app.yaml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNDo1ODoxMFrOGXkpkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzowMTo0NVrOGXp_Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MDg5OQ==", "bodyText": "I'm not familiar with using unsafe-inline for style-src. Could this have unintended consequences?", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427370899", "createdAt": "2020-05-19T14:58:10Z", "author": {"login": "als364"}, "path": "ui/app.yaml", "diffHunk": "@@ -12,7 +12,7 @@ handlers:\n     Strict-Transport-Security: \"max-age=31536000; includeSubDomains; preload\"\n     X-XSS-Protection: 1\n     X-Content-Type-Options: \"nosniff\"\n-    Content-Security-Policy: \"default-src 'none'; frame-ancestors 'none'; report-uri /content-security-report\"\n+    Content-Security-Policy: \"default-src 'none'; img-src 'self'; style-src 'unsafe-inline'; frame-ancestors 'self'; report-uri /content-security-report\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM4NjM0OA==", "bodyText": "I don't think so - the html that gets generated has the css directly defined in the style tag, that is why it is needed.\nI did run these changes by @calbach before adding them. CH - would you mind taking a second look at the updated CSP?", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427386348", "createdAt": "2020-05-19T15:18:29Z", "author": {"login": "petesantos"}, "path": "ui/app.yaml", "diffHunk": "@@ -12,7 +12,7 @@ handlers:\n     Strict-Transport-Security: \"max-age=31536000; includeSubDomains; preload\"\n     X-XSS-Protection: 1\n     X-Content-Type-Options: \"nosniff\"\n-    Content-Security-Policy: \"default-src 'none'; frame-ancestors 'none'; report-uri /content-security-report\"\n+    Content-Security-Policy: \"default-src 'none'; img-src 'self'; style-src 'unsafe-inline'; frame-ancestors 'self'; report-uri /content-security-report\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MDg5OQ=="}, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ1ODMxOQ==", "bodyText": "Yeah, this is OK. unsafe-inline is not ideal, but we have a similar requirement for rendering the notebook HTML previews; our hands are a bit tied since we don't have (or want to have) fine control over the generation of the HTML content.\nLater we could try to tune this a bit by only allowing unsafe-inline on specific affected resources, but it won't make a difference currently as I believe this is the only HTML served under this file pattern (the pattern below is used for our main index.html, and has its own CSP)", "url": "https://github.com/all-of-us/workbench/pull/3594#discussion_r427458319", "createdAt": "2020-05-19T17:01:45Z", "author": {"login": "calbach"}, "path": "ui/app.yaml", "diffHunk": "@@ -12,7 +12,7 @@ handlers:\n     Strict-Transport-Security: \"max-age=31536000; includeSubDomains; preload\"\n     X-XSS-Protection: 1\n     X-Content-Type-Options: \"nosniff\"\n-    Content-Security-Policy: \"default-src 'none'; frame-ancestors 'none'; report-uri /content-security-report\"\n+    Content-Security-Policy: \"default-src 'none'; img-src 'self'; style-src 'unsafe-inline'; frame-ancestors 'self'; report-uri /content-security-report\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzM3MDg5OQ=="}, "originalCommit": {"oid": "3c4a0137326edc1e307229592a8c769de364af15"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2686, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}