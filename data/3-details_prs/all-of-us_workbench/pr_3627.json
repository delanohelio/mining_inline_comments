{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MzI4MTU4", "number": 3627, "title": "[RW-4521][risk=low] Create API for updating verified institution", "bodyText": "PR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-05-29T21:12:47Z", "url": "https://github.com/all-of-us/workbench/pull/3627", "merged": true, "mergeCommit": {"oid": "ee1b124dc19ff483bcc567fbcd5ce4c67b2b3b16"}, "closed": true, "closedAt": "2020-06-09T18:41:28Z", "author": {"login": "als364"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclxJGVAH2gAyNDI1MzI4MTU4OmQyYTQ1YTIyODVhNTAxZjIxNjc3M2RlM2Y1ZmFmMDgwZGY5MTgwMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcppGyfAH2gAyNDI1MzI4MTU4OmZhMTQ5MDkyODM2MzYyYTQyMDA0ZWE4NzBmMDczNDk3NjQ4MmM0M2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d2a45a2285a501f216773de3f5faf080df918030", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/d2a45a2285a501f216773de3f5faf080df918030", "committedDate": "2020-05-28T17:16:34Z", "message": "first pass, shelving for pairing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3819ffda201293a8631851b0ea0822ada0b28e65", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/3819ffda201293a8631851b0ea0822ada0b28e65", "committedDate": "2020-05-28T18:26:54Z", "message": "Pairing on ProfileService for validate institution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a40f06efa821b342c5ddd45d3ad7b2ec0369bff", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/4a40f06efa821b342c5ddd45d3ad7b2ec0369bff", "committedDate": "2020-05-29T21:07:17Z", "message": "think this ought to work."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11382f6ae91b85365fd92ed975204e3411cd6e7", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/f11382f6ae91b85365fd92ed975204e3411cd6e7", "committedDate": "2020-05-29T21:19:09Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMjkxNDk3", "url": "https://github.com/all-of-us/workbench/pull/3627#pullrequestreview-421291497", "createdAt": "2020-05-29T21:14:30Z", "commit": {"oid": "4a40f06efa821b342c5ddd45d3ad7b2ec0369bff"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMToxNDozMFrOGcsRLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMToxODo1OFrOGcsXsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczODYwNg==", "bodyText": "pushed this down into the Service layer. Ideally more things would be there but that would take a LOT of time for a relatively time sensitive PR.", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r432738606", "createdAt": "2020-05-29T21:14:30Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -567,28 +558,6 @@ private void verifyCaptcha(String captchaToken) {\n     }\n   }\n \n-  private void verifyInstitutionalAffiliation(Profile profile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40f06efa821b342c5ddd45d3ad7b2ec0369bff"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczODkxMw==", "bodyText": "note to self: this is probably redundant", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r432738913", "createdAt": "2020-05-29T21:15:15Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -723,6 +695,20 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n   }\n \n+  @AuthorityRequired(Authority.ACCESS_CONTROL_ADMIN)\n+  @Override\n+  public ResponseEntity<EmptyResponse> updateVerifiedInstitutionalAffiliation(\n+      Long userId, VerifiedInstitutionalAffiliation verifiedInstitution) {\n+    DbUser dbUser = userDao.findUserByUserId(userId);\n+    Profile profile = profileService.getProfile(dbUser);\n+\n+    profile.setVerifiedInstitutionalAffiliation(verifiedInstitution);\n+    profileService.verifyInstitutionalAffiliation(profile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40f06efa821b342c5ddd45d3ad7b2ec0369bff"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTYyNg==", "bodyText": "I think ideally I'd run all updates like this directly through updateProfile or something like adminUpdateProfile rather than something specific to verified institution. I'll address that in RW-4980 where we'll take a holistic look at what we want the API structure to look like for the user admin", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r432739626", "createdAt": "2020-05-29T21:17:06Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -723,6 +695,20 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n   }\n \n+  @AuthorityRequired(Authority.ACCESS_CONTROL_ADMIN)\n+  @Override\n+  public ResponseEntity<EmptyResponse> updateVerifiedInstitutionalAffiliation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40f06efa821b342c5ddd45d3ad7b2ec0369bff"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTcxNw==", "bodyText": "note to self: unnecessary", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r432739717", "createdAt": "2020-05-29T21:17:23Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -19,7 +20,8 @@\n       CommonMappers.class,\n       DemographicSurveyMapper.class,\n       InstitutionalAffiliationMapper.class,\n-      PageVisitMapper.class\n+      PageVisitMapper.class,\n+      VerifiedInstitutionalAffiliationMapper.class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40f06efa821b342c5ddd45d3ad7b2ec0369bff"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0MDAwMA==", "bodyText": "note to self: revert", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r432740000", "createdAt": "2020-05-29T21:18:12Z", "author": {"login": "als364"}, "path": "api/src/test/java/org/pmiops/workbench/profile/ProfileServiceTest.java", "diffHunk": "@@ -36,7 +43,12 @@\n   @Autowired VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n \n   @TestConfiguration\n-  @MockBean({FreeTierBillingService.class})\n+  @MockBean({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40f06efa821b342c5ddd45d3ad7b2ec0369bff"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc0MDI3NA==", "bodyText": "I think I want to move the tests for verifyInstitutionalAffiliation into this test class since that function is now in the Service layer", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r432740274", "createdAt": "2020-05-29T21:18:58Z", "author": {"login": "als364"}, "path": "api/src/test/java/org/pmiops/workbench/profile/ProfileServiceTest.java", "diffHunk": "@@ -36,7 +43,12 @@\n   @Autowired VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n \n   @TestConfiguration\n-  @MockBean({FreeTierBillingService.class})\n+  @MockBean({\n+      FreeTierBillingService.class,\n+      InstitutionDao.class,\n+      InstitutionService.class,\n+      UserService.class,\n+  })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a40f06efa821b342c5ddd45d3ad7b2ec0369bff"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c28c42438c641a7a992cc7a03a2bf39bfac418cf", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/c28c42438c641a7a992cc7a03a2bf39bfac418cf", "committedDate": "2020-06-01T18:09:19Z", "message": "most of the changes I wanted to make"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00ce1e0cecc4be512d7af0bf9bdfd9ce9b31db5a", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/00ce1e0cecc4be512d7af0bf9bdfd9ce9b31db5a", "committedDate": "2020-06-01T20:24:32Z", "message": "unit tests for validateInstitutionalAffiliation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3", "committedDate": "2020-06-01T20:43:18Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNjQyNDI3", "url": "https://github.com/all-of-us/workbench/pull/3627#pullrequestreview-422642427", "createdAt": "2020-06-02T12:51:34Z", "commit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMjo1MTozNVrOGdwHNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo1NTozOVrOGdyz8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MDE2Nw==", "bodyText": "For other admin-specific APIs, we've lately been splitting them into their own controller for clarity (e.g. AdminWorkspaceController). Maybe not for this PR, but I would consider aiming for a similar setup in the long run for profile-admin APIs.", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433850167", "createdAt": "2020-06-02T12:51:35Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -723,6 +699,19 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n   }\n \n+  @AuthorityRequired(Authority.ACCESS_CONTROL_ADMIN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1MTg3NA==", "bodyText": "naming nit: dropping \"affiliation\" can be misleading here. In other files we seem to use \"verifiedAffiliation\" as the preferred term.", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433851874", "createdAt": "2020-06-02T12:54:19Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -723,6 +699,19 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n   }\n \n+  @AuthorityRequired(Authority.ACCESS_CONTROL_ADMIN)\n+  @Override\n+  public ResponseEntity<EmptyResponse> updateVerifiedInstitutionalAffiliation(\n+      Long userId, VerifiedInstitutionalAffiliation verifiedInstitution) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NDY1Ng==", "bodyText": "Why does this validate() method return a model object? It muddies the method contract. IMO a validateFoo method should generally throw an error when something is incorrect, otherwise return void.\nReading through the method below, the returned VerifiedInstitutionalAffiliation object is the same as what's stored in the profile, except with potentially a modified institution display name. If the profile controller needs to fetch the institution to return a display name, I'd make that a separate call rather than happening through this method.", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433854656", "createdAt": "2020-06-02T12:58:50Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -70,4 +88,62 @@ public Profile getProfile(DbUser user) {\n \n     return profile;\n   }\n+\n+  public VerifiedInstitutionalAffiliation validateInstitutionalAffiliation(Profile profile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1NTE5NA==", "bodyText": "I'm not clear on why this logic needs to exist. Neither the validation logic nor the method caller should really care about the display name, since the only input that matters is (1) the institution short name and (2) the user's email address. Was there something else that motivated this conditional logic?", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433855194", "createdAt": "2020-06-02T12:59:42Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileService.java", "diffHunk": "@@ -70,4 +88,62 @@ public Profile getProfile(DbUser user) {\n \n     return profile;\n   }\n+\n+  public VerifiedInstitutionalAffiliation validateInstitutionalAffiliation(Profile profile) {\n+    VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        profile.getVerifiedInstitutionalAffiliation();\n+\n+    if (verifiedInstitutionalAffiliation == null) {\n+      throw new BadRequestException(\"Institutional affiliation cannot be empty\");\n+    }\n+\n+    Optional<DbInstitution> institution =\n+        institutionDao.findOneByShortName(\n+            verifiedInstitutionalAffiliation.getInstitutionShortName());\n+    if (!institution.isPresent()) {\n+      throw new NotFoundException(\n+          String.format(\n+              \"Could not find institution %s in database\",\n+              verifiedInstitutionalAffiliation.getInstitutionShortName()));\n+    }\n+    if (!institution", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg1OTUwMQ==", "bodyText": "Why is InstitutionService included as a MockBean here and also above? I think you can remove one or the other, no?", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433859501", "createdAt": "2020-06-02T13:06:39Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/profile/ProfileServiceTest.java", "diffHunk": "@@ -29,14 +40,18 @@\n @DataJpaTest\n public class ProfileServiceTest {\n \n+  @MockBean private InstitutionDao mockInstitutionDao;\n+  @MockBean private InstitutionService mockInstitutionService;\n   @MockBean private UserTermsOfServiceDao mockUserTermsOfServiceDao;\n \n+  @MockBean\n+  private VerifiedInstitutionalAffiliationMapper mockVerifiedInstitutionalAffiliationMapper;\n+\n   @Autowired ProfileService profileService;\n   @Autowired UserDao userDao;\n-  @Autowired VerifiedInstitutionalAffiliationMapper verifiedInstitutionalAffiliationMapper;\n \n   @TestConfiguration\n-  @MockBean({FreeTierBillingService.class})\n+  @MockBean({FreeTierBillingService.class, InstitutionService.class, UserService.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg2NjkwNQ==", "bodyText": "[opt] I feel like there could be some meaningful argument capture here, to ensure that this method is called with the correct institutional affiliation shortName. This would require building a non-empty DbVerifiedInstitutionalAffiliation at L122, which feels like a good idea anyway (since in the real world, we'll expect that Db model object to be non-empty).\nThis connection, between the mapper return value and the institutionService call, is IMO the main piece of logic that's being tested in this positive case \u2013\u00a0so it seems potentially useful to explicitly check.", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433866905", "createdAt": "2020-06-02T13:17:59Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/profile/ProfileServiceTest.java", "diffHunk": "@@ -77,4 +92,203 @@ public void testReturnsLastAcknowledgedTermsOfService() {\n     assertThat(profile.getLatestTermsOfServiceVersion()).isEqualTo(1);\n     assertThat(profile.getLatestTermsOfServiceTime()).isEqualTo(1);\n   }\n+\n+  @Test\n+  public void validateInstitutionalAffiliation() {\n+    VerifiedInstitutionalAffiliation affiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionDisplayName(\"The Broad Institute\")\n+            .institutionalRoleEnum(InstitutionalRole.OTHER)\n+            .institutionalRoleOtherText(\"Kibitzing\");\n+\n+    Profile profile =\n+        new Profile()\n+            .verifiedInstitutionalAffiliation(affiliation)\n+            .contactEmail(\"kibitz@broadinstitute.org\");\n+\n+    DbInstitution dbInstitution = new DbInstitution();\n+    dbInstitution.setShortName(\"Broad\");\n+    dbInstitution.setDisplayName(\"The Broad Institute\");\n+\n+    when(mockInstitutionDao.findOneByShortName(\"Broad\")).thenReturn(Optional.of(dbInstitution));\n+\n+    when(mockInstitutionService.validateAffiliation(\n+            any(DbVerifiedInstitutionalAffiliation.class), anyString()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NzAyNQ==", "bodyText": "We're not changing the fact that non-admin profile updates aren't allowed to change affiliation, right? Removing this line breaks that enforcement.\nI think I know why you removed this, because we're using a unified code path for non-admin and admin profile updates. But we need to account for the fact that self-profile updates have different business logic than admin-driven profile updates.\nA couple options:\n\nBump this logic into a checkUserProfileUpdate method, whose job is basically to reject any requests where a user is trying to update things that they shouldn't be allowed to. This fits nicely with a higher-level goal of pushing more of the core upsert logic into a service, but keeping the top-level \"can I do this\" logic in the controller itself.\nPass down some additional call context to methods like this, e.g. \"boolean isAdmin\" (Seems clunky)", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433877025", "createdAt": "2020-06-02T13:32:24Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -318,13 +316,6 @@ private void validateUpdatedProfile(Profile updatedProfile, Profile prevProfile)\n       // See RW-1488.\n       throw new BadRequestException(\"Changing username is not supported\");\n     }\n-    final VerifiedInstitutionalAffiliation updatedAffil =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MzI0OA==", "bodyText": "I don't think this call will work to update any user that isn't the currently-authenticated user. See the first line of updateProfile: DbUser user = userProvider.get();.\nI think you'll need to extract a new method, updateProfileForUser(DbUser user), in order to make the correct call here.", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433883248", "createdAt": "2020-06-02T13:40:46Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -723,6 +699,19 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n   }\n \n+  @AuthorityRequired(Authority.ACCESS_CONTROL_ADMIN)\n+  @Override\n+  public ResponseEntity<EmptyResponse> updateVerifiedInstitutionalAffiliation(\n+      Long userId, VerifiedInstitutionalAffiliation verifiedInstitution) {\n+    DbUser dbUser = userDao.findUserByUserId(userId);\n+    Profile profile = profileService.getProfile(dbUser);\n+\n+    profile.setVerifiedInstitutionalAffiliation(verifiedInstitution);\n+    this.updateProfile(profile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODUyOQ==", "bodyText": "AFAICT, calling setVerifiedInstitutionalAffiliation on the updatedProfile object has no effect, since this object is not persisted or returned in the HTTP response. Is it necessary?", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433888529", "createdAt": "2020-06-02T13:48:02Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -714,6 +686,10 @@ private boolean userHasEverLoggedIn(\n     user.setLastModifiedTime(now);\n \n     updateInstitutionalAffiliations(updatedProfile, user);\n+    if (workbenchConfigProvider.get().featureFlags.requireInstitutionalVerification) {\n+      updatedProfile.setVerifiedInstitutionalAffiliation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4OTM5NQ==", "bodyText": "Makes total sense \u2013 I'd love to brainstorm ideas here. As I'm going through this PR I'm starting to build some mental model of how profile vs. user APIs and models might be cleaned up for the future.", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433889395", "createdAt": "2020-06-02T13:49:13Z", "author": {"login": "gjuggler"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -723,6 +695,20 @@ private boolean userHasEverLoggedIn(\n     return ResponseEntity.status(HttpStatus.NO_CONTENT).build();\n   }\n \n+  @AuthorityRequired(Authority.ACCESS_CONTROL_ADMIN)\n+  @Override\n+  public ResponseEntity<EmptyResponse> updateVerifiedInstitutionalAffiliation(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjczOTYyNg=="}, "originalCommit": {"oid": "4a40f06efa821b342c5ddd45d3ad7b2ec0369bff"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5NDM4NQ==", "bodyText": "I'm usually accepting of a fair amount of repetition in test code, but I think these 4 lines to create a mock Broad institution are used in every single test case. That's my threshold of \"bump it into the setup and kill a few dozen lines\" in unit tests.", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r433894385", "createdAt": "2020-06-02T13:55:39Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/profile/ProfileServiceTest.java", "diffHunk": "@@ -77,4 +92,203 @@ public void testReturnsLastAcknowledgedTermsOfService() {\n     assertThat(profile.getLatestTermsOfServiceVersion()).isEqualTo(1);\n     assertThat(profile.getLatestTermsOfServiceTime()).isEqualTo(1);\n   }\n+\n+  @Test\n+  public void validateInstitutionalAffiliation() {\n+    VerifiedInstitutionalAffiliation affiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionDisplayName(\"The Broad Institute\")\n+            .institutionalRoleEnum(InstitutionalRole.OTHER)\n+            .institutionalRoleOtherText(\"Kibitzing\");\n+\n+    Profile profile =\n+        new Profile()\n+            .verifiedInstitutionalAffiliation(affiliation)\n+            .contactEmail(\"kibitz@broadinstitute.org\");\n+\n+    DbInstitution dbInstitution = new DbInstitution();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7323752f03bcd0bdaf76aed9812dfd1bdb6df7d3"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bf982420df11f3404c5e830d8204c582e17da84", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/6bf982420df11f3404c5e830d8204c582e17da84", "committedDate": "2020-06-02T20:43:51Z", "message": "test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1d6298a917a524da3c2d4ecc90be027b09f6961", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/d1d6298a917a524da3c2d4ecc90be027b09f6961", "committedDate": "2020-06-08T21:16:40Z", "message": "review feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d8ba06e1ed6e4a83f1ca4f42c557eb1a649186c", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/3d8ba06e1ed6e4a83f1ca4f42c557eb1a649186c", "committedDate": "2020-06-08T21:24:12Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjE4NTk1", "url": "https://github.com/all-of-us/workbench/pull/3627#pullrequestreview-427218595", "createdAt": "2020-06-09T14:36:47Z", "commit": {"oid": "3d8ba06e1ed6e4a83f1ca4f42c557eb1a649186c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozNjo0OFrOGhNQmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozNjo0OFrOGhNQmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MzQzMg==", "bodyText": "Nit: it might be worth mentioning here that institutional validation is executed by this API method, e.g. a request will fail if the indicated user is not a valid member of the new affiliated institution.", "url": "https://github.com/all-of-us/workbench/pull/3627#discussion_r437473432", "createdAt": "2020-06-09T14:36:48Z", "author": {"login": "gjuggler"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -1079,6 +1079,31 @@ paths:\n           description: User doesn't have the ACCESS_CONTROL_ADMIN authority\n           schema:\n             \"$ref\": \"#/definitions/ErrorResponse\"\n+  \"/v1/admin/users/{userId}/updateVerifiedInstitutionalAffiliation\":\n+    parameters:\n+    - \"$ref\": \"#/parameters/userId\"\n+    post:\n+      tags:\n+      - profile\n+      consumes:\n+      - application/json\n+      description: Updates a user's verified institution. Requires ACCESS_CONTROL_ADMIN authority.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d8ba06e1ed6e4a83f1ca4f42c557eb1a649186c"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjE4NzQ0", "url": "https://github.com/all-of-us/workbench/pull/3627#pullrequestreview-427218744", "createdAt": "2020-06-09T14:36:57Z", "commit": {"oid": "3d8ba06e1ed6e4a83f1ca4f42c557eb1a649186c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eb48a672b1611c477f5840dc2b51d56a8be0f5a", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/8eb48a672b1611c477f5840dc2b51d56a8be0f5a", "committedDate": "2020-06-09T17:42:33Z", "message": "update API description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa149092836362a42004ea870f0734976482c43f", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/fa149092836362a42004ea870f0734976482c43f", "committedDate": "2020-06-09T18:10:30Z", "message": "null check"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4811, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}