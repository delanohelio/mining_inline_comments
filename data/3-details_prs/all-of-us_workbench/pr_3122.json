{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NDg4OTgy", "number": 3122, "title": "[no-ticket][risk=no] addressing comments from another closed PR", "bodyText": "@jaycarlton\nAddressed code from comments on #3101 (review)\n@ericsong\nplease review ConceptSetMapper and corresponding changes.", "createdAt": "2020-02-12T19:31:37Z", "url": "https://github.com/all-of-us/workbench/pull/3122", "merged": true, "mergeCommit": {"oid": "89487b4ff5f30bb74fc32727a4ece446ea0c52c5"}, "closed": true, "closedAt": "2020-02-13T23:41:55Z", "author": {"login": "freemabd"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDcU_8AH2gAyMzc0NDg4OTgyOjEwODcxMGMzZjQyMjk2MzkzOTg3ZTI1ODI5YTRkOGY5MTViOWI2NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcECQkMgFqTM1ODU2NjAyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "108710c3f42296393987e25829a4d8f915b9b654", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/108710c3f42296393987e25829a4d8f915b9b654", "committedDate": "2020-02-12T01:48:08Z", "message": "adding changes per comments on PR."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7752ac5fc8b64a1b2cb52dba167b99b429d14b31", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/7752ac5fc8b64a1b2cb52dba167b99b429d14b31", "committedDate": "2020-02-12T18:18:17Z", "message": "addressing comments from a PR."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01d97ad5887d7ab7e6ea707290fa9e8b0a4a1c45", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/01d97ad5887d7ab7e6ea707290fa9e8b0a4a1c45", "committedDate": "2020-02-12T19:11:22Z", "message": "changing to method reference."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc", "committedDate": "2020-02-12T19:16:41Z", "message": "removing unused method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzI5NDg3", "url": "https://github.com/all-of-us/workbench/pull/3122#pullrequestreview-357729487", "createdAt": "2020-02-12T19:33:10Z", "commit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozMzoxMFrOFo70eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozMzoxMFrOFo70eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NzQ0OQ==", "bodyText": "Refactored findOne to take conceptSetId and workspaceId to satisfy both calls and exceptions", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378467449", "createdAt": "2020-02-12T19:33:10Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -354,41 +362,26 @@ private DbConceptSet getDbConceptSet(\n         workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n             workspaceNamespace, workspaceId, workspaceAccessLevel);\n \n-    DbConceptSet conceptSet = conceptSetService.findOne(conceptSetId);\n-    if (conceptSet == null || workspace.getWorkspaceId() != conceptSet.getWorkspaceId()) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"No concept set with ID %s in workspace %s.\",\n-              conceptSetId, workspace.getFirecloudName()));\n-    }\n+    DbConceptSet conceptSet =\n+        conceptSetService\n+            .findOne(conceptSetId, workspace.getWorkspaceId())\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No concept set with ID %s in workspace %s.\",\n+                            conceptSetId, workspace.getFirecloudName())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzMwMDMx", "url": "https://github.com/all-of-us/workbench/pull/3122#pullrequestreview-357730031", "createdAt": "2020-02-12T19:34:02Z", "commit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNDowMlrOFo72WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNDowMlrOFo72WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NzkyOQ==", "bodyText": "Removed the conditional because findAll return an empty collection of no concept Ids match.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378467929", "createdAt": "2020-02-12T19:34:02Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -354,41 +362,26 @@ private DbConceptSet getDbConceptSet(\n         workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n             workspaceNamespace, workspaceId, workspaceAccessLevel);\n \n-    DbConceptSet conceptSet = conceptSetService.findOne(conceptSetId);\n-    if (conceptSet == null || workspace.getWorkspaceId() != conceptSet.getWorkspaceId()) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"No concept set with ID %s in workspace %s.\",\n-              conceptSetId, workspace.getFirecloudName()));\n-    }\n+    DbConceptSet conceptSet =\n+        conceptSetService\n+            .findOne(conceptSetId, workspace.getWorkspaceId())\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No concept set with ID %s in workspace %s.\",\n+                            conceptSetId, workspace.getFirecloudName())));\n     return conceptSet;\n   }\n \n-  public static ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n-    return new ConceptSet()\n-        .etag(Etags.fromVersion(dbConceptSet.getVersion()))\n-        .lastModifiedTime(dbConceptSet.getLastModifiedTime().getTime())\n-        .creationTime(dbConceptSet.getCreationTime().getTime())\n-        .description(dbConceptSet.getDescription())\n-        .id(dbConceptSet.getConceptSetId())\n-        .name(dbConceptSet.getName())\n-        .domain(dbConceptSet.getDomainEnum())\n-        .participantCount(dbConceptSet.getParticipantCount())\n-        .survey(dbConceptSet.getSurveysEnum())\n-        .creator(\n-            dbConceptSet.getCreator() != null ? dbConceptSet.getCreator().getUsername() : null);\n-  }\n-\n   private ConceptSet toClientConceptSetWithConcepts(DbConceptSet dbConceptSet) {\n-    ConceptSet conceptSet = toClientConceptSet(dbConceptSet);\n-    if (!dbConceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptService.findAll(dbConceptSet.getConceptIds());\n-      conceptSet.setConcepts(\n-          Streams.stream(concepts)\n-              .map(ConceptsController::toClientConcept)\n-              .sorted(CONCEPT_NAME_ORDERING)\n-              .collect(Collectors.toList()));\n-    }\n+    ConceptSet conceptSet = conceptSetMapper.dbModelToClient(dbConceptSet);\n+    Iterable<DbConcept> concepts = conceptService.findAll(dbConceptSet.getConceptIds());\n+    conceptSet.setConcepts(\n+        Streams.stream(concepts)\n+            .map(ConceptsController::toClientConcept)\n+            .sorted(CONCEPT_NAME_ORDERING)\n+            .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzMwOTIw", "url": "https://github.com/all-of-us/workbench/pull/3122#pullrequestreview-357730920", "createdAt": "2020-02-12T19:35:24Z", "commit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNToyNFrOFo746w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNToyNFrOFo746w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODU4Nw==", "bodyText": "@jaycarlton added your recommended builder pattern to help construction.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378468587", "createdAt": "2020-02-12T19:35:24Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbConceptSet.java", "diffHunk": "@@ -188,4 +203,89 @@ public void setParticipantCount(int participantCount) {\n   public void setConceptIds(Set<Long> conceptIds) {\n     this.conceptIds = conceptIds;\n   }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+    private long conceptSetId;\n+    private int version;\n+    private String name;\n+    private short domain;\n+    private Short survey;\n+    private String description;\n+    private long workspaceId;\n+    private DbUser creator;\n+    private Timestamp creationTime;\n+    private Timestamp lastModifiedTime;\n+    private int participantCount;\n+    private Set<Long> conceptIds = new HashSet<>();\n+\n+    private Builder() {}\n+\n+    public DbConceptSet.Builder addConceptSetId(long conceptSetId) {\n+      this.conceptSetId = conceptSetId;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addVersion(int version) {\n+      this.version = version;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addName(String name) {\n+      this.name = name;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addDomain(Short domain) {\n+      this.domain = domain;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addSurvey(Short survey) {\n+      this.survey = survey;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addDescription(String description) {\n+      this.description = description;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addWorkspaceId(long workspaceId) {\n+      this.workspaceId = workspaceId;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addCreator(DbUser creator) {\n+      this.creator = creator;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addCreationTime(Timestamp creationTime) {\n+      this.creationTime = creationTime;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addLastModifiedTime(Timestamp lastModifiedTime) {\n+      this.lastModifiedTime = lastModifiedTime;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addParticipantCount(int participantCount) {\n+      this.participantCount = participantCount;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addConceptIds(Set<Long> conceptIds) {\n+      this.conceptIds = conceptIds;\n+      return this;\n+    }\n+\n+    public DbConceptSet build() {\n+      return new DbConceptSet(this);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzMxMTI4", "url": "https://github.com/all-of-us/workbench/pull/3122#pullrequestreview-357731128", "createdAt": "2020-02-12T19:35:44Z", "commit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNTo0NFrOFo75jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNTo0NFrOFo75jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODc1MA==", "bodyText": "Moved this into CommonMappers", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378468750", "createdAt": "2020-02-12T19:35:44Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/WorkspaceMapper.java", "diffHunk": "@@ -105,12 +104,4 @@ default WorkspaceAccessLevel fromFcAccessLevel(String firecloudAccessLevel) {\n       return WorkspaceAccessLevel.fromValue(firecloudAccessLevel);\n     }\n   }\n-\n-  default String cdrVersionToEtag(int cdrVersion) {\n-    return Etags.fromVersion(cdrVersion);\n-  }\n-\n-  default int etagToCdrVersion(String etag) {\n-    return Etags.toVersion(etag);\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NzMxNjcz", "url": "https://github.com/all-of-us/workbench/pull/3122#pullrequestreview-357731673", "createdAt": "2020-02-12T19:36:34Z", "commit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNjozNFrOFo77Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozNjozNFrOFo77Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2OTE4Mw==", "bodyText": "Test to assert that findAll return empty collection when nothing is found.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378469183", "createdAt": "2020-02-12T19:36:34Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/cdr/dao/ConceptDaoTest.java", "diffHunk": "@@ -142,9 +141,15 @@ public void setUp() {\n             .path(questionCriteria.getPath() + \".1\"));\n   }\n \n+  @Test\n+  public void findAllEmptyResult() {\n+    Iterable concepts = conceptDao.findAll(ImmutableList.of(9999L, 8888L));\n+    assertThat(concepts).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3Nzg2MjAy", "url": "https://github.com/all-of-us/workbench/pull/3122#pullrequestreview-357786202", "createdAt": "2020-02-12T21:05:19Z", "commit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTowNToyMFrOFo-hKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMToxOTo1MFrOFo-74g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMTY1OA==", "bodyText": "maybe name this one. existingConceptSet. It can be final (nit)", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378511658", "createdAt": "2020-02-12T21:05:20Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -306,13 +311,16 @@ private void addConceptsToSet(DbConceptSet dbConceptSet, List<Long> addedIds) {\n       throw new BadRequestException(\n           \"Target workspace does not have the same CDR version as current workspace\");\n     }\n-    DbConceptSet conceptSet = conceptSetService.findOne(Long.valueOf(fromConceptSetId));\n-    if (conceptSet == null) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"Concept set %s does not exist\",\n-              createResourcePath(fromWorkspaceNamespace, fromWorkspaceId, fromConceptSetId)));\n-    }\n+    DbConceptSet conceptSet =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMzE4OQ==", "bodyText": "Cool. FWIW,  you could push this down. into the servcie as well, and have one method that returns an Optional<ConceptSet> and another that throws your exception. Since you're doing this twice, that might clean. up. your controller code.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378513189", "createdAt": "2020-02-12T21:08:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -354,41 +362,26 @@ private DbConceptSet getDbConceptSet(\n         workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n             workspaceNamespace, workspaceId, workspaceAccessLevel);\n \n-    DbConceptSet conceptSet = conceptSetService.findOne(conceptSetId);\n-    if (conceptSet == null || workspace.getWorkspaceId() != conceptSet.getWorkspaceId()) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"No concept set with ID %s in workspace %s.\",\n-              conceptSetId, workspace.getFirecloudName()));\n-    }\n+    DbConceptSet conceptSet =\n+        conceptSetService\n+            .findOne(conceptSetId, workspace.getWorkspaceId())\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No concept set with ID %s in workspace %s.\",\n+                            conceptSetId, workspace.getFirecloudName())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NzQ0OQ=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNDA4OQ==", "bodyText": "Yes, and you drop a ! for the win.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378514089", "createdAt": "2020-02-12T21:10:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -354,41 +362,26 @@ private DbConceptSet getDbConceptSet(\n         workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n             workspaceNamespace, workspaceId, workspaceAccessLevel);\n \n-    DbConceptSet conceptSet = conceptSetService.findOne(conceptSetId);\n-    if (conceptSet == null || workspace.getWorkspaceId() != conceptSet.getWorkspaceId()) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"No concept set with ID %s in workspace %s.\",\n-              conceptSetId, workspace.getFirecloudName()));\n-    }\n+    DbConceptSet conceptSet =\n+        conceptSetService\n+            .findOne(conceptSetId, workspace.getWorkspaceId())\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No concept set with ID %s in workspace %s.\",\n+                            conceptSetId, workspace.getFirecloudName())));\n     return conceptSet;\n   }\n \n-  public static ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n-    return new ConceptSet()\n-        .etag(Etags.fromVersion(dbConceptSet.getVersion()))\n-        .lastModifiedTime(dbConceptSet.getLastModifiedTime().getTime())\n-        .creationTime(dbConceptSet.getCreationTime().getTime())\n-        .description(dbConceptSet.getDescription())\n-        .id(dbConceptSet.getConceptSetId())\n-        .name(dbConceptSet.getName())\n-        .domain(dbConceptSet.getDomainEnum())\n-        .participantCount(dbConceptSet.getParticipantCount())\n-        .survey(dbConceptSet.getSurveysEnum())\n-        .creator(\n-            dbConceptSet.getCreator() != null ? dbConceptSet.getCreator().getUsername() : null);\n-  }\n-\n   private ConceptSet toClientConceptSetWithConcepts(DbConceptSet dbConceptSet) {\n-    ConceptSet conceptSet = toClientConceptSet(dbConceptSet);\n-    if (!dbConceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptService.findAll(dbConceptSet.getConceptIds());\n-      conceptSet.setConcepts(\n-          Streams.stream(concepts)\n-              .map(ConceptsController::toClientConcept)\n-              .sorted(CONCEPT_NAME_ORDERING)\n-              .collect(Collectors.toList()));\n-    }\n+    ConceptSet conceptSet = conceptSetMapper.dbModelToClient(dbConceptSet);\n+    Iterable<DbConcept> concepts = conceptService.findAll(dbConceptSet.getConceptIds());\n+    conceptSet.setConcepts(\n+        Streams.stream(concepts)\n+            .map(ConceptsController::toClientConcept)\n+            .sorted(CONCEPT_NAME_ORDERING)\n+            .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NzkyOQ=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNDM2MQ==", "bodyText": "Why not include this function in. your ConceptSEtMapper?", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378514361", "createdAt": "2020-02-12T21:11:11Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -240,15 +244,13 @@ public DataSet apply(DbDataset dataSet) {\n         }\n       };\n \n-  private ConceptSet toClientConceptSet(DbConceptSet conceptSet) {\n-    ConceptSet result = ConceptSetsController.toClientConceptSet(conceptSet);\n-    if (!conceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptDao.findAll(conceptSet.getConceptIds());\n-      result.setConcepts(\n-          StreamSupport.stream(concepts.spliterator(), false)\n-              .map(ConceptsController::toClientConcept)\n-              .collect(Collectors.toList()));\n-    }\n+  private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTE5MQ==", "bodyText": "This looks very similar to toClientConceptSetWithConcepts. Could you make a service method that takes in a sort order and unify some of this?", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378515191", "createdAt": "2020-02-12T21:12:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -240,15 +244,13 @@ public DataSet apply(DbDataset dataSet) {\n         }\n       };\n \n-  private ConceptSet toClientConceptSet(DbConceptSet conceptSet) {\n-    ConceptSet result = ConceptSetsController.toClientConceptSet(conceptSet);\n-    if (!conceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptDao.findAll(conceptSet.getConceptIds());\n-      result.setConcepts(\n-          StreamSupport.stream(concepts.spliterator(), false)\n-              .map(ConceptsController::toClientConcept)\n-              .collect(Collectors.toList()));\n-    }\n+  private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n+    ConceptSet result = conceptSetMapper.dbModelToClient(dbConceptSet);\n+    Iterable<DbConcept> concepts = conceptDao.findAll(dbConceptSet.getConceptIds());\n+    result.setConcepts(\n+        StreamSupport.stream(concepts.spliterator(), false)\n+            .map(ConceptsController::toClientConcept)\n+            .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTcyMQ==", "bodyText": "Since you're. ignoring the concepts field, you can make a helper method that knows how to do what  you need. See e.g. org.pmiops.workbench.utils.WorkspaceMapper#afterWorkspaceIntoResearchPurpose()", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378515721", "createdAt": "2020-02-12T21:13:59Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/conceptset/ConceptSetMapper.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.pmiops.workbench.conceptset;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.model.ConceptSet;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {CommonMappers.class})\n+public interface ConceptSetMapper {\n+\n+  @Mapping(target = \"id\", source = \"conceptSetId\")\n+  @Mapping(target = \"domain\", source = \"domainEnum\")\n+  @Mapping(target = \"survey\", source = \"surveysEnum\")\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"etag\")\n+  @Mapping(target = \"concepts\", ignore = true)\n+  ConceptSet dbModelToClient(DbConceptSet source);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNjM5MA==", "bodyText": "nit: maybe. just findByConcept..., to match. the others. teh return type indicates. you're only getting one.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378516390", "createdAt": "2020-02-12T21:15:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/ConceptSetDao.java", "diffHunk": "@@ -25,6 +26,8 @@\n           .put(Domain.PHYSICALMEASUREMENT, \"measurement\")\n           .build();\n \n+  Optional<DbConceptSet> findOneByConceptSetIdAndWorkspaceId(long conceptId, long workspaceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNzQ5OQ==", "bodyText": "Awesome!  You can.  also make. a. vaildation function check required args are present or throw.\nnit: I'm used to see the work happen in build(), there's. no reason it can't work this way.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378517499", "createdAt": "2020-02-12T21:17:45Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbConceptSet.java", "diffHunk": "@@ -188,4 +203,89 @@ public void setParticipantCount(int participantCount) {\n   public void setConceptIds(Set<Long> conceptIds) {\n     this.conceptIds = conceptIds;\n   }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+    private long conceptSetId;\n+    private int version;\n+    private String name;\n+    private short domain;\n+    private Short survey;\n+    private String description;\n+    private long workspaceId;\n+    private DbUser creator;\n+    private Timestamp creationTime;\n+    private Timestamp lastModifiedTime;\n+    private int participantCount;\n+    private Set<Long> conceptIds = new HashSet<>();\n+\n+    private Builder() {}\n+\n+    public DbConceptSet.Builder addConceptSetId(long conceptSetId) {\n+      this.conceptSetId = conceptSetId;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addVersion(int version) {\n+      this.version = version;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addName(String name) {\n+      this.name = name;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addDomain(Short domain) {\n+      this.domain = domain;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addSurvey(Short survey) {\n+      this.survey = survey;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addDescription(String description) {\n+      this.description = description;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addWorkspaceId(long workspaceId) {\n+      this.workspaceId = workspaceId;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addCreator(DbUser creator) {\n+      this.creator = creator;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addCreationTime(Timestamp creationTime) {\n+      this.creationTime = creationTime;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addLastModifiedTime(Timestamp lastModifiedTime) {\n+      this.lastModifiedTime = lastModifiedTime;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addParticipantCount(int participantCount) {\n+      this.participantCount = participantCount;\n+      return this;\n+    }\n+\n+    public DbConceptSet.Builder addConceptIds(Set<Long> conceptIds) {\n+      this.conceptIds = conceptIds;\n+      return this;\n+    }\n+\n+    public DbConceptSet build() {\n+      return new DbConceptSet(this);\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2ODU4Nw=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxODQ5OA==", "bodyText": "[please change] I wouldn't put int-to-string mappings in CommonMappers, because you might get false positives with other types. I.e.  MapStruct doesn't know that these are etag-specific.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378518498", "createdAt": "2020-02-12T21:19:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -41,4 +42,12 @@ public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n   public static Short dataAccessLevelToStorageEnum(DataAccessLevel dataAccessLevel) {\n     return CommonStorageEnums.dataAccessLevelToStorage(dataAccessLevel);\n   }\n+\n+  public static String cdrVersionToEtag(int cdrVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f79afcc36f9f3e2d9fe4ef9672194d4719b531d1", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/f79afcc36f9f3e2d9fe4ef9672194d4719b531d1", "committedDate": "2020-02-12T21:55:42Z", "message": "renaming variable per comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0b7c6dad95b500bf3fb5771b958a2406761e059", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/e0b7c6dad95b500bf3fb5771b958a2406761e059", "committedDate": "2020-02-12T21:57:45Z", "message": "making variable final."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad5871a162a3da2f2e16a904b9ca58c7ea1a57a3", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/ad5871a162a3da2f2e16a904b9ca58c7ea1a57a3", "committedDate": "2020-02-13T18:23:37Z", "message": "add new service call and refactored service call per comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e8dbcceb412b43dda21c3b91852643ca04c56c6", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/6e8dbcceb412b43dda21c3b91852643ca04c56c6", "committedDate": "2020-02-13T18:32:10Z", "message": "fixing test case."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b64f4fe3cc2fb28de4fa7100f47d4dbfef7f9050", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/b64f4fe3cc2fb28de4fa7100f47d4dbfef7f9050", "committedDate": "2020-02-13T18:56:17Z", "message": "rename of dao method and adding test clase for ConceptSetDaoTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/c5e36f29cdbb2cc0647c28e050201ee1ccc6630b", "committedDate": "2020-02-13T18:58:55Z", "message": "adding qualifier names to common mappers methods."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3ODE2Nzk2", "url": "https://github.com/all-of-us/workbench/pull/3122#pullrequestreview-357816796", "createdAt": "2020-02-12T21:55:55Z", "commit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1NTo1NVrOFo_-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODo1ODowNVrOFpfwFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNTYyNg==", "bodyText": "Done.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378535626", "createdAt": "2020-02-12T21:55:55Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -306,13 +311,16 @@ private void addConceptsToSet(DbConceptSet dbConceptSet, List<Long> addedIds) {\n       throw new BadRequestException(\n           \"Target workspace does not have the same CDR version as current workspace\");\n     }\n-    DbConceptSet conceptSet = conceptSetService.findOne(Long.valueOf(fromConceptSetId));\n-    if (conceptSet == null) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"Concept set %s does not exist\",\n-              createResourcePath(fromWorkspaceNamespace, fromWorkspaceId, fromConceptSetId)));\n-    }\n+    DbConceptSet conceptSet =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxMTY1OA=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4MjY5NQ==", "bodyText": "Reverted this and made 2 different methods on service.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378982695", "createdAt": "2020-02-13T16:44:14Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -354,41 +362,26 @@ private DbConceptSet getDbConceptSet(\n         workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n             workspaceNamespace, workspaceId, workspaceAccessLevel);\n \n-    DbConceptSet conceptSet = conceptSetService.findOne(conceptSetId);\n-    if (conceptSet == null || workspace.getWorkspaceId() != conceptSet.getWorkspaceId()) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"No concept set with ID %s in workspace %s.\",\n-              conceptSetId, workspace.getFirecloudName()));\n-    }\n+    DbConceptSet conceptSet =\n+        conceptSetService\n+            .findOne(conceptSetId, workspace.getWorkspaceId())\n+            .orElseThrow(\n+                () ->\n+                    new NotFoundException(\n+                        String.format(\n+                            \"No concept set with ID %s in workspace %s.\",\n+                            conceptSetId, workspace.getFirecloudName())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ2NzQ0OQ=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4NDEwOA==", "bodyText": "I agree with Eric. I will file a ticket for this work: https://precisionmedicineinitiative.atlassian.net/browse/RW-4451", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r378984108", "createdAt": "2020-02-13T16:46:31Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -240,15 +244,13 @@ public DataSet apply(DbDataset dataSet) {\n         }\n       };\n \n-  private ConceptSet toClientConceptSet(DbConceptSet conceptSet) {\n-    ConceptSet result = ConceptSetsController.toClientConceptSet(conceptSet);\n-    if (!conceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptDao.findAll(conceptSet.getConceptIds());\n-      result.setConcepts(\n-          StreamSupport.stream(concepts.spliterator(), false)\n-              .map(ConceptsController::toClientConcept)\n-              .collect(Collectors.toList()));\n-    }\n+  private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNDM2MQ=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzNjIyNA==", "bodyText": "Done.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379036224", "createdAt": "2020-02-13T18:20:30Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -240,15 +244,13 @@ public DataSet apply(DbDataset dataSet) {\n         }\n       };\n \n-  private ConceptSet toClientConceptSet(DbConceptSet conceptSet) {\n-    ConceptSet result = ConceptSetsController.toClientConceptSet(conceptSet);\n-    if (!conceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptDao.findAll(conceptSet.getConceptIds());\n-      result.setConcepts(\n-          StreamSupport.stream(concepts.spliterator(), false)\n-              .map(ConceptsController::toClientConcept)\n-              .collect(Collectors.toList()));\n-    }\n+  private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n+    ConceptSet result = conceptSetMapper.dbModelToClient(dbConceptSet);\n+    Iterable<DbConcept> concepts = conceptDao.findAll(dbConceptSet.getConceptIds());\n+    result.setConcepts(\n+        StreamSupport.stream(concepts.spliterator(), false)\n+            .map(ConceptsController::toClientConcept)\n+            .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTE5MQ=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzOTgxNw==", "bodyText": "this can be done with this ticket: https://precisionmedicineinitiative.atlassian.net/browse/RW-4451", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379039817", "createdAt": "2020-02-13T18:27:26Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/conceptset/ConceptSetMapper.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.pmiops.workbench.conceptset;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.model.ConceptSet;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+\n+@Mapper(\n+    componentModel = \"spring\",\n+    uses = {CommonMappers.class})\n+public interface ConceptSetMapper {\n+\n+  @Mapping(target = \"id\", source = \"conceptSetId\")\n+  @Mapping(target = \"domain\", source = \"domainEnum\")\n+  @Mapping(target = \"survey\", source = \"surveysEnum\")\n+  @Mapping(target = \"etag\", source = \"version\", qualifiedByName = \"etag\")\n+  @Mapping(target = \"concepts\", ignore = true)\n+  ConceptSet dbModelToClient(DbConceptSet source);\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNTcyMQ=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NDA2NA==", "bodyText": "Done, also added Test class for ConceptSetDaoTest since it didn't exist.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379054064", "createdAt": "2020-02-13T18:53:59Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/ConceptSetDao.java", "diffHunk": "@@ -25,6 +26,8 @@\n           .put(Domain.PHYSICALMEASUREMENT, \"measurement\")\n           .build();\n \n+  Optional<DbConceptSet> findOneByConceptSetIdAndWorkspaceId(long conceptId, long workspaceId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxNjM5MA=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA1NjE1MA==", "bodyText": "I've added qualifiers to the names:\n@Named(\"cdrVersionToEtag\") and @Named(\"etagToCdrVersion\")\nto navigate this problem. @ericsong  is this reasonable or bad practice?", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379056150", "createdAt": "2020-02-13T18:58:05Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -41,4 +42,12 @@ public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n   public static Short dataAccessLevelToStorageEnum(DataAccessLevel dataAccessLevel) {\n     return CommonStorageEnums.dataAccessLevelToStorage(dataAccessLevel);\n   }\n+\n+  public static String cdrVersionToEtag(int cdrVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxODQ5OA=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDg5NDAz", "url": "https://github.com/all-of-us/workbench/pull/3122#pullrequestreview-358489403", "createdAt": "2020-02-13T19:26:37Z", "commit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "state": "APPROVED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToyNjozN1rOFpgpMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMDozMDoxNVrOFpiiaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MDc2OQ==", "bodyText": "how about toHydratedConceptSet()? or toPopulatedConceptSet()?", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379070769", "createdAt": "2020-02-13T19:26:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -354,42 +361,13 @@ private DbConceptSet getDbConceptSet(\n         workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n             workspaceNamespace, workspaceId, workspaceAccessLevel);\n \n-    DbConceptSet conceptSet = conceptSetService.findOne(conceptSetId);\n-    if (conceptSet == null || workspace.getWorkspaceId() != conceptSet.getWorkspaceId()) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"No concept set with ID %s in workspace %s.\",\n-              conceptSetId, workspace.getFirecloudName()));\n-    }\n-    return conceptSet;\n-  }\n-\n-  public static ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n-    return new ConceptSet()\n-        .etag(Etags.fromVersion(dbConceptSet.getVersion()))\n-        .lastModifiedTime(dbConceptSet.getLastModifiedTime().getTime())\n-        .creationTime(dbConceptSet.getCreationTime().getTime())\n-        .description(dbConceptSet.getDescription())\n-        .id(dbConceptSet.getConceptSetId())\n-        .name(dbConceptSet.getName())\n-        .domain(dbConceptSet.getDomainEnum())\n-        .participantCount(dbConceptSet.getParticipantCount())\n-        .survey(dbConceptSet.getSurveysEnum())\n-        .creator(\n-            dbConceptSet.getCreator() != null ? dbConceptSet.getCreator().getUsername() : null);\n+    return conceptSetService.findOne(conceptSetId, workspace);\n   }\n \n-  private ConceptSet toClientConceptSetWithConcepts(DbConceptSet dbConceptSet) {\n-    ConceptSet conceptSet = toClientConceptSet(dbConceptSet);\n-    if (!dbConceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptService.findAll(dbConceptSet.getConceptIds());\n-      conceptSet.setConcepts(\n-          Streams.stream(concepts)\n-              .map(ConceptsController::toClientConcept)\n-              .sorted(CONCEPT_NAME_ORDERING)\n-              .collect(Collectors.toList()));\n-    }\n-    return conceptSet;\n+  public ConceptSet toClientConceptSetWithConcepts(DbConceptSet dbConceptSet) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MTY0MQ==", "bodyText": "\ud83d\udcaf for pulling daos out of the controller.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379071641", "createdAt": "2020-02-13T19:28:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -35,8 +35,8 @@\n import org.json.JSONArray;\n import org.json.JSONException;\n import org.json.JSONObject;\n-import org.pmiops.workbench.cdr.dao.ConceptDao;\n-import org.pmiops.workbench.cdr.model.DbConcept;\n+import org.pmiops.workbench.concept.ConceptService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MzExNg==", "bodyText": "It's confusing to see a method name. with no verb unless it's on a builder. I was thinking this was a getConcepts() method at first.\naside: I'm starting to wonder if this controller needs a broader name: some of. these methods don't talk about datasets at all.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379073116", "createdAt": "2020-02-13T19:30:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -240,16 +243,11 @@ public DataSet apply(DbDataset dataSet) {\n         }\n       };\n \n-  private ConceptSet toClientConceptSet(DbConceptSet conceptSet) {\n-    ConceptSet result = ConceptSetsController.toClientConceptSet(conceptSet);\n-    if (!conceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptDao.findAll(conceptSet.getConceptIds());\n-      result.setConcepts(\n-          StreamSupport.stream(concepts.spliterator(), false)\n-              .map(ConceptsController::toClientConcept)\n-              .collect(Collectors.toList()));\n-    }\n-    return result;\n+  private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n+    ConceptSet result = conceptSetMapper.dbModelToClient(dbConceptSet);\n+    return result.concepts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MzY3Mw==", "bodyText": "I think you can return an iterable from. here if that's helpful, for example if the result set is very long.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379073673", "createdAt": "2020-02-13T19:31:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/concept/ConceptService.java", "diffHunk": "@@ -124,6 +129,14 @@ private static String modifyMultipleMatchKeyword(String query) {\n     return conceptDao.findAll(conceptIds);\n   }\n \n+  public List<Concept> findAll(Collection<Long> conceptIds, Ordering<Concept> ordering) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA5MzA3NQ==", "bodyText": "That looks like a great solution to me.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379093075", "createdAt": "2020-02-13T20:11:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -41,4 +42,12 @@ public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n   public static Short dataAccessLevelToStorageEnum(DataAccessLevel dataAccessLevel) {\n     return CommonStorageEnums.dataAccessLevelToStorage(dataAccessLevel);\n   }\n+\n+  public static String cdrVersionToEtag(int cdrVersion) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUxODQ5OA=="}, "originalCommit": {"oid": "bfd1df4f761ba80f2432e4a1da23388f7d6cf1bc"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA5MzMxMg==", "bodyText": "aside: I could've sworn another mapper already had one of these...", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379093312", "createdAt": "2020-02-13T20:12:06Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -41,4 +43,14 @@ public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n   public static Short dataAccessLevelToStorageEnum(DataAccessLevel dataAccessLevel) {\n     return CommonStorageEnums.dataAccessLevelToStorage(dataAccessLevel);\n   }\n+\n+  @Named(\"cdrVersionToEtag\")\n+  public static String cdrVersionToEtag(int cdrVersion) {\n+    return Etags.fromVersion(cdrVersion);\n+  }\n+\n+  @Named(\"etagToCdrVersion\")\n+  public static int etagToCdrVersion(String etag) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwMTUwNg==", "bodyText": "Can you test the other direction? Or is that not implemented yet?", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379101506", "createdAt": "2020-02-13T20:29:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/conceptset/ConceptSetMapperTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.conceptset;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.sql.Timestamp;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.db.model.CommonStorageEnums;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.ConceptSet;\n+import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.Surveys;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class ConceptSetMapperTest {\n+\n+  @Autowired private ConceptSetMapper conceptSetMapper;\n+\n+  private DbConceptSet dbConceptSet;\n+\n+  @TestConfiguration\n+  @Import({ConceptSetMapperImpl.class})\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    Timestamp now = new Timestamp(System.currentTimeMillis());\n+    DbUser creator = new DbUser();\n+    creator.setUsername(\"brian\");\n+    dbConceptSet =\n+        DbConceptSet.builder()\n+            .addConceptSetId(1)\n+            .addCreationTime(now)\n+            .addCreator(creator)\n+            .addDescription(\"descr\")\n+            .addDomain(CommonStorageEnums.domainToStorage(Domain.CONDITION))\n+            .addLastModifiedTime(now)\n+            .addName(\"conceptSet\")\n+            .addParticipantCount(200)\n+            .addSurvey(CommonStorageEnums.surveysToStorage(Surveys.THE_BASICS))\n+            .addVersion(1)\n+            .addWorkspaceId(1)\n+            .build();\n+  }\n+\n+  @Test\n+  public void dbModelToClient() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwMTgwMQ==", "bodyText": "is this an automatic ID? If so, then why specify it?", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379101801", "createdAt": "2020-02-13T20:30:15Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/ConceptSetDaoTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.sql.Timestamp;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.CommonStorageEnums;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.Surveys;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+public class ConceptSetDaoTest {\n+\n+  @Autowired private ConceptSetDao conceptSetDao;\n+  @Autowired private UserDao userDao;\n+  @Autowired private WorkspaceDao workspaceDao;\n+  private DbConceptSet dbConceptSet;\n+\n+  @Before\n+  public void setUp() {\n+    DbWorkspace ws = new DbWorkspace();\n+    ws.setVersion(1);\n+    ws = workspaceDao.save(ws);\n+\n+    DbUser creator = new DbUser();\n+    creator.setUsername(\"brian\");\n+    creator = userDao.save(creator);\n+\n+    Timestamp now = new Timestamp(System.currentTimeMillis());\n+    dbConceptSet =\n+        conceptSetDao.save(\n+            DbConceptSet.builder()\n+                .addConceptSetId(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a20595e541b39c3061135753e8470b46f091c82", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/9a20595e541b39c3061135753e8470b46f091c82", "committedDate": "2020-02-13T21:38:21Z", "message": "removing primary key initialization from ConceptSetDao setup data objects. Hibernate manages these."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "235b5c9c03d715bff1d45dbd0158aa17882724e4", "author": {"user": {"login": "freemabd", "name": "Brian Freeman"}}, "url": "https://github.com/all-of-us/workbench/commit/235b5c9c03d715bff1d45dbd0158aa17882724e4", "committedDate": "2020-02-13T21:58:51Z", "message": "renamed of method per comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTY2MDIy", "url": "https://github.com/all-of-us/workbench/pull/3122#pullrequestreview-358566022", "createdAt": "2020-02-13T21:32:14Z", "commit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTozMjoxNVrOFpkRFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTo1ODoyNlrOFplAvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMDEzMw==", "bodyText": "I moved them from WorkspaceMapper into CommonMappers", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379130133", "createdAt": "2020-02-13T21:32:15Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -41,4 +43,14 @@ public static String cdrVersionToId(DbCdrVersion cdrVersion) {\n   public static Short dataAccessLevelToStorageEnum(DataAccessLevel dataAccessLevel) {\n     return CommonStorageEnums.dataAccessLevelToStorage(dataAccessLevel);\n   }\n+\n+  @Named(\"cdrVersionToEtag\")\n+  public static String cdrVersionToEtag(int cdrVersion) {\n+    return Etags.fromVersion(cdrVersion);\n+  }\n+\n+  @Named(\"etagToCdrVersion\")\n+  public static int etagToCdrVersion(String etag) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA5MzMxMg=="}, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMTk0Mw==", "bodyText": "Nice catch... must have been on autopilot.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379131943", "createdAt": "2020-02-13T21:36:14Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/ConceptSetDaoTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.pmiops.workbench.db.dao;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.sql.Timestamp;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.db.model.CommonStorageEnums;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.Surveys;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+public class ConceptSetDaoTest {\n+\n+  @Autowired private ConceptSetDao conceptSetDao;\n+  @Autowired private UserDao userDao;\n+  @Autowired private WorkspaceDao workspaceDao;\n+  private DbConceptSet dbConceptSet;\n+\n+  @Before\n+  public void setUp() {\n+    DbWorkspace ws = new DbWorkspace();\n+    ws.setVersion(1);\n+    ws = workspaceDao.save(ws);\n+\n+    DbUser creator = new DbUser();\n+    creator.setUsername(\"brian\");\n+    creator = userDao.save(creator);\n+\n+    Timestamp now = new Timestamp(System.currentTimeMillis());\n+    dbConceptSet =\n+        conceptSetDao.save(\n+            DbConceptSet.builder()\n+                .addConceptSetId(1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwMTgwMQ=="}, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzNjk5NA==", "bodyText": "It's not implemented yet. I created a ticket for it: https://precisionmedicineinitiative.atlassian.net/browse/RW-4455\nIt's a little more involved than just copy over ConceptSet to DbConceptSet. So I want to think about it a bit... needs to hit BQ with proper OMOP table to get counts.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379136994", "createdAt": "2020-02-13T21:47:17Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/conceptset/ConceptSetMapperTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.pmiops.workbench.conceptset;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+\n+import java.sql.Timestamp;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.api.Etags;\n+import org.pmiops.workbench.db.model.CommonStorageEnums;\n+import org.pmiops.workbench.db.model.DbConceptSet;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.model.ConceptSet;\n+import org.pmiops.workbench.model.Domain;\n+import org.pmiops.workbench.model.Surveys;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+public class ConceptSetMapperTest {\n+\n+  @Autowired private ConceptSetMapper conceptSetMapper;\n+\n+  private DbConceptSet dbConceptSet;\n+\n+  @TestConfiguration\n+  @Import({ConceptSetMapperImpl.class})\n+  static class Configuration {}\n+\n+  @Before\n+  public void setUp() {\n+    Timestamp now = new Timestamp(System.currentTimeMillis());\n+    DbUser creator = new DbUser();\n+    creator.setUsername(\"brian\");\n+    dbConceptSet =\n+        DbConceptSet.builder()\n+            .addConceptSetId(1)\n+            .addCreationTime(now)\n+            .addCreator(creator)\n+            .addDescription(\"descr\")\n+            .addDomain(CommonStorageEnums.domainToStorage(Domain.CONDITION))\n+            .addLastModifiedTime(now)\n+            .addName(\"conceptSet\")\n+            .addParticipantCount(200)\n+            .addSurvey(CommonStorageEnums.surveysToStorage(Surveys.THE_BASICS))\n+            .addVersion(1)\n+            .addWorkspaceId(1)\n+            .build();\n+  }\n+\n+  @Test\n+  public void dbModelToClient() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEwMTUwNg=="}, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MDY2OQ==", "bodyText": "Seems that we have a cap on how many a user can select: https://github.com/all-of-us/workbench/blob/freemabd/address-comments/api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java#L51-L51", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379140669", "createdAt": "2020-02-13T21:54:52Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/concept/ConceptService.java", "diffHunk": "@@ -124,6 +129,14 @@ private static String modifyMultipleMatchKeyword(String query) {\n     return conceptDao.findAll(conceptIds);\n   }\n \n+  public List<Concept> findAll(Collection<Long> conceptIds, Ordering<Concept> ordering) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MzY3Mw=="}, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MTQ0Nw==", "bodyText": "Yes, Data Sets, Concept Sets and Cohort Builder will be more interchangeable in the future and the lines will start to blur a bit.", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379141447", "createdAt": "2020-02-13T21:56:32Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -240,16 +243,11 @@ public DataSet apply(DbDataset dataSet) {\n         }\n       };\n \n-  private ConceptSet toClientConceptSet(DbConceptSet conceptSet) {\n-    ConceptSet result = ConceptSetsController.toClientConceptSet(conceptSet);\n-    if (!conceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptDao.findAll(conceptSet.getConceptIds());\n-      result.setConcepts(\n-          StreamSupport.stream(concepts.spliterator(), false)\n-              .map(ConceptsController::toClientConcept)\n-              .collect(Collectors.toList()));\n-    }\n-    return result;\n+  private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n+    ConceptSet result = conceptSetMapper.dbModelToClient(dbConceptSet);\n+    return result.concepts(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MzExNg=="}, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTE0MjMzNQ==", "bodyText": "Renamed toHydratedConceptSet()", "url": "https://github.com/all-of-us/workbench/pull/3122#discussion_r379142335", "createdAt": "2020-02-13T21:58:26Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/api/ConceptSetsController.java", "diffHunk": "@@ -354,42 +361,13 @@ private DbConceptSet getDbConceptSet(\n         workspaceService.getWorkspaceEnforceAccessLevelAndSetCdrVersion(\n             workspaceNamespace, workspaceId, workspaceAccessLevel);\n \n-    DbConceptSet conceptSet = conceptSetService.findOne(conceptSetId);\n-    if (conceptSet == null || workspace.getWorkspaceId() != conceptSet.getWorkspaceId()) {\n-      throw new NotFoundException(\n-          String.format(\n-              \"No concept set with ID %s in workspace %s.\",\n-              conceptSetId, workspace.getFirecloudName()));\n-    }\n-    return conceptSet;\n-  }\n-\n-  public static ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n-    return new ConceptSet()\n-        .etag(Etags.fromVersion(dbConceptSet.getVersion()))\n-        .lastModifiedTime(dbConceptSet.getLastModifiedTime().getTime())\n-        .creationTime(dbConceptSet.getCreationTime().getTime())\n-        .description(dbConceptSet.getDescription())\n-        .id(dbConceptSet.getConceptSetId())\n-        .name(dbConceptSet.getName())\n-        .domain(dbConceptSet.getDomainEnum())\n-        .participantCount(dbConceptSet.getParticipantCount())\n-        .survey(dbConceptSet.getSurveysEnum())\n-        .creator(\n-            dbConceptSet.getCreator() != null ? dbConceptSet.getCreator().getUsername() : null);\n+    return conceptSetService.findOne(conceptSetId, workspace);\n   }\n \n-  private ConceptSet toClientConceptSetWithConcepts(DbConceptSet dbConceptSet) {\n-    ConceptSet conceptSet = toClientConceptSet(dbConceptSet);\n-    if (!dbConceptSet.getConceptIds().isEmpty()) {\n-      Iterable<DbConcept> concepts = conceptService.findAll(dbConceptSet.getConceptIds());\n-      conceptSet.setConcepts(\n-          Streams.stream(concepts)\n-              .map(ConceptsController::toClientConcept)\n-              .sorted(CONCEPT_NAME_ORDERING)\n-              .collect(Collectors.toList()));\n-    }\n-    return conceptSet;\n+  public ConceptSet toClientConceptSetWithConcepts(DbConceptSet dbConceptSet) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA3MDc2OQ=="}, "originalCommit": {"oid": "c5e36f29cdbb2cc0647c28e050201ee1ccc6630b"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3567, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}