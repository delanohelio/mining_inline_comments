{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxMzUwMjk5", "number": 4346, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzoyMDoyMlrOE_2iYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzoxMDo1MlrOFAip1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mzg5MjgwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzoyMDoyMlrOH9yTCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzowNzo1MFrOH-5Ulg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTI1OA==", "bodyText": "I'm pretty sure this does what I want but I don't really understand how it works. Can someone explain to me why this works but await LeoRuntimeInitializer..... does not?", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r534549258", "createdAt": "2020-12-02T23:20:22Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -163,6 +163,31 @@ describe('RuntimeInitializer', () => {\n     expect(runtime.status).toEqual(RuntimeStatus.Running);\n   });\n \n+  it('should lazily create user\\'s most runtime if a valid one exists', async() => {\n+    serverConfigStore.next({gsuiteDomain: 'researchallofus.org', enableCustomRuntimes: true});\n+    mockGetRuntime.mockImplementation(namespace => {\n+      return {\n+        ...defaultRuntime(),\n+        gceConfig: {\n+          diskSize: 777,\n+          machineType: 'n1-standard-16'\n+        },\n+        status: RuntimeStatus.Deleted\n+      }; });\n+\n+    LeoRuntimeInitializer.initialize({\n+      workspaceNamespace: workspaceNamespace,\n+    });\n+    await new Promise(setImmediate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU1MjI1MA==", "bodyText": "We're using fake timers in this test. The LeoRuntimeInitializer uses setTimeout() to do the polling, which means it won't terminate unless we tick the timers. see the helper function runInitializerAndTimers which handles this properly, you may want to use that here.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r534552250", "createdAt": "2020-12-02T23:27:54Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -163,6 +163,31 @@ describe('RuntimeInitializer', () => {\n     expect(runtime.status).toEqual(RuntimeStatus.Running);\n   });\n \n+  it('should lazily create user\\'s most runtime if a valid one exists', async() => {\n+    serverConfigStore.next({gsuiteDomain: 'researchallofus.org', enableCustomRuntimes: true});\n+    mockGetRuntime.mockImplementation(namespace => {\n+      return {\n+        ...defaultRuntime(),\n+        gceConfig: {\n+          diskSize: 777,\n+          machineType: 'n1-standard-16'\n+        },\n+        status: RuntimeStatus.Deleted\n+      }; });\n+\n+    LeoRuntimeInitializer.initialize({\n+      workspaceNamespace: workspaceNamespace,\n+    });\n+    await new Promise(setImmediate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTI1OA=="}, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2NDQ3NA==", "bodyText": "Also, as to why this await new Promise(setImmediate) appeared to work: what this does is allow the call stack to resolve for any calbacks/promises that are pending. In this case, I expect this gives the first call to getRuntime in the initializer a chance to return and be processed, which may be enough to satisfy your test constraints.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r534564474", "createdAt": "2020-12-02T23:59:40Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -163,6 +163,31 @@ describe('RuntimeInitializer', () => {\n     expect(runtime.status).toEqual(RuntimeStatus.Running);\n   });\n \n+  it('should lazily create user\\'s most runtime if a valid one exists', async() => {\n+    serverConfigStore.next({gsuiteDomain: 'researchallofus.org', enableCustomRuntimes: true});\n+    mockGetRuntime.mockImplementation(namespace => {\n+      return {\n+        ...defaultRuntime(),\n+        gceConfig: {\n+          diskSize: 777,\n+          machineType: 'n1-standard-16'\n+        },\n+        status: RuntimeStatus.Deleted\n+      }; });\n+\n+    LeoRuntimeInitializer.initialize({\n+      workspaceNamespace: workspaceNamespace,\n+    });\n+    await new Promise(setImmediate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTI1OA=="}, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3NzE0NQ==", "bodyText": "I see. thanks for the explanation. I actually did start out by using runInitializerAndTimers but I only wanted it to resolve once and not make the subsequent calls to poll which is why I was looking for an alternative.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535277145", "createdAt": "2020-12-03T14:33:38Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -163,6 +163,31 @@ describe('RuntimeInitializer', () => {\n     expect(runtime.status).toEqual(RuntimeStatus.Running);\n   });\n \n+  it('should lazily create user\\'s most runtime if a valid one exists', async() => {\n+    serverConfigStore.next({gsuiteDomain: 'researchallofus.org', enableCustomRuntimes: true});\n+    mockGetRuntime.mockImplementation(namespace => {\n+      return {\n+        ...defaultRuntime(),\n+        gceConfig: {\n+          diskSize: 777,\n+          machineType: 'n1-standard-16'\n+        },\n+        status: RuntimeStatus.Deleted\n+      }; });\n+\n+    LeoRuntimeInitializer.initialize({\n+      workspaceNamespace: workspaceNamespace,\n+    });\n+    await new Promise(setImmediate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTI1OA=="}, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU2NDYwNg==", "bodyText": "ack, you can also do await waitForTick with is effectively achieving the same thing and is more standard to use in our tests", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535564606", "createdAt": "2020-12-03T20:21:49Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -163,6 +163,31 @@ describe('RuntimeInitializer', () => {\n     expect(runtime.status).toEqual(RuntimeStatus.Running);\n   });\n \n+  it('should lazily create user\\'s most runtime if a valid one exists', async() => {\n+    serverConfigStore.next({gsuiteDomain: 'researchallofus.org', enableCustomRuntimes: true});\n+    mockGetRuntime.mockImplementation(namespace => {\n+      return {\n+        ...defaultRuntime(),\n+        gceConfig: {\n+          diskSize: 777,\n+          machineType: 'n1-standard-16'\n+        },\n+        status: RuntimeStatus.Deleted\n+      }; });\n+\n+    LeoRuntimeInitializer.initialize({\n+      workspaceNamespace: workspaceNamespace,\n+    });\n+    await new Promise(setImmediate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTI1OA=="}, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxMjkxOA==", "bodyText": "the existing functions look like they take in a wrapper component but I don't think we actually have one in these tests", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535712918", "createdAt": "2020-12-03T23:07:50Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.spec.tsx", "diffHunk": "@@ -163,6 +163,31 @@ describe('RuntimeInitializer', () => {\n     expect(runtime.status).toEqual(RuntimeStatus.Running);\n   });\n \n+  it('should lazily create user\\'s most runtime if a valid one exists', async() => {\n+    serverConfigStore.next({gsuiteDomain: 'researchallofus.org', enableCustomRuntimes: true});\n+    mockGetRuntime.mockImplementation(namespace => {\n+      return {\n+        ...defaultRuntime(),\n+        gceConfig: {\n+          diskSize: 777,\n+          machineType: 'n1-standard-16'\n+        },\n+        status: RuntimeStatus.Deleted\n+      }; });\n+\n+    LeoRuntimeInitializer.initialize({\n+      workspaceNamespace: workspaceNamespace,\n+    });\n+    await new Promise(setImmediate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU0OTI1OA=="}, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mzk4Njg5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMzo1NjowN1rOH9zJjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDozMTo1MFrOH-el3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2MzIxMw==", "bodyText": "See TODO/comment above (and you can remove the TODO part). Ideally the logic here would be the same as you added on the create panel: if the deleted runtime has one of the preset configuration types, use that as the target (instead of whatever we got from the backend). This makes the behavior symmetric to opening the create panel, where we want to snap to the latest \"preset\", rather than whatever the preset happened to be when the user last used the system.\nNote: this won't matter much for now as we don't expect the presets to change, but later when we start allowing configuration of docker image versions, this will be important so people don't unintentionally stuck on old versions.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r534563213", "createdAt": "2020-12-02T23:56:07Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -204,7 +202,15 @@ export class LeoRuntimeInitializer {\n       // - the user's most recent UserOverride config, if any\n       // - (maybe) the user's most recently selected preset, if any\n       // - general analysis\n-      runtime = {...runtimePresets.generalAnalysis.runtimeTemplate};\n+\n+      if (this.currentRuntime && this.currentRuntime.status === RuntimeStatus.Deleted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3NDk3Mw==", "bodyText": "Right - made that change and added a test case", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535274973", "createdAt": "2020-12-03T14:31:50Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -204,7 +202,15 @@ export class LeoRuntimeInitializer {\n       // - the user's most recent UserOverride config, if any\n       // - (maybe) the user's most recently selected preset, if any\n       // - general analysis\n-      runtime = {...runtimePresets.generalAnalysis.runtimeTemplate};\n+\n+      if (this.currentRuntime && this.currentRuntime.status === RuntimeStatus.Deleted) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDU2MzIxMw=="}, "originalCommit": {"oid": "f8ab30a87453571211588b37c37045aa7ac23438"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDEyMTk1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxMzoxNlrOH-vsbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxMzoxNlrOH-vsbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1NTE4Mw==", "bodyText": "rm", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535555183", "createdAt": "2020-12-03T20:13:16Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -791,6 +790,8 @@ export const RuntimePanel = fp.flow(\n       () => PanelContent.Create],\n     [() => true, () => PanelContent.Customize]\n   ])([currentRuntime, status]);\n+  console.log(currentRuntime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDEyOTQxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-presets.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxNDoxOVrOH-vxAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxNDoxOVrOH-vxAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1NjM1NQ==", "bodyText": "Unnecessary && check as newRuntime cannot be null at this point", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535556355", "createdAt": "2020-12-03T20:14:19Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-presets.ts", "diffHunk": "@@ -29,3 +30,26 @@ export const runtimePresets: {\n     }\n   }\n };\n+\n+export const applyPresetOverride = (runtime) => {\n+  if (!runtime) {\n+    return runtime;\n+  }\n+\n+  const newRuntime = {...runtime};\n+\n+  // if runtime configuration type is a default, override its config with preset values\n+  // The Deleted check is so that we only update the user's runtime to the latest preset values\n+  // after they delete their runtime (ex. not while its actively in use).\n+  if (newRuntime && newRuntime.status === RuntimeStatus.Deleted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDEzMTI2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-presets.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxNDozM1rOH-vyCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxNDozM1rOH-vyCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1NjYxOQ==", "bodyText": "nit: indent", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535556619", "createdAt": "2020-12-03T20:14:33Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-presets.ts", "diffHunk": "@@ -29,3 +30,26 @@ export const runtimePresets: {\n     }\n   }\n };\n+\n+export const applyPresetOverride = (runtime) => {\n+  if (!runtime) {\n+    return runtime;\n+  }\n+\n+  const newRuntime = {...runtime};\n+\n+  // if runtime configuration type is a default, override its config with preset values\n+  // The Deleted check is so that we only update the user's runtime to the latest preset values\n+  // after they delete their runtime (ex. not while its actively in use).\n+  if (newRuntime && newRuntime.status === RuntimeStatus.Deleted) {\n+    const runtimePresetKey = fp.keys(runtimePresets)\n+    .find(key => runtimePresets[key].runtimeTemplate.configurationType === newRuntime.configurationType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDEzNzY3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxNTozMFrOH-v12A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxNTozMFrOH-v12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU1NzU5Mg==", "bodyText": "revert", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535557592", "createdAt": "2020-12-03T20:15:30Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -282,7 +281,7 @@ export const useRuntimeStatus = (currentWorkspaceNamespace): [\n             resolutionCondition: (r) => resolutionCondition(r)\n           });\n         } catch (e) {\n-          // ExceededActionCountError is expected, as we exceed our create limit of 0.\n+          // gxceededActionCountError is expected, as we exceed our create limit of 0.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MDE2ODQ3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-presets.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxOTo0MlrOH-wITg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMDoxOTo0MlrOH-wITg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTU2MjMxOA==", "bodyText": "IMO this business logic belongs outside of this helper function. I realize this may result in some small duplication, but the separation of responsibilities is clearer if the caller only calls applyPresetOverride in cases where it actually wants to apply a presetOverride. Otherwise you probably need a super verbose method name to convey the semantics accurately.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535562318", "createdAt": "2020-12-03T20:19:42Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-presets.ts", "diffHunk": "@@ -29,3 +30,26 @@ export const runtimePresets: {\n     }\n   }\n };\n+\n+export const applyPresetOverride = (runtime) => {\n+  if (!runtime) {\n+    return runtime;\n+  }\n+\n+  const newRuntime = {...runtime};\n+\n+  // if runtime configuration type is a default, override its config with preset values\n+  // The Deleted check is so that we only update the user's runtime to the latest preset values\n+  // after they delete their runtime (ex. not while its actively in use).\n+  if (newRuntime && newRuntime.status === RuntimeStatus.Deleted) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "31f8be1fa94d4875ea21a0fc8e687df71f3ec6e5"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTEyMDg0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzoxMDo1MlrOH-5Z1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QyMzoxMDo1MlrOH-5Z1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTcxNDI2MQ==", "bodyText": "your comment about factoring out the business logic made me realize that I could probably just remove that check here.\nIn most cases the status will be Deleted at this point but even in the case where it isn't, I feel like it probably makes sense to create the currentRuntime (w/ the preset override) instead of defaulting to the General Analysis template.", "url": "https://github.com/all-of-us/workbench/pull/4346#discussion_r535714261", "createdAt": "2020-12-03T23:10:52Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -196,16 +194,16 @@ export class LeoRuntimeInitializer {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n+\n     let runtime: Runtime;\n     if (serverConfigStore.getValue().enableCustomRuntimes && this.targetRuntime) {\n       runtime = this.targetRuntime;\n+    } else if (this.currentRuntime) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcfa6caef4d1132b07663a51516655073f7511e1"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3605, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}