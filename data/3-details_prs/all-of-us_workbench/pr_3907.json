{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMjU0NTI4", "number": 3907, "title": "[RW-4847][risk=low] Use swagger codegen plugin over custom gradle tasks", "bodyText": "Part 1 of 2 for supporting swagger3\nWhy use this plugin?\nThis plugin supports simultaneous usage of Swagger 2 and Swagger 3. Despite my best efforts, I couldn't sort out the deps to make our current approach work on Swagger 2 / Swagger 3 simultaneously (tried subproject, imports into the same project), but this plugin seems preferable anyways as it comes with decent documentation and equivalent or better capabilities.\nChanges\n\nThis PR should be a no-op, in terms of behavior of the application.\nFixed an issue (I believe preexisting) which caused the appengineRun task to get cached, which meant that dev-up would not execute if you made no code changes since last run (possibly this is the issue you hit @jmthibault79)\nMade several changes in preparation for adding swagger3:\n\nRenamed the codegen ignore file to support two\nSwitched codegen output directory to live under build/ instead of src/generated. This is more standard and allows flexibility to write swagger2 and swagger3 to separate build directories. This also meant we no longer can implicitly depend on the default srcDir for compileGenerated, which opaquely defaulted to src/generated/java.\nMade corresponding swagger ignore file changes to account for the above\n\n\nConsistency change: swagger yaml file names\nAs part of the swagger plugin, validation is now performed ahead of code generation.\n\nWhy Swagger and not OpenAPI generator?\nTurns out OpenAPI generator doesn't fully support oneOf yet, which is used heavily in the new Leo API. This resulted in generation of invalid Java code.", "createdAt": "2020-08-24T04:47:02Z", "url": "https://github.com/all-of-us/workbench/pull/3907", "merged": true, "mergeCommit": {"oid": "715ac089df7ab51e28221d8c6fe2a30ce529e9fe"}, "closed": true, "closedAt": "2020-08-25T05:10:13Z", "author": {"login": "calbach"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCDqtdgFqTQ3MzU0NjQzOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCPd0nABqjM2ODgxMzc1MDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNTQ2NDM5", "url": "https://github.com/all-of-us/workbench/pull/3907#pullrequestreview-473546439", "createdAt": "2020-08-24T14:31:39Z", "commit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDozMTo0MFrOHFnulw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDo0MDo0NVrOHFoGww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NTgzMQ==", "bodyText": "aside: I never quite grokked what needs to go here vs. an external properties file.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475655831", "createdAt": "2020-08-24T14:31:40Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -1,12 +1,10 @@\n-import io.swagger.codegen.DefaultGenerator\n-import io.swagger.codegen.config.CodegenConfigurator\n import org.pmiops.workbench.tooling.GenerateAPIListingTask\n import org.pmiops.workbench.tooling.IncrementalHotSwapTask\n \n // Runs before all tasks. Sets up properties and dependencies for the build\n // process itself.\n buildscript {\n-  // External propertiges on the default project. Values declared in ext blocks\n+  // External properties on the default project. Values declared in ext blocks\n   // outside of the buildscsript block aren't usable here.\n   ext {\n     ELASTICSEARCH_VERSION = '6.8.3'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1Njk2MA==", "bodyText": "why Captcha and not ReCaptcha?", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475656960", "createdAt": "2020-08-24T14:33:24Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/captcha.yaml", "diffHunk": "@@ -3,10 +3,10 @@ info:\n   title: Captcha", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NzYxMA==", "bodyText": "You should be able to add deprecated: true here so that it maps to @Deprecated in Java.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475657610", "createdAt": "2020-08-24T14:34:18Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5055,10 +5055,9 @@ definitions:\n         type: string\n       contactEmailFailure:\n         description: >\n-          Whether or not contact email could be added to verification list. No longer in use.\n+          DEPRECATED. Whether or not contact email could be added to verification list. No longer in use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1ODE5MA==", "bodyText": "nit: you could just do **/*.md in case you want another top-level markdown file.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475658190", "createdAt": "2020-08-24T14:35:09Z", "author": {"login": "jaycarlton"}, "path": "api/.swagger2-codegen-ignore", "diffHunk": "@@ -22,18 +22,22 @@\n # Then explicitly reverse the ignore rule for a single file:\n #!docs/README.md\n \n-README.md\n-pom.xml\n-.gitignore\n-.travis.yml\n-build.sbt\n-docs/*.md\n-settings.gradle\n-git_push.sh\n-gradle.properties\n-src/main/AndroidManifest.xml\n-src/main/resources/application.properties\n-src/test/**\n-gradlew\n-gradlew.bat\n-gradle/**\n+build/swagger2/README.md", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MTM3NQ==", "bodyText": "nit: you could declare constants like MODEL_SUBPACKAGE = 'model' and API_SUBPACKAGE so they're not repeated for each of these. Or even have a little method for generating all the additional package properties.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475661375", "createdAt": "2020-08-24T14:39:53Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -69,251 +66,208 @@ apply plugin: 'org.owasp.dependencycheck'\n apply plugin: 'org.springframework.boot'\n apply plugin: 'war'\n \n-def swaggerTargetFolder = 'src/generated/java'\n-// This path is the Java sources root for finding any overridden Swagger-codegen\n-// templates we may be using.\n-def swaggerTemplateDir = 'src/main/resources/swaggercodegen'\n-def workbenchApiSourceFile = 'src/main/resources/workbench-api.yaml'\n-\n-task generateWorkbenchApi {\n-  group 'swagger-codegen'\n-  description 'Generates the Spring controllers and API model classes in Java.'\n-  dependsOn tasks.validateSwagger\n-  inputs.file(\"$projectDir/$workbenchApiSourceFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$workbenchApiSourceFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('spring')\n-    config.setAdditionalProperties([\n-            'apiPackage'     : 'org.pmiops.workbench.api',\n-            'modelPackage'   : 'org.pmiops.workbench.model',\n-            'sourceFolder'   : swaggerTargetFolder,\n-            'useTags'        : 'true',\n-            // Generates delegate interfaces; used to make method annotations work without\n-            // having to copy them to our implementations.\n-            'delegatePattern': 'true'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def fireCloudApiFile = 'src/main/resources/fireCloud.yaml'\n-\n-task generateFireCloudClient {\n-  group 'swagger-codegen'\n-  description 'Generates the FireCloud service client and model class definitions from Swagger file.'\n-  inputs.file(\"$projectDir/$fireCloudApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$fireCloudApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Firecloud\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.firecloud',\n-            'modelPackage'     : 'org.pmiops.workbench.firecloud.model',\n-            'apiPackage'       : 'org.pmiops.workbench.firecloud.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def notebooksApiFile = 'src/main/resources/notebooks.yaml'\n-\n-task generateNotebooksClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Leonardo Notebooks client Java code.'\n-  inputs.file(\"$projectDir/$notebooksApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$notebooksApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.notebooks',\n-            'modelPackage'     : 'org.pmiops.workbench.notebooks.model',\n-            'apiPackage'       : 'org.pmiops.workbench.notebooks.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def jiraApiFile = 'src/main/resources/jira.yaml'\n-\n-task generateJiraClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Jira client Java code.'\n-  inputs.file(\"$projectDir/$jiraApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$jiraApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.jira',\n-            'modelPackage'     : 'org.pmiops.workbench.jira.model',\n-            'apiPackage'       : 'org.pmiops.workbench.jira.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def mandrillApiFile = 'src/main/resources/mandrill_api.yaml'\n-\n-task generateMandrillClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Mandrill client Java code.'\n-\n-  inputs.file(\"$projectDir/$mandrillApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$mandrillApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.mandrill',\n-            'modelPackage'     : 'org.pmiops.workbench.mandrill.model',\n-            'apiPackage'       : 'org.pmiops.workbench.mandrill.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def moodleApiFile = 'src/main/resources/moodle.yaml'\n-\n-task generateMoodleClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Moodle client Java code.'\n-\n-  inputs.file(\"$projectDir/$moodleApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$moodleApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.moodle',\n-            'modelPackage'     : 'org.pmiops.workbench.moodle.model',\n-            'apiPackage'       : 'org.pmiops.workbench.moodle.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def rdrApiFile = 'src/main/resources/rdr.yaml'\n-\n-task generateRdrClient {\n-  group 'swagger-codegen'\n-  description 'Generates the AoU Raw Data Repository API client Java code.'\n-\n-  inputs.file(\"$projectDir/$rdrApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$rdrApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.rdr',\n-            'modelPackage'     : 'org.pmiops.workbench.rdr.model',\n-            'apiPackage'       : 'org.pmiops.workbench.rdr.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def captchaApiFile = 'src/main/resources/captcha.yaml'\n-\n-task generateCaptchaClient {\n-  group 'swagger-codegen'\n-  description 'Generates the ReCAPTCHA API Java code.'\n-\n-  inputs.file(\"$projectDir/$captchaApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$captchaApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.captcha',\n-            'modelPackage'     : 'org.pmiops.workbench.captcha.model',\n-            'apiPackage'       : 'org.pmiops.workbench.captcha.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def shibbolethApiFile = 'src/main/resources/shibboleth.yaml'\n-\n-task generateShibbolethClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Shibboleth API Java code.'\n-\n-  inputs.file(\"$projectDir/$shibbolethApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$shibbolethApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Shibboleth\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.shibboleth',\n-            'modelPackage'     : 'org.pmiops.workbench.shibboleth.model',\n-            'apiPackage'       : 'org.pmiops.workbench.shibboleth.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n+// Artifact configurations derived from base configs. Configuration names\n+// are concatenated by the Java plugin.\n+// https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_configurations\n+configurations {\n+  __bigQueryTest__Compile.extendsFrom testCompile\n+  __bigQueryTest__Runtime.extendsFrom testRuntime\n+\n+  __integration__Compile.extendsFrom testCompile\n+  __integration__Runtime.extendsFrom testRuntime\n+\n+  __tools__Implementation.extendsFrom implementation\n+  __tools__RuntimeOnly.extendsFrom runtimeOnly\n+\n+  __swaggerCodegenV2__\n+\n+  generatedCompile {\n+    exclude group: 'com.google.guava', module:'guava-jdk5'\n+  }\n+}\n+\n+def swagger2CodegenDir = \"$buildDir/swagger2\"\n+\n+// Configuration for the Swagger Gradle plugin:\n+// https://github.com/int128/gradle-swagger-generator-plugin\n+//\n+// Note: The tasks below share an output directory, but we rely on the swagger\n+// ignore file to ensure they don't step on eachother's outputs. If this were to\n+// happen in the future due to a regression or a codegen upgrade, the issue\n+// would likely manifest as an infinite build loop on our continuous incremental\n+// build (e.g. dev-up). Run ./gradlew copmileGeneratedJava --info to see which\n+// overlapping files/diretories may be getting written by different Swagger\n+// codegen tasks.\n+swaggerSources {\n+  // This path is the Java sources root for finding any overridden Swagger-codegen\n+  // templates we may be using.\n+  def swaggerTemplateDir = \"$projectDir/src/main/resources/swaggercodegen\"\n+  def swaggerCodegenPackage = 'org.pmiops.workbench'\n+  // Raw options passed to the Swagger codegen CLI.\n+  def rawOptsSwagger2 = [\n+    // By default, the ignore file within the output directory is used. Override\n+    // as we don't track the output directory in source.\n+    '--ignore-file-override', \"$projectDir/.swagger2-codegen-ignore\"\n+  ]\n+  def baseJavaProps = [\n+    'library'          : 'okhttp-gson',\n+    'serializableModel': 'true',\n+    'dateLibrary'      : 'java8'\n+  ]\n+  workbench {\n+    inputFile = file('src/main/resources/workbench-api.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'spring'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      // Since the output directory is shared among these swagger tasks, wiping\n+      // the directory would result in task invalidation / churn.\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2\n+      additionalProperties = [\n+        'modelPackage'     : \"${swaggerCodegenPackage}.model\",\n+        'apiPackage'       : \"${swaggerCodegenPackage}.api\",\n+        'useTags'        : 'true',\n+        // Generates delegate interfaces; used to make method annotations work without\n+        // having to copy them to our implementations.\n+        'delegatePattern': 'true'\n+      ]\n+    }\n+  }\n+  firecloud {\n+    inputFile = file('src/main/resources/firecloud.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'java'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2 + [\n+        '--model-name-prefix', 'Firecloud'\n+      ]\n+      additionalProperties = baseJavaProps + [\n+        'invokerPackage'   : \"${swaggerCodegenPackage}.firecloud\",\n+        'modelPackage'     : \"${swaggerCodegenPackage}.firecloud.model\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MjAxOQ==", "bodyText": "Likewise, is there a way to factor out the common settings across all of these client codegen tasks? Kotlin DSL is probably easier for that.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475662019", "createdAt": "2020-08-24T14:40:45Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -69,251 +66,208 @@ apply plugin: 'org.owasp.dependencycheck'\n apply plugin: 'org.springframework.boot'\n apply plugin: 'war'\n \n-def swaggerTargetFolder = 'src/generated/java'\n-// This path is the Java sources root for finding any overridden Swagger-codegen\n-// templates we may be using.\n-def swaggerTemplateDir = 'src/main/resources/swaggercodegen'\n-def workbenchApiSourceFile = 'src/main/resources/workbench-api.yaml'\n-\n-task generateWorkbenchApi {\n-  group 'swagger-codegen'\n-  description 'Generates the Spring controllers and API model classes in Java.'\n-  dependsOn tasks.validateSwagger\n-  inputs.file(\"$projectDir/$workbenchApiSourceFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$workbenchApiSourceFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('spring')\n-    config.setAdditionalProperties([\n-            'apiPackage'     : 'org.pmiops.workbench.api',\n-            'modelPackage'   : 'org.pmiops.workbench.model',\n-            'sourceFolder'   : swaggerTargetFolder,\n-            'useTags'        : 'true',\n-            // Generates delegate interfaces; used to make method annotations work without\n-            // having to copy them to our implementations.\n-            'delegatePattern': 'true'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def fireCloudApiFile = 'src/main/resources/fireCloud.yaml'\n-\n-task generateFireCloudClient {\n-  group 'swagger-codegen'\n-  description 'Generates the FireCloud service client and model class definitions from Swagger file.'\n-  inputs.file(\"$projectDir/$fireCloudApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$fireCloudApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Firecloud\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.firecloud',\n-            'modelPackage'     : 'org.pmiops.workbench.firecloud.model',\n-            'apiPackage'       : 'org.pmiops.workbench.firecloud.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def notebooksApiFile = 'src/main/resources/notebooks.yaml'\n-\n-task generateNotebooksClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Leonardo Notebooks client Java code.'\n-  inputs.file(\"$projectDir/$notebooksApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$notebooksApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.notebooks',\n-            'modelPackage'     : 'org.pmiops.workbench.notebooks.model',\n-            'apiPackage'       : 'org.pmiops.workbench.notebooks.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def jiraApiFile = 'src/main/resources/jira.yaml'\n-\n-task generateJiraClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Jira client Java code.'\n-  inputs.file(\"$projectDir/$jiraApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$jiraApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.jira',\n-            'modelPackage'     : 'org.pmiops.workbench.jira.model',\n-            'apiPackage'       : 'org.pmiops.workbench.jira.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def mandrillApiFile = 'src/main/resources/mandrill_api.yaml'\n-\n-task generateMandrillClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Mandrill client Java code.'\n-\n-  inputs.file(\"$projectDir/$mandrillApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$mandrillApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.mandrill',\n-            'modelPackage'     : 'org.pmiops.workbench.mandrill.model',\n-            'apiPackage'       : 'org.pmiops.workbench.mandrill.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def moodleApiFile = 'src/main/resources/moodle.yaml'\n-\n-task generateMoodleClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Moodle client Java code.'\n-\n-  inputs.file(\"$projectDir/$moodleApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$moodleApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.moodle',\n-            'modelPackage'     : 'org.pmiops.workbench.moodle.model',\n-            'apiPackage'       : 'org.pmiops.workbench.moodle.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def rdrApiFile = 'src/main/resources/rdr.yaml'\n-\n-task generateRdrClient {\n-  group 'swagger-codegen'\n-  description 'Generates the AoU Raw Data Repository API client Java code.'\n-\n-  inputs.file(\"$projectDir/$rdrApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$rdrApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.rdr',\n-            'modelPackage'     : 'org.pmiops.workbench.rdr.model',\n-            'apiPackage'       : 'org.pmiops.workbench.rdr.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def captchaApiFile = 'src/main/resources/captcha.yaml'\n-\n-task generateCaptchaClient {\n-  group 'swagger-codegen'\n-  description 'Generates the ReCAPTCHA API Java code.'\n-\n-  inputs.file(\"$projectDir/$captchaApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$captchaApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.captcha',\n-            'modelPackage'     : 'org.pmiops.workbench.captcha.model',\n-            'apiPackage'       : 'org.pmiops.workbench.captcha.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def shibbolethApiFile = 'src/main/resources/shibboleth.yaml'\n-\n-task generateShibbolethClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Shibboleth API Java code.'\n-\n-  inputs.file(\"$projectDir/$shibbolethApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$shibbolethApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Shibboleth\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.shibboleth',\n-            'modelPackage'     : 'org.pmiops.workbench.shibboleth.model',\n-            'apiPackage'       : 'org.pmiops.workbench.shibboleth.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n+// Artifact configurations derived from base configs. Configuration names\n+// are concatenated by the Java plugin.\n+// https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_configurations\n+configurations {\n+  __bigQueryTest__Compile.extendsFrom testCompile\n+  __bigQueryTest__Runtime.extendsFrom testRuntime\n+\n+  __integration__Compile.extendsFrom testCompile\n+  __integration__Runtime.extendsFrom testRuntime\n+\n+  __tools__Implementation.extendsFrom implementation\n+  __tools__RuntimeOnly.extendsFrom runtimeOnly\n+\n+  __swaggerCodegenV2__\n+\n+  generatedCompile {\n+    exclude group: 'com.google.guava', module:'guava-jdk5'\n+  }\n+}\n+\n+def swagger2CodegenDir = \"$buildDir/swagger2\"\n+\n+// Configuration for the Swagger Gradle plugin:\n+// https://github.com/int128/gradle-swagger-generator-plugin\n+//\n+// Note: The tasks below share an output directory, but we rely on the swagger\n+// ignore file to ensure they don't step on eachother's outputs. If this were to\n+// happen in the future due to a regression or a codegen upgrade, the issue\n+// would likely manifest as an infinite build loop on our continuous incremental\n+// build (e.g. dev-up). Run ./gradlew copmileGeneratedJava --info to see which\n+// overlapping files/diretories may be getting written by different Swagger\n+// codegen tasks.\n+swaggerSources {\n+  // This path is the Java sources root for finding any overridden Swagger-codegen\n+  // templates we may be using.\n+  def swaggerTemplateDir = \"$projectDir/src/main/resources/swaggercodegen\"\n+  def swaggerCodegenPackage = 'org.pmiops.workbench'\n+  // Raw options passed to the Swagger codegen CLI.\n+  def rawOptsSwagger2 = [\n+    // By default, the ignore file within the output directory is used. Override\n+    // as we don't track the output directory in source.\n+    '--ignore-file-override', \"$projectDir/.swagger2-codegen-ignore\"\n+  ]\n+  def baseJavaProps = [\n+    'library'          : 'okhttp-gson',\n+    'serializableModel': 'true',\n+    'dateLibrary'      : 'java8'\n+  ]\n+  workbench {\n+    inputFile = file('src/main/resources/workbench-api.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'spring'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      // Since the output directory is shared among these swagger tasks, wiping\n+      // the directory would result in task invalidation / churn.\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2\n+      additionalProperties = [\n+        'modelPackage'     : \"${swaggerCodegenPackage}.model\",\n+        'apiPackage'       : \"${swaggerCodegenPackage}.api\",\n+        'useTags'        : 'true',\n+        // Generates delegate interfaces; used to make method annotations work without\n+        // having to copy them to our implementations.\n+        'delegatePattern': 'true'\n+      ]\n+    }\n+  }\n+  firecloud {\n+    inputFile = file('src/main/resources/firecloud.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'java'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2 + [\n+        '--model-name-prefix', 'Firecloud'\n+      ]\n+      additionalProperties = baseJavaProps + [\n+        'invokerPackage'   : \"${swaggerCodegenPackage}.firecloud\",\n+        'modelPackage'     : \"${swaggerCodegenPackage}.firecloud.model\",\n+        'apiPackage'       : \"${swaggerCodegenPackage}.firecloud.api\",\n+      ]\n+    }\n+  }\n+  notebooks {\n+    inputFile = file('src/main/resources/notebooks.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'java'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 376}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzEwNTcz", "url": "https://github.com/all-of-us/workbench/pull/3907#pullrequestreview-473710573", "createdAt": "2020-08-24T17:27:59Z", "commit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNzoyNzo1OVrOHFvP2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODowMzozNlrOHFwb3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc3OTAzNA==", "bodyText": "Second suggestion was exactly what I was looking for - for some reason I thought you couldn't do helper functions like this within the Gradle Groovy DSL. I've finally eliminated most of this boilplerate. Thanks, this was very unsatisfying in my original PR.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475779034", "createdAt": "2020-08-24T17:27:59Z", "author": {"login": "calbach"}, "path": "api/build.gradle", "diffHunk": "@@ -69,251 +66,208 @@ apply plugin: 'org.owasp.dependencycheck'\n apply plugin: 'org.springframework.boot'\n apply plugin: 'war'\n \n-def swaggerTargetFolder = 'src/generated/java'\n-// This path is the Java sources root for finding any overridden Swagger-codegen\n-// templates we may be using.\n-def swaggerTemplateDir = 'src/main/resources/swaggercodegen'\n-def workbenchApiSourceFile = 'src/main/resources/workbench-api.yaml'\n-\n-task generateWorkbenchApi {\n-  group 'swagger-codegen'\n-  description 'Generates the Spring controllers and API model classes in Java.'\n-  dependsOn tasks.validateSwagger\n-  inputs.file(\"$projectDir/$workbenchApiSourceFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$workbenchApiSourceFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('spring')\n-    config.setAdditionalProperties([\n-            'apiPackage'     : 'org.pmiops.workbench.api',\n-            'modelPackage'   : 'org.pmiops.workbench.model',\n-            'sourceFolder'   : swaggerTargetFolder,\n-            'useTags'        : 'true',\n-            // Generates delegate interfaces; used to make method annotations work without\n-            // having to copy them to our implementations.\n-            'delegatePattern': 'true'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def fireCloudApiFile = 'src/main/resources/fireCloud.yaml'\n-\n-task generateFireCloudClient {\n-  group 'swagger-codegen'\n-  description 'Generates the FireCloud service client and model class definitions from Swagger file.'\n-  inputs.file(\"$projectDir/$fireCloudApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$fireCloudApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Firecloud\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.firecloud',\n-            'modelPackage'     : 'org.pmiops.workbench.firecloud.model',\n-            'apiPackage'       : 'org.pmiops.workbench.firecloud.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def notebooksApiFile = 'src/main/resources/notebooks.yaml'\n-\n-task generateNotebooksClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Leonardo Notebooks client Java code.'\n-  inputs.file(\"$projectDir/$notebooksApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$notebooksApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.notebooks',\n-            'modelPackage'     : 'org.pmiops.workbench.notebooks.model',\n-            'apiPackage'       : 'org.pmiops.workbench.notebooks.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def jiraApiFile = 'src/main/resources/jira.yaml'\n-\n-task generateJiraClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Jira client Java code.'\n-  inputs.file(\"$projectDir/$jiraApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"$projectDir/$jiraApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.jira',\n-            'modelPackage'     : 'org.pmiops.workbench.jira.model',\n-            'apiPackage'       : 'org.pmiops.workbench.jira.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def mandrillApiFile = 'src/main/resources/mandrill_api.yaml'\n-\n-task generateMandrillClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Mandrill client Java code.'\n-\n-  inputs.file(\"$projectDir/$mandrillApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$mandrillApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.mandrill',\n-            'modelPackage'     : 'org.pmiops.workbench.mandrill.model',\n-            'apiPackage'       : 'org.pmiops.workbench.mandrill.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def moodleApiFile = 'src/main/resources/moodle.yaml'\n-\n-task generateMoodleClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Moodle client Java code.'\n-\n-  inputs.file(\"$projectDir/$moodleApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$moodleApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.moodle',\n-            'modelPackage'     : 'org.pmiops.workbench.moodle.model',\n-            'apiPackage'       : 'org.pmiops.workbench.moodle.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def rdrApiFile = 'src/main/resources/rdr.yaml'\n-\n-task generateRdrClient {\n-  group 'swagger-codegen'\n-  description 'Generates the AoU Raw Data Repository API client Java code.'\n-\n-  inputs.file(\"$projectDir/$rdrApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$rdrApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.rdr',\n-            'modelPackage'     : 'org.pmiops.workbench.rdr.model',\n-            'apiPackage'       : 'org.pmiops.workbench.rdr.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def captchaApiFile = 'src/main/resources/captcha.yaml'\n-\n-task generateCaptchaClient {\n-  group 'swagger-codegen'\n-  description 'Generates the ReCAPTCHA API Java code.'\n-\n-  inputs.file(\"$projectDir/$captchaApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$captchaApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.captcha',\n-            'modelPackage'     : 'org.pmiops.workbench.captcha.model',\n-            'apiPackage'       : 'org.pmiops.workbench.captcha.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n-  }\n-}\n-\n-def shibbolethApiFile = 'src/main/resources/shibboleth.yaml'\n-\n-task generateShibbolethClient {\n-  group 'swagger-codegen'\n-  description 'Generates the Shibboleth API Java code.'\n-\n-  inputs.file(\"$projectDir/$shibbolethApiFile\")\n-  outputs.dir(\"$projectDir/$swaggerTargetFolder\")\n-  doLast {\n-    def config = new CodegenConfigurator()\n-    config.setInputSpec(\"file:///$projectDir/$shibbolethApiFile\")\n-    config.setOutputDir(\"$projectDir\")\n-    config.setTemplateDir(\"$projectDir/$swaggerTemplateDir\")\n-    config.setLang('java')\n-    config.setModelNamePrefix(\"Shibboleth\")\n-    config.setAdditionalProperties([\n-            'invokerPackage'   : 'org.pmiops.workbench.shibboleth',\n-            'modelPackage'     : 'org.pmiops.workbench.shibboleth.model',\n-            'apiPackage'       : 'org.pmiops.workbench.shibboleth.api',\n-            'sourceFolder'     : swaggerTargetFolder,\n-            'library'          : 'okhttp-gson',\n-            'serializableModel': 'true',\n-            'dateLibrary'      : 'java8'\n-    ])\n-    new DefaultGenerator().opts(config.toClientOptInput()).generate()\n+// Artifact configurations derived from base configs. Configuration names\n+// are concatenated by the Java plugin.\n+// https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_configurations\n+configurations {\n+  __bigQueryTest__Compile.extendsFrom testCompile\n+  __bigQueryTest__Runtime.extendsFrom testRuntime\n+\n+  __integration__Compile.extendsFrom testCompile\n+  __integration__Runtime.extendsFrom testRuntime\n+\n+  __tools__Implementation.extendsFrom implementation\n+  __tools__RuntimeOnly.extendsFrom runtimeOnly\n+\n+  __swaggerCodegenV2__\n+\n+  generatedCompile {\n+    exclude group: 'com.google.guava', module:'guava-jdk5'\n+  }\n+}\n+\n+def swagger2CodegenDir = \"$buildDir/swagger2\"\n+\n+// Configuration for the Swagger Gradle plugin:\n+// https://github.com/int128/gradle-swagger-generator-plugin\n+//\n+// Note: The tasks below share an output directory, but we rely on the swagger\n+// ignore file to ensure they don't step on eachother's outputs. If this were to\n+// happen in the future due to a regression or a codegen upgrade, the issue\n+// would likely manifest as an infinite build loop on our continuous incremental\n+// build (e.g. dev-up). Run ./gradlew copmileGeneratedJava --info to see which\n+// overlapping files/diretories may be getting written by different Swagger\n+// codegen tasks.\n+swaggerSources {\n+  // This path is the Java sources root for finding any overridden Swagger-codegen\n+  // templates we may be using.\n+  def swaggerTemplateDir = \"$projectDir/src/main/resources/swaggercodegen\"\n+  def swaggerCodegenPackage = 'org.pmiops.workbench'\n+  // Raw options passed to the Swagger codegen CLI.\n+  def rawOptsSwagger2 = [\n+    // By default, the ignore file within the output directory is used. Override\n+    // as we don't track the output directory in source.\n+    '--ignore-file-override', \"$projectDir/.swagger2-codegen-ignore\"\n+  ]\n+  def baseJavaProps = [\n+    'library'          : 'okhttp-gson',\n+    'serializableModel': 'true',\n+    'dateLibrary'      : 'java8'\n+  ]\n+  workbench {\n+    inputFile = file('src/main/resources/workbench-api.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'spring'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      // Since the output directory is shared among these swagger tasks, wiping\n+      // the directory would result in task invalidation / churn.\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2\n+      additionalProperties = [\n+        'modelPackage'     : \"${swaggerCodegenPackage}.model\",\n+        'apiPackage'       : \"${swaggerCodegenPackage}.api\",\n+        'useTags'        : 'true',\n+        // Generates delegate interfaces; used to make method annotations work without\n+        // having to copy them to our implementations.\n+        'delegatePattern': 'true'\n+      ]\n+    }\n+  }\n+  firecloud {\n+    inputFile = file('src/main/resources/firecloud.yaml')\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'java'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      wipeOutputDir = false\n+      rawOptions = rawOptsSwagger2 + [\n+        '--model-name-prefix', 'Firecloud'\n+      ]\n+      additionalProperties = baseJavaProps + [\n+        'invokerPackage'   : \"${swaggerCodegenPackage}.firecloud\",\n+        'modelPackage'     : \"${swaggerCodegenPackage}.firecloud.model\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MTM3NQ=="}, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 367}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4MDIyNQ==", "bodyText": "This should pretty clearly be recaptcha. However, I won't be making that change here as it is an existing issue and I'd need to rename the codegen package for consistency.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475780225", "createdAt": "2020-08-24T17:30:14Z", "author": {"login": "calbach"}, "path": "api/src/main/resources/captcha.yaml", "diffHunk": "@@ -3,10 +3,10 @@ info:\n   title: Captcha", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1Njk2MA=="}, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc4NDYyMQ==", "bodyText": "I removed it because the Swagger validator rejects it. Indeed, it appears to have no effect on the generated Java code that I can see. The online Swagger editor also rejects it.\nThere is support for marking a method as deprecated in Swagger 2, but I found no documentation for property deprecation.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475784621", "createdAt": "2020-08-24T17:38:36Z", "author": {"login": "calbach"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -5055,10 +5055,9 @@ definitions:\n         type: string\n       contactEmailFailure:\n         description: >\n-          Whether or not contact email could be added to verification list. No longer in use.\n+          DEPRECATED. Whether or not contact email could be added to verification list. No longer in use.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NzYxMA=="}, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5NzM0NQ==", "bodyText": "This is an ignore file for the output of Swagger codegen, it doesn't relate to the files that we check in to the repository. I also don't see a reason to make changes in this PR since only the base path changed.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475797345", "createdAt": "2020-08-24T18:01:35Z", "author": {"login": "calbach"}, "path": "api/.swagger2-codegen-ignore", "diffHunk": "@@ -22,18 +22,22 @@\n # Then explicitly reverse the ignore rule for a single file:\n #!docs/README.md\n \n-README.md\n-pom.xml\n-.gitignore\n-.travis.yml\n-build.sbt\n-docs/*.md\n-settings.gradle\n-git_push.sh\n-gradle.properties\n-src/main/AndroidManifest.xml\n-src/main/resources/application.properties\n-src/test/**\n-gradlew\n-gradlew.bat\n-gradle/**\n+build/swagger2/README.md", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1ODE5MA=="}, "originalCommit": {"oid": "1b83f15c61a71398a6d89052684b123cea15e0f8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTc5ODQ5NA==", "bodyText": "These were the cause of the test breakages - it was resulting in a default value of false. I suspect the Swagger plugin may convert to JSON before passing to the codegen CLI, which would explain why the resulting code was different. I didn't see a good reason to keep these lines, though perhaps I could have also done default: null, if you want to leave them around.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475798494", "createdAt": "2020-08-24T18:03:36Z", "author": {"login": "calbach"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -4199,7 +4199,6 @@ definitions:\n         type: string\n       approved:\n         type: boolean\n-        default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd1a75c80325fc5dbc60b3e3123ec4728fdb54d3"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNzQ2ODE5", "url": "https://github.com/all-of-us/workbench/pull/3907#pullrequestreview-473746819", "createdAt": "2020-08-24T18:17:18Z", "commit": {"oid": "f8bd861c166bcb91541ae855c496ff9c5a4fdbdb"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODoxNzoxOFrOHFw8vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxODoxOTo1M1rOHFxB2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwNjkxMQ==", "bodyText": "Very  nice. If they're effectively constants, maybe use UPPER_SNAKE_CASE.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475806911", "createdAt": "2020-08-24T18:17:18Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -86,7 +86,45 @@ configurations {\n   }\n }\n \n-def swagger2CodegenDir = \"$buildDir/swagger2\"\n+// Shared variables for Swagger codegen. Use \"ext\" rather than \"def\" to allow\n+// access globally, including from within helper functions.\n+ext.swaggerCodegenBasePkg = 'org.pmiops.workbench'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8bd861c166bcb91541ae855c496ff9c5a4fdbdb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTgwODIxNg==", "bodyText": "Is this a change? I  thought  it was defaulting to joda today for datetimes, at least in  our own  API models. java8 is the recommended  replacement for joda, but there would be a bit of fixup  I'd think.", "url": "https://github.com/all-of-us/workbench/pull/3907#discussion_r475808216", "createdAt": "2020-08-24T18:19:53Z", "author": {"login": "jaycarlton"}, "path": "api/build.gradle", "diffHunk": "@@ -86,7 +86,45 @@ configurations {\n   }\n }\n \n-def swagger2CodegenDir = \"$buildDir/swagger2\"\n+// Shared variables for Swagger codegen. Use \"ext\" rather than \"def\" to allow\n+// access globally, including from within helper functions.\n+ext.swaggerCodegenBasePkg = 'org.pmiops.workbench'\n+ext.swagger2CodegenDir = \"$buildDir/swagger2\"\n+// This path is the Java sources root for finding any overridden Swagger-codegen\n+// templates we may be using.\n+ext.swaggerTemplateDir = \"$projectDir/src/main/resources/swaggercodegen\"\n+// Raw options passed to the Swagger codegen CLI.\n+ext.swagger2RawOpts = [\n+  // By default, the ignore file within the output directory is used. Override\n+  // as we don't track the output directory in source.\n+  '--ignore-file-override', \"$projectDir/.swagger2-codegen-ignore\"\n+]\n+\n+// Helper function to define a Java client Swagger codegen target for the Gradle\n+// Swagger Generator Plugin: https://github.com/int128/gradle-swagger-generator-plugin#code-generation\n+def swagger2JavaClient(yaml, pkg, rawOptExtras = []) {\n+  return {\n+    inputFile = file(\"src/main/resources/${yaml}\")\n+    code {\n+      configuration = configurations.__swaggerCodegenV2__\n+      language = 'java'\n+      outputDir = file(swagger2CodegenDir)\n+      templateDir = file(swaggerTemplateDir)\n+      // Since the output directory is shared among these swagger tasks, wiping\n+      // the directory would result in task invalidation / churn.\n+      wipeOutputDir = false\n+      rawOptions = swagger2RawOpts + rawOptExtras\n+      additionalProperties = [\n+        'library'          : 'okhttp-gson',\n+        'serializableModel': 'true',\n+        'dateLibrary'      : 'java8',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8bd861c166bcb91541ae855c496ff9c5a4fdbdb"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a53a1c8db6dbbaa6d04156c866f08503667fdbe9", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/a53a1c8db6dbbaa6d04156c866f08503667fdbe9", "committedDate": "2020-08-25T04:24:46Z", "message": "finally works"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "159be11314e516fd71951d55f4cf464f088c863f", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/159be11314e516fd71951d55f4cf464f088c863f", "committedDate": "2020-08-25T04:24:46Z", "message": "single dep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b7300564d19d94a1cffec5abda3678363288278", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/9b7300564d19d94a1cffec5abda3678363288278", "committedDate": "2020-08-25T04:24:46Z", "message": "cleanups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98009087b7b1bd6f9cef0cce14bab0de41bc48b2", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/98009087b7b1bd6f9cef0cce14bab0de41bc48b2", "committedDate": "2020-08-25T04:24:46Z", "message": "self-review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afe7d510225d4ed57ae2b06356b3cddbed16db10", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/afe7d510225d4ed57ae2b06356b3cddbed16db10", "committedDate": "2020-08-25T04:24:46Z", "message": "Fix invalid swagger.."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e766ab744a05cc9e914e2e898f16155f7bd0da10", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/e766ab744a05cc9e914e2e898f16155f7bd0da10", "committedDate": "2020-08-25T04:24:46Z", "message": "swagger2 ignore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a844a76035b1474de75e29c7f3642cc96fa3d30", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/0a844a76035b1474de75e29c7f3642cc96fa3d30", "committedDate": "2020-08-25T04:24:47Z", "message": "mv to helper function"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8212342334f59d440a771436f1052dadda096c07", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/8212342334f59d440a771436f1052dadda096c07", "committedDate": "2020-08-25T04:24:47Z", "message": "drop empty defaults"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "477d3966c70674d8332c3caeb3ae6669b23dc88f", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/477d3966c70674d8332c3caeb3ae6669b23dc88f", "committedDate": "2020-08-25T04:24:47Z", "message": "const case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "560ce89740be2f28887ca569b1eca1713f1e201c", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/560ce89740be2f28887ca569b1eca1713f1e201c", "committedDate": "2020-08-25T04:24:47Z", "message": "Add sourceFolder \"\" to play better with Intellij"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6881e4f196710f399c7f7e9334ded151eac62b03", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/6881e4f196710f399c7f7e9334ded151eac62b03", "committedDate": "2020-08-25T01:26:44Z", "message": "Add sourceFolder \"\" to play better with Intellij"}, "afterCommit": {"oid": "560ce89740be2f28887ca569b1eca1713f1e201c", "author": {"user": {"login": "calbach", "name": "CH Albach"}}, "url": "https://github.com/all-of-us/workbench/commit/560ce89740be2f28887ca569b1eca1713f1e201c", "committedDate": "2020-08-25T04:24:47Z", "message": "Add sourceFolder \"\" to play better with Intellij"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4315, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}