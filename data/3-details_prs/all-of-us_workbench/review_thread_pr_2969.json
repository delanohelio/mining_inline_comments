{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5MTY1OTU0", "number": 2969, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjoxNzozMVrODWBDVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjo0Mjo0M1rODY9NwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDEyNTAzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxNjoxNzozMVrOFaiCSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxODo0NToxNFrOFal08w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2NDkzOA==", "bodyText": "If it's useful, we can either fire an event metric for this to StackDriver, or add a log-based metric.", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r363364938", "createdAt": "2020-01-06T16:17:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -703,6 +703,20 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       }\n     }\n \n+    // If a lock is held by another user, log this to establish a rough estimate of how often\n+    // locked notebooks are encountered. Note that this only covers locks encountered from the\n+    // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n+    if (response.getLockExpirationTime() != null && response.getLastLockedBy() != null) {\n+      String currentUsername = userProvider.get().getUsername();\n+      if (clock.millis() < response.getLockExpirationTime()\n+          && !response.getLastLockedBy().equals(currentUsername)) {\n+        log.info(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35e9244876a9d63045471fc9d08d6257834f255d"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQyNzA1OQ==", "bodyText": "Nice suggestion, added - PTAL", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r363427059", "createdAt": "2020-01-06T18:45:14Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -703,6 +703,20 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       }\n     }\n \n+    // If a lock is held by another user, log this to establish a rough estimate of how often\n+    // locked notebooks are encountered. Note that this only covers locks encountered from the\n+    // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n+    if (response.getLockExpirationTime() != null && response.getLastLockedBy() != null) {\n+      String currentUsername = userProvider.get().getUsername();\n+      if (clock.millis() < response.getLockExpirationTime()\n+          && !response.getLastLockedBy().equals(currentUsername)) {\n+        log.info(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzM2NDkzOA=="}, "originalCommit": {"oid": "35e9244876a9d63045471fc9d08d6257834f255d"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1Mjg5NjczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/MonitoringViews.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzozNzowMFrOFb2AnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo0OToyN1rOFcC-Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MDc2NA==", "bodyText": "Looks good as of this writing. Thanks for being the first guinea pig.\nIn terms of timing, I might hold off and use a single metric that has attachments after #2934 is in. The paradigm there is a metric like NOTEBOOK_CHECK_BY_LOCK_STATUS and then a key like AttachmentKey.NOTEBOOK_LOCK_STATUS with values locked and unlocked. (This would be an EventMetric instead of a GaugeMetric in the new scheme.)\nNo harm in leaving this in place in the meantime and adding rather than replacing these, especially since I can't yet guarantee the above functionality is in the next build. And of course, now that you've gone through the process here, any comments on the other PR are doubly appreciated.", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364740764", "createdAt": "2020-01-09T13:37:00Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/MonitoringViews.java", "diffHunk": "@@ -29,6 +29,11 @@\n   NOTEBOOK_SAVE(\"notebook_save\", \"Save (or create) a notebook\"),\n   NOTEBOOK_CLONE(\"notebook_clone\", \"Clone (duplicate) a notebook\"),\n   NOTEBOOK_DELETE(\"notebook_delete\", \"Delete a notebook\"),\n+  NOTEBOOK_CHECK_LOCKED(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b26c9eb2767fcfc0ca915af61ebd4821e2bb00"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MzE2Mg==", "bodyText": "I saw that go by - sure, that would be preferred, I will wait for it since this isn't particularly urgent.", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364953162", "createdAt": "2020-01-09T20:49:27Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/MonitoringViews.java", "diffHunk": "@@ -29,6 +29,11 @@\n   NOTEBOOK_SAVE(\"notebook_save\", \"Save (or create) a notebook\"),\n   NOTEBOOK_CLONE(\"notebook_clone\", \"Clone (duplicate) a notebook\"),\n   NOTEBOOK_DELETE(\"notebook_delete\", \"Delete a notebook\"),\n+  NOTEBOOK_CHECK_LOCKED(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MDc2NA=="}, "originalCommit": {"oid": "f5b26c9eb2767fcfc0ca915af61ebd4821e2bb00"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjkwMzgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzozOTowN1rOFb2ExA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQyMDo0ODoxM1rOFcC8bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MTgyOA==", "bodyText": "style nit/trick: if you just have a line that just says final MonitoringViews lockMetric;, the compiler will keep you honest that it's initialized exactly once, taking all branches into account. That way if someone adds another branch later, they won't forget to assign it as appropriate.", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364741828", "createdAt": "2020-01-09T13:39:07Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -703,6 +708,23 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       }\n     }\n \n+    // If a lock is held by another user, log this to establish a rough estimate of how often\n+    // locked notebooks are encountered. Note that this only covers locks encountered from the\n+    // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n+    MonitoringViews lockMetric = MonitoringViews.NOTEBOOK_CHECK_AVAILABLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b26c9eb2767fcfc0ca915af61ebd4821e2bb00"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDk1MjY4Nw==", "bodyText": "I expected you would leave a final-related comment here. I'm aware that Java supports doing it the way you describe, but my preference is to initialize to a happy-path default value, and then override in exceptional cases.", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364952687", "createdAt": "2020-01-09T20:48:13Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -703,6 +708,23 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       }\n     }\n \n+    // If a lock is held by another user, log this to establish a rough estimate of how often\n+    // locked notebooks are encountered. Note that this only covers locks encountered from the\n+    // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n+    MonitoringViews lockMetric = MonitoringViews.NOTEBOOK_CHECK_AVAILABLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MTgyOA=="}, "originalCommit": {"oid": "f5b26c9eb2767fcfc0ca915af61ebd4821e2bb00"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjkwNTQwOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzozOTozN1rOFb2FrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMzozOTozN1rOFb2FrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc0MjA2MA==", "bodyText": "Thanks for the test updates.", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r364742060", "createdAt": "2020-01-09T13:39:37Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/workspaces/WorkspacesControllerTest.java", "diffHunk": "@@ -2622,6 +2628,7 @@ public void testNotebookLockingNullMetadata() {\n \n     final NotebookLockingMetadataResponse expectedResponse = new NotebookLockingMetadataResponse();\n     assertNotebookLockingMetadata(gcsMetadata, expectedResponse, fcWorkspaceAcl);\n+    verify(mockMonitoringService).recordIncrement(MonitoringViews.NOTEBOOK_CHECK_AVAILABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5b26c9eb2767fcfc0ca915af61ebd4821e2bb00"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDk0OTA5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/GaugeMetric.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjozOTo1NFrOFfHCtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjozOTo1NFrOFfHCtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NTU1Ng==", "bodyText": "Looks good.", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r368165556", "createdAt": "2020-01-17T22:39:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/monitoring/views/GaugeMetric.java", "diffHunk": "@@ -19,6 +19,10 @@\n       \"dataset_count_2\",\n       \"Count of all datasets in existence\",\n       ImmutableList.of(MetricLabel.DATASET_INVALID)),\n+  NOTEBOOK_LOCK_CHECK(\n+      \"notebook_lock_check\",\n+      \"Counts of notebook availability due to locking, as observed by the caller\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDk1MzYwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjo0Mjo0M1rOFfHFiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMjo0Mjo0M1rOFfHFiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODE2NjI4MA==", "bodyText": "Just a heads up: I'm about 75% sure that Stackdriver considers the Labels (tags) list to be part of the metric descriptor, so if you want to add another tag in the future, we have to either drop this one and replace it, or add a new one. I'll put this in the docs.", "url": "https://github.com/all-of-us/workbench/pull/2969#discussion_r368166280", "createdAt": "2020-01-17T22:42:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspacesController.java", "diffHunk": "@@ -703,6 +710,27 @@ private Boolean copyBlob(String bucketName, Blob b) {\n       }\n     }\n \n+    // If a lock is held by another user, log this to establish a rough estimate of how often\n+    // locked notebooks are encountered. Note that this only covers locks encountered from the\n+    // Workbench - any Jupyter UI-based lock detection does not touch this code path.\n+    String currentUsername = userProvider.get().getUsername();\n+    boolean notebookAvailable =\n+        response.getLockExpirationTime() == null\n+            || response.getLastLockedBy() == null\n+            || response.getLockExpirationTime() < clock.millis()\n+            || response.getLastLockedBy().equals(currentUsername);\n+    if (notebookAvailable) {\n+      log.info(\n+          String.format(\n+              \"user '%s' observed notebook locked by '%s'\",\n+              currentUsername, response.getLastLockedBy()));\n+    }\n+    monitoringService.recordBundle(\n+        MeasurementBundle.builder()\n+            .addEvent(GaugeMetric.NOTEBOOK_LOCK_CHECK)\n+            .addTag(MetricLabel.NOTEBOOK_AVAILABLE_TO_USER, Boolean.toString(notebookAvailable))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57abcc3f43ca0f07ae33bfa3499c6b2b2bd3543d"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3566, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}