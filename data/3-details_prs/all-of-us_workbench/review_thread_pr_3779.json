{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NDg5NTI2", "number": 3779, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozMTowMVrOEOcJPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNDo1MlrOEQNm1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTc2NjM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTozMTowMVrOGxmF7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjoyNTozM1rOGxngZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzUxNw==", "bodyText": "Will @after always be equal to a day boundary?  If not, this query will miss 23:59:59 worth of events in the worst case.  Choosing (@after - 1 day <= partition) is safer, and only scans 1 extraneous partition in the worst case.\nActually... are we guaranteed to have a partition daily?  Maybe increase that safety buffer.\nThe @before check looks fine.", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r454657517", "createdAt": "2020-07-14T21:31:01Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -38,11 +38,13 @@\n           + \"  jsonPayload.prev_value AS prev_value,\\n\"\n           + \"  jsonPayload.new_value AS new_value\\n\"\n           + \"FROM %s\\n\"\n-          + \"WHERE %s AND\\n\"\n-          + \"  @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) AND\\n\"\n-          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"WHERE %s\\n\"\n+          + \"  AND @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64))\\n\"\n+          + \"  AND TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"  AND @after <= _PARTITIONTIME\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "688550b1fb93010cfa95906948f1aa7ead39d2cb"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY3OTQ5OQ==", "bodyText": "You're right. I missed the boundary condition there.", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r454679499", "createdAt": "2020-07-14T22:22:35Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -38,11 +38,13 @@\n           + \"  jsonPayload.prev_value AS prev_value,\\n\"\n           + \"  jsonPayload.new_value AS new_value\\n\"\n           + \"FROM %s\\n\"\n-          + \"WHERE %s AND\\n\"\n-          + \"  @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) AND\\n\"\n-          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"WHERE %s\\n\"\n+          + \"  AND @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64))\\n\"\n+          + \"  AND TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"  AND @after <= _PARTITIONTIME\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzUxNw=="}, "originalCommit": {"oid": "688550b1fb93010cfa95906948f1aa7ead39d2cb"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4MDY3Ng==", "bodyText": "Additionally, the event timestamps in the JSON payload predate (hopefully!) the BQ ingestion timestamps (which are the basis for partition determination) by delays in logging and sinking to BQ. Maybe a buffer of 1 day on either side is prudent.", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r454680676", "createdAt": "2020-07-14T22:25:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -38,11 +38,13 @@\n           + \"  jsonPayload.prev_value AS prev_value,\\n\"\n           + \"  jsonPayload.new_value AS new_value\\n\"\n           + \"FROM %s\\n\"\n-          + \"WHERE %s AND\\n\"\n-          + \"  @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) AND\\n\"\n-          + \"  TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"WHERE %s\\n\"\n+          + \"  AND @after <= TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64))\\n\"\n+          + \"  AND TIMESTAMP_MILLIS(CAST(jsonPayload.timestamp AS INT64)) < @before\\n\"\n+          + \"  AND @after <= _PARTITIONTIME\\n\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY1NzUxNw=="}, "originalCommit": {"oid": "688550b1fb93010cfa95906948f1aa7ead39d2cb"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzUzNzQwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/BQParameterUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNToyMjo0OFrOGywHiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNToyMjo0OFrOGywHiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg3MDM0Nw==", "bodyText": "It just now occurred to me that I can use regex Patterns with word boundaries to solve this issue, and avoid re-sorting the whole list and lots of this code. All in favor of less code in this function?", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r455870347", "createdAt": "2020-07-16T15:22:48Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/cohortbuilder/util/BQParameterUtil.java", "diffHunk": "@@ -1,16 +1,78 @@\n package org.pmiops.workbench.cohortbuilder.util;\n \n+import com.google.cloud.bigquery.QueryJobConfiguration;\n import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.StandardSQLTypeName;\n+import java.time.Instant;\n+import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n \n public final class BQParameterUtil {\n+  private static final int MICROSECONDS_IN_MILLISECOND = 1000;\n \n   /** Generate a unique parameter name and add it to the parameter map provided. */\n   public static String buildParameter(\n       Map<String, QueryParameterValue> queryParameterValueMap,\n       QueryParameterValue queryParameterValue) {\n     String parameterName = \"p\" + queryParameterValueMap.size();\n     queryParameterValueMap.put(parameterName, queryParameterValue);\n+    return decorateParameterName(parameterName);\n+  }\n+\n+  public static QueryParameterValue instantToQPValue(Instant instant) {\n+    return QueryParameterValue.timestamp(instant.toEpochMilli() * MICROSECONDS_IN_MILLISECOND);\n+  }\n+\n+  // Since BigQuery doesn't expose the literal query string built from a QueryJobConfiguration,\n+  // this method does the next best thing. Useful for diagnostics, logging, testing, etc.\n+  public static String getReplacedQueryText(QueryJobConfiguration queryJobConfiguration) {\n+    String result = \"-- reconstructed query text\\n\" + queryJobConfiguration.getQuery();\n+    final Map<String, QueryParameterValue> keyToNamedParameter =\n+        queryJobConfiguration.getNamedParameters().entrySet().stream()\n+            .collect(Collectors.toMap(e -> decorateParameterName(e.getKey()), Entry::getValue));\n+\n+    // Sort in reverse lenght order so we don't partially replace any parameter names (e.g. replace\n+    // \"@foo\" before \"@foo_bar\").\n+    final List<String> keysByLengthDesc =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY2MDI4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1MDo0M1rOGyxUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDowMTozMlrOG0OQkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ==", "bodyText": "not sure this is needed but it doesn't cost us much", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r455890089", "createdAt": "2020-07-16T15:50:43Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -117,38 +118,20 @@ public UserAuditLogQueryResponse queryEventsForUser(\n     return new UserAuditLogQueryResponse()\n         .actions(auditLogEntryMapper.logEntriesToActions(logEntries))\n         .logEntries(logEntries)\n-        .query(getReplacedQueryText(queryJobConfiguration))\n+        .query(BQParameterUtil.getReplacedQueryText(queryJobConfiguration))\n         .userDatabaseId(userDatabaseId);\n   }\n \n   private ImmutableMap.Builder<String, QueryParameterValue> getNamedParameterMapBuilder(\n-      long limit, DateTime after, DateTime before) {\n+      long limit, Instant after, Instant before) {\n+    final Instant afterPartitionTime = after.minus(PARTITION_BUFFER);\n+    final Instant beforePartitionTime = before.plus(PARTITION_BUFFER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjU4NzkzOQ==", "bodyText": "I like to use immutable types whenever possible as return values.", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r456587939", "createdAt": "2020-07-17T17:50:21Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -117,38 +118,20 @@ public UserAuditLogQueryResponse queryEventsForUser(\n     return new UserAuditLogQueryResponse()\n         .actions(auditLogEntryMapper.logEntriesToActions(logEntries))\n         .logEntries(logEntries)\n-        .query(getReplacedQueryText(queryJobConfiguration))\n+        .query(BQParameterUtil.getReplacedQueryText(queryJobConfiguration))\n         .userDatabaseId(userDatabaseId);\n   }\n \n   private ImmutableMap.Builder<String, QueryParameterValue> getNamedParameterMapBuilder(\n-      long limit, DateTime after, DateTime before) {\n+      long limit, Instant after, Instant before) {\n+    final Instant afterPartitionTime = after.minus(PARTITION_BUFFER);\n+    final Instant beforePartitionTime = before.plus(PARTITION_BUFFER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ=="}, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY1MzAyMQ==", "bodyText": "I mean that I don't think adding one day to \"before\" is necessary.", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r456653021", "createdAt": "2020-07-17T20:12:31Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -117,38 +118,20 @@ public UserAuditLogQueryResponse queryEventsForUser(\n     return new UserAuditLogQueryResponse()\n         .actions(auditLogEntryMapper.logEntriesToActions(logEntries))\n         .logEntries(logEntries)\n-        .query(getReplacedQueryText(queryJobConfiguration))\n+        .query(BQParameterUtil.getReplacedQueryText(queryJobConfiguration))\n         .userDatabaseId(userDatabaseId);\n   }\n \n   private ImmutableMap.Builder<String, QueryParameterValue> getNamedParameterMapBuilder(\n-      long limit, DateTime after, DateTime before) {\n+      long limit, Instant after, Instant before) {\n+    final Instant afterPartitionTime = after.minus(PARTITION_BUFFER);\n+    final Instant beforePartitionTime = before.plus(PARTITION_BUFFER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ=="}, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3MTMzMQ==", "bodyText": "Oh, the timestamp I send to StackDriver is generally earlier than the ingestion time (which is what counts). So if I have an event at 23:59:30, it might have an ingestion timestamp of 00:00:30 on the next day. But you're right that that's fixable by moving before to the right.", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r456671331", "createdAt": "2020-07-17T20:58:20Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -117,38 +118,20 @@ public UserAuditLogQueryResponse queryEventsForUser(\n     return new UserAuditLogQueryResponse()\n         .actions(auditLogEntryMapper.logEntriesToActions(logEntries))\n         .logEntries(logEntries)\n-        .query(getReplacedQueryText(queryJobConfiguration))\n+        .query(BQParameterUtil.getReplacedQueryText(queryJobConfiguration))\n         .userDatabaseId(userDatabaseId);\n   }\n \n   private ImmutableMap.Builder<String, QueryParameterValue> getNamedParameterMapBuilder(\n-      long limit, DateTime after, DateTime before) {\n+      long limit, Instant after, Instant before) {\n+    final Instant afterPartitionTime = after.minus(PARTITION_BUFFER);\n+    final Instant beforePartitionTime = before.plus(PARTITION_BUFFER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ=="}, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxMjc1NA==", "bodyText": "OK - safer to keep this then.  thanks!", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r457412754", "createdAt": "2020-07-20T14:01:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -117,38 +118,20 @@ public UserAuditLogQueryResponse queryEventsForUser(\n     return new UserAuditLogQueryResponse()\n         .actions(auditLogEntryMapper.logEntriesToActions(logEntries))\n         .logEntries(logEntries)\n-        .query(getReplacedQueryText(queryJobConfiguration))\n+        .query(BQParameterUtil.getReplacedQueryText(queryJobConfiguration))\n         .userDatabaseId(userDatabaseId);\n   }\n \n   private ImmutableMap.Builder<String, QueryParameterValue> getNamedParameterMapBuilder(\n-      long limit, DateTime after, DateTime before) {\n+      long limit, Instant after, Instant before) {\n+    final Instant afterPartitionTime = after.minus(PARTITION_BUFFER);\n+    final Instant beforePartitionTime = before.plus(PARTITION_BUFFER);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MDA4OQ=="}, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY3NzA3OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1NDoxOFrOGyxe9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDowMTo1OFrOG0OSHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjcyNg==", "bodyText": "these look right but could you swap the order?", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r455892726", "createdAt": "2020-07-16T15:54:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "diffHunk": "@@ -176,9 +168,27 @@ public void testQueryUserEvents() {\n \n     final UserAuditLogQueryResponse response =\n         actionAuditQueryService.queryEventsForUser(\n-            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER_INCLUSIVE, DEFAULT_BEFORE_EXCLUSIVE);\n+            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER, DEFAULT_BEFORE);\n     assertThat(response.getLogEntries()).isEmpty();\n     assertThat(response.getUserDatabaseId()).isEqualTo(USER_DB_ID);\n     assertThat(response.getQuery()).contains(\"SELECT\");\n   }\n+\n+  @Test\n+  public void testPartitionTimeBuffer() {\n+    doReturn(EMPTY_RESULT).when(mockBigQueryService).executeQuery(any(QueryJobConfiguration.class));\n+    final Instant after = Instant.parse(\"2020-03-10T09:30:00.00Z\");\n+    final Instant before = after.plus(Duration.ofDays(5));\n+\n+    final UserAuditLogQueryResponse response =\n+        actionAuditQueryService.queryEventsForUser(USER_DB_ID, DEFAULT_LIMIT, after, before);\n+\n+    final String query = response.getQuery();\n+    assertThat(query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY3MTU4Mg==", "bodyText": "I swapped it, but we're not asserting about the relative order of clauses in the query. That should be able to change without breaking the test.", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r456671582", "createdAt": "2020-07-17T20:59:03Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "diffHunk": "@@ -176,9 +168,27 @@ public void testQueryUserEvents() {\n \n     final UserAuditLogQueryResponse response =\n         actionAuditQueryService.queryEventsForUser(\n-            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER_INCLUSIVE, DEFAULT_BEFORE_EXCLUSIVE);\n+            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER, DEFAULT_BEFORE);\n     assertThat(response.getLogEntries()).isEmpty();\n     assertThat(response.getUserDatabaseId()).isEqualTo(USER_DB_ID);\n     assertThat(response.getQuery()).contains(\"SELECT\");\n   }\n+\n+  @Test\n+  public void testPartitionTimeBuffer() {\n+    doReturn(EMPTY_RESULT).when(mockBigQueryService).executeQuery(any(QueryJobConfiguration.class));\n+    final Instant after = Instant.parse(\"2020-03-10T09:30:00.00Z\");\n+    final Instant before = after.plus(Duration.ofDays(5));\n+\n+    final UserAuditLogQueryResponse response =\n+        actionAuditQueryService.queryEventsForUser(USER_DB_ID, DEFAULT_LIMIT, after, before);\n+\n+    final String query = response.getQuery();\n+    assertThat(query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjcyNg=="}, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQxMzE1MQ==", "bodyText": "Yes - I meant this only for reading", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r457413151", "createdAt": "2020-07-20T14:01:58Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "diffHunk": "@@ -176,9 +168,27 @@ public void testQueryUserEvents() {\n \n     final UserAuditLogQueryResponse response =\n         actionAuditQueryService.queryEventsForUser(\n-            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER_INCLUSIVE, DEFAULT_BEFORE_EXCLUSIVE);\n+            USER_DB_ID, DEFAULT_LIMIT, DEFAULT_AFTER, DEFAULT_BEFORE);\n     assertThat(response.getLogEntries()).isEmpty();\n     assertThat(response.getUserDatabaseId()).isEqualTo(USER_DB_ID);\n     assertThat(response.getQuery()).contains(\"SELECT\");\n   }\n+\n+  @Test\n+  public void testPartitionTimeBuffer() {\n+    doReturn(EMPTY_RESULT).when(mockBigQueryService).executeQuery(any(QueryJobConfiguration.class));\n+    final Instant after = Instant.parse(\"2020-03-10T09:30:00.00Z\");\n+    final Instant before = after.plus(Duration.ofDays(5));\n+\n+    final UserAuditLogQueryResponse response =\n+        actionAuditQueryService.queryEventsForUser(USER_DB_ID, DEFAULT_LIMIT, after, before);\n+\n+    final String query = response.getQuery();\n+    assertThat(query)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MjcyNg=="}, "originalCommit": {"oid": "c681e9032247570aab4673d99a0516f70fe8cbdb"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NDM1NjA1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNDo1MlrOG0PlRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDoyNjo1N1rOG0PtSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDQzOA==", "bodyText": "Should this be .02Z like the others?", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r457434438", "createdAt": "2020-07-20T14:24:52Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "diffHunk": "@@ -56,8 +57,8 @@\n   private static final long AGENT_ID = 202L;\n   private static final String ACTION_ID_1 = \"abfcb9ed-fa65-4e98-acb2-08b0d8b30000\";\n   private static final String USERNAME = \"jay@unit-test-aou.org\";\n-  private static final DateTime EVENT_DATETIME = DateTime.parse(\"2010-06-30T01:20+02:00\");\n-  public static final long EVENT_TIME_SECONDS = EVENT_DATETIME.getMillis() / 1000;\n+  private static final Instant EVENT_INSTANT = Instant.parse(\"2010-06-30T01:20:00.00Z\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa73858d031ce662c6f7c9ec5dc371ffc1357bcf"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNjQ5MA==", "bodyText": "No, the event time doesn't need to know what my after/before times are.", "url": "https://github.com/all-of-us/workbench/pull/3779#discussion_r457436490", "createdAt": "2020-07-20T14:26:57Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceTest.java", "diffHunk": "@@ -56,8 +57,8 @@\n   private static final long AGENT_ID = 202L;\n   private static final String ACTION_ID_1 = \"abfcb9ed-fa65-4e98-acb2-08b0d8b30000\";\n   private static final String USERNAME = \"jay@unit-test-aou.org\";\n-  private static final DateTime EVENT_DATETIME = DateTime.parse(\"2010-06-30T01:20+02:00\");\n-  public static final long EVENT_TIME_SECONDS = EVENT_DATETIME.getMillis() / 1000;\n+  private static final Instant EVENT_INSTANT = Instant.parse(\"2010-06-30T01:20:00.00Z\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQzNDQzOA=="}, "originalCommit": {"oid": "aa73858d031ce662c6f7c9ec5dc371ffc1357bcf"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2416, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}