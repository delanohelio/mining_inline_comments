{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4ODg2MzY5", "number": 4272, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyNToyMVrOE4PaPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzoyNDo1MlrOE4RIYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDA4MTkxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyNToyMVrOHyC4NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTowMzo0OVrOHyJciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzODAwNA==", "bodyText": "are you intending on implementing this in this PR? if not, is there an outstanding ticket to represent this work?", "url": "https://github.com/all-of-us/workbench/pull/4272#discussion_r522238004", "createdAt": "2020-11-12T16:25:21Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -196,76 +186,44 @@ export class LeoRuntimeInitializer {\n     this.targetRuntime = options.targetRuntime;\n   }\n \n-  private async getRuntime(): Promise<Runtime> {\n-    const aborter = new AbortController();\n-    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n-    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n-      promise: promise,\n-      operation: 'get',\n-      aborter: aborter\n-    });\n-    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n-    return promise;\n-  }\n-\n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    const aborter = new AbortController();\n     let runtime: Runtime;\n     if (serverConfigStore.getValue().enableCustomRuntimes && this.targetRuntime) {\n       runtime = this.targetRuntime;\n     } else {\n+      // In lazy initialization mode, this should default to:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2c6f0675dbeebec88e5d8d5056147aa8bc1a64"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NTYxMQ==", "bodyText": "Thanks, forgot to file this. Done and updated comment: https://precisionmedicineinitiative.atlassian.net/browse/RW-5921", "url": "https://github.com/all-of-us/workbench/pull/4272#discussion_r522345611", "createdAt": "2020-11-12T19:03:49Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -196,76 +186,44 @@ export class LeoRuntimeInitializer {\n     this.targetRuntime = options.targetRuntime;\n   }\n \n-  private async getRuntime(): Promise<Runtime> {\n-    const aborter = new AbortController();\n-    const promise = runtimeApi().getRuntime(this.workspaceNamespace, {signal: aborter.signal});\n-    updateRuntimeOpsStoreForWorkspaceNamespace(this.workspaceNamespace, {\n-      promise: promise,\n-      operation: 'get',\n-      aborter: aborter\n-    });\n-    markRuntimeOperationCompleteForWorkspace(this.workspaceNamespace);\n-    return promise;\n-  }\n-\n   private async createRuntime(): Promise<void> {\n     if (this.createCount >= this.maxCreateCount) {\n       throw new ExceededActionCountError(\n         `Reached max runtime create count (${this.maxCreateCount})`, this.currentRuntime);\n     }\n-    const aborter = new AbortController();\n     let runtime: Runtime;\n     if (serverConfigStore.getValue().enableCustomRuntimes && this.targetRuntime) {\n       runtime = this.targetRuntime;\n     } else {\n+      // In lazy initialization mode, this should default to:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzODAwNA=="}, "originalCommit": {"oid": "8c2c6f0675dbeebec88e5d8d5056147aa8bc1a64"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NDM2Mzg0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/notebook-redirect.spec.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzoyNDo1MlrOHyFlCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxOTowMzowMVrOHyJaDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI4MjI1MA==", "bodyText": "This is in runtime-utils and runtime-panels too - could it be pulled out into a test utils file?", "url": "https://github.com/all-of-us/workbench/pull/4272#discussion_r522282250", "createdAt": "2020-11-12T17:24:52Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/notebook-redirect.spec.tsx", "diffHunk": "@@ -28,8 +30,17 @@ describe('NotebookRedirect', () => {\n \n   let runtimeStub: RuntimeApiStub;\n \n-  const mountedComponent = () => {\n-    return mount(<NotebookRedirect/>);\n+  const handleUseEffect = async (component) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c2c6f0675dbeebec88e5d8d5056147aa8bc1a64"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjM0NDk3Mg==", "bodyText": "done", "url": "https://github.com/all-of-us/workbench/pull/4272#discussion_r522344972", "createdAt": "2020-11-12T19:03:01Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/notebook-redirect.spec.tsx", "diffHunk": "@@ -28,8 +30,17 @@ describe('NotebookRedirect', () => {\n \n   let runtimeStub: RuntimeApiStub;\n \n-  const mountedComponent = () => {\n-    return mount(<NotebookRedirect/>);\n+  const handleUseEffect = async (component) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI4MjI1MA=="}, "originalCommit": {"oid": "8c2c6f0675dbeebec88e5d8d5056147aa8bc1a64"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3724, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}