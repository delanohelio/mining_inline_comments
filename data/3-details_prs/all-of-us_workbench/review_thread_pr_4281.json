{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMDQ3Mjcw", "number": 4281, "reviewThreads": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NTo1M1rOE5jcig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjo0NzowMlrOE7RuYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzg1MDM0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/help-sidebar.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNTo1NTo1M1rOH0FSyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODoxOToxNlrOH0LlvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NDczMQ==", "bodyText": "lol, I called this something different, so whoever merges first is going to cause a conflict for the other person. this is a better name than mine though.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524374731", "createdAt": "2020-11-16T15:55:53Z", "author": {"login": "als364"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -744,7 +744,7 @@ export const HelpSidebar = fp.flow(\n               }\n             </div>}\n             {activeIcon === 'runtime' && <div style={contentStyle('runtime')}>\n-              {<RuntimePanel/>}\n+              {<RuntimePanel onUpdate={() => setSidebarState(false)} />}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e2a24a6c29b409ede368311b1b5b143b0b4663"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ3Nzg4NA==", "bodyText": "I think we should try to merge yours in first. It'll be easier to merge a smaller changset into a larger one.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524477884", "createdAt": "2020-11-16T18:19:16Z", "author": {"login": "ericsong"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -744,7 +744,7 @@ export const HelpSidebar = fp.flow(\n               }\n             </div>}\n             {activeIcon === 'runtime' && <div style={contentStyle('runtime')}>\n-              {<RuntimePanel/>}\n+              {<RuntimePanel onUpdate={() => setSidebarState(false)} />}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM3NDczMQ=="}, "originalCommit": {"oid": "f1e2a24a6c29b409ede368311b1b5b143b0b4663"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzk5MDgxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyNToyMlrOH0Go6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyNToyMlrOH0Go6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5Njc3OQ==", "bodyText": "pickMainDiskSize isn't async so this won't do anything", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524396779", "createdAt": "2020-11-16T16:25:22Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -126,15 +149,14 @@ describe('RuntimePanel', () => {\n \n   it('should allow creation with GCE config', async() => {\n     runtimeApiStub.runtime = null;\n-    act(() => { runtimeStore.set({runtime: null, workspaceNamespace: workspaceStubs[0].namespace}) });\n+    act(() => { runtimeStore.set({runtime: null, workspaceNamespace: workspaceStubs[0].namespace}); });\n \n     const wrapper = component();\n-    await handleUseEffect(wrapper);\n     await waitOneTickAndUpdate(wrapper);\n \n     await pickMainCpu(wrapper, 8);\n     await pickMainRam(wrapper, 52);\n-    pickMainDiskSize(wrapper, 75);\n+    await pickMainDiskSize(wrapper, 75);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e2a24a6c29b409ede368311b1b5b143b0b4663"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4Nzk5NTI0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyNjoyMlrOH0GrpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjoyNjoyMlrOH0GrpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDM5NzQ3Ng==", "bodyText": "There's already a waitOneTickAndUpdate in pickDropdownOption, which is called by pickComputeType - if that needs an extra tick then put the call inside pickDropdownOption", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524397476", "createdAt": "2020-11-16T16:26:22Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -287,14 +304,15 @@ describe('RuntimePanel', () => {\n     act(() => { runtimeStore.set({runtime: null, workspaceNamespace: workspaceStubs[0].namespace}) });\n \n     const wrapper = component();\n-    await handleUseEffect(wrapper);\n     await waitOneTickAndUpdate(wrapper);\n \n     // Take the preset, make a change, then revert.\n     await pickPreset(wrapper, runtimePresets.generalAnalysis);\n     await pickComputeType(wrapper, ComputeType.Dataproc);\n+    await waitOneTickAndUpdate(wrapper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e2a24a6c29b409ede368311b1b5b143b0b4663"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODA4NjMxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo0NToxOVrOH0Hjdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo0NToxOVrOH0Hjdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxMTc2Ng==", "bodyText": "likewise, if this is necessary after pickMainDiskSize then it should be incorporated into pickNumberInput", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524411766", "createdAt": "2020-11-16T16:45:19Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -319,47 +336,226 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Update button if there are no changes and runtime is running', async() => {\n     const wrapper = component();\n-    await handleUseEffect(wrapper);\n     await waitOneTickAndUpdate(wrapper);\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    await waitOneTickAndUpdate(wrapper);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e2a24a6c29b409ede368311b1b5b143b0b4663"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODExNzY1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1MTowNlrOH0H2hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjo0NzoyMVrOH1OoIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxNjY0Ng==", "bodyText": "opt: it is possibly worth making a 'click button by aria-label' function a la mustClickCreateButton, especially since you use this multiple times", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524416646", "createdAt": "2020-11-16T16:51:06Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -319,47 +336,226 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Update button if there are no changes and runtime is running', async() => {\n     const wrapper = component();\n-    await handleUseEffect(wrapper);\n     await waitOneTickAndUpdate(wrapper);\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig, configurationType: RuntimeConfigurationType.UserOverride};\n+    act(() => {runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of preemptible workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickNumPreemptibleWorkers(wrapper, getNumPreemptibleWorkers(wrapper) + 2);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Compute Type', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickComputeType(wrapper, ComputeType.Dataproc);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - CPU', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainCpu(wrapper, getMainCpu(wrapper) + 4);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Memory', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // 15 GB -> 26 GB\n+    await pickMainRam(wrapper, 26);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Decrease Disk', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) - 5);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker CPU', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // 4 -> 8\n+    await pickWorkerCpu(wrapper, 8);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker RAM', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // 15 -> 26\n+    await pickWorkerRam(wrapper, 26);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker Disk', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await pickWorkerDiskSize(wrapper, getWorkerDiskSize(wrapper) + 10);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('hitting cancel from the Confirm panel should revert to the edit panel without losing inputs', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, 75);\n+    await pickMainCpu(wrapper, 8);\n+    await pickMainRam(wrapper, 30);\n+    await pickWorkerCpu(wrapper, 16);\n+    await pickWorkerRam(wrapper, 60);\n+    await pickNumPreemptibleWorkers(wrapper, 3);\n+    await pickNumWorkers(wrapper, 5);\n+    await pickWorkerDiskSize(wrapper, 100);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Next'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Cancel'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(getMainDiskSize(wrapper)).toBe(75);\n+    expect(getMainCpu(wrapper)).toBe(8);\n+    expect(getMainRam(wrapper)).toBe(30);\n+    expect(getWorkerCpu(wrapper)).toBe(16);\n+    expect(getWorkerRam(wrapper)).toBe(60);\n+    expect(getNumPreemptibleWorkers(wrapper)).toBe(3);\n+    expect(getNumWorkers(wrapper)).toBe(5);\n+    expect(getWorkerDiskSize(wrapper)).toBe(100);\n+  });\n+\n+  it('should disable Update button if Runtime is in between states', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig, status: RuntimeStatus.Creating};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 20);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should send an updateRuntime API call if runtime changes do not require a delete', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    const updateSpy = jest.spyOn(runtimeApi(), 'updateRuntime');\n+    const deleteSpy = jest.spyOn(runtimeApi(), 'deleteRuntime');\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 20);\n+\n+    act(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e2a24a6c29b409ede368311b1b5b143b0b4663"}, "originalPosition": 392}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU3NjIyNQ==", "bodyText": "good idea", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r525576225", "createdAt": "2020-11-17T22:47:21Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -319,47 +336,226 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Update button if there are no changes and runtime is running', async() => {\n     const wrapper = component();\n-    await handleUseEffect(wrapper);\n     await waitOneTickAndUpdate(wrapper);\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig, configurationType: RuntimeConfigurationType.UserOverride};\n+    act(() => {runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of preemptible workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickNumPreemptibleWorkers(wrapper, getNumPreemptibleWorkers(wrapper) + 2);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Compute Type', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickComputeType(wrapper, ComputeType.Dataproc);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - CPU', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainCpu(wrapper, getMainCpu(wrapper) + 4);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Memory', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // 15 GB -> 26 GB\n+    await pickMainRam(wrapper, 26);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Decrease Disk', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) - 5);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker CPU', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // 4 -> 8\n+    await pickWorkerCpu(wrapper, 8);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker RAM', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // 15 -> 26\n+    await pickWorkerRam(wrapper, 26);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker Disk', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await pickWorkerDiskSize(wrapper, getWorkerDiskSize(wrapper) + 10);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('hitting cancel from the Confirm panel should revert to the edit panel without losing inputs', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, 75);\n+    await pickMainCpu(wrapper, 8);\n+    await pickMainRam(wrapper, 30);\n+    await pickWorkerCpu(wrapper, 16);\n+    await pickWorkerRam(wrapper, 60);\n+    await pickNumPreemptibleWorkers(wrapper, 3);\n+    await pickNumWorkers(wrapper, 5);\n+    await pickWorkerDiskSize(wrapper, 100);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Next'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Cancel'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(getMainDiskSize(wrapper)).toBe(75);\n+    expect(getMainCpu(wrapper)).toBe(8);\n+    expect(getMainRam(wrapper)).toBe(30);\n+    expect(getWorkerCpu(wrapper)).toBe(16);\n+    expect(getWorkerRam(wrapper)).toBe(60);\n+    expect(getNumPreemptibleWorkers(wrapper)).toBe(3);\n+    expect(getNumWorkers(wrapper)).toBe(5);\n+    expect(getWorkerDiskSize(wrapper)).toBe(100);\n+  });\n+\n+  it('should disable Update button if Runtime is in between states', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig, status: RuntimeStatus.Creating};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 20);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should send an updateRuntime API call if runtime changes do not require a delete', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    const updateSpy = jest.spyOn(runtimeApi(), 'updateRuntime');\n+    const deleteSpy = jest.spyOn(runtimeApi(), 'deleteRuntime');\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 20);\n+\n+    act(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxNjY0Ng=="}, "originalCommit": {"oid": "f1e2a24a6c29b409ede368311b1b5b143b0b4663"}, "originalPosition": 392}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODEyMTUwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1MTo0N1rOH0H4vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNjo1MTo0N1rOH0H4vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQxNzIxNQ==", "bodyText": "nit: use 'should' language", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524417215", "createdAt": "2020-11-16T16:51:47Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -319,47 +336,226 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Update button if there are no changes and runtime is running', async() => {\n     const wrapper = component();\n-    await handleUseEffect(wrapper);\n     await waitOneTickAndUpdate(wrapper);\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig, configurationType: RuntimeConfigurationType.UserOverride};\n+    act(() => {runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of preemptible workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickNumPreemptibleWorkers(wrapper, getNumPreemptibleWorkers(wrapper) + 2);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Compute Type', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickComputeType(wrapper, ComputeType.Dataproc);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - CPU', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainCpu(wrapper, getMainCpu(wrapper) + 4);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Memory', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // 15 GB -> 26 GB\n+    await pickMainRam(wrapper, 26);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Decrease Disk', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) - 5);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker CPU', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // 4 -> 8\n+    await pickWorkerCpu(wrapper, 8);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker RAM', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // 15 -> 26\n+    await pickWorkerRam(wrapper, 26);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker Disk', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await pickWorkerDiskSize(wrapper, getWorkerDiskSize(wrapper) + 10);\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('hitting cancel from the Confirm panel should revert to the edit panel without losing inputs', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    await pickMainDiskSize(wrapper, 75);\n+    await pickMainCpu(wrapper, 8);\n+    await pickMainRam(wrapper, 30);\n+    await pickWorkerCpu(wrapper, 16);\n+    await pickWorkerRam(wrapper, 60);\n+    await pickNumPreemptibleWorkers(wrapper, 3);\n+    await pickNumWorkers(wrapper, 5);\n+    await pickWorkerDiskSize(wrapper, 100);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Next'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Cancel'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(getMainDiskSize(wrapper)).toBe(75);\n+    expect(getMainCpu(wrapper)).toBe(8);\n+    expect(getMainRam(wrapper)).toBe(30);\n+    expect(getWorkerCpu(wrapper)).toBe(16);\n+    expect(getWorkerRam(wrapper)).toBe(60);\n+    expect(getNumPreemptibleWorkers(wrapper)).toBe(3);\n+    expect(getNumWorkers(wrapper)).toBe(5);\n+    expect(getWorkerDiskSize(wrapper)).toBe(100);\n+  });\n+\n+  it('should disable Update button if Runtime is in between states', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: mockDataprocConfig, status: RuntimeStatus.Creating};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = component();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 20);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should send an updateRuntime API call if runtime changes do not require a delete', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    const updateSpy = jest.spyOn(runtimeApi(), 'updateRuntime');\n+    const deleteSpy = jest.spyOn(runtimeApi(), 'deleteRuntime');\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 20);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Update'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(updateSpy).toHaveBeenCalled();\n+    expect(deleteSpy).toHaveBeenCalledTimes(0);\n+  });\n+\n+  it('should send a delete call if an update requires delete', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    const spy = jest.spyOn(runtimeApi(), 'deleteRuntime');\n \n     wrapper.find('#runtime-cpu .p-dropdown').first().simulate('click');\n-    wrapper.find('.p-dropdown-item').find({'aria-label': 8}).first().simulate('click');\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n \n-    wrapper.find('#runtime-ram').first().find('.p-dropdown-item').first().simulate('click');\n-    wrapper.find('.p-dropdown-item').find({'aria-label': 4}).first().simulate('click');\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    act(() => {\n+      wrapper.find('.p-dropdown-item').find({'aria-label': 8}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n \n-    wrapper.find('#runtime-ram .p-dropdown').first().simulate('click');\n-    wrapper.find('.p-dropdown-item').find({'aria-label': 26}).first().simulate('click');\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Next'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n \n-    wrapper.find('#runtime-ram .p-dropdown').first().simulate('click');\n-    wrapper.find('.p-dropdown-item').find({'aria-label': 15}).first().simulate('click');\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Update'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n \n-    wrapper.find('#runtime-ram .p-dropdown').first().simulate('click');\n-    wrapper.find('.p-dropdown-item').find({'aria-label': 15}).first().simulate('click');\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(spy).toHaveBeenCalled();\n+  });\n \n-    wrapper.find('#runtime-compute .p-dropdown').first().simulate('click');\n-    wrapper.find('.p-dropdown-item').find({'aria-label': 'Dataproc Cluster'}).first().simulate('click');\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+  it('create button is shown if runtime is deleted', async() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e2a24a6c29b409ede368311b1b5b143b0b4663"}, "originalPosition": 444}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODI5Mzk0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxNzoyNTo0OVrOH0JfiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTo0MDowNlrOH1z45A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MzUyOA==", "bodyText": "What does this name mean?", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524443528", "createdAt": "2020-11-16T17:25:49Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -83,6 +83,7 @@ export interface LeoRuntimeInitializerOptions {\n   maxResumeCount?: number;\n   maxServerErrorCount?: number;\n   targetRuntime?: Runtime;\n+  resolutionCond?: (Runtime) => boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4MDIzOQ==", "bodyText": "it's a function that must return true in order for the polling to \"resolve\" and exit. I added it so we can resolve on conditions other than just \"== Running\"", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r525580239", "createdAt": "2020-11-17T22:55:37Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -83,6 +83,7 @@ export interface LeoRuntimeInitializerOptions {\n   maxResumeCount?: number;\n   maxServerErrorCount?: number;\n   targetRuntime?: Runtime;\n+  resolutionCond?: (Runtime) => boolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MzUyOA=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE4NjcyNA==", "bodyText": "hm, hard to name something like that. Perhaps something like stopPollingPredicate?", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526186724", "createdAt": "2020-11-18T15:40:06Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/leo-runtime-initializer.tsx", "diffHunk": "@@ -83,6 +83,7 @@ export interface LeoRuntimeInitializerOptions {\n   maxResumeCount?: number;\n   maxServerErrorCount?: number;\n   targetRuntime?: Runtime;\n+  resolutionCond?: (Runtime) => boolean;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ0MzUyOA=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODU2MzAxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODozMjowOFrOH0METw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzowMTo0M1rOH1PClQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4NTcxMQ==", "bodyText": "Does this interact strangely with the call on L374?", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524485711", "createdAt": "2020-11-16T18:32:08Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -133,11 +344,33 @@ export const useCustomRuntime = (currentWorkspaceNamespace):\n       // TODO: It is likely more correct here to use the LeoRuntimeInitializer wait for the runtime\n       // to reach a terminal status before attempting deletion.\n       try {\n-        if (runtime && runtime.status !== RuntimeStatus.Deleted) {\n-          await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n-            signal: aborter.signal\n-          });\n+        if (runtime) {\n+          const runtimeDiffTypes = getRuntimeDiffs(runtime, requestedRuntime).map(diff => diff.differenceType);\n+\n+          if (runtimeDiffTypes.includes(RuntimeDiffState.NEEDS_DELETE)) {\n+            if (runtime.status !== RuntimeStatus.Deleted) {\n+              await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n+                signal: aborter.signal\n+              });\n+            }\n+          } else if (runtimeDiffTypes.includes(RuntimeDiffState.CAN_UPDATE)) {\n+            if (runtime.status === RuntimeStatus.Running || runtime.status === RuntimeStatus.Stopped) {\n+              await runtimeApi().updateRuntime(currentWorkspaceNamespace, {runtime: requestedRuntime});\n+              // Calling updateRuntime will not immediately set the Runtime status to not Running so the\n+              // default initializer will resolve on its first call. The polling below first checks for the\n+              // non Running status before initializing the default one that checks for Running status\n+              await LeoRuntimeInitializer.initialize({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU4Mjk5Nw==", "bodyText": "the initializer on  L374 should only start after this one has completed. (intentionally)", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r525582997", "createdAt": "2020-11-17T23:01:43Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -133,11 +344,33 @@ export const useCustomRuntime = (currentWorkspaceNamespace):\n       // TODO: It is likely more correct here to use the LeoRuntimeInitializer wait for the runtime\n       // to reach a terminal status before attempting deletion.\n       try {\n-        if (runtime && runtime.status !== RuntimeStatus.Deleted) {\n-          await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n-            signal: aborter.signal\n-          });\n+        if (runtime) {\n+          const runtimeDiffTypes = getRuntimeDiffs(runtime, requestedRuntime).map(diff => diff.differenceType);\n+\n+          if (runtimeDiffTypes.includes(RuntimeDiffState.NEEDS_DELETE)) {\n+            if (runtime.status !== RuntimeStatus.Deleted) {\n+              await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n+                signal: aborter.signal\n+              });\n+            }\n+          } else if (runtimeDiffTypes.includes(RuntimeDiffState.CAN_UPDATE)) {\n+            if (runtime.status === RuntimeStatus.Running || runtime.status === RuntimeStatus.Stopped) {\n+              await runtimeApi().updateRuntime(currentWorkspaceNamespace, {runtime: requestedRuntime});\n+              // Calling updateRuntime will not immediately set the Runtime status to not Running so the\n+              // default initializer will resolve on its first call. The polling below first checks for the\n+              // non Running status before initializing the default one that checks for Running status\n+              await LeoRuntimeInitializer.initialize({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ4NTcxMQ=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 279}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODYxMjg0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0NToxN1rOH0MjPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo1NTo1NFrOH13o0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MzYzMQ==", "bodyText": "Hm, how is this one not exported, but getRuntimeConfigDiffs is? Isn't this backwards?", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524493631", "createdAt": "2020-11-16T18:45:17Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareDataprocMasterDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.masterDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.masterDiskSize || 0;\n+\n+  let desc = 'Dataproc Master Machine Disk Size';\n+  let diffType;\n+\n+  if (newDiskSize < oldDiskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newDiskSize > oldDiskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareWorkerCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareWorkerMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldMemory = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).memory;\n+  const newMemory = findMachineByName(newRuntime.dataprocConfig.workerMachineType).memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+\n+function compareDataprocWorkerDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.workerDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.workerDiskSize || 0;\n+\n+  return {\n+    desc: (newDiskSize < oldDiskSize ?  'Decrease' : 'Increase') + ' Change Worker Machine Type',\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: oldDiskSize === newDiskSize ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDataprocNumberOfPreemptibleWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Preemptible Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+function compareDataprocNumberOfWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+export const getRuntimeConfigDiffs = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff[] => {\n+  const compareFns = [compareComputeTypes, compareDiskSize, compareMachineCpu,\n+    compareMachineMemory, compareDataprocMasterDiskSize, compareWorkerCpu, compareWorkerMemory,\n+    compareDataprocNumberOfPreemptibleWorkers, compareDataprocNumberOfWorkers, compareDataprocWorkerDiskSize];\n+\n+  return compareFns.map(compareFn => compareFn(oldRuntime, newRuntime))\n+    .filter(diff => diff !== null)\n+    .filter(diff => diff.differenceType !== RuntimeDiffState.NO_CHANGE);\n+};\n+\n+function getRuntimeDiffs(oldRuntime: Runtime, newRuntime: Runtime): RuntimeDiff[] {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0ODE0NA==", "bodyText": "I export getRuntimeConfigDiffs because the RuntimeConfig object is easier to use in the UI. The Runtime diff function was actually only created because I don't have access to the RuntimeConfig object within the useCustomRuntime so I had to find a way to map between the two.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526248144", "createdAt": "2020-11-18T16:55:54Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareDataprocMasterDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.masterDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.masterDiskSize || 0;\n+\n+  let desc = 'Dataproc Master Machine Disk Size';\n+  let diffType;\n+\n+  if (newDiskSize < oldDiskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newDiskSize > oldDiskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareWorkerCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareWorkerMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldMemory = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).memory;\n+  const newMemory = findMachineByName(newRuntime.dataprocConfig.workerMachineType).memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+\n+function compareDataprocWorkerDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.workerDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.workerDiskSize || 0;\n+\n+  return {\n+    desc: (newDiskSize < oldDiskSize ?  'Decrease' : 'Increase') + ' Change Worker Machine Type',\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: oldDiskSize === newDiskSize ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDataprocNumberOfPreemptibleWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Preemptible Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+function compareDataprocNumberOfWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+export const getRuntimeConfigDiffs = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff[] => {\n+  const compareFns = [compareComputeTypes, compareDiskSize, compareMachineCpu,\n+    compareMachineMemory, compareDataprocMasterDiskSize, compareWorkerCpu, compareWorkerMemory,\n+    compareDataprocNumberOfPreemptibleWorkers, compareDataprocNumberOfWorkers, compareDataprocWorkerDiskSize];\n+\n+  return compareFns.map(compareFn => compareFn(oldRuntime, newRuntime))\n+    .filter(diff => diff !== null)\n+    .filter(diff => diff.differenceType !== RuntimeDiffState.NO_CHANGE);\n+};\n+\n+function getRuntimeDiffs(oldRuntime: Runtime, newRuntime: Runtime): RuntimeDiff[] {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5MzYzMQ=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODYyMjg0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo0Nzo0MVrOH0MpOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNjo1Mzo0MFrOH13ftw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5NTE2Mw==", "bodyText": "nit: A tree structure of these functions might be slightly easier to follow here IMO. e.g.\ncompareRuntimeConfigs():\n  return [...compareMachines(), ...compareCompute(), ...compareDataproc()]\n\ncompareMachines():\n  return [compareCpu(), compareMemory()]\n\netc...", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524495163", "createdAt": "2020-11-16T18:47:41Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareDataprocMasterDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.masterDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.masterDiskSize || 0;\n+\n+  let desc = 'Dataproc Master Machine Disk Size';\n+  let diffType;\n+\n+  if (newDiskSize < oldDiskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newDiskSize > oldDiskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareWorkerCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareWorkerMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldMemory = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).memory;\n+  const newMemory = findMachineByName(newRuntime.dataprocConfig.workerMachineType).memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+\n+function compareDataprocWorkerDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.workerDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.workerDiskSize || 0;\n+\n+  return {\n+    desc: (newDiskSize < oldDiskSize ?  'Decrease' : 'Increase') + ' Change Worker Machine Type',\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: oldDiskSize === newDiskSize ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDataprocNumberOfPreemptibleWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Preemptible Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+function compareDataprocNumberOfWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+export const getRuntimeConfigDiffs = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff[] => {\n+  const compareFns = [compareComputeTypes, compareDiskSize, compareMachineCpu,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI0NTgxNQ==", "bodyText": "not sure if I did quite what you were looking for but I split it up into two lists", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526245815", "createdAt": "2020-11-18T16:53:40Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareDataprocMasterDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.masterDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.masterDiskSize || 0;\n+\n+  let desc = 'Dataproc Master Machine Disk Size';\n+  let diffType;\n+\n+  if (newDiskSize < oldDiskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newDiskSize > oldDiskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareWorkerCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareWorkerMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldMemory = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).memory;\n+  const newMemory = findMachineByName(newRuntime.dataprocConfig.workerMachineType).memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+\n+function compareDataprocWorkerDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.workerDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.workerDiskSize || 0;\n+\n+  return {\n+    desc: (newDiskSize < oldDiskSize ?  'Decrease' : 'Increase') + ' Change Worker Machine Type',\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: oldDiskSize === newDiskSize ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDataprocNumberOfPreemptibleWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Preemptible Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+function compareDataprocNumberOfWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+export const getRuntimeConfigDiffs = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff[] => {\n+  const compareFns = [compareComputeTypes, compareDiskSize, compareMachineCpu,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5NTE2Mw=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODYzNTY2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo1MDo0N1rOH0Mwng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzozNzozMVrOH1P5kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5NzA1NA==", "bodyText": "There's a good amount of duplication between some of these, e.g. standard and preemtible where you could probably share most of the implementation and just pass an extra label through", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524497054", "createdAt": "2020-11-16T18:50:47Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareDataprocMasterDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.masterDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.masterDiskSize || 0;\n+\n+  let desc = 'Dataproc Master Machine Disk Size';\n+  let diffType;\n+\n+  if (newDiskSize < oldDiskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newDiskSize > oldDiskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareWorkerCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareWorkerMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldMemory = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).memory;\n+  const newMemory = findMachineByName(newRuntime.dataprocConfig.workerMachineType).memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+\n+function compareDataprocWorkerDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.workerDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.workerDiskSize || 0;\n+\n+  return {\n+    desc: (newDiskSize < oldDiskSize ?  'Decrease' : 'Increase') + ' Change Worker Machine Type',\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: oldDiskSize === newDiskSize ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDataprocNumberOfPreemptibleWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NzA3NA==", "bodyText": "I actually started out with a more reusable approach but I found that the current implementation is easier to work with and think about since every \"diff\" maps to a single function. IMO, the lower complexity is worth the extra verbosity.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r525597074", "createdAt": "2020-11-17T23:37:31Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareDataprocMasterDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.masterDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.masterDiskSize || 0;\n+\n+  let desc = 'Dataproc Master Machine Disk Size';\n+  let diffType;\n+\n+  if (newDiskSize < oldDiskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newDiskSize > oldDiskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareWorkerCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareWorkerMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldMemory = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).memory;\n+  const newMemory = findMachineByName(newRuntime.dataprocConfig.workerMachineType).memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+\n+function compareDataprocWorkerDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.workerDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.workerDiskSize || 0;\n+\n+  return {\n+    desc: (newDiskSize < oldDiskSize ?  'Decrease' : 'Increase') + ' Change Worker Machine Type',\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: oldDiskSize === newDiskSize ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDataprocNumberOfPreemptibleWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5NzA1NA=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODY0MTk2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo1MjozOFrOH0M0kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzozMTowMlrOH1PwQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5ODA2NQ==", "bodyText": "Do you have clarity around what the product behavior should be when someone switches from GCE -> Dataproc?\nIs it supposed to show the new worker machine type as part of the diff? Or no?", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524498065", "createdAt": "2020-11-16T18:52:38Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareDataprocMasterDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.masterDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.masterDiskSize || 0;\n+\n+  let desc = 'Dataproc Master Machine Disk Size';\n+  let diffType;\n+\n+  if (newDiskSize < oldDiskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newDiskSize > oldDiskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareWorkerCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareWorkerMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5NDY5MQ==", "bodyText": "The mocks actually do have an example of going from GCE -> Dataproc and it doesn't have the new Dataproc config in the diff but I'll ping Shimon and Lou since I think it would be useful to add.\nHowever, even if we want that feature, I'm thinking we should address it in a different ticket to reduce the scope of the current PR.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r525594691", "createdAt": "2020-11-17T23:31:02Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareDataprocMasterDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.masterDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.masterDiskSize || 0;\n+\n+  let desc = 'Dataproc Master Machine Disk Size';\n+  let diffType;\n+\n+  if (newDiskSize < oldDiskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newDiskSize > oldDiskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareWorkerCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareWorkerMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5ODA2NQ=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODY0ODExOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo1NDoxMVrOH0M4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo1NDoxMVrOH0M4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDQ5ODk5NA==", "bodyText": "nit: most of the existing functions in here use const foo = () => {} style. Would probably match this for consistency.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524498994", "createdAt": "2020-11-16T18:54:11Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareDataprocMasterDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.masterDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.masterDiskSize || 0;\n+\n+  let desc = 'Dataproc Master Machine Disk Size';\n+  let diffType;\n+\n+  if (newDiskSize < oldDiskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newDiskSize > oldDiskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+}\n+\n+function compareWorkerCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareWorkerMemory(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldMemory = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).memory;\n+  const newMemory = findMachineByName(newRuntime.dataprocConfig.workerMachineType).memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' Memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+\n+function compareDataprocWorkerDiskSize(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.workerDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.workerDiskSize || 0;\n+\n+  return {\n+    desc: (newDiskSize < oldDiskSize ?  'Decrease' : 'Increase') + ' Change Worker Machine Type',\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: oldDiskSize === newDiskSize ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareDataprocNumberOfPreemptibleWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Preemptible Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+function compareDataprocNumberOfWorkers(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' Number of Workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+}\n+\n+export const getRuntimeConfigDiffs = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff[] => {\n+  const compareFns = [compareComputeTypes, compareDiskSize, compareMachineCpu,\n+    compareMachineMemory, compareDataprocMasterDiskSize, compareWorkerCpu, compareWorkerMemory,\n+    compareDataprocNumberOfPreemptibleWorkers, compareDataprocNumberOfWorkers, compareDataprocWorkerDiskSize];\n+\n+  return compareFns.map(compareFn => compareFn(oldRuntime, newRuntime))\n+    .filter(diff => diff !== null)\n+    .filter(diff => diff.differenceType !== RuntimeDiffState.NO_CHANGE);\n+};\n+\n+function getRuntimeDiffs(oldRuntime: Runtime, newRuntime: Runtime): RuntimeDiff[] {\n+  return getRuntimeConfigDiffs(toRuntimeConfig(oldRuntime), toRuntimeConfig(newRuntime));\n+}\n+\n+function toRuntimeConfig(runtime: Runtime): RuntimeConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODY1OTA2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo1Njo0M1rOH0M-uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzoxMTowMVrOH14VWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMDY2Nw==", "bodyText": "Running -> Updating?", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524500667", "createdAt": "2020-11-16T18:56:43Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -133,11 +344,33 @@ export const useCustomRuntime = (currentWorkspaceNamespace):\n       // TODO: It is likely more correct here to use the LeoRuntimeInitializer wait for the runtime\n       // to reach a terminal status before attempting deletion.\n       try {\n-        if (runtime && runtime.status !== RuntimeStatus.Deleted) {\n-          await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n-            signal: aborter.signal\n-          });\n+        if (runtime) {\n+          const runtimeDiffTypes = getRuntimeDiffs(runtime, requestedRuntime).map(diff => diff.differenceType);\n+\n+          if (runtimeDiffTypes.includes(RuntimeDiffState.NEEDS_DELETE)) {\n+            if (runtime.status !== RuntimeStatus.Deleted) {\n+              await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n+                signal: aborter.signal\n+              });\n+            }\n+          } else if (runtimeDiffTypes.includes(RuntimeDiffState.CAN_UPDATE)) {\n+            if (runtime.status === RuntimeStatus.Running || runtime.status === RuntimeStatus.Stopped) {\n+              await runtimeApi().updateRuntime(currentWorkspaceNamespace, {runtime: requestedRuntime});\n+              // Calling updateRuntime will not immediately set the Runtime status to not Running so the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1OTU0Nw==", "bodyText": "Not sure. In practice, I've only seen it go right to Stopping but Updating is probably the right behavior. I'll reach out to Terra to ask about what the expected behavior here is.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526259547", "createdAt": "2020-11-18T17:11:01Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -133,11 +344,33 @@ export const useCustomRuntime = (currentWorkspaceNamespace):\n       // TODO: It is likely more correct here to use the LeoRuntimeInitializer wait for the runtime\n       // to reach a terminal status before attempting deletion.\n       try {\n-        if (runtime && runtime.status !== RuntimeStatus.Deleted) {\n-          await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n-            signal: aborter.signal\n-          });\n+        if (runtime) {\n+          const runtimeDiffTypes = getRuntimeDiffs(runtime, requestedRuntime).map(diff => diff.differenceType);\n+\n+          if (runtimeDiffTypes.includes(RuntimeDiffState.NEEDS_DELETE)) {\n+            if (runtime.status !== RuntimeStatus.Deleted) {\n+              await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n+                signal: aborter.signal\n+              });\n+            }\n+          } else if (runtimeDiffTypes.includes(RuntimeDiffState.CAN_UPDATE)) {\n+            if (runtime.status === RuntimeStatus.Running || runtime.status === RuntimeStatus.Stopped) {\n+              await runtimeApi().updateRuntime(currentWorkspaceNamespace, {runtime: requestedRuntime});\n+              // Calling updateRuntime will not immediately set the Runtime status to not Running so the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMDY2Nw=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODY2MzY4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo1Nzo1NFrOH0NBgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0Njo1MFrOH2w-dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMTM3Ng==", "bodyText": "Is this guaranteed to happen? How long does this actually take, and is it possible we won't observe this?", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524501376", "createdAt": "2020-11-16T18:57:54Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -133,11 +344,33 @@ export const useCustomRuntime = (currentWorkspaceNamespace):\n       // TODO: It is likely more correct here to use the LeoRuntimeInitializer wait for the runtime\n       // to reach a terminal status before attempting deletion.\n       try {\n-        if (runtime && runtime.status !== RuntimeStatus.Deleted) {\n-          await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n-            signal: aborter.signal\n-          });\n+        if (runtime) {\n+          const runtimeDiffTypes = getRuntimeDiffs(runtime, requestedRuntime).map(diff => diff.differenceType);\n+\n+          if (runtimeDiffTypes.includes(RuntimeDiffState.NEEDS_DELETE)) {\n+            if (runtime.status !== RuntimeStatus.Deleted) {\n+              await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n+                signal: aborter.signal\n+              });\n+            }\n+          } else if (runtimeDiffTypes.includes(RuntimeDiffState.CAN_UPDATE)) {\n+            if (runtime.status === RuntimeStatus.Running || runtime.status === RuntimeStatus.Stopped) {\n+              await runtimeApi().updateRuntime(currentWorkspaceNamespace, {runtime: requestedRuntime});\n+              // Calling updateRuntime will not immediately set the Runtime status to not Running so the\n+              // default initializer will resolve on its first call. The polling below first checks for the\n+              // non Running status before initializing the default one that checks for Running status", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4NzU3Mw==", "bodyText": "If we go with this for now (looks like the patchInProgress variable is not being returned), then please either set a time limit on this polling OR change the condition to be !== RUNNING || noChangesNeeded, where changes needed can be a function of diffing r and requestedRuntime. This catches the case where the update gets applied but we somehow fail to observe any kind of status change.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r527187573", "createdAt": "2020-11-19T20:46:50Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -133,11 +344,33 @@ export const useCustomRuntime = (currentWorkspaceNamespace):\n       // TODO: It is likely more correct here to use the LeoRuntimeInitializer wait for the runtime\n       // to reach a terminal status before attempting deletion.\n       try {\n-        if (runtime && runtime.status !== RuntimeStatus.Deleted) {\n-          await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n-            signal: aborter.signal\n-          });\n+        if (runtime) {\n+          const runtimeDiffTypes = getRuntimeDiffs(runtime, requestedRuntime).map(diff => diff.differenceType);\n+\n+          if (runtimeDiffTypes.includes(RuntimeDiffState.NEEDS_DELETE)) {\n+            if (runtime.status !== RuntimeStatus.Deleted) {\n+              await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n+                signal: aborter.signal\n+              });\n+            }\n+          } else if (runtimeDiffTypes.includes(RuntimeDiffState.CAN_UPDATE)) {\n+            if (runtime.status === RuntimeStatus.Running || runtime.status === RuntimeStatus.Stopped) {\n+              await runtimeApi().updateRuntime(currentWorkspaceNamespace, {runtime: requestedRuntime});\n+              // Calling updateRuntime will not immediately set the Runtime status to not Running so the\n+              // default initializer will resolve on its first call. The polling below first checks for the\n+              // non Running status before initializing the default one that checks for Running status", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMTM3Ng=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODY3MDAwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo1OTozN1rOH0NFaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxODo1OTozN1rOH0NFaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMjM3OQ==", "bodyText": "If we have to do this approach (we should check with Leo to understand whether this is expected and whether the behavior can be changed), I think we would also want to have some kind of upper bound timer here. e.g. also check for time having elapsed at this point", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524502379", "createdAt": "2020-11-16T18:59:37Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -133,11 +344,33 @@ export const useCustomRuntime = (currentWorkspaceNamespace):\n       // TODO: It is likely more correct here to use the LeoRuntimeInitializer wait for the runtime\n       // to reach a terminal status before attempting deletion.\n       try {\n-        if (runtime && runtime.status !== RuntimeStatus.Deleted) {\n-          await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n-            signal: aborter.signal\n-          });\n+        if (runtime) {\n+          const runtimeDiffTypes = getRuntimeDiffs(runtime, requestedRuntime).map(diff => diff.differenceType);\n+\n+          if (runtimeDiffTypes.includes(RuntimeDiffState.NEEDS_DELETE)) {\n+            if (runtime.status !== RuntimeStatus.Deleted) {\n+              await runtimeApi().deleteRuntime(currentWorkspaceNamespace, {\n+                signal: aborter.signal\n+              });\n+            }\n+          } else if (runtimeDiffTypes.includes(RuntimeDiffState.CAN_UPDATE)) {\n+            if (runtime.status === RuntimeStatus.Running || runtime.status === RuntimeStatus.Stopped) {\n+              await runtimeApi().updateRuntime(currentWorkspaceNamespace, {runtime: requestedRuntime});\n+              // Calling updateRuntime will not immediately set the Runtime status to not Running so the\n+              // default initializer will resolve on its first call. The polling below first checks for the\n+              // non Running status before initializing the default one that checks for Running status\n+              await LeoRuntimeInitializer.initialize({\n+                workspaceNamespace,\n+                targetRuntime: requestedRuntime,\n+                resolutionCond: r => r.status !== RuntimeStatus.Running,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 282}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODY4MDIzOnYy", "diffSide": "RIGHT", "path": "ui/src/testing/stubs/runtime-api-stub.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTowMjowNVrOH0NLUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTowMjowNVrOH0NLUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwMzg4OA==", "bodyText": "nit: I'd characterize this as test, fake, or stub data rather than a mock. Generally I prefer reserving the term mock to refer to actual  testing mocks to avoid confusion.\nopt: IN this case, I might just name it defaultGceConfig to match the other naming below", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524503888", "createdAt": "2020-11-16T19:02:05Z", "author": {"login": "calbach"}, "path": "ui/src/testing/stubs/runtime-api-stub.ts", "diffHunk": "@@ -8,18 +9,29 @@ import {\n } from 'generated/fetch';\n import {stubNotImplementedError} from 'testing/stubs/stub-utils';\n \n+export const mockGceConfig: GceConfig = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODY4NTc4OnYy", "diffSide": "RIGHT", "path": "ui/src/testing/stubs/runtime-api-stub.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTowMzo0MVrOH0NOuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzozMToyMVrOH15U7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwNDc2Mw==", "bodyText": "hm. Why is this the result? Please comment if it's needed", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524504763", "createdAt": "2020-11-16T19:03:41Z", "author": {"login": "calbach"}, "path": "ui/src/testing/stubs/runtime-api-stub.ts", "diffHunk": "@@ -50,6 +62,13 @@ export class RuntimeApiStub extends RuntimeApi {\n     });\n   }\n \n+  updateRuntime(workspaceNamespace: string, options?: any): Promise<{}> {\n+    return new Promise<{}>(resolve => {\n+      this.runtime.status = RuntimeStatus.Running;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3NTgyMg==", "bodyText": "I did this so that it reflects what's currently happening in the product. Could be a bug so I'll reach out to Terra to see what's going on.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526275822", "createdAt": "2020-11-18T17:31:21Z", "author": {"login": "ericsong"}, "path": "ui/src/testing/stubs/runtime-api-stub.ts", "diffHunk": "@@ -50,6 +62,13 @@ export class RuntimeApiStub extends RuntimeApi {\n     });\n   }\n \n+  updateRuntime(workspaceNamespace: string, options?: any): Promise<{}> {\n+    return new Promise<{}>(resolve => {\n+      this.runtime.status = RuntimeStatus.Running;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwNDc2Mw=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODY5MDkwOnYy", "diffSide": "RIGHT", "path": "ui/src/testing/stubs/runtime-api-stub.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTowNDo0N1rOH0NRlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTowNDo0N1rOH0NRlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwNTQ5NA==", "bodyText": "I would shallow copy here. I made defaultRuntime a function to avoid tests interfering with one another by mutating the runtime value.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524505494", "createdAt": "2020-11-16T19:04:47Z", "author": {"login": "calbach"}, "path": "ui/src/testing/stubs/runtime-api-stub.ts", "diffHunk": "@@ -8,18 +9,29 @@ import {\n } from 'generated/fetch';\n import {stubNotImplementedError} from 'testing/stubs/stub-utils';\n \n+export const mockGceConfig: GceConfig = {\n+  diskSize: 80,\n+  machineType: 'n1-standard-4'\n+};\n+\n+export const mockDataprocConfig: DataprocConfig = {\n+  masterMachineType: 'n1-standard-4',\n+  masterDiskSize: 80,\n+  workerDiskSize: 40,\n+  workerMachineType: 'n1-standard-4',\n+  numberOfWorkers: 1,\n+  numberOfPreemptibleWorkers: 2,\n+  numberOfWorkerLocalSSDs: 0\n+};\n+\n export const defaultRuntime = () => ({\n   runtimeName: 'Runtime Name',\n   googleProject: 'Namespace',\n   status: RuntimeStatus.Running,\n   createdDate: '08/08/2018',\n   toolDockerImage: 'broadinstitute/terra-jupyter-aou:1.0.999',\n   configurationType: RuntimeConfigurationType.GeneralAnalysis,\n-  dataprocConfig: {\n-    masterMachineType: 'n1-standard-4',\n-    masterDiskSize: 80,\n-    numberOfWorkers: 0\n-  }\n+  gceConfig: mockGceConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODY5Nzk3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTowNjo0M1rOH0NV2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTowNjo0M1rOH0NV2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwNjU4NQ==", "bodyText": "nice..", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524506585", "createdAt": "2020-11-16T19:06:43Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -508,12 +527,24 @@ export const RuntimePanel = fp.flow(\n   const [selectedCompute, setSelectedCompute] = useState<ComputeType>(initialCompute);\n   const [selectedDataprocConfig, setSelectedDataprocConfig] = useState<DataprocConfig | null>(dataprocConfig);\n \n-  const selectedMachineType = selectedMachine && selectedMachine.name;\n   const runtimeExists = (status && status !== RuntimeStatus.Deleted) || !!pendingRuntime;\n-  const runtimeChanged = !fp.equals(selectedMachine, initialMasterMachine) ||\n-    selectedDiskSize !== diskSize ||\n-    !fp.equals(selectedDataprocConfig, dataprocConfig) ||\n-    !fp.equals(selectedCompute, initialCompute);\n+\n+  const initialRuntimeConfig = {\n+    computeType: initialCompute,\n+    machine: initialMasterMachine,\n+    diskSize: diskSize,\n+    dataprocConfig: dataprocConfig\n+  };\n+\n+  const newRuntimeConfig = {\n+    computeType: selectedCompute,\n+    machine: selectedMachine,\n+    diskSize: selectedDiskSize,\n+    dataprocConfig: selectedDataprocConfig\n+  };\n+\n+  const runtimeDiffs = getRuntimeConfigDiffs(initialRuntimeConfig, newRuntimeConfig);\n+  const runtimeChanged = runtimeDiffs.length > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODcwNzU3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTowOToyOFrOH0NbxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTowOToyOFrOH0NbxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUwODEwMQ==", "bodyText": "nit: 6 dots? Is this in the mocks? I'd say no more than 3, if we need ellipses at all here.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524508101", "createdAt": "2020-11-16T19:09:28Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -591,33 +767,19 @@ export const RuntimePanel = fp.flow(\n                      style={{width: '10rem'}}\n                      options={[ComputeType.Standard, ComputeType.Dataproc]}\n                      value={selectedCompute || ComputeType.Standard}\n-                     onChange={({value}) => setSelectedCompute(value)}\n+                     onChange={({value}) => {setSelectedCompute(value); }}\n                      />\n            {\n              selectedCompute === ComputeType.Dataproc &&\n-             <DataProcConfigSelector onChange={setSelectedDataprocConfig} dataprocConfig={selectedDataprocConfig} />\n+             <DataProcConfigSelector onChange={config => setSelectedDataprocConfig(config)} dataprocConfig={selectedDataprocConfig} />\n            }\n          </FlexColumn>\n        </div>\n-       {runtimeExists && runtimeChanged && <FlexRow\n-           style={{\n-             alignItems: 'center',\n-             backgroundColor: colorWithWhiteness(colors.warning, .9),\n-             border: `1px solid ${colors.warning}`,\n-             borderRadius: '5px',\n-             color: colors.dark,\n-             marginTop: '.5rem',\n-             padding: '.5rem 0px'\n-           }}\n-       >\n-         <ClrIcon\n-             style={{color: colors.warning, marginLeft: '.5rem'}}\n-             shape={'warning-standard'}\n-             size={16}\n-             class={'is-solid'}\n-         />\n-         <div style={{marginLeft: '.5rem'}}>You've made changes that require recreating your environment to take effect.</div>\n-       </FlexRow>}\n+       {runtimeExists && runtimeChanged &&\n+         <WarningMessage>\n+            <div>You've made changes that require recreating your environment to take effect.....</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 497}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODcyNjg0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOToxNDo1NVrOH0Nnxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMzoyNDoyNlrOH1PmIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxMTE3NA==", "bodyText": "I don't think \"Number\" should be capitalized here. Not sure whether this matches the mocks or not - if it does, happy to make my objection to Lou and/or Shimon", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r524511174", "createdAt": "2020-11-16T19:14:55Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU5MjA5Nw==", "bodyText": "They only had a few examples specified. I changed the casing for all of the diffs to be lowercase except for \"CPUs\".", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r525592097", "createdAt": "2020-11-17T23:24:26Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,240 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+function compareComputeTypes(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  return {\n+    desc: 'Change Compute Type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+}\n+\n+function compareMachineCpu(oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' Number of CPUs',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUxMTE3NA=="}, "originalCommit": {"oid": "ff2c0c74b0b1330024040ccc107ab732dfa4bd9a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk2MjQ3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/components/help-sidebar.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowNzowOVrOH2F92Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowNzowOVrOH2F92Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MjkwNQ==", "bodyText": "nit: revert", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526482905", "createdAt": "2020-11-18T23:07:09Z", "author": {"login": "calbach"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -341,6 +341,7 @@ interface Props {\n   profileState: any;\n   setSidebarState: Function;\n   shareFunction: Function;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk2NDEwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowNzo1MlrOH2F-0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzowNzo1MlrOH2F-0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4MzE1Mg==", "bodyText": "Please also restore timers here:     jest.useRealTimers();", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526483152", "createdAt": "2020-11-18T23:07:52Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -51,55 +50,74 @@ describe('RuntimePanel', () => {\n       cdrVersionListResponse,\n       onUpdate: () => {}\n     };\n+\n+    jest.useFakeTimers();\n   });\n \n   afterEach(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk2OTc2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxMDowOFrOH2GCFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxMDowOFrOH2GCFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4Mzk5MQ==", "bodyText": "I'm a bit confused by this helper. It looks like it's just getting the input value, and it's identical to getNumberInput - would probably merge these together and just call it getInputValue", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526483991", "createdAt": "2020-11-18T23:10:08Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -51,55 +50,74 @@ describe('RuntimePanel', () => {\n       cdrVersionListResponse,\n       onUpdate: () => {}\n     };\n+\n+    jest.useFakeTimers();\n   });\n \n   afterEach(() => {\n     act(() => clearCompoundRuntimeOperations());\n   });\n \n+  const getDropdownOption = (wrapper, id) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk4Mzg3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxNTo0NVrOH2GKmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTowODoyN1rOH2jH1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NjE2OQ==", "bodyText": "hmm.. why does this and the next test require deletion? Changing the machine type shouldn't require it", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526486169", "createdAt": "2020-11-18T23:15:45Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -348,30 +365,187 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Update button if there are no changes and runtime is running', async() => {\n+    const wrapper = await component();\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n     const wrapper = await component();\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    // Initial state: n1-standard-4, 4 CPU 15 RAM\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n \n-    await pickMainCpu(wrapper, 8);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig(), configurationType: RuntimeConfigurationType.UserOverride};\n+    act(() => {runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n \n-    await pickMainCpu(wrapper, 4);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    const wrapper = await component();\n \n-    await pickMainRam(wrapper, 26);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+    await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n \n-    await pickMainRam(wrapper, 15);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of preemptible workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickNumPreemptibleWorkers(wrapper, getNumPreemptibleWorkers(wrapper) + 2);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Compute Type', async() => {\n+    const wrapper = await component();\n \n     await pickComputeType(wrapper, ComputeType.Dataproc);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n \n-    await pickComputeType(wrapper, ComputeType.Standard);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - CPU', async() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 355}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk2MDU5OQ==", "bodyText": "Ah, I was basing this off the behavior that I observed in the Terra application but I misinterpreted what I was seeing. There, changing the CPU/memory requires the \"Next\" workflow even though the cluster does not need to be recreated.\nIt looks like they have 3 different UIs depending on the kind of change you are making.\n\nUpdate with no warning (for changes that do not require even a reboot?)\nNext/Update with a reboot warning\nNext/Update with loss of data warning\n\nIn my implementation, I only have two different UIs and I grouped the latter two together whereas I should have grouped the first two.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526960599", "createdAt": "2020-11-19T15:08:27Z", "author": {"login": "ericsong"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -348,30 +365,187 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Update button if there are no changes and runtime is running', async() => {\n+    const wrapper = await component();\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n     const wrapper = await component();\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    // Initial state: n1-standard-4, 4 CPU 15 RAM\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n \n-    await pickMainCpu(wrapper, 8);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig(), configurationType: RuntimeConfigurationType.UserOverride};\n+    act(() => {runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n \n-    await pickMainCpu(wrapper, 4);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    const wrapper = await component();\n \n-    await pickMainRam(wrapper, 26);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+    await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n \n-    await pickMainRam(wrapper, 15);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of preemptible workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickNumPreemptibleWorkers(wrapper, getNumPreemptibleWorkers(wrapper) + 2);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Compute Type', async() => {\n+    const wrapper = await component();\n \n     await pickComputeType(wrapper, ComputeType.Dataproc);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n \n-    await pickComputeType(wrapper, ComputeType.Standard);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - CPU', async() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NjE2OQ=="}, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 355}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk4ODUyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxNzozNFrOH2GNUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxNzozNFrOH2GNUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4Njg2NA==", "bodyText": "These two act statements shouldn't be needed, but also - should be able to use your helper function mustClickButton here", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526486864", "createdAt": "2020-11-18T23:17:34Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -348,30 +365,187 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Update button if there are no changes and runtime is running', async() => {\n+    const wrapper = await component();\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n     const wrapper = await component();\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    // Initial state: n1-standard-4, 4 CPU 15 RAM\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n \n-    await pickMainCpu(wrapper, 8);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig(), configurationType: RuntimeConfigurationType.UserOverride};\n+    act(() => {runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n \n-    await pickMainCpu(wrapper, 4);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    const wrapper = await component();\n \n-    await pickMainRam(wrapper, 26);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+    await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n \n-    await pickMainRam(wrapper, 15);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of preemptible workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickNumPreemptibleWorkers(wrapper, getNumPreemptibleWorkers(wrapper) + 2);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Compute Type', async() => {\n+    const wrapper = await component();\n \n     await pickComputeType(wrapper, ComputeType.Dataproc);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n \n-    await pickComputeType(wrapper, ComputeType.Standard);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - CPU', async() => {\n+    const wrapper = await component();\n+\n+    await pickMainCpu(wrapper, getMainCpu(wrapper) + 4);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Memory', async() => {\n+    const wrapper = await component();\n+\n+    // 15 GB -> 26 GB\n+    await pickMainRam(wrapper, 26);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Decrease Disk', async() => {\n+    const wrapper = await component();\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) - 5);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker CPU', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    // 4 -> 8\n+    await pickWorkerCpu(wrapper, 8);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker RAM', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    // 15 -> 26\n+    await pickWorkerRam(wrapper, 26);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker Disk', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+    await pickWorkerDiskSize(wrapper, getWorkerDiskSize(wrapper) + 10);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should retain original inputs when hitting cancel from the Confirm panel', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickMainDiskSize(wrapper, 75);\n+    await pickMainCpu(wrapper, 8);\n+    await pickMainRam(wrapper, 30);\n+    await pickWorkerCpu(wrapper, 16);\n+    await pickWorkerRam(wrapper, 60);\n+    await pickNumPreemptibleWorkers(wrapper, 3);\n+    await pickNumWorkers(wrapper, 5);\n+    await pickWorkerDiskSize(wrapper, 100);\n+\n+    act(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 429}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk5MTI5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxODozOFrOH2GO5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxODozOFrOH2GO5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NzI2OQ==", "bodyText": "opt: IMO it is cleaner to just check the resulting value in the runtimeApiStub.runtime here, rather than using mocks/spies - but maybe this is not realistic if you don't have any detectable immediate changes in the fake as a result of applying an update", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526487269", "createdAt": "2020-11-18T23:18:38Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -348,30 +365,187 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Update button if there are no changes and runtime is running', async() => {\n+    const wrapper = await component();\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n     const wrapper = await component();\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    // Initial state: n1-standard-4, 4 CPU 15 RAM\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n \n-    await pickMainCpu(wrapper, 8);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig(), configurationType: RuntimeConfigurationType.UserOverride};\n+    act(() => {runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n \n-    await pickMainCpu(wrapper, 4);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    const wrapper = await component();\n \n-    await pickMainRam(wrapper, 26);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+    await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n \n-    await pickMainRam(wrapper, 15);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of preemptible workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickNumPreemptibleWorkers(wrapper, getNumPreemptibleWorkers(wrapper) + 2);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Compute Type', async() => {\n+    const wrapper = await component();\n \n     await pickComputeType(wrapper, ComputeType.Dataproc);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n \n-    await pickComputeType(wrapper, ComputeType.Standard);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - CPU', async() => {\n+    const wrapper = await component();\n+\n+    await pickMainCpu(wrapper, getMainCpu(wrapper) + 4);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Memory', async() => {\n+    const wrapper = await component();\n+\n+    // 15 GB -> 26 GB\n+    await pickMainRam(wrapper, 26);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Decrease Disk', async() => {\n+    const wrapper = await component();\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) - 5);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker CPU', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    // 4 -> 8\n+    await pickWorkerCpu(wrapper, 8);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker RAM', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    // 15 -> 26\n+    await pickWorkerRam(wrapper, 26);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker Disk', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+    await pickWorkerDiskSize(wrapper, getWorkerDiskSize(wrapper) + 10);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should retain original inputs when hitting cancel from the Confirm panel', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickMainDiskSize(wrapper, 75);\n+    await pickMainCpu(wrapper, 8);\n+    await pickMainRam(wrapper, 30);\n+    await pickWorkerCpu(wrapper, 16);\n+    await pickWorkerRam(wrapper, 60);\n+    await pickNumPreemptibleWorkers(wrapper, 3);\n+    await pickNumWorkers(wrapper, 5);\n+    await pickWorkerDiskSize(wrapper, 100);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Next'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Cancel'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(getMainDiskSize(wrapper)).toBe(75);\n+    expect(getMainCpu(wrapper)).toBe(8);\n+    expect(getMainRam(wrapper)).toBe(30);\n+    expect(getWorkerCpu(wrapper)).toBe(16);\n+    expect(getWorkerRam(wrapper)).toBe(60);\n+    expect(getNumPreemptibleWorkers(wrapper)).toBe(3);\n+    expect(getNumWorkers(wrapper)).toBe(5);\n+    expect(getWorkerDiskSize(wrapper)).toBe(100);\n+  });\n+\n+  it('should disable Update button if Runtime is in between states', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig(), status: RuntimeStatus.Creating};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 20);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should send an updateRuntime API call if runtime changes do not require a delete', async() => {\n+    const wrapper = await component();\n+\n+    const updateSpy = jest.spyOn(runtimeApi(), 'updateRuntime');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 462}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMDk5NDE3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxOTo0MlrOH2GQhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzoxOTo0MlrOH2GQhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ4NzY4NA==", "bodyText": "Here it should be possible to just check the Deleting status on the runtime", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526487684", "createdAt": "2020-11-18T23:19:42Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -348,30 +365,187 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Update button if there are no changes and runtime is running', async() => {\n+    const wrapper = await component();\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n     const wrapper = await component();\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    // Initial state: n1-standard-4, 4 CPU 15 RAM\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n \n-    await pickMainCpu(wrapper, 8);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig(), configurationType: RuntimeConfigurationType.UserOverride};\n+    act(() => {runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n \n-    await pickMainCpu(wrapper, 4);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    const wrapper = await component();\n \n-    await pickMainRam(wrapper, 26);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+    await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n \n-    await pickMainRam(wrapper, 15);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of preemptible workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickNumPreemptibleWorkers(wrapper, getNumPreemptibleWorkers(wrapper) + 2);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Compute Type', async() => {\n+    const wrapper = await component();\n \n     await pickComputeType(wrapper, ComputeType.Dataproc);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n \n-    await pickComputeType(wrapper, ComputeType.Standard);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - CPU', async() => {\n+    const wrapper = await component();\n+\n+    await pickMainCpu(wrapper, getMainCpu(wrapper) + 4);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Memory', async() => {\n+    const wrapper = await component();\n+\n+    // 15 GB -> 26 GB\n+    await pickMainRam(wrapper, 26);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Decrease Disk', async() => {\n+    const wrapper = await component();\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) - 5);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker CPU', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    // 4 -> 8\n+    await pickWorkerCpu(wrapper, 8);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker RAM', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    // 15 -> 26\n+    await pickWorkerRam(wrapper, 26);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should render the Next button if there are updates that require delete and runtime is running - Worker Disk', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+    await pickWorkerDiskSize(wrapper, getWorkerDiskSize(wrapper) + 10);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeFalsy();\n+  });\n+\n+  it('should retain original inputs when hitting cancel from the Confirm panel', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickMainDiskSize(wrapper, 75);\n+    await pickMainCpu(wrapper, 8);\n+    await pickMainRam(wrapper, 30);\n+    await pickWorkerCpu(wrapper, 16);\n+    await pickWorkerRam(wrapper, 60);\n+    await pickNumPreemptibleWorkers(wrapper, 3);\n+    await pickNumWorkers(wrapper, 5);\n+    await pickWorkerDiskSize(wrapper, 100);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Next'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    act(() => {\n+      wrapper.find(Button).find({'aria-label': 'Cancel'}).first().simulate('click');\n+    });\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    expect(getMainDiskSize(wrapper)).toBe(75);\n+    expect(getMainCpu(wrapper)).toBe(8);\n+    expect(getMainRam(wrapper)).toBe(30);\n+    expect(getWorkerCpu(wrapper)).toBe(16);\n+    expect(getWorkerRam(wrapper)).toBe(60);\n+    expect(getNumPreemptibleWorkers(wrapper)).toBe(3);\n+    expect(getNumWorkers(wrapper)).toBe(5);\n+    expect(getWorkerDiskSize(wrapper)).toBe(100);\n+  });\n+\n+  it('should disable Update button if Runtime is in between states', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig(), status: RuntimeStatus.Creating};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 20);\n+\n+    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+  });\n+\n+  it('should send an updateRuntime API call if runtime changes do not require a delete', async() => {\n+    const wrapper = await component();\n+\n+    const updateSpy = jest.spyOn(runtimeApi(), 'updateRuntime');\n+    const deleteSpy = jest.spyOn(runtimeApi(), 'deleteRuntime');\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 20);\n+\n+    await mustClickButton(wrapper, 'Update');\n+\n+    expect(updateSpy).toHaveBeenCalled();\n+    expect(deleteSpy).toHaveBeenCalledTimes(0);\n+  });\n+\n+  it('should send a delete call if an update requires delete', async() => {\n+    const wrapper = await component();\n+\n+    const spy = jest.spyOn(runtimeApi(), 'deleteRuntime');\n+\n+    await pickMainCpu(wrapper, 8);\n+\n+    await mustClickButton(wrapper, 'Next');\n+    await mustClickButton(wrapper, 'Update');\n+\n+    expect(spy).toHaveBeenCalled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 483}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTAzMzA2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzozNjoxOFrOH2Gn8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo1NTo0NlrOH2oObA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5MzY4Mw==", "bodyText": "What I was more suggesting is that you break the uniformity of these function signatures, so that they more directly interact with the values they care about. For example, this method maybe something like:\n[\n  compareComputeTypes(oldRuntime.computeType, newRuntime.computeType),\n  compareMachineCpu(oldRuntime.machine.cpu, ...)\n]\n\nThis way the lower level functions are a bit more tightly scoped.\nI would also put the filtering up one level so you don't need to duplicate it", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526493683", "createdAt": "2020-11-18T23:36:18Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,219 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+const compareComputeTypes = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  return {\n+    desc: 'Change compute type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareMachineCpu = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareMachineMemory = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareDiskSize = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+};\n+\n+const compareWorkerCpu = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareWorkerMemory = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldMemory = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).memory;\n+  const newMemory = findMachineByName(newRuntime.dataprocConfig.workerMachineType).memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareDataprocWorkerDiskSize = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.workerDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.workerDiskSize || 0;\n+\n+  return {\n+    desc: (newDiskSize < oldDiskSize ?  'Decrease' : 'Increase') + ' worker disk size',\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: oldDiskSize === newDiskSize ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareDataprocNumberOfPreemptibleWorkers = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' number of preemptible workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+};\n+\n+const compareDataprocNumberOfWorkers = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' number of workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+};\n+\n+const compareDataprocConfig = (oldRuntime, newRuntime) => {\n+  return [compareWorkerCpu, compareWorkerMemory, compareDataprocWorkerDiskSize,\n+    compareDataprocNumberOfPreemptibleWorkers, compareDataprocNumberOfWorkers]\n+    .map(compareFn => compareFn(oldRuntime, newRuntime))\n+    .filter(diff => diff !== null)\n+    .filter(diff => diff.differenceType !== RuntimeDiffState.NO_CHANGE);\n+};\n+\n+const compareMachineConfig = (oldRuntime, newRuntime) => {\n+  return [compareComputeTypes, compareMachineCpu, compareMachineMemory, compareDiskSize]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzA0NDIwNA==", "bodyText": "I see. I kind of like having the uniform function signature since it offloads the logic (however simple) of knowing how to access the relevant field to each function rather than in the calling function. In this way, the caller can view all of the comparison functions as the same and do things like the map.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r527044204", "createdAt": "2020-11-19T16:55:46Z", "author": {"login": "ericsong"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,219 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+const compareComputeTypes = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  return {\n+    desc: 'Change compute type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareMachineCpu = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareMachineMemory = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  const oldMemory = oldRuntime.machine.memory;\n+  const newMemory = newRuntime.machine.memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareDiskSize = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  let desc = 'Disk Size';\n+  let diffType;\n+\n+  if (newRuntime.diskSize < oldRuntime.diskSize) {\n+    desc = 'Decease ' + desc;\n+    diffType = RuntimeDiffState.NEEDS_DELETE;\n+  } else if (newRuntime.diskSize > oldRuntime.diskSize) {\n+    desc = 'Increase ' + desc;\n+    diffType = RuntimeDiffState.CAN_UPDATE;\n+  } else {\n+    diffType = RuntimeDiffState.NO_CHANGE;\n+  }\n+\n+  return {\n+    desc: desc,\n+    previous: oldRuntime.diskSize.toString() + ' GB',\n+    new: newRuntime.diskSize.toString() + ' GB',\n+    differenceType: diffType\n+  };\n+};\n+\n+const compareWorkerCpu = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldCpu = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).cpu;\n+  const newCpu = findMachineByName(newRuntime.dataprocConfig.workerMachineType).cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareWorkerMemory = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (!oldRuntime.dataprocConfig || !newRuntime.dataprocConfig) {\n+    return null;\n+  }\n+\n+  const oldMemory = findMachineByName(oldRuntime.dataprocConfig.workerMachineType).memory;\n+  const newMemory = findMachineByName(newRuntime.dataprocConfig.workerMachineType).memory;\n+\n+  return {\n+    desc: (newMemory < oldMemory ?  'Decrease' : 'Increase') + ' memory',\n+    previous: oldMemory.toString() + ' GB',\n+    new: newMemory.toString() + ' GB',\n+    differenceType: oldMemory === newMemory ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareDataprocWorkerDiskSize = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldDiskSize = oldRuntime.dataprocConfig.workerDiskSize || 0;\n+  const newDiskSize = newRuntime.dataprocConfig.workerDiskSize || 0;\n+\n+  return {\n+    desc: (newDiskSize < oldDiskSize ?  'Decrease' : 'Increase') + ' worker disk size',\n+    previous: oldDiskSize.toString() + ' GB',\n+    new: newDiskSize.toString() + ' GB',\n+    differenceType: oldDiskSize === newDiskSize ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareDataprocNumberOfPreemptibleWorkers = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfPreemptibleWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' number of preemptible workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+};\n+\n+const compareDataprocNumberOfWorkers = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  if (oldRuntime.dataprocConfig === null || newRuntime.dataprocConfig === null) {\n+    return null;\n+  }\n+\n+  const oldNumWorkers = oldRuntime.dataprocConfig.numberOfWorkers || 0;\n+  const newNumWorkers = newRuntime.dataprocConfig.numberOfWorkers || 0;\n+\n+  return {\n+    desc: (newNumWorkers < oldNumWorkers ?  'Decrease' : 'Increase') + ' number of workers',\n+    previous: oldNumWorkers.toString(),\n+    new: newNumWorkers.toString(),\n+    differenceType: oldNumWorkers === newNumWorkers ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.CAN_UPDATE\n+  };\n+};\n+\n+const compareDataprocConfig = (oldRuntime, newRuntime) => {\n+  return [compareWorkerCpu, compareWorkerMemory, compareDataprocWorkerDiskSize,\n+    compareDataprocNumberOfPreemptibleWorkers, compareDataprocNumberOfWorkers]\n+    .map(compareFn => compareFn(oldRuntime, newRuntime))\n+    .filter(diff => diff !== null)\n+    .filter(diff => diff.differenceType !== RuntimeDiffState.NO_CHANGE);\n+};\n+\n+const compareMachineConfig = (oldRuntime, newRuntime) => {\n+  return [compareComputeTypes, compareMachineCpu, compareMachineMemory, compareDiskSize]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5MzY4Mw=="}, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTA0MzU0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo0MDoyOFrOH2GuSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo0MDoyOFrOH2GuSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5NTMwNQ==", "bodyText": "nit: indentation", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526495305", "createdAt": "2020-11-18T23:40:28Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -699,18 +821,13 @@ export const RuntimePanel = fp.flow(\n       />],\n       [PanelContent.Customize, () => <Fragment>\n         <div style={styles.controlSection}>\n-          <CostEstimator\n-              freeCreditsRemaining={creatorFreeCreditsRemaining}\n-              profile={profile}\n-              runtimeParameters={{\n-                computeType: selectedCompute,\n-                diskSize: selectedDiskSize,\n-                machineType: selectedMachineType,\n-                dataprocConfig: selectedDataprocConfig\n-              }}\n-              runtimeChanged={runtimeChanged}\n-              workspace={workspace}\n+          <CostInfo runtimeChanged={runtimeChanged}\n+                                runtimeConfig={newRuntimeConfig}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 551}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTA1MjIyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo0NDowMlrOH2Gzpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQyMzo0NDowMlrOH2Gzpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjQ5NjY3OA==", "bodyText": "This is big enough that I'd probably just define a private function component here, e.g. see ConfirmPolicy, CreatePanel. I realize you don't get the benefits of the closure, but there's a lot of local state in this function, so defining explicit inputs is probably a positive.\nYou should be able to pass a component as a prop, e.g. for the next/create/update buttons, as I'm guessing this is the main concern.\n<ConfirmUpdate\n  updateButton={renderUpdateButton()}\n  ... />", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526496678", "createdAt": "2020-11-18T23:44:02Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -653,12 +666,136 @@ export const RuntimePanel = fp.flow(\n     return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n   }\n \n+  const createRuntimeRequest = (runtime: RuntimeConfig) => {\n+    const runtimeRequest: Runtime = runtime.computeType === ComputeType.Dataproc ? {\n+      dataprocConfig: {\n+        ...runtime.dataprocConfig,\n+        masterMachineType: runtime.machine.name,\n+        masterDiskSize: runtime.diskSize\n+      }\n+    } : runtime.computeType === ComputeType.Standard ? {\n+      gceConfig: {\n+        machineType: runtime.machine.name,\n+        diskSize: runtime.diskSize\n+      }\n+    } : null;\n+\n+    // If the selected runtime matches a preset, plumb through the appropriate configuration type.\n+    runtimeRequest.configurationType = fp.get(\n+      'runtimeTemplate.configurationType',\n+      fp.find(\n+        ({runtimeTemplate}) => presetEquals(runtimeRequest, runtimeTemplate),\n+        runtimePresets)\n+    ) || RuntimeConfigurationType.UserOverride;\n+\n+    return runtimeRequest;\n+  };\n+\n+  const renderUpdateButton = () => {\n+    return <Button\n+      aria-label='Update'\n+      disabled={\n+        !runtimeChanged\n+        // Casting to RuntimeStatus here because it can't easily be done at the destructuring level\n+        // where we get 'status' from\n+        || ![RuntimeStatus.Running, RuntimeStatus.Stopped].includes(status as RuntimeStatus)\n+      }\n+      onClick={() => {\n+        setRequestedRuntime(createRuntimeRequest(newRuntimeConfig));\n+        onUpdate();\n+      }}>\n+      Update\n+    </Button>;\n+  };\n+\n+  const renderCreateButton = () => {\n+    return <Button\n+      aria-label='Create'\n+      onClick={() => {\n+        setRequestedRuntime(createRuntimeRequest(newRuntimeConfig));\n+      }}>\n+      Create\n+    </Button>;\n+  };\n+\n+  const renderNextButton = () => {\n+    return <Button\n+      aria-label='Next'\n+      onClick={() => {\n+        setPanelContent(PanelContent.Confirm);\n+      }}>\n+      Next\n+    </Button>;\n+  };\n+\n+  const renderConfirmUpdate = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 436}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTA5OTMwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/utils/runtime-utils.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDowMzo0MFrOH2HQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMDowMzo0MFrOH2HQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUwMzk1NQ==", "bodyText": "The update API supports changing the machine type, so why does this require a delete?", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526503955", "createdAt": "2020-11-19T00:03:40Z", "author": {"login": "calbach"}, "path": "ui/src/app/utils/runtime-utils.tsx", "diffHunk": "@@ -1,29 +1,219 @@\n import {runtimeApi} from 'app/services/swagger-fetch-clients';\n-import {switchCase} from 'app/utils';\n-import { withAsyncErrorHandling } from 'app/utils';\n-import {\n-  ExceededActionCountError,\n-  LeoRuntimeInitializationAbortedError,\n-  LeoRuntimeInitializer,\n-} from 'app/utils/leo-runtime-initializer';\n-import {\n-  compoundRuntimeOpStore,\n-  markCompoundRuntimeOperationCompleted,\n-  registerCompoundRuntimeOperation,\n-  runtimeStore,\n-  useStore\n-} from 'app/utils/stores';\n-import {Runtime, RuntimeStatus} from 'generated/fetch';\n+import {switchCase, withAsyncErrorHandling} from 'app/utils';\n+import {ExceededActionCountError, LeoRuntimeInitializationAbortedError, LeoRuntimeInitializer, } from 'app/utils/leo-runtime-initializer';\n+import {compoundRuntimeOpStore, markCompoundRuntimeOperationCompleted, registerCompoundRuntimeOperation, runtimeStore, useStore} from 'app/utils/stores';\n+import {DataprocConfig, Runtime, RuntimeStatus} from 'generated/fetch';\n import * as fp from 'lodash/fp';\n \n import * as React from 'react';\n+import {ComputeType, findMachineByName, Machine} from './machines';\n \n const {useState, useEffect} = React;\n \n export enum RuntimeStatusRequest {\n   Delete = 'Delete'\n }\n \n+export interface RuntimeDiff {\n+  desc: string;\n+  previous: string;\n+  new: string;\n+  differenceType: RuntimeDiffState;\n+}\n+\n+export enum RuntimeDiffState {\n+  NO_CHANGE,\n+  CAN_UPDATE,\n+  NEEDS_DELETE\n+}\n+\n+export interface RuntimeConfig {\n+  computeType: ComputeType;\n+  machine: Machine;\n+  diskSize: number;\n+  dataprocConfig: DataprocConfig;\n+}\n+\n+const compareComputeTypes = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  return {\n+    desc: 'Change compute type',\n+    previous: oldRuntime.computeType,\n+    new: newRuntime.computeType,\n+    differenceType: oldRuntime.computeType === newRuntime.computeType ?\n+      RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE\n+  };\n+};\n+\n+const compareMachineCpu = (oldRuntime: RuntimeConfig, newRuntime: RuntimeConfig): RuntimeDiff => {\n+  const oldCpu = oldRuntime.machine.cpu;\n+  const newCpu = newRuntime.machine.cpu;\n+\n+  return {\n+    desc: (newCpu < oldCpu ?  'Decrease' : 'Increase') + ' number of CPUs',\n+    previous: oldCpu.toString(),\n+    new: newCpu.toString(),\n+    differenceType: oldCpu === newCpu ? RuntimeDiffState.NO_CHANGE : RuntimeDiffState.NEEDS_DELETE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTIzNDQ5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowNDoxM1rOH2IftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowNDoxM1rOH2IftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNDM0MQ==", "bodyText": "The create button from the Create panel is supposed to close the panel (by invoking onUpdate), may have been lost in the merge conflicts", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526524341", "createdAt": "2020-11-19T01:04:13Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -653,12 +666,136 @@ export const RuntimePanel = fp.flow(\n     return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n   }\n \n+  const createRuntimeRequest = (runtime: RuntimeConfig) => {\n+    const runtimeRequest: Runtime = runtime.computeType === ComputeType.Dataproc ? {\n+      dataprocConfig: {\n+        ...runtime.dataprocConfig,\n+        masterMachineType: runtime.machine.name,\n+        masterDiskSize: runtime.diskSize\n+      }\n+    } : runtime.computeType === ComputeType.Standard ? {\n+      gceConfig: {\n+        machineType: runtime.machine.name,\n+        diskSize: runtime.diskSize\n+      }\n+    } : null;\n+\n+    // If the selected runtime matches a preset, plumb through the appropriate configuration type.\n+    runtimeRequest.configurationType = fp.get(\n+      'runtimeTemplate.configurationType',\n+      fp.find(\n+        ({runtimeTemplate}) => presetEquals(runtimeRequest, runtimeTemplate),\n+        runtimePresets)\n+    ) || RuntimeConfigurationType.UserOverride;\n+\n+    return runtimeRequest;\n+  };\n+\n+  const renderUpdateButton = () => {\n+    return <Button\n+      aria-label='Update'\n+      disabled={\n+        !runtimeChanged\n+        // Casting to RuntimeStatus here because it can't easily be done at the destructuring level\n+        // where we get 'status' from\n+        || ![RuntimeStatus.Running, RuntimeStatus.Stopped].includes(status as RuntimeStatus)\n+      }\n+      onClick={() => {\n+        setRequestedRuntime(createRuntimeRequest(newRuntimeConfig));\n+        onUpdate();\n+      }}>\n+      Update\n+    </Button>;\n+  };\n+\n+  const renderCreateButton = () => {\n+    return <Button\n+      aria-label='Create'\n+      onClick={() => {\n+        setRequestedRuntime(createRuntimeRequest(newRuntimeConfig));\n+      }}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 421}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTI0NTE5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowOTowNlrOH2Il5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMTowOTowNlrOH2Il5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNTkyNg==", "bodyText": "Huh - wait. This actually isn't clear in the mocks, but I thought that the confirmation page would appear in all cases (whether this was an update OR a delete/recreate). I don't feel strongly on this though, did you discuss this point with Lou / Shimon already?", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526525926", "createdAt": "2020-11-19T01:09:06Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -775,16 +878,12 @@ export const RuntimePanel = fp.flow(\n            aria-label='Delete Environment'\n            disabled={![RuntimeStatus.Running, RuntimeStatus.Stopped].includes(status as RuntimeStatus)}\n            onClick={() => setPanelContent(PanelContent.Delete)}>Delete Environment</Link>\n-         <UpdateRuntimeButton\n-           disabled={shouldDisableUpdateButton(runtimeChanged, runtimeExists, status)}\n-           label={runtimeExists ? 'Update' : 'Create'}\n-           onUpdate={() => onUpdate()}\n-           selectedDiskSize={selectedDiskSize}\n-           selectedMachineType={selectedMachineType}\n-           selectedDataprocConfig={selectedDataprocConfig}\n-           setRequestedRuntime={(value) => setRequestedRuntime(value)}\n-         />\n+         {!runtimeExists ? renderCreateButton() :\n+           runtimeDiffs.map(diff => diff.differenceType).includes(RuntimeDiffState.NEEDS_DELETE) ? renderNextButton() :", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 615}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTI0NzU2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMToxMDowNFrOH2InPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMToxMDowNFrOH2InPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNjI2OQ==", "bodyText": "This can be a follow-up, but I would have thought that the message here would be different in the update vs delete case.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526526269", "createdAt": "2020-11-19T01:10:04Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -739,33 +856,19 @@ export const RuntimePanel = fp.flow(\n                      style={{width: '10rem'}}\n                      options={[ComputeType.Standard, ComputeType.Dataproc]}\n                      value={selectedCompute || ComputeType.Standard}\n-                     onChange={({value}) => setSelectedCompute(value)}\n+                     onChange={({value}) => {setSelectedCompute(value); }}\n                      />\n            {\n              selectedCompute === ComputeType.Dataproc &&\n-             <DataProcConfigSelector onChange={setSelectedDataprocConfig} dataprocConfig={selectedDataprocConfig} />\n+             <DataProcConfigSelector onChange={config => setSelectedDataprocConfig(config)} dataprocConfig={selectedDataprocConfig} />\n            }\n          </FlexColumn>\n        </div>\n-       {runtimeExists && runtimeChanged && <FlexRow\n-           style={{\n-             alignItems: 'center',\n-             backgroundColor: colorWithWhiteness(colors.warning, .9),\n-             border: `1px solid ${colors.warning}`,\n-             borderRadius: '5px',\n-             color: colors.dark,\n-             marginTop: '.5rem',\n-             padding: '.5rem 0px'\n-           }}\n-       >\n-         <ClrIcon\n-             style={{color: colors.warning, marginLeft: '.5rem'}}\n-             shape={'warning-standard'}\n-             size={16}\n-             class={'is-solid'}\n-         />\n-         <div style={{marginLeft: '.5rem'}}>You've made changes that require recreating your environment to take effect.</div>\n-       </FlexRow>}\n+       {runtimeExists && runtimeChanged &&\n+         <WarningMessage>\n+            <div>You've made changes that require recreating your environment to take effect.</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 595}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMTI1MDk2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMToxMTo0MlrOH2IpSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwMToxMTo0MlrOH2IpSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjUyNjc5NQ==", "bodyText": "This needs to be disabled inthe same manner as the update button", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r526526795", "createdAt": "2020-11-19T01:11:42Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -653,12 +666,136 @@ export const RuntimePanel = fp.flow(\n     return <Spinner style={{width: '100%', marginTop: '5rem'}}/>;\n   }\n \n+  const createRuntimeRequest = (runtime: RuntimeConfig) => {\n+    const runtimeRequest: Runtime = runtime.computeType === ComputeType.Dataproc ? {\n+      dataprocConfig: {\n+        ...runtime.dataprocConfig,\n+        masterMachineType: runtime.machine.name,\n+        masterDiskSize: runtime.diskSize\n+      }\n+    } : runtime.computeType === ComputeType.Standard ? {\n+      gceConfig: {\n+        machineType: runtime.machine.name,\n+        diskSize: runtime.diskSize\n+      }\n+    } : null;\n+\n+    // If the selected runtime matches a preset, plumb through the appropriate configuration type.\n+    runtimeRequest.configurationType = fp.get(\n+      'runtimeTemplate.configurationType',\n+      fp.find(\n+        ({runtimeTemplate}) => presetEquals(runtimeRequest, runtimeTemplate),\n+        runtimePresets)\n+    ) || RuntimeConfigurationType.UserOverride;\n+\n+    return runtimeRequest;\n+  };\n+\n+  const renderUpdateButton = () => {\n+    return <Button\n+      aria-label='Update'\n+      disabled={\n+        !runtimeChanged\n+        // Casting to RuntimeStatus here because it can't easily be done at the destructuring level\n+        // where we get 'status' from\n+        || ![RuntimeStatus.Running, RuntimeStatus.Stopped].includes(status as RuntimeStatus)\n+      }\n+      onClick={() => {\n+        setRequestedRuntime(createRuntimeRequest(newRuntimeConfig));\n+        onUpdate();\n+      }}>\n+      Update\n+    </Button>;\n+  };\n+\n+  const renderCreateButton = () => {\n+    return <Button\n+      aria-label='Create'\n+      onClick={() => {\n+        setRequestedRuntime(createRuntimeRequest(newRuntimeConfig));\n+      }}>\n+      Create\n+    </Button>;\n+  };\n+\n+  const renderNextButton = () => {\n+    return <Button", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff556625e2655f54d362f69f3e53c28b49d8a3"}, "originalPosition": 427}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTIwNTQ5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToyOTo1OVrOH2uU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToyOTo1OVrOH2uU6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0NDE3MQ==", "bodyText": "This selector seems too broad, and could be broken by unrelated future changes on the page - would try to grab a uniquely identifiable parent element (via id or data-test-id) to ensure this is looking at the right thing. Can do repeated .find()s if needed, e.g. wrapper.find({'data-test-id': 'some-parent-id'}).find(TextColumn)", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r527144171", "createdAt": "2020-11-19T19:29:59Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -365,106 +363,117 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should disable the Update button if there are no changes and runtime is running', async() => {\n+  it('should disable the Next button if there are no changes and runtime is running', async() => {\n     const wrapper = await component();\n \n-    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeTruthy();\n   });\n \n-  it('should enable the Update button if there are updates that do not require delete and runtime is running - increase disk size', async() => {\n+  it('should warn user about reboot if there are updates that require one - increase disk size', async() => {\n     const wrapper = await component();\n \n     await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n-    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+    mustClickButton(wrapper, 'Next');\n+\n+    expect(wrapper.find(TextColumn).text().includes('reboot')).toBeTruthy();\n   });\n \n-  it('should enable the Update button if there are updates that do not require delete and runtime is running - number of workers', async() => {\n+  it('should warn user about reboot if there are updates that require one - number of workers', async() => {\n     const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig(), configurationType: RuntimeConfigurationType.UserOverride};\n-    act(() => {runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace}); });\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n \n     const wrapper = await component();\n \n     await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n+    mustClickButton(wrapper, 'Next');\n \n-    expect(wrapper.find(Button).find({'aria-label': 'Update'}).first().prop('disabled')).toBeFalsy();\n+    expect(wrapper.find(TextColumn).text().includes('reboot')).toBeTruthy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "396c9930f4d74779d97c71e428d18160b395801c"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTIyMjUzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozNDoyNFrOH2ufJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozNDoyNFrOH2ufJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0Njc4OA==", "bodyText": "nit: does this need to be function? Seems like it would suffice to just make this a const", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r527146788", "createdAt": "2020-11-19T19:34:24Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -691,15 +763,17 @@ export const RuntimePanel = fp.flow(\n     return runtimeRequest;\n   };\n \n+  const runtimeCanBeUpdated = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "396c9930f4d74779d97c71e428d18160b395801c"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTIyOTMzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozNTo1NVrOH2ui8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozNTo1NVrOH2ui8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0Nzc2MA==", "bodyText": "nit: avoid relative", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r527147760", "createdAt": "2020-11-19T19:35:55Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -18,6 +18,7 @@ import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n import {cdrVersionListResponse, CdrVersionsStubVariables} from 'testing/stubs/cdr-versions-api-stub';\n import {defaultDataprocConfig, RuntimeApiStub} from 'testing/stubs/runtime-api-stub';\n import {WorkspacesApiStub, workspaceStubs} from 'testing/stubs/workspaces-api-stub';\n+import {TextColumn} from '../../components/text-column';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "396c9930f4d74779d97c71e428d18160b395801c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTQ5MjI3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0OTozMlrOH2xD0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMDo0OTozMlrOH2xD0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE4ODk0Nw==", "bodyText": "In the mocks, the text of the update button is different in each case. Fine if this gets tracked in the follow-up ticket though.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r527188947", "createdAt": "2020-11-19T20:49:32Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -590,6 +590,78 @@ const CreatePanel = ({creatorFreeCreditsRemaining, preset, profile, setPanelCont\n   </div>;\n };\n \n+const ConfirmUpdatePanel = ({initialRuntimeConfig, newRuntimeConfig, onCancel, updateButton}) => {\n+  const runtimeDiffs = getRuntimeConfigDiffs(initialRuntimeConfig, newRuntimeConfig);\n+  const needsDelete = runtimeDiffs.map(diff => diff.differenceType).includes(RuntimeDiffState.NEEDS_DELETE);\n+\n+  return <React.Fragment>\n+    <div style={styles.controlSection}>\n+      <h3 style={{...styles.baseHeader, ...styles.sectionHeader, marginTop: '.1rem', marginBottom: '.2rem'}}>Editing your environment</h3>\n+      <div>\n+        You're about to apply the following changes to your environment:\n+      </div>\n+      <ul>\n+        {runtimeDiffs.map(diff =>\n+          <li>\n+            {diff.desc} from <b>{diff.previous}</b> to <b>{diff.new}</b>\n+          </li>\n+        )}\n+      </ul>\n+      <FlexRow style={{marginTop: '.5rem'}}>\n+        <div style={{marginRight: '1rem'}}>\n+          <b style={{fontSize: 10}}>New estimated cost</b>\n+          <div style={{...styles.costPredictor, padding: '.25rem .5rem'}}>\n+            <CostEstimator runtimeParameters={newRuntimeConfig}/>\n+          </div>\n+        </div>\n+        <div>\n+          <b style={{fontSize: 10}}>Previous estimated cost</b>\n+          <div style={{...styles.costPredictor,\n+            padding: '.25rem .5rem',\n+            color: 'grey',\n+            backgroundColor: ''}}>\n+            <CostEstimator runtimeParameters={initialRuntimeConfig} costTextColor='grey'/>\n+          </div>\n+        </div>\n+      </FlexRow>\n+    </div>\n+\n+    <WarningMessage>\n+      <TextColumn>\n+        {needsDelete ? <React.Fragment>\n+          <div>\n+            You've made changes that can only take effect upon deletion and re-creation of\n+            your cloud environment.\n+          </div>\n+          <div style={{marginTop: '0.5rem'}}>\n+            Any in-memory state and local file modifications will be erased. Data stored in\n+            workspace buckets is never affected by changes to your cloud environment.\n+          </div>\n+        </React.Fragment> : <React.Fragment>\n+          <div>\n+            These changes require a reboot of your environment to take effect.\n+          </div>\n+          <div style={{marginTop: '0.5rem'}}>\n+            Any in-memory state will be erased, but local file modifications will be preserved.\n+            Data stored in workspace buckets is never affected by changes to your cloud environment.\n+          </div>\n+        </React.Fragment>}\n+      </TextColumn>\n+    </WarningMessage>\n+\n+    <FlexRow style={{justifyContent: 'flex-end', marginTop: '.75rem'}}>\n+      <Button\n+        type='secondary'\n+        aria-label='Cancel'\n+        style={{marginRight: '.25rem'}}\n+        onClick={onCancel}>\n+        Cancel\n+      </Button>\n+      {updateButton}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "396c9930f4d74779d97c71e428d18160b395801c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTkxMzE0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjo0NToyMlrOH21Dkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjo0NToyMlrOH21Dkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1NDQxOQ==", "bodyText": "console.error                                                                                                                                                                        \n    Warning: Each child in a list should have a unique \"key\" prop", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r527254419", "createdAt": "2020-11-19T22:45:22Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.tsx", "diffHunk": "@@ -551,49 +590,83 @@ const CreatePanel = ({creatorFreeCreditsRemaining, preset, profile, setPanelCont\n   </div>;\n };\n \n-const UpdateRuntimeButton = ({\n-   disabled,\n-   label,\n-   onUpdate,\n-   selectedDiskSize,\n-   selectedMachineType,\n-   selectedDataprocConfig,\n-   setRequestedRuntime\n-}) => {\n-  return <Button\n-      aria-label={label}\n-      disabled={disabled}\n-      onClick={() => {\n-        const runtimeToRequest: Runtime = selectedDataprocConfig ? {\n-          dataprocConfig: {\n-            ...selectedDataprocConfig,\n-            masterMachineType: selectedMachineType,\n-            masterDiskSize: selectedDiskSize\n-          }\n-        } : {\n-          gceConfig: {\n-            machineType: selectedMachineType,\n-            diskSize: selectedDiskSize\n-          }\n-        };\n-\n-        // If the selected runtime matches a preset, plumb through the appropriate configuration type.\n-        runtimeToRequest.configurationType = fp.get(\n-          'runtimeTemplate.configurationType',\n-          fp.find(\n-            ({runtimeTemplate}) => presetEquals(runtimeToRequest, runtimeTemplate),\n-            runtimePresets)\n-        ) || RuntimeConfigurationType.UserOverride;\n-        setRequestedRuntime(runtimeToRequest);\n-        onUpdate();\n-      }}>{label}</Button>;\n+const ConfirmUpdatePanel = ({initialRuntimeConfig, newRuntimeConfig, onCancel, updateButton}) => {\n+  const runtimeDiffs = getRuntimeConfigDiffs(initialRuntimeConfig, newRuntimeConfig);\n+  const needsDelete = runtimeDiffs.map(diff => diff.differenceType).includes(RuntimeDiffState.NEEDS_DELETE);\n+\n+  return <React.Fragment>\n+    <div style={styles.controlSection}>\n+      <h3 style={{...styles.baseHeader, ...styles.sectionHeader, marginTop: '.1rem', marginBottom: '.2rem'}}>Editing your environment</h3>\n+      <div>\n+        You're about to apply the following changes to your environment:\n+      </div>\n+      <ul>\n+        {runtimeDiffs.map(diff =>\n+          <li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "396c9930f4d74779d97c71e428d18160b395801c"}, "originalPosition": 341}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTkxODQzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjo0NzowMlrOH21Gtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjo0NzowMlrOH21Gtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1NTIyMg==", "bodyText": "Missing await on all these, leading to act() warnings in the test:\nconsole.error                                                                                                                                                                        \n    Warning: You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one.", "url": "https://github.com/all-of-us/workbench/pull/4281#discussion_r527255222", "createdAt": "2020-11-19T22:47:02Z", "author": {"login": "calbach"}, "path": "ui/src/app/pages/analysis/runtime-panel.spec.tsx", "diffHunk": "@@ -348,30 +363,190 @@ describe('RuntimePanel', () => {\n     expect(memoryOptions.map(m => m.text())).toEqual(['7.2', '30', '52']);\n   });\n \n-  it('should toggle the disabled state of the update button when the configuration changes', async() => {\n+  it('should disable the Next button if there are no changes and runtime is running', async() => {\n     const wrapper = await component();\n \n-    const updateButton = () => wrapper.find(Button).find({'aria-label': 'Update'}).first();\n-    // Initial state: n1-standard-4, 4 CPU 15 RAM\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(Button).find({'aria-label': 'Next'}).first().prop('disabled')).toBeTruthy();\n+  });\n \n-    await pickMainCpu(wrapper, 8);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+  it('should warn user about reboot if there are updates that require one - increase disk size', async() => {\n+    const wrapper = await component();\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) + 10);\n+    mustClickButton(wrapper, 'Next');\n+\n+    expect(wrapper.find(TextColumn).text().includes('reboot')).toBeTruthy();\n+  });\n+\n+  it('should warn user about reboot if there are updates that require one - number of workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig(), configurationType: RuntimeConfigurationType.UserOverride};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickNumWorkers(wrapper, getNumWorkers(wrapper) + 2);\n+    mustClickButton(wrapper, 'Next');\n+\n+    expect(wrapper.find(TextColumn).text().includes('reboot')).toBeTruthy();\n+  });\n+\n+  it('should warn user about reboot if there are updates that require one - number of preemptible workers', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickNumPreemptibleWorkers(wrapper, getNumPreemptibleWorkers(wrapper) + 2);\n+    mustClickButton(wrapper, 'Next');\n+\n+    expect(wrapper.find(TextColumn).text().includes('reboot')).toBeTruthy();\n+  });\n+\n+  it('should warn user about reboot if there are updates that require one - CPU', async() => {\n+    const wrapper = await component();\n+\n+    await pickMainCpu(wrapper, getMainCpu(wrapper) + 4);\n+    mustClickButton(wrapper, 'Next');\n \n-    await pickMainCpu(wrapper, 4);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(TextColumn).text().includes('reboot')).toBeTruthy();\n+  });\n+\n+  it('should warn user about reboot if there are updates that require one - Memory', async() => {\n+    const wrapper = await component();\n \n+    // 15 GB -> 26 GB\n     await pickMainRam(wrapper, 26);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+    mustClickButton(wrapper, 'Next');\n \n-    await pickMainRam(wrapper, 15);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(TextColumn).text().includes('reboot')).toBeTruthy();\n+  });\n+\n+  it('should warn user about deletion if there are updates that require one - Compute Type', async() => {\n+    const wrapper = await component();\n \n     await pickComputeType(wrapper, ComputeType.Dataproc);\n-    expect(updateButton().prop('disabled')).toBeFalsy();\n+    mustClickButton(wrapper, 'Next');\n \n-    await pickComputeType(wrapper, ComputeType.Standard);\n-    expect(updateButton().prop('disabled')).toBeTruthy();\n+    expect(wrapper.find(TextColumn).text().includes('deletion')).toBeTruthy();\n+  });\n+\n+  it('should warn user about deletion if there are updates that require one - Decrease Disk', async() => {\n+    const wrapper = await component();\n+\n+    await pickMainDiskSize(wrapper, getMainDiskSize(wrapper) - 5);\n+    mustClickButton(wrapper, 'Next');\n+\n+    expect(wrapper.find(TextColumn).text().includes('deletion')).toBeTruthy();\n+  });\n+\n+  it('should warn the user about deletion if there are updates that require one - Worker CPU', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    // 4 -> 8\n+    await pickWorkerCpu(wrapper, 8);\n+    mustClickButton(wrapper, 'Next');\n+\n+    expect(wrapper.find(TextColumn).text().includes('deletion')).toBeTruthy();\n+  });\n+\n+  it('should warn the user about deletion if there are updates that require one - Worker RAM', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    // 15 -> 26\n+    await pickWorkerRam(wrapper, 26);\n+    mustClickButton(wrapper, 'Next');\n+\n+    expect(wrapper.find(TextColumn).text().includes('deletion')).toBeTruthy();\n+  });\n+\n+  it('should warn the user about deletion if there are updates that require one - Worker Disk', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+    await pickWorkerDiskSize(wrapper, getWorkerDiskSize(wrapper) + 10);\n+    mustClickButton(wrapper, 'Next');\n+\n+    expect(wrapper.find(TextColumn).text().includes('deletion')).toBeTruthy();\n+  });\n+\n+  it('should retain original inputs when hitting cancel from the Confirm panel', async() => {\n+    const runtime = {...runtimeApiStub.runtime, gceConfig: null, dataprocConfig: defaultDataprocConfig()};\n+    runtimeStore.set({runtime: runtime, workspaceNamespace: workspaceStubs[0].namespace});\n+\n+    const wrapper = await component();\n+\n+    await pickMainDiskSize(wrapper, 75);\n+    await pickMainCpu(wrapper, 8);\n+    await pickMainRam(wrapper, 30);\n+    await pickWorkerCpu(wrapper, 16);\n+    await pickWorkerRam(wrapper, 60);\n+    await pickNumPreemptibleWorkers(wrapper, 3);\n+    await pickNumWorkers(wrapper, 5);\n+    await pickWorkerDiskSize(wrapper, 100);\n+\n+    mustClickButton(wrapper, 'Next');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "396c9930f4d74779d97c71e428d18160b395801c"}, "originalPosition": 438}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3735, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}