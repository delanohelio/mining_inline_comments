{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyMTgwNDAz", "number": 4057, "title": "[RW-5576][RISK=NO]  UI: Update concept set UI - duplicate shopping cart function", "bodyText": "PR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-09-24T04:48:43Z", "url": "https://github.com/all-of-us/workbench/pull/4057", "merged": true, "mergeCommit": {"oid": "96aef9d2edcc77a5cf8d90425cfa2d338200b6f5"}, "closed": true, "closedAt": "2020-09-29T14:59:07Z", "author": {"login": "NehaBroad"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdL5wKkAH2gAyNDkyMTgwNDAzOjFjNWI4MTFlN2Y4NDkwNjQzMWFmZjI4NTUyNTM5ZDRjZDljODFhNTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNgaO8AFqTQ5ODA4NTYyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1c5b811e7f84906431aff28552539d4cd9c81a56", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/1c5b811e7f84906431aff28552539d4cd9c81a56", "committedDate": "2020-09-24T04:47:36Z", "message": "Concept Set Shopping Cart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2365bc4a5809eb6ccf69f467f994002cbb92df98", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/2365bc4a5809eb6ccf69f467f994002cbb92df98", "committedDate": "2020-09-24T04:59:01Z", "message": "Update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6451e994053cd2ccbb4d15d2da07ed8f78e31d99", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/6451e994053cd2ccbb4d15d2da07ed8f78e31d99", "committedDate": "2020-09-24T05:03:55Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a661fc13994b54e89496a44a163e9572f65a093f", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/a661fc13994b54e89496a44a163e9572f65a093f", "committedDate": "2020-09-24T05:11:35Z", "message": "Lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a9332094b7edd25fba91ac8e8fc93454022fa9c", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/4a9332094b7edd25fba91ac8e8fc93454022fa9c", "committedDate": "2020-09-24T05:14:41Z", "message": "Variable Name change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NzQ3Nzg0", "url": "https://github.com/all-of-us/workbench/pull/4057#pullrequestreview-495747784", "createdAt": "2020-09-24T16:27:16Z", "commit": {"oid": "4a9332094b7edd25fba91ac8e8fc93454022fa9c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyNzoxN1rOHXi-fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjo1ODoxMlrOHXkKWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ1MjM1MA==", "bodyText": "Can you set cursor: 'pointer' for the plus icon and opacity: 0.4 for the check icon to match CB?", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r494452350", "createdAt": "2020-09-24T16:27:17Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-table-v2.tsx", "diffHunk": "@@ -0,0 +1,462 @@\n+import {Link} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, withCurrentConcept} from 'app/utils';\n+import {currentConceptStore} from 'app/utils/navigation';\n+import {Concept, Domain} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Column} from 'primereact/column';\n+import {DataTable} from 'primereact/datatable';\n+import {Growl} from 'primereact/growl';\n+import * as React from 'react';\n+\n+function formatCounts(concept: any) {\n+  if (concept.countValue) {\n+    concept.countValue = concept.countValue.toLocaleString();\n+  }\n+  return concept;\n+}\n+\n+const styles = reactStyles({\n+  growl: {\n+    position: 'absolute',\n+    right: '3rem',\n+    top: '3rem'\n+  },\n+  datatable: {\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`,\n+    borderBottomLeftRadius: '3px',\n+    borderBottomRightRadius: '3px',\n+    marginBottom: '1rem'\n+  },\n+  headerStyle: {\n+    color: colors.primary,\n+    textAlign: 'left',\n+    border: 0,\n+  },\n+  colStyle: {\n+    color: colors.primary,\n+    lineHeight: '0.5rem',\n+    border: 0,\n+    borderTop: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`\n+  },\n+  akaText: {\n+    minWidth: '150px',\n+    maxWidth: '150px',\n+    fontStyle: 'italic',\n+    color: colors.primary\n+  },\n+  akaIcon: {\n+    marginLeft: 10,\n+    verticalAlign: 'middle',\n+    color: colorWithWhiteness(colors.accent, 0.5)\n+  },\n+  highlighted: {\n+    color: colorWithWhiteness(colors.success, -0.4),\n+    backgroundColor: colorWithWhiteness(colors.success, 0.7),\n+    padding: '0 0.25rem',\n+    display: 'inline-block'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  selectDiv: {\n+    width: '6%',\n+    float: 'left',\n+    lineHeight: '0.6rem',\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    margin: '5px'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4,\n+  }\n+});\n+const css = `\n+  .p-growl {\n+    position: sticky;\n+  }\n+  .p-growl.p-growl-topright {\n+    height: 1rem;\n+    width: 6.4rem;\n+    line-height: 0.7rem;\n+  }\n+  .p-growl .p-growl-item-container .p-growl-item .p-growl-image {\n+    font-size: 1rem !important;\n+    margin-top: 0.19rem\n+  }\n+  .p-growl-item-container:after {\n+    content:\"\";\n+    position: absolute;\n+    left: 97.5%;\n+    top: 0.1rem;\n+    width: 0px;\n+    height: 0px;\n+    border-top: 0.5rem solid transparent;\n+    border-left: 0.5rem solid ` + colorWithWhiteness(colors.success, 0.6) + `;\n+    border-bottom: 0.5rem solid transparent;\n+  }\n+  .p-growl-item-container {\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+  }\n+  .p-growl-item {\n+    padding: 0rem !important;\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+    margin-left: 0.3rem;\n+  }\n+  .p-growl-message {\n+    margin-left: 0.5em\n+  }\n+  .p-growl-details {\n+    margin-top: 0.1rem;\n+  }\n+ `;\n+\n+const domainColumns = [\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: null,\n+    field: 'conceptName',\n+    header: 'Name',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptName'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'conceptCode',\n+    header: 'Code',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptCode'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'vocabularyId',\n+    header: 'Vocabulary',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'countValue',\n+    header: 'Participant Count',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  }\n+];\n+\n+interface SynonymsObjectState {\n+  seeMore: boolean;\n+  willOverflow: boolean;\n+}\n+const ROWS_TO_DISPLAY = 20;\n+export class SynonymsObject extends React.Component<{}, SynonymsObjectState> {\n+  domElement: any;\n+  constructor(props) {\n+    super(props);\n+    this.state = {seeMore: false, willOverflow: false};\n+  }\n+\n+  componentDidMount() {\n+    const element = this.domElement;\n+    const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\n+        element.offsetWidth < element.scrollWidth;\n+    this.setState({willOverflow: hasOverflowingChildren});\n+  }\n+\n+  render() {\n+    const {seeMore, willOverflow} = this.state;\n+    return <div style={{display: 'flex', paddingLeft: '2rem'}}>\n+      <div style={styles.akaText}>\n+        Also Known As:\n+        <TooltipTrigger\n+            side='top'\n+            content='Medical concepts often have alternative names and descriptions,\n+            known as synonyms. Alternate names and descriptions, if available, are\n+            listed for each medical concept'>\n+          <ClrIcon\n+              shape='info-standard'\n+              className='is-solid'\n+              style={styles.akaIcon}\n+          />\n+        </TooltipTrigger>\n+      </div>\n+      <div style={{\n+        textOverflow: seeMore ? 'auto' : 'hidden',\n+        width: `calc(100% - ${willOverflow ? '250' : '180'}px)`,\n+        fontSize: '12px',\n+        height: seeMore ? 'auto' : '1rem',\n+        overflow: seeMore ? 'auto' : 'hidden'\n+      }} ref={el => this.domElement = el}>\n+        {this.props.children}\n+      </div>\n+      {willOverflow ?\n+          <Link onClick={() => this.setState({seeMore: !seeMore})}>\n+            {seeMore ? 'See Less' : 'See More...'}\n+          </Link> : null}\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  concepts: any[];\n+  domain: Domain;\n+  loading: boolean;\n+  onSelectConcepts: Function;\n+  placeholderValue: string;\n+  reactKey: string;\n+  searchTerm?: string;\n+  selectedConcepts: any[];\n+  error: boolean;\n+  concept: Array<Concept>;\n+}\n+\n+interface State {\n+  first: number;\n+  pageLoading: boolean;\n+  growlVisible: boolean;\n+  selectedConcepts: Array<Concept>;\n+  showBanner: boolean;\n+  selectAll: boolean;\n+  totalRecords: number;\n+  pageConcepts: any[];\n+  tableRef: any;\n+}\n+\n+export const ConceptTableV2  = withCurrentConcept()(class extends React.Component<Props, State> {\n+  growl: any;\n+  growlTimer: NodeJS.Timer;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      selectedConcepts: props.selectedConcepts,\n+      showBanner: false,\n+      selectAll: false,\n+      pageLoading: false,\n+      growlVisible: false,\n+      first: 0,\n+      totalRecords: props.concepts.length,\n+      pageConcepts: props.concepts.slice(0, 10).map(formatCounts),\n+      tableRef: React.createRef(),\n+    };\n+  }\n+\n+  componentDidUpdate(prevProps) {\n+    if (this.state.selectedConcepts !== this.props.concept) {\n+      this.setState({selectedConcepts: this.props.concept});\n+    }\n+  }\n+\n+  updateSelectedConceptList(selectedConcepts, origin) {\n+    // By default Data table will select all the concepts in the table but since we have first give\n+    // an option to user to select all concepts in a page\n+    // we will just add the the concepts in the page to selected concept list\n+    if (selectedConcepts.length === this.props.concepts.length && origin === 'table') {\n+      const startIndex = this.state.tableRef.current.state.first;\n+      const endIndex = startIndex + ROWS_TO_DISPLAY;\n+      selectedConcepts = fp.uniqBy( 'conceptId', this.state.selectedConcepts\n+          .concat(this.props.concepts.slice(startIndex, endIndex)));\n+      this.setState({showBanner: true});\n+    } else if (selectedConcepts.length < this.props.concepts.length) {\n+      this.setState({showBanner: false});\n+    }\n+    this.setState({selectedConcepts: selectedConcepts});\n+    currentConceptStore.next(selectedConcepts);\n+  }\n+\n+  distinctVocabulary() {\n+    const vocabularyIds = this.props.concepts.map(concept => concept.vocabularyId);\n+    return fp.uniq(vocabularyIds);\n+  }\n+\n+  componentWillReceiveProps(nextProps) {\n+    if ((nextProps.concepts !==  this.props.concepts)) {\n+      if (nextProps.concepts !== this.props.concepts && nextProps.concepts.length > 0 ) {\n+        this.setState({totalRecords: nextProps.concepts.length});\n+      }\n+      currentConceptStore.next(nextProps.selectedConcepts);\n+    }\n+    if (nextProps.reactKey !== this.props.reactKey) {\n+      this.setState({showBanner: false});\n+    }\n+  }\n+\n+  rowExpansionTemplate(data) {\n+    return (<SynonymsObject>\n+      {this.highlightWithSearchTerm(fp.uniq(data.conceptSynonyms).join(', '))}\n+    </SynonymsObject>);\n+  }\n+\n+  highlightWithSearchTerm(stringToHighlight: string) {\n+    const {searchTerm} = this.props;\n+    if (!searchTerm || searchTerm.trim() === '') {\n+      return stringToHighlight;\n+    }\n+    const words: string[] = [];\n+    let searchWords = searchTerm.split(new RegExp(',| '));\n+    searchWords = searchWords\n+        .filter(w => w.length > 0 )\n+        .map(word => word.replace(/[&!^\\/\\\\#,+()$~%.'\":*?<>{}]/g, ''));\n+    const matchString = new RegExp(searchWords.join('|'), 'i');\n+    const matches = stringToHighlight.match(new RegExp(matchString, 'gi'));\n+    const splits = stringToHighlight.split(new RegExp(matchString, 'gi'));\n+    if (matches) {\n+      for (let i = 0; i < matches.length; i++) {\n+        words.push(splits[i], matches[i]);\n+      }\n+      words.push(splits[splits.length - 1]);\n+    }\n+    return words.map((word, w) => <span key={w}\n+                                        style={matchString.test(word.toLowerCase()) ? styles.highlighted : {}}>\n+        {word}\n+      </span>);\n+  }\n+\n+  onPageChange() {\n+    this.setState({showBanner: false});\n+  }\n+\n+  errorMessage() {\n+    return !this.props.error ? false : <div style={styles.error}>\n+      <ClrIcon style={{margin: '0 0.5rem 0 0.25rem'}} className='is-solid' shape='exclamation-triangle' size='22'/>\n+      Sorry, the request cannot be completed. Please try refreshing the page or contact Support in the left hand navigation.\n+    </div>;\n+  }\n+\n+  selectItem(rowData) {\n+    const {selectedConcepts} = this.state;\n+    selectedConcepts.push(rowData);\n+    this.setState({selectedConcepts: selectedConcepts});\n+    this.growl.show({severity: 'success', detail: 'Concept Added', closable: false, life: 2000});\n+    if (!!this.growlTimer) {\n+      clearTimeout(this.growlTimer);\n+    }\n+    // // This is to set style display: 'none' on the growl so it doesn't block the nav icons in the sidebar\n+    this.growlTimer = setTimeout(() => this.setState({growlVisible: false}), 2500);\n+\n+    currentConceptStore.next(selectedConcepts);\n+    this.setState({growlVisible: true});\n+    this.props.onSelectConcepts(selectedConcepts);\n+  }\n+\n+  addTemplate(rowData) {\n+    const index = fp.findIndex(rowData , this.props.concept);\n+    return <div style={styles.selectDiv}>\n+      {index.toString() === '-1'  ? <ClrIcon style={styles.selectIcon}\n+               shape='plus-circle' size='20' onClick={() => this.selectItem(rowData)}/> :\n+        <ClrIcon style={styles.selectIcon} shape='check-circle' size='20'/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9332094b7edd25fba91ac8e8fc93454022fa9c"}, "originalPosition": 366}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2MTA2NA==", "bodyText": "nit: remove double //", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r494461064", "createdAt": "2020-09-24T16:41:07Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-table-v2.tsx", "diffHunk": "@@ -0,0 +1,462 @@\n+import {Link} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, withCurrentConcept} from 'app/utils';\n+import {currentConceptStore} from 'app/utils/navigation';\n+import {Concept, Domain} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Column} from 'primereact/column';\n+import {DataTable} from 'primereact/datatable';\n+import {Growl} from 'primereact/growl';\n+import * as React from 'react';\n+\n+function formatCounts(concept: any) {\n+  if (concept.countValue) {\n+    concept.countValue = concept.countValue.toLocaleString();\n+  }\n+  return concept;\n+}\n+\n+const styles = reactStyles({\n+  growl: {\n+    position: 'absolute',\n+    right: '3rem',\n+    top: '3rem'\n+  },\n+  datatable: {\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`,\n+    borderBottomLeftRadius: '3px',\n+    borderBottomRightRadius: '3px',\n+    marginBottom: '1rem'\n+  },\n+  headerStyle: {\n+    color: colors.primary,\n+    textAlign: 'left',\n+    border: 0,\n+  },\n+  colStyle: {\n+    color: colors.primary,\n+    lineHeight: '0.5rem',\n+    border: 0,\n+    borderTop: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`\n+  },\n+  akaText: {\n+    minWidth: '150px',\n+    maxWidth: '150px',\n+    fontStyle: 'italic',\n+    color: colors.primary\n+  },\n+  akaIcon: {\n+    marginLeft: 10,\n+    verticalAlign: 'middle',\n+    color: colorWithWhiteness(colors.accent, 0.5)\n+  },\n+  highlighted: {\n+    color: colorWithWhiteness(colors.success, -0.4),\n+    backgroundColor: colorWithWhiteness(colors.success, 0.7),\n+    padding: '0 0.25rem',\n+    display: 'inline-block'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  selectDiv: {\n+    width: '6%',\n+    float: 'left',\n+    lineHeight: '0.6rem',\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    margin: '5px'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4,\n+  }\n+});\n+const css = `\n+  .p-growl {\n+    position: sticky;\n+  }\n+  .p-growl.p-growl-topright {\n+    height: 1rem;\n+    width: 6.4rem;\n+    line-height: 0.7rem;\n+  }\n+  .p-growl .p-growl-item-container .p-growl-item .p-growl-image {\n+    font-size: 1rem !important;\n+    margin-top: 0.19rem\n+  }\n+  .p-growl-item-container:after {\n+    content:\"\";\n+    position: absolute;\n+    left: 97.5%;\n+    top: 0.1rem;\n+    width: 0px;\n+    height: 0px;\n+    border-top: 0.5rem solid transparent;\n+    border-left: 0.5rem solid ` + colorWithWhiteness(colors.success, 0.6) + `;\n+    border-bottom: 0.5rem solid transparent;\n+  }\n+  .p-growl-item-container {\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+  }\n+  .p-growl-item {\n+    padding: 0rem !important;\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+    margin-left: 0.3rem;\n+  }\n+  .p-growl-message {\n+    margin-left: 0.5em\n+  }\n+  .p-growl-details {\n+    margin-top: 0.1rem;\n+  }\n+ `;\n+\n+const domainColumns = [\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: null,\n+    field: 'conceptName',\n+    header: 'Name',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptName'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'conceptCode',\n+    header: 'Code',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptCode'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'vocabularyId',\n+    header: 'Vocabulary',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'countValue',\n+    header: 'Participant Count',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  }\n+];\n+\n+interface SynonymsObjectState {\n+  seeMore: boolean;\n+  willOverflow: boolean;\n+}\n+const ROWS_TO_DISPLAY = 20;\n+export class SynonymsObject extends React.Component<{}, SynonymsObjectState> {\n+  domElement: any;\n+  constructor(props) {\n+    super(props);\n+    this.state = {seeMore: false, willOverflow: false};\n+  }\n+\n+  componentDidMount() {\n+    const element = this.domElement;\n+    const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\n+        element.offsetWidth < element.scrollWidth;\n+    this.setState({willOverflow: hasOverflowingChildren});\n+  }\n+\n+  render() {\n+    const {seeMore, willOverflow} = this.state;\n+    return <div style={{display: 'flex', paddingLeft: '2rem'}}>\n+      <div style={styles.akaText}>\n+        Also Known As:\n+        <TooltipTrigger\n+            side='top'\n+            content='Medical concepts often have alternative names and descriptions,\n+            known as synonyms. Alternate names and descriptions, if available, are\n+            listed for each medical concept'>\n+          <ClrIcon\n+              shape='info-standard'\n+              className='is-solid'\n+              style={styles.akaIcon}\n+          />\n+        </TooltipTrigger>\n+      </div>\n+      <div style={{\n+        textOverflow: seeMore ? 'auto' : 'hidden',\n+        width: `calc(100% - ${willOverflow ? '250' : '180'}px)`,\n+        fontSize: '12px',\n+        height: seeMore ? 'auto' : '1rem',\n+        overflow: seeMore ? 'auto' : 'hidden'\n+      }} ref={el => this.domElement = el}>\n+        {this.props.children}\n+      </div>\n+      {willOverflow ?\n+          <Link onClick={() => this.setState({seeMore: !seeMore})}>\n+            {seeMore ? 'See Less' : 'See More...'}\n+          </Link> : null}\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  concepts: any[];\n+  domain: Domain;\n+  loading: boolean;\n+  onSelectConcepts: Function;\n+  placeholderValue: string;\n+  reactKey: string;\n+  searchTerm?: string;\n+  selectedConcepts: any[];\n+  error: boolean;\n+  concept: Array<Concept>;\n+}\n+\n+interface State {\n+  first: number;\n+  pageLoading: boolean;\n+  growlVisible: boolean;\n+  selectedConcepts: Array<Concept>;\n+  showBanner: boolean;\n+  selectAll: boolean;\n+  totalRecords: number;\n+  pageConcepts: any[];\n+  tableRef: any;\n+}\n+\n+export const ConceptTableV2  = withCurrentConcept()(class extends React.Component<Props, State> {\n+  growl: any;\n+  growlTimer: NodeJS.Timer;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      selectedConcepts: props.selectedConcepts,\n+      showBanner: false,\n+      selectAll: false,\n+      pageLoading: false,\n+      growlVisible: false,\n+      first: 0,\n+      totalRecords: props.concepts.length,\n+      pageConcepts: props.concepts.slice(0, 10).map(formatCounts),\n+      tableRef: React.createRef(),\n+    };\n+  }\n+\n+  componentDidUpdate(prevProps) {\n+    if (this.state.selectedConcepts !== this.props.concept) {\n+      this.setState({selectedConcepts: this.props.concept});\n+    }\n+  }\n+\n+  updateSelectedConceptList(selectedConcepts, origin) {\n+    // By default Data table will select all the concepts in the table but since we have first give\n+    // an option to user to select all concepts in a page\n+    // we will just add the the concepts in the page to selected concept list\n+    if (selectedConcepts.length === this.props.concepts.length && origin === 'table') {\n+      const startIndex = this.state.tableRef.current.state.first;\n+      const endIndex = startIndex + ROWS_TO_DISPLAY;\n+      selectedConcepts = fp.uniqBy( 'conceptId', this.state.selectedConcepts\n+          .concat(this.props.concepts.slice(startIndex, endIndex)));\n+      this.setState({showBanner: true});\n+    } else if (selectedConcepts.length < this.props.concepts.length) {\n+      this.setState({showBanner: false});\n+    }\n+    this.setState({selectedConcepts: selectedConcepts});\n+    currentConceptStore.next(selectedConcepts);\n+  }\n+\n+  distinctVocabulary() {\n+    const vocabularyIds = this.props.concepts.map(concept => concept.vocabularyId);\n+    return fp.uniq(vocabularyIds);\n+  }\n+\n+  componentWillReceiveProps(nextProps) {\n+    if ((nextProps.concepts !==  this.props.concepts)) {\n+      if (nextProps.concepts !== this.props.concepts && nextProps.concepts.length > 0 ) {\n+        this.setState({totalRecords: nextProps.concepts.length});\n+      }\n+      currentConceptStore.next(nextProps.selectedConcepts);\n+    }\n+    if (nextProps.reactKey !== this.props.reactKey) {\n+      this.setState({showBanner: false});\n+    }\n+  }\n+\n+  rowExpansionTemplate(data) {\n+    return (<SynonymsObject>\n+      {this.highlightWithSearchTerm(fp.uniq(data.conceptSynonyms).join(', '))}\n+    </SynonymsObject>);\n+  }\n+\n+  highlightWithSearchTerm(stringToHighlight: string) {\n+    const {searchTerm} = this.props;\n+    if (!searchTerm || searchTerm.trim() === '') {\n+      return stringToHighlight;\n+    }\n+    const words: string[] = [];\n+    let searchWords = searchTerm.split(new RegExp(',| '));\n+    searchWords = searchWords\n+        .filter(w => w.length > 0 )\n+        .map(word => word.replace(/[&!^\\/\\\\#,+()$~%.'\":*?<>{}]/g, ''));\n+    const matchString = new RegExp(searchWords.join('|'), 'i');\n+    const matches = stringToHighlight.match(new RegExp(matchString, 'gi'));\n+    const splits = stringToHighlight.split(new RegExp(matchString, 'gi'));\n+    if (matches) {\n+      for (let i = 0; i < matches.length; i++) {\n+        words.push(splits[i], matches[i]);\n+      }\n+      words.push(splits[splits.length - 1]);\n+    }\n+    return words.map((word, w) => <span key={w}\n+                                        style={matchString.test(word.toLowerCase()) ? styles.highlighted : {}}>\n+        {word}\n+      </span>);\n+  }\n+\n+  onPageChange() {\n+    this.setState({showBanner: false});\n+  }\n+\n+  errorMessage() {\n+    return !this.props.error ? false : <div style={styles.error}>\n+      <ClrIcon style={{margin: '0 0.5rem 0 0.25rem'}} className='is-solid' shape='exclamation-triangle' size='22'/>\n+      Sorry, the request cannot be completed. Please try refreshing the page or contact Support in the left hand navigation.\n+    </div>;\n+  }\n+\n+  selectItem(rowData) {\n+    const {selectedConcepts} = this.state;\n+    selectedConcepts.push(rowData);\n+    this.setState({selectedConcepts: selectedConcepts});\n+    this.growl.show({severity: 'success', detail: 'Concept Added', closable: false, life: 2000});\n+    if (!!this.growlTimer) {\n+      clearTimeout(this.growlTimer);\n+    }\n+    // // This is to set style display: 'none' on the growl so it doesn't block the nav icons in the sidebar", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9332094b7edd25fba91ac8e8fc93454022fa9c"}, "originalPosition": 353}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2MzY5MA==", "bodyText": "Is there any reason to keep any selectionModes? Seems like we won't need them in the new UI.", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r494463690", "createdAt": "2020-09-24T16:45:09Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-table-v2.tsx", "diffHunk": "@@ -0,0 +1,462 @@\n+import {Link} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, withCurrentConcept} from 'app/utils';\n+import {currentConceptStore} from 'app/utils/navigation';\n+import {Concept, Domain} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Column} from 'primereact/column';\n+import {DataTable} from 'primereact/datatable';\n+import {Growl} from 'primereact/growl';\n+import * as React from 'react';\n+\n+function formatCounts(concept: any) {\n+  if (concept.countValue) {\n+    concept.countValue = concept.countValue.toLocaleString();\n+  }\n+  return concept;\n+}\n+\n+const styles = reactStyles({\n+  growl: {\n+    position: 'absolute',\n+    right: '3rem',\n+    top: '3rem'\n+  },\n+  datatable: {\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`,\n+    borderBottomLeftRadius: '3px',\n+    borderBottomRightRadius: '3px',\n+    marginBottom: '1rem'\n+  },\n+  headerStyle: {\n+    color: colors.primary,\n+    textAlign: 'left',\n+    border: 0,\n+  },\n+  colStyle: {\n+    color: colors.primary,\n+    lineHeight: '0.5rem',\n+    border: 0,\n+    borderTop: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`\n+  },\n+  akaText: {\n+    minWidth: '150px',\n+    maxWidth: '150px',\n+    fontStyle: 'italic',\n+    color: colors.primary\n+  },\n+  akaIcon: {\n+    marginLeft: 10,\n+    verticalAlign: 'middle',\n+    color: colorWithWhiteness(colors.accent, 0.5)\n+  },\n+  highlighted: {\n+    color: colorWithWhiteness(colors.success, -0.4),\n+    backgroundColor: colorWithWhiteness(colors.success, 0.7),\n+    padding: '0 0.25rem',\n+    display: 'inline-block'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  selectDiv: {\n+    width: '6%',\n+    float: 'left',\n+    lineHeight: '0.6rem',\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    margin: '5px'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4,\n+  }\n+});\n+const css = `\n+  .p-growl {\n+    position: sticky;\n+  }\n+  .p-growl.p-growl-topright {\n+    height: 1rem;\n+    width: 6.4rem;\n+    line-height: 0.7rem;\n+  }\n+  .p-growl .p-growl-item-container .p-growl-item .p-growl-image {\n+    font-size: 1rem !important;\n+    margin-top: 0.19rem\n+  }\n+  .p-growl-item-container:after {\n+    content:\"\";\n+    position: absolute;\n+    left: 97.5%;\n+    top: 0.1rem;\n+    width: 0px;\n+    height: 0px;\n+    border-top: 0.5rem solid transparent;\n+    border-left: 0.5rem solid ` + colorWithWhiteness(colors.success, 0.6) + `;\n+    border-bottom: 0.5rem solid transparent;\n+  }\n+  .p-growl-item-container {\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+  }\n+  .p-growl-item {\n+    padding: 0rem !important;\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+    margin-left: 0.3rem;\n+  }\n+  .p-growl-message {\n+    margin-left: 0.5em\n+  }\n+  .p-growl-details {\n+    margin-top: 0.1rem;\n+  }\n+ `;\n+\n+const domainColumns = [\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: null,\n+    field: 'conceptName',\n+    header: 'Name',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptName'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'conceptCode',\n+    header: 'Code',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptCode'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'vocabularyId',\n+    header: 'Vocabulary',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'countValue',\n+    header: 'Participant Count',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  }\n+];\n+\n+interface SynonymsObjectState {\n+  seeMore: boolean;\n+  willOverflow: boolean;\n+}\n+const ROWS_TO_DISPLAY = 20;\n+export class SynonymsObject extends React.Component<{}, SynonymsObjectState> {\n+  domElement: any;\n+  constructor(props) {\n+    super(props);\n+    this.state = {seeMore: false, willOverflow: false};\n+  }\n+\n+  componentDidMount() {\n+    const element = this.domElement;\n+    const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\n+        element.offsetWidth < element.scrollWidth;\n+    this.setState({willOverflow: hasOverflowingChildren});\n+  }\n+\n+  render() {\n+    const {seeMore, willOverflow} = this.state;\n+    return <div style={{display: 'flex', paddingLeft: '2rem'}}>\n+      <div style={styles.akaText}>\n+        Also Known As:\n+        <TooltipTrigger\n+            side='top'\n+            content='Medical concepts often have alternative names and descriptions,\n+            known as synonyms. Alternate names and descriptions, if available, are\n+            listed for each medical concept'>\n+          <ClrIcon\n+              shape='info-standard'\n+              className='is-solid'\n+              style={styles.akaIcon}\n+          />\n+        </TooltipTrigger>\n+      </div>\n+      <div style={{\n+        textOverflow: seeMore ? 'auto' : 'hidden',\n+        width: `calc(100% - ${willOverflow ? '250' : '180'}px)`,\n+        fontSize: '12px',\n+        height: seeMore ? 'auto' : '1rem',\n+        overflow: seeMore ? 'auto' : 'hidden'\n+      }} ref={el => this.domElement = el}>\n+        {this.props.children}\n+      </div>\n+      {willOverflow ?\n+          <Link onClick={() => this.setState({seeMore: !seeMore})}>\n+            {seeMore ? 'See Less' : 'See More...'}\n+          </Link> : null}\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  concepts: any[];\n+  domain: Domain;\n+  loading: boolean;\n+  onSelectConcepts: Function;\n+  placeholderValue: string;\n+  reactKey: string;\n+  searchTerm?: string;\n+  selectedConcepts: any[];\n+  error: boolean;\n+  concept: Array<Concept>;\n+}\n+\n+interface State {\n+  first: number;\n+  pageLoading: boolean;\n+  growlVisible: boolean;\n+  selectedConcepts: Array<Concept>;\n+  showBanner: boolean;\n+  selectAll: boolean;\n+  totalRecords: number;\n+  pageConcepts: any[];\n+  tableRef: any;\n+}\n+\n+export const ConceptTableV2  = withCurrentConcept()(class extends React.Component<Props, State> {\n+  growl: any;\n+  growlTimer: NodeJS.Timer;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      selectedConcepts: props.selectedConcepts,\n+      showBanner: false,\n+      selectAll: false,\n+      pageLoading: false,\n+      growlVisible: false,\n+      first: 0,\n+      totalRecords: props.concepts.length,\n+      pageConcepts: props.concepts.slice(0, 10).map(formatCounts),\n+      tableRef: React.createRef(),\n+    };\n+  }\n+\n+  componentDidUpdate(prevProps) {\n+    if (this.state.selectedConcepts !== this.props.concept) {\n+      this.setState({selectedConcepts: this.props.concept});\n+    }\n+  }\n+\n+  updateSelectedConceptList(selectedConcepts, origin) {\n+    // By default Data table will select all the concepts in the table but since we have first give\n+    // an option to user to select all concepts in a page\n+    // we will just add the the concepts in the page to selected concept list\n+    if (selectedConcepts.length === this.props.concepts.length && origin === 'table') {\n+      const startIndex = this.state.tableRef.current.state.first;\n+      const endIndex = startIndex + ROWS_TO_DISPLAY;\n+      selectedConcepts = fp.uniqBy( 'conceptId', this.state.selectedConcepts\n+          .concat(this.props.concepts.slice(startIndex, endIndex)));\n+      this.setState({showBanner: true});\n+    } else if (selectedConcepts.length < this.props.concepts.length) {\n+      this.setState({showBanner: false});\n+    }\n+    this.setState({selectedConcepts: selectedConcepts});\n+    currentConceptStore.next(selectedConcepts);\n+  }\n+\n+  distinctVocabulary() {\n+    const vocabularyIds = this.props.concepts.map(concept => concept.vocabularyId);\n+    return fp.uniq(vocabularyIds);\n+  }\n+\n+  componentWillReceiveProps(nextProps) {\n+    if ((nextProps.concepts !==  this.props.concepts)) {\n+      if (nextProps.concepts !== this.props.concepts && nextProps.concepts.length > 0 ) {\n+        this.setState({totalRecords: nextProps.concepts.length});\n+      }\n+      currentConceptStore.next(nextProps.selectedConcepts);\n+    }\n+    if (nextProps.reactKey !== this.props.reactKey) {\n+      this.setState({showBanner: false});\n+    }\n+  }\n+\n+  rowExpansionTemplate(data) {\n+    return (<SynonymsObject>\n+      {this.highlightWithSearchTerm(fp.uniq(data.conceptSynonyms).join(', '))}\n+    </SynonymsObject>);\n+  }\n+\n+  highlightWithSearchTerm(stringToHighlight: string) {\n+    const {searchTerm} = this.props;\n+    if (!searchTerm || searchTerm.trim() === '') {\n+      return stringToHighlight;\n+    }\n+    const words: string[] = [];\n+    let searchWords = searchTerm.split(new RegExp(',| '));\n+    searchWords = searchWords\n+        .filter(w => w.length > 0 )\n+        .map(word => word.replace(/[&!^\\/\\\\#,+()$~%.'\":*?<>{}]/g, ''));\n+    const matchString = new RegExp(searchWords.join('|'), 'i');\n+    const matches = stringToHighlight.match(new RegExp(matchString, 'gi'));\n+    const splits = stringToHighlight.split(new RegExp(matchString, 'gi'));\n+    if (matches) {\n+      for (let i = 0; i < matches.length; i++) {\n+        words.push(splits[i], matches[i]);\n+      }\n+      words.push(splits[splits.length - 1]);\n+    }\n+    return words.map((word, w) => <span key={w}\n+                                        style={matchString.test(word.toLowerCase()) ? styles.highlighted : {}}>\n+        {word}\n+      </span>);\n+  }\n+\n+  onPageChange() {\n+    this.setState({showBanner: false});\n+  }\n+\n+  errorMessage() {\n+    return !this.props.error ? false : <div style={styles.error}>\n+      <ClrIcon style={{margin: '0 0.5rem 0 0.25rem'}} className='is-solid' shape='exclamation-triangle' size='22'/>\n+      Sorry, the request cannot be completed. Please try refreshing the page or contact Support in the left hand navigation.\n+    </div>;\n+  }\n+\n+  selectItem(rowData) {\n+    const {selectedConcepts} = this.state;\n+    selectedConcepts.push(rowData);\n+    this.setState({selectedConcepts: selectedConcepts});\n+    this.growl.show({severity: 'success', detail: 'Concept Added', closable: false, life: 2000});\n+    if (!!this.growlTimer) {\n+      clearTimeout(this.growlTimer);\n+    }\n+    // // This is to set style display: 'none' on the growl so it doesn't block the nav icons in the sidebar\n+    this.growlTimer = setTimeout(() => this.setState({growlVisible: false}), 2500);\n+\n+    currentConceptStore.next(selectedConcepts);\n+    this.setState({growlVisible: true});\n+    this.props.onSelectConcepts(selectedConcepts);\n+  }\n+\n+  addTemplate(rowData) {\n+    const index = fp.findIndex(rowData , this.props.concept);\n+    return <div style={styles.selectDiv}>\n+      {index.toString() === '-1'  ? <ClrIcon style={styles.selectIcon}\n+               shape='plus-circle' size='20' onClick={() => this.selectItem(rowData)}/> :\n+        <ClrIcon style={styles.selectIcon} shape='check-circle' size='20'/>\n+      }\n+     </div>;\n+  }\n+\n+  renderColumns() {\n+    const {concepts, domain} = this.props;\n+    const surveyColumns = [\n+      {\n+        bodyStyle: styles.colStyle,\n+        className: null,\n+        field: concepts.length && !!concepts[0].question ? 'question' : 'conceptName',\n+        header: 'Question',\n+        headerStyle: styles.headerStyle,\n+        selectionMode: null,\n+        testId: 'question'\n+      },\n+      {\n+        bodyStyle: styles.colStyle,\n+        className: 'divider',\n+        field: 'countValue',\n+        header: 'Participant Count',\n+        headerStyle: {...styles.headerStyle, width: '20%'},\n+        selectionMode: null,\n+        testId: null\n+      }\n+    ];\n+    return (domain === Domain.SURVEY ? surveyColumns : domainColumns).map((col, c) => <Column\n+        bodyStyle={col.bodyStyle}\n+        className={col.className}\n+        field={col.field}\n+        header={col.header}\n+        headerStyle={col.headerStyle}\n+        key={c}\n+       // selectionMode={col.selectionMode}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9332094b7edd25fba91ac8e8fc93454022fa9c"}, "originalPosition": 400}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ2NjAyMA==", "bodyText": "Can we move these styles into the css var so we only need one style tag?", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r494466020", "createdAt": "2020-09-24T16:48:56Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-table-v2.tsx", "diffHunk": "@@ -0,0 +1,462 @@\n+import {Link} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, withCurrentConcept} from 'app/utils';\n+import {currentConceptStore} from 'app/utils/navigation';\n+import {Concept, Domain} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Column} from 'primereact/column';\n+import {DataTable} from 'primereact/datatable';\n+import {Growl} from 'primereact/growl';\n+import * as React from 'react';\n+\n+function formatCounts(concept: any) {\n+  if (concept.countValue) {\n+    concept.countValue = concept.countValue.toLocaleString();\n+  }\n+  return concept;\n+}\n+\n+const styles = reactStyles({\n+  growl: {\n+    position: 'absolute',\n+    right: '3rem',\n+    top: '3rem'\n+  },\n+  datatable: {\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`,\n+    borderBottomLeftRadius: '3px',\n+    borderBottomRightRadius: '3px',\n+    marginBottom: '1rem'\n+  },\n+  headerStyle: {\n+    color: colors.primary,\n+    textAlign: 'left',\n+    border: 0,\n+  },\n+  colStyle: {\n+    color: colors.primary,\n+    lineHeight: '0.5rem',\n+    border: 0,\n+    borderTop: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`\n+  },\n+  akaText: {\n+    minWidth: '150px',\n+    maxWidth: '150px',\n+    fontStyle: 'italic',\n+    color: colors.primary\n+  },\n+  akaIcon: {\n+    marginLeft: 10,\n+    verticalAlign: 'middle',\n+    color: colorWithWhiteness(colors.accent, 0.5)\n+  },\n+  highlighted: {\n+    color: colorWithWhiteness(colors.success, -0.4),\n+    backgroundColor: colorWithWhiteness(colors.success, 0.7),\n+    padding: '0 0.25rem',\n+    display: 'inline-block'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  selectDiv: {\n+    width: '6%',\n+    float: 'left',\n+    lineHeight: '0.6rem',\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    margin: '5px'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4,\n+  }\n+});\n+const css = `\n+  .p-growl {\n+    position: sticky;\n+  }\n+  .p-growl.p-growl-topright {\n+    height: 1rem;\n+    width: 6.4rem;\n+    line-height: 0.7rem;\n+  }\n+  .p-growl .p-growl-item-container .p-growl-item .p-growl-image {\n+    font-size: 1rem !important;\n+    margin-top: 0.19rem\n+  }\n+  .p-growl-item-container:after {\n+    content:\"\";\n+    position: absolute;\n+    left: 97.5%;\n+    top: 0.1rem;\n+    width: 0px;\n+    height: 0px;\n+    border-top: 0.5rem solid transparent;\n+    border-left: 0.5rem solid ` + colorWithWhiteness(colors.success, 0.6) + `;\n+    border-bottom: 0.5rem solid transparent;\n+  }\n+  .p-growl-item-container {\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+  }\n+  .p-growl-item {\n+    padding: 0rem !important;\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+    margin-left: 0.3rem;\n+  }\n+  .p-growl-message {\n+    margin-left: 0.5em\n+  }\n+  .p-growl-details {\n+    margin-top: 0.1rem;\n+  }\n+ `;\n+\n+const domainColumns = [\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: null,\n+    field: 'conceptName',\n+    header: 'Name',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptName'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'conceptCode',\n+    header: 'Code',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptCode'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'vocabularyId',\n+    header: 'Vocabulary',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'countValue',\n+    header: 'Participant Count',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  }\n+];\n+\n+interface SynonymsObjectState {\n+  seeMore: boolean;\n+  willOverflow: boolean;\n+}\n+const ROWS_TO_DISPLAY = 20;\n+export class SynonymsObject extends React.Component<{}, SynonymsObjectState> {\n+  domElement: any;\n+  constructor(props) {\n+    super(props);\n+    this.state = {seeMore: false, willOverflow: false};\n+  }\n+\n+  componentDidMount() {\n+    const element = this.domElement;\n+    const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\n+        element.offsetWidth < element.scrollWidth;\n+    this.setState({willOverflow: hasOverflowingChildren});\n+  }\n+\n+  render() {\n+    const {seeMore, willOverflow} = this.state;\n+    return <div style={{display: 'flex', paddingLeft: '2rem'}}>\n+      <div style={styles.akaText}>\n+        Also Known As:\n+        <TooltipTrigger\n+            side='top'\n+            content='Medical concepts often have alternative names and descriptions,\n+            known as synonyms. Alternate names and descriptions, if available, are\n+            listed for each medical concept'>\n+          <ClrIcon\n+              shape='info-standard'\n+              className='is-solid'\n+              style={styles.akaIcon}\n+          />\n+        </TooltipTrigger>\n+      </div>\n+      <div style={{\n+        textOverflow: seeMore ? 'auto' : 'hidden',\n+        width: `calc(100% - ${willOverflow ? '250' : '180'}px)`,\n+        fontSize: '12px',\n+        height: seeMore ? 'auto' : '1rem',\n+        overflow: seeMore ? 'auto' : 'hidden'\n+      }} ref={el => this.domElement = el}>\n+        {this.props.children}\n+      </div>\n+      {willOverflow ?\n+          <Link onClick={() => this.setState({seeMore: !seeMore})}>\n+            {seeMore ? 'See Less' : 'See More...'}\n+          </Link> : null}\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  concepts: any[];\n+  domain: Domain;\n+  loading: boolean;\n+  onSelectConcepts: Function;\n+  placeholderValue: string;\n+  reactKey: string;\n+  searchTerm?: string;\n+  selectedConcepts: any[];\n+  error: boolean;\n+  concept: Array<Concept>;\n+}\n+\n+interface State {\n+  first: number;\n+  pageLoading: boolean;\n+  growlVisible: boolean;\n+  selectedConcepts: Array<Concept>;\n+  showBanner: boolean;\n+  selectAll: boolean;\n+  totalRecords: number;\n+  pageConcepts: any[];\n+  tableRef: any;\n+}\n+\n+export const ConceptTableV2  = withCurrentConcept()(class extends React.Component<Props, State> {\n+  growl: any;\n+  growlTimer: NodeJS.Timer;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      selectedConcepts: props.selectedConcepts,\n+      showBanner: false,\n+      selectAll: false,\n+      pageLoading: false,\n+      growlVisible: false,\n+      first: 0,\n+      totalRecords: props.concepts.length,\n+      pageConcepts: props.concepts.slice(0, 10).map(formatCounts),\n+      tableRef: React.createRef(),\n+    };\n+  }\n+\n+  componentDidUpdate(prevProps) {\n+    if (this.state.selectedConcepts !== this.props.concept) {\n+      this.setState({selectedConcepts: this.props.concept});\n+    }\n+  }\n+\n+  updateSelectedConceptList(selectedConcepts, origin) {\n+    // By default Data table will select all the concepts in the table but since we have first give\n+    // an option to user to select all concepts in a page\n+    // we will just add the the concepts in the page to selected concept list\n+    if (selectedConcepts.length === this.props.concepts.length && origin === 'table') {\n+      const startIndex = this.state.tableRef.current.state.first;\n+      const endIndex = startIndex + ROWS_TO_DISPLAY;\n+      selectedConcepts = fp.uniqBy( 'conceptId', this.state.selectedConcepts\n+          .concat(this.props.concepts.slice(startIndex, endIndex)));\n+      this.setState({showBanner: true});\n+    } else if (selectedConcepts.length < this.props.concepts.length) {\n+      this.setState({showBanner: false});\n+    }\n+    this.setState({selectedConcepts: selectedConcepts});\n+    currentConceptStore.next(selectedConcepts);\n+  }\n+\n+  distinctVocabulary() {\n+    const vocabularyIds = this.props.concepts.map(concept => concept.vocabularyId);\n+    return fp.uniq(vocabularyIds);\n+  }\n+\n+  componentWillReceiveProps(nextProps) {\n+    if ((nextProps.concepts !==  this.props.concepts)) {\n+      if (nextProps.concepts !== this.props.concepts && nextProps.concepts.length > 0 ) {\n+        this.setState({totalRecords: nextProps.concepts.length});\n+      }\n+      currentConceptStore.next(nextProps.selectedConcepts);\n+    }\n+    if (nextProps.reactKey !== this.props.reactKey) {\n+      this.setState({showBanner: false});\n+    }\n+  }\n+\n+  rowExpansionTemplate(data) {\n+    return (<SynonymsObject>\n+      {this.highlightWithSearchTerm(fp.uniq(data.conceptSynonyms).join(', '))}\n+    </SynonymsObject>);\n+  }\n+\n+  highlightWithSearchTerm(stringToHighlight: string) {\n+    const {searchTerm} = this.props;\n+    if (!searchTerm || searchTerm.trim() === '') {\n+      return stringToHighlight;\n+    }\n+    const words: string[] = [];\n+    let searchWords = searchTerm.split(new RegExp(',| '));\n+    searchWords = searchWords\n+        .filter(w => w.length > 0 )\n+        .map(word => word.replace(/[&!^\\/\\\\#,+()$~%.'\":*?<>{}]/g, ''));\n+    const matchString = new RegExp(searchWords.join('|'), 'i');\n+    const matches = stringToHighlight.match(new RegExp(matchString, 'gi'));\n+    const splits = stringToHighlight.split(new RegExp(matchString, 'gi'));\n+    if (matches) {\n+      for (let i = 0; i < matches.length; i++) {\n+        words.push(splits[i], matches[i]);\n+      }\n+      words.push(splits[splits.length - 1]);\n+    }\n+    return words.map((word, w) => <span key={w}\n+                                        style={matchString.test(word.toLowerCase()) ? styles.highlighted : {}}>\n+        {word}\n+      </span>);\n+  }\n+\n+  onPageChange() {\n+    this.setState({showBanner: false});\n+  }\n+\n+  errorMessage() {\n+    return !this.props.error ? false : <div style={styles.error}>\n+      <ClrIcon style={{margin: '0 0.5rem 0 0.25rem'}} className='is-solid' shape='exclamation-triangle' size='22'/>\n+      Sorry, the request cannot be completed. Please try refreshing the page or contact Support in the left hand navigation.\n+    </div>;\n+  }\n+\n+  selectItem(rowData) {\n+    const {selectedConcepts} = this.state;\n+    selectedConcepts.push(rowData);\n+    this.setState({selectedConcepts: selectedConcepts});\n+    this.growl.show({severity: 'success', detail: 'Concept Added', closable: false, life: 2000});\n+    if (!!this.growlTimer) {\n+      clearTimeout(this.growlTimer);\n+    }\n+    // // This is to set style display: 'none' on the growl so it doesn't block the nav icons in the sidebar\n+    this.growlTimer = setTimeout(() => this.setState({growlVisible: false}), 2500);\n+\n+    currentConceptStore.next(selectedConcepts);\n+    this.setState({growlVisible: true});\n+    this.props.onSelectConcepts(selectedConcepts);\n+  }\n+\n+  addTemplate(rowData) {\n+    const index = fp.findIndex(rowData , this.props.concept);\n+    return <div style={styles.selectDiv}>\n+      {index.toString() === '-1'  ? <ClrIcon style={styles.selectIcon}\n+               shape='plus-circle' size='20' onClick={() => this.selectItem(rowData)}/> :\n+        <ClrIcon style={styles.selectIcon} shape='check-circle' size='20'/>\n+      }\n+     </div>;\n+  }\n+\n+  renderColumns() {\n+    const {concepts, domain} = this.props;\n+    const surveyColumns = [\n+      {\n+        bodyStyle: styles.colStyle,\n+        className: null,\n+        field: concepts.length && !!concepts[0].question ? 'question' : 'conceptName',\n+        header: 'Question',\n+        headerStyle: styles.headerStyle,\n+        selectionMode: null,\n+        testId: 'question'\n+      },\n+      {\n+        bodyStyle: styles.colStyle,\n+        className: 'divider',\n+        field: 'countValue',\n+        header: 'Participant Count',\n+        headerStyle: {...styles.headerStyle, width: '20%'},\n+        selectionMode: null,\n+        testId: null\n+      }\n+    ];\n+    return (domain === Domain.SURVEY ? surveyColumns : domainColumns).map((col, c) => <Column\n+        bodyStyle={col.bodyStyle}\n+        className={col.className}\n+        field={col.field}\n+        header={col.header}\n+        headerStyle={col.headerStyle}\n+        key={c}\n+       // selectionMode={col.selectionMode}\n+        data-test-id={col.testId}\n+    />);\n+  }\n+\n+  render() {\n+    const {selectedConcepts, tableRef} = this.state;\n+    const {concepts, error, placeholderValue, loading, reactKey} = this.props;\n+    return <React.Fragment>\n+      <style>\n+        {css}\n+      </style>\n+      <Growl ref={(el) => this.growl = el} style={!this.state.growlVisible ? {...styles.growl, display: 'none'} : styles.growl}/>\n+      <div data-test-id='conceptTable' key={reactKey} style={{position: 'relative', minHeight: '8rem'}}>\n+      <style>\n+        {`\n+          body .p-datatable .p-datatable-tbody > tr:nth-child(even),\n+          body .p-datatable .p-datatable-tbody > tr:nth-child(even).p-highlight,\n+          body .p-datatable .p-datatable-tbody > .p-datatable-row.p-highlight {\n+            background: ${colors.white};\n+          }\n+          body .p-datatable .p-datatable-tbody > tr:not(.p-datatable-row) > td {\n+            border: 0;\n+          }\n+          body .p-datatable > .p-paginator {\n+            background: ${colors.white};\n+            border: 0;\n+            color: ${colors.primary};\n+          }\n+          body .p-datatable .p-datatable-footer {\n+            background: ${colors.white};\n+            border: 0;\n+          }\n+          .p-datatable-scrollable-body {\n+            max-height: 18rem !important;\n+        `}\n+      </style>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9332094b7edd25fba91ac8e8fc93454022fa9c"}, "originalPosition": 436}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ3MTc3MA==", "bodyText": "Looks like there's a double border at the top of the first column.", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r494471770", "createdAt": "2020-09-24T16:58:12Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-table-v2.tsx", "diffHunk": "@@ -0,0 +1,462 @@\n+import {Link} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, withCurrentConcept} from 'app/utils';\n+import {currentConceptStore} from 'app/utils/navigation';\n+import {Concept, Domain} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Column} from 'primereact/column';\n+import {DataTable} from 'primereact/datatable';\n+import {Growl} from 'primereact/growl';\n+import * as React from 'react';\n+\n+function formatCounts(concept: any) {\n+  if (concept.countValue) {\n+    concept.countValue = concept.countValue.toLocaleString();\n+  }\n+  return concept;\n+}\n+\n+const styles = reactStyles({\n+  growl: {\n+    position: 'absolute',\n+    right: '3rem',\n+    top: '3rem'\n+  },\n+  datatable: {\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`,\n+    borderBottomLeftRadius: '3px',\n+    borderBottomRightRadius: '3px',\n+    marginBottom: '1rem'\n+  },\n+  headerStyle: {\n+    color: colors.primary,\n+    textAlign: 'left',\n+    border: 0,\n+  },\n+  colStyle: {\n+    color: colors.primary,\n+    lineHeight: '0.5rem',\n+    border: 0,\n+    borderTop: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`\n+  },\n+  akaText: {\n+    minWidth: '150px',\n+    maxWidth: '150px',\n+    fontStyle: 'italic',\n+    color: colors.primary\n+  },\n+  akaIcon: {\n+    marginLeft: 10,\n+    verticalAlign: 'middle',\n+    color: colorWithWhiteness(colors.accent, 0.5)\n+  },\n+  highlighted: {\n+    color: colorWithWhiteness(colors.success, -0.4),\n+    backgroundColor: colorWithWhiteness(colors.success, 0.7),\n+    padding: '0 0.25rem',\n+    display: 'inline-block'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  selectDiv: {\n+    width: '6%',\n+    float: 'left',\n+    lineHeight: '0.6rem',\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    margin: '5px'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4,\n+  }\n+});\n+const css = `\n+  .p-growl {\n+    position: sticky;\n+  }\n+  .p-growl.p-growl-topright {\n+    height: 1rem;\n+    width: 6.4rem;\n+    line-height: 0.7rem;\n+  }\n+  .p-growl .p-growl-item-container .p-growl-item .p-growl-image {\n+    font-size: 1rem !important;\n+    margin-top: 0.19rem\n+  }\n+  .p-growl-item-container:after {\n+    content:\"\";\n+    position: absolute;\n+    left: 97.5%;\n+    top: 0.1rem;\n+    width: 0px;\n+    height: 0px;\n+    border-top: 0.5rem solid transparent;\n+    border-left: 0.5rem solid ` + colorWithWhiteness(colors.success, 0.6) + `;\n+    border-bottom: 0.5rem solid transparent;\n+  }\n+  .p-growl-item-container {\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+  }\n+  .p-growl-item {\n+    padding: 0rem !important;\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+    margin-left: 0.3rem;\n+  }\n+  .p-growl-message {\n+    margin-left: 0.5em\n+  }\n+  .p-growl-details {\n+    margin-top: 0.1rem;\n+  }\n+ `;\n+\n+const domainColumns = [\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: null,\n+    field: 'conceptName',\n+    header: 'Name',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptName'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'conceptCode',\n+    header: 'Code',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: 'conceptCode'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'vocabularyId',\n+    header: 'Vocabulary',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'countValue',\n+    header: 'Participant Count',\n+    headerStyle: styles.headerStyle,\n+    selectionMode: null,\n+    testId: null\n+  }\n+];\n+\n+interface SynonymsObjectState {\n+  seeMore: boolean;\n+  willOverflow: boolean;\n+}\n+const ROWS_TO_DISPLAY = 20;\n+export class SynonymsObject extends React.Component<{}, SynonymsObjectState> {\n+  domElement: any;\n+  constructor(props) {\n+    super(props);\n+    this.state = {seeMore: false, willOverflow: false};\n+  }\n+\n+  componentDidMount() {\n+    const element = this.domElement;\n+    const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\n+        element.offsetWidth < element.scrollWidth;\n+    this.setState({willOverflow: hasOverflowingChildren});\n+  }\n+\n+  render() {\n+    const {seeMore, willOverflow} = this.state;\n+    return <div style={{display: 'flex', paddingLeft: '2rem'}}>\n+      <div style={styles.akaText}>\n+        Also Known As:\n+        <TooltipTrigger\n+            side='top'\n+            content='Medical concepts often have alternative names and descriptions,\n+            known as synonyms. Alternate names and descriptions, if available, are\n+            listed for each medical concept'>\n+          <ClrIcon\n+              shape='info-standard'\n+              className='is-solid'\n+              style={styles.akaIcon}\n+          />\n+        </TooltipTrigger>\n+      </div>\n+      <div style={{\n+        textOverflow: seeMore ? 'auto' : 'hidden',\n+        width: `calc(100% - ${willOverflow ? '250' : '180'}px)`,\n+        fontSize: '12px',\n+        height: seeMore ? 'auto' : '1rem',\n+        overflow: seeMore ? 'auto' : 'hidden'\n+      }} ref={el => this.domElement = el}>\n+        {this.props.children}\n+      </div>\n+      {willOverflow ?\n+          <Link onClick={() => this.setState({seeMore: !seeMore})}>\n+            {seeMore ? 'See Less' : 'See More...'}\n+          </Link> : null}\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  concepts: any[];\n+  domain: Domain;\n+  loading: boolean;\n+  onSelectConcepts: Function;\n+  placeholderValue: string;\n+  reactKey: string;\n+  searchTerm?: string;\n+  selectedConcepts: any[];\n+  error: boolean;\n+  concept: Array<Concept>;\n+}\n+\n+interface State {\n+  first: number;\n+  pageLoading: boolean;\n+  growlVisible: boolean;\n+  selectedConcepts: Array<Concept>;\n+  showBanner: boolean;\n+  selectAll: boolean;\n+  totalRecords: number;\n+  pageConcepts: any[];\n+  tableRef: any;\n+}\n+\n+export const ConceptTableV2  = withCurrentConcept()(class extends React.Component<Props, State> {\n+  growl: any;\n+  growlTimer: NodeJS.Timer;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      selectedConcepts: props.selectedConcepts,\n+      showBanner: false,\n+      selectAll: false,\n+      pageLoading: false,\n+      growlVisible: false,\n+      first: 0,\n+      totalRecords: props.concepts.length,\n+      pageConcepts: props.concepts.slice(0, 10).map(formatCounts),\n+      tableRef: React.createRef(),\n+    };\n+  }\n+\n+  componentDidUpdate(prevProps) {\n+    if (this.state.selectedConcepts !== this.props.concept) {\n+      this.setState({selectedConcepts: this.props.concept});\n+    }\n+  }\n+\n+  updateSelectedConceptList(selectedConcepts, origin) {\n+    // By default Data table will select all the concepts in the table but since we have first give\n+    // an option to user to select all concepts in a page\n+    // we will just add the the concepts in the page to selected concept list\n+    if (selectedConcepts.length === this.props.concepts.length && origin === 'table') {\n+      const startIndex = this.state.tableRef.current.state.first;\n+      const endIndex = startIndex + ROWS_TO_DISPLAY;\n+      selectedConcepts = fp.uniqBy( 'conceptId', this.state.selectedConcepts\n+          .concat(this.props.concepts.slice(startIndex, endIndex)));\n+      this.setState({showBanner: true});\n+    } else if (selectedConcepts.length < this.props.concepts.length) {\n+      this.setState({showBanner: false});\n+    }\n+    this.setState({selectedConcepts: selectedConcepts});\n+    currentConceptStore.next(selectedConcepts);\n+  }\n+\n+  distinctVocabulary() {\n+    const vocabularyIds = this.props.concepts.map(concept => concept.vocabularyId);\n+    return fp.uniq(vocabularyIds);\n+  }\n+\n+  componentWillReceiveProps(nextProps) {\n+    if ((nextProps.concepts !==  this.props.concepts)) {\n+      if (nextProps.concepts !== this.props.concepts && nextProps.concepts.length > 0 ) {\n+        this.setState({totalRecords: nextProps.concepts.length});\n+      }\n+      currentConceptStore.next(nextProps.selectedConcepts);\n+    }\n+    if (nextProps.reactKey !== this.props.reactKey) {\n+      this.setState({showBanner: false});\n+    }\n+  }\n+\n+  rowExpansionTemplate(data) {\n+    return (<SynonymsObject>\n+      {this.highlightWithSearchTerm(fp.uniq(data.conceptSynonyms).join(', '))}\n+    </SynonymsObject>);\n+  }\n+\n+  highlightWithSearchTerm(stringToHighlight: string) {\n+    const {searchTerm} = this.props;\n+    if (!searchTerm || searchTerm.trim() === '') {\n+      return stringToHighlight;\n+    }\n+    const words: string[] = [];\n+    let searchWords = searchTerm.split(new RegExp(',| '));\n+    searchWords = searchWords\n+        .filter(w => w.length > 0 )\n+        .map(word => word.replace(/[&!^\\/\\\\#,+()$~%.'\":*?<>{}]/g, ''));\n+    const matchString = new RegExp(searchWords.join('|'), 'i');\n+    const matches = stringToHighlight.match(new RegExp(matchString, 'gi'));\n+    const splits = stringToHighlight.split(new RegExp(matchString, 'gi'));\n+    if (matches) {\n+      for (let i = 0; i < matches.length; i++) {\n+        words.push(splits[i], matches[i]);\n+      }\n+      words.push(splits[splits.length - 1]);\n+    }\n+    return words.map((word, w) => <span key={w}\n+                                        style={matchString.test(word.toLowerCase()) ? styles.highlighted : {}}>\n+        {word}\n+      </span>);\n+  }\n+\n+  onPageChange() {\n+    this.setState({showBanner: false});\n+  }\n+\n+  errorMessage() {\n+    return !this.props.error ? false : <div style={styles.error}>\n+      <ClrIcon style={{margin: '0 0.5rem 0 0.25rem'}} className='is-solid' shape='exclamation-triangle' size='22'/>\n+      Sorry, the request cannot be completed. Please try refreshing the page or contact Support in the left hand navigation.\n+    </div>;\n+  }\n+\n+  selectItem(rowData) {\n+    const {selectedConcepts} = this.state;\n+    selectedConcepts.push(rowData);\n+    this.setState({selectedConcepts: selectedConcepts});\n+    this.growl.show({severity: 'success', detail: 'Concept Added', closable: false, life: 2000});\n+    if (!!this.growlTimer) {\n+      clearTimeout(this.growlTimer);\n+    }\n+    // // This is to set style display: 'none' on the growl so it doesn't block the nav icons in the sidebar\n+    this.growlTimer = setTimeout(() => this.setState({growlVisible: false}), 2500);\n+\n+    currentConceptStore.next(selectedConcepts);\n+    this.setState({growlVisible: true});\n+    this.props.onSelectConcepts(selectedConcepts);\n+  }\n+\n+  addTemplate(rowData) {\n+    const index = fp.findIndex(rowData , this.props.concept);\n+    return <div style={styles.selectDiv}>\n+      {index.toString() === '-1'  ? <ClrIcon style={styles.selectIcon}\n+               shape='plus-circle' size='20' onClick={() => this.selectItem(rowData)}/> :\n+        <ClrIcon style={styles.selectIcon} shape='check-circle' size='20'/>\n+      }\n+     </div>;\n+  }\n+\n+  renderColumns() {\n+    const {concepts, domain} = this.props;\n+    const surveyColumns = [\n+      {\n+        bodyStyle: styles.colStyle,\n+        className: null,\n+        field: concepts.length && !!concepts[0].question ? 'question' : 'conceptName',\n+        header: 'Question',\n+        headerStyle: styles.headerStyle,\n+        selectionMode: null,\n+        testId: 'question'\n+      },\n+      {\n+        bodyStyle: styles.colStyle,\n+        className: 'divider',\n+        field: 'countValue',\n+        header: 'Participant Count',\n+        headerStyle: {...styles.headerStyle, width: '20%'},\n+        selectionMode: null,\n+        testId: null\n+      }\n+    ];\n+    return (domain === Domain.SURVEY ? surveyColumns : domainColumns).map((col, c) => <Column\n+        bodyStyle={col.bodyStyle}\n+        className={col.className}\n+        field={col.field}\n+        header={col.header}\n+        headerStyle={col.headerStyle}\n+        key={c}\n+       // selectionMode={col.selectionMode}\n+        data-test-id={col.testId}\n+    />);\n+  }\n+\n+  render() {\n+    const {selectedConcepts, tableRef} = this.state;\n+    const {concepts, error, placeholderValue, loading, reactKey} = this.props;\n+    return <React.Fragment>\n+      <style>\n+        {css}\n+      </style>\n+      <Growl ref={(el) => this.growl = el} style={!this.state.growlVisible ? {...styles.growl, display: 'none'} : styles.growl}/>\n+      <div data-test-id='conceptTable' key={reactKey} style={{position: 'relative', minHeight: '8rem'}}>\n+      <style>\n+        {`\n+          body .p-datatable .p-datatable-tbody > tr:nth-child(even),\n+          body .p-datatable .p-datatable-tbody > tr:nth-child(even).p-highlight,\n+          body .p-datatable .p-datatable-tbody > .p-datatable-row.p-highlight {\n+            background: ${colors.white};\n+          }\n+          body .p-datatable .p-datatable-tbody > tr:not(.p-datatable-row) > td {\n+            border: 0;\n+          }\n+          body .p-datatable > .p-paginator {\n+            background: ${colors.white};\n+            border: 0;\n+            color: ${colors.primary};\n+          }\n+          body .p-datatable .p-datatable-footer {\n+            background: ${colors.white};\n+            border: 0;\n+          }\n+          .p-datatable-scrollable-body {\n+            max-height: 18rem !important;\n+        `}\n+      </style>\n+\n+      {loading ? <SpinnerOverlay /> : <DataTable ref={tableRef} emptyMessage={loading || error ? '' : placeholderValue}\n+                                                 style={styles.datatable}\n+                                                 value={error ? null : concepts.map(formatCounts)}\n+                                                 scrollable={true}\n+                                                 scrollHeight='150px'\n+                                                 selection={selectedConcepts}\n+                                                 totalRecords={this.state.totalRecords}\n+                                                 expandedRows={\n+                                                   concepts.filter(concept => concept.conceptSynonyms && concept.conceptSynonyms.length > 0)\n+                                                 }\n+                                                 rowExpansionTemplate={(data) => this.rowExpansionTemplate(data)}\n+                                                 alwaysShowPaginator={false}\n+                                                 paginator={true} rows={ROWS_TO_DISPLAY}\n+                                                 data-test-id='conceptRow'\n+                                                 onValueChange={(value) => this.onPageChange()}\n+                                                 onSelectionChange={e => this.updateSelectedConceptList(e.value, 'table')}\n+                                                 footer={this.errorMessage()}>\n+        <Column header={''} style={{...styles.colStyle, width: '2rem'}} body={(rowData) => this.addTemplate(rowData)}/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a9332094b7edd25fba91ac8e8fc93454022fa9c"}, "originalPosition": 455}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0300e9da3962e9372ead0fbcefee9524d6f2058", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/f0300e9da3962e9372ead0fbcefee9524d6f2058", "committedDate": "2020-09-24T19:20:22Z", "message": "PR Comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTQ0NzEz", "url": "https://github.com/all-of-us/workbench/pull/4057#pullrequestreview-495944713", "createdAt": "2020-09-24T20:56:23Z", "commit": {"oid": "f0300e9da3962e9372ead0fbcefee9524d6f2058"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo1NjoyM1rOHXsVHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowMDoxMFrOHXscbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwNTU5OQ==", "bodyText": "Set cursor: 'pointer' to match CB.", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r494605599", "createdAt": "2020-09-24T20:56:23Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-table-v2.tsx", "diffHunk": "@@ -0,0 +1,453 @@\n+import {Link} from 'app/components/buttons';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, withCurrentConcept} from 'app/utils';\n+import {currentConceptStore} from 'app/utils/navigation';\n+import {Concept, Domain} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Column} from 'primereact/column';\n+import {DataTable} from 'primereact/datatable';\n+import {Growl} from 'primereact/growl';\n+import * as React from 'react';\n+\n+function formatCounts(concept: any) {\n+  if (concept.countValue) {\n+    concept.countValue = concept.countValue.toLocaleString();\n+  }\n+  return concept;\n+}\n+\n+const styles = reactStyles({\n+  growl: {\n+    position: 'absolute',\n+    right: '3rem',\n+    top: '3rem'\n+  },\n+  datatable: {\n+    border: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`,\n+    borderBottomLeftRadius: '3px',\n+    borderBottomRightRadius: '3px',\n+    marginBottom: '1rem'\n+  },\n+  headerStyle: {\n+    color: colors.primary,\n+    textAlign: 'left',\n+    border: 0,\n+  },\n+  colStyle: {\n+    color: colors.primary,\n+    lineHeight: '0.5rem',\n+    border: 0,\n+    borderTop: `1px solid ${colorWithWhiteness(colors.black, 0.8)}`\n+  },\n+  akaText: {\n+    minWidth: '150px',\n+    maxWidth: '150px',\n+    fontStyle: 'italic',\n+    color: colors.primary\n+  },\n+  akaIcon: {\n+    marginLeft: 10,\n+    verticalAlign: 'middle',\n+    color: colorWithWhiteness(colors.accent, 0.5)\n+  },\n+  highlighted: {\n+    color: colorWithWhiteness(colors.success, -0.4),\n+    backgroundColor: colorWithWhiteness(colors.success, 0.7),\n+    padding: '0 0.25rem',\n+    display: 'inline-block'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  selectDiv: {\n+    width: '6%',\n+    float: 'left',\n+    lineHeight: '0.6rem',\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    margin: '5px'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4,\n+  }\n+});\n+const css = `\n+  .p-growl {\n+    position: sticky;\n+  }\n+  .p-growl.p-growl-topright {\n+    height: 1rem;\n+    width: 6.4rem;\n+    line-height: 0.7rem;\n+  }\n+  .p-growl .p-growl-item-container .p-growl-item .p-growl-image {\n+    font-size: 1rem !important;\n+    margin-top: 0.19rem\n+  }\n+  .p-growl-item-container:after {\n+    content:\"\";\n+    position: absolute;\n+    left: 97.5%;\n+    top: 0.1rem;\n+    width: 0px;\n+    height: 0px;\n+    border-top: 0.5rem solid transparent;\n+    border-left: 0.5rem solid ` + colorWithWhiteness(colors.success, 0.6) + `;\n+    border-bottom: 0.5rem solid transparent;\n+  }\n+  .p-growl-item-container {\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+  }\n+  .p-growl-item {\n+    padding: 0rem !important;\n+    background-color: ` + colorWithWhiteness(colors.success, 0.6) + `!important;\n+    margin-left: 0.3rem;\n+  }\n+  .p-growl-message {\n+    margin-left: 0.5em\n+  }\n+  .p-growl-details {\n+    margin-top: 0.1rem;\n+  }\n+ `;\n+\n+const domainColumns = [\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: null,\n+    field: 'conceptName',\n+    header: 'Name',\n+    headerStyle: styles.headerStyle,\n+    testId: 'conceptName'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'conceptCode',\n+    header: 'Code',\n+    headerStyle: styles.headerStyle,\n+    testId: 'conceptCode'\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'vocabularyId',\n+    header: 'Vocabulary',\n+    headerStyle: styles.headerStyle,\n+    testId: null\n+  },\n+  {\n+    bodyStyle: styles.colStyle,\n+    className: 'divider',\n+    field: 'countValue',\n+    header: 'Participant Count',\n+    headerStyle: styles.headerStyle,\n+    testId: null\n+  }\n+];\n+\n+interface SynonymsObjectState {\n+  seeMore: boolean;\n+  willOverflow: boolean;\n+}\n+const ROWS_TO_DISPLAY = 20;\n+export class SynonymsObject extends React.Component<{}, SynonymsObjectState> {\n+  domElement: any;\n+  constructor(props) {\n+    super(props);\n+    this.state = {seeMore: false, willOverflow: false};\n+  }\n+\n+  componentDidMount() {\n+    const element = this.domElement;\n+    const hasOverflowingChildren = element.offsetHeight < element.scrollHeight ||\n+        element.offsetWidth < element.scrollWidth;\n+    this.setState({willOverflow: hasOverflowingChildren});\n+  }\n+\n+  render() {\n+    const {seeMore, willOverflow} = this.state;\n+    return <div style={{display: 'flex', paddingLeft: '2rem'}}>\n+      <div style={styles.akaText}>\n+        Also Known As:\n+        <TooltipTrigger\n+            side='top'\n+            content='Medical concepts often have alternative names and descriptions,\n+            known as synonyms. Alternate names and descriptions, if available, are\n+            listed for each medical concept'>\n+          <ClrIcon\n+              shape='info-standard'\n+              className='is-solid'\n+              style={styles.akaIcon}\n+          />\n+        </TooltipTrigger>\n+      </div>\n+      <div style={{\n+        textOverflow: seeMore ? 'auto' : 'hidden',\n+        width: `calc(100% - ${willOverflow ? '250' : '180'}px)`,\n+        fontSize: '12px',\n+        height: seeMore ? 'auto' : '1rem',\n+        overflow: seeMore ? 'auto' : 'hidden'\n+      }} ref={el => this.domElement = el}>\n+        {this.props.children}\n+      </div>\n+      {willOverflow ?\n+          <Link onClick={() => this.setState({seeMore: !seeMore})}>\n+            {seeMore ? 'See Less' : 'See More...'}\n+          </Link> : null}\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  concepts: any[];\n+  domain: Domain;\n+  loading: boolean;\n+  onSelectConcepts: Function;\n+  placeholderValue: string;\n+  reactKey: string;\n+  searchTerm?: string;\n+  selectedConcepts: any[];\n+  error: boolean;\n+  concept: Array<Concept>;\n+}\n+\n+interface State {\n+  first: number;\n+  pageLoading: boolean;\n+  growlVisible: boolean;\n+  selectedConcepts: Array<Concept>;\n+  showBanner: boolean;\n+  selectAll: boolean;\n+  totalRecords: number;\n+  pageConcepts: any[];\n+  tableRef: any;\n+}\n+\n+export const ConceptTableV2  = withCurrentConcept()(class extends React.Component<Props, State> {\n+  growl: any;\n+  growlTimer: NodeJS.Timer;\n+\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      selectedConcepts: props.selectedConcepts,\n+      showBanner: false,\n+      selectAll: false,\n+      pageLoading: false,\n+      growlVisible: false,\n+      first: 0,\n+      totalRecords: props.concepts.length,\n+      pageConcepts: props.concepts.slice(0, 10).map(formatCounts),\n+      tableRef: React.createRef(),\n+    };\n+  }\n+\n+  componentDidUpdate(prevProps) {\n+    if (this.state.selectedConcepts !== this.props.concept) {\n+      this.setState({selectedConcepts: this.props.concept});\n+    }\n+  }\n+\n+  updateSelectedConceptList(selectedConcepts, origin) {\n+    // By default Data table will select all the concepts in the table but since we have first give\n+    // an option to user to select all concepts in a page\n+    // we will just add the the concepts in the page to selected concept list\n+    if (selectedConcepts.length === this.props.concepts.length && origin === 'table') {\n+      const startIndex = this.state.tableRef.current.state.first;\n+      const endIndex = startIndex + ROWS_TO_DISPLAY;\n+      selectedConcepts = fp.uniqBy( 'conceptId', this.state.selectedConcepts\n+          .concat(this.props.concepts.slice(startIndex, endIndex)));\n+      this.setState({showBanner: true});\n+    } else if (selectedConcepts.length < this.props.concepts.length) {\n+      this.setState({showBanner: false});\n+    }\n+    this.setState({selectedConcepts: selectedConcepts});\n+    currentConceptStore.next(selectedConcepts);\n+  }\n+\n+  distinctVocabulary() {\n+    const vocabularyIds = this.props.concepts.map(concept => concept.vocabularyId);\n+    return fp.uniq(vocabularyIds);\n+  }\n+\n+  componentWillReceiveProps(nextProps) {\n+    if ((nextProps.concepts !==  this.props.concepts)) {\n+      if (nextProps.concepts !== this.props.concepts && nextProps.concepts.length > 0 ) {\n+        this.setState({totalRecords: nextProps.concepts.length});\n+      }\n+      currentConceptStore.next(nextProps.selectedConcepts);\n+    }\n+    if (nextProps.reactKey !== this.props.reactKey) {\n+      this.setState({showBanner: false});\n+    }\n+  }\n+\n+  rowExpansionTemplate(data) {\n+    return (<SynonymsObject>\n+      {this.highlightWithSearchTerm(fp.uniq(data.conceptSynonyms).join(', '))}\n+    </SynonymsObject>);\n+  }\n+\n+  highlightWithSearchTerm(stringToHighlight: string) {\n+    const {searchTerm} = this.props;\n+    if (!searchTerm || searchTerm.trim() === '') {\n+      return stringToHighlight;\n+    }\n+    const words: string[] = [];\n+    let searchWords = searchTerm.split(new RegExp(',| '));\n+    searchWords = searchWords\n+        .filter(w => w.length > 0 )\n+        .map(word => word.replace(/[&!^\\/\\\\#,+()$~%.'\":*?<>{}]/g, ''));\n+    const matchString = new RegExp(searchWords.join('|'), 'i');\n+    const matches = stringToHighlight.match(new RegExp(matchString, 'gi'));\n+    const splits = stringToHighlight.split(new RegExp(matchString, 'gi'));\n+    if (matches) {\n+      for (let i = 0; i < matches.length; i++) {\n+        words.push(splits[i], matches[i]);\n+      }\n+      words.push(splits[splits.length - 1]);\n+    }\n+    return words.map((word, w) => <span key={w}\n+                                        style={matchString.test(word.toLowerCase()) ? styles.highlighted : {}}>\n+        {word}\n+      </span>);\n+  }\n+\n+  onPageChange() {\n+    this.setState({showBanner: false});\n+  }\n+\n+  errorMessage() {\n+    return !this.props.error ? false : <div style={styles.error}>\n+      <ClrIcon style={{margin: '0 0.5rem 0 0.25rem'}} className='is-solid' shape='exclamation-triangle' size='22'/>\n+      Sorry, the request cannot be completed. Please try refreshing the page or contact Support in the left hand navigation.\n+    </div>;\n+  }\n+\n+  selectItem(rowData) {\n+    const {selectedConcepts} = this.state;\n+    selectedConcepts.push(rowData);\n+    this.setState({selectedConcepts: selectedConcepts});\n+    this.growl.show({severity: 'success', detail: 'Concept Added', closable: false, life: 2000});\n+    if (!!this.growlTimer) {\n+      clearTimeout(this.growlTimer);\n+    }\n+    // This is to set style display: 'none' on the growl so it doesn't block the nav icons in the sidebar\n+    this.growlTimer = setTimeout(() => this.setState({growlVisible: false}), 2500);\n+\n+    currentConceptStore.next(selectedConcepts);\n+    this.setState({growlVisible: true});\n+    this.props.onSelectConcepts(selectedConcepts);\n+  }\n+\n+  addTemplate(rowData) {\n+    const index = fp.findIndex(rowData , this.props.concept);\n+    return <div style={styles.selectDiv}>\n+      {index.toString() === '-1'  ? <ClrIcon style={styles.selectIcon}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0300e9da3962e9372ead0fbcefee9524d6f2058"}, "originalPosition": 360}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwNzQ3MA==", "bodyText": "Sorry, I missed this the first time. Not sure how closely we need to mirror CB at this point, but should this be a 'Finish & Review` button that opens the sidebar, then have a 'Save Concepts' button at the bottom of the selected concepts list?", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r494607470", "createdAt": "2020-09-24T21:00:10Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -553,8 +593,27 @@ export const ConceptHomepage = withCurrentWorkspace()(\n                            expanded={this.addToSetText}\n                            disable={this.activeSelectedConceptCount === 0 ||\n                            !this.state.workspacePermissions.canWrite}/>\n-        </FadeBox>\n-      </React.Fragment>;\n+        </FadeBox>}\n+        {serverConfigStore.getValue().enableConceptSetSearchV2 && <React.Fragment>\n+          {conceptDomainCounts.filter(domain => !selectedDomain || selectedDomain === domain.domain).map((domain) => {\n+            const tabError = countsError || domainErrors.includes(domain.domain);\n+            return <React.Fragment> {!tabError && !this.domainLoading(activeDomainTab) && <label style={{color: colors.accent, lineHeight: '1.5rem'}}>\n+              Showing 1000 of {domain.conceptCount.toLocaleString()}</label>}\n+            <ConceptTableV2 concepts={concepts}\n+                            domain={activeDomainTab.domain}\n+                            loading={this.domainLoading(activeDomainTab)}\n+                            onSelectConcepts={this.selectConcepts.bind(this)}\n+                            placeholderValue={this.noConceptsConstant}\n+                            searchTerm={this.state.currentSearchString}\n+                            selectedConcepts={selectedConceptDomainMap[activeDomainTab.domain]}\n+                            reactKey={activeDomainTab.name}\n+                            error={domainError}/>\n+              {!this.domainLoading(activeDomainTab) && <Button style={{float: 'right', marginBottom: '2rem'}}\n+                    disabled={this.activeSelectedConceptCount === 0 ||\n+                    !this.state.workspacePermissions.canWrite}\n+                    onClick={() => this.setState({conceptAddModalOpen: true})}>Finish</Button>}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0300e9da3962e9372ead0fbcefee9524d6f2058"}, "originalPosition": 154}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4365c26a15894d96d72059a088c88d25c53747", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/2c4365c26a15894d96d72059a088c88d25c53747", "committedDate": "2020-09-28T14:55:29Z", "message": "Pr comments and fix other issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3ODMwNjUw", "url": "https://github.com/all-of-us/workbench/pull/4057#pullrequestreview-497830650", "createdAt": "2020-09-28T19:26:43Z", "commit": {"oid": "2c4365c26a15894d96d72059a088c88d25c53747"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOToyNjo0M1rOHZMhaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxOTozNDo1MFrOHZMxbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MTYwOA==", "bodyText": "nit: move to new line", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r496181608", "createdAt": "2020-09-28T19:26:43Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -18,27 +18,28 @@ import {ClrIcon} from 'app/components/icons';\n import {TooltipTrigger} from 'app/components/popups';\n import {RuntimePanel} from 'app/pages/analysis/runtime-panel';\n import {SidebarContent} from 'app/pages/data/cohort-review/sidebar-content.component';\n+import {ConceptListPage} from 'app/pages/data/concept/concept-list';\n import {participantStore} from 'app/services/review-state.service';\n import colors, {colorWithWhiteness} from 'app/styles/colors';\n import {\n   highlightSearchTerm,\n   reactStyles,\n   ReactWrapperBase,\n-  withCurrentCohortCriteria,\n+  withCurrentCohortCriteria, withCurrentConcept,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4365c26a15894d96d72059a088c88d25c53747"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MTY2NA==", "bodyText": "nit: move to new line", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r496181664", "createdAt": "2020-09-28T19:26:49Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/components/help-sidebar.tsx", "diffHunk": "@@ -18,27 +18,28 @@ import {ClrIcon} from 'app/components/icons';\n import {TooltipTrigger} from 'app/components/popups';\n import {RuntimePanel} from 'app/pages/analysis/runtime-panel';\n import {SidebarContent} from 'app/pages/data/cohort-review/sidebar-content.component';\n+import {ConceptListPage} from 'app/pages/data/concept/concept-list';\n import {participantStore} from 'app/services/review-state.service';\n import colors, {colorWithWhiteness} from 'app/styles/colors';\n import {\n   highlightSearchTerm,\n   reactStyles,\n   ReactWrapperBase,\n-  withCurrentCohortCriteria,\n+  withCurrentCohortCriteria, withCurrentConcept,\n   withCurrentWorkspace,\n   withUserProfile\n } from 'app/utils';\n import {AnalyticsTracker} from 'app/utils/analytics';\n import {\n-  currentCohortSearchContextStore,\n+  currentCohortSearchContextStore, currentConceptStore,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4365c26a15894d96d72059a088c88d25c53747"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4MTgzMQ==", "bodyText": "nit: move to new line", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r496181831", "createdAt": "2020-09-28T19:27:11Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -14,17 +15,43 @@ import {ConceptAddModal} from 'app/pages/data/concept/concept-add-modal';\n import {ConceptSurveyAddModal} from 'app/pages/data/concept/concept-survey-add-modal';\n import {ConceptTable} from 'app/pages/data/concept/concept-table';\n import {conceptsApi} from 'app/services/swagger-fetch-clients';\n-import colors, {colorWithWhiteness} from 'app/styles/colors';\n-import {reactStyles, ReactWrapperBase, validateInputForMySQL, withCurrentWorkspace} from 'app/utils';\n-import {NavStore, queryParamsStore} from 'app/utils/navigation';\n+import colors, {addOpacity, colorWithWhiteness} from 'app/styles/colors';\n+import {\n+  reactStyles,\n+  ReactWrapperBase,\n+  validateInputForMySQL,\n+  withCurrentConcept,\n+  withCurrentWorkspace\n+} from 'app/utils';\n+import {\n+  currentConceptStore,\n+  NavStore,\n+  queryParamsStore,\n+  serverConfigStore, setSidebarActiveIconStore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4365c26a15894d96d72059a088c88d25c53747"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE4NTcwOQ==", "bodyText": "I think this should happen only if enableConceptSetSearchV2 is true. When I deploy with the flag disabled, I still see the shopping cart icon in the sidebar.", "url": "https://github.com/all-of-us/workbench/pull/4057#discussion_r496185709", "createdAt": "2020-09-28T19:34:50Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -359,6 +391,7 @@ export const ConceptHomepage = withCurrentWorkspace()(\n       const {namespace, id} = this.props.workspace;\n       this.setState({completedDomainSearches: [], concepts: [], countsError: false,\n         domainErrors: [], countsLoading: true, searching: true});\n+      currentConceptStore.next([]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c4365c26a15894d96d72059a088c88d25c53747"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f7ddfd758053304e07caefa01db3c07b1730b28", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/1f7ddfd758053304e07caefa01db3c07b1730b28", "committedDate": "2020-09-29T03:37:14Z", "message": "PR Comments: Newlines and fix help icon in case of enableConcept false"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDg1NjI5", "url": "https://github.com/all-of-us/workbench/pull/4057#pullrequestreview-498085629", "createdAt": "2020-09-29T04:23:53Z", "commit": {"oid": "1f7ddfd758053304e07caefa01db3c07b1730b28"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4096, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}