{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTkzMjQ2", "number": 3634, "reviewThreads": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0NzoyN1rOEBwKGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo1MToyNFrOEDfRRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjczMDUxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0NzoyN1rOGdybbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNDo1OToxMlrOGef7Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA==", "bodyText": "The assumption is that request will be coming from UI ,the shortName will be different as we will be generating it  and just display Name is something we will not have control over and can be same.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433888108", "createdAt": "2020-06-02T13:47:27Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -128,20 +138,25 @@ public void deleteInstitution(final String shortName) {\n   @Override\n   public Optional<Institution> updateInstitution(\n       final String shortName, final Institution institutionToUpdate) {\n-    return institutionDao\n-        .findOneByShortName(shortName)\n-        .map(DbInstitution::getInstitutionId)\n-        .map(\n-            dbId -> {\n-              // create new DB object, but mark it with the original's ID to indicate that this is\n-              // an update\n-\n-              final DbInstitution dbObjectToUpdate =\n-                  institutionDao.save(\n-                      institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n-              populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n-              return toModel(dbObjectToUpdate);\n-            });\n+    validateInstitution(institutionToUpdate);\n+    try {\n+      return institutionDao\n+          .findOneByShortName(shortName)\n+          .map(DbInstitution::getInstitutionId)\n+          .map(\n+              dbId -> {\n+                // create new DB object, but mark it with the original's ID to indicate that this is\n+                // an update\n+\n+                final DbInstitution dbObjectToUpdate =\n+                    institutionDao.save(\n+                        institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n+                populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n+                return toModel(dbObjectToUpdate);\n+              });\n+    } catch (DataIntegrityViolationException ex) {\n+      throw new ConflictException(\"Display Name already exist\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968c101063cafd7940b3e2d724f4b5449938065f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk0NTk0OA==", "bodyText": "I don't think that is a safe assumption.  What is wrong with throwing the existing DataIntegrityViolationException?\nWe should check in the UI that the display name doesn't exist before we even make a request like this.  See the new user creation page for an example of what I'm thinking.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433945948", "createdAt": "2020-06-02T15:02:47Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -128,20 +138,25 @@ public void deleteInstitution(final String shortName) {\n   @Override\n   public Optional<Institution> updateInstitution(\n       final String shortName, final Institution institutionToUpdate) {\n-    return institutionDao\n-        .findOneByShortName(shortName)\n-        .map(DbInstitution::getInstitutionId)\n-        .map(\n-            dbId -> {\n-              // create new DB object, but mark it with the original's ID to indicate that this is\n-              // an update\n-\n-              final DbInstitution dbObjectToUpdate =\n-                  institutionDao.save(\n-                      institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n-              populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n-              return toModel(dbObjectToUpdate);\n-            });\n+    validateInstitution(institutionToUpdate);\n+    try {\n+      return institutionDao\n+          .findOneByShortName(shortName)\n+          .map(DbInstitution::getInstitutionId)\n+          .map(\n+              dbId -> {\n+                // create new DB object, but mark it with the original's ID to indicate that this is\n+                // an update\n+\n+                final DbInstitution dbObjectToUpdate =\n+                    institutionDao.save(\n+                        institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n+                populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n+                return toModel(dbObjectToUpdate);\n+              });\n+    } catch (DataIntegrityViolationException ex) {\n+      throw new ConflictException(\"Display Name already exist\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA=="}, "originalCommit": {"oid": "968c101063cafd7940b3e2d724f4b5449938065f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk2NzMxMA==", "bodyText": "same thought above, for the other try/catch", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433967310", "createdAt": "2020-06-02T15:32:11Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -128,20 +138,25 @@ public void deleteInstitution(final String shortName) {\n   @Override\n   public Optional<Institution> updateInstitution(\n       final String shortName, final Institution institutionToUpdate) {\n-    return institutionDao\n-        .findOneByShortName(shortName)\n-        .map(DbInstitution::getInstitutionId)\n-        .map(\n-            dbId -> {\n-              // create new DB object, but mark it with the original's ID to indicate that this is\n-              // an update\n-\n-              final DbInstitution dbObjectToUpdate =\n-                  institutionDao.save(\n-                      institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n-              populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n-              return toModel(dbObjectToUpdate);\n-            });\n+    validateInstitution(institutionToUpdate);\n+    try {\n+      return institutionDao\n+          .findOneByShortName(shortName)\n+          .map(DbInstitution::getInstitutionId)\n+          .map(\n+              dbId -> {\n+                // create new DB object, but mark it with the original's ID to indicate that this is\n+                // an update\n+\n+                final DbInstitution dbObjectToUpdate =\n+                    institutionDao.save(\n+                        institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n+                populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n+                return toModel(dbObjectToUpdate);\n+              });\n+    } catch (DataIntegrityViolationException ex) {\n+      throw new ConflictException(\"Display Name already exist\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA=="}, "originalCommit": {"oid": "968c101063cafd7940b3e2d724f4b5449938065f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMzkwMQ==", "bodyText": "Conflict Exception throws 409 HTTP Status code that helps me distinguish it from other 500 in UI code and i can show Institution with same name already exist error message to the user", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434203901", "createdAt": "2020-06-02T22:12:10Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -128,20 +138,25 @@ public void deleteInstitution(final String shortName) {\n   @Override\n   public Optional<Institution> updateInstitution(\n       final String shortName, final Institution institutionToUpdate) {\n-    return institutionDao\n-        .findOneByShortName(shortName)\n-        .map(DbInstitution::getInstitutionId)\n-        .map(\n-            dbId -> {\n-              // create new DB object, but mark it with the original's ID to indicate that this is\n-              // an update\n-\n-              final DbInstitution dbObjectToUpdate =\n-                  institutionDao.save(\n-                      institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n-              populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n-              return toModel(dbObjectToUpdate);\n-            });\n+    validateInstitution(institutionToUpdate);\n+    try {\n+      return institutionDao\n+          .findOneByShortName(shortName)\n+          .map(DbInstitution::getInstitutionId)\n+          .map(\n+              dbId -> {\n+                // create new DB object, but mark it with the original's ID to indicate that this is\n+                // an update\n+\n+                final DbInstitution dbObjectToUpdate =\n+                    institutionDao.save(\n+                        institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n+                populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n+                return toModel(dbObjectToUpdate);\n+              });\n+    } catch (DataIntegrityViolationException ex) {\n+      throw new ConflictException(\"Display Name already exist\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA=="}, "originalCommit": {"oid": "968c101063cafd7940b3e2d724f4b5449938065f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzMzU3NQ==", "bodyText": "Good point.  ConflictException is good, let's use that.  But we should include the original exception message in the text.  Maybe something like:\nnew ConflictException(\"DataIntegrityViolationException: \" + ex.getMessage())", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434633575", "createdAt": "2020-06-03T14:59:12Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -128,20 +138,25 @@ public void deleteInstitution(final String shortName) {\n   @Override\n   public Optional<Institution> updateInstitution(\n       final String shortName, final Institution institutionToUpdate) {\n-    return institutionDao\n-        .findOneByShortName(shortName)\n-        .map(DbInstitution::getInstitutionId)\n-        .map(\n-            dbId -> {\n-              // create new DB object, but mark it with the original's ID to indicate that this is\n-              // an update\n-\n-              final DbInstitution dbObjectToUpdate =\n-                  institutionDao.save(\n-                      institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n-              populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n-              return toModel(dbObjectToUpdate);\n-            });\n+    validateInstitution(institutionToUpdate);\n+    try {\n+      return institutionDao\n+          .findOneByShortName(shortName)\n+          .map(DbInstitution::getInstitutionId)\n+          .map(\n+              dbId -> {\n+                // create new DB object, but mark it with the original's ID to indicate that this is\n+                // an update\n+\n+                final DbInstitution dbObjectToUpdate =\n+                    institutionDao.save(\n+                        institutionMapper.modelToDb(institutionToUpdate).setInstitutionId(dbId));\n+                populateAuxTables(institutionToUpdate, dbObjectToUpdate);\n+                return toModel(dbObjectToUpdate);\n+              });\n+    } catch (DataIntegrityViolationException ex) {\n+      throw new ConflictException(\"Display Name already exist\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4ODEwOA=="}, "originalCommit": {"oid": "968c101063cafd7940b3e2d724f4b5449938065f"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzEyODU0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxMzozNlrOGd2cXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoyNjoxMVrOGd8LHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1Mzg4Ng==", "bodyText": "Good catch, thank you!  Could you add a test for this if you haven't already?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433953886", "createdAt": "2020-06-02T15:13:36Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -269,6 +284,13 @@ private void populateAuxTables(\n           new InstitutionUserInstructions()\n               .institutionShortName(modelInstitution.getShortName())\n               .instructions(userInstructions));\n+    } else {\n+      // Remove institution entry from institution_user_instructions table if user_instructions is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dde2ae816a34e170cd0bd309cf41d971202dab5"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0Nzc3Mw==", "bodyText": "Yes have added test_updateInstitution_RemoveUserInstructionFromExistingInstitution", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434047773", "createdAt": "2020-06-02T17:26:11Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -269,6 +284,13 @@ private void populateAuxTables(\n           new InstitutionUserInstructions()\n               .institutionShortName(modelInstitution.getShortName())\n               .instructions(userInstructions));\n+    } else {\n+      // Remove institution entry from institution_user_instructions table if user_instructions is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1Mzg4Ng=="}, "originalCommit": {"oid": "6dde2ae816a34e170cd0bd309cf41d971202dab5"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzE0Mzc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxNzoxOFrOGd2mbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToxODo1NlrOGd2q_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NjQ2MQ==", "bodyText": "These can all be Strings.isNullOrEmpty()", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433956461", "createdAt": "2020-06-02T15:17:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -289,4 +311,48 @@ private void setInstitutionEmailAddresses(\n         .modelToDb(modelInstitution, dbInstitution)\n         .forEach(institutionEmailAddressDao::save);\n   }\n+\n+  // Take first 76 characters from display Name (with no spaces) and append 3 random number\n+  private String generateShortName(String displayName) {\n+    Random r = new Random();\n+    displayName = displayName.replaceAll(\"\\\\s\", \"\");\n+    String shortName = displayName.length() > 76 ? displayName.substring(0, 76) : displayName;\n+    shortName = shortName + r.nextInt(500) + 1;\n+    return shortName;\n+  }\n+\n+  private void validateInstitution(Institution institutionRequest) {\n+    if (StringUtils.isEmpty(institutionRequest.getDisplayName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dde2ae816a34e170cd0bd309cf41d971202dab5"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NzYyOA==", "bodyText": "Would you mind updating line 13 to be import com.google.common.base.Strings; instead?  I chose the wrong one originally and this would be a better choice than elasticsearch.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433957628", "createdAt": "2020-06-02T15:18:56Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -289,4 +311,48 @@ private void setInstitutionEmailAddresses(\n         .modelToDb(modelInstitution, dbInstitution)\n         .forEach(institutionEmailAddressDao::save);\n   }\n+\n+  // Take first 76 characters from display Name (with no spaces) and append 3 random number\n+  private String generateShortName(String displayName) {\n+    Random r = new Random();\n+    displayName = displayName.replaceAll(\"\\\\s\", \"\");\n+    String shortName = displayName.length() > 76 ? displayName.substring(0, 76) : displayName;\n+    shortName = shortName + r.nextInt(500) + 1;\n+    return shortName;\n+  }\n+\n+  private void validateInstitution(Institution institutionRequest) {\n+    if (StringUtils.isEmpty(institutionRequest.getDisplayName())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1NjQ2MQ=="}, "originalCommit": {"oid": "6dde2ae816a34e170cd0bd309cf41d971202dab5"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzE2NDk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToyMjowMFrOGd2zxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNToyMjowMFrOGd2zxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk1OTg3Ng==", "bodyText": "typo: be", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433959876", "createdAt": "2020-06-02T15:22:00Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -289,4 +311,48 @@ private void setInstitutionEmailAddresses(\n         .modelToDb(modelInstitution, dbInstitution)\n         .forEach(institutionEmailAddressDao::save);\n   }\n+\n+  // Take first 76 characters from display Name (with no spaces) and append 3 random number\n+  private String generateShortName(String displayName) {\n+    Random r = new Random();\n+    displayName = displayName.replaceAll(\"\\\\s\", \"\");\n+    String shortName = displayName.length() > 76 ? displayName.substring(0, 76) : displayName;\n+    shortName = shortName + r.nextInt(500) + 1;\n+    return shortName;\n+  }\n+\n+  private void validateInstitution(Institution institutionRequest) {\n+    if (StringUtils.isEmpty(institutionRequest.getDisplayName())) {\n+      throw new BadRequestException(\"Display Name cannot be empty\");\n+    }\n+    if (StringUtils.isEmpty(institutionRequest.getShortName())) {\n+      institutionRequest.setShortName(generateShortName(institutionRequest.getDisplayName()));\n+    }\n+    if (institutionRequest.getDuaTypeEnum() == null) {\n+      // For Existing Institutions\n+      institutionRequest.setDuaTypeEnum(DuaType.MASTER);\n+    }\n+    if (institutionRequest.getOrganizationTypeEnum() == null) {\n+      throw new BadRequestException(\"Organization type cannot by null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6dde2ae816a34e170cd0bd309cf41d971202dab5"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzIyNzM5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozNjozMlrOGd3ciw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozNjozMlrOGd3ciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MDMxNQ==", "bodyText": "This can also throw a NullPointerException.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433970315", "createdAt": "2020-06-02T15:36:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/institution/InstitutionServiceImpl.java", "diffHunk": "@@ -289,4 +311,48 @@ private void setInstitutionEmailAddresses(\n         .modelToDb(modelInstitution, dbInstitution)\n         .forEach(institutionEmailAddressDao::save);\n   }\n+\n+  // Take first 76 characters from display Name (with no spaces) and append 3 random number\n+  private String generateShortName(String displayName) {\n+    Random r = new Random();\n+    displayName = displayName.replaceAll(\"\\\\s\", \"\");\n+    String shortName = displayName.length() > 76 ? displayName.substring(0, 76) : displayName;\n+    shortName = shortName + r.nextInt(500) + 1;\n+    return shortName;\n+  }\n+\n+  private void validateInstitution(Institution institutionRequest) {\n+    if (StringUtils.isEmpty(institutionRequest.getDisplayName())) {\n+      throw new BadRequestException(\"Display Name cannot be empty\");\n+    }\n+    if (StringUtils.isEmpty(institutionRequest.getShortName())) {\n+      institutionRequest.setShortName(generateShortName(institutionRequest.getDisplayName()));\n+    }\n+    if (institutionRequest.getDuaTypeEnum() == null) {\n+      // For Existing Institutions\n+      institutionRequest.setDuaTypeEnum(DuaType.MASTER);\n+    }\n+    if (institutionRequest.getOrganizationTypeEnum() == null) {\n+      throw new BadRequestException(\"Organization type cannot by null\");\n+    }\n+    if (institutionRequest.getOrganizationTypeEnum().equals(OrganizationType.OTHER)\n+        && StringUtils.isEmpty(institutionRequest.getOrganizationTypeOtherText())) {\n+      throw new BadRequestException(\"If organization type is OTHER, additional text is needed\");\n+    }\n+\n+    // If Agreement type is Restricted confirm Each Email address in list is valid\n+    if (institutionRequest.getDuaTypeEnum().equals(DuaType.RESTRICTED)\n+        && !institutionRequest.getEmailAddresses().isEmpty()) {\n+      institutionRequest\n+          .getEmailAddresses()\n+          .forEach(\n+              emailAddress -> {\n+                try {\n+                  new InternetAddress(emailAddress).validate();\n+                } catch (AddressException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzIzMjg1OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozNzo0OVrOGd3gAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNTozNzo0OVrOGd3gAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzk3MTIwMw==", "bodyText": "fix grammar", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r433971203", "createdAt": "2020-06-02T15:37:49Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -2347,6 +2347,15 @@ paths:\n           description: 'The Institution created by this operation.'\n           schema:\n             \"$ref\": \"#/definitions/Institution\"\n+        400:\n+          description: Bad request\n+          schema:\n+            \"$ref\": \"#/definitions/ErrorResponse\"\n+        409:\n+          description: Throw confict Exception, if Institution with same display Name exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY0NDU5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxMDoxOFrOGd7mag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoyMDozMlrOGd79Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzODM3OA==", "bodyText": "That's not what this test is intended to show.  Please update the new Institution() to supply a valid Institution.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434038378", "createdAt": "2020-06-02T17:10:18Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -260,17 +275,36 @@ public void test_nonUniqueEmailPatterns() {\n         .containsExactlyElementsIn(similarInstViaDb.getEmailAddresses());\n   }\n \n-  @Test\n+  // Display Name cannot be empty", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0NDIyMg==", "bodyText": "Ahh i see its trying to verify updateInstitution with valid institute but a shortName thats not in DB", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434044222", "createdAt": "2020-06-02T17:20:32Z", "author": {"login": "NehaBroad"}, "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -260,17 +275,36 @@ public void test_nonUniqueEmailPatterns() {\n         .containsExactlyElementsIn(similarInstViaDb.getEmailAddresses());\n   }\n \n-  @Test\n+  // Display Name cannot be empty", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzODM3OA=="}, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY0NjA2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxMDo0NVrOGd7nYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxMDo0NVrOGd7nYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzODYyNw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434038627", "createdAt": "2020-06-02T17:10:45Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -260,17 +275,36 @@ public void test_nonUniqueEmailPatterns() {\n         .containsExactlyElementsIn(similarInstViaDb.getEmailAddresses());\n   }\n \n-  @Test\n+  // Display Name cannot be empty\n+  @Test(expected = BadRequestException.class)\n   public void test_InstitutionNotFound() {\n     assertThat(service.getInstitution(\"missing\")).isEmpty();\n     assertThat(service.updateInstitution(\"missing\", new Institution())).isEmpty();\n   }\n \n-  @Test(expected = DataIntegrityViolationException.class)\n+  @Test(expected = ConflictException.class)\n   public void test_nonUniqueIds() {\n     service.createInstitution(\n-        new Institution().shortName(\"test\").displayName(\"We are all individuals\"));\n-    service.createInstitution(new Institution().shortName(\"test\").displayName(\"I'm not\"));\n+        new Institution()\n+            .shortName(\"test\")\n+            .displayName(\"We are all individuals\")\n+            .organizationTypeEnum(OrganizationType.INDUSTRY));\n+    service\n+        .createInstitution(new Institution().shortName(\"test\").displayName(\"I'm not\"))\n+        .organizationTypeEnum(OrganizationType.EDUCATIONAL_INSTITUTION);\n+  }\n+\n+  @Test(expected = ConflictException.class)\n+  public void test_nonUniqueDisplayName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY1ODAzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNDoxNVrOGd7u3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNDoxNVrOGd7u3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MDU0Mg==", "bodyText": "A little nicer if we skip the get() above and instead use isEmpty() here.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434040542", "createdAt": "2020-06-02T17:14:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -511,6 +558,64 @@ public void validate_OperationalUser_nullInstitution() {\n     assertThat(service.validateOperationalUser(institution)).isFalse();\n   }\n \n+  @Test(expected = BadRequestException.class)\n+  public void test_createInstitution_MissingOrganizationType() {\n+    Institution institution_NoOrgType =\n+        new Institution()\n+            .displayName(\"No Organization\")\n+            .duaTypeEnum(DuaType.MASTER)\n+            .emailAddresses(Arrays.asList(\"testDomain.com\"))\n+            .userInstructions(\"Should throw exception\");\n+    service.createInstitution(institution_NoOrgType);\n+  }\n+\n+  @Test\n+  public void test_createInstitution_AddDefaultDUA() {\n+    Institution institution_NoDUA =\n+        new Institution()\n+            .displayName(\"No Organization\")\n+            .emailAddresses(Collections.emptyList())\n+            .emailDomains(Collections.emptyList())\n+            .userInstructions(\"Should Add dua Type As Master\")\n+            .organizationTypeEnum(OrganizationType.INDUSTRY);\n+    Institution createdInstitution = service.createInstitution(institution_NoDUA);\n+    Institution institutionWithDua = institution_NoDUA.duaTypeEnum(DuaType.MASTER);\n+    assertThat(createdInstitution).isEqualTo(institutionWithDua);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void test_createInstitution_IncorrectEmailAddressFormat() {\n+    Institution institution_EmailAddress =\n+        new Institution()\n+            .displayName(\"No Organization\")\n+            .duaTypeEnum(DuaType.RESTRICTED)\n+            .emailAddresses(Arrays.asList(\"CorrectEmailAddress@domain.com, incorrectEmail.com\"))\n+            .organizationTypeEnum(OrganizationType.INDUSTRY);\n+    service.createInstitution(institution_EmailAddress);\n+  }\n+\n+  @Test\n+  public void test_updateInstitution_RemoveUserInstructionFromExistingInstitution() {\n+    Institution institution_WithUserInstructions =\n+        new Institution()\n+            .displayName(\"No Organization\")\n+            .duaTypeEnum(DuaType.RESTRICTED)\n+            .emailAddresses(Arrays.asList(\"CorrectEmailAddress@domain.com\"))\n+            .organizationTypeEnum(OrganizationType.INDUSTRY)\n+            .userInstructions(\"Some user instructions\");\n+    Institution createdInstitution = service.createInstitution(institution_WithUserInstructions);\n+    assertThat(createdInstitution.getUserInstructions()).isEqualTo(\"Some user instructions\");\n+\n+    Institution institutionNoUserInstruction =\n+        institution_WithUserInstructions.userInstructions(\"\");\n+    Institution updatedInstitution =\n+        service\n+            .updateInstitution(\n+                institution_WithUserInstructions.getShortName(), institutionNoUserInstruction)\n+            .get();\n+    assertThat(updatedInstitution.getUserInstructions()).isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMzY2MDc4OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNTowOVrOGd7wsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzoxNTowOVrOGd7wsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA0MTAxMA==", "bodyText": "I like these.  Could you add one more for enforcing that OtherText exists when the type is OTHER?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434041010", "createdAt": "2020-06-02T17:15:09Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/institution/InstitutionServiceTest.java", "diffHunk": "@@ -511,6 +558,64 @@ public void validate_OperationalUser_nullInstitution() {\n     assertThat(service.validateOperationalUser(institution)).isFalse();\n   }\n \n+  @Test(expected = BadRequestException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI1ODk4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.spec.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1MDo1MlrOGeBplA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozNTo1MFrOGeDCKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzQ5Mg==", "bodyText": "how does this demonstrate duplication?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434137492", "createdAt": "2020-06-02T19:50:52Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.spec.tsx", "diffHunk": "@@ -0,0 +1,151 @@\n+import {registerApiClient} from'app/services/swagger-fetch-clients';\n+import {serverConfigStore} from 'app/utils/navigation';\n+import {mount} from 'enzyme';\n+import {DuaType} from 'generated';\n+import {InstitutionApi} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import defaultServerConfig from 'testing/default-server-config';\n+import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n+import {InstitutionApiStub} from 'testing/stubs/institution-api-stub';\n+import {AdminInstitutionEdit} from './admin-institution-edit';\n+\n+describe('AdminInstitutionEditSpec', () => {\n+\n+  const component = () => {\n+    return mount(<AdminInstitutionEdit/>);\n+  };\n+\n+  beforeEach(() => {\n+    serverConfigStore.next(defaultServerConfig);\n+\n+    registerApiClient(InstitutionApi, new InstitutionApiStub());\n+  });\n+\n+  it('should render', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+  });\n+\n+  it('should throw error in case of duplicate display name', async() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MDE3MA==", "bodyText": "Ohh i missed this, its an incomplete test with incorrect description: this is for display Name more than 80 characters", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434160170", "createdAt": "2020-06-02T20:35:50Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/pages/admin/admin-institution-edit.spec.tsx", "diffHunk": "@@ -0,0 +1,151 @@\n+import {registerApiClient} from'app/services/swagger-fetch-clients';\n+import {serverConfigStore} from 'app/utils/navigation';\n+import {mount} from 'enzyme';\n+import {DuaType} from 'generated';\n+import {InstitutionApi} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import defaultServerConfig from 'testing/default-server-config';\n+import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n+import {InstitutionApiStub} from 'testing/stubs/institution-api-stub';\n+import {AdminInstitutionEdit} from './admin-institution-edit';\n+\n+describe('AdminInstitutionEditSpec', () => {\n+\n+  const component = () => {\n+    return mount(<AdminInstitutionEdit/>);\n+  };\n+\n+  beforeEach(() => {\n+    serverConfigStore.next(defaultServerConfig);\n+\n+    registerApiClient(InstitutionApi, new InstitutionApiStub());\n+  });\n+\n+  it('should render', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+  });\n+\n+  it('should throw error in case of duplicate display name', async() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNzQ5Mg=="}, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI2ODA5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.spec.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1MzozMVrOGeBvMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1MzozMVrOGeBvMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzODkzMQ==", "bodyText": "missing a word or two here", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434138931", "createdAt": "2020-06-02T19:53:31Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.spec.tsx", "diffHunk": "@@ -0,0 +1,151 @@\n+import {registerApiClient} from'app/services/swagger-fetch-clients';\n+import {serverConfigStore} from 'app/utils/navigation';\n+import {mount} from 'enzyme';\n+import {DuaType} from 'generated';\n+import {InstitutionApi} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import defaultServerConfig from 'testing/default-server-config';\n+import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n+import {InstitutionApiStub} from 'testing/stubs/institution-api-stub';\n+import {AdminInstitutionEdit} from './admin-institution-edit';\n+\n+describe('AdminInstitutionEditSpec', () => {\n+\n+  const component = () => {\n+    return mount(<AdminInstitutionEdit/>);\n+  };\n+\n+  beforeEach(() => {\n+    serverConfigStore.next(defaultServerConfig);\n+\n+    registerApiClient(InstitutionApi, new InstitutionApiStub());\n+  });\n+\n+  it('should render', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+  });\n+\n+  it('should throw error in case of duplicate display name', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+    const testInput = fp.repeat(81, 'a');\n+    const displayNameText = wrapper.find('[id=\"displayName\"]').first();\n+    displayNameText.simulate('change', {target: {value: testInput}});\n+    displayNameText.simulate('blur');\n+  });\n+\n+  it('should appropriate text input on selection agreement type', async() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI3MDg0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1NDoyNVrOGeBw_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1NDoyNVrOGeBw_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzOTM5MA==", "bodyText": "nice test", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434139390", "createdAt": "2020-06-02T19:54:25Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.spec.tsx", "diffHunk": "@@ -0,0 +1,151 @@\n+import {registerApiClient} from'app/services/swagger-fetch-clients';\n+import {serverConfigStore} from 'app/utils/navigation';\n+import {mount} from 'enzyme';\n+import {DuaType} from 'generated';\n+import {InstitutionApi} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import defaultServerConfig from 'testing/default-server-config';\n+import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n+import {InstitutionApiStub} from 'testing/stubs/institution-api-stub';\n+import {AdminInstitutionEdit} from './admin-institution-edit';\n+\n+describe('AdminInstitutionEditSpec', () => {\n+\n+  const component = () => {\n+    return mount(<AdminInstitutionEdit/>);\n+  };\n+\n+  beforeEach(() => {\n+    serverConfigStore.next(defaultServerConfig);\n+\n+    registerApiClient(InstitutionApi, new InstitutionApiStub());\n+  });\n+\n+  it('should render', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+  });\n+\n+  it('should throw error in case of duplicate display name', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+    const testInput = fp.repeat(81, 'a');\n+    const displayNameText = wrapper.find('[id=\"displayName\"]').first();\n+    displayNameText.simulate('change', {target: {value: testInput}});\n+    displayNameText.simulate('blur');\n+  });\n+\n+  it('should appropriate text input on selection agreement type', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+    const testInput = fp.repeat(81, 'a');\n+    let emailAddressDiv = wrapper.find('[data-test-id=\"emailAddress\"]');\n+    let emailDomainDiv = wrapper.find('[data-test-id=\"emailDomain\"]');\n+    expect(emailAddressDiv.length).toBe(0);\n+    expect(emailDomainDiv.length).toBe(0);\n+\n+    const agreementTypeDropDown = wrapper.find('[data-test-id=\"agreement-dropdown\"]').instance() as Dropdown;\n+    agreementTypeDropDown.props.onChange({originalEvent: undefined, value: DuaType.MASTER, target: {name: 'name', id: '', value: DuaType.MASTER}});\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    emailAddressDiv = wrapper.find('[data-test-id=\"emailAddress\"]');\n+    emailDomainDiv = wrapper.find('[data-test-id=\"emailDomain\"]');\n+    expect(emailAddressDiv.length).toBe(0);\n+    expect(emailDomainDiv.length).toBe(2);\n+\n+    const emailDomainLabel = emailDomainDiv.first().props().children[0];\n+    expect(emailDomainLabel.props.children).toBe('Accepted Email Domain');\n+\n+    agreementTypeDropDown.props.onChange({originalEvent: undefined, value: DuaType.RESTRICTED, target: {name: 'name', id: '', value: DuaType.RESTRICTED}});\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    emailAddressDiv = wrapper.find('[data-test-id=\"emailAddress\"]');\n+    emailDomainDiv = wrapper.find('[data-test-id=\"emailDomain\"]');\n+    expect(emailAddressDiv.length).toBe(2);\n+    expect(emailDomainDiv.length).toBe(0);\n+\n+    const emailAddressLabel = emailAddressDiv.first().props().children[0];\n+\n+    expect(emailAddressLabel.props.children).toBe('Accepted Email Address');\n+\n+  });\n+\n+  it ('Should display error in case of invalid email Address Format', async() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI3MzE5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.spec.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1NTowOFrOGeByjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1NTowOFrOGeByjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzOTc4OQ==", "bodyText": "add comment for single correct value test", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434139789", "createdAt": "2020-06-02T19:55:08Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.spec.tsx", "diffHunk": "@@ -0,0 +1,151 @@\n+import {registerApiClient} from'app/services/swagger-fetch-clients';\n+import {serverConfigStore} from 'app/utils/navigation';\n+import {mount} from 'enzyme';\n+import {DuaType} from 'generated';\n+import {InstitutionApi} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import defaultServerConfig from 'testing/default-server-config';\n+import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n+import {InstitutionApiStub} from 'testing/stubs/institution-api-stub';\n+import {AdminInstitutionEdit} from './admin-institution-edit';\n+\n+describe('AdminInstitutionEditSpec', () => {\n+\n+  const component = () => {\n+    return mount(<AdminInstitutionEdit/>);\n+  };\n+\n+  beforeEach(() => {\n+    serverConfigStore.next(defaultServerConfig);\n+\n+    registerApiClient(InstitutionApi, new InstitutionApiStub());\n+  });\n+\n+  it('should render', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+  });\n+\n+  it('should throw error in case of duplicate display name', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+    const testInput = fp.repeat(81, 'a');\n+    const displayNameText = wrapper.find('[id=\"displayName\"]').first();\n+    displayNameText.simulate('change', {target: {value: testInput}});\n+    displayNameText.simulate('blur');\n+  });\n+\n+  it('should appropriate text input on selection agreement type', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+    const testInput = fp.repeat(81, 'a');\n+    let emailAddressDiv = wrapper.find('[data-test-id=\"emailAddress\"]');\n+    let emailDomainDiv = wrapper.find('[data-test-id=\"emailDomain\"]');\n+    expect(emailAddressDiv.length).toBe(0);\n+    expect(emailDomainDiv.length).toBe(0);\n+\n+    const agreementTypeDropDown = wrapper.find('[data-test-id=\"agreement-dropdown\"]').instance() as Dropdown;\n+    agreementTypeDropDown.props.onChange({originalEvent: undefined, value: DuaType.MASTER, target: {name: 'name', id: '', value: DuaType.MASTER}});\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    emailAddressDiv = wrapper.find('[data-test-id=\"emailAddress\"]');\n+    emailDomainDiv = wrapper.find('[data-test-id=\"emailDomain\"]');\n+    expect(emailAddressDiv.length).toBe(0);\n+    expect(emailDomainDiv.length).toBe(2);\n+\n+    const emailDomainLabel = emailDomainDiv.first().props().children[0];\n+    expect(emailDomainLabel.props.children).toBe('Accepted Email Domain');\n+\n+    agreementTypeDropDown.props.onChange({originalEvent: undefined, value: DuaType.RESTRICTED, target: {name: 'name', id: '', value: DuaType.RESTRICTED}});\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    emailAddressDiv = wrapper.find('[data-test-id=\"emailAddress\"]');\n+    emailDomainDiv = wrapper.find('[data-test-id=\"emailDomain\"]');\n+    expect(emailAddressDiv.length).toBe(2);\n+    expect(emailDomainDiv.length).toBe(0);\n+\n+    const emailAddressLabel = emailAddressDiv.first().props().children[0];\n+\n+    expect(emailAddressLabel.props.children).toBe('Accepted Email Address');\n+\n+  });\n+\n+  it ('Should display error in case of invalid email Address Format', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+    let emailAddressError = wrapper.find('[data-test-id=\"emailAddressError\"]');\n+    expect(emailAddressError.length).toBe(0);\n+    const agreementTypeDropDown = wrapper.find('[data-test-id=\"agreement-dropdown\"]').instance() as Dropdown;\n+    agreementTypeDropDown.props.onChange(\n+        {originalEvent: undefined, value: DuaType.RESTRICTED, target: {name: 'name', id: '', value: DuaType.RESTRICTED}});\n+    await waitOneTickAndUpdate(wrapper);\n+    // In case of a single entry which is not in the correct format\n+    wrapper.find('[data-test-id=\"emailAddressInput\"]').first().simulate('change', {target: {value: 'invalidEmail@domain'}});\n+    wrapper.find('[data-test-id=\"emailAddressInput\"]').first().simulate('blur');\n+    emailAddressError = wrapper.find('[data-test-id=\"emailAddressError\"]');\n+    expect(emailAddressError.first().props().children)\n+      .toBe('Following Email Addresses are not valid : invalidEmail@domain');\n+\n+    // Multiple Email Address entries with a mix of correct and incorrect format\n+    wrapper.find('[data-test-id=\"emailAddressInput\"]').first()\n+      .simulate('change', {target: {value: 'invalidEmail@domain@org,' +\n+        '\\ncorrectEmail@someDomain.org.com,\\n invalidEmail,\\n justDomain.org,' +\n+        '\\nsomeEmail@broadinstitute.org'}});\n+    wrapper.find('[data-test-id=\"emailAddressInput\"]').first().simulate('blur');\n+    emailAddressError = wrapper.find('[data-test-id=\"emailAddressError\"]');\n+    expect(emailAddressError.first().props().children)\n+      .toBe('Following Email Addresses are not valid : invalidEmail@domain@org ,  invalidEmail ,  justDomain.org');\n+\n+    // Single correct format Email Address entries\n+    wrapper.find('[data-test-id=\"emailAddressInput\"]').first()\n+      .simulate('change', {target: {value: 'correctEmail@domain.com'}});\n+    wrapper.find('[data-test-id=\"emailAddressInput\"]').first().simulate('blur');\n+    emailAddressError = wrapper.find('[data-test-id=\"emailAddressError\"]');\n+    expect(emailAddressError.length).toBe(0);\n+\n+  });\n+\n+  it ('Should display error in case of invalid email Domain Format', async() => {\n+    const wrapper = component();\n+    await waitOneTickAndUpdate(wrapper);\n+    expect(wrapper).toBeTruthy();\n+    let emailAddressError = wrapper.find('[data-test-id=\"emailDomainError\"]');\n+    expect(emailAddressError.length).toBe(0);\n+    const agreementTypeDropDown = wrapper.find('[data-test-id=\"agreement-dropdown\"]').instance() as Dropdown;\n+    agreementTypeDropDown.props.onChange(\n+        {originalEvent: undefined, value: DuaType.MASTER, target: {name: 'name', id: '', value: DuaType.MASTER}});\n+    await waitOneTickAndUpdate(wrapper);\n+\n+    // Single Entry with incorrect Email Domain format\n+    wrapper.find('[data-test-id=\"emailDomainInput\"]').first()\n+      .simulate('change', {target: {value: 'invalidEmail@domain'}});\n+    wrapper.find('[data-test-id=\"emailDomainInput\"]').first().simulate('blur');\n+    emailAddressError = wrapper.find('[data-test-id=\"emailDomainError\"]');\n+    expect(emailAddressError.first().props().children)\n+      .toBe('Following Email Domains are not valid : invalidEmail@domain');\n+\n+    // Multiple Entries with correct and incorrect Email Domain format\n+    wrapper.find('[data-test-id=\"emailDomainInput\"]').first()\n+      .simulate('change', {target: {value: 'someEmailAddress@domain@org,' +\n+        '\\nsomeDomain.org.com,\\n justSomeText,\\njustDomain.org,\\nbroadinstitute.org#wrongTest'}});\n+    wrapper.find('[data-test-id=\"emailDomainInput\"]').first().simulate('blur');\n+    emailAddressError = wrapper.find('[data-test-id=\"emailDomainError\"]');\n+    expect(emailAddressError.first().props().children)\n+      .toBe('Following Email Domains are not valid : someEmailAddress@domain@org ,  ' +\n+          'justSomeText , broadinstitute.org#wrongTest');\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI4MzYwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1ODoyOFrOGeB5Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo1ODoyOFrOGeB5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MTQ5MA==", "bodyText": "could we make this an enum, something like editMode: InstititionEditMode with InstitutionEditMode having ADD and EDIT values?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434141490", "createdAt": "2020-06-02T19:58:28Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI4ODg3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowMDowOFrOGeB8eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowMDowOFrOGeB8eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MjMyOA==", "bodyText": "This makes me think it means \"show other institutions\" so we should rename it to something which makes it clear it means \"show the other-text field\"", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434142328", "createdAt": "2020-06-02T20:00:08Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI5NDg2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowMjowOFrOGeCARQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowMjowOFrOGeCARQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0MzMwMQ==", "bodyText": "these should match the labels in admin-institution - let's make them use a common source.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434143301", "createdAt": "2020-06-02T20:02:08Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMwMDQwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowNDoxNFrOGeCENA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowNDoxNFrOGeCENA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NDMwOA==", "bodyText": "Update this to \"Health Center / Non-Profit\"", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434144308", "createdAt": "2020-06-02T20:04:14Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMwNzU5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowNjo0MlrOGeCJHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowNjo0MlrOGeCJHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NTU2NA==", "bodyText": "is this a safe way to set state?  We should probably use a local variable here and call setState() to update this list when we're done - or maybe it would be better not to update the state of emailAddresses at all?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434145564", "createdAt": "2020-06-02T20:06:42Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMxMjg5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowODozNVrOGeCMkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowODozNVrOGeCMkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NjQ1MA==", "bodyText": "plural: domains", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434146450", "createdAt": "2020-06-02T20:08:35Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMxMzc0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowODo1MVrOGeCNFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowODo1MVrOGeCNFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NjU4MA==", "bodyText": "remove this line", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434146580", "createdAt": "2020-06-02T20:08:51Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMxNTM1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowOToxNVrOGeCOAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDowOToxNVrOGeCOAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NjgxNg==", "bodyText": "plural", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434146816", "createdAt": "2020-06-02T20:09:15Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMyMjMxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxMTowM1rOGeCR_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMzo0Mzo0N1rOGe0yUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NzgzOQ==", "bodyText": "missing userInstructions", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434147839", "createdAt": "2020-06-02T20:11:03Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3OTQ2OQ==", "bodyText": "User Instruction is optional", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434579469", "createdAt": "2020-06-03T13:47:05Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NzgzOQ=="}, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNDkzNA==", "bodyText": "that is also true for organizationTypeOtherText when type is not Other", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434634934", "createdAt": "2020-06-03T15:00:53Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NzgzOQ=="}, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk3NTMxNA==", "bodyText": "After taking another look i am adding userInstruction check as its for fieldNotEdit back button not required field check. I feel i can remove organizationTypeOtherText as it is redundant", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434975314", "createdAt": "2020-06-04T03:43:47Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0NzgzOQ=="}, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMyNDEwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxMTozOVrOGeCTKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxMTozOVrOGeCTKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0ODEzOA==", "bodyText": "how about validateRequiredFields?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434148138", "createdAt": "2020-06-02T20:11:39Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMyNzI2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxMjo0MVrOGeCVMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxMjo0MVrOGeCVMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0ODY1OQ==", "bodyText": "this shouldn't ever be relevant, but false is safer here", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434148659", "createdAt": "2020-06-02T20:12:41Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMzMTM4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNDowOVrOGeCX_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNDowOVrOGeCX_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE0OTM3Mw==", "bodyText": "why do we need to check displayName specifically?  Isn't \"errors\" enough?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434149373", "createdAt": "2020-06-02T20:14:09Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 206}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMzNjY4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNTo1MlrOGeCbcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNTo1MlrOGeCbcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MDI1Ng==", "bodyText": "why is this necessary?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434150256", "createdAt": "2020-06-02T20:15:52Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDMzOTE2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNjo0NVrOGeCdFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxNjo0NVrOGeCdFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MDY3OA==", "bodyText": "We can't say for certain that this is the reason.  Better to use the error text which is returned here.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434150678", "createdAt": "2020-06-02T20:16:45Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 237}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM0ODA2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoxOTo0MVrOGeCi3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToyNDo0MVrOGfYkww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MjE1OA==", "bodyText": "are these two checking for validity or presence?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434152158", "createdAt": "2020-06-02T20:19:41Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 258}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2MTY2Nw==", "bodyText": "Better but I think we want to either rename this as \"missing\" or flip the sign here.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435561667", "createdAt": "2020-06-04T21:24:41Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MjE1OA=="}, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM1MTMyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMDo0M1rOGeCk6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMDo0M1rOGeCk6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MjY4MA==", "bodyText": "fix", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434152680", "createdAt": "2020-06-02T20:20:43Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM1MjkxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMToxMlrOGeCl2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMToxMlrOGeCl2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MjkyMw==", "bodyText": "fix", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434152923", "createdAt": "2020-06-02T20:21:12Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM1NjIwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMjoyNFrOGeCn-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMjoyNFrOGeCn-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MzQ2Ng==", "bodyText": "plural:Addresses", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434153466", "createdAt": "2020-06-02T20:22:24Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'\n+                      options={this.institutionTypeOptions}\n+                      value={institution.organizationTypeEnum}\n+                      onChange={v => this.updateInstitutionRole(v.value)}/>\n+            <div style={{color: colors.danger}}>{!isAddInstitution && errors && errors.organizationTypeEnum}</div>\n+\n+            {showOtherInstitution && <TextInputWithLabel value={institution.organizationTypeOtherText}\n+               onChange={v => this.setState(fp.set(['institution', 'organizationTypeOtherText'], v))}\n+               inputStyle={{width: '16rem', marginTop: '0.8rem'}}/>}\n+            <label style={styles.label}>Agreement Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='agreement-dropdown'\n+                      placeholder='Your Agreement'\n+                      options={this.institutionAgreementTypeOptions}\n+                      value={institution.duaTypeEnum}\n+                      onChange={v => this.setState(fp.set(['institution', 'duaTypeEnum'], v.value))}/>\n+            {institution.duaTypeEnum === DuaType.RESTRICTED && <FlexColumn data-test-id='emailAddress' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Address</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 349}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM1NjgzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMjozN1rOGeCodQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMjozN1rOGeCodQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1MzU4OQ==", "bodyText": "plural: Domains", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434153589", "createdAt": "2020-06-02T20:22:37Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'\n+                      options={this.institutionTypeOptions}\n+                      value={institution.organizationTypeEnum}\n+                      onChange={v => this.updateInstitutionRole(v.value)}/>\n+            <div style={{color: colors.danger}}>{!isAddInstitution && errors && errors.organizationTypeEnum}</div>\n+\n+            {showOtherInstitution && <TextInputWithLabel value={institution.organizationTypeOtherText}\n+               onChange={v => this.setState(fp.set(['institution', 'organizationTypeOtherText'], v))}\n+               inputStyle={{width: '16rem', marginTop: '0.8rem'}}/>}\n+            <label style={styles.label}>Agreement Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='agreement-dropdown'\n+                      placeholder='Your Agreement'\n+                      options={this.institutionAgreementTypeOptions}\n+                      value={institution.duaTypeEnum}\n+                      onChange={v => this.setState(fp.set(['institution', 'duaTypeEnum'], v.value))}/>\n+            {institution.duaTypeEnum === DuaType.RESTRICTED && <FlexColumn data-test-id='emailAddress' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Address</label>\n+              <TextArea value={institution.emailAddresses && institution.emailAddresses.join(',\\n')}\n+                        data-test-id='emailAddressInput'\n+                        onBlur={(v) => this.validateEmailAddresses()}\n+                  onChange={(v) => this.setEmailDomain(v, 'emailAddresses')}/>\n+              {this.state.invalidEmailAddress && <div data-test-id='emailAddressError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailAddressMsg}\n+                </div>}\n+            </FlexColumn>}\n+            {institution.duaTypeEnum === DuaType.MASTER && <FlexColumn data-test-id='emailDomain' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Domain</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 359}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM1OTIyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMzoyOFrOGeCqCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyMzoyOFrOGeCqCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1Mzk5Mg==", "bodyText": "Plural: instructions\nMaybe something more explicit would be appropriate, like \"User Email Instructions Text\"", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434153992", "createdAt": "2020-06-02T20:23:28Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'\n+                      options={this.institutionTypeOptions}\n+                      value={institution.organizationTypeEnum}\n+                      onChange={v => this.updateInstitutionRole(v.value)}/>\n+            <div style={{color: colors.danger}}>{!isAddInstitution && errors && errors.organizationTypeEnum}</div>\n+\n+            {showOtherInstitution && <TextInputWithLabel value={institution.organizationTypeOtherText}\n+               onChange={v => this.setState(fp.set(['institution', 'organizationTypeOtherText'], v))}\n+               inputStyle={{width: '16rem', marginTop: '0.8rem'}}/>}\n+            <label style={styles.label}>Agreement Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='agreement-dropdown'\n+                      placeholder='Your Agreement'\n+                      options={this.institutionAgreementTypeOptions}\n+                      value={institution.duaTypeEnum}\n+                      onChange={v => this.setState(fp.set(['institution', 'duaTypeEnum'], v.value))}/>\n+            {institution.duaTypeEnum === DuaType.RESTRICTED && <FlexColumn data-test-id='emailAddress' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Address</label>\n+              <TextArea value={institution.emailAddresses && institution.emailAddresses.join(',\\n')}\n+                        data-test-id='emailAddressInput'\n+                        onBlur={(v) => this.validateEmailAddresses()}\n+                  onChange={(v) => this.setEmailDomain(v, 'emailAddresses')}/>\n+              {this.state.invalidEmailAddress && <div data-test-id='emailAddressError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailAddressMsg}\n+                </div>}\n+            </FlexColumn>}\n+            {institution.duaTypeEnum === DuaType.MASTER && <FlexColumn data-test-id='emailDomain' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Domain</label>\n+              <TextArea value={institution.emailDomains && institution.emailDomains.join(',\\n')} onBlur={(v) => this.validateEmailDomain()}\n+                        data-test-id='emailDomainInput'\n+                        onChange={(v) => this.setEmailDomain(v, 'emailDomains')}/>\n+              {this.state.invalidEmailDomain && <div data-test-id='emailDomainError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailDomainsMsg}\n+                </div>}\n+            </FlexColumn>}\n+          </FlexColumn>\n+          <FlexColumn style={{width: '50%', marginRight: '1rem'}}>\n+            <label style={{...styles.label, marginTop: '0rem'}}>User instruction (Optional)</label>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 369}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM2Mjc3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyNDo0NFrOGeCsTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyNDo0NFrOGeCsTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NDU3Mw==", "bodyText": "fix", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434154573", "createdAt": "2020-06-02T20:24:44Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'\n+                      options={this.institutionTypeOptions}\n+                      value={institution.organizationTypeEnum}\n+                      onChange={v => this.updateInstitutionRole(v.value)}/>\n+            <div style={{color: colors.danger}}>{!isAddInstitution && errors && errors.organizationTypeEnum}</div>\n+\n+            {showOtherInstitution && <TextInputWithLabel value={institution.organizationTypeOtherText}\n+               onChange={v => this.setState(fp.set(['institution', 'organizationTypeOtherText'], v))}\n+               inputStyle={{width: '16rem', marginTop: '0.8rem'}}/>}\n+            <label style={styles.label}>Agreement Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='agreement-dropdown'\n+                      placeholder='Your Agreement'\n+                      options={this.institutionAgreementTypeOptions}\n+                      value={institution.duaTypeEnum}\n+                      onChange={v => this.setState(fp.set(['institution', 'duaTypeEnum'], v.value))}/>\n+            {institution.duaTypeEnum === DuaType.RESTRICTED && <FlexColumn data-test-id='emailAddress' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Address</label>\n+              <TextArea value={institution.emailAddresses && institution.emailAddresses.join(',\\n')}\n+                        data-test-id='emailAddressInput'\n+                        onBlur={(v) => this.validateEmailAddresses()}\n+                  onChange={(v) => this.setEmailDomain(v, 'emailAddresses')}/>\n+              {this.state.invalidEmailAddress && <div data-test-id='emailAddressError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailAddressMsg}\n+                </div>}\n+            </FlexColumn>}\n+            {institution.duaTypeEnum === DuaType.MASTER && <FlexColumn data-test-id='emailDomain' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Domain</label>\n+              <TextArea value={institution.emailDomains && institution.emailDomains.join(',\\n')} onBlur={(v) => this.validateEmailDomain()}\n+                        data-test-id='emailDomainInput'\n+                        onChange={(v) => this.setEmailDomain(v, 'emailDomains')}/>\n+              {this.state.invalidEmailDomain && <div data-test-id='emailDomainError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailDomainsMsg}\n+                </div>}\n+            </FlexColumn>}\n+          </FlexColumn>\n+          <FlexColumn style={{width: '50%', marginRight: '1rem'}}>\n+            <label style={{...styles.label, marginTop: '0rem'}}>User instruction (Optional)</label>\n+            <TextArea\n+                id={'areaOfResearch'}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 371}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM2MzkxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyNTowN1rOGeCtCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyNTowN1rOGeCtCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NDc2MA==", "bodyText": "Institution not saved?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434154760", "createdAt": "2020-06-02T20:25:07Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'\n+                      options={this.institutionTypeOptions}\n+                      value={institution.organizationTypeEnum}\n+                      onChange={v => this.updateInstitutionRole(v.value)}/>\n+            <div style={{color: colors.danger}}>{!isAddInstitution && errors && errors.organizationTypeEnum}</div>\n+\n+            {showOtherInstitution && <TextInputWithLabel value={institution.organizationTypeOtherText}\n+               onChange={v => this.setState(fp.set(['institution', 'organizationTypeOtherText'], v))}\n+               inputStyle={{width: '16rem', marginTop: '0.8rem'}}/>}\n+            <label style={styles.label}>Agreement Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='agreement-dropdown'\n+                      placeholder='Your Agreement'\n+                      options={this.institutionAgreementTypeOptions}\n+                      value={institution.duaTypeEnum}\n+                      onChange={v => this.setState(fp.set(['institution', 'duaTypeEnum'], v.value))}/>\n+            {institution.duaTypeEnum === DuaType.RESTRICTED && <FlexColumn data-test-id='emailAddress' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Address</label>\n+              <TextArea value={institution.emailAddresses && institution.emailAddresses.join(',\\n')}\n+                        data-test-id='emailAddressInput'\n+                        onBlur={(v) => this.validateEmailAddresses()}\n+                  onChange={(v) => this.setEmailDomain(v, 'emailAddresses')}/>\n+              {this.state.invalidEmailAddress && <div data-test-id='emailAddressError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailAddressMsg}\n+                </div>}\n+            </FlexColumn>}\n+            {institution.duaTypeEnum === DuaType.MASTER && <FlexColumn data-test-id='emailDomain' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Domain</label>\n+              <TextArea value={institution.emailDomains && institution.emailDomains.join(',\\n')} onBlur={(v) => this.validateEmailDomain()}\n+                        data-test-id='emailDomainInput'\n+                        onChange={(v) => this.setEmailDomain(v, 'emailDomains')}/>\n+              {this.state.invalidEmailDomain && <div data-test-id='emailDomainError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailDomainsMsg}\n+                </div>}\n+            </FlexColumn>}\n+          </FlexColumn>\n+          <FlexColumn style={{width: '50%', marginRight: '1rem'}}>\n+            <label style={{...styles.label, marginTop: '0rem'}}>User instruction (Optional)</label>\n+            <TextArea\n+                id={'areaOfResearch'}\n+                value={institution.userInstructions}\n+                onChange={(s: string) => this.setState(fp.set(['institution', 'userInstructions'], s))}\n+            />\n+          </FlexColumn>\n+        </FlexRow>\n+        {this.state.showBackButtonWarning && <Modal>\n+          <ModalTitle>Information not saved</ModalTitle>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 378}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDM3NDI1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDoyODozMVrOGeCzzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxNToxM1rOGfFJOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NjQ5NQ==", "bodyText": "Is this the right text?  I don't have the right link for the mocks so I can't check.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434156495", "createdAt": "2020-06-02T20:28:31Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'\n+                      options={this.institutionTypeOptions}\n+                      value={institution.organizationTypeEnum}\n+                      onChange={v => this.updateInstitutionRole(v.value)}/>\n+            <div style={{color: colors.danger}}>{!isAddInstitution && errors && errors.organizationTypeEnum}</div>\n+\n+            {showOtherInstitution && <TextInputWithLabel value={institution.organizationTypeOtherText}\n+               onChange={v => this.setState(fp.set(['institution', 'organizationTypeOtherText'], v))}\n+               inputStyle={{width: '16rem', marginTop: '0.8rem'}}/>}\n+            <label style={styles.label}>Agreement Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='agreement-dropdown'\n+                      placeholder='Your Agreement'\n+                      options={this.institutionAgreementTypeOptions}\n+                      value={institution.duaTypeEnum}\n+                      onChange={v => this.setState(fp.set(['institution', 'duaTypeEnum'], v.value))}/>\n+            {institution.duaTypeEnum === DuaType.RESTRICTED && <FlexColumn data-test-id='emailAddress' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Address</label>\n+              <TextArea value={institution.emailAddresses && institution.emailAddresses.join(',\\n')}\n+                        data-test-id='emailAddressInput'\n+                        onBlur={(v) => this.validateEmailAddresses()}\n+                  onChange={(v) => this.setEmailDomain(v, 'emailAddresses')}/>\n+              {this.state.invalidEmailAddress && <div data-test-id='emailAddressError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailAddressMsg}\n+                </div>}\n+            </FlexColumn>}\n+            {institution.duaTypeEnum === DuaType.MASTER && <FlexColumn data-test-id='emailDomain' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Domain</label>\n+              <TextArea value={institution.emailDomains && institution.emailDomains.join(',\\n')} onBlur={(v) => this.validateEmailDomain()}\n+                        data-test-id='emailDomainInput'\n+                        onChange={(v) => this.setEmailDomain(v, 'emailDomains')}/>\n+              {this.state.invalidEmailDomain && <div data-test-id='emailDomainError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailDomainsMsg}\n+                </div>}\n+            </FlexColumn>}\n+          </FlexColumn>\n+          <FlexColumn style={{width: '50%', marginRight: '1rem'}}>\n+            <label style={{...styles.label, marginTop: '0rem'}}>User instruction (Optional)</label>\n+            <TextArea\n+                id={'areaOfResearch'}\n+                value={institution.userInstructions}\n+                onChange={(s: string) => this.setState(fp.set(['institution', 'userInstructions'], s))}\n+            />\n+          </FlexColumn>\n+        </FlexRow>\n+        {this.state.showBackButtonWarning && <Modal>\n+          <ModalTitle>Information not saved</ModalTitle>\n+          <ModalFooter>\n+            <Button onClick={() => this.setState({showBackButtonWarning: false})}\n+                    type='secondary' style={{marginRight: '2rem'}}>Finish Saving</Button>\n+            <Button onClick={() => this.backNavigate()}\n+                    type='primary'>Yes Continue</Button>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 383}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0MzMyMg==", "bodyText": "Yes, thats been approved by Lou. Will ask him to update the mock", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435243322", "createdAt": "2020-06-04T13:15:13Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'\n+                      options={this.institutionTypeOptions}\n+                      value={institution.organizationTypeEnum}\n+                      onChange={v => this.updateInstitutionRole(v.value)}/>\n+            <div style={{color: colors.danger}}>{!isAddInstitution && errors && errors.organizationTypeEnum}</div>\n+\n+            {showOtherInstitution && <TextInputWithLabel value={institution.organizationTypeOtherText}\n+               onChange={v => this.setState(fp.set(['institution', 'organizationTypeOtherText'], v))}\n+               inputStyle={{width: '16rem', marginTop: '0.8rem'}}/>}\n+            <label style={styles.label}>Agreement Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='agreement-dropdown'\n+                      placeholder='Your Agreement'\n+                      options={this.institutionAgreementTypeOptions}\n+                      value={institution.duaTypeEnum}\n+                      onChange={v => this.setState(fp.set(['institution', 'duaTypeEnum'], v.value))}/>\n+            {institution.duaTypeEnum === DuaType.RESTRICTED && <FlexColumn data-test-id='emailAddress' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Address</label>\n+              <TextArea value={institution.emailAddresses && institution.emailAddresses.join(',\\n')}\n+                        data-test-id='emailAddressInput'\n+                        onBlur={(v) => this.validateEmailAddresses()}\n+                  onChange={(v) => this.setEmailDomain(v, 'emailAddresses')}/>\n+              {this.state.invalidEmailAddress && <div data-test-id='emailAddressError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailAddressMsg}\n+                </div>}\n+            </FlexColumn>}\n+            {institution.duaTypeEnum === DuaType.MASTER && <FlexColumn data-test-id='emailDomain' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Domain</label>\n+              <TextArea value={institution.emailDomains && institution.emailDomains.join(',\\n')} onBlur={(v) => this.validateEmailDomain()}\n+                        data-test-id='emailDomainInput'\n+                        onChange={(v) => this.setEmailDomain(v, 'emailDomains')}/>\n+              {this.state.invalidEmailDomain && <div data-test-id='emailDomainError' style={{color: colors.danger}}>\n+                {this.state.invalidEmailDomainsMsg}\n+                </div>}\n+            </FlexColumn>}\n+          </FlexColumn>\n+          <FlexColumn style={{width: '50%', marginRight: '1rem'}}>\n+            <label style={{...styles.label, marginTop: '0rem'}}>User instruction (Optional)</label>\n+            <TextArea\n+                id={'areaOfResearch'}\n+                value={institution.userInstructions}\n+                onChange={(s: string) => this.setState(fp.set(['institution', 'userInstructions'], s))}\n+            />\n+          </FlexColumn>\n+        </FlexRow>\n+        {this.state.showBackButtonWarning && <Modal>\n+          <ModalTitle>Information not saved</ModalTitle>\n+          <ModalFooter>\n+            <Button onClick={() => this.setState({showBackButtonWarning: false})}\n+                    type='secondary' style={{marginRight: '2rem'}}>Finish Saving</Button>\n+            <Button onClick={() => this.backNavigate()}\n+                    type='primary'>Yes Continue</Button>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NjQ5NQ=="}, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 383}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDQwNjQ2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozOToxOFrOGeDJBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMzoxNDozNlrOGfFHeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MTkyNw==", "bodyText": "the mocks do not have commas here", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r434161927", "createdAt": "2020-06-02T20:39:18Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'\n+                      options={this.institutionTypeOptions}\n+                      value={institution.organizationTypeEnum}\n+                      onChange={v => this.updateInstitutionRole(v.value)}/>\n+            <div style={{color: colors.danger}}>{!isAddInstitution && errors && errors.organizationTypeEnum}</div>\n+\n+            {showOtherInstitution && <TextInputWithLabel value={institution.organizationTypeOtherText}\n+               onChange={v => this.setState(fp.set(['institution', 'organizationTypeOtherText'], v))}\n+               inputStyle={{width: '16rem', marginTop: '0.8rem'}}/>}\n+            <label style={styles.label}>Agreement Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='agreement-dropdown'\n+                      placeholder='Your Agreement'\n+                      options={this.institutionAgreementTypeOptions}\n+                      value={institution.duaTypeEnum}\n+                      onChange={v => this.setState(fp.set(['institution', 'duaTypeEnum'], v.value))}/>\n+            {institution.duaTypeEnum === DuaType.RESTRICTED && <FlexColumn data-test-id='emailAddress' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Address</label>\n+              <TextArea value={institution.emailAddresses && institution.emailAddresses.join(',\\n')}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTI0Mjg3Mw==", "bodyText": "Will ask Lou to update, he is aware that  i have added commas to make it easier for us to distinguish between two email addresses/domains", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435242873", "createdAt": "2020-06-04T13:14:36Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,411 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  isAddInstitution: boolean;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitution: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      isAddInstitution: true,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitution: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        isAddInstitution: false,\n+        institution: institutionToEdit,\n+        showOtherInstitution: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({isAddInstitution: true});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center non profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    this.state.institution.emailAddresses = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomain() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomain(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.state.isAddInstitution && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.organizationTypeOtherText ||\n+        institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  noEmptyRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = true;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.noEmptyRequiredFields() || (errors && errors.displayName) || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      this.setState({invalidEmailAddress: false});\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    if (rejectReason.status === 409) {\n+      errorMsg  = 'Institution with Name ' + this.state.institution.displayName + ' already exist';\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitution: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  isEmailAddressValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  isEmailDomainValid() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.state.isAddInstitution ? 'SAVE' : 'ADD';\n+  }\n+\n+\n+  render() {\n+    const {institution, isAddInstitution, showOtherInstitution} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.isEmailAddressValid(),\n+      'emailDomain': !this.isEmailDomainValid(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},\n+      organizationTypeEnum: {presence: {allowEmpty: false}},\n+      duaTypeEnum: {presence: {allowEmpty: false}},\n+      emailAddresses: {truthiness: true},\n+      emailDomain: {truthiness: true}\n+    });\n+    return <div>\n+      <FadeBox style={{marginTop: '1rem', marginLeft: '1rem', width: '1239px'}}>\n+         <FlexRow>\n+           <Scroll\n+              dir='left'\n+              onClick={() => this.backButton()}\n+              style={{width: '1.2rem', margin: '0.4rem 0.4rem 0rem 0rem'}}\n+          /> <SemiBoldHeader style={{fontSize: '18px', lineHeight: '22px', marginBottom: '1rem'}}>\n+          {title}\n+          </SemiBoldHeader>\n+        </FlexRow>\n+        <FlexRow style={{justifyContent: 'flex-end', marginRight: '1rem'}}>\n+          <div>\n+            <Button type='secondary' onClick={() => this.backNavigate()} style={{marginRight: '1.5rem'}}>Cancel</Button>\n+            <TooltipTrigger data-test-id='tooltip' content={\n+              errors && this.disableSave(errors) && <div>Answer required fields\n+                <BulletAlignedUnorderedList>\n+                  {errors.displayName && <li>Display Name should be of at most 80 Characters</li>}\n+                </BulletAlignedUnorderedList>\n+              </div>\n+            } disable={isAddInstitution}>\n+              <Button type='primary' disabled={this.disableSave(errors)} onClick={() => this.saveInstitution()}>\n+                {this.buttonText}\n+              </Button>\n+            </TooltipTrigger>\n+          </div>\n+        </FlexRow>\n+        <FlexRow>\n+          <FlexColumn style={{width: '50%'}}>\n+            <TextInputWithLabel\n+                value={fp.startCase(institution.displayName)}\n+                inputId='displayName'\n+                inputName='displayName'\n+                placeholder='New Username'\n+                labelStyle={styles.label}\n+                inputStyle={{width: '16rem', marginTop: '0.3rem'}}\n+                labelText='Institution Name'\n+                onChange={v => this.setState(fp.set(['institution', 'displayName'], v))}\n+            />\n+            <div style={{color: colors.danger}} data-test-id='displayNameError'>\n+              {!isAddInstitution && errors && errors.displayName}\n+              </div>\n+            <label style={styles.label}>Institution Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='role-dropdown'\n+                      placeholder='Your Role'\n+                      options={this.institutionTypeOptions}\n+                      value={institution.organizationTypeEnum}\n+                      onChange={v => this.updateInstitutionRole(v.value)}/>\n+            <div style={{color: colors.danger}}>{!isAddInstitution && errors && errors.organizationTypeEnum}</div>\n+\n+            {showOtherInstitution && <TextInputWithLabel value={institution.organizationTypeOtherText}\n+               onChange={v => this.setState(fp.set(['institution', 'organizationTypeOtherText'], v))}\n+               inputStyle={{width: '16rem', marginTop: '0.8rem'}}/>}\n+            <label style={styles.label}>Agreement Type</label>\n+            <Dropdown style={{width: '16rem'}} data-test-id='agreement-dropdown'\n+                      placeholder='Your Agreement'\n+                      options={this.institutionAgreementTypeOptions}\n+                      value={institution.duaTypeEnum}\n+                      onChange={v => this.setState(fp.set(['institution', 'duaTypeEnum'], v.value))}/>\n+            {institution.duaTypeEnum === DuaType.RESTRICTED && <FlexColumn data-test-id='emailAddress' style={{width: '16rem'}}>\n+              <label style={styles.label}>Accepted Email Address</label>\n+              <TextArea value={institution.emailAddresses && institution.emailAddresses.join(',\\n')}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE2MTkyNw=="}, "originalCommit": {"oid": "c9476ae698cc631895ba88ab201cc7d445f9d632"}, "originalPosition": 350}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzA0NDcyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-options.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToxNTozOVrOGfYKdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToxNTozOVrOGfYKdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1NDkzNA==", "bodyText": "very nice!", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435554934", "createdAt": "2020-06-04T21:15:39Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-options.tsx", "diffHunk": "@@ -0,0 +1,12 @@\n+import {DuaType, OrganizationType} from 'generated/fetch';\n+\n+export const DuaTypes =  [{label: 'Master', value: DuaType.MASTER},\n+  {label: 'Individual', value: DuaType.RESTRICTED}];\n+\n+export const OrganizationTypeOptions = [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccc7842e56aa73b81a030daed29cc5fa22f0f8c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzA0OTIzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-options.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToxNjozNVrOGfYNCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMToxNjozNVrOGfYNCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU1NTU5NA==", "bodyText": "nitpick: consistent spacing around the slash.  Either 'Health Center/Non-Profit' or 'Health Center / Non-Profit'", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435555594", "createdAt": "2020-06-04T21:16:35Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-options.tsx", "diffHunk": "@@ -0,0 +1,12 @@\n+import {DuaType, OrganizationType} from 'generated/fetch';\n+\n+export const DuaTypes =  [{label: 'Master', value: DuaType.MASTER},\n+  {label: 'Individual', value: DuaType.RESTRICTED}];\n+\n+export const OrganizationTypeOptions = [\n+  {label: 'Industry', value: OrganizationType.INDUSTRY},\n+  {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+  {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+  {label: 'Health Center/ Non-Profit', value: OrganizationType.HEALTHCENTERNONPROFIT},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccc7842e56aa73b81a030daed29cc5fa22f0f8c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzEwNzAzOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozMTozMFrOGfYwgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozMTozMFrOGfYwgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NDY3Mg==", "bodyText": "can remove this now, as well as institutionAgreementTypeOptions", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435564672", "createdAt": "2020-06-04T21:31:30Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,422 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {convertAPIError} from 'app/utils/errors';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+import {DuaTypes, OrganizationTypeOptions} from './admin-institution-options';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+enum InstitutionMode {\n+  ADD,\n+  EDIT\n+}\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  institutionMode: InstitutionMode;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitutionTextBox: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      institutionMode: InstitutionMode.ADD,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitutionTextBox: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        institutionMode: InstitutionMode.EDIT,\n+        institution: institutionToEdit,\n+        showOtherInstitutionTextBox: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({institutionMode: InstitutionMode.ADD});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccc7842e56aa73b81a030daed29cc5fa22f0f8c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzExMTA4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozMjo1NlrOGfYzIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjoyNjo1N1rOGfscRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NTM0NA==", "bodyText": "this looks like another case of unsafe state setting.  also, what is it intended to do?", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435565344", "createdAt": "2020-06-04T21:32:56Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,422 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {convertAPIError} from 'app/utils/errors';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+import {DuaTypes, OrganizationTypeOptions} from './admin-institution-options';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+enum InstitutionMode {\n+  ADD,\n+  EDIT\n+}\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  institutionMode: InstitutionMode;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitutionTextBox: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      institutionMode: InstitutionMode.ADD,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitutionTextBox: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        institutionMode: InstitutionMode.EDIT,\n+        institution: institutionToEdit,\n+        showOtherInstitutionTextBox: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({institutionMode: InstitutionMode.ADD});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center/ Non-Profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    const emailAddressWithNO = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.setState(fp.set(['institution', 'emailAddresses'], emailAddressWithNO));\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomains() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccc7842e56aa73b81a030daed29cc5fa22f0f8c"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg4NzE3Mw==", "bodyText": "remove empty emailDomains \"If you want to keep only truthy values you may use .filter(e => e)\" however i might use trim as well just to avoid strings like '    '", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435887173", "createdAt": "2020-06-05T12:26:57Z", "author": {"login": "NehaBroad"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,422 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {convertAPIError} from 'app/utils/errors';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+import {DuaTypes, OrganizationTypeOptions} from './admin-institution-options';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+enum InstitutionMode {\n+  ADD,\n+  EDIT\n+}\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  institutionMode: InstitutionMode;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitutionTextBox: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      institutionMode: InstitutionMode.ADD,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitutionTextBox: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        institutionMode: InstitutionMode.EDIT,\n+        institution: institutionToEdit,\n+        showOtherInstitutionTextBox: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({institutionMode: InstitutionMode.ADD});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center/ Non-Profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    const emailAddressWithNO = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.setState(fp.set(['institution', 'emailAddresses'], emailAddressWithNO));\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomains() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NTM0NA=="}, "originalCommit": {"oid": "8ccc7842e56aa73b81a030daed29cc5fa22f0f8c"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzExMzE5OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozMzo1MFrOGfY0jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozMzo1MFrOGfY0jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NTcxMA==", "bodyText": "better to use the Add vs Edit state here", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435565710", "createdAt": "2020-06-04T21:33:50Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,422 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {convertAPIError} from 'app/utils/errors';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+import {DuaTypes, OrganizationTypeOptions} from './admin-institution-options';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+enum InstitutionMode {\n+  ADD,\n+  EDIT\n+}\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  institutionMode: InstitutionMode;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitutionTextBox: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      institutionMode: InstitutionMode.ADD,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitutionTextBox: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        institutionMode: InstitutionMode.EDIT,\n+        institution: institutionToEdit,\n+        showOtherInstitutionTextBox: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({institutionMode: InstitutionMode.ADD});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center/ Non-Profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    const emailAddressWithNO = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.setState(fp.set(['institution', 'emailAddresses'], emailAddressWithNO));\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomains() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomains(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.isAddInstitutionMode && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.userInstructions ||\n+      institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  validateRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = false;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.validateRequiredFields() || errors || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccc7842e56aa73b81a030daed29cc5fa22f0f8c"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzExNTQxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozNDo0MlrOGfY2Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozNDo0MlrOGfY2Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NjA5NA==", "bodyText": "this is pretty cool", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r435566094", "createdAt": "2020-06-04T21:34:42Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,422 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {convertAPIError} from 'app/utils/errors';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+import {DuaTypes, OrganizationTypeOptions} from './admin-institution-options';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+enum InstitutionMode {\n+  ADD,\n+  EDIT\n+}\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  institutionMode: InstitutionMode;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitutionTextBox: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      institutionMode: InstitutionMode.ADD,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitutionTextBox: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        institutionMode: InstitutionMode.EDIT,\n+        institution: institutionToEdit,\n+        showOtherInstitutionTextBox: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({institutionMode: InstitutionMode.ADD});\n+    }\n+\n+  }\n+\n+  get institutionTypeOptions() {\n+    const options = [\n+      {label: 'Industry', value: OrganizationType.INDUSTRY},\n+      {label: 'Academic Research Institution', value: OrganizationType.ACADEMICRESEARCHINSTITUTION},\n+      {label: 'Educational Institution', value: OrganizationType.EDUCATIONALINSTITUTION},\n+      {label: 'Health Center/ Non-Profit', value: OrganizationType.HEALTHCENTERNONPROFIT},\n+      {label: 'Other', value: OrganizationType.OTHER}\n+    ];\n+    return options;\n+  }\n+\n+  get institutionAgreementTypeOptions() {\n+    const options = [\n+      {label: 'Master', value: DuaType.MASTER},\n+      {label: 'Individual', value: DuaType.RESTRICTED}\n+    ];\n+    return options;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    const emailAddressWithNO = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.setState(fp.set(['institution', 'emailAddresses'], emailAddressWithNO));\n+    this.state.institution.emailAddresses.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomains() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    this.state.institution.emailDomains =  emailDomains.filter(emailDomain => emailDomain);\n+    this.state.institution.emailDomains.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomains(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.isAddInstitutionMode && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.userInstructions ||\n+      institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  validateRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = false;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.validateRequiredFields() || errors || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (this.props.urlParams.institutionId) {\n+      await institutionApi().updateInstitution(this.props.urlParams.institutionId, institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    } else {\n+      await institutionApi().createInstitution(institution)\n+        .then(value => this.backNavigate())\n+        .catch(reason => this.handleError(reason));\n+    }\n+  }\n+\n+  async handleError(rejectReason) {\n+    let errorMsg = 'Error while saving Institution. Please try again later';\n+    const error = await convertAPIError(rejectReason);\n+    if (rejectReason.status === 409) {\n+      errorMsg  = error.message;\n+    }\n+    this.setState({apiErrorMsg: errorMsg, showApiError: true});\n+  }\n+  updateInstitutionRole(institutionRole) {\n+    this.setState({showOtherInstitutionTextBox: institutionRole === OrganizationType.OTHER});\n+    this.setState(fp.set(['institution', 'organizationTypeEnum'], institutionRole));\n+  }\n+\n+  backButton() {\n+    if (!this.fieldsNotEdited()) {\n+      this.setState({showBackButtonWarning: true});\n+    } else {\n+      this.backNavigate();\n+    }\n+  }\n+\n+  backNavigate() {\n+    navigate(['admin/institution']);\n+  }\n+\n+  validateEmailAddressPresence() {\n+    return this.state.institution.duaTypeEnum === DuaType.RESTRICTED && !this.state.institution.emailAddresses;\n+  }\n+\n+  validateEmailDomainPresence() {\n+    return this.state.institution.duaTypeEnum === DuaType.MASTER && !this.state.institution.emailDomains;\n+  }\n+\n+  get buttonText() {\n+    return !this.isAddInstitutionMode ? 'SAVE' : 'ADD';\n+  }\n+\n+  get isAddInstitutionMode() {\n+    return this.state.institutionMode === InstitutionMode.ADD;\n+  }\n+\n+  render() {\n+    const {institution, showOtherInstitutionTextBox} = this.state;\n+    const {\n+      displayName, organizationTypeEnum, duaTypeEnum\n+    } = institution;\n+    const errors = validate({\n+      displayName,\n+      'emailAddresses': !this.validateEmailAddressPresence(),\n+      'emailDomain': !this.validateEmailDomainPresence(),\n+      organizationTypeEnum,\n+      duaTypeEnum\n+    }, {\n+      displayName: {presence: {allowEmpty: false}, length: {maximum: 80, tooLong: 'must be %{count} characters or less'}},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ccc7842e56aa73b81a030daed29cc5fa22f0f8c"}, "originalPosition": 294}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDkxMzQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/resources/workbench-api.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0NjoyOFrOGgiB0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo0NjoyOFrOGgiB0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2NTEzOA==", "bodyText": "Something like:\nDataIntegrityViolationException was thrown, possibly due to an attempt to create a duplicate Institution.", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r436765138", "createdAt": "2020-06-08T14:46:28Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/resources/workbench-api.yaml", "diffHunk": "@@ -2347,6 +2347,15 @@ paths:\n           description: 'The Institution created by this operation.'\n           schema:\n             \"$ref\": \"#/definitions/Institution\"\n+        400:\n+          description: Bad request\n+          schema:\n+            \"$ref\": \"#/definitions/ErrorResponse\"\n+        409:\n+          description: Institution with same display Name already exist", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe2dc1960509f6ce9b49a58d97e995ef4719821"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDkzNTEwOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo1MToyNFrOGgiPEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDo1MToyNFrOGgiPEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc2ODUzMA==", "bodyText": "if (institutionEditMode === InstitutionMode.EDIT)", "url": "https://github.com/all-of-us/workbench/pull/3634#discussion_r436768530", "createdAt": "2020-06-08T14:51:24Z", "author": {"login": "jmthibault79"}, "path": "ui/src/app/pages/admin/admin-institution-edit.tsx", "diffHunk": "@@ -0,0 +1,410 @@\n+import {Component} from '@angular/core';\n+import {Button} from 'app/components/buttons';\n+import {FadeBox} from 'app/components/containers';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {SemiBoldHeader} from 'app/components/headers';\n+import {TextArea} from 'app/components/inputs';\n+import {BulletAlignedUnorderedList} from 'app/components/lists';\n+import {Modal, ModalBody, ModalFooter, ModalTitle} from 'app/components/modals';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Scroll} from 'app/icons/scroll';\n+import {TextInputWithLabel} from 'app/pages/login/account-creation/common';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, UrlParamsProps, withUrlParams} from 'app/utils';\n+import {convertAPIError} from 'app/utils/errors';\n+import {navigate} from 'app/utils/navigation';\n+import {DuaType, Institution, OrganizationType} from 'generated/fetch';\n+import * as fp from 'lodash/fp';\n+import {Dropdown} from 'primereact/dropdown';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+import {DuaTypes, OrganizationTypeOptions} from './admin-institution-options';\n+\n+const styles = reactStyles({\n+  label: {\n+    fontSize: '14px',\n+    fontWeight: 600,\n+    letterSpacing: 0,\n+    lineHeight: '22px',\n+    color: colors.primary,\n+    marginTop: '2rem',\n+    marginBottom: '0.3rem'\n+  }\n+});\n+\n+enum InstitutionMode {\n+  ADD,\n+  EDIT\n+}\n+\n+interface InstitutionEditState {\n+  apiErrorMsg: string;\n+  institutionMode: InstitutionMode;\n+  institution: Institution;\n+  invalidEmailAddress: boolean;\n+  invalidEmailAddressMsg: string;\n+  invalidEmailDomain: boolean;\n+  invalidEmailDomainsMsg: string;\n+  showOtherInstitutionTextBox: boolean;\n+  showBackButtonWarning: boolean;\n+  showApiError: boolean;\n+}\n+\n+let title = 'Add new Institution';\n+let institutionToEdit;\n+\n+export class AdminInstitutionEditImpl extends React.Component<UrlParamsProps, InstitutionEditState> {\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      apiErrorMsg: '',\n+      institutionMode: InstitutionMode.ADD,\n+      institution: {\n+        shortName: '',\n+        displayName: '',\n+        organizationTypeEnum: null\n+      },\n+      invalidEmailAddress: false,\n+      invalidEmailAddressMsg: '',\n+      invalidEmailDomain: false,\n+      invalidEmailDomainsMsg: '',\n+      showOtherInstitutionTextBox: false,\n+      showBackButtonWarning: false,\n+      showApiError: false\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    // If institution short Name is passed in the URL get the institution details\n+    if (this.props.urlParams.institutionId) {\n+      institutionToEdit = await institutionApi().getInstitution(this.props.urlParams.institutionId);\n+      title = institutionToEdit.displayName;\n+      this.setState({\n+        institutionMode: InstitutionMode.EDIT,\n+        institution: institutionToEdit,\n+        showOtherInstitutionTextBox: institutionToEdit.organizationTypeEnum === OrganizationType.OTHER\n+      });\n+    } else {\n+      title = 'Add new Institution';\n+      this.setState({institutionMode: InstitutionMode.ADD});\n+    }\n+\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email is a valid email using validate.js\n+  validateEmailAddresses() {\n+    const invalidEmailAddress = [];\n+    const {emailAddresses} = this.state.institution;\n+    const updatedEmailAddress = emailAddresses.filter(\n+      emailAddress => {\n+        return emailAddress !== '' || !!emailAddress;\n+      });\n+\n+    this.setState(fp.set(['institution', 'emailAddresses'], updatedEmailAddress));\n+    updatedEmailAddress.map(emailAddress => {\n+      const errors = validate({\n+        emailAddress\n+      }, {\n+        emailAddress: {email: true}\n+      });\n+      if (errors && errors.emailAddress && errors.emailAddress.length > 0) {\n+        invalidEmailAddress.push(emailAddress);\n+      }\n+    });\n+    this.setState({invalidEmailAddress: invalidEmailAddress.length > 0});\n+    if (invalidEmailAddress.length > 0) {\n+      const errMessage = 'Following Email Addresses are not valid : ' + invalidEmailAddress.join(' , ');\n+      this.setState({invalidEmailAddressMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  // Filter out empty line or empty email addresses like <email1>,,<email2>\n+  // Confirm each email domain matches with regex\n+  validateEmailDomains() {\n+    const invalidEmailDomain = [];\n+    const {emailDomains} = this.state.institution;\n+    const emailDomainsWithNoEmptyString =\n+      emailDomains.filter(emailDomain => emailDomain.trim() !== '');\n+    this.setState(fp.set(['institution', 'emailDomains'], emailDomainsWithNoEmptyString));\n+\n+    emailDomainsWithNoEmptyString.map(emailDomain => {\n+      const errors = validate({\n+        emailDomain\n+      }, {\n+        emailDomain: {format: {pattern: /[a-zA-z\\-\\.]+[.][a-zA-Z]+/i}}\n+      });\n+      if (errors && errors.emailDomain && errors.emailDomain.length > 0) {\n+        invalidEmailDomain.push(emailDomain);\n+      }\n+    });\n+    this.setState({invalidEmailDomain: invalidEmailDomain.length > 0});\n+    if (invalidEmailDomain.length > 0) {\n+      const errMessage = 'Following Email Domains are not valid : ' + invalidEmailDomain.join(' , ');\n+      this.setState({invalidEmailDomainsMsg: errMessage});\n+    }\n+    return;\n+  }\n+\n+  setEmailDomains(emailDomains, attribute) {\n+    const emailDomainList = emailDomains.split(/[,\\n]+/);\n+    this.setState(fp.set(['institution', attribute], emailDomainList));\n+  }\n+\n+  // Check if the fields have not been edited\n+  fieldsNotEdited() {\n+    return (this.isAddInstitutionMode && !this.fieldsNotEditedAddInstitution)\n+        || (institutionToEdit && this.fieldsNotEditedEditInstitution);\n+  }\n+\n+  get fieldsNotEditedAddInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName || institution.userInstructions ||\n+      institution.organizationTypeEnum || institution.duaTypeEnum || institution.emailAddresses || institution.emailDomains;\n+  }\n+\n+  get fieldsNotEditedEditInstitution() {\n+    const {institution} = this.state;\n+    return institution.displayName === institutionToEdit.displayName &&\n+        institution.organizationTypeEnum === institutionToEdit.organizationTypeEnum &&\n+        institution.duaTypeEnum === institutionToEdit.duaTypeEnum &&\n+        institution.emailAddresses === institutionToEdit.emailAddresses &&\n+        institution.emailDomains === institutionToEdit.emailDomains &&\n+        institution.userInstructions === institutionToEdit.userInstructions &&\n+        institution.organizationTypeOtherText === institutionToEdit.organizationTypeOtherText;\n+  }\n+\n+\n+  validateRequiredFields() {\n+    const {institution} = this.state;\n+    let emailValid = false;\n+    if (institution.duaTypeEnum) {\n+      emailValid = institution.duaTypeEnum === DuaType.MASTER ?\n+          institution.emailDomains !== undefined : institution.emailAddresses !== undefined;\n+    }\n+    return !emailValid || !institution.displayName || !institution.organizationTypeEnum ||\n+      !institution.duaTypeEnum ||\n+        (institution.organizationTypeEnum === OrganizationType.OTHER &&\n+            !institution.organizationTypeOtherText);\n+  }\n+\n+  // Disable save button if\n+  // a) No fields were edited or if there are any errors\n+  // b) email address/Domain are not valid\n+  // c) Required fields are not empty\n+  disableSave(errors) {\n+    return this.validateRequiredFields() || errors || this.fieldsNotEdited()\n+      || this.state.invalidEmailAddress || this.state.invalidEmailDomain;\n+  }\n+\n+  async saveInstitution() {\n+    const {institution} = this.state;\n+    if (institution) {\n+      if (institution.duaTypeEnum === DuaType.MASTER) {\n+        institution.emailAddresses = [];\n+      } else {\n+        institution.emailDomains = [];\n+      }\n+      if (institution.organizationTypeEnum !== OrganizationType.OTHER) {\n+        institution.organizationTypeOtherText = null;\n+      }\n+    }\n+    if (InstitutionMode.EDIT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afe2dc1960509f6ce9b49a58d97e995ef4719821"}, "originalPosition": 214}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2759, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}