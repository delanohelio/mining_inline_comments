{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2NTk4MjQ4", "number": 3325, "title": "[RW-4554][risk=no] Convert CB tree to React", "bodyText": "Convert components for tree in cohort builder search from Angular to React.\nAlso includes a good bit of refactoring and cleanup, most notably moving several stores from search-state.service into React props/state.\n\n@freemabd to deploy and test CB functionality\n@blrubenstein to review React conversions. The PR is quite large due to cleanup and changes from side-effects, so feel free to just focus on the new React components:\nsearch-bar.component.tsx, tree.component.tsx and tree-node.component.tsx\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally", "createdAt": "2020-03-31T20:58:55Z", "url": "https://github.com/all-of-us/workbench/pull/3325", "merged": true, "mergeCommit": {"oid": "616699a5b2fa317113c0f040dc3fabf565415554"}, "closed": true, "closedAt": "2020-04-07T21:21:29Z", "author": {"login": "dolbeew"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTwYxwgFqTM4NjY3MjY1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVAZI4gFqTM4ODM2MjIwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NjcyNjUz", "url": "https://github.com/all-of-us/workbench/pull/3325#pullrequestreview-386672653", "createdAt": "2020-04-02T18:05:26Z", "commit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODowNToyNlrOF_3Vjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxODoxMTo1OVrOF_3kFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTI0Ng==", "bodyText": "Nit: Could you use rems for the height here?", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r402511246", "createdAt": "2020-04-02T18:05:26Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/search-bar/search-bar.component.tsx", "diffHunk": "@@ -0,0 +1,300 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+import {domainToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+import {Key} from 'ts-key-enum';\n+\n+const styles = reactStyles({\n+  searchContainer: {\n+    background: colors.white,\n+    width: '100%',\n+    zIndex: 10,\n+  },\n+  searchBar: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    borderRadius: '5px',\n+    height: '40px',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTM1Mw==", "bodyText": "Nit: Can you use rems for the padding?", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r402511353", "createdAt": "2020-04-02T18:05:40Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/search-bar/search-bar.component.tsx", "diffHunk": "@@ -0,0 +1,300 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+import {domainToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+import {Key} from 'ts-key-enum';\n+\n+const styles = reactStyles({\n+  searchContainer: {\n+    background: colors.white,\n+    width: '100%',\n+    zIndex: 10,\n+  },\n+  searchBar: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    borderRadius: '5px',\n+    height: '40px',\n+    padding: '7px 14px',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTY2Ng==", "bodyText": "Nit: you can use colors variable here. Use backticks, and then you can insert variables into the string with ${}", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r402511666", "createdAt": "2020-04-02T18:06:13Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/search-bar/search-bar.component.tsx", "diffHunk": "@@ -0,0 +1,300 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+import {domainToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+import {Key} from 'ts-key-enum';\n+\n+const styles = reactStyles({\n+  searchContainer: {\n+    background: colors.white,\n+    width: '100%',\n+    zIndex: 10,\n+  },\n+  searchBar: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    borderRadius: '5px',\n+    height: '40px',\n+    padding: '7px 14px',\n+  },\n+  searchInput: {\n+    background: 'transparent',\n+    border: 0,\n+    height: '1rem',\n+    marginLeft: '0.25rem',\n+    outline: 'none',\n+    padding: '0',\n+    width: '85%',\n+  },\n+  dropdownMenu: {\n+    position: 'absolute',\n+    top: '100%',\n+    left: 0,\n+    marginTop: '.083333rem',\n+    display: 'flex',\n+    flexDirection: 'column',\n+    background: colors.white,\n+    padding: '.25rem 0',\n+    border: '1px solid #ccc',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMjQzNg==", "bodyText": "I think we have a dropdown component. Could you reuse that here? If not, what is stopping you?\nIf we don't have a dropdown component, I'd love to make one.", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r402512436", "createdAt": "2020-04-02T18:07:38Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/search-bar/search-bar.component.tsx", "diffHunk": "@@ -0,0 +1,300 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+import {domainToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+import {Key} from 'ts-key-enum';\n+\n+const styles = reactStyles({\n+  searchContainer: {\n+    background: colors.white,\n+    width: '100%',\n+    zIndex: 10,\n+  },\n+  searchBar: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    borderRadius: '5px',\n+    height: '40px',\n+    padding: '7px 14px',\n+  },\n+  searchInput: {\n+    background: 'transparent',\n+    border: 0,\n+    height: '1rem',\n+    marginLeft: '0.25rem',\n+    outline: 'none',\n+    padding: '0',\n+    width: '85%',\n+  },\n+  dropdownMenu: {\n+    position: 'absolute',\n+    top: '100%',\n+    left: 0,\n+    marginTop: '.083333rem',\n+    display: 'flex',\n+    flexDirection: 'column',\n+    background: colors.white,\n+    padding: '.25rem 0',\n+    border: '1px solid #ccc',\n+    boxShadow: '0 1px 0.125rem hsla(0,0%,45%,.25)',\n+    maxHeight: '15rem',\n+    minHeight: '1.25rem',\n+    overflowY: 'auto',\n+    width: '100%',\n+    borderRadius: '.125rem',\n+    zIndex: 1000\n+  },\n+  dropdownItem: {\n+    height: '1rem',\n+    background: 'transparent',\n+    border: 0,\n+    cursor: 'pointer',\n+    margin: 0,\n+    overflow: 'hidden',\n+    padding: '0 1rem',\n+    textAlign: 'left',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap',\n+    width: '100%'\n+  }\n+});\n+\n+const trigger = 3;\n+\n+interface OptionProps {\n+  onClick: Function;\n+  option: any;\n+  searchTerm: string;\n+  highlighted: boolean;\n+}\n+\n+interface OptionState {\n+  hover: boolean;\n+  truncated: boolean;\n+}\n+\n+class SearchBarOption extends React.Component<OptionProps, OptionState> {\n+  container: HTMLButtonElement;\n+  constructor(props: OptionProps) {\n+    super(props);\n+    this.state = {\n+      hover: false,\n+      truncated: false\n+    };\n+  }\n+\n+  handleResize = fp.debounce(100, () => {\n+    this.checkContainerWidth();\n+  });\n+\n+  componentDidMount(): void {\n+    this.checkContainerWidth();\n+    window.addEventListener('resize', this.handleResize);\n+  }\n+\n+  componentWillUnmount(): void {\n+    window.removeEventListener('resize', this.handleResize);\n+  }\n+\n+  checkContainerWidth() {\n+    const {offsetWidth, scrollWidth} = this.container;\n+    this.setState({truncated: scrollWidth > offsetWidth});\n+  }\n+\n+  render() {\n+    const {highlighted, onClick, option: {name}, searchTerm} = this.props;\n+    const {hover} = this.state;\n+    const displayText = highlightSearchTerm(searchTerm, name, colors.success);\n+    return <div>\n+      <TooltipTrigger content={<div>{displayText}</div>} disabled={!this.state.truncated}>\n+        <button ref={(e) => this.container = e}\n+          style={highlighted || hover ? {...styles.dropdownItem, background: colorWithWhiteness(colors.black, .93)} : styles.dropdownItem}\n+          onClick={() => onClick()}\n+          onMouseEnter={() => this.setState({hover: true})}\n+          onMouseLeave={() => this.setState({hover: false})}>\n+            {displayText}\n+        </button>\n+      </TooltipTrigger>\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  node: Criteria;\n+  searchTerms: string;\n+  setIngredients: Function;\n+  selectOption: Function;\n+  setInput: Function;\n+}\n+\n+interface State {\n+  options: Array<any>;\n+  loading: boolean;\n+  optionSelected: boolean;\n+  error: boolean;\n+  highlightedOption: number;\n+  subtype: string;\n+}\n+\n+export class SearchBar extends React.Component<Props, State> {\n+  dropdown: HTMLDivElement;\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      options: null,\n+      loading: false,\n+      optionSelected: false,\n+      error: false,\n+      highlightedOption: null,\n+      subtype: undefined,\n+    };\n+  }\n+\n+  debounceInput = fp.debounce(300, (input: string) => {\n+    if (input.length < trigger) {\n+      this.setState({options: null});\n+    } else {\n+      this.handleInput();\n+    }\n+  });\n+\n+  componentDidMount() {\n+    document.addEventListener('click', (e) => {\n+      if (!!this.dropdown && !this.dropdown.contains(e.target as Node)) {\n+        this.setState({options: null});\n+      }\n+    });\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {node: {domainId}, searchTerms} = this.props;\n+    if (searchTerms !== prevProps.searchTerms) {\n+      if (domainId === DomainType.PHYSICALMEASUREMENT.toString()) {\n+        triggerEvent(`Cohort Builder Search - Physical Measurements`, 'Search', searchTerms);\n+      } else if (this.state.optionSelected) {\n+        this.setState({optionSelected: false});\n+      } else {\n+        this.debounceInput(searchTerms);\n+      }\n+    }\n+  }\n+\n+  handleInput() {\n+    const {node: {domainId, isStandard, type}, searchTerms} = this.props;\n+    triggerEvent(`Cohort Builder Search - ${domainToTitle(domainId)}`, 'Search', searchTerms);\n+    this.setState({loading: true});\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const apiCall = domainId === DomainType.DRUG.toString()\n+      ? cohortBuilderApi().getDrugBrandOrIngredientByValue(+cdrVersionId, searchTerms)\n+      : cohortBuilderApi().getCriteriaAutoComplete(+cdrVersionId, domainId, searchTerms, type, isStandard);\n+    apiCall.then(resp => {\n+      const optionNames: Array<string> = [];\n+      const options = resp.items.filter(option => {\n+        if (!optionNames.includes(option.name)) {\n+          optionNames.push(option.name);\n+          return true;\n+        }\n+        return false;\n+      });\n+      this.setState({highlightedOption: null, loading: false, options});\n+    }, (err) => this.setState({error: err}));\n+  }\n+\n+  get showOverflow() {\n+    const {options} = this.state;\n+    return options && options.length <= 10;\n+  }\n+\n+  selectOption(option: any) {\n+    if (option) {\n+      const {selectOption, setIngredients, setInput} = this.props;\n+      setInput(option.name);\n+      this.setState({highlightedOption: null, options: null, optionSelected: true});\n+      if (option.type === CriteriaType.BRAND.toString()) {\n+        const cdrId = +(currentWorkspaceStore.getValue().cdrVersionId);\n+        cohortBuilderApi().getDrugIngredientByConceptId(cdrId, option.conceptId)\n+          .then(resp => {\n+            if (resp.items.length) {\n+              const ingredients = resp.items.map(it => it.name);\n+              setIngredients(ingredients);\n+              // just grabbing the first one on the list for now\n+              selectOption(resp.items[0]);\n+            }\n+          });\n+      } else {\n+        setIngredients(null);\n+        selectOption(option);\n+      }\n+    }\n+  }\n+\n+  onKeyDown(key: Key) {\n+    switch (key) {\n+      case Key.ArrowDown:\n+        this.moveDown();\n+        break;\n+      case Key.ArrowUp:\n+        this.moveUp();\n+        break;\n+      case Key.Enter:\n+        this.enterSelect();\n+    }\n+  }\n+\n+  moveUp() {\n+    const {highlightedOption} = this.state;\n+    if (highlightedOption === 0) {\n+      this.setState({highlightedOption: null});\n+    } else if (highlightedOption > 0) {\n+      this.setState({highlightedOption: highlightedOption - 1});\n+    }\n+  }\n+\n+  moveDown() {\n+    const {highlightedOption, options} = this.state;\n+    if (highlightedOption === null) {\n+      this.setState({highlightedOption: 0});\n+    } else if ((highlightedOption + 1) < options.length) {\n+      this.setState({highlightedOption: highlightedOption + 1});\n+    }\n+  }\n+\n+  enterSelect() {\n+    const {highlightedOption, options} = this.state;\n+    this.selectOption(options[highlightedOption]);\n+  }\n+\n+  render() {\n+    const {highlightedOption, loading, options} = this.state;\n+    const inputValue = highlightedOption !== null ? options[highlightedOption].name : this.props.searchTerms;\n+    return <div style={{position: 'relative', width: '100%'}}>\n+      <div style={styles.searchContainer}>\n+        <div style={styles.searchBar}>\n+          {loading ? <Spinner style={{verticalAlign: 'middle'}} size={16}/> : <ClrIcon shape='search' size='18'/>}\n+          <TextInput style={styles.searchInput}\n+            value={inputValue}\n+            onChange={(e) => this.props.setInput(e)}\n+            onKeyDown={(e) => this.onKeyDown(e.key)}/>\n+        </div>\n+      </div>\n+      {options !== null && <div ref={(el) => this.dropdown = el} style={styles.dropdownMenu}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMzM4NQ==", "bodyText": "Could you use the colors variables here? (using the backtick and ${} method?)", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r402513385", "createdAt": "2020-04-02T18:09:14Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -0,0 +1,347 @@\n+import * as React from 'react';\n+\n+import {PREDEFINED_ATTRIBUTES} from 'app/cohort-search/constant';\n+import {ppiQuestions} from 'app/cohort-search/search-state.service';\n+import {domainToTitle, subTypeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {AttrName, Criteria, CriteriaSubType, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  code: {\n+    color: colors.dark,\n+    fontWeight: 'bold',\n+    marginRight: '0.25rem',\n+    whiteSpace: 'nowrap'\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMzU3Mw==", "bodyText": "Is this doable with colors variables? If not, what's missing?", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r402513573", "createdAt": "2020-04-02T18:09:33Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -0,0 +1,347 @@\n+import * as React from 'react';\n+\n+import {PREDEFINED_ATTRIBUTES} from 'app/cohort-search/constant';\n+import {ppiQuestions} from 'app/cohort-search/search-state.service';\n+import {domainToTitle, subTypeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {AttrName, Criteria, CriteriaSubType, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  code: {\n+    color: colors.dark,\n+    fontWeight: 'bold',\n+    marginRight: '0.25rem',\n+    whiteSpace: 'nowrap'\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  iconButton: {\n+    background: 'transparent',\n+    border: 0,\n+    cursor: 'pointer',\n+    flex: '0 0 1.25rem',\n+    height: '1.25rem',\n+    lineHeight: '1rem',\n+    padding: 0,\n+    width: '1.25rem',\n+  },\n+  name: {\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  searchMatch: {\n+    color: '#659F3D',\n+    fontWeight: 'bolder',\n+    backgroundColor: 'rgba(101,159,61,0.2)',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMzY5OA==", "bodyText": "Nit: Please use colors file where possible.", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r402513698", "createdAt": "2020-04-02T18:09:46Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -0,0 +1,347 @@\n+import * as React from 'react';\n+\n+import {PREDEFINED_ATTRIBUTES} from 'app/cohort-search/constant';\n+import {ppiQuestions} from 'app/cohort-search/search-state.service';\n+import {domainToTitle, subTypeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {AttrName, Criteria, CriteriaSubType, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  code: {\n+    color: colors.dark,\n+    fontWeight: 'bold',\n+    marginRight: '0.25rem',\n+    whiteSpace: 'nowrap'\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  iconButton: {\n+    background: 'transparent',\n+    border: 0,\n+    cursor: 'pointer',\n+    flex: '0 0 1.25rem',\n+    height: '1.25rem',\n+    lineHeight: '1rem',\n+    padding: 0,\n+    width: '1.25rem',\n+  },\n+  name: {\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  searchMatch: {\n+    color: '#659F3D',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxNDQxNg==", "bodyText": "Opt Nit: Should this be a FontAwesome icon?", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r402514416", "createdAt": "2020-04-02T18:11:02Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -0,0 +1,347 @@\n+import * as React from 'react';\n+\n+import {PREDEFINED_ATTRIBUTES} from 'app/cohort-search/constant';\n+import {ppiQuestions} from 'app/cohort-search/search-state.service';\n+import {domainToTitle, subTypeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {AttrName, Criteria, CriteriaSubType, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  code: {\n+    color: colors.dark,\n+    fontWeight: 'bold',\n+    marginRight: '0.25rem',\n+    whiteSpace: 'nowrap'\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  iconButton: {\n+    background: 'transparent',\n+    border: 0,\n+    cursor: 'pointer',\n+    flex: '0 0 1.25rem',\n+    height: '1.25rem',\n+    lineHeight: '1rem',\n+    padding: 0,\n+    width: '1.25rem',\n+  },\n+  name: {\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  searchMatch: {\n+    color: '#659F3D',\n+    fontWeight: 'bolder',\n+    backgroundColor: 'rgba(101,159,61,0.2)',\n+    padding: '2px 0',\n+    whiteSpace: 'nowrap'\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    margin: '5px'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  treeNode: {\n+    alignItems: 'center',\n+    display: 'flex'\n+  },\n+  treeNodeContent: {\n+    cursor: 'pointer',\n+    display: 'flex',\n+    flexFlow: 'row nowrap',\n+    lineHeight: '1.25rem',\n+    margin: 0,\n+    paddingLeft: '0.25rem',\n+    width: '90%'\n+  }\n+});\n+\n+export interface NodeProp extends Criteria {\n+  children: Array<NodeProp>;\n+}\n+\n+interface TreeNodeProps {\n+  autocompleteSelection: any;\n+  expand?: Function;\n+  groupSelections: Array<number>;\n+  node: NodeProp;\n+  scrollToMatch: Function;\n+  searchTerms: string;\n+  select: Function;\n+  selectedIds: Array<string>;\n+  setAttributes: Function;\n+}\n+\n+interface TreeNodeState {\n+  children: Array<any>;\n+  error: boolean;\n+  expanded: boolean;\n+  hover: boolean;\n+  loading: boolean;\n+  searchMatch: boolean;\n+  truncated: boolean;\n+}\n+\n+export class TreeNode extends React.Component<TreeNodeProps, TreeNodeState> {\n+  name: HTMLDivElement;\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      children: undefined,\n+      error: false,\n+      expanded: false,\n+      hover: false,\n+      loading: false,\n+      searchMatch: false,\n+      truncated: false\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (!!this.props.autocompleteSelection) {\n+      this.checkAutocomplete();\n+    }\n+    const {offsetWidth, scrollWidth} = this.name;\n+    this.setState({truncated: scrollWidth > offsetWidth});\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<TreeNodeProps>): void {\n+    const {autocompleteSelection, node: {domainId, group}, searchTerms} = this.props;\n+    if (domainId === DomainType.PHYSICALMEASUREMENT.toString() && group && searchTerms !== prevProps.searchTerms) {\n+      this.searchChildren();\n+    }\n+    if (!!autocompleteSelection && autocompleteSelection !== prevProps.autocompleteSelection) {\n+      this.checkAutocomplete();\n+    }\n+  }\n+\n+  loadChildren() {\n+    const {node: {count, domainId, id, isStandard, name, type}} = this.props;\n+    this.setState({loading: true});\n+    const {cdrVersionId} = (currentWorkspaceStore.getValue());\n+    const criteriaType = domainId === DomainType.DRUG.toString() ? CriteriaType.ATC.toString() : type;\n+    cohortBuilderApi().getCriteriaBy(+cdrVersionId, domainId, criteriaType, isStandard, id)\n+      .then(resp => {\n+        if (resp.items.length === 0 && domainId === DomainType.DRUG.toString()) {\n+          cohortBuilderApi()\n+            .getCriteriaBy(+cdrVersionId, domainId, CriteriaType[CriteriaType.RXNORM], isStandard, id)\n+            .then(rxResp => {\n+              this.setState({children: rxResp.items, loading: false});\n+            }, () => this.setState({error: true}));\n+        } else {\n+          this.setState({children: resp.items, loading: false});\n+          if (resp.items.length > 0 && domainId === DomainType.SURVEY.toString() && !resp.items[0].group) {\n+            // save questions in the store so we can display them along with answers if selected\n+            const questions = ppiQuestions.getValue();\n+            questions[id] = {count, name};\n+            ppiQuestions.next(questions);\n+          }\n+        }\n+      })\n+      .catch(error => {\n+        console.error(error);\n+        this.setState({error: true, loading: false});\n+      });\n+  }\n+\n+  searchChildren() {\n+    const {expand, node: {children, parentId}, searchTerms} = this.props;\n+    if (!!searchTerms && children.some(child => child.name.toLowerCase().includes(searchTerms.toLowerCase()))) {\n+      if (parentId !== 0) {\n+        setTimeout(() => expand());\n+      }\n+      this.setState({expanded: true});\n+    } else {\n+      this.setState({expanded: false});\n+    }\n+  }\n+\n+  checkAutocomplete() {\n+    const {autocompleteSelection, node: {id}, scrollToMatch} = this.props;\n+    const subtree = autocompleteSelection.path.split('.');\n+    const expanded = subtree.includes(id.toString());\n+    const searchMatch = subtree[subtree.length - 1] === id.toString();\n+    if (expanded && !this.state.children) {\n+      this.loadChildren();\n+    }\n+    if (searchMatch) {\n+      scrollToMatch(id);\n+    }\n+    this.setState({expanded, searchMatch});\n+  }\n+\n+  toggleExpanded() {\n+    const {node: {domainId, group, name, parentId, subtype}} = this.props;\n+    if (group) {\n+      const {children, expanded} = this.state;\n+      if (!expanded) {\n+        if (parentId === 0) {\n+          const labelName = domainId === DomainType.SURVEY.toString() ? name : subTypeToTitle(subtype);\n+          triggerEvent('Cohort Builder Search', 'Click', `${domainToTitle(domainId)} - ${labelName} - Expand`);\n+        }\n+        if (domainId !== DomainType.PHYSICALMEASUREMENT.toString() && !children) {\n+          this.loadChildren();\n+        }\n+      }\n+      this.setState({expanded: !expanded});\n+    }\n+  }\n+\n+  get paramId() {\n+    const {node: {code, conceptId, domainId, id}} = this.props;\n+    return `param${!!conceptId && domainId !== DomainType.SURVEY.toString() ? (conceptId + code) : id}`;\n+  }\n+\n+  get isPMCat() {\n+    return [CriteriaSubType.WHEEL, CriteriaSubType.PREG, CriteriaSubType.HRIRR, CriteriaSubType.HRNOIRR]\n+      .map(st => st.toString())\n+      .includes(this.props.node.subtype);\n+  }\n+\n+  get showCount() {\n+    const {node: {code, count, group, selectable, subtype, type}} = this.props;\n+    return count > -1 &&\n+      (selectable || (subtype === CriteriaSubType.LAB.toString() && group && code !== null) || type === CriteriaType.CPT4.toString());\n+  }\n+\n+  select(event: Event) {\n+    event.stopPropagation();\n+    const {node, node: {conceptId, domainId, group, parentId, subtype, value}, select, selectedIds} = this.props;\n+    let {node: {name}} = this.props;\n+    if (!selectedIds.includes(this.paramId)) {\n+      let attributes = [];\n+      if (subtype === CriteriaSubType.BP.toString()) {\n+        Object.keys(PREDEFINED_ATTRIBUTES).forEach(key => {\n+          if (name.indexOf(key) === 0) {\n+            attributes = PREDEFINED_ATTRIBUTES[key];\n+          }\n+        });\n+      } else if (this.isPMCat) {\n+        attributes.push({\n+          name: AttrName.CAT,\n+          operator: Operator.IN,\n+          operands: [value]\n+        });\n+      } else if (domainId === DomainType.SURVEY.toString() && !group) {\n+        const question = ppiQuestions.getValue()[parentId];\n+        if (question) {\n+          name = `${question.name} - ${name}`;\n+        }\n+        const attribute = conceptId === 1585747\n+          ? {name: AttrName.NUM, operator: Operator.EQUAL, operands: [value]}\n+          : {name: AttrName.CAT, operator: Operator.IN, operands: [value]};\n+        attributes.push(attribute);\n+      }\n+      const param = {\n+        ...node as Object,\n+        parameterId: this.paramId,\n+        attributes,\n+        name\n+      };\n+      select(param);\n+    }\n+  }\n+\n+  render() {\n+    const {autocompleteSelection, groupSelections, node,\n+      node: {code, count, domainId, id, group, hasAttributes, name, parentId, selectable}, scrollToMatch, searchTerms, select, selectedIds,\n+      setAttributes} = this.props;\n+    const {children, error, expanded, hover, loading, searchMatch} = this.state;\n+    const nodeChildren = domainId === DomainType.PHYSICALMEASUREMENT.toString() ? node.children : children;\n+    const selected = selectedIds.includes(this.paramId) || groupSelections.includes(parentId);\n+    const displayName = domainId === DomainType.PHYSICALMEASUREMENT.toString() && !!searchTerms\n+      ? highlightSearchTerm(searchTerms, name, colors.success)\n+      : name;\n+    return <React.Fragment>\n+      <div style={{...styles.treeNode}} id={`node${id}`} onClick={() => this.toggleExpanded()}>\n+        {group && <button style={styles.iconButton}>\n+          {loading\n+            ? <Spinner size={16}/>\n+            : <ClrIcon style={{color: colors.disabled}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxNDk2Ng==", "bodyText": "Nit: Could this use colors variables?", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r402514966", "createdAt": "2020-04-02T18:11:59Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/cohort-search/tree/tree.component.tsx", "diffHunk": "@@ -0,0 +1,228 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {SearchBar} from 'app/cohort-search/search-bar/search-bar.component';\n+import {TreeNode} from 'app/cohort-search/tree-node/tree-node.component';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, withCurrentWorkspace} from 'app/utils';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzExMDM2", "url": "https://github.com/all-of-us/workbench/pull/3325#pullrequestreview-386711036", "createdAt": "2020-04-02T18:58:43Z", "commit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NDY4NTk1", "url": "https://github.com/all-of-us/workbench/pull/3325#pullrequestreview-387468595", "createdAt": "2020-04-03T17:59:16Z", "commit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzo1OToxNlrOGAhWxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxODoyMDowOFrOGAicaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE5OTY4NQ==", "bodyText": "We have a <Select/> component and I also considered using PrimeReact's AutoComplete component, but neither had everything we needed, mainly highlighting and tooltips for the autocomplete options:\n\nI agree, it would be nice to make this a reusable component with the option to pass in a custom template for the autocomplete options. Will make a ticket in CB tech debt.", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r403199685", "createdAt": "2020-04-03T17:59:16Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/search-bar/search-bar.component.tsx", "diffHunk": "@@ -0,0 +1,300 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+import {domainToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+import {Key} from 'ts-key-enum';\n+\n+const styles = reactStyles({\n+  searchContainer: {\n+    background: colors.white,\n+    width: '100%',\n+    zIndex: 10,\n+  },\n+  searchBar: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    borderRadius: '5px',\n+    height: '40px',\n+    padding: '7px 14px',\n+  },\n+  searchInput: {\n+    background: 'transparent',\n+    border: 0,\n+    height: '1rem',\n+    marginLeft: '0.25rem',\n+    outline: 'none',\n+    padding: '0',\n+    width: '85%',\n+  },\n+  dropdownMenu: {\n+    position: 'absolute',\n+    top: '100%',\n+    left: 0,\n+    marginTop: '.083333rem',\n+    display: 'flex',\n+    flexDirection: 'column',\n+    background: colors.white,\n+    padding: '.25rem 0',\n+    border: '1px solid #ccc',\n+    boxShadow: '0 1px 0.125rem hsla(0,0%,45%,.25)',\n+    maxHeight: '15rem',\n+    minHeight: '1.25rem',\n+    overflowY: 'auto',\n+    width: '100%',\n+    borderRadius: '.125rem',\n+    zIndex: 1000\n+  },\n+  dropdownItem: {\n+    height: '1rem',\n+    background: 'transparent',\n+    border: 0,\n+    cursor: 'pointer',\n+    margin: 0,\n+    overflow: 'hidden',\n+    padding: '0 1rem',\n+    textAlign: 'left',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap',\n+    width: '100%'\n+  }\n+});\n+\n+const trigger = 3;\n+\n+interface OptionProps {\n+  onClick: Function;\n+  option: any;\n+  searchTerm: string;\n+  highlighted: boolean;\n+}\n+\n+interface OptionState {\n+  hover: boolean;\n+  truncated: boolean;\n+}\n+\n+class SearchBarOption extends React.Component<OptionProps, OptionState> {\n+  container: HTMLButtonElement;\n+  constructor(props: OptionProps) {\n+    super(props);\n+    this.state = {\n+      hover: false,\n+      truncated: false\n+    };\n+  }\n+\n+  handleResize = fp.debounce(100, () => {\n+    this.checkContainerWidth();\n+  });\n+\n+  componentDidMount(): void {\n+    this.checkContainerWidth();\n+    window.addEventListener('resize', this.handleResize);\n+  }\n+\n+  componentWillUnmount(): void {\n+    window.removeEventListener('resize', this.handleResize);\n+  }\n+\n+  checkContainerWidth() {\n+    const {offsetWidth, scrollWidth} = this.container;\n+    this.setState({truncated: scrollWidth > offsetWidth});\n+  }\n+\n+  render() {\n+    const {highlighted, onClick, option: {name}, searchTerm} = this.props;\n+    const {hover} = this.state;\n+    const displayText = highlightSearchTerm(searchTerm, name, colors.success);\n+    return <div>\n+      <TooltipTrigger content={<div>{displayText}</div>} disabled={!this.state.truncated}>\n+        <button ref={(e) => this.container = e}\n+          style={highlighted || hover ? {...styles.dropdownItem, background: colorWithWhiteness(colors.black, .93)} : styles.dropdownItem}\n+          onClick={() => onClick()}\n+          onMouseEnter={() => this.setState({hover: true})}\n+          onMouseLeave={() => this.setState({hover: false})}>\n+            {displayText}\n+        </button>\n+      </TooltipTrigger>\n+    </div>;\n+  }\n+}\n+\n+interface Props {\n+  node: Criteria;\n+  searchTerms: string;\n+  setIngredients: Function;\n+  selectOption: Function;\n+  setInput: Function;\n+}\n+\n+interface State {\n+  options: Array<any>;\n+  loading: boolean;\n+  optionSelected: boolean;\n+  error: boolean;\n+  highlightedOption: number;\n+  subtype: string;\n+}\n+\n+export class SearchBar extends React.Component<Props, State> {\n+  dropdown: HTMLDivElement;\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      options: null,\n+      loading: false,\n+      optionSelected: false,\n+      error: false,\n+      highlightedOption: null,\n+      subtype: undefined,\n+    };\n+  }\n+\n+  debounceInput = fp.debounce(300, (input: string) => {\n+    if (input.length < trigger) {\n+      this.setState({options: null});\n+    } else {\n+      this.handleInput();\n+    }\n+  });\n+\n+  componentDidMount() {\n+    document.addEventListener('click', (e) => {\n+      if (!!this.dropdown && !this.dropdown.contains(e.target as Node)) {\n+        this.setState({options: null});\n+      }\n+    });\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<Props>): void {\n+    const {node: {domainId}, searchTerms} = this.props;\n+    if (searchTerms !== prevProps.searchTerms) {\n+      if (domainId === DomainType.PHYSICALMEASUREMENT.toString()) {\n+        triggerEvent(`Cohort Builder Search - Physical Measurements`, 'Search', searchTerms);\n+      } else if (this.state.optionSelected) {\n+        this.setState({optionSelected: false});\n+      } else {\n+        this.debounceInput(searchTerms);\n+      }\n+    }\n+  }\n+\n+  handleInput() {\n+    const {node: {domainId, isStandard, type}, searchTerms} = this.props;\n+    triggerEvent(`Cohort Builder Search - ${domainToTitle(domainId)}`, 'Search', searchTerms);\n+    this.setState({loading: true});\n+    const {cdrVersionId} = currentWorkspaceStore.getValue();\n+    const apiCall = domainId === DomainType.DRUG.toString()\n+      ? cohortBuilderApi().getDrugBrandOrIngredientByValue(+cdrVersionId, searchTerms)\n+      : cohortBuilderApi().getCriteriaAutoComplete(+cdrVersionId, domainId, searchTerms, type, isStandard);\n+    apiCall.then(resp => {\n+      const optionNames: Array<string> = [];\n+      const options = resp.items.filter(option => {\n+        if (!optionNames.includes(option.name)) {\n+          optionNames.push(option.name);\n+          return true;\n+        }\n+        return false;\n+      });\n+      this.setState({highlightedOption: null, loading: false, options});\n+    }, (err) => this.setState({error: err}));\n+  }\n+\n+  get showOverflow() {\n+    const {options} = this.state;\n+    return options && options.length <= 10;\n+  }\n+\n+  selectOption(option: any) {\n+    if (option) {\n+      const {selectOption, setIngredients, setInput} = this.props;\n+      setInput(option.name);\n+      this.setState({highlightedOption: null, options: null, optionSelected: true});\n+      if (option.type === CriteriaType.BRAND.toString()) {\n+        const cdrId = +(currentWorkspaceStore.getValue().cdrVersionId);\n+        cohortBuilderApi().getDrugIngredientByConceptId(cdrId, option.conceptId)\n+          .then(resp => {\n+            if (resp.items.length) {\n+              const ingredients = resp.items.map(it => it.name);\n+              setIngredients(ingredients);\n+              // just grabbing the first one on the list for now\n+              selectOption(resp.items[0]);\n+            }\n+          });\n+      } else {\n+        setIngredients(null);\n+        selectOption(option);\n+      }\n+    }\n+  }\n+\n+  onKeyDown(key: Key) {\n+    switch (key) {\n+      case Key.ArrowDown:\n+        this.moveDown();\n+        break;\n+      case Key.ArrowUp:\n+        this.moveUp();\n+        break;\n+      case Key.Enter:\n+        this.enterSelect();\n+    }\n+  }\n+\n+  moveUp() {\n+    const {highlightedOption} = this.state;\n+    if (highlightedOption === 0) {\n+      this.setState({highlightedOption: null});\n+    } else if (highlightedOption > 0) {\n+      this.setState({highlightedOption: highlightedOption - 1});\n+    }\n+  }\n+\n+  moveDown() {\n+    const {highlightedOption, options} = this.state;\n+    if (highlightedOption === null) {\n+      this.setState({highlightedOption: 0});\n+    } else if ((highlightedOption + 1) < options.length) {\n+      this.setState({highlightedOption: highlightedOption + 1});\n+    }\n+  }\n+\n+  enterSelect() {\n+    const {highlightedOption, options} = this.state;\n+    this.selectOption(options[highlightedOption]);\n+  }\n+\n+  render() {\n+    const {highlightedOption, loading, options} = this.state;\n+    const inputValue = highlightedOption !== null ? options[highlightedOption].name : this.props.searchTerms;\n+    return <div style={{position: 'relative', width: '100%'}}>\n+      <div style={styles.searchContainer}>\n+        <div style={styles.searchBar}>\n+          {loading ? <Spinner style={{verticalAlign: 'middle'}} size={16}/> : <ClrIcon shape='search' size='18'/>}\n+          <TextInput style={styles.searchInput}\n+            value={inputValue}\n+            onChange={(e) => this.props.setInput(e)}\n+            onKeyDown={(e) => this.onKeyDown(e.key)}/>\n+        </div>\n+      </div>\n+      {options !== null && <div ref={(el) => this.dropdown = el} style={styles.dropdownMenu}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMjQzNg=="}, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIwODg0OA==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r403208848", "createdAt": "2020-04-03T18:10:08Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -0,0 +1,347 @@\n+import * as React from 'react';\n+\n+import {PREDEFINED_ATTRIBUTES} from 'app/cohort-search/constant';\n+import {ppiQuestions} from 'app/cohort-search/search-state.service';\n+import {domainToTitle, subTypeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {AttrName, Criteria, CriteriaSubType, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  code: {\n+    color: colors.dark,\n+    fontWeight: 'bold',\n+    marginRight: '0.25rem',\n+    whiteSpace: 'nowrap'\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMzM4NQ=="}, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMTU0MQ==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r403211541", "createdAt": "2020-04-03T18:13:13Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -0,0 +1,347 @@\n+import * as React from 'react';\n+\n+import {PREDEFINED_ATTRIBUTES} from 'app/cohort-search/constant';\n+import {ppiQuestions} from 'app/cohort-search/search-state.service';\n+import {domainToTitle, subTypeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {AttrName, Criteria, CriteriaSubType, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  code: {\n+    color: colors.dark,\n+    fontWeight: 'bold',\n+    marginRight: '0.25rem',\n+    whiteSpace: 'nowrap'\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  iconButton: {\n+    background: 'transparent',\n+    border: 0,\n+    cursor: 'pointer',\n+    flex: '0 0 1.25rem',\n+    height: '1.25rem',\n+    lineHeight: '1rem',\n+    padding: 0,\n+    width: '1.25rem',\n+  },\n+  name: {\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  searchMatch: {\n+    color: '#659F3D',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMzY5OA=="}, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxMTgyOA==", "bodyText": "It is doable. Fixed.", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r403211828", "createdAt": "2020-04-03T18:13:33Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -0,0 +1,347 @@\n+import * as React from 'react';\n+\n+import {PREDEFINED_ATTRIBUTES} from 'app/cohort-search/constant';\n+import {ppiQuestions} from 'app/cohort-search/search-state.service';\n+import {domainToTitle, subTypeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {AttrName, Criteria, CriteriaSubType, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  code: {\n+    color: colors.dark,\n+    fontWeight: 'bold',\n+    marginRight: '0.25rem',\n+    whiteSpace: 'nowrap'\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  iconButton: {\n+    background: 'transparent',\n+    border: 0,\n+    cursor: 'pointer',\n+    flex: '0 0 1.25rem',\n+    height: '1.25rem',\n+    lineHeight: '1rem',\n+    padding: 0,\n+    width: '1.25rem',\n+  },\n+  name: {\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  searchMatch: {\n+    color: '#659F3D',\n+    fontWeight: 'bolder',\n+    backgroundColor: 'rgba(101,159,61,0.2)',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMzU3Mw=="}, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNjM4NA==", "bodyText": "We could use FA here, not sure if it's required. The only work I've done that called for FA specifically was the sidebar icons. Would be good to use a consistent set across the app though, especially since the Clarity stuff will probably go away eventually with Angular.\nI haven't looked at them in while, but I'd want to find a better way to use FA (specifically the Pro set). Currently just downloading the SVG and sticking the path in the src attribute of an <img/ tag. Will create a ticket for that also.", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r403216384", "createdAt": "2020-04-03T18:18:53Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/tree-node/tree-node.component.tsx", "diffHunk": "@@ -0,0 +1,347 @@\n+import * as React from 'react';\n+\n+import {PREDEFINED_ATTRIBUTES} from 'app/cohort-search/constant';\n+import {ppiQuestions} from 'app/cohort-search/search-state.service';\n+import {domainToTitle, subTypeToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {AttrName, Criteria, CriteriaSubType, CriteriaType, DomainType, Operator} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  code: {\n+    color: colors.dark,\n+    fontWeight: 'bold',\n+    marginRight: '0.25rem',\n+    whiteSpace: 'nowrap'\n+  },\n+  count: {\n+    alignItems: 'center',\n+    background: colors.accent,\n+    borderRadius: '10px',\n+    color: colors.white,\n+    display: 'inline-flex',\n+    fontSize: '10px',\n+    height: '0.625rem',\n+    justifyContent: 'center',\n+    lineHeight: 'normal',\n+    margin: '0 0.25rem',\n+    minWidth: '0.675rem',\n+    padding: '0 4px',\n+    verticalAlign: 'middle'\n+  },\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',\n+    borderRadius: '5px',\n+    marginTop: '0.25rem',\n+    padding: '8px',\n+  },\n+  iconButton: {\n+    background: 'transparent',\n+    border: 0,\n+    cursor: 'pointer',\n+    flex: '0 0 1.25rem',\n+    height: '1.25rem',\n+    lineHeight: '1rem',\n+    padding: 0,\n+    width: '1.25rem',\n+  },\n+  name: {\n+    overflow: 'hidden',\n+    textOverflow: 'ellipsis',\n+    whiteSpace: 'nowrap'\n+  },\n+  searchMatch: {\n+    color: '#659F3D',\n+    fontWeight: 'bolder',\n+    backgroundColor: 'rgba(101,159,61,0.2)',\n+    padding: '2px 0',\n+    whiteSpace: 'nowrap'\n+  },\n+  selectIcon: {\n+    color: colors.select,\n+    margin: '5px'\n+  },\n+  selected: {\n+    cursor: 'not-allowed',\n+    opacity: 0.4\n+  },\n+  treeNode: {\n+    alignItems: 'center',\n+    display: 'flex'\n+  },\n+  treeNodeContent: {\n+    cursor: 'pointer',\n+    display: 'flex',\n+    flexFlow: 'row nowrap',\n+    lineHeight: '1.25rem',\n+    margin: 0,\n+    paddingLeft: '0.25rem',\n+    width: '90%'\n+  }\n+});\n+\n+export interface NodeProp extends Criteria {\n+  children: Array<NodeProp>;\n+}\n+\n+interface TreeNodeProps {\n+  autocompleteSelection: any;\n+  expand?: Function;\n+  groupSelections: Array<number>;\n+  node: NodeProp;\n+  scrollToMatch: Function;\n+  searchTerms: string;\n+  select: Function;\n+  selectedIds: Array<string>;\n+  setAttributes: Function;\n+}\n+\n+interface TreeNodeState {\n+  children: Array<any>;\n+  error: boolean;\n+  expanded: boolean;\n+  hover: boolean;\n+  loading: boolean;\n+  searchMatch: boolean;\n+  truncated: boolean;\n+}\n+\n+export class TreeNode extends React.Component<TreeNodeProps, TreeNodeState> {\n+  name: HTMLDivElement;\n+  constructor(props) {\n+    super(props);\n+    this.state = {\n+      children: undefined,\n+      error: false,\n+      expanded: false,\n+      hover: false,\n+      loading: false,\n+      searchMatch: false,\n+      truncated: false\n+    };\n+  }\n+\n+  componentDidMount(): void {\n+    if (!!this.props.autocompleteSelection) {\n+      this.checkAutocomplete();\n+    }\n+    const {offsetWidth, scrollWidth} = this.name;\n+    this.setState({truncated: scrollWidth > offsetWidth});\n+  }\n+\n+  componentDidUpdate(prevProps: Readonly<TreeNodeProps>): void {\n+    const {autocompleteSelection, node: {domainId, group}, searchTerms} = this.props;\n+    if (domainId === DomainType.PHYSICALMEASUREMENT.toString() && group && searchTerms !== prevProps.searchTerms) {\n+      this.searchChildren();\n+    }\n+    if (!!autocompleteSelection && autocompleteSelection !== prevProps.autocompleteSelection) {\n+      this.checkAutocomplete();\n+    }\n+  }\n+\n+  loadChildren() {\n+    const {node: {count, domainId, id, isStandard, name, type}} = this.props;\n+    this.setState({loading: true});\n+    const {cdrVersionId} = (currentWorkspaceStore.getValue());\n+    const criteriaType = domainId === DomainType.DRUG.toString() ? CriteriaType.ATC.toString() : type;\n+    cohortBuilderApi().getCriteriaBy(+cdrVersionId, domainId, criteriaType, isStandard, id)\n+      .then(resp => {\n+        if (resp.items.length === 0 && domainId === DomainType.DRUG.toString()) {\n+          cohortBuilderApi()\n+            .getCriteriaBy(+cdrVersionId, domainId, CriteriaType[CriteriaType.RXNORM], isStandard, id)\n+            .then(rxResp => {\n+              this.setState({children: rxResp.items, loading: false});\n+            }, () => this.setState({error: true}));\n+        } else {\n+          this.setState({children: resp.items, loading: false});\n+          if (resp.items.length > 0 && domainId === DomainType.SURVEY.toString() && !resp.items[0].group) {\n+            // save questions in the store so we can display them along with answers if selected\n+            const questions = ppiQuestions.getValue();\n+            questions[id] = {count, name};\n+            ppiQuestions.next(questions);\n+          }\n+        }\n+      })\n+      .catch(error => {\n+        console.error(error);\n+        this.setState({error: true, loading: false});\n+      });\n+  }\n+\n+  searchChildren() {\n+    const {expand, node: {children, parentId}, searchTerms} = this.props;\n+    if (!!searchTerms && children.some(child => child.name.toLowerCase().includes(searchTerms.toLowerCase()))) {\n+      if (parentId !== 0) {\n+        setTimeout(() => expand());\n+      }\n+      this.setState({expanded: true});\n+    } else {\n+      this.setState({expanded: false});\n+    }\n+  }\n+\n+  checkAutocomplete() {\n+    const {autocompleteSelection, node: {id}, scrollToMatch} = this.props;\n+    const subtree = autocompleteSelection.path.split('.');\n+    const expanded = subtree.includes(id.toString());\n+    const searchMatch = subtree[subtree.length - 1] === id.toString();\n+    if (expanded && !this.state.children) {\n+      this.loadChildren();\n+    }\n+    if (searchMatch) {\n+      scrollToMatch(id);\n+    }\n+    this.setState({expanded, searchMatch});\n+  }\n+\n+  toggleExpanded() {\n+    const {node: {domainId, group, name, parentId, subtype}} = this.props;\n+    if (group) {\n+      const {children, expanded} = this.state;\n+      if (!expanded) {\n+        if (parentId === 0) {\n+          const labelName = domainId === DomainType.SURVEY.toString() ? name : subTypeToTitle(subtype);\n+          triggerEvent('Cohort Builder Search', 'Click', `${domainToTitle(domainId)} - ${labelName} - Expand`);\n+        }\n+        if (domainId !== DomainType.PHYSICALMEASUREMENT.toString() && !children) {\n+          this.loadChildren();\n+        }\n+      }\n+      this.setState({expanded: !expanded});\n+    }\n+  }\n+\n+  get paramId() {\n+    const {node: {code, conceptId, domainId, id}} = this.props;\n+    return `param${!!conceptId && domainId !== DomainType.SURVEY.toString() ? (conceptId + code) : id}`;\n+  }\n+\n+  get isPMCat() {\n+    return [CriteriaSubType.WHEEL, CriteriaSubType.PREG, CriteriaSubType.HRIRR, CriteriaSubType.HRNOIRR]\n+      .map(st => st.toString())\n+      .includes(this.props.node.subtype);\n+  }\n+\n+  get showCount() {\n+    const {node: {code, count, group, selectable, subtype, type}} = this.props;\n+    return count > -1 &&\n+      (selectable || (subtype === CriteriaSubType.LAB.toString() && group && code !== null) || type === CriteriaType.CPT4.toString());\n+  }\n+\n+  select(event: Event) {\n+    event.stopPropagation();\n+    const {node, node: {conceptId, domainId, group, parentId, subtype, value}, select, selectedIds} = this.props;\n+    let {node: {name}} = this.props;\n+    if (!selectedIds.includes(this.paramId)) {\n+      let attributes = [];\n+      if (subtype === CriteriaSubType.BP.toString()) {\n+        Object.keys(PREDEFINED_ATTRIBUTES).forEach(key => {\n+          if (name.indexOf(key) === 0) {\n+            attributes = PREDEFINED_ATTRIBUTES[key];\n+          }\n+        });\n+      } else if (this.isPMCat) {\n+        attributes.push({\n+          name: AttrName.CAT,\n+          operator: Operator.IN,\n+          operands: [value]\n+        });\n+      } else if (domainId === DomainType.SURVEY.toString() && !group) {\n+        const question = ppiQuestions.getValue()[parentId];\n+        if (question) {\n+          name = `${question.name} - ${name}`;\n+        }\n+        const attribute = conceptId === 1585747\n+          ? {name: AttrName.NUM, operator: Operator.EQUAL, operands: [value]}\n+          : {name: AttrName.CAT, operator: Operator.IN, operands: [value]};\n+        attributes.push(attribute);\n+      }\n+      const param = {\n+        ...node as Object,\n+        parameterId: this.paramId,\n+        attributes,\n+        name\n+      };\n+      select(param);\n+    }\n+  }\n+\n+  render() {\n+    const {autocompleteSelection, groupSelections, node,\n+      node: {code, count, domainId, id, group, hasAttributes, name, parentId, selectable}, scrollToMatch, searchTerms, select, selectedIds,\n+      setAttributes} = this.props;\n+    const {children, error, expanded, hover, loading, searchMatch} = this.state;\n+    const nodeChildren = domainId === DomainType.PHYSICALMEASUREMENT.toString() ? node.children : children;\n+    const selected = selectedIds.includes(this.paramId) || groupSelections.includes(parentId);\n+    const displayName = domainId === DomainType.PHYSICALMEASUREMENT.toString() && !!searchTerms\n+      ? highlightSearchTerm(searchTerms, name, colors.success)\n+      : name;\n+    return <React.Fragment>\n+      <div style={{...styles.treeNode}} id={`node${id}`} onClick={() => this.toggleExpanded()}>\n+        {group && <button style={styles.iconButton}>\n+          {loading\n+            ? <Spinner size={16}/>\n+            : <ClrIcon style={{color: colors.disabled}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxNDQxNg=="}, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 295}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNzE0Nw==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r403217147", "createdAt": "2020-04-03T18:19:44Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/tree/tree.component.tsx", "diffHunk": "@@ -0,0 +1,228 @@\n+import {Component, Input} from '@angular/core';\n+import * as React from 'react';\n+\n+import {SearchBar} from 'app/cohort-search/search-bar/search-bar.component';\n+import {TreeNode} from 'app/cohort-search/tree-node/tree-node.component';\n+import {ClrIcon} from 'app/components/icons';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles, ReactWrapperBase, withCurrentWorkspace} from 'app/utils';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+\n+const styles = reactStyles({\n+  error: {\n+    background: colors.warning,\n+    color: colors.white,\n+    fontSize: '12px',\n+    fontWeight: 500,\n+    textAlign: 'left',\n+    border: '1px solid #ebafa6',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxNDk2Ng=="}, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNzI3Ng==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r403217276", "createdAt": "2020-04-03T18:19:54Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/search-bar/search-bar.component.tsx", "diffHunk": "@@ -0,0 +1,300 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+import {domainToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+import {Key} from 'ts-key-enum';\n+\n+const styles = reactStyles({\n+  searchContainer: {\n+    background: colors.white,\n+    width: '100%',\n+    zIndex: 10,\n+  },\n+  searchBar: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    borderRadius: '5px',\n+    height: '40px',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTI0Ng=="}, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNzM3Mw==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r403217373", "createdAt": "2020-04-03T18:20:00Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/search-bar/search-bar.component.tsx", "diffHunk": "@@ -0,0 +1,300 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+import {domainToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+import {Key} from 'ts-key-enum';\n+\n+const styles = reactStyles({\n+  searchContainer: {\n+    background: colors.white,\n+    width: '100%',\n+    zIndex: 10,\n+  },\n+  searchBar: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    borderRadius: '5px',\n+    height: '40px',\n+    padding: '7px 14px',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTM1Mw=="}, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzIxNzUxMg==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3325#discussion_r403217512", "createdAt": "2020-04-03T18:20:08Z", "author": {"login": "dolbeew"}, "path": "ui/src/app/cohort-search/search-bar/search-bar.component.tsx", "diffHunk": "@@ -0,0 +1,300 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+import {domainToTitle} from 'app/cohort-search/utils';\n+import {ClrIcon} from 'app/components/icons';\n+import {TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {Spinner} from 'app/components/spinners';\n+import {cohortBuilderApi} from 'app/services/swagger-fetch-clients';\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {highlightSearchTerm, reactStyles} from 'app/utils';\n+import {triggerEvent} from 'app/utils/analytics';\n+import {currentWorkspaceStore} from 'app/utils/navigation';\n+import {Criteria, CriteriaType, DomainType} from 'generated/fetch';\n+import {Key} from 'ts-key-enum';\n+\n+const styles = reactStyles({\n+  searchContainer: {\n+    background: colors.white,\n+    width: '100%',\n+    zIndex: 10,\n+  },\n+  searchBar: {\n+    backgroundColor: colorWithWhiteness(colors.secondary, 0.8),\n+    borderRadius: '5px',\n+    height: '40px',\n+    padding: '7px 14px',\n+  },\n+  searchInput: {\n+    background: 'transparent',\n+    border: 0,\n+    height: '1rem',\n+    marginLeft: '0.25rem',\n+    outline: 'none',\n+    padding: '0',\n+    width: '85%',\n+  },\n+  dropdownMenu: {\n+    position: 'absolute',\n+    top: '100%',\n+    left: 0,\n+    marginTop: '.083333rem',\n+    display: 'flex',\n+    flexDirection: 'column',\n+    background: colors.white,\n+    padding: '.25rem 0',\n+    border: '1px solid #ccc',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjUxMTY2Ng=="}, "originalCommit": {"oid": "a43bcbf33b2235e197daac01a0ec4bdf9e2da7e3"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72dd04aeb17325e7287f96c13de9dfbd5fca0417", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/72dd04aeb17325e7287f96c13de9dfbd5fca0417", "committedDate": "2020-04-03T21:04:58Z", "message": "initial react conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7a8ab8d2930f9324b15c7e366e8592c698ae35d", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/d7a8ab8d2930f9324b15c7e366e8592c698ae35d", "committedDate": "2020-04-03T21:07:10Z", "message": "RW-4554 work on tree functionality and styles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae971a1779735dc8188c1f41ce433e1982badfd", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/7ae971a1779735dc8188c1f41ce433e1982badfd", "committedDate": "2020-04-03T21:11:24Z", "message": "RW-4554 initial search bar react conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "518407276cad35a24b621b7fa0aa9f8ae1bc3634", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/518407276cad35a24b621b7fa0aa9f8ae1bc3634", "committedDate": "2020-04-03T21:11:24Z", "message": "RW-4554 add search bar option component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9365d66412d7245a3c5848b1a67a366363b0d812", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/9365d66412d7245a3c5848b1a67a366363b0d812", "committedDate": "2020-04-03T21:11:24Z", "message": "RW-4554 add autocomplete for searchbar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c27784216a16ce988b18b5f3ce46990a86f2930", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/5c27784216a16ce988b18b5f3ce46990a86f2930", "committedDate": "2020-04-03T21:11:24Z", "message": "RW-4554 search bar styling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08115edce19a21058418d1645002b98dc49412de", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/08115edce19a21058418d1645002b98dc49412de", "committedDate": "2020-04-03T21:11:24Z", "message": "RW-4554 styling tree nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2927bfe68b983628e2bf375bb1c5dfafa19d885", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/f2927bfe68b983628e2bf375bb1c5dfafa19d885", "committedDate": "2020-04-03T21:11:24Z", "message": "RW-4554 fix searchbar autocomplete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee1caa7169798dce4e6e238487f026f375774493", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/ee1caa7169798dce4e6e238487f026f375774493", "committedDate": "2020-04-03T21:13:19Z", "message": "RW-4554 fix loading full trees in memory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41a5dc0a8699f8008ca029229825a7402d52f799", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/41a5dc0a8699f8008ca029229825a7402d52f799", "committedDate": "2020-04-03T21:14:55Z", "message": "RW-4554 clean up state for in-memory trees"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1532042b01ead021bc93deddb74fda00544748ed", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/1532042b01ead021bc93deddb74fda00544748ed", "committedDate": "2020-04-03T21:14:55Z", "message": "RW-4554 clean up search bar state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73625dd6669bcb4dfc0b5e73aa284d8221104897", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/73625dd6669bcb4dfc0b5e73aa284d8221104897", "committedDate": "2020-04-03T21:14:55Z", "message": "RW-4554 add hover style and tooltips for tree nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0240b462a464ea40daf9795867887e7cc821f4fe", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/0240b462a464ea40daf9795867887e7cc821f4fe", "committedDate": "2020-04-03T21:16:59Z", "message": "RW-4554 fix group node selections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fba3681b4a0086f44455a606ff928a28cbd3e5d3", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/fba3681b4a0086f44455a606ff928a28cbd3e5d3", "committedDate": "2020-04-03T21:16:59Z", "message": "RW-4554 move autocomplete into react state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "329483e72614c28775098c4fc0648785d1e2857c", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/329483e72614c28775098c4fc0648785d1e2857c", "committedDate": "2020-04-03T21:16:59Z", "message": "RW-4554 move attributes into react state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2e62c73cb1cf769b0057110625904f48dc2651c", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/e2e62c73cb1cf769b0057110625904f48dc2651c", "committedDate": "2020-04-03T21:19:04Z", "message": "RW-4554 add render tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "031dd00da888a69373bd37bae466d24193b7bc8e", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/031dd00da888a69373bd37bae466d24193b7bc8e", "committedDate": "2020-04-03T21:19:56Z", "message": "RW-4554 remove angular files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ce8a28987a8600b8758bf59f26730b403876d03", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/8ce8a28987a8600b8758bf59f26730b403876d03", "committedDate": "2020-04-03T21:19:56Z", "message": "RW-4554 fix selection prop updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fb0fb539d8d7d9983edc452f3561c03cb6eaf4c", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/7fb0fb539d8d7d9983edc452f3561c03cb6eaf4c", "committedDate": "2020-04-03T21:21:28Z", "message": "RW-4554 fix demographics selections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff636e596d375728029b0cf861b396f29579e693", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/ff636e596d375728029b0cf861b396f29579e693", "committedDate": "2020-04-03T21:21:28Z", "message": "RW-4554 fix demographics test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "075c0a3702af4672a8144056bef69b05f46d5a68", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/075c0a3702af4672a8144056bef69b05f46d5a68", "committedDate": "2020-04-03T21:21:28Z", "message": "RW-4554 fix tree-node test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fca2aabfb648e10864eebf7e1599e6d868c8600d", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/fca2aabfb648e10864eebf7e1599e6d868c8600d", "committedDate": "2020-04-03T21:21:28Z", "message": "RW-4554 address pr feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d4d4c06c2ad26e75f5ee6aef7a52b31a08b59e", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/41d4d4c06c2ad26e75f5ee6aef7a52b31a08b59e", "committedDate": "2020-04-03T21:56:03Z", "message": "RW-4554 fix group selections"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f41947bfc4c6ec6ee07dc3b0943b18dafecc5490", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/f41947bfc4c6ec6ee07dc3b0943b18dafecc5490", "committedDate": "2020-04-03T18:30:56Z", "message": "RW-4554 address pr feedback"}, "afterCommit": {"oid": "41d4d4c06c2ad26e75f5ee6aef7a52b31a08b59e", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/41d4d4c06c2ad26e75f5ee6aef7a52b31a08b59e", "committedDate": "2020-04-03T21:56:03Z", "message": "RW-4554 fix group selections"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4MzYyMjA0", "url": "https://github.com/all-of-us/workbench/pull/3325#pullrequestreview-388362204", "createdAt": "2020-04-06T15:25:57Z", "commit": {"oid": "41d4d4c06c2ad26e75f5ee6aef7a52b31a08b59e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3323, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}