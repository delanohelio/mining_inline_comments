{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDgwMTEz", "number": 4043, "title": "[RW-5625] [risk=no] Delete orphaned G Suite users if UserRow creation fails", "bodyText": "See ticket for context \u2013\u00a0this was a small bug encountered as the result of a user report.\nI think rolling back the G Suite user creation automatically in this case is the way to go. Happy to have a deeper discussion if anyone feels strongly otherwise.", "createdAt": "2020-09-22T17:09:13Z", "url": "https://github.com/all-of-us/workbench/pull/4043", "merged": true, "mergeCommit": {"oid": "ef65860060e474919a21602eb0bb86b133c8f931"}, "closed": true, "closedAt": "2020-09-22T20:03:13Z", "author": {"login": "gjuggler"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLbIcsAH2gAyNDkxMDgwMTEzOjkwMGEwMGI4OTc3YzY3MDc3YWNiOWM5NjI5MDdiYTIwNzkwNTM0NmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLexDaAFqTQ5Mzg1NTkzMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "900a00b8977c67077acb9c962907ba207905346f", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/900a00b8977c67077acb9c962907ba207905346f", "committedDate": "2020-09-22T17:07:04Z", "message": "Delete an orphaned G Suite user if writing DbUser row fails."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86ec38d07860fe48f920f8291283c3df0fd6fb3d", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/86ec38d07860fe48f920f8291283c3df0fd6fb3d", "committedDate": "2020-09-22T17:12:22Z", "message": "Small fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjg5MDA0", "url": "https://github.com/all-of-us/workbench/pull/4043#pullrequestreview-493689004", "createdAt": "2020-09-22T17:25:42Z", "commit": {"oid": "86ec38d07860fe48f920f8291283c3df0fd6fb3d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoyNTo0MlrOHWE0mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNzoyNTo0MlrOHWE0mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjkwOTcyMw==", "bodyText": "Should include at least the e2 message here, for additional context", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r492909723", "createdAt": "2020-09-22T17:25:42Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -243,43 +243,58 @@ private DbUser initializeUserIfNeeded() {\n     profileService.cleanProfile(profile);\n     profileService.validateNewProfile(profile);\n \n+    String gSuiteUsername =\n+        profile.getUsername()\n+            + \"@\"\n+            + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain;\n+\n     com.google.api.services.directory.model.User googleUser =\n         directoryService.createUser(\n             profile.getGivenName(),\n             profile.getFamilyName(),\n-            profile.getUsername()\n-                + \"@\"\n-                + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain,\n+            gSuiteUsername,\n             profile.getContactEmail());\n \n-    // Create a user that has no data access or FC user associated.\n-    // We create this account before they sign in so we can keep track of which users we have\n-    // created Google accounts for. This can be used subsequently to delete orphaned accounts.\n-\n-    // We store this information in our own database so that:\n-    // 1) we can support bring-your-own account in future (when we won't be using directory service)\n-    // 2) we can easily generate lists of researchers for the storefront, without joining to Google\n-\n-    // It's possible for the profile information to become out of sync with the user's Google\n-    // profile, since it can be edited in our UI as well as the Google UI,  and we're fine with\n-    // that; the expectation is their profile in AofU will be managed in AofU, not in Google.\n-\n-    DbUser user =\n-        userService.createUser(\n-            profile.getGivenName(),\n-            profile.getFamilyName(),\n-            googleUser.getPrimaryEmail(),\n-            profile.getContactEmail(),\n-            profile.getCurrentPosition(),\n-            profile.getOrganization(),\n-            profile.getAreaOfResearch(),\n-            profile.getProfessionalUrl(),\n-            profile.getDegrees(),\n-            FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n-            demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n-                profile.getDemographicSurvey()),\n-            verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n-                profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    DbUser user;\n+    try {\n+      user =\n+          userService.createUser(\n+              profile.getGivenName(),\n+              profile.getFamilyName(),\n+              googleUser.getPrimaryEmail(),\n+              profile.getContactEmail(),\n+              profile.getCurrentPosition(),\n+              profile.getOrganization(),\n+              profile.getAreaOfResearch(),\n+              profile.getProfessionalUrl(),\n+              profile.getDegrees(),\n+              FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n+              demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+                  profile.getDemographicSurvey()),\n+              verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+                  profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    } catch (Exception e) {\n+      // If the creation of a User row in the RW database fails, we want to attempt to remove the\n+      // G Suite account to avoid having an orphaned account with no record in our database.\n+      log.severe(\n+          String.format(\n+              \"An error occurred when creating DbUser for %s. Attempting to delete \"\n+                  + \"orphaned G Suite account\",\n+              gSuiteUsername));\n+      try {\n+        directoryService.deleteUser(gSuiteUsername);\n+        log.severe(\"Orphaned G Suite account has been deleted.\");\n+      } catch (Exception e2) {\n+        log.severe(\n+            String.format(\n+                \"Orphaned G Suite account %s could not be deleted. \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86ec38d07860fe48f920f8291283c3df0fd6fb3d"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2", "author": {"user": {"login": "gjuggler", "name": "Greg Jordan"}}, "url": "https://github.com/all-of-us/workbench/commit/a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2", "committedDate": "2020-09-22T19:52:07Z", "message": "Add extra logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzODU0ODQw", "url": "https://github.com/all-of-us/workbench/pull/4043#pullrequestreview-493854840", "createdAt": "2020-09-22T21:19:24Z", "commit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToxOToyNVrOHWMxdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToxOToyNVrOHWMxdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAzOTk5MQ==", "bodyText": "I'd really only want to see column lengths based on actual requirements (though 10 sounds like a good number). Could you use or create a test class that mocks UserService and use doThrow()? I'd want to do that with DirectoryService as well.\nAlso, we can define fake static entity classes in test classes or configs if this is really for test cases.\nAlso EXPLAIN user will give a good SQL definition in a table.", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r493039991", "createdAt": "2020-09-22T21:19:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/model/DbAddress.java", "diffHunk": "@@ -52,7 +52,12 @@ public void setStreetAddress2(String streetAddress2) {\n     this.streetAddress2 = streetAddress2;\n   }\n \n-  @Column(name = \"zip_code\")\n+  // Most @Column annotations in our codebase don't have a length specification. This is included\n+  // on the zip_code field to allow test cases (where an in-memory H2 database is used instead of\n+  // MySQL) to trigger an exception when a user attempts to save a DbUser row with too-large field\n+  // payloads. See ProfileControllerTest for the test case, and the Liquibase changelogs for the\n+  // SQL definition of this field.\n+  @Column(name = \"zip_code\", length = 10)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzODU1OTMw", "url": "https://github.com/all-of-us/workbench/pull/4043#pullrequestreview-493855930", "createdAt": "2020-09-22T21:21:08Z", "commit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyMTowOFrOHWM1Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMToyMTowOFrOHWM1Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA0MDkwMw==", "bodyText": "Maybe name the exception directoryServiceException and rename e to userServiceException for clarity.", "url": "https://github.com/all-of-us/workbench/pull/4043#discussion_r493040903", "createdAt": "2020-09-22T21:21:08Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -243,43 +243,59 @@ private DbUser initializeUserIfNeeded() {\n     profileService.cleanProfile(profile);\n     profileService.validateNewProfile(profile);\n \n+    String gSuiteUsername =\n+        profile.getUsername()\n+            + \"@\"\n+            + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain;\n+\n     com.google.api.services.directory.model.User googleUser =\n         directoryService.createUser(\n             profile.getGivenName(),\n             profile.getFamilyName(),\n-            profile.getUsername()\n-                + \"@\"\n-                + workbenchConfigProvider.get().googleDirectoryService.gSuiteDomain,\n+            gSuiteUsername,\n             profile.getContactEmail());\n \n-    // Create a user that has no data access or FC user associated.\n-    // We create this account before they sign in so we can keep track of which users we have\n-    // created Google accounts for. This can be used subsequently to delete orphaned accounts.\n-\n-    // We store this information in our own database so that:\n-    // 1) we can support bring-your-own account in future (when we won't be using directory service)\n-    // 2) we can easily generate lists of researchers for the storefront, without joining to Google\n-\n-    // It's possible for the profile information to become out of sync with the user's Google\n-    // profile, since it can be edited in our UI as well as the Google UI,  and we're fine with\n-    // that; the expectation is their profile in AofU will be managed in AofU, not in Google.\n-\n-    DbUser user =\n-        userService.createUser(\n-            profile.getGivenName(),\n-            profile.getFamilyName(),\n-            googleUser.getPrimaryEmail(),\n-            profile.getContactEmail(),\n-            profile.getCurrentPosition(),\n-            profile.getOrganization(),\n-            profile.getAreaOfResearch(),\n-            profile.getProfessionalUrl(),\n-            profile.getDegrees(),\n-            FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n-            demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n-                profile.getDemographicSurvey()),\n-            verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n-                profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    DbUser user;\n+    try {\n+      user =\n+          userService.createUser(\n+              profile.getGivenName(),\n+              profile.getFamilyName(),\n+              googleUser.getPrimaryEmail(),\n+              profile.getContactEmail(),\n+              profile.getCurrentPosition(),\n+              profile.getOrganization(),\n+              profile.getAreaOfResearch(),\n+              profile.getProfessionalUrl(),\n+              profile.getDegrees(),\n+              FROM_CLIENT_ADDRESS.apply(profile.getAddress()),\n+              demographicSurveyMapper.demographicSurveyToDbDemographicSurvey(\n+                  profile.getDemographicSurvey()),\n+              verifiedInstitutionalAffiliationMapper.modelToDbWithoutUser(\n+                  profile.getVerifiedInstitutionalAffiliation(), institutionService));\n+    } catch (Exception e) {\n+      // If the creation of a User row in the RW database fails, we want to attempt to remove the\n+      // G Suite account to avoid having an orphaned account with no record in our database.\n+      log.severe(\n+          String.format(\n+              \"An error occurred when creating DbUser for %s. Attempting to delete \"\n+                  + \"orphaned G Suite account\",\n+              gSuiteUsername));\n+      try {\n+        directoryService.deleteUser(gSuiteUsername);\n+        log.severe(\"Orphaned G Suite account has been deleted.\");\n+      } catch (Exception e2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6cc2e3f4ac13a5d41c74a2a2bcf50368685adb2"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4077, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}