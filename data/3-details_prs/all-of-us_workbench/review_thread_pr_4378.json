{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NzcxNjk2", "number": 4378, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo0MDoxMVrOFDoFyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTo1MToyM1rOFDxb0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzQ2ODg4OnYy", "diffSide": "LEFT", "path": "e2e/app/component/modal.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo0MDoxMVrOIDX4hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo0MDoxMVrOIDX4hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwNzk0MA==", "bodyText": "moved to Container, which underlies everything", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540407940", "createdAt": "2020-12-10T18:40:11Z", "author": {"login": "als364"}, "path": "e2e/app/component/modal.ts", "diffHunk": "@@ -83,10 +83,6 @@ export default class Modal extends Container {\n     await this.page.waitForXPath(this.xpath, {hidden: true, timeout: 55000});\n   }\n \n-  async waitUntilVisible(): Promise<ElementHandle> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1258075b3e5138328a24a69e060f6ba7233e7846"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzQ3NTY3OnYy", "diffSide": "LEFT", "path": "e2e/app/text-labels.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo0MTo1M1rOIDX8hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo0MTo1M1rOIDX8hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwODk2Nw==", "bodyText": "alphabetized", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540408967", "createdAt": "2020-12-10T18:41:53Z", "author": {"login": "als364"}, "path": "e2e/app/text-labels.ts", "diffHunk": "@@ -34,9 +34,10 @@ export enum LinkText {\n    BackToReviewSet = 'Back to review set',\n    Calculate = 'Calculate',\n    Cancel = 'Cancel',\n-   Copy = 'Copy',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1258075b3e5138328a24a69e060f6ba7233e7846"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzQ3ODMxOnYy", "diffSide": "RIGHT", "path": "e2e/resources/python-code/count-cpus.py", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo0MjoyNlrOIDX-BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODo0MjoyNlrOIDX-BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwOTM0OA==", "bodyText": "I didn't use the suggested bash options because Python makes it obnoxious to capture commandline output", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540409348", "createdAt": "2020-12-10T18:42:26Z", "author": {"login": "als364"}, "path": "e2e/resources/python-code/count-cpus.py", "diffHunk": "@@ -0,0 +1,2 @@\n+import psutil\n+psutil.cpu_count()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1258075b3e5138328a24a69e060f6ba7233e7846"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzYyNzQ1OnYy", "diffSide": "RIGHT", "path": "e2e/tests/runtime/runtime-status-update.spec.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOToxODozMVrOIDZWEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOToxODozMVrOIDZWEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzMTg5MA==", "bodyText": "Unfortunately have to do this each time because there's no good way to tell from a workspace card what CDR the workspace is using and we need the one with microarray data", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540431890", "createdAt": "2020-12-10T19:18:31Z", "author": {"login": "als364"}, "path": "e2e/tests/runtime/runtime-status-update.spec.ts", "diffHunk": "@@ -0,0 +1,222 @@\n+import HelpSidebar from 'app/component/help-sidebar';\n+import RuntimePanel, {\n+  ComputeType,\n+  RuntimePreset,\n+  StartStopIconState\n+} from 'app/component/runtime-panel';\n+import {config} from 'resources/workbench-config';\n+import {createWorkspace, signIn} from 'utils/test-utils';\n+import WorkspaceDataPage from 'app/page/workspace-data-page';\n+import {makeRandomName} from 'utils/str-utils';\n+import NotebookPreviewPage from 'app/page/notebook-preview-page';\n+\n+// This one is going to take a long time.\n+jest.setTimeout(60 * 30 * 1000);\n+\n+describe('Updating runtime parameters', () => {\n+  beforeEach(async () => {\n+    await signIn(page);\n+    const workspaceCard = await createWorkspace(page, config.altCdrVersionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42c552483c2714b9068310b6a3b55202461fe2b"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzkwNzA0OnYy", "diffSide": "RIGHT", "path": "e2e/app/component/help-sidebar.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDoyNzozMVrOIDb6pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTowMToxM1rOIDdGWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3NDAyMg==", "bodyText": "waitForXPath  needs {visible: true}", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540474022", "createdAt": "2020-12-10T20:27:31Z", "author": {"login": "aweng98"}, "path": "e2e/app/component/help-sidebar.ts", "diffHunk": "@@ -108,11 +111,22 @@ export default class HelpSidebar extends Container {\n     return waitForNumericalString(this.page, selector);\n   }\n \n+  async clickSidebarTab(helpSidebarTab: HelpSidebarTab): Promise<void> {\n+    return await this.page.waitForXPath(helpSidebarTab).then(tab => tab.click());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42c552483c2714b9068310b6a3b55202461fe2b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5MzQwMg==", "bodyText": "ty!", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540493402", "createdAt": "2020-12-10T21:01:13Z", "author": {"login": "als364"}, "path": "e2e/app/component/help-sidebar.ts", "diffHunk": "@@ -108,11 +111,22 @@ export default class HelpSidebar extends Container {\n     return waitForNumericalString(this.page, selector);\n   }\n \n+  async clickSidebarTab(helpSidebarTab: HelpSidebarTab): Promise<void> {\n+    return await this.page.waitForXPath(helpSidebarTab).then(tab => tab.click());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ3NDAyMg=="}, "originalCommit": {"oid": "e42c552483c2714b9068310b6a3b55202461fe2b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mzk0ODExOnYy", "diffSide": "RIGHT", "path": "e2e/app/component/runtime-panel.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDozODowM1rOIDcSdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDozODowM1rOIDcSdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4MDExNw==", "bodyText": "TOL I think we need a sidebar base class which runtime panel and help sidebar can extends from.", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540480117", "createdAt": "2020-12-10T20:38:03Z", "author": {"login": "aweng98"}, "path": "e2e/app/component/runtime-panel.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import Container from 'app/container';\n+import {LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import {Page} from 'puppeteer';\n+import {waitForAttributeEquality, waitWhileLoading} from 'utils/waits-utils';\n+import PrimereactInputNumber from 'app/element/primereact-input-number';\n+import SelectMenu from \"./select-menu\";\n+import {savePageToFile, takeScreenshot} from \"../../utils/save-file-utils\";\n+import BaseElement from \"../element/base-element\";\n+\n+const defaultXpath = '//*[@id=\"runtime-panel\"]';\n+const startStopIconXpath = '//*[@data-test-id=\"runtime-status-icon\"]';\n+\n+export enum StartStopIconState {\n+  Error = 'error',\n+  None = 'none',\n+  Running = 'running',\n+  Starting = 'starting',\n+  Stopped = 'stopped',\n+  Stopping = 'stopping'\n+}\n+\n+export enum ComputeType {\n+  Standard = 'Standard VM',\n+  Dataproc = 'Dataproc Cluster'\n+}\n+\n+export enum RuntimePreset {\n+  GeneralAnalysis = 'General Analysis',\n+  HailGenomicsAnalysis = 'Hail Genomics Analysis'\n+}\n+\n+export default class RuntimePanel extends Container {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42c552483c2714b9068310b6a3b55202461fe2b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mzk2Njg4OnYy", "diffSide": "RIGHT", "path": "e2e/app/element/primereact-input-number.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDo0MjozOVrOIDcdOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTowMjoxNFrOIDdI4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4Mjg3Mg==", "bodyText": "how about await getPropValue<number>(input, 'value');? (I didn't test it out).", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540482872", "createdAt": "2020-12-10T20:42:39Z", "author": {"login": "aweng98"}, "path": "e2e/app/element/primereact-input-number.ts", "diffHunk": "@@ -0,0 +1,42 @@\n+import BaseElement from './base-element';\n+import {ElementHandle, Page} from 'puppeteer';\n+\n+export default class PrimereactInputNumber extends BaseElement {\n+  constructor(page: Page, xpath?: string) {\n+    super(page, xpath);\n+  }\n+\n+  async setValue(value: number): Promise<void> {\n+    const input = await this.getInputElementHandle();\n+    // primereact InputNumber thoughtfully ignores any input that would cause the input to go outside\n+    // its specified mins and maxes and is very finicky around 1) copy/paste and 2) manual manipulation\n+    // of its value prop so instead we must do shenanigans!\n+    await input.click();\n+    while (await this.getInputValue() !== value) {\n+      const curr = await this.getInputValue();\n+      if (curr > value) {\n+        await this.page.keyboard.press('ArrowDown');\n+      }\n+      else if (curr < value) {\n+        await this.page.keyboard.press('ArrowUp');\n+      }\n+    }\n+  }\n+\n+  async getInputValue(): Promise<number> {\n+    const input = await this.getInputBaseElement();\n+    return parseInt(await input.getProperty('value'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42c552483c2714b9068310b6a3b55202461fe2b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NDA1MA==", "bodyText": "tbh we're thinking about not using this sort of input anymore cause it has serious UX problems so I don't want to spend any more time messing with it", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540494050", "createdAt": "2020-12-10T21:02:14Z", "author": {"login": "als364"}, "path": "e2e/app/element/primereact-input-number.ts", "diffHunk": "@@ -0,0 +1,42 @@\n+import BaseElement from './base-element';\n+import {ElementHandle, Page} from 'puppeteer';\n+\n+export default class PrimereactInputNumber extends BaseElement {\n+  constructor(page: Page, xpath?: string) {\n+    super(page, xpath);\n+  }\n+\n+  async setValue(value: number): Promise<void> {\n+    const input = await this.getInputElementHandle();\n+    // primereact InputNumber thoughtfully ignores any input that would cause the input to go outside\n+    // its specified mins and maxes and is very finicky around 1) copy/paste and 2) manual manipulation\n+    // of its value prop so instead we must do shenanigans!\n+    await input.click();\n+    while (await this.getInputValue() !== value) {\n+      const curr = await this.getInputValue();\n+      if (curr > value) {\n+        await this.page.keyboard.press('ArrowDown');\n+      }\n+      else if (curr < value) {\n+        await this.page.keyboard.press('ArrowUp');\n+      }\n+    }\n+  }\n+\n+  async getInputValue(): Promise<number> {\n+    const input = await this.getInputBaseElement();\n+    return parseInt(await input.getProperty('value'));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4Mjg3Mg=="}, "originalCommit": {"oid": "e42c552483c2714b9068310b6a3b55202461fe2b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5Mzk4MzM4OnYy", "diffSide": "RIGHT", "path": "e2e/utils/waits-utils.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDo0NzowMFrOIDcnAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMTowNTo0M1rOIDdQuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NTM3Nw==", "bodyText": "line 181 can be rewritten to }, {timeout}, selector.css, attribute, value);", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540485377", "createdAt": "2020-12-10T20:47:00Z", "author": {"login": "aweng98"}, "path": "e2e/utils/waits-utils.ts", "diffHunk": "@@ -177,7 +178,7 @@ export async function waitForAttributeEquality(page: Page,\n           return element.attributes[attributeName] && element.attributes[attributeName].value === attributeValue;\n         }\n         return false;\n-      }, {}, selector.css, attribute, value);\n+      }, timeout ? {timeout} : {}, selector.css, attribute, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e42c552483c2714b9068310b6a3b55202461fe2b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ5NjA1Ng==", "bodyText": "eek actually I think it should be {timeout: timeout || 30000}", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540496056", "createdAt": "2020-12-10T21:05:43Z", "author": {"login": "als364"}, "path": "e2e/utils/waits-utils.ts", "diffHunk": "@@ -177,7 +178,7 @@ export async function waitForAttributeEquality(page: Page,\n           return element.attributes[attributeName] && element.attributes[attributeName].value === attributeValue;\n         }\n         return false;\n-      }, {}, selector.css, attribute, value);\n+      }, timeout ? {timeout} : {}, selector.css, attribute, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ4NTM3Nw=="}, "originalCommit": {"oid": "e42c552483c2714b9068310b6a3b55202461fe2b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDkzOTcwOnYy", "diffSide": "RIGHT", "path": "e2e/app/component/runtime-panel.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyODowMlrOIDk-lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyODowMlrOIDk-lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMjQ4Nw==", "bodyText": "nit: absolute imports", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540622487", "createdAt": "2020-12-11T01:28:02Z", "author": {"login": "ericsong"}, "path": "e2e/app/component/runtime-panel.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import Container from 'app/container';\n+import {LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import {Page} from 'puppeteer';\n+import {waitForAttributeEquality, waitWhileLoading} from 'utils/waits-utils';\n+import PrimereactInputNumber from 'app/element/primereact-input-number';\n+import SelectMenu from \"./select-menu\";\n+import {savePageToFile, takeScreenshot} from \"../../utils/save-file-utils\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b6a6800315083b81be87f26c82711c00615b84d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDk0NDc1OnYy", "diffSide": "RIGHT", "path": "e2e/app/component/runtime-panel.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyOTo1N1rOIDlBNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMToyOTo1N1rOIDlBNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYyMzE1Nw==", "bodyText": "nit: statusIconXpath seems more accurate? or at least consistent with the UI name.", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540623157", "createdAt": "2020-12-11T01:29:57Z", "author": {"login": "ericsong"}, "path": "e2e/app/component/runtime-panel.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import Container from 'app/container';\n+import {LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import {Page} from 'puppeteer';\n+import {waitForAttributeEquality, waitWhileLoading} from 'utils/waits-utils';\n+import PrimereactInputNumber from 'app/element/primereact-input-number';\n+import SelectMenu from \"./select-menu\";\n+import {savePageToFile, takeScreenshot} from \"../../utils/save-file-utils\";\n+import BaseElement from \"../element/base-element\";\n+\n+const defaultXpath = '//*[@id=\"runtime-panel\"]';\n+const startStopIconXpath = '//*[@data-test-id=\"runtime-status-icon\"]';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b6a6800315083b81be87f26c82711c00615b84d"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDk5OTg0OnYy", "diffSide": "RIGHT", "path": "e2e/app/component/runtime-panel.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwMTo1MToyM1rOIDlerw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNTo1NjoyNlrOID-9RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYzMDcwMw==", "bodyText": "why do some of these click actions have a timeout while others do not? Even if click triggers an action that takes a few seconds to complete, I think it's OK to return once the click has completed. We can let the calling function add a waitForVisible or w/e else is appropriate to wait for the action to complete.\nThis is mainly b/c of the semantics of a function named \"click\". If the function was just named \"customizeButton\", I think it makes sense to add the wait call here.", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r540630703", "createdAt": "2020-12-11T01:51:23Z", "author": {"login": "ericsong"}, "path": "e2e/app/component/runtime-panel.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import Container from 'app/container';\n+import {LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import {Page} from 'puppeteer';\n+import {waitForAttributeEquality, waitWhileLoading} from 'utils/waits-utils';\n+import PrimereactInputNumber from 'app/element/primereact-input-number';\n+import SelectMenu from \"./select-menu\";\n+import {savePageToFile, takeScreenshot} from \"../../utils/save-file-utils\";\n+import BaseElement from \"../element/base-element\";\n+\n+const defaultXpath = '//*[@id=\"runtime-panel\"]';\n+const startStopIconXpath = '//*[@data-test-id=\"runtime-status-icon\"]';\n+\n+export enum StartStopIconState {\n+  Error = 'error',\n+  None = 'none',\n+  Running = 'running',\n+  Starting = 'starting',\n+  Stopped = 'stopped',\n+  Stopping = 'stopping'\n+}\n+\n+export enum ComputeType {\n+  Standard = 'Standard VM',\n+  Dataproc = 'Dataproc Cluster'\n+}\n+\n+export enum RuntimePreset {\n+  GeneralAnalysis = 'General Analysis',\n+  HailGenomicsAnalysis = 'Hail Genomics Analysis'\n+}\n+\n+export default class RuntimePanel extends Container {\n+  constructor(page: Page, xpath: string = defaultXpath) {\n+    super(page, xpath);\n+  }\n+\n+  async clickCreateButton(): Promise<void> {\n+    const button = await Button.findByName(this.page, {name: LinkText.Create}, this);\n+    await button.click();\n+    return await page.waitForTimeout(2000);\n+  }\n+\n+  async clickCustomizeButton(): Promise<void> {\n+    const button = await Button.findByName(this.page, {name: LinkText.Customize}, this);\n+    await button.click();\n+    return await page.waitForTimeout(2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b6a6800315083b81be87f26c82711c00615b84d"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA0ODEzMw==", "bodyText": "Oops, I think this one is because I wanted it to pause when running the test on actual (vs headless) chromium so I could see what it's doing. I'll scan through and remove any of these that are unnecessary, and comment on the ones that are", "url": "https://github.com/all-of-us/workbench/pull/4378#discussion_r541048133", "createdAt": "2020-12-11T15:56:26Z", "author": {"login": "als364"}, "path": "e2e/app/component/runtime-panel.ts", "diffHunk": "@@ -0,0 +1,192 @@\n+import Container from 'app/container';\n+import {LinkText} from 'app/text-labels';\n+import Button from 'app/element/button';\n+import {Page} from 'puppeteer';\n+import {waitForAttributeEquality, waitWhileLoading} from 'utils/waits-utils';\n+import PrimereactInputNumber from 'app/element/primereact-input-number';\n+import SelectMenu from \"./select-menu\";\n+import {savePageToFile, takeScreenshot} from \"../../utils/save-file-utils\";\n+import BaseElement from \"../element/base-element\";\n+\n+const defaultXpath = '//*[@id=\"runtime-panel\"]';\n+const startStopIconXpath = '//*[@data-test-id=\"runtime-status-icon\"]';\n+\n+export enum StartStopIconState {\n+  Error = 'error',\n+  None = 'none',\n+  Running = 'running',\n+  Starting = 'starting',\n+  Stopped = 'stopped',\n+  Stopping = 'stopping'\n+}\n+\n+export enum ComputeType {\n+  Standard = 'Standard VM',\n+  Dataproc = 'Dataproc Cluster'\n+}\n+\n+export enum RuntimePreset {\n+  GeneralAnalysis = 'General Analysis',\n+  HailGenomicsAnalysis = 'Hail Genomics Analysis'\n+}\n+\n+export default class RuntimePanel extends Container {\n+  constructor(page: Page, xpath: string = defaultXpath) {\n+    super(page, xpath);\n+  }\n+\n+  async clickCreateButton(): Promise<void> {\n+    const button = await Button.findByName(this.page, {name: LinkText.Create}, this);\n+    await button.click();\n+    return await page.waitForTimeout(2000);\n+  }\n+\n+  async clickCustomizeButton(): Promise<void> {\n+    const button = await Button.findByName(this.page, {name: LinkText.Customize}, this);\n+    await button.click();\n+    return await page.waitForTimeout(2000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDYzMDcwMw=="}, "originalCommit": {"oid": "0b6a6800315083b81be87f26c82711c00615b84d"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3637, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}