{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NTYwMjI1", "number": 3251, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDowNDowNlrODn2B-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0MjoyNlrODn26Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTA2Mjk5OnYy", "diffSide": "RIGHT", "path": "api/config/config_local.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDowNDowNlrOF2E30Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MzoxNVrOF2Gs3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NzI0OQ==", "bodyText": "If we are going to set this to true on local, we should probably do it on test too, just to match.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392247249", "createdAt": "2020-03-13T14:04:06Z", "author": {"login": "s-rubenstein"}, "path": "api/config/config_local.json", "diffHunk": "@@ -94,7 +94,7 @@\n     \"useKeylessDelegatedCredentials\": true,\n     \"sendFreeTierAlertEmails\": false,\n     \"enableMoodleV2Api\": true,\n-    \"requireInstitutionalVerification\": false,\n+    \"requireInstitutionalVerification\": true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NzIxMw==", "bodyText": "Good catch \u2013 I'd meant to do that but forgot. Done.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392277213", "createdAt": "2020-03-13T14:53:15Z", "author": {"login": "gjuggler"}, "path": "api/config/config_local.json", "diffHunk": "@@ -94,7 +94,7 @@\n     \"useKeylessDelegatedCredentials\": true,\n     \"sendFreeTierAlertEmails\": false,\n     \"enableMoodleV2Api\": true,\n-    \"requireInstitutionalVerification\": false,\n+    \"requireInstitutionalVerification\": true,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI0NzI0OQ=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTExNTk4OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-institution.spec.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDoxOTowMVrOF2FZoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo1MzoyNVrOF2GtPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI1NTkwNA==", "bodyText": "Nit: I might move these up to be with the other helper functions, because they kinda shook me being in the middle of the test cases.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392255904", "createdAt": "2020-03-13T14:19:01Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.spec.tsx", "diffHunk": "@@ -0,0 +1,151 @@\n+import {mount, ReactWrapper, ShallowWrapper} from 'enzyme';\n+import * as React from 'react';\n+\n+import {serverConfigStore} from 'app/utils/navigation';\n+import {ConfigApi, InstitutionApi, Profile} from 'generated/fetch';\n+import {createEmptyProfile} from 'app/pages/login/sign-in';\n+import {AccountCreationInstitution, Props} from './account-creation-institution';\n+import {ConfigApiStub} from 'testing/stubs/config-api-stub';\n+import {InstitutionApiStub} from 'testing/stubs/institution-api-stub';\n+import {registerApiClient} from 'app/services/swagger-fetch-clients';\n+import defaultServerConfig from 'testing/default-server-config';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import SpyInstance = jest.SpyInstance;\n+import {Dropdown} from 'primereact/dropdown';\n+import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n+import {defaultInstitutions} from 'testing/stubs/institution-api-stub';\n+import {InstitutionalRole} from 'generated/fetch';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+\n+let mockGetPublicInstitutionDetails: SpyInstance;\n+\n+type AnyWrapper = (ShallowWrapper|ReactWrapper);\n+\n+let props: Props;\n+function component(): ReactWrapper {\n+  return mount(<AccountCreationInstitution {...props}/>);\n+}\n+\n+function getInstitutionDropdown(wrapper: AnyWrapper): Dropdown {\n+  return wrapper.find('Dropdown[data-test-id=\"institution-dropdown\"]').instance() as Dropdown;\n+}\n+\n+function getEmailInput(wrapper: AnyWrapper): AnyWrapper {\n+  return wrapper.find('[data-test-id=\"contact-email\"]').hostNodes();\n+}\n+\n+function getRoleDropdown(wrapper: AnyWrapper): Dropdown {\n+  return wrapper.find('Dropdown[data-test-id=\"role-dropdown\"]').instance() as Dropdown;\n+}\n+\n+function getSubmitButton(wrapper: AnyWrapper): AnyWrapper {\n+  return wrapper.find('[data-test-id=\"submit-button\"]');\n+}\n+\n+\n+beforeEach(() => {\n+  serverConfigStore.next(defaultServerConfig);\n+  registerApiClient(ConfigApi, new ConfigApiStub());\n+  registerApiClient(InstitutionApi, new InstitutionApiStub());\n+\n+  props = {\n+    profile: createEmptyProfile(true),\n+    onComplete: (profile: Profile) => {},\n+    onPreviousClick: (profile: Profile) => {}\n+  };\n+\n+  mockGetPublicInstitutionDetails = jest.spyOn(institutionApi(), 'getPublicInstitutionDetails');\n+});\n+\n+it('should render', async() => {\n+  const wrapper = component();\n+  expect(wrapper.exists()).toBeTruthy();\n+});\n+\n+it('should load institutions list', async() => {\n+  const wrapper = component();\n+  await waitOneTickAndUpdate(wrapper);\n+\n+  expect(mockGetPublicInstitutionDetails).toHaveBeenCalled();\n+\n+  const options = getInstitutionDropdown(wrapper).props.options as Array<Object>;\n+  expect(options.length).toEqual(defaultInstitutions.length);\n+});\n+\n+it('should show user-facing error message on data load error', async() => {\n+  mockGetPublicInstitutionDetails.mockRejectedValueOnce(new Response(null, {status: 500}));\n+  const wrapper = component();\n+  await waitOneTickAndUpdate(wrapper);\n+\n+  expect(wrapper.find('[data-test-id=\"data-load-error\"]').exists).toBeTruthy();\n+});\n+\n+const academicSpecificOption = AccountCreationOptions.institutionalRoleOptions.find(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3NzMxMQ==", "bodyText": "Done!", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392277311", "createdAt": "2020-03-13T14:53:25Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.spec.tsx", "diffHunk": "@@ -0,0 +1,151 @@\n+import {mount, ReactWrapper, ShallowWrapper} from 'enzyme';\n+import * as React from 'react';\n+\n+import {serverConfigStore} from 'app/utils/navigation';\n+import {ConfigApi, InstitutionApi, Profile} from 'generated/fetch';\n+import {createEmptyProfile} from 'app/pages/login/sign-in';\n+import {AccountCreationInstitution, Props} from './account-creation-institution';\n+import {ConfigApiStub} from 'testing/stubs/config-api-stub';\n+import {InstitutionApiStub} from 'testing/stubs/institution-api-stub';\n+import {registerApiClient} from 'app/services/swagger-fetch-clients';\n+import defaultServerConfig from 'testing/default-server-config';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import SpyInstance = jest.SpyInstance;\n+import {Dropdown} from 'primereact/dropdown';\n+import {waitOneTickAndUpdate} from 'testing/react-test-helpers';\n+import {defaultInstitutions} from 'testing/stubs/institution-api-stub';\n+import {InstitutionalRole} from 'generated/fetch';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+\n+let mockGetPublicInstitutionDetails: SpyInstance;\n+\n+type AnyWrapper = (ShallowWrapper|ReactWrapper);\n+\n+let props: Props;\n+function component(): ReactWrapper {\n+  return mount(<AccountCreationInstitution {...props}/>);\n+}\n+\n+function getInstitutionDropdown(wrapper: AnyWrapper): Dropdown {\n+  return wrapper.find('Dropdown[data-test-id=\"institution-dropdown\"]').instance() as Dropdown;\n+}\n+\n+function getEmailInput(wrapper: AnyWrapper): AnyWrapper {\n+  return wrapper.find('[data-test-id=\"contact-email\"]').hostNodes();\n+}\n+\n+function getRoleDropdown(wrapper: AnyWrapper): Dropdown {\n+  return wrapper.find('Dropdown[data-test-id=\"role-dropdown\"]').instance() as Dropdown;\n+}\n+\n+function getSubmitButton(wrapper: AnyWrapper): AnyWrapper {\n+  return wrapper.find('[data-test-id=\"submit-button\"]');\n+}\n+\n+\n+beforeEach(() => {\n+  serverConfigStore.next(defaultServerConfig);\n+  registerApiClient(ConfigApi, new ConfigApiStub());\n+  registerApiClient(InstitutionApi, new InstitutionApiStub());\n+\n+  props = {\n+    profile: createEmptyProfile(true),\n+    onComplete: (profile: Profile) => {},\n+    onPreviousClick: (profile: Profile) => {}\n+  };\n+\n+  mockGetPublicInstitutionDetails = jest.spyOn(institutionApi(), 'getPublicInstitutionDetails');\n+});\n+\n+it('should render', async() => {\n+  const wrapper = component();\n+  expect(wrapper.exists()).toBeTruthy();\n+});\n+\n+it('should load institutions list', async() => {\n+  const wrapper = component();\n+  await waitOneTickAndUpdate(wrapper);\n+\n+  expect(mockGetPublicInstitutionDetails).toHaveBeenCalled();\n+\n+  const options = getInstitutionDropdown(wrapper).props.options as Array<Object>;\n+  expect(options.length).toEqual(defaultInstitutions.length);\n+});\n+\n+it('should show user-facing error message on data load error', async() => {\n+  mockGetPublicInstitutionDetails.mockRejectedValueOnce(new Response(null, {status: 500}));\n+  const wrapper = component();\n+  await waitOneTickAndUpdate(wrapper);\n+\n+  expect(wrapper.find('[data-test-id=\"data-load-error\"]').exists).toBeTruthy();\n+});\n+\n+const academicSpecificOption = AccountCreationOptions.institutionalRoleOptions.find(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI1NTkwNA=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE0MDcyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDoyNToxMlrOF2Fo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyMzo1NVrOF2KI7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI1OTgxOQ==", "bodyText": "I would very strongly push for putting this into a true component, and I think it would be relatively low effort, considering it seems to already be pretty factored out. Would it be possible to do that within this PR?", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392259819", "createdAt": "2020-03-13T14:25:12Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzMzU1MQ==", "bodyText": "Thanks for the prod \u2013 I merged this and the other common files into a single common.tsx, which feels right.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392333551", "createdAt": "2020-03-13T16:23:55Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI1OTgxOQ=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE1ODI3OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDoyOTozM1rOF2FzyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzozMjozNlrOF2MiWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MjYwMA==", "bodyText": "Would it be possible to fold the marginLeft: '0.2rem' into a style object? This is the second place it is used.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392262600", "createdAt": "2020-03-13T14:29:33Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}\n+                options={institutions.map(inst => ({'value': inst.shortName, 'label': inst.displayName}))}\n+                value={institutionShortName}\n+                onChange={(e) => {\n+                  this.updateAffiliationValue('institutionShortName', e.value);\n+                  // Clear out any existing values for role when the institution changes.\n+                  this.updateAffiliationValue('institutionalRoleEnum', undefined);\n+                  this.updateAffiliationValue('institutionalRoleOtherText', undefined);\n+                }}/>\n+            {this.state.dataLoadError &&\n+            <ErrorDiv data-test-id='data-load-error'>\n+              An error occurred loading the institution list. Please try again or contact\n+              <a href='mailto:support@researchallofus.org'>support@researchallofus.org</a>.\n+            </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <a href={'https://www.researchallofus.org/apply/'} target='_blank' style={{color: colors.accent}}>\n+              Don't see your institution listed?\n+              </a>\n+            </div>\n+            <TextInputWithLabel containerStyle={{marginTop: '1rem', width: null}}\n+                                value={contactEmail}\n+                                inputId='contact-email'\n+                                inputName='contactEmail'\n+                                labelContent={<div>\n+                                  <label style={{...styles.text, fontWeight: 600}}>\n+                                    Your institutional email address\n+                                  </label>\n+                                  <div style={{...styles.text, fontSize: 14}}>\n+                                    This will be the primary email contact for your new account.\n+                                  </div>\n+                                </div>}\n+                                invalid={this.state.emailFailedValidation}\n+                                onBlur={() => this.validateContactEmailInline()}\n+                                onChange={email => this.updateContactEmail(email)}/>\n+            {this.state.emailFailedValidation &&\n+              <ErrorDiv data-test-id='invalid-email-error'>\n+                Error: email address is invalid\n+              </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Which of the following best describes your role?\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2MjMxOQ==", "bodyText": "I'll punt on this one \u2013\u00a0the margins in this form are pretty haphazard, I wouldn't really know how to name such a style object.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392362319", "createdAt": "2020-03-13T17:13:39Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}\n+                options={institutions.map(inst => ({'value': inst.shortName, 'label': inst.displayName}))}\n+                value={institutionShortName}\n+                onChange={(e) => {\n+                  this.updateAffiliationValue('institutionShortName', e.value);\n+                  // Clear out any existing values for role when the institution changes.\n+                  this.updateAffiliationValue('institutionalRoleEnum', undefined);\n+                  this.updateAffiliationValue('institutionalRoleOtherText', undefined);\n+                }}/>\n+            {this.state.dataLoadError &&\n+            <ErrorDiv data-test-id='data-load-error'>\n+              An error occurred loading the institution list. Please try again or contact\n+              <a href='mailto:support@researchallofus.org'>support@researchallofus.org</a>.\n+            </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <a href={'https://www.researchallofus.org/apply/'} target='_blank' style={{color: colors.accent}}>\n+              Don't see your institution listed?\n+              </a>\n+            </div>\n+            <TextInputWithLabel containerStyle={{marginTop: '1rem', width: null}}\n+                                value={contactEmail}\n+                                inputId='contact-email'\n+                                inputName='contactEmail'\n+                                labelContent={<div>\n+                                  <label style={{...styles.text, fontWeight: 600}}>\n+                                    Your institutional email address\n+                                  </label>\n+                                  <div style={{...styles.text, fontSize: 14}}>\n+                                    This will be the primary email contact for your new account.\n+                                  </div>\n+                                </div>}\n+                                invalid={this.state.emailFailedValidation}\n+                                onBlur={() => this.validateContactEmailInline()}\n+                                onChange={email => this.updateContactEmail(email)}/>\n+            {this.state.emailFailedValidation &&\n+              <ErrorDiv data-test-id='invalid-email-error'>\n+                Error: email address is invalid\n+              </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Which of the following best describes your role?\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MjYwMA=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MjgyNA==", "bodyText": "Sounds reasonable. TOL, since we have this a couple places in the account creation area, we could make a sub component for this, but I am okay punting on that.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392372824", "createdAt": "2020-03-13T17:32:36Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}\n+                options={institutions.map(inst => ({'value': inst.shortName, 'label': inst.displayName}))}\n+                value={institutionShortName}\n+                onChange={(e) => {\n+                  this.updateAffiliationValue('institutionShortName', e.value);\n+                  // Clear out any existing values for role when the institution changes.\n+                  this.updateAffiliationValue('institutionalRoleEnum', undefined);\n+                  this.updateAffiliationValue('institutionalRoleOtherText', undefined);\n+                }}/>\n+            {this.state.dataLoadError &&\n+            <ErrorDiv data-test-id='data-load-error'>\n+              An error occurred loading the institution list. Please try again or contact\n+              <a href='mailto:support@researchallofus.org'>support@researchallofus.org</a>.\n+            </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <a href={'https://www.researchallofus.org/apply/'} target='_blank' style={{color: colors.accent}}>\n+              Don't see your institution listed?\n+              </a>\n+            </div>\n+            <TextInputWithLabel containerStyle={{marginTop: '1rem', width: null}}\n+                                value={contactEmail}\n+                                inputId='contact-email'\n+                                inputName='contactEmail'\n+                                labelContent={<div>\n+                                  <label style={{...styles.text, fontWeight: 600}}>\n+                                    Your institutional email address\n+                                  </label>\n+                                  <div style={{...styles.text, fontSize: 14}}>\n+                                    This will be the primary email contact for your new account.\n+                                  </div>\n+                                </div>}\n+                                invalid={this.state.emailFailedValidation}\n+                                onBlur={() => this.validateContactEmailInline()}\n+                                onChange={email => this.updateContactEmail(email)}/>\n+            {this.state.emailFailedValidation &&\n+              <ErrorDiv data-test-id='invalid-email-error'>\n+                Error: email address is invalid\n+              </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Which of the following best describes your role?\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MjYwMA=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE1OTM0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDoyOTo1MFrOF2F0fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzowNDo0MlrOF2LnpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2Mjc4Mg==", "bodyText": "Can this be a style object? It is used multiple times", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392262782", "createdAt": "2020-03-13T14:29:50Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM1Nzc5Nw==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392357797", "createdAt": "2020-03-13T17:04:42Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2Mjc4Mg=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE2MzczOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozMDo1OVrOF2F3YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzo0MjozOVrOF2M3DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MzUyMQ==", "bodyText": "TOL: I wonder if we should consider making this a helper function, since we use this pattern a decent amount.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392263521", "createdAt": "2020-03-13T14:30:59Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}\n+                options={institutions.map(inst => ({'value': inst.shortName, 'label': inst.displayName}))}\n+                value={institutionShortName}\n+                onChange={(e) => {\n+                  this.updateAffiliationValue('institutionShortName', e.value);\n+                  // Clear out any existing values for role when the institution changes.\n+                  this.updateAffiliationValue('institutionalRoleEnum', undefined);\n+                  this.updateAffiliationValue('institutionalRoleOtherText', undefined);\n+                }}/>\n+            {this.state.dataLoadError &&\n+            <ErrorDiv data-test-id='data-load-error'>\n+              An error occurred loading the institution list. Please try again or contact\n+              <a href='mailto:support@researchallofus.org'>support@researchallofus.org</a>.\n+            </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <a href={'https://www.researchallofus.org/apply/'} target='_blank' style={{color: colors.accent}}>\n+              Don't see your institution listed?\n+              </a>\n+            </div>\n+            <TextInputWithLabel containerStyle={{marginTop: '1rem', width: null}}\n+                                value={contactEmail}\n+                                inputId='contact-email'\n+                                inputName='contactEmail'\n+                                labelContent={<div>\n+                                  <label style={{...styles.text, fontWeight: 600}}>\n+                                    Your institutional email address\n+                                  </label>\n+                                  <div style={{...styles.text, fontSize: 14}}>\n+                                    This will be the primary email contact for your new account.\n+                                  </div>\n+                                </div>}\n+                                invalid={this.state.emailFailedValidation}\n+                                onBlur={() => this.validateContactEmailInline()}\n+                                onChange={email => this.updateContactEmail(email)}/>\n+            {this.state.emailFailedValidation &&\n+              <ErrorDiv data-test-id='invalid-email-error'>\n+                Error: email address is invalid\n+              </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Which of the following best describes your role?\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                  Publicly displayed\n+                </i>\n+              </label>\n+              <div>\n+                <Dropdown data-test-id='role-dropdown'\n+                          style={{width: '50%', 'minWidth': '600px'}}\n+                          placeholder={this.getRoleOptions() ?\n+                            '' : 'First select an institution above'}\n+                          options={this.getRoleOptions()}\n+                          value={institutionalRoleEnum}\n+                          onChange={(e) => this.updateAffiliationValue('institutionalRoleEnum', e.value)}/>\n+              </div>\n+            </div>\n+            {institutionalRoleEnum === InstitutionalRole.OTHER && <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Please describe your role\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                  Publicly displayed\n+                </i>\n+              </label>\n+              <TextInputWithLabel value={institutionalRoleOtherText}\n+                                  inputId='institutionalRoleOtherText'\n+                                  inputName='institutionalRoleOtherText'\n+                                  onChange={v => this.updateAffiliationValue('institutionalRoleOtherText', v)}/>\n+            </div>\n+            }\n+          </div>\n+          }\n+          <FormSection style={{paddingBottom: '1rem'}}>\n+            <Button type='secondary' style={{marginRight: '1rem'}}\n+                    onClick={() => this.props.onPreviousClick(this.state.profile)}>\n+              Previous\n+            </Button>\n+            <TooltipTrigger content={errors && <div data-test-id='validation-errors'>\n+              <div>Please review the following: </div>\n+              <ul>\n+                {Object.keys(errors).map((key) => <li key={errors[key][0]}>{errors[key][0]}</li>)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNTc4Mw==", "bodyText": "Yeah, we're approaching 2 or 3 examples of this pattern now, so it may be helpful to invest in slightly more infrastructure surrounding it.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392335783", "createdAt": "2020-03-13T16:27:42Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}\n+                options={institutions.map(inst => ({'value': inst.shortName, 'label': inst.displayName}))}\n+                value={institutionShortName}\n+                onChange={(e) => {\n+                  this.updateAffiliationValue('institutionShortName', e.value);\n+                  // Clear out any existing values for role when the institution changes.\n+                  this.updateAffiliationValue('institutionalRoleEnum', undefined);\n+                  this.updateAffiliationValue('institutionalRoleOtherText', undefined);\n+                }}/>\n+            {this.state.dataLoadError &&\n+            <ErrorDiv data-test-id='data-load-error'>\n+              An error occurred loading the institution list. Please try again or contact\n+              <a href='mailto:support@researchallofus.org'>support@researchallofus.org</a>.\n+            </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <a href={'https://www.researchallofus.org/apply/'} target='_blank' style={{color: colors.accent}}>\n+              Don't see your institution listed?\n+              </a>\n+            </div>\n+            <TextInputWithLabel containerStyle={{marginTop: '1rem', width: null}}\n+                                value={contactEmail}\n+                                inputId='contact-email'\n+                                inputName='contactEmail'\n+                                labelContent={<div>\n+                                  <label style={{...styles.text, fontWeight: 600}}>\n+                                    Your institutional email address\n+                                  </label>\n+                                  <div style={{...styles.text, fontSize: 14}}>\n+                                    This will be the primary email contact for your new account.\n+                                  </div>\n+                                </div>}\n+                                invalid={this.state.emailFailedValidation}\n+                                onBlur={() => this.validateContactEmailInline()}\n+                                onChange={email => this.updateContactEmail(email)}/>\n+            {this.state.emailFailedValidation &&\n+              <ErrorDiv data-test-id='invalid-email-error'>\n+                Error: email address is invalid\n+              </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Which of the following best describes your role?\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                  Publicly displayed\n+                </i>\n+              </label>\n+              <div>\n+                <Dropdown data-test-id='role-dropdown'\n+                          style={{width: '50%', 'minWidth': '600px'}}\n+                          placeholder={this.getRoleOptions() ?\n+                            '' : 'First select an institution above'}\n+                          options={this.getRoleOptions()}\n+                          value={institutionalRoleEnum}\n+                          onChange={(e) => this.updateAffiliationValue('institutionalRoleEnum', e.value)}/>\n+              </div>\n+            </div>\n+            {institutionalRoleEnum === InstitutionalRole.OTHER && <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Please describe your role\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                  Publicly displayed\n+                </i>\n+              </label>\n+              <TextInputWithLabel value={institutionalRoleOtherText}\n+                                  inputId='institutionalRoleOtherText'\n+                                  inputName='institutionalRoleOtherText'\n+                                  onChange={v => this.updateAffiliationValue('institutionalRoleOtherText', v)}/>\n+            </div>\n+            }\n+          </div>\n+          }\n+          <FormSection style={{paddingBottom: '1rem'}}>\n+            <Button type='secondary' style={{marginRight: '1rem'}}\n+                    onClick={() => this.props.onPreviousClick(this.state.profile)}>\n+              Previous\n+            </Button>\n+            <TooltipTrigger content={errors && <div data-test-id='validation-errors'>\n+              <div>Please review the following: </div>\n+              <ul>\n+                {Object.keys(errors).map((key) => <li key={errors[key][0]}>{errors[key][0]}</li>)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MzUyMQ=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3MzA2Ng==", "bodyText": "I think I'm happy not doing that in this PR, but would you add a ticket to follow up on that? (Maybe a tech debt ticket?)", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392373066", "createdAt": "2020-03-13T17:33:03Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}\n+                options={institutions.map(inst => ({'value': inst.shortName, 'label': inst.displayName}))}\n+                value={institutionShortName}\n+                onChange={(e) => {\n+                  this.updateAffiliationValue('institutionShortName', e.value);\n+                  // Clear out any existing values for role when the institution changes.\n+                  this.updateAffiliationValue('institutionalRoleEnum', undefined);\n+                  this.updateAffiliationValue('institutionalRoleOtherText', undefined);\n+                }}/>\n+            {this.state.dataLoadError &&\n+            <ErrorDiv data-test-id='data-load-error'>\n+              An error occurred loading the institution list. Please try again or contact\n+              <a href='mailto:support@researchallofus.org'>support@researchallofus.org</a>.\n+            </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <a href={'https://www.researchallofus.org/apply/'} target='_blank' style={{color: colors.accent}}>\n+              Don't see your institution listed?\n+              </a>\n+            </div>\n+            <TextInputWithLabel containerStyle={{marginTop: '1rem', width: null}}\n+                                value={contactEmail}\n+                                inputId='contact-email'\n+                                inputName='contactEmail'\n+                                labelContent={<div>\n+                                  <label style={{...styles.text, fontWeight: 600}}>\n+                                    Your institutional email address\n+                                  </label>\n+                                  <div style={{...styles.text, fontSize: 14}}>\n+                                    This will be the primary email contact for your new account.\n+                                  </div>\n+                                </div>}\n+                                invalid={this.state.emailFailedValidation}\n+                                onBlur={() => this.validateContactEmailInline()}\n+                                onChange={email => this.updateContactEmail(email)}/>\n+            {this.state.emailFailedValidation &&\n+              <ErrorDiv data-test-id='invalid-email-error'>\n+                Error: email address is invalid\n+              </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Which of the following best describes your role?\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                  Publicly displayed\n+                </i>\n+              </label>\n+              <div>\n+                <Dropdown data-test-id='role-dropdown'\n+                          style={{width: '50%', 'minWidth': '600px'}}\n+                          placeholder={this.getRoleOptions() ?\n+                            '' : 'First select an institution above'}\n+                          options={this.getRoleOptions()}\n+                          value={institutionalRoleEnum}\n+                          onChange={(e) => this.updateAffiliationValue('institutionalRoleEnum', e.value)}/>\n+              </div>\n+            </div>\n+            {institutionalRoleEnum === InstitutionalRole.OTHER && <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Please describe your role\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                  Publicly displayed\n+                </i>\n+              </label>\n+              <TextInputWithLabel value={institutionalRoleOtherText}\n+                                  inputId='institutionalRoleOtherText'\n+                                  inputName='institutionalRoleOtherText'\n+                                  onChange={v => this.updateAffiliationValue('institutionalRoleOtherText', v)}/>\n+            </div>\n+            }\n+          </div>\n+          }\n+          <FormSection style={{paddingBottom: '1rem'}}>\n+            <Button type='secondary' style={{marginRight: '1rem'}}\n+                    onClick={() => this.props.onPreviousClick(this.state.profile)}>\n+              Previous\n+            </Button>\n+            <TooltipTrigger content={errors && <div data-test-id='validation-errors'>\n+              <div>Please review the following: </div>\n+              <ul>\n+                {Object.keys(errors).map((key) => <li key={errors[key][0]}>{errors[key][0]}</li>)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MzUyMQ=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM3ODEyNA==", "bodyText": "Sure, filed RW-4611", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392378124", "createdAt": "2020-03-13T17:42:39Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}\n+                options={institutions.map(inst => ({'value': inst.shortName, 'label': inst.displayName}))}\n+                value={institutionShortName}\n+                onChange={(e) => {\n+                  this.updateAffiliationValue('institutionShortName', e.value);\n+                  // Clear out any existing values for role when the institution changes.\n+                  this.updateAffiliationValue('institutionalRoleEnum', undefined);\n+                  this.updateAffiliationValue('institutionalRoleOtherText', undefined);\n+                }}/>\n+            {this.state.dataLoadError &&\n+            <ErrorDiv data-test-id='data-load-error'>\n+              An error occurred loading the institution list. Please try again or contact\n+              <a href='mailto:support@researchallofus.org'>support@researchallofus.org</a>.\n+            </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <a href={'https://www.researchallofus.org/apply/'} target='_blank' style={{color: colors.accent}}>\n+              Don't see your institution listed?\n+              </a>\n+            </div>\n+            <TextInputWithLabel containerStyle={{marginTop: '1rem', width: null}}\n+                                value={contactEmail}\n+                                inputId='contact-email'\n+                                inputName='contactEmail'\n+                                labelContent={<div>\n+                                  <label style={{...styles.text, fontWeight: 600}}>\n+                                    Your institutional email address\n+                                  </label>\n+                                  <div style={{...styles.text, fontSize: 14}}>\n+                                    This will be the primary email contact for your new account.\n+                                  </div>\n+                                </div>}\n+                                invalid={this.state.emailFailedValidation}\n+                                onBlur={() => this.validateContactEmailInline()}\n+                                onChange={email => this.updateContactEmail(email)}/>\n+            {this.state.emailFailedValidation &&\n+              <ErrorDiv data-test-id='invalid-email-error'>\n+                Error: email address is invalid\n+              </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Which of the following best describes your role?\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                  Publicly displayed\n+                </i>\n+              </label>\n+              <div>\n+                <Dropdown data-test-id='role-dropdown'\n+                          style={{width: '50%', 'minWidth': '600px'}}\n+                          placeholder={this.getRoleOptions() ?\n+                            '' : 'First select an institution above'}\n+                          options={this.getRoleOptions()}\n+                          value={institutionalRoleEnum}\n+                          onChange={(e) => this.updateAffiliationValue('institutionalRoleEnum', e.value)}/>\n+              </div>\n+            </div>\n+            {institutionalRoleEnum === InstitutionalRole.OTHER && <div style={{marginTop: '.5rem'}}>\n+              <label style={{...styles.text, fontWeight: 600, marginTop: '1rem'}}>\n+                Please describe your role\n+                <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                  Publicly displayed\n+                </i>\n+              </label>\n+              <TextInputWithLabel value={institutionalRoleOtherText}\n+                                  inputId='institutionalRoleOtherText'\n+                                  inputName='institutionalRoleOtherText'\n+                                  onChange={v => this.updateAffiliationValue('institutionalRoleOtherText', v)}/>\n+            </div>\n+            }\n+          </div>\n+          }\n+          <FormSection style={{paddingBottom: '1rem'}}>\n+            <Button type='secondary' style={{marginRight: '1rem'}}\n+                    onClick={() => this.props.onPreviousClick(this.state.profile)}>\n+              Previous\n+            </Button>\n+            <TooltipTrigger content={errors && <div data-test-id='validation-errors'>\n+              <div>Please review the following: </div>\n+              <ul>\n+                {Object.keys(errors).map((key) => <li key={errors[key][0]}>{errors[key][0]}</li>)}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2MzUyMQ=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 311}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE3MTA1OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozMzowMFrOF2F8DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNzoxMzowN1rOF2L4Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NDcxNg==", "bodyText": "Nit: There's a number of 'text but with fontWeight 600'. Would it make sense to create a boldText style, and use it everywhere that happens?", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392264716", "createdAt": "2020-03-13T14:33:00Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}\n+                options={institutions.map(inst => ({'value': inst.shortName, 'label': inst.displayName}))}\n+                value={institutionShortName}\n+                onChange={(e) => {\n+                  this.updateAffiliationValue('institutionShortName', e.value);\n+                  // Clear out any existing values for role when the institution changes.\n+                  this.updateAffiliationValue('institutionalRoleEnum', undefined);\n+                  this.updateAffiliationValue('institutionalRoleOtherText', undefined);\n+                }}/>\n+            {this.state.dataLoadError &&\n+            <ErrorDiv data-test-id='data-load-error'>\n+              An error occurred loading the institution list. Please try again or contact\n+              <a href='mailto:support@researchallofus.org'>support@researchallofus.org</a>.\n+            </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <a href={'https://www.researchallofus.org/apply/'} target='_blank' style={{color: colors.accent}}>\n+              Don't see your institution listed?\n+              </a>\n+            </div>\n+            <TextInputWithLabel containerStyle={{marginTop: '1rem', width: null}}\n+                                value={contactEmail}\n+                                inputId='contact-email'\n+                                inputName='contactEmail'\n+                                labelContent={<div>\n+                                  <label style={{...styles.text, fontWeight: 600}}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjM2MjA4Ng==", "bodyText": "done", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392362086", "createdAt": "2020-03-13T17:13:07Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation-institution.tsx", "diffHunk": "@@ -0,0 +1,330 @@\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import * as validate from 'validate.js';\n+\n+import {Button} from 'app/components/buttons';\n+import {FlexColumn, FlexRow} from 'app/components/flex';\n+import {FormSection} from 'app/components/forms';\n+import {Error as ErrorDiv, TextInput} from 'app/components/inputs';\n+import {TooltipTrigger} from 'app/components/popups';\n+import {SpinnerOverlay} from 'app/components/spinners';\n+import {AccountCreationOptions} from 'app/pages/login/account-creation/account-creation-options';\n+import {WhyWillSomeInformationBePublic} from 'app/pages/login/account-creation/common-content';\n+import {commonStyles} from 'app/pages/login/account-creation/common-styles';\n+import {institutionApi} from 'app/services/swagger-fetch-clients';\n+import colors from 'app/styles/colors';\n+import {isBlank, reactStyles} from 'app/utils';\n+import {reportError} from 'app/utils/errors';\n+import {\n+  InstitutionalRole,\n+  Profile,\n+  PublicInstitutionDetails,\n+} from 'generated/fetch';\n+import {Dropdown} from 'primereact/dropdown';\n+\n+const styles = reactStyles({\n+  ...commonStyles,\n+  publiclyDisplayedText: {\n+    fontSize: 12,\n+    fontWeight: 400\n+  },\n+  sectionInput: {\n+    width: '14rem',\n+    height: '1.5rem'\n+  },\n+  text: {\n+    fontSize: 14,\n+    color: colors.primary,\n+    lineHeight: '22px',\n+  }\n+});\n+\n+// TODO: this is copy-pasted from account-creation.tsx. Consider factoring this into a true component.\n+function TextInputWithLabel(props) {\n+  return <div style={{width: '12rem', ...props.containerStyle}}>\n+    {props.labelContent}\n+    {props.labelText && <label style={{...styles.text, fontWeight: 600}}>{props.labelText}</label>}\n+    <div style={{marginTop: '0.1rem'}}>\n+      <TextInput data-test-id={props.inputId}\n+                 id={props.inputId}\n+                 name={props.inputName}\n+                 placeholder={props.placeholder}\n+                 value={props.value}\n+                 disabled={props.disabled}\n+                 onChange={props.onChange}\n+                 onBlur={props.onBlur}\n+                 invalid={props.invalid ? props.invalid.toString() : undefined}\n+                 style={{...styles.sectionInput, ...props.inputStyle}}/>\n+      {props.children}\n+    </div>\n+  </div>;\n+}\n+\n+export interface Props {\n+  profile: Profile;\n+  onComplete: (profile: Profile) => void;\n+  onPreviousClick: (profile: Profile) => void;\n+}\n+\n+\n+interface State {\n+  profile: Profile;\n+  emailFailedValidation: boolean;\n+  loadingInstitutions: boolean;\n+  institutions: Array<PublicInstitutionDetails>;\n+  dataLoadError: boolean;\n+}\n+\n+export class AccountCreationInstitution extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props);\n+    this.state = {\n+      profile: props.profile,\n+      emailFailedValidation: false,\n+      institutions: [],\n+      loadingInstitutions: true,\n+      dataLoadError: false,\n+    };\n+  }\n+\n+  async componentDidMount() {\n+    try {\n+      const details = await institutionApi().getPublicInstitutionDetails();\n+      this.setState({\n+        loadingInstitutions: false,\n+        institutions: details.institutions\n+      });\n+    } catch (e) {\n+      this.setState({\n+        loadingInstitutions: false,\n+        dataLoadError: true\n+      });\n+      reportError(e);\n+    }\n+  }\n+\n+  validateContactEmailInline() {\n+    const {profile: { contactEmail } } = this.state;\n+\n+    if (isBlank(contactEmail)) {\n+      // Allow a blank email to pass inline validation: it will still block overall form\n+      // submission via the validate() config below.\n+      this.setState({emailFailedValidation: false});\n+      return;\n+    }\n+\n+    const result = validate.single(contactEmail, { email: true } );\n+    if (result === undefined) {\n+      this.setState({emailFailedValidation: false});\n+    } else {\n+      this.setState({emailFailedValidation: true});\n+    }\n+  }\n+\n+  updateContactEmail(contactEmail: string) {\n+    this.setState({emailFailedValidation: false});\n+    this.setState(fp.set(['profile', 'contactEmail'], contactEmail));\n+  }\n+\n+  // Visible for testing.\n+  public validate(): {[key: string]: Array<string>} {\n+    const validationCheck = {\n+      'verifiedInstitutionalAffiliation.institutionShortName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^You must select an institution to continue',\n+        }\n+      },\n+      contactEmail: {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Email address cannot be blank',\n+        },\n+        email: {\n+          message: '^Email address is invalid'\n+        }\n+      },\n+      'verifiedInstitutionalAffiliation.institutionalRoleEnum': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role cannot be blank',\n+        }\n+      },\n+    };\n+    if (this.state.profile.verifiedInstitutionalAffiliation.institutionalRoleEnum === InstitutionalRole.OTHER) {\n+      validationCheck['verifiedInstitutionalAffiliation.institutionalRoleOtherText'] = {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Institutional role text cannot be blank',\n+        }\n+      };\n+    }\n+\n+    return validate(this.state.profile, validationCheck);\n+  }\n+\n+  getRoleOptions(): Array<{label: string, value: InstitutionalRole}> {\n+    const {institutions, profile: {verifiedInstitutionalAffiliation: {institutionShortName}}} = this.state;\n+    if (isBlank(institutionShortName)) {\n+      return [];\n+    }\n+\n+    const selectedOrgType = institutions.find(\n+      inst => inst.shortName === institutionShortName).organizationTypeEnum;\n+    const availableRoles: Array<InstitutionalRole> =\n+      AccountCreationOptions.institutionalRolesByOrganizationType\n+      .find(obj => obj.type === selectedOrgType)\n+        .roles;\n+\n+    return AccountCreationOptions.institutionalRoleOptions.filter(option =>\n+      availableRoles.includes(option.value)\n+    );\n+  }\n+\n+  updateAffiliationValue(attribute: string, value) {\n+    this.setState(fp.set(['profile', 'verifiedInstitutionalAffiliation', attribute], value));\n+  }\n+\n+  render() {\n+    const {\n+      loadingInstitutions,\n+      institutions,\n+      profile: {\n+        contactEmail,\n+        verifiedInstitutionalAffiliation: {\n+          institutionShortName, institutionalRoleEnum, institutionalRoleOtherText,\n+        }\n+      }\n+    } = this.state;\n+\n+    const errors = this.validate();\n+\n+    return <div id='account-creation-institution'\n+                style={{paddingTop: '1.5rem', paddingRight: '3rem', paddingLeft: '3rem'}}>\n+      <div style={{fontSize: 28, fontWeight: 400, color: colors.primary}}>Create your account</div>\n+      <FlexRow>\n+        <FlexColumn style={{marginTop: '0.5rem', marginRight: '2rem'}}>\n+          <div style={{...styles.text, fontSize: 16, marginTop: '1rem'}}>\n+            Please complete Step 1 of 3\n+          </div>\n+          <div style={{...styles.text, fontSize: 14, marginTop: '0.7rem'}}>\n+            For access to the <i>All of Us</i> Research Program data, your institution needs to have signed a Data Use Agreement\n+            with the program. The institutions listed below have an Institutional Data Use Agreement with the program that\n+            enables us to provide their researchers with access to the Workbench.\n+          </div>\n+          <div style={{...styles.text, fontSize: 12, marginTop: '0.5rem'}}>\n+            All fields are required.\n+          </div>\n+          {loadingInstitutions && <SpinnerOverlay />}\n+          {!loadingInstitutions && <div style={{marginTop: '.5rem'}}>\n+            <label style={{...styles.text, fontWeight: 600}}>\n+              Select your institution\n+              <i style={{...styles.publiclyDisplayedText, marginLeft: '0.2rem'}}>\n+                Publicly displayed\n+              </i>\n+            </label>\n+            <div style={{...styles.text, fontSize: 14}}>\n+              Your institution will be notified that you have registered using your institutional credentials.\n+            </div>\n+            <Dropdown\n+                data-test-id='institution-dropdown'\n+                style={{width: '50%', minWidth: '600px'}}\n+                options={institutions.map(inst => ({'value': inst.shortName, 'label': inst.displayName}))}\n+                value={institutionShortName}\n+                onChange={(e) => {\n+                  this.updateAffiliationValue('institutionShortName', e.value);\n+                  // Clear out any existing values for role when the institution changes.\n+                  this.updateAffiliationValue('institutionalRoleEnum', undefined);\n+                  this.updateAffiliationValue('institutionalRoleOtherText', undefined);\n+                }}/>\n+            {this.state.dataLoadError &&\n+            <ErrorDiv data-test-id='data-load-error'>\n+              An error occurred loading the institution list. Please try again or contact\n+              <a href='mailto:support@researchallofus.org'>support@researchallofus.org</a>.\n+            </ErrorDiv>\n+            }\n+            <div style={{marginTop: '.5rem'}}>\n+              <a href={'https://www.researchallofus.org/apply/'} target='_blank' style={{color: colors.accent}}>\n+              Don't see your institution listed?\n+              </a>\n+            </div>\n+            <TextInputWithLabel containerStyle={{marginTop: '1rem', width: null}}\n+                                value={contactEmail}\n+                                inputId='contact-email'\n+                                inputName='contactEmail'\n+                                labelContent={<div>\n+                                  <label style={{...styles.text, fontWeight: 600}}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NDcxNg=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 256}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE3ODEyOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozNDo1MlrOF2GAdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozMToxMFrOF2KZQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NTg0Nw==", "bodyText": "Why remove the get on this? It doesn't have any side effects.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392265847", "createdAt": "2020-03-13T14:34:52Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -253,37 +220,19 @@ export class AccountCreation extends React.Component<AccountCreationProps, Accou\n     return state;\n   }\n \n-  get usernameValid(): boolean {\n+  // Returns whether the current username is considered valid. Undefined is returned when the\n+  // username is empty, or if a username check is in progress.\n+  isUsernameValid(): (boolean|undefined) {\n     if (isBlank(this.state.profile.username) || this.state.usernameCheckInProgress) {\n       return undefined;\n     }\n-    return !this.isUsernameValidationError;\n+    return !this.isUsernameValidationError();\n   }\n \n-  get isUsernameValidationError(): boolean {\n+  isUsernameValidationError(): boolean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNzczMQ==", "bodyText": "The main reason to remove it is that it forces callers to use parentheses when calling the method. I preferred removing this to make it clear that this is a method, with underlying logic and potentially downstream methods being called, rather than a simple property.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392337731", "createdAt": "2020-03-13T16:31:10Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -253,37 +220,19 @@ export class AccountCreation extends React.Component<AccountCreationProps, Accou\n     return state;\n   }\n \n-  get usernameValid(): boolean {\n+  // Returns whether the current username is considered valid. Undefined is returned when the\n+  // username is empty, or if a username check is in progress.\n+  isUsernameValid(): (boolean|undefined) {\n     if (isBlank(this.state.profile.username) || this.state.usernameCheckInProgress) {\n       return undefined;\n     }\n-    return !this.isUsernameValidationError;\n+    return !this.isUsernameValidationError();\n   }\n \n-  get isUsernameValidationError(): boolean {\n+  isUsernameValidationError(): boolean {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NTg0Nw=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE5MTA2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDozODoyM1rOF2GIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozMTo0M1rOF2KajQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NzkxMw==", "bodyText": "Why does it need to be typed as any? Could it be typed as a Profile object?", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392267913", "createdAt": "2020-03-13T14:38:23Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -394,88 +327,123 @@ export class AccountCreation extends React.Component<AccountCreationProps, Accou\n     this.updateInstitutionAffiliation('role', role);\n   }\n \n-  validateAccountCreation() {\n-    const {\n-      showInstitution,\n-      profile: {\n-        givenName, familyName, contactEmail, areaOfResearch, degrees, username,\n-        address: { streetAddress1, city, country, state, zipCode },\n-        // TODO remove after we switch to verified institutional affiliation\n-        institutionalAffiliations,\n-      }\n-    } = this.state;\n+  validate(): {[key: string]: string} {\n+    const {showInstitution} = this.state;\n     const {gsuiteDomain, requireInstitutionalVerification} = serverConfigStore.getValue();\n \n-    const presenceCheck = {\n-      presence: {\n-        allowEmpty: false\n-      }\n-    };\n-\n     const validationCheck = {\n-      username: {\n-        presence: presenceCheck,\n+      'username': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Username cannot be blank'\n+        },\n         length: {\n-          minimum: 4 + gsuiteDomain.length,\n-          maximum: 64 + gsuiteDomain.length,\n-          tooShort: 'not valid',\n-          tooLong: 'not valid'\n+          minimum: 4,\n+          maximum: 64,\n         },\n-        email: {\n-          message: ' not valid'\n+      },\n+      'givenName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^First name cannot be blank'\n         }\n       },\n-      givenName: presenceCheck,\n-      familyName: presenceCheck,\n-      contactEmail: {\n-        presence: presenceCheck,\n-        email: {\n-          message: 'invalid'\n+      'familyName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Last name cannot be blank'\n+        }\n+      },\n+      'areaOfResearch': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Research description cannot be blank'\n+        }\n+      },\n+      'address.streetAddress1': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Street address cannot be blank'\n+        }\n+      },\n+      'address.city': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^City cannot be blank'\n+        }\n+      },\n+      'address.state': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^State cannot be blank'\n+        }\n+      },\n+      'address.zipCode': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Zip code cannot be blank'\n+        }\n+      },\n+      'address.country': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Country cannot be blank'\n         }\n       },\n-      streetAddress1: presenceCheck,\n-      city: presenceCheck,\n-      state: presenceCheck,\n-      zipCode: presenceCheck,\n-      country: presenceCheck,\n-      areaOfResearch: presenceCheck\n     };\n \n-    if (requireInstitutionalVerification) {\n-      const institutionShortName = this.getVerifiedInstitutionalAffiliationAttribute('institutionShortName');\n-      const institutionalRoleEnum = this.getVerifiedInstitutionalAffiliationAttribute('institutionalRoleEnum');\n-      const institutionalRoleOtherText = this.getVerifiedInstitutionalAffiliationAttribute('institutionalRoleOtherText');\n-\n-      validationCheck['institutionShortName'] = presenceCheck;\n-      validationCheck['institutionalRoleEnum'] = presenceCheck;\n-      if (institutionalRoleEnum === InstitutionalRole.OTHER) {\n-        validationCheck['institutionalRoleOtherText'] = presenceCheck;\n-      }\n+    let validationData = {...this.state.profile} as any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzODA2MQ==", "bodyText": "Ah, I ended up doing something fancy here and adding a custom 'usernameWithEmail' field to the validation data check. I added a comment to make clear what's going on here.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392338061", "createdAt": "2020-03-13T16:31:43Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -394,88 +327,123 @@ export class AccountCreation extends React.Component<AccountCreationProps, Accou\n     this.updateInstitutionAffiliation('role', role);\n   }\n \n-  validateAccountCreation() {\n-    const {\n-      showInstitution,\n-      profile: {\n-        givenName, familyName, contactEmail, areaOfResearch, degrees, username,\n-        address: { streetAddress1, city, country, state, zipCode },\n-        // TODO remove after we switch to verified institutional affiliation\n-        institutionalAffiliations,\n-      }\n-    } = this.state;\n+  validate(): {[key: string]: string} {\n+    const {showInstitution} = this.state;\n     const {gsuiteDomain, requireInstitutionalVerification} = serverConfigStore.getValue();\n \n-    const presenceCheck = {\n-      presence: {\n-        allowEmpty: false\n-      }\n-    };\n-\n     const validationCheck = {\n-      username: {\n-        presence: presenceCheck,\n+      'username': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Username cannot be blank'\n+        },\n         length: {\n-          minimum: 4 + gsuiteDomain.length,\n-          maximum: 64 + gsuiteDomain.length,\n-          tooShort: 'not valid',\n-          tooLong: 'not valid'\n+          minimum: 4,\n+          maximum: 64,\n         },\n-        email: {\n-          message: ' not valid'\n+      },\n+      'givenName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^First name cannot be blank'\n         }\n       },\n-      givenName: presenceCheck,\n-      familyName: presenceCheck,\n-      contactEmail: {\n-        presence: presenceCheck,\n-        email: {\n-          message: 'invalid'\n+      'familyName': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Last name cannot be blank'\n+        }\n+      },\n+      'areaOfResearch': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Research description cannot be blank'\n+        }\n+      },\n+      'address.streetAddress1': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Street address cannot be blank'\n+        }\n+      },\n+      'address.city': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^City cannot be blank'\n+        }\n+      },\n+      'address.state': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^State cannot be blank'\n+        }\n+      },\n+      'address.zipCode': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Zip code cannot be blank'\n+        }\n+      },\n+      'address.country': {\n+        presence: {\n+          allowEmpty: false,\n+          message: '^Country cannot be blank'\n         }\n       },\n-      streetAddress1: presenceCheck,\n-      city: presenceCheck,\n-      state: presenceCheck,\n-      zipCode: presenceCheck,\n-      country: presenceCheck,\n-      areaOfResearch: presenceCheck\n     };\n \n-    if (requireInstitutionalVerification) {\n-      const institutionShortName = this.getVerifiedInstitutionalAffiliationAttribute('institutionShortName');\n-      const institutionalRoleEnum = this.getVerifiedInstitutionalAffiliationAttribute('institutionalRoleEnum');\n-      const institutionalRoleOtherText = this.getVerifiedInstitutionalAffiliationAttribute('institutionalRoleOtherText');\n-\n-      validationCheck['institutionShortName'] = presenceCheck;\n-      validationCheck['institutionalRoleEnum'] = presenceCheck;\n-      if (institutionalRoleEnum === InstitutionalRole.OTHER) {\n-        validationCheck['institutionalRoleOtherText'] = presenceCheck;\n-      }\n+    let validationData = {...this.state.profile} as any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2NzkxMw=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 406}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTE5ODE2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0MDoxNlrOF2GNDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjoyOTo0NVrOF2KWCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2OTA3MA==", "bodyText": "Why remove the get on this as well? Once again, shouldn't have any side effects?", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392269070", "createdAt": "2020-03-13T14:40:16Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -253,37 +220,19 @@ export class AccountCreation extends React.Component<AccountCreationProps, Accou\n     return state;\n   }\n \n-  get usernameValid(): boolean {\n+  // Returns whether the current username is considered valid. Undefined is returned when the\n+  // username is empty, or if a username check is in progress.\n+  isUsernameValid(): (boolean|undefined) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzNjkwNQ==", "bodyText": "I found myself getting confused trying to decide which of these was a method and which was a getter. Personally, I'm coming to a conclusion that getters don't add enough value in Typescript to be worth the add'l mental burden on the reader. I'll bring this to eng sync and draft a PR with a style guide addition.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392336905", "createdAt": "2020-03-13T16:29:45Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/account-creation.tsx", "diffHunk": "@@ -253,37 +220,19 @@ export class AccountCreation extends React.Component<AccountCreationProps, Accou\n     return state;\n   }\n \n-  get usernameValid(): boolean {\n+  // Returns whether the current username is considered valid. Undefined is returned when the\n+  // username is empty, or if a username check is in progress.\n+  isUsernameValid(): (boolean|undefined) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI2OTA3MA=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTIwNjU0OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/account-creation/common-styles.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNDo0MjoyNlrOF2GSiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNjozMjo1NVrOF2KdHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MDQ3NQ==", "bodyText": "Why not put this in common content as well, and just have one common file.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392270475", "createdAt": "2020-03-13T14:42:26Z", "author": {"login": "s-rubenstein"}, "path": "ui/src/app/pages/login/account-creation/common-styles.tsx", "diffHunk": "@@ -0,0 +1,28 @@\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles} from 'app/utils';\n+\n+// Contains style definitions shared across multiple account-creation form steps.\n+export const commonStyles = reactStyles({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMzODcxNg==", "bodyText": "Good call \u2013\u00a0done.", "url": "https://github.com/all-of-us/workbench/pull/3251#discussion_r392338716", "createdAt": "2020-03-13T16:32:55Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/account-creation/common-styles.tsx", "diffHunk": "@@ -0,0 +1,28 @@\n+import colors, {colorWithWhiteness} from 'app/styles/colors';\n+import {reactStyles} from 'app/utils';\n+\n+// Contains style definitions shared across multiple account-creation form steps.\n+export const commonStyles = reactStyles({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjI3MDQ3NQ=="}, "originalCommit": {"oid": "3af0cca693be3693422f0ff71e3246c38b5d34a6"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3233, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}