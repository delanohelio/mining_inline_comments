{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjY1MzEy", "number": 3620, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowMjo1MlrOECMbyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowMTozOFrOEDhM7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM2MzMxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowMjo1MlrOGegGZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowMDo1NFrOGgiu0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNjM5MQ==", "bodyText": "By injecting this random value, we no longer have to use a spy() around the DataSetService.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434636391", "createdAt": "2020-06-03T15:02:52Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -261,7 +265,7 @@ private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n \n   @VisibleForTesting\n   public String generateRandomEightCharacterQualifier() {\n-    return RandomStringUtils.randomNumeric(8);\n+    return prefixProvider.get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NjM2MA==", "bodyText": "this is 00000000 above ?", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r435896360", "createdAt": "2020-06-05T12:44:43Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -261,7 +265,7 @@ private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n \n   @VisibleForTesting\n   public String generateRandomEightCharacterQualifier() {\n-    return RandomStringUtils.randomNumeric(8);\n+    return prefixProvider.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNjM5MQ=="}, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NjY1OA==", "bodyText": "yes", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436776658", "createdAt": "2020-06-08T15:00:54Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -261,7 +265,7 @@ private ConceptSet toClientConceptSet(DbConceptSet dbConceptSet) {\n \n   @VisibleForTesting\n   public String generateRandomEightCharacterQualifier() {\n-    return RandomStringUtils.randomNumeric(8);\n+    return prefixProvider.get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNjM5MQ=="}, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM2NzkzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowMzo1OFrOGegJWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowMTozM1rOGgiwkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzE0NQ==", "bodyText": "This is actually leftover from the other (future) branch. I can remove from this PR if necessary, but it's pretty small.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434637145", "createdAt": "2020-06-03T15:03:58Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -950,4 +950,9 @@ public DbUser syncTwoFactorAuthStatus(DbUser targetUser, Agent agent) {\n                     .build())\n         .collect(ImmutableList.toImmutableList());\n   }\n+\n+  @Override\n+  public Optional<DbUser> getByUsername(String username) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5ODU4Ng==", "bodyText": "Should send DbUser from here? Whats the convention for Optional objects from DB, service will handle ifPresent or controller?", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r435898586", "createdAt": "2020-06-05T12:48:53Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -950,4 +950,9 @@ public DbUser syncTwoFactorAuthStatus(DbUser targetUser, Agent agent) {\n                     .build())\n         .collect(ImmutableList.toImmutableList());\n   }\n+\n+  @Override\n+  public Optional<DbUser> getByUsername(String username) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzE0NQ=="}, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NzEwNw==", "bodyText": "Yes, or you can use .orElseThrow(() -> new NotFoundException())", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436777107", "createdAt": "2020-06-08T15:01:33Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/UserServiceImpl.java", "diffHunk": "@@ -950,4 +950,9 @@ public DbUser syncTwoFactorAuthStatus(DbUser targetUser, Agent agent) {\n                     .build())\n         .collect(ImmutableList.toImmutableList());\n   }\n+\n+  @Override\n+  public Optional<DbUser> getByUsername(String username) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzE0NQ=="}, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM3MzE0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNTowMVrOGegMhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNTowMVrOGegMhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzNzk1OA==", "bodyText": "Public static methods on used classes are fair game for the mapper.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434637958", "createdAt": "2020-06-03T15:05:01Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/profile/ProfileMapper.java", "diffHunk": "@@ -17,6 +15,7 @@\n     uses = {\n       AddressMapper.class,\n       CommonMappers.class,\n+      DbStorageEnums.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM3ODUwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNjowNFrOGegP_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNjowNFrOGegP_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzODg0NA==", "bodyText": "FWIW, I'm not sure \"common\" is much of an abstraction. I kinda feel like breaking this down further so the uses directives are more granular.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434638844", "createdAt": "2020-06-03T15:06:04Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/CommonMappers.java", "diffHunk": "@@ -7,15 +7,8 @@\n import org.pmiops.workbench.api.Etags;\n import org.pmiops.workbench.config.WorkbenchConfig;\n import org.pmiops.workbench.db.model.DbCdrVersion;\n-import org.pmiops.workbench.db.model.DbStorageEnums;\n import org.pmiops.workbench.db.model.DbUser;\n-import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n-import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceResponse;\n-import org.pmiops.workbench.model.AnnotationType;\n import org.pmiops.workbench.model.BillingStatus;\n-import org.pmiops.workbench.model.DataAccessLevel;\n-import org.pmiops.workbench.model.WorkspaceAccessLevel;\n-import org.pmiops.workbench.workspaces.WorkspaceService;\n import org.springframework.stereotype.Service;\n \n @Service", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM4MDg5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/UserMapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNjozNlrOGegRgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNjozNlrOGegRgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzOTIzNQ==", "bodyText": "One could argue for merging this with the ProfileMapper...", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434639235", "createdAt": "2020-06-03T15:06:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/utils/mappers/UserMapper.java", "diffHunk": "@@ -0,0 +1,19 @@\n+package org.pmiops.workbench.utils.mappers;\n+\n+import org.mapstruct.Mapper;\n+import org.mapstruct.Mapping;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.User;\n+import org.pmiops.workbench.model.UserRole;\n+\n+@Mapper(componentModel = \"spring\", uses = FirecloudMapper.class)\n+public interface UserMapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzM4MzU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceFakeImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNzoxM1rOGegTPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNTowNzoxM1rOGegTPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDYzOTY3OQ==", "bodyText": "This class's only advantage is its no-arg constructor. It's used in a tool Spring configuration below.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434639679", "createdAt": "2020-06-03T15:07:13Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceFakeImpl.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.pmiops.workbench.workspaces;\n+\n+import java.sql.Timestamp;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.ForbiddenException;\n+import org.pmiops.workbench.exceptions.NotFoundException;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceACLUpdate;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResponse;\n+\n+public class WorkspaceServiceFakeImpl implements WorkspaceService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQxOTE0OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToxNToxNVrOGegqEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToxNToxNVrOGegqEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NTUyMw==", "bodyText": "Lots of heavy services were initialized inline in the @Before method, greatly inflating the number of test class members.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434645523", "createdAt": "2020-06-03T15:15:15Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -187,95 +174,76 @@\n \n   private static final Instant NOW = Instant.now();\n   private static final FakeClock CLOCK = new FakeClock(NOW, ZoneId.systemDefault());\n+  private static final BasicFormatterImpl BASIC_FORMATTER = new BasicFormatterImpl();\n+  private static final String PREFIX = \"00000000\";\n+  private static final String FULL_PREFIX = String.format(\"dataset_%s_condition_\", PREFIX);\n+\n   private static DbUser currentUser;\n \n-  private String cohortCriteria;\n-  private SearchRequest searchRequest;\n-  private TestMockFactory testMockFactory;\n   private Workspace workspace;\n \n-  @Autowired BillingProjectBufferService billingProjectBufferService;\n-  @Autowired BigQueryService bigQueryService;\n-  @Autowired CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n-  @Autowired WorkspaceResourcesService workspaceResourcesService;\n-  @Autowired CdrVersionDao cdrVersionDao;\n-  @Autowired CdrVersionService cdrVersionService;\n-  @Autowired CloudStorageService cloudStorageService;\n-  @Autowired Provider<Cloudbilling> cloudBillingProvider;\n-  @Autowired CohortDao cohortDao;\n-  @Autowired CohortFactory cohortFactory;\n-  @Autowired CohortMapper cohortMapper;\n-  @Autowired CohortMaterializationService cohortMaterializationService;\n-  @Autowired CohortReviewDao cohortReviewDao;\n-  @Autowired CohortReviewMapper cohortReviewMapper;\n-  @Autowired CohortReviewService cohortReviewService;\n-  @Autowired ConceptBigQueryService conceptBigQueryService;\n-  @Autowired ConceptDao conceptDao;\n-  @Autowired ConceptService conceptService;\n-  @Autowired ConceptSetService conceptSetService;\n-  @Autowired ConceptSetDao conceptSetDao;\n-  @Autowired DataDictionaryEntryDao dataDictionaryEntryDao;\n-  @Autowired DataSetDao dataSetDao;\n-  @Mock DataSetMapper dataSetMapper;\n-  @Autowired ConceptSetMapper conceptSetMapper;\n-  @Autowired DataSetService dataSetService;\n-  @Autowired FireCloudService fireCloudService;\n-  @Autowired FreeTierBillingService freeTierBillingService;\n-  @Autowired CohortQueryBuilder cohortQueryBuilder;\n-  @Autowired TestBigQueryCdrSchemaConfig testBigQueryCdrSchemaConfig;\n-  @Autowired UserDao userDao;\n-  @Mock Provider<DbUser> userProvider;\n-  @Autowired Provider<WorkbenchConfig> workbenchConfigProvider;\n-  @Autowired NotebooksService notebooksService;\n-  @Autowired UserRecentResourceService userRecentResourceService;\n-  @Autowired UserService userService;\n-  @Autowired WorkspaceDao workspaceDao;\n-  @Autowired WorkspaceService workspaceService;\n-  @Autowired WorkspaceAuditor workspaceAuditor;\n-  @Autowired WorkspaceMapper workspaceMapper;\n-  @Autowired LogsBasedMetricService logsBasedMetricService;\n-  @MockBean MonitoringService mockMonitoringService;\n+  @Autowired private BillingProjectBufferService billingProjectBufferService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQyODk5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToxNzoyM1rOGegwbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo1MDoxNFrOGgk03Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NzE1MA==", "bodyText": "One could argue for a new DatasetConfig to host this. I don't have strong feelings at the moment.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434647150", "createdAt": "2020-06-03T15:17:23Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "diffHunk": "@@ -25,4 +31,11 @@ Clock clock() {\n   Random random() {\n     return new SecureRandom();\n   }\n+\n+  @Bean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NzM3Mw==", "bodyText": "yeah this should be in dataSetConfig code. And just for curiosity whats the argument for this being here?", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r435897373", "createdAt": "2020-06-05T12:46:34Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "diffHunk": "@@ -25,4 +31,11 @@ Clock clock() {\n   Random random() {\n     return new SecureRandom();\n   }\n+\n+  @Bean", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NzE1MA=="}, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxMDk3Mw==", "bodyText": "Just saw this.\nDatasetConfig does not yet exist, but I reckon I can conjure it into being...", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436810973", "createdAt": "2020-06-08T15:50:14Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/config/CommonConfig.java", "diffHunk": "@@ -25,4 +31,11 @@ Clock clock() {\n   Random random() {\n     return new SecureRandom();\n   }\n+\n+  @Bean", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY0NzE1MA=="}, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNzQ4NTE1OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyOToyNVrOGehTlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxNToyOToyNVrOGehTlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDY1NjE1MA==", "bodyText": "Using the @MockBean annotation directly on the members is cleaner than putting it here and using @Autowire. I keep this list around for those mocks that don't need to have named instances.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r434656150", "createdAt": "2020-06-03T15:29:25Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -187,95 +174,76 @@\n \n   private static final Instant NOW = Instant.now();\n   private static final FakeClock CLOCK = new FakeClock(NOW, ZoneId.systemDefault());\n+  private static final BasicFormatterImpl BASIC_FORMATTER = new BasicFormatterImpl();\n+  private static final String PREFIX = \"00000000\";\n+  private static final String FULL_PREFIX = String.format(\"dataset_%s_condition_\", PREFIX);\n+\n   private static DbUser currentUser;\n \n-  private String cohortCriteria;\n-  private SearchRequest searchRequest;\n-  private TestMockFactory testMockFactory;\n   private Workspace workspace;\n \n-  @Autowired BillingProjectBufferService billingProjectBufferService;\n-  @Autowired BigQueryService bigQueryService;\n-  @Autowired CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n-  @Autowired WorkspaceResourcesService workspaceResourcesService;\n-  @Autowired CdrVersionDao cdrVersionDao;\n-  @Autowired CdrVersionService cdrVersionService;\n-  @Autowired CloudStorageService cloudStorageService;\n-  @Autowired Provider<Cloudbilling> cloudBillingProvider;\n-  @Autowired CohortDao cohortDao;\n-  @Autowired CohortFactory cohortFactory;\n-  @Autowired CohortMapper cohortMapper;\n-  @Autowired CohortMaterializationService cohortMaterializationService;\n-  @Autowired CohortReviewDao cohortReviewDao;\n-  @Autowired CohortReviewMapper cohortReviewMapper;\n-  @Autowired CohortReviewService cohortReviewService;\n-  @Autowired ConceptBigQueryService conceptBigQueryService;\n-  @Autowired ConceptDao conceptDao;\n-  @Autowired ConceptService conceptService;\n-  @Autowired ConceptSetService conceptSetService;\n-  @Autowired ConceptSetDao conceptSetDao;\n-  @Autowired DataDictionaryEntryDao dataDictionaryEntryDao;\n-  @Autowired DataSetDao dataSetDao;\n-  @Mock DataSetMapper dataSetMapper;\n-  @Autowired ConceptSetMapper conceptSetMapper;\n-  @Autowired DataSetService dataSetService;\n-  @Autowired FireCloudService fireCloudService;\n-  @Autowired FreeTierBillingService freeTierBillingService;\n-  @Autowired CohortQueryBuilder cohortQueryBuilder;\n-  @Autowired TestBigQueryCdrSchemaConfig testBigQueryCdrSchemaConfig;\n-  @Autowired UserDao userDao;\n-  @Mock Provider<DbUser> userProvider;\n-  @Autowired Provider<WorkbenchConfig> workbenchConfigProvider;\n-  @Autowired NotebooksService notebooksService;\n-  @Autowired UserRecentResourceService userRecentResourceService;\n-  @Autowired UserService userService;\n-  @Autowired WorkspaceDao workspaceDao;\n-  @Autowired WorkspaceService workspaceService;\n-  @Autowired WorkspaceAuditor workspaceAuditor;\n-  @Autowired WorkspaceMapper workspaceMapper;\n-  @Autowired LogsBasedMetricService logsBasedMetricService;\n-  @MockBean MonitoringService mockMonitoringService;\n+  @Autowired private BillingProjectBufferService billingProjectBufferService;\n+  @Autowired private CdrBigQuerySchemaConfigService cdrBigQuerySchemaConfigService;\n+  @Autowired private CdrVersionDao cdrVersionDao;\n+  @Autowired private CohortsController cohortsController;\n+  @Autowired private CohortQueryBuilder cohortQueryBuilder;\n+  @Autowired private ConceptSetsController conceptSetsController;\n+  @Autowired private DataSetController dataSetController;\n+  @Autowired private DataSetService dataSetService;\n+  @Autowired private FireCloudService fireCloudService;\n+  @Autowired private NotebooksService notebooksService;\n+  @Autowired private UserDao userDao;\n+  @Autowired private WorkspaceDao workspaceDao;\n+  @Autowired private WorkspacesController workspacesController;\n+\n+  @MockBean private BigQueryService mockBigQueryService;\n+\n+  //  @Mock Provider<DbUser> userProvider;\n \n   @TestConfiguration\n   @Import({\n-    WorkspaceResourcesServiceImpl.class,\n     CohortFactoryImpl.class,\n     CohortMapperImpl.class,\n     CohortReviewMapperImpl.class,\n     CohortReviewServiceImpl.class,\n+    CohortsController.class,\n+    CommonMappers.class,\n     ConceptService.class,\n     ConceptSetMapperImpl.class,\n+    ConceptSetsController.class,\n     ConceptSetService.class,\n+    DataSetController.class,\n     DataSetServiceImpl.class,\n-    TestBigQueryCdrSchemaConfig.class,\n-    WorkspacesController.class,\n-    WorkspaceServiceImpl.class,\n-    WorkspaceMapperImpl.class,\n-    CommonMappers.class,\n+    FirecloudMapperImpl.class,\n     LogsBasedMetricServiceFakeImpl.class,\n+    TestBigQueryCdrSchemaConfig.class,\n+    UserMapperImpl.class,\n     UserServiceTestConfiguration.class,\n+    WorkspaceMapperImpl.class,\n+    WorkspaceResourcesServiceImpl.class,\n+    WorkspaceResourcesServiceImpl.class,\n+    WorkspacesController.class,\n+    WorkspaceServiceImpl.class\n   })\n   @MockBean({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36d4dfde5187234608c18d9b06f70338bcb965de"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTE4OTMzOnYy", "diffSide": "RIGHT", "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMjo0MzowMVrOGfs8aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowMjozMVrOGgizCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NTQwMA==", "bodyText": "Whats this used for?", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r435895400", "createdAt": "2020-06-05T12:43:01Z", "author": {"login": "NehaBroad"}, "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java", "diffHunk": "@@ -128,13 +136,20 @@\n     FreeTierBillingService.class,\n     NotebooksServiceImpl.class,\n     Provider.class,\n+    UserMapper.class,\n     WorkspaceMapperImpl.class\n   })\n   static class Configuration {\n     @Bean\n     public Clock clock() {\n       return CLOCK;\n     }\n+\n+    @Bean\n+    @Qualifier(CommonConfig.DATASET_PREFIX_CODE)\n+    String prefixCode() {\n+      return \"00000000\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53e90d72df33a9a4d59df61391299a2ef7205a58"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc3NzczOQ==", "bodyText": "it's a dataset identifier that's usually random. The test was previously spying on the (real) controller and overriding the value with all zeroes as if it were a mock.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436777739", "createdAt": "2020-06-08T15:02:31Z", "author": {"login": "jaycarlton"}, "path": "api/src/bigquerytest/java/org/pmiops/workbench/api/DataSetControllerBQTest.java", "diffHunk": "@@ -128,13 +136,20 @@\n     FreeTierBillingService.class,\n     NotebooksServiceImpl.class,\n     Provider.class,\n+    UserMapper.class,\n     WorkspaceMapperImpl.class\n   })\n   static class Configuration {\n     @Bean\n     public Clock clock() {\n       return CLOCK;\n     }\n+\n+    @Bean\n+    @Qualifier(CommonConfig.DATASET_PREFIX_CODE)\n+    String prefixCode() {\n+      return \"00000000\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTg5NTQwMA=="}, "originalCommit": {"oid": "53e90d72df33a9a4d59df61391299a2ef7205a58"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTE5ODI5OnYy", "diffSide": "RIGHT", "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo0OTo1MFrOGgkzpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo0OTo1MFrOGgkzpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxMDY2Mw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436810663", "createdAt": "2020-06-08T15:49:50Z", "author": {"login": "NehaBroad"}, "path": "api/tools/src/main/java/org/pmiops/workbench/tools/ExportWorkspaceData.java", "diffHunk": "@@ -97,8 +97,7 @@\n   // Importing the real one requires importing a large subtree of dependencies\n   @Bean\n   public WorkspaceService workspaceService() {\n-    return new WorkspaceServiceImpl(\n-        null, null, null, null, null, null, null, null, null, null, null, null, null, null);\n+    return new WorkspaceServiceFakeImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTIzMzMyOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo1NzozMVrOGglI_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODo1NjoyNlrOGgrt6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxNjEyNw==", "bodyText": "Question: Why did you use new ArrayList here?", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436816127", "createdAt": "2020-06-08T15:57:31Z", "author": {"login": "NehaBroad"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java", "diffHunk": "@@ -272,4 +293,62 @@ public void testCapitalizeFirstCharacterOnly_emoji() {\n     assertThat((DataSetServiceImpl.capitalizeFirstCharacterOnly(\"\u30de\u30ea\u30aa\u306b\u611f\u8b1d\u3057\u307e\u3059\u304c\u3001\u79c1\u305f\u3061\u306e\u738b\u5973\u306f\u5225\u306e\u57ce\u306b\u3044\u307e\u3059\")))\n         .isEqualTo(\"\u30de\u30ea\u30aa\u306b\u611f\u8b1d\u3057\u307e\u3059\u304c\u3001\u79c1\u305f\u3061\u306e\u738b\u5973\u306f\u5225\u306e\u57ce\u306b\u3044\u307e\u3059\");\n   }\n+\n+  @Test\n+  public void testDomainToBigQueryConfig() {\n+    mockLinkingTableQuery(ImmutableList.of(\"FROM `\" + TEST_CDR_TABLE + \".person` person\"));\n+    final DataSetRequest dataSetRequest =\n+        new DataSetRequest()\n+            .conceptSetIds(Collections.emptyList())\n+            .cohortIds(new ArrayList<>())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMzAxOA==", "bodyText": "It's just moved from DataSetControllerTest.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436823018", "createdAt": "2020-06-08T16:07:34Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java", "diffHunk": "@@ -272,4 +293,62 @@ public void testCapitalizeFirstCharacterOnly_emoji() {\n     assertThat((DataSetServiceImpl.capitalizeFirstCharacterOnly(\"\u30de\u30ea\u30aa\u306b\u611f\u8b1d\u3057\u307e\u3059\u304c\u3001\u79c1\u305f\u3061\u306e\u738b\u5973\u306f\u5225\u306e\u57ce\u306b\u3044\u307e\u3059\")))\n         .isEqualTo(\"\u30de\u30ea\u30aa\u306b\u611f\u8b1d\u3057\u307e\u3059\u304c\u3001\u79c1\u305f\u3061\u306e\u738b\u5973\u306f\u5225\u306e\u57ce\u306b\u3044\u307e\u3059\");\n   }\n+\n+  @Test\n+  public void testDomainToBigQueryConfig() {\n+    mockLinkingTableQuery(ImmutableList.of(\"FROM `\" + TEST_CDR_TABLE + \".person` person\"));\n+    final DataSetRequest dataSetRequest =\n+        new DataSetRequest()\n+            .conceptSetIds(Collections.emptyList())\n+            .cohortIds(new ArrayList<>())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxNjEyNw=="}, "originalCommit": {"oid": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkyMzg4Mw==", "bodyText": "Updated to use Collections.emptyList() everywhere in this test.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436923883", "createdAt": "2020-06-08T18:56:26Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/db/dao/DataSetServiceTest.java", "diffHunk": "@@ -272,4 +293,62 @@ public void testCapitalizeFirstCharacterOnly_emoji() {\n     assertThat((DataSetServiceImpl.capitalizeFirstCharacterOnly(\"\u30de\u30ea\u30aa\u306b\u611f\u8b1d\u3057\u307e\u3059\u304c\u3001\u79c1\u305f\u3061\u306e\u738b\u5973\u306f\u5225\u306e\u57ce\u306b\u3044\u307e\u3059\")))\n         .isEqualTo(\"\u30de\u30ea\u30aa\u306b\u611f\u8b1d\u3057\u307e\u3059\u304c\u3001\u79c1\u305f\u3061\u306e\u738b\u5973\u306f\u5225\u306e\u57ce\u306b\u3044\u307e\u3059\");\n   }\n+\n+  @Test\n+  public void testDomainToBigQueryConfig() {\n+    mockLinkingTableQuery(ImmutableList.of(\"FROM `\" + TEST_CDR_TABLE + \".person` person\"));\n+    final DataSetRequest dataSetRequest =\n+        new DataSetRequest()\n+            .conceptSetIds(Collections.emptyList())\n+            .cohortIds(new ArrayList<>())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxNjEyNw=="}, "originalCommit": {"oid": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTI1MTY1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceFakeImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowMTozOFrOGglUNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowNjo0NlrOGglh8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxODk5Ng==", "bodyText": "Why did you decide to send null rather than Empty Object?", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436818996", "createdAt": "2020-06-08T16:01:38Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceFakeImpl.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.pmiops.workbench.workspaces;\n+\n+import java.sql.Timestamp;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.ForbiddenException;\n+import org.pmiops.workbench.exceptions.NotFoundException;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceACLUpdate;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResponse;\n+\n+public class WorkspaceServiceFakeImpl implements WorkspaceService {\n+\n+  @Override\n+  public WorkspaceDao getDao() {\n+    return null;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> findActiveByWorkspaceId(long workspaceId) {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public FireCloudService getFireCloudService() {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace get(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> getByNamespace(String workspaceNamespace) {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getWorkspacesAndPublicWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return null;\n+  }\n+\n+  @Override\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace, String workspaceId) {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getPublishedWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace getRequired(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace getRequiredWithCohorts(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace saveWithLastModified(DbWorkspace workspace) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void deleteWorkspace(DbWorkspace dbWorkspace) {}\n+\n+  @Override\n+  public void updateWorkspaceBillingAccount(DbWorkspace workspace, String newBillingAccountName) {}\n+\n+  @Override\n+  public void validateActiveBilling(String workspaceNamespace, String workspaceId)\n+      throws ForbiddenException {}\n+\n+  @Override\n+  public List<DbWorkspace> findForReview() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMjIwMw==", "bodyText": "Oh i see because it was used as new WorkspaceService(null,null...)", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436822203", "createdAt": "2020-06-08T16:06:16Z", "author": {"login": "NehaBroad"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceFakeImpl.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.pmiops.workbench.workspaces;\n+\n+import java.sql.Timestamp;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.ForbiddenException;\n+import org.pmiops.workbench.exceptions.NotFoundException;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceACLUpdate;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResponse;\n+\n+public class WorkspaceServiceFakeImpl implements WorkspaceService {\n+\n+  @Override\n+  public WorkspaceDao getDao() {\n+    return null;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> findActiveByWorkspaceId(long workspaceId) {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public FireCloudService getFireCloudService() {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace get(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> getByNamespace(String workspaceNamespace) {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getWorkspacesAndPublicWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return null;\n+  }\n+\n+  @Override\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace, String workspaceId) {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getPublishedWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace getRequired(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace getRequiredWithCohorts(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace saveWithLastModified(DbWorkspace workspace) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void deleteWorkspace(DbWorkspace dbWorkspace) {}\n+\n+  @Override\n+  public void updateWorkspaceBillingAccount(DbWorkspace workspace, String newBillingAccountName) {}\n+\n+  @Override\n+  public void validateActiveBilling(String workspaceNamespace, String workspaceId)\n+      throws ForbiddenException {}\n+\n+  @Override\n+  public List<DbWorkspace> findForReview() {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxODk5Ng=="}, "originalCommit": {"oid": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMjUxMg==", "bodyText": "This is just default codegen in IntelliJ. These should never be called.", "url": "https://github.com/all-of-us/workbench/pull/3620#discussion_r436822512", "createdAt": "2020-06-08T16:06:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/workspaces/WorkspaceServiceFakeImpl.java", "diffHunk": "@@ -0,0 +1,178 @@\n+package org.pmiops.workbench.workspaces;\n+\n+import java.sql.Timestamp;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.pmiops.workbench.db.dao.WorkspaceDao;\n+import org.pmiops.workbench.db.model.DbUserRecentWorkspace;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.exceptions.ForbiddenException;\n+import org.pmiops.workbench.exceptions.NotFoundException;\n+import org.pmiops.workbench.firecloud.FireCloudService;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceACLUpdate;\n+import org.pmiops.workbench.firecloud.model.FirecloudWorkspaceAccessEntry;\n+import org.pmiops.workbench.model.UserRole;\n+import org.pmiops.workbench.model.WorkspaceAccessLevel;\n+import org.pmiops.workbench.model.WorkspaceResponse;\n+\n+public class WorkspaceServiceFakeImpl implements WorkspaceService {\n+\n+  @Override\n+  public WorkspaceDao getDao() {\n+    return null;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> findActiveByWorkspaceId(long workspaceId) {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public FireCloudService getFireCloudService() {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace get(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public Optional<DbWorkspace> getByNamespace(String workspaceNamespace) {\n+    return Optional.empty();\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getWorkspacesAndPublicWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace) throws NotFoundException {\n+    return null;\n+  }\n+\n+  @Override\n+  public WorkspaceResponse getWorkspace(String workspaceNamespace, String workspaceId) {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public List<WorkspaceResponse> getPublishedWorkspaces() {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace getRequired(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace getRequiredWithCohorts(String ns, String firecloudName) {\n+    return null;\n+  }\n+\n+  @Override\n+  public DbWorkspace saveWithLastModified(DbWorkspace workspace) {\n+    return null;\n+  }\n+\n+  @Override\n+  public void deleteWorkspace(DbWorkspace dbWorkspace) {}\n+\n+  @Override\n+  public void updateWorkspaceBillingAccount(DbWorkspace workspace, String newBillingAccountName) {}\n+\n+  @Override\n+  public void validateActiveBilling(String workspaceNamespace, String workspaceId)\n+      throws ForbiddenException {}\n+\n+  @Override\n+  public List<DbWorkspace> findForReview() {\n+    return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxODk5Ng=="}, "originalCommit": {"oid": "b06c4f0dcf111f33c6e125892ef92e6ca566cd36"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2728, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}