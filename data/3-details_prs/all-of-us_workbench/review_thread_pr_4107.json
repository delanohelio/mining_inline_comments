{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2OTgxNzI1", "number": 4107, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMjo1NlrOEp26Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoyMjowMFrOEqUMRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzI2NjkxOnYy", "diffSide": "RIGHT", "path": "e2e/jest.config.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMjo1NlrOHbyLcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMjo1NlrOHbyLcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NTcyOA==", "bodyText": "Fail fast in CI. CI will end after 1 test failure.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r498895728", "createdAt": "2020-10-02T15:32:56Z", "author": {"login": "aweng98"}, "path": "e2e/jest.config.js", "diffHunk": "@@ -3,7 +3,7 @@ const { TEST_MODE } = process.env;\n \n module.exports = {\n   \"verbose\": true,\n-  \"bail\": 3,  // Stop running tests after `n` failures\n+  \"bail\": 1,  // Stop running tests after `n` failures", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfcb6770aaa424cac7e152fa1cdccf860fdcdd4f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMzI2ODA3OnYy", "diffSide": "RIGHT", "path": "e2e/tests/notebook/notebook-download.spec.ts", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNTozMzoxN1rOHbyMNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToyNDozNVrOHdWqQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NTkyNg==", "bodyText": "Address tslint error. == is intentional.\nERROR: 18:29  triple-equals  == should be ===", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r498895926", "createdAt": "2020-10-02T15:33:17Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/notebook-download.spec.ts", "diffHunk": "@@ -15,6 +15,7 @@ describe('Jupyter notebook download test', () => {\n     const checkDownloadDisabledState = async (wantDisabled: boolean) => {\n       expect(await waitForFn(async () => {\n         const downloadBtn = await modal.getDownloadButton();\n+        // tslint:disable-next-line:triple-equals\n         return wantDisabled == await getPropValue<boolean>(downloadBtn, 'disabled');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfcb6770aaa424cac7e152fa1cdccf860fdcdd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5NTE3MA==", "bodyText": "Why is == intentional here? Is getPropValue not returning an actual boolean? If not, I'd expect you could do\nwantDisabled == Boolean(await getPropValue<boolean>(downloadBtn, 'disabled'))", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499595170", "createdAt": "2020-10-05T13:24:04Z", "author": {"login": "gjuggler"}, "path": "e2e/tests/notebook/notebook-download.spec.ts", "diffHunk": "@@ -15,6 +15,7 @@ describe('Jupyter notebook download test', () => {\n     const checkDownloadDisabledState = async (wantDisabled: boolean) => {\n       expect(await waitForFn(async () => {\n         const downloadBtn = await modal.getDownloadButton();\n+        // tslint:disable-next-line:triple-equals\n         return wantDisabled == await getPropValue<boolean>(downloadBtn, 'disabled');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NTkyNg=="}, "originalCommit": {"oid": "dfcb6770aaa424cac7e152fa1cdccf860fdcdd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcwMDI2NA==", "bodyText": "== was intentional by CH. Link to that PR comment is here\nThe simplest way to address the tslint error is to disable the check here.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499700264", "createdAt": "2020-10-05T15:50:15Z", "author": {"login": "aweng98"}, "path": "e2e/tests/notebook/notebook-download.spec.ts", "diffHunk": "@@ -15,6 +15,7 @@ describe('Jupyter notebook download test', () => {\n     const checkDownloadDisabledState = async (wantDisabled: boolean) => {\n       expect(await waitForFn(async () => {\n         const downloadBtn = await modal.getDownloadButton();\n+        // tslint:disable-next-line:triple-equals\n         return wantDisabled == await getPropValue<boolean>(downloadBtn, 'disabled');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NTkyNg=="}, "originalCommit": {"oid": "dfcb6770aaa424cac7e152fa1cdccf860fdcdd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MDgxNA==", "bodyText": "nit: would prefer coercing to boolean over bypassing the linter here, e.g. as I outlined in my comment:\n\nIf you want to switch this to ===, please also make it !!(await getPropValue(downloadBtn, 'disabled')); Unless you're 100% confident that your helper method properly handles this case.\n\nAlso, we should put the lint check into CircleCI, otherwise you'll be the only person that notices..", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r500540814", "createdAt": "2020-10-06T19:22:12Z", "author": {"login": "calbach"}, "path": "e2e/tests/notebook/notebook-download.spec.ts", "diffHunk": "@@ -15,6 +15,7 @@ describe('Jupyter notebook download test', () => {\n     const checkDownloadDisabledState = async (wantDisabled: boolean) => {\n       expect(await waitForFn(async () => {\n         const downloadBtn = await modal.getDownloadButton();\n+        // tslint:disable-next-line:triple-equals\n         return wantDisabled == await getPropValue<boolean>(downloadBtn, 'disabled');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NTkyNg=="}, "originalCommit": {"oid": "dfcb6770aaa424cac7e152fa1cdccf860fdcdd4f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MjAxOA==", "bodyText": "Also, I can send that change for the !!", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r500542018", "createdAt": "2020-10-06T19:24:35Z", "author": {"login": "calbach"}, "path": "e2e/tests/notebook/notebook-download.spec.ts", "diffHunk": "@@ -15,6 +15,7 @@ describe('Jupyter notebook download test', () => {\n     const checkDownloadDisabledState = async (wantDisabled: boolean) => {\n       expect(await waitForFn(async () => {\n         const downloadBtn = await modal.getDownloadButton();\n+        // tslint:disable-next-line:triple-equals\n         return wantDisabled == await getPropValue<boolean>(downloadBtn, 'disabled');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODg5NTkyNg=="}, "originalCommit": {"oid": "dfcb6770aaa424cac7e152fa1cdccf860fdcdd4f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDE2OTgyOnYy", "diffSide": "RIGHT", "path": "e2e/app/page/notebook-page.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0NToyM1rOHb7IGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOToyMTo1NlrOHdWk-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MjMyOA==", "bodyText": "notebook image updated. Fix broken xpath selector.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499042328", "createdAt": "2020-10-02T20:45:23Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -24,7 +24,7 @@ enum CssSelector {\n enum Xpath {\n   fileMenuDropdown = '//a[text()=\"File\"]',\n   downloadMenuDropdown = '//a[text()=\"Download as\"]',\n-  downloadIpynbButton = '//*[@id=\"download_ipynb\"]/a',\n+  downloadIpynbButton = '//*[@id=\"download_script\"]/a',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd98909198be92eab55b3cb69e1171759264b52"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU0MDY2Ng==", "bodyText": "Sorry - thought I'd run puppeteer locally to check for this kind of issue, but it's possible it was failing for other reasons at the time, I can't remember now.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r500540666", "createdAt": "2020-10-06T19:21:56Z", "author": {"login": "calbach"}, "path": "e2e/app/page/notebook-page.ts", "diffHunk": "@@ -24,7 +24,7 @@ enum CssSelector {\n enum Xpath {\n   fileMenuDropdown = '//a[text()=\"File\"]',\n   downloadMenuDropdown = '//a[text()=\"Download as\"]',\n-  downloadIpynbButton = '//*[@id=\"download_ipynb\"]/a',\n+  downloadIpynbButton = '//*[@id=\"download_script\"]/a',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MjMyOA=="}, "originalCommit": {"oid": "dcd98909198be92eab55b3cb69e1171759264b52"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNDE3MzU5OnYy", "diffSide": "RIGHT", "path": "e2e/package.json", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0Njo1MFrOHb7Kdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQyMDo0Njo1MFrOHb7Kdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTA0MjkzNA==", "bodyText": "Server should be able to handle more concurrent tests. Test playback time is faster.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499042934", "createdAt": "2020-10-02T20:46:50Z", "author": {"login": "aweng98"}, "path": "e2e/package.json", "diffHunk": "@@ -6,11 +6,11 @@\n   \"private\": true,\n   \"license\": \"BSD\",\n   \"scripts\": {\n-    \"test\": \"cross-env jest --maxWorkers=3\",\n+    \"test\": \"cross-env jest --maxWorkers=5\",\n     \"test:debugTest\": \"cross-env PUPPETEER_HEADLESS=false DEBUG=true node --inspect-brk node_modules/.bin/jest\",\n     \"test:debug\": \"cross-env PUPPETEER_HEADLESS=false DEBUG=true jest --detectOpenHandles\",\n-    \"test-local\": \"cross-env WORKBENCH_ENV=local DEBUG=true jest --maxWorkers=2\",\n-    \"test-local:debug\": \"cross-env WORKBENCH_ENV=local PUPPETEER_HEADLESS=false DEBUG=true jest --maxWorkers=2\",\n+    \"test-local\": \"cross-env WORKBENCH_ENV=local DEBUG=true jest --maxWorkers=3\",\n+    \"test-local:debug\": \"cross-env WORKBENCH_ENV=local PUPPETEER_HEADLESS=false DEBUG=true jest --maxWorkers=3\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcd98909198be92eab55b3cb69e1171759264b52"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTMxMTg1OnYy", "diffSide": "RIGHT", "path": "e2e/puppeteer-custom-environment.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowODozNVrOHcEdZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMTowODozNVrOHcEdZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NTIzNg==", "bodyText": "Replace all non-letter characters with hyphen.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499195236", "createdAt": "2020-10-04T01:08:35Z", "author": {"login": "aweng98"}, "path": "e2e/puppeteer-custom-environment.ts", "diffHunk": "@@ -18,28 +15,28 @@ class PuppeteerCustomEnvironment extends PuppeteerEnvironment {\n   }\n \n   // Take a screenshot right after failure\n-  async handleTestEvent(event, state) {\n+  async handleTestEvent(event) {\n     switch (event.name) {\n-    case 'test_fn_failure':\n-      if (state.currentlyRunningTest.invocations > retryTimes) {\n-        console.error(`Failed test:  \"${event.test.name}\"`);\n-        const testName = fp.startCase(state.currentlyRunningTest.name).replace(/[^A-Z0-9]+/ig, '');\n-        const screenshotDir = 'logs/screenshot';\n-        await fs.ensureDir(screenshotDir);\n+      // case 'test_fn_failure':\n+      // case 'hook_failure':\n+      case 'test_done':\n+        if (event.test.errors.length > 0) {\n+          console.error(`handleTestEvent case: ${event.name}`);\n+          console.error(`Failed test:  \"${event.test.name}\"`);\n+          const testName = event.test.name.replace(/\\W/g, '-');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c11e0e58d043a714c8561dbc94078ce97e2f83"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNTMxMzA1OnYy", "diffSide": "RIGHT", "path": "e2e/puppeteer-custom-environment.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMToxMTozMFrOHcEd7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMToxMTozMFrOHcEd7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5NTM3NA==", "bodyText": "Case test_fn_failure were not working in some cases of failures such as unhandled exceptions, thus no screenshot were taken on failure. Change to case test_done and event.test.errors.length > 0 to cover all types of failures", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499195374", "createdAt": "2020-10-04T01:11:30Z", "author": {"login": "aweng98"}, "path": "e2e/puppeteer-custom-environment.ts", "diffHunk": "@@ -18,28 +15,28 @@ class PuppeteerCustomEnvironment extends PuppeteerEnvironment {\n   }\n \n   // Take a screenshot right after failure\n-  async handleTestEvent(event, state) {\n+  async handleTestEvent(event) {\n     switch (event.name) {\n-    case 'test_fn_failure':\n-      if (state.currentlyRunningTest.invocations > retryTimes) {\n-        console.error(`Failed test:  \"${event.test.name}\"`);\n-        const testName = fp.startCase(state.currentlyRunningTest.name).replace(/[^A-Z0-9]+/ig, '');\n-        const screenshotDir = 'logs/screenshot';\n-        await fs.ensureDir(screenshotDir);\n+      // case 'test_fn_failure':\n+      // case 'hook_failure':\n+      case 'test_done':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c11e0e58d043a714c8561dbc94078ce97e2f83"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODA1MTM1OnYy", "diffSide": "RIGHT", "path": "e2e/app/page/google-login.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoxOTowOFrOHccqJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0MDoyNVrOHci4AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5MTcxNg==", "bodyText": "Should we be doing something here if elementHandle does not exist? It seems like we leave the potential for err to be swallowed by this catch block. That's usually an anti-pattern, but I can't tell from the context whether that's desired behavior here. If it is, it's worth a comment.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499591716", "createdAt": "2020-10-05T13:19:08Z", "author": {"login": "gjuggler"}, "path": "e2e/app/page/google-login.ts", "diffHunk": "@@ -49,56 +48,86 @@ export default class GoogleLoginPage {\n    * @param email\n    */\n   async enterEmail(userEmail: string) : Promise<void> {\n-    // Handle Google \"Use another account\" dialog if it exists\n-    const useAnotherAccountXpath = '//*[@role=\"link\"]//*[text()=\"Use another account\"]';\n-    const elemt1 = await Promise.race([\n-      this.page.waitForXPath(FieldSelector.EmailInput, {visible: true, timeout: 60000}),\n-      this.page.waitForXPath(useAnotherAccountXpath, {visible: true, timeout: 60000}),\n-    ]);\n-\n-    // compare to the Use another account link\n-    const [link] = await this.page.$x(useAnotherAccountXpath);\n-    const isLink = await this.page.evaluate((e1, e2) => e1 === e2, elemt1, link);\n-    if (isLink) {\n-      // click \" Use another Account \" link\n-      await (BaseElement.asBaseElement(this.page, link)).clickAndWait();\n-    }\n-\n-    const emailInput = await this.email();\n-    await emailInput.focus();\n-    await emailInput.type(userEmail, {delay: 15});\n-    await emailInput.dispose();\n+    try {\n+      // Handle Google \"Use another account\" modal if it exists\n+      const useAnotherAccountXpath = '//*[@role=\"link\"]//*[text()=\"Use another account\"]';\n+      const elemt1 = await Promise.race([\n+        this.page.waitForXPath(FieldSelector.EmailInput, {visible: true, timeout: 60000}),\n+        this.page.waitForXPath(useAnotherAccountXpath, {visible: true, timeout: 60000}),\n+      ]);\n \n-    const nextButton = await this.page.waitForXPath(FieldSelector.NextButton, {visible: true});\n-    await (BaseElement.asBaseElement(this.page, nextButton)).clickAndWait();\n-    await nextButton.dispose();\n+      // compare to the \"Use another Account\" link\n+      const [link] = await this.page.$x(useAnotherAccountXpath);\n+      if (link) {\n+        const isLink = await this.page.evaluate((e1, e2) => e1 === e2, elemt1, link);\n+        if (isLink) {\n+          // click \"Use another Account\" link and wait for navigation.\n+          await link.click();\n+        }\n+        await link.dispose();\n+      }\n+\n+      const emailInput = await this.email();\n+      await emailInput.focus();\n+      await emailInput.type(userEmail, {delay: 15});\n+      await emailInput.dispose();\n+\n+      const nextButton = await this.page.waitForXPath(FieldSelector.NextButton, {visible: true});\n+      await nextButton.click();\n+      await nextButton.dispose();\n+    } catch(error) {\n+      await takeScreenshot(this.page);\n+      await savePageToFile(this.page);\n+      throw error;\n+    }\n   }\n \n   /**\n    * Enter login password.\n    * @param pwd\n    */\n   async enterPassword(pwd: string) : Promise<void> {\n-    const input = await this.password();\n-    await input.focus();\n-    await input.type(pwd, {delay: 15});\n-    await input.dispose();\n+    try {\n+      const input = await this.password();\n+      await input.focus();\n+      await input.type(pwd, {delay: 15});\n+      await input.dispose();\n+    } catch (error) {\n+      await takeScreenshot(this.page);\n+      await savePageToFile(this.page);\n+      throw error;\n+    }\n   }\n \n   /**\n    * Click Next button to submit login credential.\n    */\n-  async submit() : Promise<void> {\n-    const submitButton = new Button(this.page, FieldSelector.SubmitButton);\n-    const [response] = await Promise.all([\n-      this.page.waitForNavigation({waitUntil: ['networkidle2', 'load'], timeout: 180000}),\n-      submitButton.click(),\n-    ]);\n-    const status = response.status();\n-    if (status !== 200) {\n-      console.error(`Login navigation response status: ${status}`);\n+  async submit(): Promise<void> {\n+    try {\n+      const submitButton = new Button(this.page, FieldSelector.SubmitButton);\n+      await Promise.all([\n+        this.page.waitForNavigation({waitUntil: ['networkidle2', 'load'], timeout: 60000}),\n+        submitButton.click()\n+      ]);\n+      await submitButton.dispose();\n+    } catch (err) {\n+      // If navigation errored, it could be because prompted with \"Enter Recovery Email\" page.\n+      const recoverEmailXpath = '//input[@type=\"email\" and @aria-label=\"Enter recovery email address\"]';\n+      await Promise.race([\n+        this.page.waitForSelector('app-signed-in'),\n+        this.page.waitForXPath(recoverEmailXpath, {visible: true})\n+      ]);\n+      const [elementHandle] = await this.page.$x(recoverEmailXpath);\n+      if (elementHandle) {\n+        await elementHandle.type(config.institutionContactEmail);\n+        await Promise.all([\n+          this.page.waitForNavigation({waitUntil: ['networkidle2', 'load'], timeout: 60000}),\n+          this.page.keyboard.press(String.fromCharCode(13)), // press Enter key\n+          this.page.waitForSelector('app-signed-in')\n+        ]);\n+        await elementHandle.dispose();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c11e0e58d043a714c8561dbc94078ce97e2f83"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5MzU2OA==", "bodyText": "Good point. After thinking more about it, here is a new approach. Original error stacktrace is unchanged and thrown in catch block.\n  async submit(): Promise<void> {\n    try {\n      const submitButton = new Button(this.page, FieldSelector.SubmitButton);\n      await Promise.all([\n        this.page.waitForNavigation({waitUntil: ['networkidle2', 'load'], timeout: 30000}),\n        submitButton.click(),\n        this.page.waitForSelector('app-signed-in', {timeout: 30000}),\n      ]);\n      await submitButton.dispose();\n    } catch (err) {\n      // Two main reasons why error is throw are caused by \"Enter Recovery Email\" page or login captcha.\n      // At this time, we can only handle \"Enter Recover Email\" page if it exists.\n      const found = await this.fillOutRecoverEmail();\n      if (!found) {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * Fill out \"Enter Recover Email\" input if found.\n   * @private\n   */\n  private async fillOutRecoverEmail(): Promise<boolean> {\n    const recoverEmailXpath = '//input[@type=\"email\" and @aria-label=\"Enter recovery email address\"]';\n    const [elementHandle] = await this.page.$x(recoverEmailXpath);\n    if (elementHandle) {\n      await elementHandle.type(config.institutionContactEmail);\n      await Promise.all([\n        this.page.waitForNavigation({waitUntil: ['networkidle2', 'load'], timeout: 30000}),\n        this.page.keyboard.press(String.fromCharCode(13)), // press Enter key\n        this.page.waitForSelector('app-signed-in', {timeout: 30000}),\n      ]);\n      await elementHandle.dispose();\n      return true;\n    }\n    // \"Enter Recover Email\" input not found.\n    return false;\n  }", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499693568", "createdAt": "2020-10-05T15:40:25Z", "author": {"login": "aweng98"}, "path": "e2e/app/page/google-login.ts", "diffHunk": "@@ -49,56 +48,86 @@ export default class GoogleLoginPage {\n    * @param email\n    */\n   async enterEmail(userEmail: string) : Promise<void> {\n-    // Handle Google \"Use another account\" dialog if it exists\n-    const useAnotherAccountXpath = '//*[@role=\"link\"]//*[text()=\"Use another account\"]';\n-    const elemt1 = await Promise.race([\n-      this.page.waitForXPath(FieldSelector.EmailInput, {visible: true, timeout: 60000}),\n-      this.page.waitForXPath(useAnotherAccountXpath, {visible: true, timeout: 60000}),\n-    ]);\n-\n-    // compare to the Use another account link\n-    const [link] = await this.page.$x(useAnotherAccountXpath);\n-    const isLink = await this.page.evaluate((e1, e2) => e1 === e2, elemt1, link);\n-    if (isLink) {\n-      // click \" Use another Account \" link\n-      await (BaseElement.asBaseElement(this.page, link)).clickAndWait();\n-    }\n-\n-    const emailInput = await this.email();\n-    await emailInput.focus();\n-    await emailInput.type(userEmail, {delay: 15});\n-    await emailInput.dispose();\n+    try {\n+      // Handle Google \"Use another account\" modal if it exists\n+      const useAnotherAccountXpath = '//*[@role=\"link\"]//*[text()=\"Use another account\"]';\n+      const elemt1 = await Promise.race([\n+        this.page.waitForXPath(FieldSelector.EmailInput, {visible: true, timeout: 60000}),\n+        this.page.waitForXPath(useAnotherAccountXpath, {visible: true, timeout: 60000}),\n+      ]);\n \n-    const nextButton = await this.page.waitForXPath(FieldSelector.NextButton, {visible: true});\n-    await (BaseElement.asBaseElement(this.page, nextButton)).clickAndWait();\n-    await nextButton.dispose();\n+      // compare to the \"Use another Account\" link\n+      const [link] = await this.page.$x(useAnotherAccountXpath);\n+      if (link) {\n+        const isLink = await this.page.evaluate((e1, e2) => e1 === e2, elemt1, link);\n+        if (isLink) {\n+          // click \"Use another Account\" link and wait for navigation.\n+          await link.click();\n+        }\n+        await link.dispose();\n+      }\n+\n+      const emailInput = await this.email();\n+      await emailInput.focus();\n+      await emailInput.type(userEmail, {delay: 15});\n+      await emailInput.dispose();\n+\n+      const nextButton = await this.page.waitForXPath(FieldSelector.NextButton, {visible: true});\n+      await nextButton.click();\n+      await nextButton.dispose();\n+    } catch(error) {\n+      await takeScreenshot(this.page);\n+      await savePageToFile(this.page);\n+      throw error;\n+    }\n   }\n \n   /**\n    * Enter login password.\n    * @param pwd\n    */\n   async enterPassword(pwd: string) : Promise<void> {\n-    const input = await this.password();\n-    await input.focus();\n-    await input.type(pwd, {delay: 15});\n-    await input.dispose();\n+    try {\n+      const input = await this.password();\n+      await input.focus();\n+      await input.type(pwd, {delay: 15});\n+      await input.dispose();\n+    } catch (error) {\n+      await takeScreenshot(this.page);\n+      await savePageToFile(this.page);\n+      throw error;\n+    }\n   }\n \n   /**\n    * Click Next button to submit login credential.\n    */\n-  async submit() : Promise<void> {\n-    const submitButton = new Button(this.page, FieldSelector.SubmitButton);\n-    const [response] = await Promise.all([\n-      this.page.waitForNavigation({waitUntil: ['networkidle2', 'load'], timeout: 180000}),\n-      submitButton.click(),\n-    ]);\n-    const status = response.status();\n-    if (status !== 200) {\n-      console.error(`Login navigation response status: ${status}`);\n+  async submit(): Promise<void> {\n+    try {\n+      const submitButton = new Button(this.page, FieldSelector.SubmitButton);\n+      await Promise.all([\n+        this.page.waitForNavigation({waitUntil: ['networkidle2', 'load'], timeout: 60000}),\n+        submitButton.click()\n+      ]);\n+      await submitButton.dispose();\n+    } catch (err) {\n+      // If navigation errored, it could be because prompted with \"Enter Recovery Email\" page.\n+      const recoverEmailXpath = '//input[@type=\"email\" and @aria-label=\"Enter recovery email address\"]';\n+      await Promise.race([\n+        this.page.waitForSelector('app-signed-in'),\n+        this.page.waitForXPath(recoverEmailXpath, {visible: true})\n+      ]);\n+      const [elementHandle] = await this.page.$x(recoverEmailXpath);\n+      if (elementHandle) {\n+        await elementHandle.type(config.institutionContactEmail);\n+        await Promise.all([\n+          this.page.waitForNavigation({waitUntil: ['networkidle2', 'load'], timeout: 60000}),\n+          this.page.keyboard.press(String.fromCharCode(13)), // press Enter key\n+          this.page.waitForSelector('app-signed-in')\n+        ]);\n+        await elementHandle.dispose();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5MTcxNg=="}, "originalCommit": {"oid": "f9c11e0e58d043a714c8561dbc94078ce97e2f83"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODA1ODY0OnYy", "diffSide": "RIGHT", "path": "e2e/jest.test-setup.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoyMDo0MVrOHccujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoyMDo0MVrOHccujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5Mjg0Nw==", "bodyText": "What is the impact of this change? It's a surprising enough value I would want to see a comment describing why it's appropriate. Even better if this were in a separate PR, unless it's related to the refactors in other files here.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499592847", "createdAt": "2020-10-05T13:20:41Z", "author": {"login": "gjuggler"}, "path": "e2e/jest.test-setup.ts", "diffHunk": "@@ -12,7 +12,7 @@ const isDebugMode = process.argv.includes('--debug');\n  */\n beforeEach(async () => {\n   await page.setUserAgent(userAgent);\n-  await page.setViewport({width: 1280, height: 680});\n+  await page.setViewport({width: 1280, height: 0});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c11e0e58d043a714c8561dbc94078ce97e2f83"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODA2MTY3OnYy", "diffSide": "RIGHT", "path": "e2e/puppeteer-custom-environment.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoyMToyMVrOHccwWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0MzoyN1rOHcjAWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5MzMwNQ==", "bodyText": "nit: Remove commented lines.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499593305", "createdAt": "2020-10-05T13:21:21Z", "author": {"login": "gjuggler"}, "path": "e2e/puppeteer-custom-environment.ts", "diffHunk": "@@ -18,28 +15,28 @@ class PuppeteerCustomEnvironment extends PuppeteerEnvironment {\n   }\n \n   // Take a screenshot right after failure\n-  async handleTestEvent(event, state) {\n+  async handleTestEvent(event) {\n     switch (event.name) {\n-    case 'test_fn_failure':\n-      if (state.currentlyRunningTest.invocations > retryTimes) {\n-        console.error(`Failed test:  \"${event.test.name}\"`);\n-        const testName = fp.startCase(state.currentlyRunningTest.name).replace(/[^A-Z0-9]+/ig, '');\n-        const screenshotDir = 'logs/screenshot';\n-        await fs.ensureDir(screenshotDir);\n+      // case 'test_fn_failure':", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c11e0e58d043a714c8561dbc94078ce97e2f83"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NTcwNw==", "bodyText": "Done.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499695707", "createdAt": "2020-10-05T15:43:27Z", "author": {"login": "aweng98"}, "path": "e2e/puppeteer-custom-environment.ts", "diffHunk": "@@ -18,28 +15,28 @@ class PuppeteerCustomEnvironment extends PuppeteerEnvironment {\n   }\n \n   // Take a screenshot right after failure\n-  async handleTestEvent(event, state) {\n+  async handleTestEvent(event) {\n     switch (event.name) {\n-    case 'test_fn_failure':\n-      if (state.currentlyRunningTest.invocations > retryTimes) {\n-        console.error(`Failed test:  \"${event.test.name}\"`);\n-        const testName = fp.startCase(state.currentlyRunningTest.name).replace(/[^A-Z0-9]+/ig, '');\n-        const screenshotDir = 'logs/screenshot';\n-        await fs.ensureDir(screenshotDir);\n+      // case 'test_fn_failure':", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5MzMwNQ=="}, "originalCommit": {"oid": "f9c11e0e58d043a714c8561dbc94078ce97e2f83"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODA2NDY5OnYy", "diffSide": "RIGHT", "path": "e2e/puppeteer-custom-environment.ts", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzoyMjowMFrOHccyLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNTo0NDo0NlrOHcjDnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5Mzc3NA==", "bodyText": "nit: this comment seems out of place, especially after the refactor. Maybe remove it?", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499593774", "createdAt": "2020-10-05T13:22:00Z", "author": {"login": "gjuggler"}, "path": "e2e/puppeteer-custom-environment.ts", "diffHunk": "@@ -18,28 +15,28 @@ class PuppeteerCustomEnvironment extends PuppeteerEnvironment {\n   }\n \n   // Take a screenshot right after failure\n-  async handleTestEvent(event, state) {\n+  async handleTestEvent(event) {\n     switch (event.name) {\n-    case 'test_fn_failure':\n-      if (state.currentlyRunningTest.invocations > retryTimes) {\n-        console.error(`Failed test:  \"${event.test.name}\"`);\n-        const testName = fp.startCase(state.currentlyRunningTest.name).replace(/[^A-Z0-9]+/ig, '');\n-        const screenshotDir = 'logs/screenshot';\n-        await fs.ensureDir(screenshotDir);\n+      // case 'test_fn_failure':\n+      // case 'hook_failure':\n+      case 'test_done':\n+        if (event.test.errors.length > 0) {\n+          console.error(`handleTestEvent case: ${event.name}`);\n+          console.error(`Failed test:  \"${event.test.name}\"`);\n+          const testName = event.test.name.replace(/\\W/g, '-');\n+          const screenshotDir = 'logs/screenshot';\n+          await fs.ensureDir(screenshotDir);\n           // move create-filename to helper.ts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9c11e0e58d043a714c8561dbc94078ce97e2f83"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY5NjU0Mw==", "bodyText": "Removed.", "url": "https://github.com/all-of-us/workbench/pull/4107#discussion_r499696543", "createdAt": "2020-10-05T15:44:46Z", "author": {"login": "aweng98"}, "path": "e2e/puppeteer-custom-environment.ts", "diffHunk": "@@ -18,28 +15,28 @@ class PuppeteerCustomEnvironment extends PuppeteerEnvironment {\n   }\n \n   // Take a screenshot right after failure\n-  async handleTestEvent(event, state) {\n+  async handleTestEvent(event) {\n     switch (event.name) {\n-    case 'test_fn_failure':\n-      if (state.currentlyRunningTest.invocations > retryTimes) {\n-        console.error(`Failed test:  \"${event.test.name}\"`);\n-        const testName = fp.startCase(state.currentlyRunningTest.name).replace(/[^A-Z0-9]+/ig, '');\n-        const screenshotDir = 'logs/screenshot';\n-        await fs.ensureDir(screenshotDir);\n+      // case 'test_fn_failure':\n+      // case 'hook_failure':\n+      case 'test_done':\n+        if (event.test.errors.length > 0) {\n+          console.error(`handleTestEvent case: ${event.name}`);\n+          console.error(`Failed test:  \"${event.test.name}\"`);\n+          const testName = event.test.name.replace(/\\W/g, '-');\n+          const screenshotDir = 'logs/screenshot';\n+          await fs.ensureDir(screenshotDir);\n           // move create-filename to helper.ts", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTU5Mzc3NA=="}, "originalCommit": {"oid": "f9c11e0e58d043a714c8561dbc94078ce97e2f83"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4017, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}