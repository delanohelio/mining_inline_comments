{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyOTA2Nzgz", "number": 3736, "title": "[RW-4999][risk=low] User and Workspace Audit Log Admin Pages", "bodyText": "We now have a card list view for Action Audit events (each one consisting of one or more rows from the Audit dataset in BigQuery). The layout of the cards should hopefully highlight important information while avoiding repetitiveness.\nFeatures:\n\ninput box to specify user or workspace namespace to query\ncolored text to show agent and target types clearly\nseparate sections for agent and target\nseparate property changes grid with pale gray cells for missing properties (to avoid distraction from those that are present)\nworkarounds and fixes for a couple of issues with the audit log itself (sort order, max vs min, and excluding a noisy action type of LOGIN)\nadjustable number of cards in view\nreusable component shared by both workspace and user audit pages. Can be used for future audit components\nSide Nav entries for User Audit and Workspace Audit\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test-local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-07-01T19:04:37Z", "url": "https://github.com/all-of-us/workbench/pull/3736", "merged": true, "mergeCommit": {"oid": "22e08a659c173501b67b6ce5c9a6377dcfe29822"}, "closed": true, "closedAt": "2020-07-17T16:05:06Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcwcFaXAH2gAyNDQyOTA2NzgzOjA5Y2VlYzAzNmI4MzE4ZTUxZjhjYTljY2Y2NWQwYWMzMmIwMGRmMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc11DWpAH2gAyNDQyOTA2NzgzOjM4YmFlM2U5OWUxOTAxZWMxMjQ3YmQ0NTY0YjkzNTZmYmEwZDVhNTM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "09ceec036b8318e51f8ca9ccf65d0ac32b00df06", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/09ceec036b8318e51f8ca9ccf65d0ac32b00df06", "committedDate": "2020-06-30T20:57:42Z", "message": "Initial stab at user audit page\n\nCo-authored-by: Jay Carlton <oscar.j.carlton4@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80fc67c2450fd2f1d44c5c3517aee9fdfc6aeb71", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/80fc67c2450fd2f1d44c5c3517aee9fdfc6aeb71", "committedDate": "2020-06-30T21:38:59Z", "message": "Get data loades"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38f2b571f442b0dab340a6eae097a329aa8decb4", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/38f2b571f442b0dab340a6eae097a329aa8decb4", "committedDate": "2020-07-01T04:17:08Z", "message": "added string rendering for all elements and attempted a card. needs work to display in html or actual widget"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6db0b4450cac4285448417c796ecd3ef6a15adb3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/6db0b4450cac4285448417c796ecd3ef6a15adb3", "committedDate": "2020-07-01T12:10:22Z", "message": "update TODO stuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd6e5447e260a73aff3de82f79f729e8c780377f", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/cd6e5447e260a73aff3de82f79f729e8c780377f", "committedDate": "2020-07-01T13:46:09Z", "message": "starting to use cards with yucky html"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0bf868cf2e5d995da373e707768644890e4286d", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/a0bf868cf2e5d995da373e707768644890e4286d", "committedDate": "2020-07-01T14:10:55Z", "message": "fix date strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19a3a423395b6694426b92e367d1e1b606e75d21", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/19a3a423395b6694426b92e367d1e1b606e75d21", "committedDate": "2020-07-01T18:58:14Z", "message": "more fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b2fd4743efab5969bff1ff3ca30cb8b96e18583", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/5b2fd4743efab5969bff1ff3ca30cb8b96e18583", "committedDate": "2020-07-02T18:02:18Z", "message": "Merge remote-tracking branch 'origin/master' into psantos-jcarlton/audit-cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b813818809232d3ff37d2134cbe7e2ae37f7c55b", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/b813818809232d3ff37d2134cbe7e2ae37f7c55b", "committedDate": "2020-07-02T18:02:39Z", "message": "Update routing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a009ab939232bf790ddd9d854faf48ba4202e252", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/a009ab939232bf790ddd9d854faf48ba4202e252", "committedDate": "2020-07-02T22:12:49Z", "message": "Update view/html, add routing and paramaterization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6edc651e5263ad71db9deae60cb20f9193b07af3", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/6edc651e5263ad71db9deae60cb20f9193b07af3", "committedDate": "2020-07-06T18:50:58Z", "message": "sidenav support for user audit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "133314660f842ca3b7f687ee1ace31a7c8eaa085", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/133314660f842ca3b7f687ee1ace31a7c8eaa085", "committedDate": "2020-07-06T22:44:18Z", "message": "much CSS"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5701d6fd119febe8bae31f6e4901d8f48a163ada", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/5701d6fd119febe8bae31f6e4901d8f48a163ada", "committedDate": "2020-07-07T16:01:01Z", "message": "workspace audit working (will need to work on the text input"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13d832c530c8de6ea725f6c4cec5eb162996100a", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/13d832c530c8de6ea725f6c4cec5eb162996100a", "committedDate": "2020-07-07T16:30:53Z", "message": "user audit using new audit page component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e7f3de799cd2e337f320dabdedfb8ae61c35cd4", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/0e7f3de799cd2e337f320dabdedfb8ae61c35cd4", "committedDate": "2020-07-08T16:19:32Z", "message": "Style tweaks on card view\n\nCo-authored-by: Jay Carlton <oscar.j.carlton4@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "118e9cbb1bdaa3c279b9df906044db0fb02258ae", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/118e9cbb1bdaa3c279b9df906044db0fb02258ae", "committedDate": "2020-07-08T21:41:21Z", "message": "Improve state management for audit component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84f662a81290951fecd206b4794ec29f966569be", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/84f662a81290951fecd206b4794ec29f966569be", "committedDate": "2020-07-08T21:47:20Z", "message": "Render total number of actions available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c110428a69ec2b37ab873b22816ebb45eec835", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/80c110428a69ec2b37ab873b22816ebb45eec835", "committedDate": "2020-07-09T13:55:51Z", "message": "fixes & tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7ffd0b1425bb9318d9c7a5c76ef59ef93ab0d20", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/a7ffd0b1425bb9318d9c7a5c76ef59ef93ab0d20", "committedDate": "2020-07-09T14:02:13Z", "message": "Better performance of action counter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32abbcdeaedd2467f36beb33e904e192db2296d5", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/32abbcdeaedd2467f36beb33e904e192db2296d5", "committedDate": "2020-07-09T14:17:08Z", "message": "Update colors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b58e6e3e4253e129dd9e800f0e3715ec65cc2eb9", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/b58e6e3e4253e129dd9e800f0e3715ec65cc2eb9", "committedDate": "2020-07-09T14:29:33Z", "message": "Merge remote-tracking branch 'origin/master' into psantos-jcarlton/audit-cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae6e2e193e1bfe5bfbdf0956a620b6081e97e00", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/7ae6e2e193e1bfe5bfbdf0956a620b6081e97e00", "committedDate": "2020-07-09T14:55:58Z", "message": "Update title, odd import issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c88664bc5842ed810067aef971b91b118b6db95", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/9c88664bc5842ed810067aef971b91b118b6db95", "committedDate": "2020-07-09T14:57:38Z", "message": "rename workspace audit page back to original name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60c8f3b16c8ef3703953093a4a5ee1fdb4b62ec1", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/60c8f3b16c8ef3703953093a4a5ee1fdb4b62ec1", "committedDate": "2020-07-09T15:01:02Z", "message": "sort by time desc to get latest events"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5e3e82ff98d23ee8a5713ee041022072e356ab9", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/d5e3e82ff98d23ee8a5713ee041022072e356ab9", "committedDate": "2020-07-09T15:08:25Z", "message": "Clear results for invalid queries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69bfa11deb0c35aed888f8b209c5f589d366da4f", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/69bfa11deb0c35aed888f8b209c5f589d366da4f", "committedDate": "2020-07-09T15:11:09Z", "message": "Fix max actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2427e21e6b92a4e7612dc06e19765d1b5a790183", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/2427e21e6b92a4e7612dc06e19765d1b5a790183", "committedDate": "2020-07-09T15:17:37Z", "message": "Merge branch 'psantos-jcarlton/audit-cards' of github.com:all-of-us/workbench into psantos-jcarlton/audit-cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333bd1bbb8360921f31f94f18f5a41a7bc810e0d", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/333bd1bbb8360921f31f94f18f5a41a7bc810e0d", "committedDate": "2020-07-09T15:28:40Z", "message": "fix message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b179c8bd9da1f7831336bddb6235a11b25e97a9a", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b179c8bd9da1f7831336bddb6235a11b25e97a9a", "committedDate": "2020-07-09T17:00:58Z", "message": "Merge branch 'psantos-jcarlton/audit-cards' of github.com:all-of-us/workbench into psantos-jcarlton/audit-cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29446d3c3b8f6479ab9e363e0cb4fb4e13d09f5", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/b29446d3c3b8f6479ab9e363e0cb4fb4e13d09f5", "committedDate": "2020-07-09T17:31:07Z", "message": "pass in button description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3c48938d9769fbad079c110ddd1732827c0dd96", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/d3c48938d9769fbad079c110ddd1732827c0dd96", "committedDate": "2020-07-10T17:15:35Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/6a5b9d58bcd894bfe50fb517d3de6e97342604ca", "committedDate": "2020-07-10T17:27:24Z", "message": "fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MzI0NzEy", "url": "https://github.com/all-of-us/workbench/pull/3736#pullrequestreview-447324712", "createdAt": "2020-07-13T14:51:02Z", "commit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDo1MTowMlrOGwsFlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1MjozM1rOGxXZ0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzcwNzE1Ng==", "bodyText": "workaround for what?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r453707156", "createdAt": "2020-07-13T14:51:02Z", "author": {"login": "als364"}, "path": "api/src/main/java/org/pmiops/workbench/actionaudit/ActionAuditQueryServiceImpl.java", "diffHunk": "@@ -97,9 +97,11 @@ private String getTableName() {\n   public UserAuditLogQueryResponse queryEventsForUser(\n       long userDatabaseId, long limit, DateTime after, DateTime before) {\n \n+    // Workaround for", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3Mzg2Ng==", "bodyText": "nit: 'hideable'", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454373866", "createdAt": "2020-07-14T13:54:55Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3NDI3Nw==", "bodyText": "You'll have to fix this sort of thing manually, but you should run yarn lint --fix in your UI project", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454374277", "createdAt": "2020-07-14T13:55:25Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3ODg2Mg==", "bodyText": "style nit:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n          \n          \n            \n              return <div style={{\n          \n          \n            \n                      backgroundColor: content ? 'white' : '#f0f3f5',\n          \n          \n            \n                      border: '1px solid',\n          \n          \n            \n                      boxSizing: 'border-box'\n          \n          \n            \n              }}>{content}</div>;", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454378862", "createdAt": "2020-07-14T14:01:36Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4MjkzNg==", "bodyText": "nit: either put rem everywhere for consistency or break it out into margin-top and margin-left or whatever this is", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454382936", "createdAt": "2020-07-14T14:07:36Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4NjMwNw==", "bodyText": "Pull this out of this const and into a top-level const:\nconst styles = reactStyles({\n    propertyCell: {\n        fontWeight: 600,\n        border: '1px solid'\n    }\n});\n\nand then use it below as:\n<div style={styles.propertyCell}>etc</div>", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454386307", "createdAt": "2020-07-14T14:12:21Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTQ0Ng==", "bodyText": "style nit: put the ? and : at the beginning of new lines rather than at the end of lines or infixed", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454389446", "createdAt": "2020-07-14T14:16:38Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM4OTc4Ng==", "bodyText": "just use the colors directly.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454389786", "createdAt": "2020-07-14T14:17:04Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MDk5Mw==", "bodyText": "same style nit as above with how to display multi-line props", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454390993", "createdAt": "2020-07-14T14:18:52Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5MjY0Mg==", "bodyText": "backticks not necessary if you're not worried about preserving the space without doing + \" \" +\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      <div>{`${header.agent.agentUsername}`}</div>\n          \n          \n            \n                      <div>{header.agent.agentUsername}</div>", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454392642", "createdAt": "2020-07-14T14:21:11Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5Mzg2MA==", "bodyText": "you use this frequently, could you 1) check whether there's already a fonts style for semi-bold in a utils file somewhere and use that if it exists, and 2) if it doesn't, extract it to the top-level reactStyles const I suggested earlier", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454393860", "createdAt": "2020-07-14T14:22:51Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NDEyOA==", "bodyText": "I don't think that the props:  is necessary", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454394128", "createdAt": "2020-07-14T14:23:13Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NTQ1OA==", "bodyText": "I don't think this is necessary either", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454395458", "createdAt": "2020-07-14T14:24:54Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5NzU2Nw==", "bodyText": "style nit for multi-line fp / stream operations:\nconst actionTypes = action.eventBundles\n    .map((eventBundle) => { return eventBundle.header.actionType; })\n    .join(' & ');", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454397567", "createdAt": "2020-07-14T14:27:39Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODA2Ng==", "bodyText": "this could be spread over multiple lines for ease of reading.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454398066", "createdAt": "2020-07-14T14:28:21Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {\n+    return eventBundle.header.actionType;\n+  }).join(' & ');\n+  return (\n+      <ActionAuditCardBase>\n+        <FlexRow style={{\n+          fontWeight: 200,\n+          textAlign: 'left',\n+          fontSize: '0.825rem',\n+          padding: '5px'\n+        }}><div>{timeString}</div><div style={{marginLeft: 'auto'}}>{actionTypes}</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODIyMw==", "bodyText": "nit: put a newline above this", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454398223", "createdAt": "2020-07-14T14:28:32Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {\n+    return eventBundle.header.actionType;\n+  }).join(' & ');\n+  return (\n+      <ActionAuditCardBase>\n+        <FlexRow style={{\n+          fontWeight: 200,\n+          textAlign: 'left',\n+          fontSize: '0.825rem',\n+          padding: '5px'\n+        }}><div>{timeString}</div><div style={{marginLeft: 'auto'}}>{actionTypes}</div>\n+        </FlexRow>\n+        {action.eventBundles.map((eventBundle, index) =>\n+            <EventBundleView key={index} eventBundle={eventBundle}/>)}\n+      </ActionAuditCardBase>\n+  );\n+};\n+export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM5ODMxMw==", "bodyText": "this is probably extraneous by this point", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454398313", "createdAt": "2020-07-14T14:28:39Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-card-list-view.tsx", "diffHunk": "@@ -0,0 +1,131 @@\n+import colors from 'app/styles/colors';\n+import * as fp from 'lodash/fp';\n+import * as moment from 'moment';\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTargetPropertyChange\n+} from '../../../generated';\n+import {ActionAuditCardBase} from '../card';\n+import {FlexRow} from '../flex';\n+\n+\n+const HidableCell = (props: {content: string}) => {\n+  const {content} = props;\n+  return <div style={{backgroundColor: content ? 'white' : '#f0f3f5',\n+    border: '1px solid',\n+    boxSizing: 'border-box'}}>{content}</div>;\n+};\n+\n+const PropertyChangeListEntry = (props: {targetProperty?: string, previousValue?: string, newValue?: string}) => {\n+  const {targetProperty, previousValue, newValue} = props;\n+  return <React.Fragment>\n+    <HidableCell content={targetProperty}/>\n+    <HidableCell content={previousValue}/>\n+    <HidableCell content={newValue}/>\n+  </React.Fragment>;\n+};\n+\n+const PropertyChangeListView = (props: { propertyChanges: AuditTargetPropertyChange[] }) => {\n+  const {propertyChanges} = props;\n+  const propertyCellStyle = {fontWeight: 600, border: `1px solid`};\n+\n+  return propertyChanges.length > 0 ?\n+  <div style={{\n+    margin: '0.25rem 0 0rem 1rem',\n+    display: 'grid',\n+    gridTemplateColumns: 'repeat(3, 1fr)'\n+  }}>\n+    <div style={propertyCellStyle}>Changed Property</div>\n+    <div style={propertyCellStyle}>Previous Value</div>\n+    <div style={propertyCellStyle}>New Value</div>\n+    {propertyChanges.map((propertyChange, index) => <PropertyChangeListEntry {...propertyChange} key={index}/>)}\n+  </div> : <div style={{margin: '0.25rem 0 0rem 1rem', fontStyle: 'italic'}}>No Property Changes</div>;\n+};\n+\n+const typeTextColor   = colors.primary;\n+const actionTextColor = colors.success;\n+const targetTextColor = colors.accent;\n+\n+const AuditEventBundleHeaderView = (props: { header: AuditEventBundleHeader }) => {\n+  const {header} = props;\n+  return <div>\n+    <div style={{  margin: '0',\n+      display: 'flex',\n+      flexDirection: 'row',\n+      textAlign: 'center',\n+      fontWeight: 600}}>\n+      <div style={{color: typeTextColor, margin: '5px'}}>{header.agent.agentType}</div>\n+      <div style={{color: actionTextColor, margin: '5px'}}>{header.actionType}</div>\n+      <div style={{color: targetTextColor, margin: '5px'}}>{header.target.targetType}</div>\n+    </div>\n+    <div style={{\n+      marginLeft: '1rem',\n+      display: 'grid',\n+      justifyItems: 'start',\n+      columnGap: '0.5rem',\n+      gridTemplateColumns: 'auto 1fr',\n+      gridTemplateRows: '1fr 1fr 1fr',\n+      gridAutoFlow: 'column',\n+      color: typeTextColor\n+    }}>\n+          <div style={{fontWeight:  600}}>Agent</div>\n+          <div>{`${header.agent.agentType} ${header.agent.agentId}`}</div>\n+          <div>{`${header.agent.agentUsername}`}</div>\n+          <div style={{fontWeight:  600, color: targetTextColor}}>Target</div>\n+          <div style={{color: targetTextColor}}>{`${header.target.targetType} ${header.target.targetId || ''}`}</div>\n+          <div></div>\n+    </div>\n+  </div >;\n+};\n+\n+const EventBundleView = (props: { eventBundle: AuditEventBundle }) => {\n+  const {eventBundle} = props;\n+  return <div style={{marginBottom: '1rem'}}>\n+    <AuditEventBundleHeaderView header={eventBundle.header}/>\n+    <PropertyChangeListView propertyChanges={eventBundle.propertyChanges}/>\n+  </div>;\n+};\n+\n+const AuditActionCard = (props: { action: AuditAction }) => {\n+  const {action} = props;\n+  // Something in the codegen is wonky here. the actionTime field is typed as a Date,\n+  // but turns out to be a number for some reason here. In other contexts it appears\n+  // to format itself happily though.\n+  // yyyy-MM-dd HH:mm:ss.SSS\n+  // SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd\");\n+\n+  const timeString = moment(new Date(action.actionTime)).format('YYYY-MM-DD h:mm:ss');\n+  const actionTypes = action.eventBundles.map((eventBundle) => {\n+    return eventBundle.header.actionType;\n+  }).join(' & ');\n+  return (\n+      <ActionAuditCardBase>\n+        <FlexRow style={{\n+          fontWeight: 200,\n+          textAlign: 'left',\n+          fontSize: '0.825rem',\n+          padding: '5px'\n+        }}><div>{timeString}</div><div style={{marginLeft: 'auto'}}>{actionTypes}</div>\n+        </FlexRow>\n+        {action.eventBundles.map((eventBundle, index) =>\n+            <EventBundleView key={index} eventBundle={eventBundle}/>)}\n+      </ActionAuditCardBase>\n+  );\n+};\n+export const AuditActionCardListView = (props: { actions: AuditAction[]}) => {\n+  const {actions} = props;\n+  console.log(`actions length ${actions.length}`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwMTkxMw==", "bodyText": "nit: workspacd -> workspace", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454401913", "createdAt": "2020-07-14T14:33:20Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQwMjA1OQ==", "bodyText": "nit: assmptions -> assumptions", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454402059", "createdAt": "2020-07-14T14:33:32Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxMTY4MA==", "bodyText": "extraneous?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454411680", "createdAt": "2020-07-14T14:45:51Z", "author": {"login": "als364"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,145 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import { useParams } from 'react-router-dom';\n+import {AuditLogEntry} from '../../../generated';\n+import {AuditAction} from '../../../generated/model/auditAction';\n+\n+\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspacd audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assmptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  debug: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() => {\n+    loadNextSubject && setLoadNextSubject(false);\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}} disabled={fp.isEmpty(auditSubject)} onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {\n+    const timeoutId = setTimeout(() => onChange(displayNum), 250);\n+    return () => clearTimeout(timeoutId);\n+  }, [displayNum]);\n+\n+  return <div>\n+    <label style={{\n+      fontSize: 14,\n+      display: 'block',\n+      color: colors.primary,\n+      lineHeight: '22px',\n+      fontWeight: 600,\n+      marginRight: '0.25rem'\n+    }}>{`Number of Actions to Display (${totalActions} available)`}</label>\n+    <NumberInput value={Math.min(displayNum, totalActions)} min={1} max={totalActions} style={{width: '4rem'}} onChange={setDisplayNum}/>\n+  </div>;\n+};\n+\n+export const AuditPageComponent = (props: AuditPageProps) => {\n+  const {initialAuditSubject, queryAuditLog, getNextAuditPath, debug, auditSubjectType, buttonLabel} = props;\n+  const emptyResult = {actions: [], logEntries: [], sourceId: 0, query: ''};\n+  const [loading, setLoading] = useState(true);\n+  const [queryResult, setQueryResult] = useState<GenericAuditQueryResult>(emptyResult);\n+  const [displayNum, setDisplayNum] = useState(20);\n+  const {actions, sourceId, query} = queryResult;\n+\n+  useEffect(() => {\n+    if (debug) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA==", "bodyText": "do we want this to work like this for ALL react routes?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454414068", "createdAt": "2020-07-14T14:49:02Z", "author": {"login": "als364"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -42,7 +42,7 @@ export const AppRoute = ({path, data = {}, component: Component}): React.ReactEl\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route path={path} >\n+  return <Route exact={true} path={path} >", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjA2MQ==", "bodyText": "what ticket captures this work?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454416061", "createdAt": "2020-07-14T14:51:29Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -0,0 +1,46 @@\n+import {profileApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import {useParams} from 'react-router-dom';\n+import {AuditAction, AuditEventBundle} from '../../../generated';\n+import {AuditPageComponent} from '../../components/admin/audit-page-component';\n+\n+const getAuditLog = (subject: string) => {\n+  const bqRowLimit = 1000; // Workspaces take many rows because of the Research Purpose fields\n+  return profileApi().getAuditLogEntries(subject, bqRowLimit);\n+};\n+\n+const queryAuditLog = (subject: string) => {\n+  return getAuditLog(subject).then((queryResult) => {\n+    console.log(queryResult.query);\n+    return {\n+      actions: queryResult.actions,\n+      sourceId: queryResult.userDatabaseId,\n+      query: queryResult.query,\n+      logEntries: queryResult.logEntries\n+    };\n+  }).then(genericQueryResult => {\n+    // TODO(jaycarlton): This is a workaround for LOGIN event issues on the backend. Can be removed when that patch is in.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjEzMw==", "bodyText": "is this necessary?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454416133", "createdAt": "2020-07-14T14:51:37Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/admin/user-audit.tsx", "diffHunk": "@@ -0,0 +1,46 @@\n+import {profileApi} from 'app/services/swagger-fetch-clients';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+import {useParams} from 'react-router-dom';\n+import {AuditAction, AuditEventBundle} from '../../../generated';\n+import {AuditPageComponent} from '../../components/admin/audit-page-component';\n+\n+const getAuditLog = (subject: string) => {\n+  const bqRowLimit = 1000; // Workspaces take many rows because of the Research Purpose fields\n+  return profileApi().getAuditLogEntries(subject, bqRowLimit);\n+};\n+\n+const queryAuditLog = (subject: string) => {\n+  return getAuditLog(subject).then((queryResult) => {\n+    console.log(queryResult.query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNjg1MA==", "bodyText": "You probably didn't mean to do this twice and you probably also should explain what you mean by this", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r454416850", "createdAt": "2020-07-14T14:52:33Z", "author": {"login": "als364"}, "path": "ui/src/app/utils/audit-utils.tsx", "diffHunk": "@@ -0,0 +1,35 @@\n+import * as React from 'react';\n+import {\n+  AuditAction,\n+  AuditEventBundle,\n+  AuditEventBundleHeader,\n+  AuditTarget,\n+  AuditTargetPropertyChange\n+} from '../../generated';\n+\n+// Type sold separately\n+// Type sold separately", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67bd670e63c7609194a87f741f2320db5d75e704", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/67bd670e63c7609194a87f741f2320db5d75e704", "committedDate": "2020-07-14T15:54:02Z", "message": "Merge branch 'master' into psantos-jcarlton/audit-cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ed75b4b71184a7f76b1fb48aaa4acbdf8cb73be", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/3ed75b4b71184a7f76b1fb48aaa4acbdf8cb73be", "committedDate": "2020-07-14T17:50:58Z", "message": "pass linting; use fp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "563f0b5941a0a146c85a1139ad9bc6ad6e001867", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/563f0b5941a0a146c85a1139ad9bc6ad6e001867", "committedDate": "2020-07-14T21:38:50Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0d304ccb7ff9de6126f01708846c2e0026517e6", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/d0d304ccb7ff9de6126f01708846c2e0026517e6", "committedDate": "2020-07-14T22:18:06Z", "message": "fixes from PR"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDIwNDE5", "url": "https://github.com/all-of-us/workbench/pull/3736#pullrequestreview-449020419", "createdAt": "2020-07-15T14:37:58Z", "commit": {"oid": "d0d304ccb7ff9de6126f01708846c2e0026517e6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDozNzo1OFrOGyBRCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNDozNzo1OFrOGyBRCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjcyOA==", "bodyText": "I am going to add a comment here to make it clear what the purpose of this is:\nTo debounce the input action. Without this it will re-render immediately after every number change.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455102728", "createdAt": "2020-07-15T14:37:58Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,147 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import {AuditAction, AuditLogEntry} from 'generated';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspace audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assumptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  logVerbose: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() =>  {\n+    if (loadNextSubject) {\n+      setLoadNextSubject(false);\n+    }\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}\n+            disabled={fp.isEmpty(auditSubject)}\n+            onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0d304ccb7ff9de6126f01708846c2e0026517e6"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c9bd7e4bf70ffe80f00179dc89f179040da0061", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/5c9bd7e4bf70ffe80f00179dc89f179040da0061", "committedDate": "2020-07-15T15:13:38Z", "message": "Add useDebounce hook"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "791273347a06ceff56da50a0bd846f25022c64b1", "author": {"user": {"login": "petesantos", "name": "Pete Santos"}}, "url": "https://github.com/all-of-us/workbench/commit/791273347a06ceff56da50a0bd846f25022c64b1", "committedDate": "2020-07-15T15:14:08Z", "message": "Merge branch 'psantos-jcarlton/audit-cards' of github.com:all-of-us/workbench into psantos-jcarlton/audit-cards"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MDY0NjUy", "url": "https://github.com/all-of-us/workbench/pull/3736#pullrequestreview-449064652", "createdAt": "2020-07-15T15:19:09Z", "commit": {"oid": "d0d304ccb7ff9de6126f01708846c2e0026517e6"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxOTowOVrOGyDLvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyMDowNlrOGyDOyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNDE0MQ==", "bodyText": "Tested - I don't see any issues. If we need to we can pass in a parameter to disable exact matching", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455134141", "createdAt": "2020-07-15T15:19:09Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/app-router.tsx", "diffHunk": "@@ -42,7 +42,7 @@ export const AppRoute = ({path, data = {}, component: Component}): React.ReactEl\n   const routeParams = useParams();\n   const routeHistory = useHistory();\n \n-  return <Route path={path} >\n+  return <Route exact={true} path={path} >", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxNDA2OA=="}, "originalCommit": {"oid": "6a5b9d58bcd894bfe50fb517d3de6e97342604ca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNDkyMQ==", "bodyText": "I added a useDebounce hook rather than a code comment. Hopefully this will make it clearer in the code what we are doing rather than using a comment to explain.", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455134921", "createdAt": "2020-07-15T15:20:06Z", "author": {"login": "petesantos"}, "path": "ui/src/app/components/admin/audit-page-component.tsx", "diffHunk": "@@ -0,0 +1,147 @@\n+import {AuditActionCardListView} from 'app/components/admin/audit-card-list-view';\n+import {Navigate} from 'app/components/app-router';\n+import {Button} from 'app/components/buttons';\n+import {NumberInput, TextInputWithLabel} from 'app/components/inputs';\n+import colors from 'app/styles/colors';\n+import {actionToString} from 'app/utils/audit-utils';\n+import {AuditAction, AuditLogEntry} from 'generated';\n+import * as fp from 'lodash/fp';\n+import * as React from 'react';\n+\n+const {useEffect, useState} = React;\n+\n+// The APIs for user and workspace audit are slightly different, and typed differently,\n+// because of the need to return different database IDs and not get them confused (in future endpoints).\n+// This interface allows an easy mapping from both real query response types.\n+export interface GenericAuditQueryResult {\n+  /**\n+   * Re-constructed objects for each composite action in the query results.\n+   */\n+  actions?: Array<AuditAction>;\n+  logEntries: Array<AuditLogEntry>;\n+  /**\n+   * Copy of the query used in BigQuery to assist in further exploration or debugging.\n+   */\n+  query: string;\n+  /**\n+   * ID in the MySQL database and BigQuery Audit Database for the this qyery. Currently either\n+   * a userId or workspaceId as appropriate. This may be needed for situations (such as workspace audit)\n+   * where it's not obvious in the responses which workspace is the one you audited.\n+   */\n+  sourceId: number;\n+}\n+\n+// Common properties for User & Workspace (and similar future pages).\n+// Assumptions: the path parameter is called initially with the audit API subject.\n+//   (this will need revisiting for multi-subject queries)\n+export interface AuditPageProps {\n+  initialAuditSubject?: string;\n+  auditSubjectType: string;\n+  queryAuditLog: (subject: string) => Promise<GenericAuditQueryResult>;\n+  getNextAuditPath: (subject: string) => string;\n+  logVerbose: boolean;\n+  buttonLabel?: string;\n+}\n+\n+const UserInput = ({initialAuditSubject, auditSubjectType, getNextAuditPath, buttonLabel}) => {\n+  const [auditSubject, setAuditSubject] = useState(initialAuditSubject);\n+  const [loadNextSubject, setLoadNextSubject] = useState(false);\n+  useEffect(() =>  {\n+    if (loadNextSubject) {\n+      setLoadNextSubject(false);\n+    }\n+  }, [loadNextSubject]);\n+\n+  return <React.Fragment>\n+    {loadNextSubject && <Navigate to={getNextAuditPath(auditSubject)}/>}\n+    <TextInputWithLabel\n+      containerStyle={{display: 'inline-block'}}\n+      style={{width: '15rem', margin: '1rem'}}\n+      labelText = {buttonLabel || auditSubjectType}\n+      value = {auditSubject}\n+      onChange = {setAuditSubject}\n+    />\n+    <Button style={{height: '1.5rem', margin: '0.25rem 0.5rem'}}\n+            disabled={fp.isEmpty(auditSubject)}\n+            onClick={() => setLoadNextSubject(true)}>\n+    Audit\n+    </Button>\n+  </React.Fragment>;\n+};\n+\n+const NumActions = ({onChange, totalActions}) => {\n+  const [displayNum, setDisplayNum] = useState(20);\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEwMjcyOA=="}, "originalCommit": {"oid": "d0d304ccb7ff9de6126f01708846c2e0026517e6"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5MTU3OTQ3", "url": "https://github.com/all-of-us/workbench/pull/3736#pullrequestreview-449157947", "createdAt": "2020-07-15T17:13:16Z", "commit": {"oid": "791273347a06ceff56da50a0bd846f25022c64b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzoxMzoxNlrOGyHg1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNzoxMzoxNlrOGyHg1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTIwNTA3Nw==", "bodyText": "OK. How did this bit relate to the rest of the PR?", "url": "https://github.com/all-of-us/workbench/pull/3736#discussion_r455205077", "createdAt": "2020-07-15T17:13:16Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/utils/index.tsx", "diffHunk": "@@ -527,3 +529,9 @@ export function renderUSD(value: number) {\n   }\n }\n \n+export const useDebounce = (fn: Function, updateList = [], ms = 250) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "791273347a06ceff56da50a0bd846f25022c64b1"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e56ef237428f1d7e85d2c96ad2a10d0704a947e5", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/e56ef237428f1d7e85d2c96ad2a10d0704a947e5", "committedDate": "2020-07-15T21:17:40Z", "message": "Merge branch 'master' into psantos-jcarlton/audit-cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78d0aedb52d2625a18cb3123fc51abf6f63742b9", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/78d0aedb52d2625a18cb3123fc51abf6f63742b9", "committedDate": "2020-07-16T15:16:12Z", "message": "fixes & remove console output, replacing with button to download query and link to BQ console"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5OTk5OTA2", "url": "https://github.com/all-of-us/workbench/pull/3736#pullrequestreview-449999906", "createdAt": "2020-07-16T16:08:56Z", "commit": {"oid": "78d0aedb52d2625a18cb3123fc51abf6f63742b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39c9ec1b33ef19e6ab3c9061ef6a31c6d8da2a0e", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/39c9ec1b33ef19e6ab3c9061ef6a31c6d8da2a0e", "committedDate": "2020-07-17T13:59:12Z", "message": "Merge branch 'master' into psantos-jcarlton/audit-cards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38bae3e99e1901ec1247bd4564b9356fba0d5a53", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/38bae3e99e1901ec1247bd4564b9356fba0d5a53", "committedDate": "2020-07-17T14:52:42Z", "message": "pr fixes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4658, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}