{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjA3MzIw", "number": 3110, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozMzozNFrODfLZKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo1NTozN1rODfUCLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDE5MTE1OnYy", "diffSide": "LEFT", "path": "ui/src/app/pages/login/sign-in.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxMzozMzozNFrOFoupng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo1Mzo0NlrOFo8fZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTY3OA==", "bodyText": "GitHub is kinda mangling the diff here. The key change made was to extract the inner class and turn it into a top-level component called SignInReactImpl. This allows us to refer to that class from the unit test, which this PR uses to verify that the set of sign-in steps is correct when invitation key verification is turned off.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378251678", "createdAt": "2020-02-12T13:33:34Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODMwNTEwNg==", "bodyText": "The diff looks much cleaner if you go \"gear menu --> hide whitespace changes\", or this link: https://github.com/all-of-us/workbench/pull/3110/files?utf8=%E2%9C%93&diff=unified&w=1", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378305106", "createdAt": "2020-02-12T14:59:58Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTY3OA=="}, "originalCommit": {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3ODQzNw==", "bodyText": "it's mangled even with but at least it highlights the differences", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378478437", "createdAt": "2020-02-12T19:53:46Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODI1MTY3OA=="}, "originalCommit": {"oid": "ac18b98f1c876287ee57db2a2cf635c978bf383a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTQ1NzU2OnYy", "diffSide": "RIGHT", "path": "api/build.gradle", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOToxMDoxNlrOFo7Emw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo0MDozN1rOFo_ilw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NTE5NQ==", "bodyText": "Ooh. Will this mean that we'll no longer have to create a WorkbenchConfigProvider per test?", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378455195", "createdAt": "2020-02-12T19:10:16Z", "author": {"login": "als364"}, "path": "api/build.gradle", "diffHunk": "@@ -293,6 +293,10 @@ sourceSets {\n     runtimeClasspath += generated.output\n   }\n   test {\n+    // Allow unit tests to directly load config files.\n+    resources {\n+      srcDir \"config/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUyODQwNw==", "bodyText": "This specific change allows us to load the config_test.json by default from within unit tests. IMO this is a realistic way to set up our tests, e.g. by default our unit & integration tests are configured the same way they are in \"test\" environment.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378528407", "createdAt": "2020-02-12T21:40:37Z", "author": {"login": "gjuggler"}, "path": "api/build.gradle", "diffHunk": "@@ -293,6 +293,10 @@ sourceSets {\n     runtimeClasspath += generated.output\n   }\n   test {\n+    // Allow unit tests to directly load config files.\n+    resources {\n+      srcDir \"config/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ1NTE5NQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU1MTUzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/BaseControllerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTozOToxMFrOFo8Abw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjoxNzoyNFrOFpAkkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ==", "bodyText": "With a name like this, I'd expect everything to extend it. Can you call this something that makes it clearer this class is intended for composition? Maybe something like WithWorkbenchConfig?", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378470511", "createdAt": "2020-02-12T19:39:10Z", "author": {"login": "als364"}, "path": "api/src/test/java/org/pmiops/workbench/api/BaseControllerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.api;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.test.FakeLongRandom;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public abstract class BaseControllerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMzM5NQ==", "bodyText": "Hmm, good point. My intention here would be for this to be a base class extended by all other test classes (I don't think there's enough variability in our tests to warrant full composition.\nBut given the number of controller test cases, I didn't want to bite this off as part of this PR. I filed https://precisionmedicineinitiative.atlassian.net/browse/RW-4443 and added some class-level comments clarifying the intent.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378533395", "createdAt": "2020-02-12T21:51:12Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/api/BaseControllerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.api;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.test.FakeLongRandom;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public abstract class BaseControllerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODU0NTI5Ng==", "bodyText": "Works for me. Can you coordinate with Joel to put this on the list of best practices things?", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378545296", "createdAt": "2020-02-12T22:17:24Z", "author": {"login": "als364"}, "path": "api/src/test/java/org/pmiops/workbench/api/BaseControllerTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package org.pmiops.workbench.api;\n+\n+import com.google.common.io.Resources;\n+import com.google.gson.Gson;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.util.Random;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.runner.RunWith;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.test.FakeLongRandom;\n+import org.springframework.beans.factory.config.ConfigurableBeanFactory;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+public abstract class BaseControllerTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3MDUxMQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU4MjE5OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0ODoxMVrOFo8TuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1MTo0OVrOFo_3VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTQ0OQ==", "bodyText": "extraneous", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475449", "createdAt": "2020-02-12T19:48:11Z", "author": {"login": "als364"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -644,24 +660,8 @@ private void assertUser(\n     assertThat(user.getFamilyName()).isEqualTo(familyName);\n     assertThat(user.getGivenName()).isEqualTo(givenName);\n     assertThat(user.getDataAccessLevelEnum()).isEqualTo(dataAccessLevel);\n-    assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);\n+    assertThat(user.getFirstSignInTime().getTime()).isEqualTo(firstSignInTime.getTime());\n+    // assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 337}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzMzcxNw==", "bodyText": "Yep, sorry. I'd been mucking with debugging some errors while refactoring the tests, forgot to clean up.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378533717", "createdAt": "2020-02-12T21:51:49Z", "author": {"login": "gjuggler"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -644,24 +660,8 @@ private void assertUser(\n     assertThat(user.getFamilyName()).isEqualTo(familyName);\n     assertThat(user.getGivenName()).isEqualTo(givenName);\n     assertThat(user.getDataAccessLevelEnum()).isEqualTo(dataAccessLevel);\n-    assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);\n+    assertThat(user.getFirstSignInTime().getTime()).isEqualTo(firstSignInTime.getTime());\n+    // assertThat(user.getFirstSignInTime()).isEqualTo(firstSignInTime);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTQ0OQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 337}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU4MjkyOnYy", "diffSide": "RIGHT", "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0ODoyM1rOFo8UMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1ODowMVrOFpAClw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTU2OQ==", "bodyText": "validate", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475569", "createdAt": "2020-02-12T19:48:23Z", "author": {"login": "als364"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjU5OQ==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536599", "createdAt": "2020-02-12T21:58:01Z", "author": {"login": "gjuggler"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTU2OQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU4Mzc5OnYy", "diffSide": "RIGHT", "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo0ODozOFrOFo8UvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1Nzo1N1rOFpACgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTcwOQ==", "bodyText": "valide -> validate", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378475709", "createdAt": "2020-02-12T19:48:38Z", "author": {"login": "als364"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjU3Ng==", "bodyText": "Done", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536576", "createdAt": "2020-02-12T21:57:57Z", "author": {"login": "gjuggler"}, "path": "common-api/src/main/java/org/pmiops/workbench/config/WorkbenchConfig.java", "diffHunk": "@@ -184,16 +184,21 @@ public String freeTierBillingAccountName() {\n     public String host;\n   }\n \n-  // The access object specifies whether each of the following access requirements block access\n-  // to the workbench.\n+  // Config related to user sign-up and registration, including access modules and controls around\n+  // the sign-up flow.\n   public static class AccessConfig {\n     // Allows a user to bypass their own access modules. This is used for testing purposes so that\n     // We can give control over 3rd party access modules\n     public boolean unsafeAllowSelfBypass;\n+    // These booleans control whether each of our core access modules are enabled per environment.\n     public boolean enableComplianceTraining;\n     public boolean enableEraCommons;\n     public boolean enableDataUseAgreement;\n     public boolean enableBetaAccess;\n+    // Controls whether an invitation key is required for user creation. When true, the account\n+    // creation UI will show an invitation key form, and the server-side will valide the key before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3NTcwOQ=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU5NzY2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/sign-in.spec.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo1MjozOVrOFo8dJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1ODozOFrOFpADoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg2Mg==", "bodyText": "This should be moved up to the new shallowComponent in line 23.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378477862", "createdAt": "2020-02-12T19:52:39Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -74,7 +80,7 @@ describe('SignInReact', () => {\n   it('should handle sign-up flow for legacy account creation', () => {\n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjg2NQ==", "bodyText": "Thanks \u2013\u00a0done.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536865", "createdAt": "2020-02-12T21:58:38Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -74,7 +80,7 @@ describe('SignInReact', () => {\n   it('should handle sign-up flow for legacy account creation', () => {\n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg2Mg=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTU5NzgxOnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/sign-in.spec.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo1Mjo0NFrOFo8dSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1ODo0NFrOFpAD2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg5Ng==", "bodyText": "And so should this.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378477896", "createdAt": "2020-02-12T19:52:44Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -97,7 +103,7 @@ describe('SignInReact', () => {\n \n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNjkyMQ==", "bodyText": "Done.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378536921", "createdAt": "2020-02-12T21:58:44Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.spec.tsx", "diffHunk": "@@ -97,7 +103,7 @@ describe('SignInReact', () => {\n \n     // To correctly shallow-render this component wrapped by two HOCs, we need to add two extra\n     // .shallow() calls at the end.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3Nzg5Ng=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTYwNjg2OnYy", "diffSide": "RIGHT", "path": "ui/src/app/pages/login/sign-in.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxOTo1NTozN1rOFo8jLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMTo1OToyMVrOFpAFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3OTQwNA==", "bodyText": "nit: I'd prefer to just see separate lists returned in each of these cases. In this case, we're not going to change what enableNewAccountCreation or requireInvitationKey means.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378479404", "createdAt": "2020-02-12T19:55:37Z", "author": {"login": "als364"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n-  class extends React.Component<SignInProps, SignInState> {\n+/**\n+ * The inner / implementation SignIn component. This class should only be rendered via the\n+ * SignInReact method, which wraps this with the expected higher-order components.\n+ */\n+export class SignInReactImpl extends React.Component<SignInProps, SignInState> {\n \n-    constructor(props: SignInProps) {\n-      super(props);\n-      this.state = {\n-        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n-        invitationKey: null,\n-        termsOfServiceVersion: null,\n-        // This defines the profile state for a new user flow. This will get passed to each\n-        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n-        // data in its onComplete callback.\n-        profile: this.createEmptyProfile()\n-      };\n-    }\n+  constructor(props: SignInProps) {\n+    super(props);\n+    this.state = {\n+      currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+      invitationKey: null,\n+      termsOfServiceVersion: null,\n+      // This defines the profile state for a new user flow. This will get passed to each\n+      // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+      // data in its onComplete callback.\n+      profile: this.createEmptyProfile()\n+    };\n+  }\n \n-    createEmptyProfile(): Profile {\n-      return {\n-        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n-        // profile creation, this field is populated with the full email address.\n-        username: '',\n-        dataAccessLevel: DataAccessLevel.Unregistered,\n-        givenName: '',\n-        familyName: '',\n-        contactEmail: '',\n-        currentPosition: '',\n-        organization: '',\n-        areaOfResearch: '',\n-        address: {\n-          streetAddress1: '',\n-          streetAddress2: '',\n-          city: '',\n-          state: '',\n-          country: '',\n-          zipCode: '',\n+  private createEmptyProfile(): Profile {\n+    return {\n+      // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+      // profile creation, this field is populated with the full email address.\n+      username: '',\n+      dataAccessLevel: DataAccessLevel.Unregistered,\n+      givenName: '',\n+      familyName: '',\n+      contactEmail: '',\n+      currentPosition: '',\n+      organization: '',\n+      areaOfResearch: '',\n+      address: {\n+        streetAddress1: '',\n+        streetAddress2: '',\n+        city: '',\n+        state: '',\n+        country: '',\n+        zipCode: '',\n+      },\n+      institutionalAffiliations: [\n+        // We only allow entering a single institutional affiliation from the create account\n+        // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n+        // form.\n+        {\n+          institution: undefined,\n+          nonAcademicAffiliation: undefined,\n+          role: undefined,\n         },\n-        institutionalAffiliations: [\n-          // We only allow entering a single institutional affiliation from the create account\n-          // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n-          // form.\n-          {\n-            institution: undefined,\n-            nonAcademicAffiliation: undefined,\n-            role: undefined,\n-          },\n-        ],\n-        demographicSurvey: {},\n-        degrees: [] as Degree[],\n-      };\n+      ],\n+      demographicSurvey: {},\n+      degrees: [] as Degree[],\n+    };\n+  }\n+\n+  componentDidMount() {\n+    document.body.style.backgroundColor = colors.light;\n+    this.props.onInit();\n+  }\n+\n+  /**\n+   * Creates the appropriate set of steps based on the server-side config.\n+   *\n+   * Made visible for ease of unit-testing.\n+   */\n+  public getAccountCreationSteps(): Array<SignInStep> {\n+    let steps = [\n+      SignInStep.LANDING,\n+      SignInStep.INVITATION_KEY,\n+      SignInStep.TERMS_OF_SERVICE,\n+      SignInStep.ACCOUNT_CREATION,\n+      SignInStep.DEMOGRAPHIC_SURVEY,\n+      SignInStep.SUCCESS_PAGE\n+    ];\n+\n+    const {enableNewAccountCreation, requireInvitationKey} = this.props.serverConfig;\n+\n+    if (!enableNewAccountCreation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzNzIzMw==", "bodyText": "good idea \u2013\u00a0done.", "url": "https://github.com/all-of-us/workbench/pull/3110#discussion_r378537233", "createdAt": "2020-02-12T21:59:21Z", "author": {"login": "gjuggler"}, "path": "ui/src/app/pages/login/sign-in.tsx", "diffHunk": "@@ -127,127 +127,177 @@ interface SignInState {\n   termsOfServiceVersion?: number;\n }\n \n-export const SignInReact = fp.flow(withServerConfig(), withWindowSize())(\n-  class extends React.Component<SignInProps, SignInState> {\n+/**\n+ * The inner / implementation SignIn component. This class should only be rendered via the\n+ * SignInReact method, which wraps this with the expected higher-order components.\n+ */\n+export class SignInReactImpl extends React.Component<SignInProps, SignInState> {\n \n-    constructor(props: SignInProps) {\n-      super(props);\n-      this.state = {\n-        currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n-        invitationKey: null,\n-        termsOfServiceVersion: null,\n-        // This defines the profile state for a new user flow. This will get passed to each\n-        // step component as a prop. When each sub-step completes, it will pass the updated Profile\n-        // data in its onComplete callback.\n-        profile: this.createEmptyProfile()\n-      };\n-    }\n+  constructor(props: SignInProps) {\n+    super(props);\n+    this.state = {\n+      currentStep: props.initialStep ? props.initialStep : SignInStep.LANDING,\n+      invitationKey: null,\n+      termsOfServiceVersion: null,\n+      // This defines the profile state for a new user flow. This will get passed to each\n+      // step component as a prop. When each sub-step completes, it will pass the updated Profile\n+      // data in its onComplete callback.\n+      profile: this.createEmptyProfile()\n+    };\n+  }\n \n-    createEmptyProfile(): Profile {\n-      return {\n-        // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n-        // profile creation, this field is populated with the full email address.\n-        username: '',\n-        dataAccessLevel: DataAccessLevel.Unregistered,\n-        givenName: '',\n-        familyName: '',\n-        contactEmail: '',\n-        currentPosition: '',\n-        organization: '',\n-        areaOfResearch: '',\n-        address: {\n-          streetAddress1: '',\n-          streetAddress2: '',\n-          city: '',\n-          state: '',\n-          country: '',\n-          zipCode: '',\n+  private createEmptyProfile(): Profile {\n+    return {\n+      // Note: We abuse the \"username\" field here by omitting \"@domain.org\". After\n+      // profile creation, this field is populated with the full email address.\n+      username: '',\n+      dataAccessLevel: DataAccessLevel.Unregistered,\n+      givenName: '',\n+      familyName: '',\n+      contactEmail: '',\n+      currentPosition: '',\n+      organization: '',\n+      areaOfResearch: '',\n+      address: {\n+        streetAddress1: '',\n+        streetAddress2: '',\n+        city: '',\n+        state: '',\n+        country: '',\n+        zipCode: '',\n+      },\n+      institutionalAffiliations: [\n+        // We only allow entering a single institutional affiliation from the create account\n+        // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n+        // form.\n+        {\n+          institution: undefined,\n+          nonAcademicAffiliation: undefined,\n+          role: undefined,\n         },\n-        institutionalAffiliations: [\n-          // We only allow entering a single institutional affiliation from the create account\n-          // page, so we pre-fill a single empty entry which will be bound to the AccountCreation\n-          // form.\n-          {\n-            institution: undefined,\n-            nonAcademicAffiliation: undefined,\n-            role: undefined,\n-          },\n-        ],\n-        demographicSurvey: {},\n-        degrees: [] as Degree[],\n-      };\n+      ],\n+      demographicSurvey: {},\n+      degrees: [] as Degree[],\n+    };\n+  }\n+\n+  componentDidMount() {\n+    document.body.style.backgroundColor = colors.light;\n+    this.props.onInit();\n+  }\n+\n+  /**\n+   * Creates the appropriate set of steps based on the server-side config.\n+   *\n+   * Made visible for ease of unit-testing.\n+   */\n+  public getAccountCreationSteps(): Array<SignInStep> {\n+    let steps = [\n+      SignInStep.LANDING,\n+      SignInStep.INVITATION_KEY,\n+      SignInStep.TERMS_OF_SERVICE,\n+      SignInStep.ACCOUNT_CREATION,\n+      SignInStep.DEMOGRAPHIC_SURVEY,\n+      SignInStep.SUCCESS_PAGE\n+    ];\n+\n+    const {enableNewAccountCreation, requireInvitationKey} = this.props.serverConfig;\n+\n+    if (!enableNewAccountCreation) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ3OTQwNA=="}, "originalCommit": {"oid": "7ad31366b9afad98c560483a3c6e8f051a72cb71"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3303, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}