{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTg5NjU2", "number": 3457, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyNjo0OFrOD1Qfdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowOTo0MVrOD1Yeyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTcxMzE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyNjo0OFrOGKmoUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToxMjo1OFrOGKtb5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MTg1OA==", "bodyText": "Please check if there's a library function for this. As excited as I am to see actual math for the first time in 2020, we shouldn't be doing it this way. If we keep this, we probably need to make a constant out of the tolerance.\nAdditionally, why are we using doubles instead of a Currency class?", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413771858", "createdAt": "2020-04-23T12:26:48Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -151,6 +151,12 @@ private void sendAlertsForCostThresholds(\n         });\n   }\n \n+  // are these two cost values approximately equal?\n+  // used to determine whether we should log anomalies\n+  private boolean withinCostTolerance(double currentCost, double previousCost) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440a34c9de7a1c005ff0a56ead985087329a7fc7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg1OTE2MA==", "bodyText": "good call re: library function.  I'll update.\nre: Currency.  When implemented, that seemed like overkill for our application since we're not doing anything complex and we don't require financial-level precision.  I'm open to the change if we think it's justified.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413859160", "createdAt": "2020-04-23T14:45:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -151,6 +151,12 @@ private void sendAlertsForCostThresholds(\n         });\n   }\n \n+  // are these two cost values approximately equal?\n+  // used to determine whether we should log anomalies\n+  private boolean withinCostTolerance(double currentCost, double previousCost) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MTg1OA=="}, "originalCommit": {"oid": "440a34c9de7a1c005ff0a56ead985087329a7fc7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4MzM2Ng==", "bodyText": "Ultimately we retrieve these values from BigQuery as doubles, so we'll never have the integer-like precision we'd really want in a Currency.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413883366", "createdAt": "2020-04-23T15:12:58Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -151,6 +151,12 @@ private void sendAlertsForCostThresholds(\n         });\n   }\n \n+  // are these two cost values approximately equal?\n+  // used to determine whether we should log anomalies\n+  private boolean withinCostTolerance(double currentCost, double previousCost) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MTg1OA=="}, "originalCommit": {"oid": "440a34c9de7a1c005ff0a56ead985087329a7fc7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTcxNzQ3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoyNzo1MFrOGKmq5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzo1ODoxNVrOGKpamg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MjUxOA==", "bodyText": "Let's see if we can add an audit entry for this, since it's more user-oriented than system- or application-oriented.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413772518", "createdAt": "2020-04-23T12:27:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -170,7 +176,10 @@ private void maybeAlertOnCostThresholds(\n \n     // this shouldn't happen, but it did (RW-4678)\n     // alert if it happens again\n-    if (currentCost < previousCost) {\n+    if (currentCost < previousCost\n+        &&\n+        // was logging many false positives\n+        !withinCostTolerance(currentCost, previousCost)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440a34c9de7a1c005ff0a56ead985087329a7fc7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgxNzQ5OA==", "bodyText": "The purpose of this log is to alert us to bugs in our system, rather than reflecting an actual user condition.  Does that change your judgment of audit vs log?", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413817498", "createdAt": "2020-04-23T13:58:15Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -170,7 +176,10 @@ private void maybeAlertOnCostThresholds(\n \n     // this shouldn't happen, but it did (RW-4678)\n     // alert if it happens again\n-    if (currentCost < previousCost) {\n+    if (currentCost < previousCost\n+        &&\n+        // was logging many false positives\n+        !withinCostTolerance(currentCost, previousCost)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MjUxOA=="}, "originalCommit": {"oid": "440a34c9de7a1c005ff0a56ead985087329a7fc7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjQ5MzU3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToyMzo0M1rOGKt_qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToyMzo0M1rOGKt_qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5MjUyMg==", "bodyText": "I wrote a little utility class for this so you don't have to remember the convention. org.pmiops.workbench.utils.Comparables\nIf you wanted to use it here, you'd need to have a little Comparable class wrapping the fuzzyCompare method. Assuming the convention is the same. I think you'd have make a comparable FuzzyCost class to wrap Double or something though, so not a huge win.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413892522", "createdAt": "2020-04-23T15:23:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -123,8 +128,16 @@ public void checkFreeTierBillingUsage() {\n     sendAlertsForCostThresholds(usersToThresholdCheck, previousUserCosts, userCosts);\n   }\n \n+  private int compareCosts(final double a, final double b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d520d0c749740f4c50eae8dd959af149c9682c04"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjYyMzYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo0ODoxMFrOGKvNBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo0ODoxMFrOGKvNBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMjMyNw==", "bodyText": "There's probably a way to figure this out based on use cases. I know from geometry angle and linear tolerance are different too. This is probably OK.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413912327", "createdAt": "2020-04-23T15:48:10Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/billing/FreeTierBillingService.java", "diffHunk": "@@ -46,6 +47,10 @@\n \n   private static final Logger logger = Logger.getLogger(FreeTierBillingService.class.getName());\n \n+  // somewhat arbitrary\n+  private static final double COST_COMPARISON_TOLERANCE = 0.0001;\n+  private static final double COST_FRACTION_TOLERANCE = 0.0001;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d520d0c749740f4c50eae8dd959af149c9682c04"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzAxODM2OnYy", "diffSide": "RIGHT", "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowODo0OVrOGKy6xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowODo0OVrOGKy6xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3MzE4OA==", "bodyText": "copypaste.  this test uses different thresholds.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413973188", "createdAt": "2020-04-23T17:08:49Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "diffHunk": "@@ -241,7 +241,7 @@ public void checkFreeTierBillingUsage_altDollarThresholds() throws MessagingExce\n         .alertUserFreeTierDollarThreshold(\n             eq(user), eq(threshold), eq(costOverThreshold), eq(remaining));\n \n-    // check that we do not alert twice for the 75% threshold\n+    // check that we do not alert twice for the 65% threshold", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ab071aca51ffb294c3d6d8abd7e1b34015274d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MzAyMjE5OnYy", "diffSide": "LEFT", "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowOTo0MVrOGKy9Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowOTo0MVrOGKy9Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3Mzc5MQ==", "bodyText": "this was wrong!  but close enough due to loose tolerance.  No longer.", "url": "https://github.com/all-of-us/workbench/pull/3457#discussion_r413973791", "createdAt": "2020-04-23T17:09:41Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/billing/FreeTierBillingServiceTest.java", "diffHunk": "@@ -555,14 +555,14 @@ public void getUserCachedFreeTierUsage() {\n     createWorkspace(user1, \"another project\");\n \n     final Map<String, Double> costs =\n-        ImmutableMap.of(SINGLE_WORKSPACE_TEST_PROJECT, 1000.0, \"another project\", 100.0);\n+        ImmutableMap.of(SINGLE_WORKSPACE_TEST_PROJECT, 1000.0, \"another project\", 200.0);\n     doReturn(mockBQTableResult(costs)).when(bigQueryService).executeQuery(any());\n \n     // we have not yet cached the new workspace costs\n     assertWithinBillingTolerance(freeTierBillingService.getCachedFreeTierUsage(user1), 100.01);\n \n     freeTierBillingService.checkFreeTierBillingUsage();\n-    final double expectedTotalCachedFreeTierUsage = 1000.0 + 100.01;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8ab071aca51ffb294c3d6d8abd7e1b34015274d"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3008, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}