{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NTczMzUz", "number": 3838, "title": "[RW-5229][risk=no] Restrict special characters that break concept search", "bodyText": "Prevent calling the api when an invalid MySQL string been entered since they will break the api call.\nAlso restricting  [ ] |  since they will cause errors in the matching regex once the results are returned.\n( ] actually won't cause an error but seems weird to restrict [ and not ] )\nShows a warning message if the user tries to search with an invalid string.\nUnclosed quote:\n\nUnclosed paren:\n\nToo many closing parens:\n\nTrailing + or -:\n\nForbidden special character:\n\nThe messages will also stack if there are multiple errors in the search string:\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n I have run and tested this change locally", "createdAt": "2020-07-30T20:25:30Z", "url": "https://github.com/all-of-us/workbench/pull/3838", "merged": true, "mergeCommit": {"oid": "42156283309accacd7e7eec2d7345ed2926ceec2"}, "closed": true, "closedAt": "2020-08-06T14:25:24Z", "author": {"login": "dolbeew"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6GjOsAFqTQ1ODczOTI3OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7_kspgFqTQ2MTkxOTA1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4NzM5Mjc4", "url": "https://github.com/all-of-us/workbench/pull/3838#pullrequestreview-458739278", "createdAt": "2020-07-30T20:39:14Z", "commit": {"oid": "f63467a8c37bdc53386876ddb2cbdab476f99643"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozOToxNFrOG5zAAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMDozOToxNFrOG5zAAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI1NzYwMA==", "bodyText": "Are there Unicode characters that get downgraded into these that need to be checked as well?", "url": "https://github.com/all-of-us/workbench/pull/3838#discussion_r463257600", "createdAt": "2020-07-30T20:39:14Z", "author": {"login": "jaycarlton"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -554,7 +570,10 @@ export const ConceptHomepage = withCurrentWorkspace()(\n               <TextInput style={styles.searchBar} data-test-id='concept-search-input'\n                          placeholder='Search concepts in domain'\n                          value={currentInputString}\n-                         onChange={(e) => this.setState({currentInputString: e})}\n+                         onChange={(e) => this.setState({\n+                           currentInputString: e,\n+                           forbiddenCharactersEntered: /[~\\-@()\\[\\]|<>]/g.test(e)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f63467a8c37bdc53386876ddb2cbdab476f99643"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MTk3NjEz", "url": "https://github.com/all-of-us/workbench/pull/3838#pullrequestreview-459197613", "createdAt": "2020-07-31T14:01:38Z", "commit": {"oid": "1c157b96069cc549a99c08f0133b013ba61835cc"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "443578f0489fb618513a322727055885757fc2a1", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/443578f0489fb618513a322727055885757fc2a1", "committedDate": "2020-08-04T16:00:59Z", "message": "RW-5229 restrict special characters that break concept search"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "941b369a57e8ce91b11ceaf3252b67c83c1d0553", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/941b369a57e8ce91b11ceaf3252b67c83c1d0553", "committedDate": "2020-08-04T16:00:59Z", "message": "RW-5229 add test for restricted characters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fc57cdfecf7e42cfb04dc1f8ec42970af73e00c", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/0fc57cdfecf7e42cfb04dc1f8ec42970af73e00c", "committedDate": "2020-08-05T05:31:30Z", "message": "RW-5229 add validate function"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c157b96069cc549a99c08f0133b013ba61835cc", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/1c157b96069cc549a99c08f0133b013ba61835cc", "committedDate": "2020-07-30T21:22:21Z", "message": "RW-5229 add test for restricted characters"}, "afterCommit": {"oid": "0fc57cdfecf7e42cfb04dc1f8ec42970af73e00c", "author": {"user": null}, "url": "https://github.com/all-of-us/workbench/commit/0fc57cdfecf7e42cfb04dc1f8ec42970af73e00c", "committedDate": "2020-08-05T05:31:30Z", "message": "RW-5229 add validate function"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxOTE5MDU5", "url": "https://github.com/all-of-us/workbench/pull/3838#pullrequestreview-461919059", "createdAt": "2020-08-05T18:28:36Z", "commit": {"oid": "0fc57cdfecf7e42cfb04dc1f8ec42970af73e00c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoyODozNlrOG8Vlrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODoyODozNlrOG8Vlrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkyMTQ1NQ==", "bodyText": "I guess since you have the ability to embed \" and ( ) you have to parse each character instead of using regex. I know this is a product decision on unifying this search with CB and DSB, but we should make this reusable by other components.", "url": "https://github.com/all-of-us/workbench/pull/3838#discussion_r465921455", "createdAt": "2020-08-05T18:28:36Z", "author": {"login": "freemabd"}, "path": "ui/src/app/pages/data/concept/concept-homepage.tsx", "diffHunk": "@@ -310,14 +318,69 @@ export const ConceptHomepage = withCurrentWorkspace()(\n       }\n     }\n \n+    validateInputForMySQL() {\n+      const {currentInputString} = this.state;\n+      const inputErrors = new Set(); // use Set to prevent duplicate messages\n+      let openParensCount = 0;\n+      let unclosedQuotes = false;\n+      for (let i = 0; i < currentInputString.length; i++) {\n+        const character = currentInputString[i];\n+        if (character === '\"') {\n+          unclosedQuotes = !unclosedQuotes;\n+          continue;\n+        }\n+        if (unclosedQuotes) {\n+          // inside a quote, no need to validate further\n+          continue;\n+        }\n+        // Check for characters that break search\n+        if ('~@[]|<>'.indexOf(character) > -1) {\n+          inputErrors.add('The following characters are not allowed in the search string: ~ @ [ ] | < >');\n+          continue;\n+        }\n+        // Check for trailing + or -\n+        if ('+-'.indexOf(character) > -1 && (currentInputString[i + 1] === ' ' || currentInputString[i + 1] === undefined)) {\n+          inputErrors.add(`Trailing ${character} characters are not allowed in the search string`);\n+          continue;\n+        }\n+        const parenPosition = '()'.indexOf(character);\n+        if (parenPosition === -1) {\n+          // Parens are the last character check, so we can continue if it's something else\n+          continue;\n+        }\n+        if (parenPosition === 0) {\n+          openParensCount++; // increment the number of unclosed parens\n+        } else {\n+          if (openParensCount === 0) {\n+            // too many closing parens\n+            inputErrors.add('There are too many ) characters in the search string');\n+            continue;\n+          }\n+          openParensCount--; // decrement the number of unclosed parens\n+        }\n+      }\n+      if (openParensCount > 0) {\n+        // unclosed paren\n+        inputErrors.add('There is an unclosed ( in the search string');\n+      }\n+      if (unclosedQuotes) {\n+        // unclosed quote\n+        inputErrors.add('There is an unclosed \" in the search string');\n+      }\n+      this.setState({inputErrors: Array.from(inputErrors)});\n+      return inputErrors.size === 0; // return true if no errors\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc57cdfecf7e42cfb04dc1f8ec42970af73e00c"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4518, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}