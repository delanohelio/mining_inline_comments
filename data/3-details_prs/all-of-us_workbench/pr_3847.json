{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMzg2OTMy", "number": 3847, "title": "[RW-5198][risk=low] PoC BigQuery Upload service", "bodyText": "This batch of changes introduces the notion of a reporting snapshot with a common timestamp and an equal number of rows for several tables. There are a few interesting features:\n\nnew feature flag to enable the cron to do its work (operating at the controller function level)\npattern to specify column information and query parameter value info in an enum\nservice to build the snapshot (independently of any dependency on BigQuery itself)\nService for BQ upload with one implementation using DML insert queries. We can add implementations for streaming or GCS bulk load if needed without affecting anything else.\nTable and schema specifications are in all-of-us/workbench-devops#51 in workbench-devops\nbasic cron schedule for 24 hours.\ndistinct dataset names for each environment. Technically everything except test/local could use the same dataset name, but it's better (1) to have a consistent schema across all projects and (2) it's really easy to be in the wrong project when working in the BigQuery console.\nSome Unit Test coverage, but most of the investment is in the framework & scaffolding.\n\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n I have run the E2E tests on ths change against my local UI + API server with yarn test:local\n If this includes a UI change, I have taken screen recordings or screenshots of the new behavior and notified the PO and UX designer\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-08-03T20:41:29Z", "url": "https://github.com/all-of-us/workbench/pull/3847", "merged": true, "mergeCommit": {"oid": "e3599a6a50df4e59582aeef09f64400da23c16b5"}, "closed": true, "closedAt": "2020-08-10T20:37:36Z", "author": {"login": "jaycarlton"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8RGzGgBqjM2Mjk0NjA2NjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9n4rWAH2gAyNDYyMzg2OTMyOjlhZGQwMjY1NTI2Y2RjODllZTUwMjVkZWQwYTVjNmI1M2JiOWEyNGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "858496469fb95349978e1fd713446c5ec9d8bf5e", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/858496469fb95349978e1fd713446c5ec9d8bf5e", "committedDate": "2020-08-05T20:40:07Z", "message": "skip ci"}, "afterCommit": {"oid": "be418b2b53ceab39607f0356d4c1006899b79d07", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/be418b2b53ceab39607f0356d4c1006899b79d07", "committedDate": "2020-08-06T14:57:13Z", "message": "PoC BigQuery Snapshot & Upload system"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94f795a9f6d144d80241435c62e0aefdb572c3ce", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/94f795a9f6d144d80241435c62e0aefdb572c3ce", "committedDate": "2020-08-06T15:56:38Z", "message": "BigQuery reporting services PoC"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "be418b2b53ceab39607f0356d4c1006899b79d07", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/be418b2b53ceab39607f0356d4c1006899b79d07", "committedDate": "2020-08-06T14:57:13Z", "message": "PoC BigQuery Snapshot & Upload system"}, "afterCommit": {"oid": "94f795a9f6d144d80241435c62e0aefdb572c3ce", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/94f795a9f6d144d80241435c62e0aefdb572c3ce", "committedDate": "2020-08-06T15:56:38Z", "message": "BigQuery reporting services PoC"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzY5MjM5", "url": "https://github.com/all-of-us/workbench/pull/3847#pullrequestreview-462769239", "createdAt": "2020-08-06T18:21:56Z", "commit": {"oid": "94f795a9f6d144d80241435c62e0aefdb572c3ce"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODoyMTo1NlrOG8_JZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxODo1ODo1OFrOG9AW8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYwMjM0MA==", "bodyText": "You could use ThreadLocalRandom instead of injecting Random in constructor\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return random.nextLong();\n          \n          \n            \n                return ThreadLocalRandom.current().nextLong();", "url": "https://github.com/all-of-us/workbench/pull/3847#discussion_r466602340", "createdAt": "2020-08-06T18:21:56Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceImpl.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.pmiops.workbench.reporting;\n+\n+import java.time.Clock;\n+import java.util.List;\n+import java.util.Random;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.ReportingResearcher;\n+import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ReportingSnapshotServiceImpl implements ReportingSnapshotService {\n+\n+  private final Clock clock;\n+  private final ReportingMapper reportingMapper;\n+  private Random random;\n+  private final UserService userService;\n+  private final WorkspaceService workspaceService;\n+\n+  public ReportingSnapshotServiceImpl(\n+      Clock clock,\n+      ReportingMapper reportingMapper,\n+      Random random,\n+      UserService userService,\n+      WorkspaceService workspaceService) {\n+    this.clock = clock;\n+    this.reportingMapper = reportingMapper;\n+    this.random = random;\n+    this.userService = userService;\n+    this.workspaceService = workspaceService;\n+  }\n+\n+  @Override\n+  public ReportingSnapshot takeSnapshot() {\n+    return new ReportingSnapshot()\n+        .captureTimestamp(clock.millis())\n+        .researchers(getResearchers())\n+        .workspaces(getWorkspaces());\n+  }\n+\n+  private List<ReportingResearcher> getResearchers() {\n+    final List<DbUser> users = userService.getAllUsers();\n+    return reportingMapper.toReportingResearcherList(users);\n+  }\n+\n+  private List<ReportingWorkspace> getWorkspaces() {\n+    final List<DbWorkspace> workspaces = workspaceService.getAllActiveWorkspaces();\n+    final List<ReportingWorkspace> models = reportingMapper.toReportingWorkspaceList(workspaces);\n+    for (ReportingWorkspace model : models) {\n+      model.setFakeSize(getFakeSize());\n+    }\n+    return models;\n+  }\n+\n+  private long getFakeSize() {\n+    return random.nextLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94f795a9f6d144d80241435c62e0aefdb572c3ce"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYyMjE5NA==", "bodyText": "Instead of using generic JobBuilders to insert into multiple tables with multiple columns, could you insert JSON objects(Researcher and Workspace) instead and use JSON_EXTRACT to parse any info you're interested in? Might simplify the code a bit, but could make querying the data a bit more complicated.", "url": "https://github.com/all-of-us/workbench/pull/3847#discussion_r466622194", "createdAt": "2020-08-06T18:58:58Z", "author": {"login": "freemabd"}, "path": "api/src/main/java/org/pmiops/workbench/reporting/ReportingUploadServiceImpl.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package org.pmiops.workbench.reporting;\n+\n+import com.google.cloud.bigquery.QueryJobConfiguration;\n+import com.google.cloud.bigquery.QueryParameterValue;\n+import com.google.cloud.bigquery.TableResult;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Function;\n+import java.util.logging.Logger;\n+import javax.inject.Provider;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.config.WorkbenchConfig;\n+import org.pmiops.workbench.model.ReportingResearcher;\n+import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.pmiops.workbench.model.ReportingWorkspace;\n+import org.pmiops.workbench.reporting.insertion.ReportingInsertionJobBuilder;\n+import org.pmiops.workbench.reporting.insertion.ResearcherParameter;\n+import org.pmiops.workbench.reporting.insertion.WorkspaceParameter;\n+import org.springframework.context.annotation.Primary;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+@Primary\n+public class ReportingUploadServiceImpl implements ReportingUploadService {\n+  private static final Logger logger = Logger.getLogger(\"ReportingUploadServiceInsertQueryImpl\");\n+  private static final long MAX_WAIT_TIME = 10000;\n+\n+  private final BigQueryService bigQueryService;\n+  private final Provider<WorkbenchConfig> workbenchConfigProvider;\n+\n+  private static final ReportingInsertionJobBuilder<ReportingResearcher> researcherJobBuilder =\n+      ResearcherParameter::values;\n+  private static final ReportingInsertionJobBuilder<ReportingWorkspace> workspaceJobBuilder =\n+      WorkspaceParameter::values;\n+\n+  public ReportingUploadServiceImpl(\n+      BigQueryService bigQueryService, Provider<WorkbenchConfig> workbenchConfigProvider) {\n+    this.bigQueryService = bigQueryService;\n+    this.workbenchConfigProvider = workbenchConfigProvider;\n+  }\n+\n+  @Override\n+  public ReportingJobResult uploadSnapshot(ReportingSnapshot reportingSnapshot) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94f795a9f6d144d80241435c62e0aefdb572c3ce"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODE1OTk4", "url": "https://github.com/all-of-us/workbench/pull/3847#pullrequestreview-462815998", "createdAt": "2020-08-06T19:31:09Z", "commit": {"oid": "94f795a9f6d144d80241435c62e0aefdb572c3ce"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTozMTowOVrOG9BYAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxOTozMTowOVrOG9BYAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjYzODg0OA==", "bodyText": "nit: add other properties for completeness\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                assertThat(snapshot.getResearchers().get(0).getResearcherId()).isEqualTo(101);\n          \n          \n            \n                assertThat(snapshot.getResearchers().get(0).getIsDisabled()).isFalse();\n          \n          \n            \n                assertThat(snapshot.getResearchers().get(0).getResearcherId()).isEqualTo(101);\n          \n          \n            \n                assertThat(snapshot.getResearchers().get(0).getIsDisabled()).isFalse();\n          \n          \n            \n                assertThat(snapshot.getResearchers().get(0).getUsername()).isEqualTo(\"bob@researchallofus.org\");\n          \n          \n            \n                assertThat(snapshot.getResearchers().get(0).getFirstName()).isEqualTo(\"Marge\");", "url": "https://github.com/all-of-us/workbench/pull/3847#discussion_r466638848", "createdAt": "2020-08-06T19:31:09Z", "author": {"login": "freemabd"}, "path": "api/src/test/java/org/pmiops/workbench/reporting/ReportingSnapshotServiceTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package org.pmiops.workbench.reporting;\n+\n+import static com.google.common.truth.Truth.assertThat;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.time.Clock;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Random;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+import org.pmiops.workbench.api.BigQueryService;\n+import org.pmiops.workbench.db.dao.UserService;\n+import org.pmiops.workbench.db.model.DbUser;\n+import org.pmiops.workbench.db.model.DbWorkspace;\n+import org.pmiops.workbench.model.ReportingSnapshot;\n+import org.pmiops.workbench.model.Workspace;\n+import org.pmiops.workbench.test.FakeClock;\n+import org.pmiops.workbench.utils.TestMockFactory;\n+import org.pmiops.workbench.utils.mappers.CommonMappers;\n+import org.pmiops.workbench.workspaces.WorkspaceService;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\n+import org.springframework.boot.test.context.TestConfiguration;\n+import org.springframework.boot.test.mock.mockito.MockBean;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Import;\n+import org.springframework.test.annotation.DirtiesContext;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+@RunWith(SpringRunner.class)\n+@DataJpaTest\n+@DirtiesContext(classMode = DirtiesContext.ClassMode.BEFORE_EACH_TEST_METHOD)\n+public class ReportingSnapshotServiceTest {\n+  private static final String FAMILY_NAME = \"Bobberson\";\n+  private static final String CONTACT_EMAIL = \"bob@example.com\";\n+  private static final String PRIMARY_EMAIL = \"bob@researchallofus.org\";\n+  private static final String ORGANIZATION = \"Test\";\n+  private static final String CURRENT_POSITION = \"Tester\";\n+  private static final String RESEARCH_PURPOSE = \"To test things\";\n+  private static final long NOW_EPOCH_MILLI = 1594404482000L;\n+\n+  @MockBean private Random mockRandom;\n+  @MockBean private UserService mockUserService;\n+  @MockBean private WorkspaceService mockWorkspaceService;\n+\n+  @Autowired private ReportingSnapshotService reportingSnapshotService;\n+\n+  private static final TestMockFactory TEST_MOCK_FACTORY = new TestMockFactory();\n+\n+  @TestConfiguration\n+  @Import({\n+    CommonMappers.class,\n+    ReportingMapperImpl.class,\n+    ReportingSnapshotServiceImpl.class,\n+    ReportingUploadServiceImpl.class\n+  })\n+  @MockBean({BigQueryService.class})\n+  public static class config {\n+    @Bean\n+    public Clock getClock() {\n+      return new FakeClock(Instant.ofEpochMilli(NOW_EPOCH_MILLI));\n+    }\n+  }\n+\n+  @Before\n+  public void setup() {\n+    // Return \"random\" numbers 100, 101, 102...\n+    doAnswer(\n+            new Answer<Long>() {\n+              private long lastValue = 100;\n+\n+              public Long answer(InvocationOnMock invocation) {\n+                return lastValue++;\n+              }\n+            })\n+        .when(mockRandom)\n+        .nextLong();\n+  }\n+\n+  public void mockWorkspaces() {\n+    final DbWorkspace dbWorkspace1 = stubDbWorkspace(\"aou-rw-123456\", \"A Tale of Two Cities\", 101L);\n+    final DbWorkspace dbWorkspace2 = stubDbWorkspace(\"aou-rw-789\", \"Moby Dick\", 202L);\n+\n+    doReturn(ImmutableList.of(dbWorkspace1, dbWorkspace2))\n+        .when(mockWorkspaceService)\n+        .getAllActiveWorkspaces();\n+  }\n+\n+  @Test\n+  public void testGetSnapshot_noEntries() {\n+    final ReportingSnapshot snapshot = reportingSnapshotService.takeSnapshot();\n+    assertThat(snapshot.getCaptureTimestamp()).isEqualTo(NOW_EPOCH_MILLI);\n+    assertThat(snapshot.getResearchers()).isEmpty();\n+    assertThat(snapshot.getWorkspaces()).isEmpty();\n+  }\n+\n+  @Test\n+  public void testGetSnapshot_someEntries() {\n+    mockUsers();\n+    mockWorkspaces();\n+\n+    final ReportingSnapshot snapshot = reportingSnapshotService.takeSnapshot();\n+    assertThat((double) snapshot.getCaptureTimestamp()).isWithin(100.0).of(NOW_EPOCH_MILLI);\n+    assertThat(snapshot.getResearchers()).hasSize(2);\n+    assertThat(snapshot.getResearchers().get(0).getResearcherId()).isEqualTo(101);\n+    assertThat(snapshot.getResearchers().get(0).getIsDisabled()).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94f795a9f6d144d80241435c62e0aefdb572c3ce"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0Mzk3Mzc1", "url": "https://github.com/all-of-us/workbench/pull/3847#pullrequestreview-464397375", "createdAt": "2020-08-10T16:41:14Z", "commit": {"oid": "94f795a9f6d144d80241435c62e0aefdb572c3ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9add0265526cdc89ee5025ded0a5c6b53bb9a24e", "author": {"user": {"login": "jaycarlton", "name": "Jay Carlton"}}, "url": "https://github.com/all-of-us/workbench/commit/9add0265526cdc89ee5025ded0a5c6b53bb9a24e", "committedDate": "2020-08-10T20:03:40Z", "message": "more assertions"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4526, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}