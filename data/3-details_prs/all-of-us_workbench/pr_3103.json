{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTk1Mjkz", "number": 3103, "title": "[RW-3790][RW-3587][Risk=low] Remove named params and move to bigrquery", "bodyText": "Description:\nThis adds cdr env variable support, moves us to bigrquery, and removes the named parameters section. This has been tested locally with cohorts with both list variables, variables with single values, and queries with no named parameters, in both R and Python\n\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-02-07T20:51:00Z", "url": "https://github.com/all-of-us/workbench/pull/3103", "merged": true, "mergeCommit": {"oid": "3c7331049dd2232dd45eaf105ae0ee68fc3d35a5"}, "closed": true, "closedAt": "2020-02-12T18:01:52Z", "author": {"login": "s-rubenstein"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcCGbuvgFqTM1NTQ1MDMxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDn3zJAH2gAyMzcyNTk1MjkzOmFlZTc0ODVkNDYxNjE1NTJiZjdkMGJhYjgyZTgxMTM1ZTA1ZmExYTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NDUwMzEw", "url": "https://github.com/all-of-us/workbench/pull/3103#pullrequestreview-355450310", "createdAt": "2020-02-07T21:33:57Z", "commit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTozMzo1N1rOFnK8Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QyMTo0MjozN1rOFnLI5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxNzk5MA==", "bodyText": "Is this going to handle strings vs numbers properly? Wouldn't strings need to be quoted?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376617990", "createdAt": "2020-02-07T21:33:57Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODUxMg==", "bodyText": "Did you look at str_glue as Nicole suggested? I think it would be more readable to declare variables then substitute them into the templated SQL as is done in the snippets. Note: it would require setting up an additional package", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376618512", "createdAt": "2020-02-07T21:35:25Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODkxOQ==", "bodyText": "I don't love inlining these into the SQL itself. I think string substitution within the notebook code would be more reusable / understandable / readable. In R: str_glue, in Py f\"\"\nAlternatively, the parameterized queries in Python were perhaps an ideal way to show how to properly use BigQuery, but understood that diverging this much between R and Python could be a problem.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376618919", "createdAt": "2020-02-07T21:36:30Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxOTk0OQ==", "bodyText": "This deserves a comment, it seems like you're trying to replace the {project}.{dataset} templates within the query parameters at this step. But I'm not very clear on why", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376619949", "createdAt": "2020-02-07T21:39:12Z", "author": {"login": "calbach"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -324,7 +324,14 @@ private DataSetRequest generateDataSetRequestFromPreviewRequest(\n     DataSetPreviewResponse previewQueryResponse = new DataSetPreviewResponse();\n     DataSetRequest dataSetRequest = generateDataSetRequestFromPreviewRequest(dataSetPreviewRequest);\n     Map<String, QueryJobConfiguration> bigQueryJobConfig =\n-        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest);\n+        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest).entrySet()\n+            .stream()\n+            .collect(\n+                Collectors.toMap(\n+                    Map.Entry::getKey,\n+                    stringQueryJobConfigurationEntry ->\n+                        bigQueryService.filterBigQueryConfig(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYyMTI4NA==", "bodyText": "There should probably be at least one test which incorporates parameters", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376621284", "createdAt": "2020-02-07T21:42:37Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -692,7 +692,7 @@ public void testGetPythonQuery() {\n     String prefix = \"dataset_00000000_condition_\";\n     assertThat(response.getCode())\n         .isEqualTo(\n-            \"import pandas\\n\\n\"\n+            \"import pandas\\nimport os\\n\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NjA4NTUy", "url": "https://github.com/all-of-us/workbench/pull/3103#pullrequestreview-355608552", "createdAt": "2020-02-09T13:51:43Z", "commit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxMzo1MTo0M1rOFnVLMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOVQxNDoxNDozMlrOFnVRQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NTcxNQ==", "bodyText": "nit: just use e for entry in an inline lambda. The extra-descriptive name is great for a class method or function name, but for single-arg lambdas I tend to expect the other extreme.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376785715", "createdAt": "2020-02-09T13:51:43Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -324,7 +324,14 @@ private DataSetRequest generateDataSetRequestFromPreviewRequest(\n     DataSetPreviewResponse previewQueryResponse = new DataSetPreviewResponse();\n     DataSetRequest dataSetRequest = generateDataSetRequestFromPreviewRequest(dataSetPreviewRequest);\n     Map<String, QueryJobConfiguration> bigQueryJobConfig =\n-        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest);\n+        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest).entrySet()\n+            .stream()\n+            .collect(\n+                Collectors.toMap(\n+                    Map.Entry::getKey,\n+                    stringQueryJobConfigurationEntry ->\n+                        bigQueryService.filterBigQueryConfig(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxOTk0OQ=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NTc4Mg==", "bodyText": "nit: maybe name this like domainToBigQueryConfig.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376785782", "createdAt": "2020-02-09T13:52:46Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/api/DataSetController.java", "diffHunk": "@@ -324,7 +324,14 @@ private DataSetRequest generateDataSetRequestFromPreviewRequest(\n     DataSetPreviewResponse previewQueryResponse = new DataSetPreviewResponse();\n     DataSetRequest dataSetRequest = generateDataSetRequestFromPreviewRequest(dataSetPreviewRequest);\n     Map<String, QueryJobConfiguration> bigQueryJobConfig =\n-        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest);\n+        dataSetService.generateQueryJobConfigurationsByDomainName(dataSetRequest).entrySet()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NTk0Ng==", "bodyText": "nit, naming: This was confusing to read. I don't see where \"project information\" comes in. I suspect there's a better name.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376785946", "createdAt": "2020-02-09T13:55:05Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -496,11 +497,16 @@ private boolean supportsConceptSets(Domain domain) {\n \n   private QueryJobConfiguration buildQueryJobConfiguration(\n       Map<String, QueryParameterValue> namedCohortParameters, String query) {\n+    return QueryJobConfiguration.newBuilder(query)\n+        .setNamedParameters(namedCohortParameters)\n+        .setUseLegacySql(false)\n+        .build();\n+  }\n+\n+  private QueryJobConfiguration buildQueryJobConfigurationWithProjectInformation(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjE3OQ==", "bodyText": "nit: I feel like just having the builder inline would be more readable than calling this helper, since you're really only assigning the legacy Sql. You could also have a function that returns a builder with the default arg set, like return QueryJobConfiguration.newBuilder().setUseLegacySql(false);. That's if it lets you make a builder without the query. \ud83e\udd37\u200d\u2642", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786179", "createdAt": "2020-02-09T13:58:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -496,11 +497,16 @@ private boolean supportsConceptSets(Domain domain) {\n \n   private QueryJobConfiguration buildQueryJobConfiguration(\n       Map<String, QueryParameterValue> namedCohortParameters, String query) {\n+    return QueryJobConfiguration.newBuilder(query)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjIzNQ==", "bodyText": "nit: it would be more robust to have a list of things to import,  roll over it to make import statements, and then join that with a newline.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786235", "createdAt": "2020-02-09T13:59:27Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -533,16 +539,10 @@ private String getQualifiedColumnName(Domain currentDomain, String columnName) {\n     String prerequisites;\n     switch (kernelTypeEnum) {\n       case R:\n-        prerequisites =\n-            // RW-4241 workaround: update when the Jupyter image with the reticulate fix is fully\n-            // rolled out\n-            \"require(devtools)\\n\"\n-                + \"devtools::install_github(\\\"rstudio/reticulate\\\", ref=\\\"00172079\\\")\\n\"\n-                + \"library(reticulate)\\n\"\n-                + \"pd <- reticulate::import(\\\"pandas\\\")\";\n+        prerequisites = \"library(bigrquery)\";\n         break;\n       case PYTHON:\n-        prerequisites = \"import pandas\";\n+        prerequisites = \"import pandas\\n\" + \"import os\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjM0Ng==", "bodyText": "nit: I generally don't want to see three languages in one function.Can we wrap the bodies of these case clauses into their own functions?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786346", "createdAt": "2020-02-09T14:00:56Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjQ4Ng==", "bodyText": "Too much is happening here to test effectively or to really understand. Please do put comments at the top of this function and split up the string operations.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786486", "createdAt": "2020-02-09T14:02:59Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NjcyOA==", "bodyText": "I'd make a helper function like  formatArrayValueStringValuesOrWhatever(QueryParameterValue queryParameterValue) that gives you everything you're concatenating here.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786728", "createdAt": "2020-02-09T14:06:50Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4Njg1Nw==", "bodyText": "nit: I think this reads better with Optional.ofNullable(...).ifPresent(v -> stringBuilder.replace(..., v)\nBut also, I'm not used to seeing replace used on a stringBuilder. It's generally expected that you build up the correct string from the beginning. Is there a way to do the swapping earlier?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376786857", "createdAt": "2020-02-09T14:08:36Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");\n+      case R:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\", Sys.getenv(\\\"WORKSPACE_CDR\\\"), \\\"\");\n+      default:\n+        return query;\n+    }\n+  }\n+\n+  private static String fillInQueryParams(\n+      String query, Map<String, QueryParameterValue> queryParameterValueMap) {\n+    StringBuilder stringBuilder = new StringBuilder(query);\n+    queryParameterValueMap.forEach(\n+        (key, value) -> {\n+          if (StandardSQLTypeName.ARRAY.equals(value.getType())) {\n+            String stringToReplace = \"unnest(@\".concat(key.concat(\")\"));\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                \"(\"\n+                    .concat(\n+                        nullableListToEmpty(value.getArrayValues()).stream()\n+                            .map(QueryParameterValue::getValue)\n+                            .collect(Collectors.joining(\", \")))\n+                    .concat(\")\"));\n+          } else {\n+            String stringToReplace = \"@\".concat(key);\n+            int startingIndex = stringBuilder.indexOf(stringToReplace);\n+            stringBuilder.replace(\n+                startingIndex,\n+                startingIndex + stringToReplace.length(),\n+                Optional.ofNullable(value.getValue()).orElse(\"\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NzE0NA==", "bodyText": "We need to have test cases for all the edge cases,  like when things that are expected to be there are missing. We should be failing the operation early instead of sending a broken query to the notebook if anything is amiss. (We don't have a great automatic way to find all the notebooks with queries for a given release yet from what I remember.)", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376787144", "createdAt": "2020-02-09T14:12:49Z", "author": {"login": "jaycarlton"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -771,23 +755,12 @@ public void testGetRQuery() {\n                 + \"AND (c_occurrence.PERSON_ID IN (SELECT * FROM person_id from `\"\n                 + TEST_CDR_TABLE\n                 + \".person` person)) \\n\"\n-                + \"LIMIT \\\", max_number_of_rows)\\n\"\n-                + \"\\n\"\n-                + prefix\n-                + \"query_config <- list(\\n\"\n-                + \"  query = list(\\n\"\n-                + \"    parameterMode = 'NAMED',\\n\"\n-                + \"    queryParameters = list(\\n\\n\"\n-                + \"    )\\n\"\n-                + \"  )\\n\"\n-                + \")\\n\"\n+                + \"LIMIT \\\", max_number_of_rows, sep=\\\"\\\")\\n\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Njc4NzI2NQ==", "bodyText": "+1 . I get scared seeing system calls in the middle of a complex string operation. We need to have the cleanest, earliest error code we can if one of those values is missing or malformed.\nAlso, I'll give you a dollar for every string or regex replacement we can kill in this class. \ud83d\ude09 I believe we can build almost everything up in one direction, and that's much easier to reason about and test. Later PR of course.", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r376787265", "createdAt": "2020-02-09T14:14:32Z", "author": {"login": "jaycarlton"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -664,14 +664,58 @@ public static String capitalizeFirstCharacterOnly(String text) {\n     return StringUtils.capitalize(text.toLowerCase());\n   }\n \n+  private static String generateSqlWithEnvironmentVariables(\n+      String query, KernelTypeEnum kernelTypeEnum) {\n+    switch (kernelTypeEnum) {\n+      case PYTHON:\n+        return query.replaceAll(\n+            \"\\\\$\\\\{projectId}.\\\\$\\\\{dataSetId}\", \"\\\"\\\"\\\" + os.environ[\\\"WORKSPACE_CDR\\\"] + \\\"\\\"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjYxODUxMg=="}, "originalCommit": {"oid": "eb66e337eb437d0a659dd4b28fa2c028810615d7"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2MTg2NTYz", "url": "https://github.com/all-of-us/workbench/pull/3103#pullrequestreview-356186563", "createdAt": "2020-02-10T19:04:29Z", "commit": {"oid": "cf32337c0cc628728fafc4bf125ceaf5d9c453e2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTowNDoyOVrOFnx8qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTowNDoyOVrOFnx8qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1NzEzMQ==", "bodyText": "Do we need to upgrade our notebook docker image to include bigrquery?", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377257131", "createdAt": "2020-02-10T19:04:29Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/db/dao/DataSetServiceImpl.java", "diffHunk": "@@ -533,16 +544,10 @@ private String getQualifiedColumnName(Domain currentDomain, String columnName) {\n     String prerequisites;\n     switch (kernelTypeEnum) {\n       case R:\n-        prerequisites =\n-            // RW-4241 workaround: update when the Jupyter image with the reticulate fix is fully\n-            // rolled out\n-            \"require(devtools)\\n\"\n-                + \"devtools::install_github(\\\"rstudio/reticulate\\\", ref=\\\"00172079\\\")\\n\"\n-                + \"library(reticulate)\\n\"\n-                + \"pd <- reticulate::import(\\\"pandas\\\")\";\n+        prerequisites = \"library(bigrquery)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf32337c0cc628728fafc4bf125ceaf5d9c453e2"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae40291e7820f49d7c3eb2b80a19e7163566a472", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/ae40291e7820f49d7c3eb2b80a19e7163566a472", "committedDate": "2020-02-11T15:02:25Z", "message": "Remove named params and move to bigrquery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b986f983f5f00153b5dd61e8bfe40c63743b389", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/3b986f983f5f00153b5dd61e8bfe40c63743b389", "committedDate": "2020-02-11T15:02:25Z", "message": "Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23dfb07026a5f7ef77e21d6b57bcd639015154fb", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/23dfb07026a5f7ef77e21d6b57bcd639015154fb", "committedDate": "2020-02-11T15:02:25Z", "message": "First round of PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c74b9cee25f9c971980e62ffae7430eb13702bb", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/3c74b9cee25f9c971980e62ffae7430eb13702bb", "committedDate": "2020-02-11T15:02:25Z", "message": "PR feedback without str_glue or additional tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf32337c0cc628728fafc4bf125ceaf5d9c453e2", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/cf32337c0cc628728fafc4bf125ceaf5d9c453e2", "committedDate": "2020-02-10T18:24:15Z", "message": "PR feedback without str_glue or additional tests"}, "afterCommit": {"oid": "3c74b9cee25f9c971980e62ffae7430eb13702bb", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/3c74b9cee25f9c971980e62ffae7430eb13702bb", "committedDate": "2020-02-11T15:02:25Z", "message": "PR feedback without str_glue or additional tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Nzg3MjE4", "url": "https://github.com/all-of-us/workbench/pull/3103#pullrequestreview-356787218", "createdAt": "2020-02-11T16:09:15Z", "commit": {"oid": "3c74b9cee25f9c971980e62ffae7430eb13702bb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e799136682e8af21c4b4375242bd03a7d05db77", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/4e799136682e8af21c4b4375242bd03a7d05db77", "committedDate": "2020-02-11T17:35:49Z", "message": "Add test for named parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0d826df6ffd829addb22bb4b715b3730ff3f72", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/ed0d826df6ffd829addb22bb4b715b3730ff3f72", "committedDate": "2020-02-11T18:23:39Z", "message": "Fix linting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9e0bb849c6410cc153dac7624ac9b4d9edea093", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/a9e0bb849c6410cc153dac7624ac9b4d9edea093", "committedDate": "2020-02-11T20:09:50Z", "message": "PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTI4OTM0", "url": "https://github.com/all-of-us/workbench/pull/3103#pullrequestreview-357128934", "createdAt": "2020-02-12T01:07:31Z", "commit": {"oid": "a9e0bb849c6410cc153dac7624ac9b4d9edea093"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTowNzozMlrOFoes5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMTowNzozMlrOFoes5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk5MDM3Mw==", "bodyText": "If I'm reading this correctly, this turns into: WHERE ICD9 IN (2, 5). This doesn't seem right", "url": "https://github.com/all-of-us/workbench/pull/3103#discussion_r377990373", "createdAt": "2020-02-12T01:07:32Z", "author": {"login": "calbach"}, "path": "api/src/test/java/org/pmiops/workbench/api/DataSetControllerTest.java", "diffHunk": "@@ -716,27 +728,16 @@ public void testGetPythonQuery() {\n                 + \"condition_source_concept_id IN (123)) \\n\"\n                 + \"AND (c_occurrence.PERSON_ID IN (SELECT * FROM person_id from `\"\n                 + TEST_CDR_TABLE\n-                + \".person` person)) \"\n+                + \".person` person WHERE \"\n+                + NAMED_PARAMETER_VALUE.getValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e0bb849c6410cc153dac7624ac9b4d9edea093"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a3f79a2db6b631dc2b66eda2bbc82b2c09b3f74", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/0a3f79a2db6b631dc2b66eda2bbc82b2c09b3f74", "committedDate": "2020-02-12T14:57:15Z", "message": "Fix linting and add integer64 typing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aee7485d46161552bf7d0bab82e81135e05fa1a2", "author": {"user": {"login": "s-rubenstein", "name": "Sky Rubenstein"}}, "url": "https://github.com/all-of-us/workbench/commit/aee7485d46161552bf7d0bab82e81135e05fa1a2", "committedDate": "2020-02-12T15:15:06Z", "message": "Fix tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3527, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}