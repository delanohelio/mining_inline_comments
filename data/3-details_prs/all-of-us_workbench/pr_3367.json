{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjU1OTAw", "number": 3367, "title": "[RW-4500][RISK=MODERATE] Institution affiliation: distinguish between two institution agreement types", "bodyText": "Part 2 of distinguish between two institution agreement types:\nVerify institution details/validate affiliation for createAccount before directoryService.createUser to avoid creating a user which is going to throw bad request exception later resulting in an entry only in directory service and not in workbench.\nPR checklist\n\n This PR meets the Acceptance Criteria in the JIRA story\n The JIRA story has been moved to Dev Review\n This PR includes appropriate unit tests\n I have run and tested this change locally\n If this includes an API change, I have updated the appropriate Swagger definitions and notified API consumers\n If this includes a new feature flag, I have created and linked new JIRA tickets to (a) turn on the feature flag and (b) remove it later", "createdAt": "2020-04-08T06:33:38Z", "url": "https://github.com/all-of-us/workbench/pull/3367", "merged": true, "mergeCommit": {"oid": "ba18d98aa5628856f49de354772d8fb3f927993d"}, "closed": true, "closedAt": "2020-04-09T20:26:43Z", "author": {"login": "NehaBroad"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVh678AH2gAyNDAwNjU1OTAwOmM4NjhmMDNlMWQxODc2ZmQwNDE0MWZhMzgyMGM1MmI4NzE1NWE3YTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVtHnIAH2gAyNDAwNjU1OTAwOjUxNjIwNWI2NjIzMDA2YzRiY2QzZTU2MWZiYTM2Nzg4NmQyYzMwMmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c868f03e1d1876fd04141fa3820c52b87155a7a0", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/c868f03e1d1876fd04141fa3820c52b87155a7a0", "committedDate": "2020-04-08T06:29:44Z", "message": "Add validation for institution verification before google create user"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMDkzNjY1", "url": "https://github.com/all-of-us/workbench/pull/3367#pullrequestreview-390093665", "createdAt": "2020-04-08T15:37:48Z", "commit": {"oid": "c868f03e1d1876fd04141fa3820c52b87155a7a0"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNTozNzo0OFrOGC1Dmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo0NTozMlrOGC33sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTYxOTYxMA==", "bodyText": "This is very nicely compartmentalized.  (spelling tho)", "url": "https://github.com/all-of-us/workbench/pull/3367#discussion_r405619610", "createdAt": "2020-04-08T15:37:48Z", "author": {"login": "jmthibault79"}, "path": "api/src/main/java/org/pmiops/workbench/api/ProfileController.java", "diffHunk": "@@ -344,6 +345,10 @@ private DbUser initializeUserIfNeeded() {\n       verifyInvitationKey(request.getInvitationKey());\n     }\n \n+    if (workbenchConfigProvider.get().featureFlags.requireInstitutionalVerification) {\n+      verifyInsitutionAffilation(request.getProfile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c868f03e1d1876fd04141fa3820c52b87155a7a0"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2NTcxNQ==", "bodyText": "please make this line use CONTACT_EMAIL and change the domain to a different domain", "url": "https://github.com/all-of-us/workbench/pull/3367#discussion_r405665715", "createdAt": "2020-04-08T16:45:32Z", "author": {"login": "jmthibault79"}, "path": "api/src/test/java/org/pmiops/workbench/api/ProfileControllerTest.java", "diffHunk": "@@ -291,6 +290,147 @@ public void testInvitationKeyVerification_invitationKeyMismatch() {\n     profileController.invitationKeyVerification(invitationVerificationRequest);\n   }\n \n+  @Test(expected = BadRequestException.class)\n+  public void testCreateAccount_MismatchEmailAddress() {\n+    createUser();\n+    config.featureFlags.requireInstitutionalVerification = true;\n+    final Institution broad =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(Collections.singletonList(CONTACT_EMAIL))\n+            .emailDomains(Collections.singletonList(\"example.com\"))\n+            .duaTypeEnum(DuaType.RESTRICTED);\n+    institutionService.createInstitution(broad);\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionalRoleEnum(InstitutionalRole.STUDENT);\n+    createAccountRequest\n+        .getProfile()\n+        .verifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation)\n+        .contactEmail(\"notBob@example.com\");\n+    profileController.createAccount(createAccountRequest);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void testCreateAccount_MismatchEmailDomain() {\n+    createUser();\n+    config.featureFlags.requireInstitutionalVerification = true;\n+    final Institution broad =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(Collections.singletonList(CONTACT_EMAIL))\n+            .emailDomains(Collections.singletonList(\"example.com\"))\n+            .duaTypeEnum(DuaType.MASTER);\n+    institutionService.createInstitution(broad);\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionalRoleEnum(InstitutionalRole.STUDENT);\n+    createAccountRequest\n+        .getProfile()\n+        .verifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation)\n+        .contactEmail(\"bob@broad.com\");\n+    profileController.createAccount(createAccountRequest);\n+  }\n+\n+  @Test(expected = BadRequestException.class)\n+  public void testCreateAccount_MismatchEmailDomainNullDUA() {\n+    createUser();\n+    config.featureFlags.requireInstitutionalVerification = true;\n+    final Institution broad =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(Collections.singletonList(CONTACT_EMAIL))\n+            .emailDomains(Collections.singletonList(\"example.com\"));\n+    institutionService.createInstitution(broad);\n+\n+    final VerifiedInstitutionalAffiliation verifiedInstitutionalAffiliation =\n+        new VerifiedInstitutionalAffiliation()\n+            .institutionShortName(\"Broad\")\n+            .institutionalRoleEnum(InstitutionalRole.STUDENT);\n+    createAccountRequest\n+        .getProfile()\n+        .verifiedInstitutionalAffiliation(verifiedInstitutionalAffiliation)\n+        .contactEmail(\"bob@broadInstitute.com\");\n+    profileController.createAccount(createAccountRequest);\n+  }\n+\n+  @Test\n+  public void testCreateAccount_Success_RESTRICTEDDUA() {\n+    createUser();\n+    config.featureFlags.requireInstitutionalVerification = true;\n+    final Institution broad =\n+        new Institution()\n+            .shortName(\"Broad\")\n+            .displayName(\"The Broad Institute\")\n+            .emailAddresses(Collections.singletonList(\"bob@example.com\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c868f03e1d1876fd04141fa3820c52b87155a7a0"}, "originalPosition": 91}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8267cf514afdcdda3c93d0b2cf6c073d785cad92", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/8267cf514afdcdda3c93d0b2cf6c073d785cad92", "committedDate": "2020-04-08T19:21:33Z", "message": "PR Comments : Use CONTACT_EMAIL and remove institutionService from UserServiceImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "516205b6623006c4bcd3e561fba367886d2c302b", "author": {"user": {"login": "NehaBroad", "name": null}}, "url": "https://github.com/all-of-us/workbench/commit/516205b6623006c4bcd3e561fba367886d2c302b", "committedDate": "2020-04-08T19:32:32Z", "message": "correct spelling"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3376, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}