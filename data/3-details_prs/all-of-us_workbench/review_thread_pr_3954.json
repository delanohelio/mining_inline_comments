{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3ODUzNzcz", "number": 3954, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxMjo1MVrOEfgPWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxMzo0MVrOEfgQqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY5NTI4OnYy", "diffSide": "RIGHT", "path": "api/db-cdr/generate-cdr/make-bq-criteria-tables.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxMjo1MVrOHL0KAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxMjo1MVrOHL0KAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1MDkxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            echo \"CB_SURVEY_ATTRIBUTE - update has_attribute\"\n          \n          \n            \n            echo \"CB_CRITERIA - update has_attribute\"", "url": "https://github.com/all-of-us/workbench/pull/3954#discussion_r482150913", "createdAt": "2020-09-02T15:12:51Z", "author": {"login": "freemabd"}, "path": "api/db-cdr/generate-cdr/make-bq-criteria-tables.sh", "diffHunk": "@@ -5196,89 +5217,227 @@ VALUES\n     (17, 1585802, 0, 'MIN', 'NUM', '0'),\n     (18, 1585802, 0, 'MAX', 'NUM', '99'),\n     (19, 1585820, 0, 'MIN', 'NUM', '0'),\n-    (20, 1585820, 0, 'MAX', 'NUM', '255')\n+    (20, 1585820, 0, 'MAX', 'NUM', '255'),\n+    (21, 1333015, 0, 'MIN', 'NUM', '0'),\n+    (22, 1333015, 0, 'MAX', 'NUM', '20'),\n+    (23, 1333023, 0, 'MIN', 'NUM', '1'),\n+    (24, 1333023, 0, 'MAX', 'NUM', '20'),\n+    (25, 715717, 0, 'MIN', 'NUM', '0'),\n+    (26, 715717, 0, 'MAX', 'NUM', '24'),\n+    (27, 903642, 0, 'MIN', 'NUM', '0'),\n+    (28, 903642, 0, 'MAX', 'NUM', '1440'),\n+    (29, 715721, 0, 'MIN', 'NUM', '1'),\n+    (30, 715721, 0, 'MAX', 'NUM', '99'),\n+    (31, 715720, 0, 'MIN', 'NUM', '1'),\n+    (32, 715720, 0, 'MAX', 'NUM', '12'),\n+    (33, 715719, 0, 'MIN', 'NUM', '1'),\n+    (34, 715719, 0, 'MAX', 'NUM', '52'),\n+    (35, 1332870, 0, 'MIN', 'NUM', '1'),\n+    (36, 1332870, 0, 'MAX', 'NUM', '7'),\n+    (37, 903633, 0, 'MIN', 'NUM', '0'),\n+    (38, 903633, 0, 'MAX', 'NUM', '24'),\n+    (39, 715712, 0, 'MIN', 'NUM', '0'),\n+    (40, 715712, 0, 'MAX', 'NUM', '1440'),\n+    (41, 1332871, 0, 'MIN', 'NUM', '1'),\n+    (42, 1332871, 0, 'MAX', 'NUM', '7'),\n+    (43, 903634, 0, 'MIN', 'NUM', '0'),\n+    (44, 903634, 0, 'MAX', 'NUM', '24'),\n+    (45, 715715, 0, 'MIN', 'NUM', '0'),\n+    (46, 715715, 0, 'MAX', 'NUM', '1440'),\n+    (47, 1332872, 0, 'MIN', 'NUM', '1'),\n+    (48, 1332872, 0, 'MAX', 'NUM', '7'),\n+    (49, 903635, 0, 'MIN', 'NUM', '0'),\n+    (50, 903635, 0, 'MAX', 'NUM', '7'),\n+    (51, 715716, 0, 'MIN', 'NUM', '0'),\n+    (52, 715716, 0, 'MAX', 'NUM', '1440'),\n+    (53, 715718, 0, 'MIN', 'NUM', '0'),\n+    (54, 715718, 0, 'MAX', 'NUM', '1440'),\n+    (55, 715723, 0, 'MIN', 'NUM', '1'),\n+    (56, 715723, 0, 'MAX', 'NUM', '99'),\n+    (57, 715713, 0, 'MIN', 'NUM', '1'),\n+    (58, 715713, 0, 'MAX', 'NUM', '12'),\n+    (59, 715722, 0, 'MIN', 'NUM', '1'),\n+    (60, 715722, 0, 'MAX', 'NUM', '52')\n \"\n \n-# this code filters out any labs WHERE all results = 0\n+# this will add the min/max values for all numeric measurement concepts\n+# this code will filter out any labs WHERE all results = 0\n echo \"CB_CRITERIA_ATTRIBUTE - Measurements - add numeric results\"\n bq --quiet --project=$BQ_PROJECT query --nouse_legacy_sql \\\n \"INSERT INTO \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`\n-    (id, concept_id, value_as_concept_id, concept_name, type, est_count)\n-SELECT ROW_NUMBER() OVER (order by measurement_concept_id) + (SELECT MAX(ID) FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`) as id, *\n+    (\n+          id\n+        , concept_id\n+        , value_as_concept_id\n+        , concept_name\n+        , type\n+        , est_count\n+    )\n+SELECT\n+      ROW_NUMBER() OVER (ORDER BY concept_id) + (SELECT MAX(id) FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`) as id\n+    , concept_id\n+    , value_as_concept_id\n+    , concept_name\n+    , type\n+    , cnt\n FROM\n     (\n-        SELECT measurement_concept_id, 0, 'MIN', 'NUM', CAST(min(value_as_number) as STRING)\n+        SELECT\n+              measurement_concept_id as concept_id\n+            , 0 as value_as_concept_id\n+            , 'MIN' as concept_name\n+            , 'NUM' as type\n+            , CAST(MIN(value_as_number) as STRING) as cnt\n         FROM \\`$BQ_PROJECT.$BQ_DATASET.measurement\\`\n         WHERE measurement_concept_id in\n             (\n                 SELECT concept_id\n                 FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria\\`\n                 WHERE domain_id = 'MEASUREMENT'\n+                    and is_group = 0\n             )\n             and value_as_number is not null\n         GROUP BY 1\n         HAVING NOT (min(value_as_number) = 0 and max(value_as_number) = 0)\n \n         UNION ALL\n \n-        SELECT measurement_concept_id, 0, 'MAX', 'NUM', CAST(max(value_as_number) as STRING)\n+        SELECT\n+              measurement_concept_id as concept_id\n+            , 0 as value_as_concept_id\n+            , 'MAX' as concept_name\n+            , 'NUM' as type\n+            , CAST(max(value_as_number) as STRING) as cnt\n         FROM \\`$BQ_PROJECT.$BQ_DATASET.measurement\\`\n         WHERE measurement_concept_id in\n             (\n                 SELECT concept_id\n                 FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria\\`\n                 WHERE domain_id = 'MEASUREMENT'\n+                    and is_group = 0\n             )\n             and value_as_number is not null\n         GROUP BY 1\n         HAVING NOT (min(value_as_number) = 0 and max(value_as_number) = 0)\n     ) a\"\n \n+# this will add all categorical values for all measurement concepts where value_as_concept_id is valid\n echo \"CB_CRITERIA_ATTRIBUTE - Measurements - add categorical results\"\n bq --quiet --project=$BQ_PROJECT query --nouse_legacy_sql \\\n \"INSERT INTO \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`\n-    (id, concept_id, value_as_concept_Id, concept_name, type, est_count)\n-SELECT ROW_NUMBER() OVER (order by measurement_concept_id) + (SELECT MAX(ID) FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`) as id, *\n+    (\n+          id\n+        , concept_id\n+        , value_as_concept_id\n+        , concept_name\n+        , type\n+        , est_count\n+    )\n+SELECT\n+      ROW_NUMBER() OVER (ORDER BY concept_id) + (SELECT MAX(id) FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`) as id\n+    , concept_id\n+    , value_as_concept_id\n+    , concept_name\n+    , type\n+    , cnt\n FROM\n     (\n-        SELECT measurement_concept_id, value_as_concept_id, b.concept_name, 'CAT' as type, CAST(count(DISTINCT person_id) as STRING)\n+        SELECT\n+              measurement_concept_id as concept_id\n+            , value_as_concept_id\n+            , b.concept_name\n+            , 'CAT' as type\n+            , CAST(COUNT(DISTINCT person_id) as STRING) as cnt\n         FROM \\`$BQ_PROJECT.$BQ_DATASET.measurement\\` a\n         JOIN \\`$BQ_PROJECT.$BQ_DATASET.concept\\` b on a.value_as_concept_id = b.concept_id\n         WHERE measurement_concept_id in\n             (\n                 SELECT concept_id\n                 FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria\\`\n                 WHERE domain_id = 'MEASUREMENT'\n+                    and is_group = 0\n             )\n             and value_as_concept_id != 0\n             and value_as_concept_id is not null\n         GROUP BY 1,2,3\n     ) a\"\n \n \n-# set has_attributes=1 for any criteria that has data in cb_criteria_attribute\n-echo \"CB_CRITERIA_ATTRIBUTE - update has_attributes column for measurement criteria\"\n+# set has_attribute=1 for any measurement criteria that has data in cb_criteria_attribute\n+echo \"CB_CRITERIA_ATTRIBUTE - update has_attribute\"\n bq --quiet --project=$BQ_PROJECT query --nouse_legacy_sql \\\n \"UPDATE \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria\\`\n SET has_attribute = 1\n-WHERE concept_id in\n+WHERE domain_id = 'MEASUREMENT'\n+    and is_selectable = 1\n+    and concept_id in\n     (\n         SELECT DISTINCT concept_id\n         FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`\n-    )\n-    and domain_id = 'MEASUREMENT'\n-    and is_selectable = 1\"\n+    )\"\n+\n+\n+################################################\n+# CB_SURVEY_ATTRIBUTE\n+################################################\n+echo \"CB_SURVEY_ATTRIBUTE - adding data\"\n+bq --quiet --project=$BQ_PROJECT query --nouse_legacy_sql \\\n+\"INSERT INTO \\`$BQ_PROJECT.$BQ_DATASET.cb_survey_attribute\\`\n+SELECT\n+        ROW_NUMBER() OVER (ORDER BY question_concept_id, answer_concept_id, survey_id) as id\n+      , question_concept_id\n+      , answer_concept_id\n+      , survey_id\n+      , cnt\n+FROM\n+    (\n+        SELECT\n+              concept_id as question_concept_id\n+            , value_source_concept_id as answer_concept_id\n+            , survey_id\n+            , count(distinct person_id) cnt\n+        FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_search_all_events\\`\n+        WHERE\n+            concept_id in\n+                (\n+                    SELECT concept_id\n+                    FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria\\`\n+                    WHERE domain_id = 'SURVEY'\n+                )\n+            and survey_id is not null\n+            and is_standard = 0\n+        GROUP BY 1,2,3\n+    )\"\n+\n+# set has_attribute=1 for any criteria that has data in cb_survey_attribute\n+echo \"CB_SURVEY_ATTRIBUTE - update has_attribute\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ecfac667f930bbb155b2e13b1139c20a415115c"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNDY5ODY0OnYy", "diffSide": "RIGHT", "path": "api/db-cdr/generate-cdr/make-bq-criteria-tables.sh", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxMzo0MVrOHL0MQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxNToxMzo0MVrOHL0MQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjE1MTQ4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            echo \"CB_CRITERIA_ATTRIBUTE - update has_attribute\"\n          \n          \n            \n            echo \"CB_CRITERIA - update has_attribute\"", "url": "https://github.com/all-of-us/workbench/pull/3954#discussion_r482151488", "createdAt": "2020-09-02T15:13:41Z", "author": {"login": "freemabd"}, "path": "api/db-cdr/generate-cdr/make-bq-criteria-tables.sh", "diffHunk": "@@ -5196,89 +5217,227 @@ VALUES\n     (17, 1585802, 0, 'MIN', 'NUM', '0'),\n     (18, 1585802, 0, 'MAX', 'NUM', '99'),\n     (19, 1585820, 0, 'MIN', 'NUM', '0'),\n-    (20, 1585820, 0, 'MAX', 'NUM', '255')\n+    (20, 1585820, 0, 'MAX', 'NUM', '255'),\n+    (21, 1333015, 0, 'MIN', 'NUM', '0'),\n+    (22, 1333015, 0, 'MAX', 'NUM', '20'),\n+    (23, 1333023, 0, 'MIN', 'NUM', '1'),\n+    (24, 1333023, 0, 'MAX', 'NUM', '20'),\n+    (25, 715717, 0, 'MIN', 'NUM', '0'),\n+    (26, 715717, 0, 'MAX', 'NUM', '24'),\n+    (27, 903642, 0, 'MIN', 'NUM', '0'),\n+    (28, 903642, 0, 'MAX', 'NUM', '1440'),\n+    (29, 715721, 0, 'MIN', 'NUM', '1'),\n+    (30, 715721, 0, 'MAX', 'NUM', '99'),\n+    (31, 715720, 0, 'MIN', 'NUM', '1'),\n+    (32, 715720, 0, 'MAX', 'NUM', '12'),\n+    (33, 715719, 0, 'MIN', 'NUM', '1'),\n+    (34, 715719, 0, 'MAX', 'NUM', '52'),\n+    (35, 1332870, 0, 'MIN', 'NUM', '1'),\n+    (36, 1332870, 0, 'MAX', 'NUM', '7'),\n+    (37, 903633, 0, 'MIN', 'NUM', '0'),\n+    (38, 903633, 0, 'MAX', 'NUM', '24'),\n+    (39, 715712, 0, 'MIN', 'NUM', '0'),\n+    (40, 715712, 0, 'MAX', 'NUM', '1440'),\n+    (41, 1332871, 0, 'MIN', 'NUM', '1'),\n+    (42, 1332871, 0, 'MAX', 'NUM', '7'),\n+    (43, 903634, 0, 'MIN', 'NUM', '0'),\n+    (44, 903634, 0, 'MAX', 'NUM', '24'),\n+    (45, 715715, 0, 'MIN', 'NUM', '0'),\n+    (46, 715715, 0, 'MAX', 'NUM', '1440'),\n+    (47, 1332872, 0, 'MIN', 'NUM', '1'),\n+    (48, 1332872, 0, 'MAX', 'NUM', '7'),\n+    (49, 903635, 0, 'MIN', 'NUM', '0'),\n+    (50, 903635, 0, 'MAX', 'NUM', '7'),\n+    (51, 715716, 0, 'MIN', 'NUM', '0'),\n+    (52, 715716, 0, 'MAX', 'NUM', '1440'),\n+    (53, 715718, 0, 'MIN', 'NUM', '0'),\n+    (54, 715718, 0, 'MAX', 'NUM', '1440'),\n+    (55, 715723, 0, 'MIN', 'NUM', '1'),\n+    (56, 715723, 0, 'MAX', 'NUM', '99'),\n+    (57, 715713, 0, 'MIN', 'NUM', '1'),\n+    (58, 715713, 0, 'MAX', 'NUM', '12'),\n+    (59, 715722, 0, 'MIN', 'NUM', '1'),\n+    (60, 715722, 0, 'MAX', 'NUM', '52')\n \"\n \n-# this code filters out any labs WHERE all results = 0\n+# this will add the min/max values for all numeric measurement concepts\n+# this code will filter out any labs WHERE all results = 0\n echo \"CB_CRITERIA_ATTRIBUTE - Measurements - add numeric results\"\n bq --quiet --project=$BQ_PROJECT query --nouse_legacy_sql \\\n \"INSERT INTO \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`\n-    (id, concept_id, value_as_concept_id, concept_name, type, est_count)\n-SELECT ROW_NUMBER() OVER (order by measurement_concept_id) + (SELECT MAX(ID) FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`) as id, *\n+    (\n+          id\n+        , concept_id\n+        , value_as_concept_id\n+        , concept_name\n+        , type\n+        , est_count\n+    )\n+SELECT\n+      ROW_NUMBER() OVER (ORDER BY concept_id) + (SELECT MAX(id) FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`) as id\n+    , concept_id\n+    , value_as_concept_id\n+    , concept_name\n+    , type\n+    , cnt\n FROM\n     (\n-        SELECT measurement_concept_id, 0, 'MIN', 'NUM', CAST(min(value_as_number) as STRING)\n+        SELECT\n+              measurement_concept_id as concept_id\n+            , 0 as value_as_concept_id\n+            , 'MIN' as concept_name\n+            , 'NUM' as type\n+            , CAST(MIN(value_as_number) as STRING) as cnt\n         FROM \\`$BQ_PROJECT.$BQ_DATASET.measurement\\`\n         WHERE measurement_concept_id in\n             (\n                 SELECT concept_id\n                 FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria\\`\n                 WHERE domain_id = 'MEASUREMENT'\n+                    and is_group = 0\n             )\n             and value_as_number is not null\n         GROUP BY 1\n         HAVING NOT (min(value_as_number) = 0 and max(value_as_number) = 0)\n \n         UNION ALL\n \n-        SELECT measurement_concept_id, 0, 'MAX', 'NUM', CAST(max(value_as_number) as STRING)\n+        SELECT\n+              measurement_concept_id as concept_id\n+            , 0 as value_as_concept_id\n+            , 'MAX' as concept_name\n+            , 'NUM' as type\n+            , CAST(max(value_as_number) as STRING) as cnt\n         FROM \\`$BQ_PROJECT.$BQ_DATASET.measurement\\`\n         WHERE measurement_concept_id in\n             (\n                 SELECT concept_id\n                 FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria\\`\n                 WHERE domain_id = 'MEASUREMENT'\n+                    and is_group = 0\n             )\n             and value_as_number is not null\n         GROUP BY 1\n         HAVING NOT (min(value_as_number) = 0 and max(value_as_number) = 0)\n     ) a\"\n \n+# this will add all categorical values for all measurement concepts where value_as_concept_id is valid\n echo \"CB_CRITERIA_ATTRIBUTE - Measurements - add categorical results\"\n bq --quiet --project=$BQ_PROJECT query --nouse_legacy_sql \\\n \"INSERT INTO \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`\n-    (id, concept_id, value_as_concept_Id, concept_name, type, est_count)\n-SELECT ROW_NUMBER() OVER (order by measurement_concept_id) + (SELECT MAX(ID) FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`) as id, *\n+    (\n+          id\n+        , concept_id\n+        , value_as_concept_id\n+        , concept_name\n+        , type\n+        , est_count\n+    )\n+SELECT\n+      ROW_NUMBER() OVER (ORDER BY concept_id) + (SELECT MAX(id) FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria_attribute\\`) as id\n+    , concept_id\n+    , value_as_concept_id\n+    , concept_name\n+    , type\n+    , cnt\n FROM\n     (\n-        SELECT measurement_concept_id, value_as_concept_id, b.concept_name, 'CAT' as type, CAST(count(DISTINCT person_id) as STRING)\n+        SELECT\n+              measurement_concept_id as concept_id\n+            , value_as_concept_id\n+            , b.concept_name\n+            , 'CAT' as type\n+            , CAST(COUNT(DISTINCT person_id) as STRING) as cnt\n         FROM \\`$BQ_PROJECT.$BQ_DATASET.measurement\\` a\n         JOIN \\`$BQ_PROJECT.$BQ_DATASET.concept\\` b on a.value_as_concept_id = b.concept_id\n         WHERE measurement_concept_id in\n             (\n                 SELECT concept_id\n                 FROM \\`$BQ_PROJECT.$BQ_DATASET.cb_criteria\\`\n                 WHERE domain_id = 'MEASUREMENT'\n+                    and is_group = 0\n             )\n             and value_as_concept_id != 0\n             and value_as_concept_id is not null\n         GROUP BY 1,2,3\n     ) a\"\n \n \n-# set has_attributes=1 for any criteria that has data in cb_criteria_attribute\n-echo \"CB_CRITERIA_ATTRIBUTE - update has_attributes column for measurement criteria\"\n+# set has_attribute=1 for any measurement criteria that has data in cb_criteria_attribute\n+echo \"CB_CRITERIA_ATTRIBUTE - update has_attribute\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ecfac667f930bbb155b2e13b1139c20a415115c"}, "originalPosition": 243}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2386, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}