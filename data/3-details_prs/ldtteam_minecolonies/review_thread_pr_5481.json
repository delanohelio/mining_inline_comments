{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5OTczNjkz", "number": 5481, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDozNjo0OVrOEUAvZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjo0MjowMFrOEUCxvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDE5MTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuilding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDozNjo0OVrOG6ECPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0MTo0NVrOG6EJ8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNjcwMg==", "bodyText": "why not call the function hasWorkerOpenRequests for this part?", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463536702", "createdAt": "2020-07-31T10:36:49Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuilding.java", "diffHunk": "@@ -1148,6 +1162,26 @@ public boolean hasWorkerOpenRequestsFiltered(@NotNull final ICitizenData citizen\n         return getOpenRequests(citizen).stream().anyMatch(selectionPredicate);\n     }\n \n+    @Override\n+    public boolean hasOpenSyncRequest(@NotNull final ICitizenData citizen)\n+    {\n+        final Map<Integer, Collection<IToken<?>>> requestIds = getOpenRequestsByCitizen();\n+        if (!requestIds.containsKey(citizen.getId()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODY3Mw==", "bodyText": "ye thats simpler", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463538673", "createdAt": "2020-07-31T10:41:45Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuilding.java", "diffHunk": "@@ -1148,6 +1162,26 @@ public boolean hasWorkerOpenRequestsFiltered(@NotNull final ICitizenData citizen\n         return getOpenRequests(citizen).stream().anyMatch(selectionPredicate);\n     }\n \n+    @Override\n+    public boolean hasOpenSyncRequest(@NotNull final ICitizenData citizen)\n+    {\n+        final Map<Integer, Collection<IToken<?>>> requestIds = getOpenRequestsByCitizen();\n+        if (!requestIds.containsKey(citizen.getId()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNjcwMg=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDE5NjQ1OnYy", "diffSide": "LEFT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDozODo1NlrOG6EFcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo1NTowOFrOG6EfRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNzUyMQ==", "bodyText": "This here is important, we should re-request if the pickup failed.", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463537521", "createdAt": "2020-07-31T10:38:56Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -577,25 +548,32 @@ private IAIState lookForRequests()\n                     );\n                     return NEEDS_ITEM;\n                 }\n-                else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTI3MA==", "bodyText": "shouldnt the normal AI handle that? Like if the request is completed and gets removed but it did not get the item it wanted, it naturally would run into re-requesting", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463541270", "createdAt": "2020-07-31T10:48:06Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -577,25 +548,32 @@ private IAIState lookForRequests()\n                     );\n                     return NEEDS_ITEM;\n                 }\n-                else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNzUyMQ=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Mjg1Mw==", "bodyText": "Not necessarily very timely. I think it's a neat speed improvement to have it here without any backlash.", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463542853", "createdAt": "2020-07-31T10:51:50Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -577,25 +548,32 @@ private IAIState lookForRequests()\n                     );\n                     return NEEDS_ITEM;\n                 }\n-                else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNzUyMQ=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NDEzMg==", "bodyText": "ok", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463544132", "createdAt": "2020-07-31T10:55:08Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -577,25 +548,32 @@ private IAIState lookForRequests()\n                     );\n                     return NEEDS_ITEM;\n                 }\n-                else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzNzUyMQ=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIwMjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/citizen/EntityCitizen.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0MToxMFrOG6EI8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMTowNzo0NVrOG6EyUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODQxNg==", "bodyText": "Potentially this should be more generic. Make it a set or a list, etc. So that this can be extended if needed.", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463538416", "createdAt": "2020-07-31T10:41:10Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/EntityCitizen.java", "diffHunk": "@@ -1436,6 +1435,7 @@ public void callForHelp(final Entity attacker, final int guardHelpRange)\n \n         long guardDistance = guardHelpRange;\n         AbstractEntityCitizen guard = null;\n+        AbstractEntityCitizen secondGuard = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NDY4NA==", "bodyText": "hm I wanted to avoid having to sort a complete list and compare it all again", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463544684", "createdAt": "2020-07-31T10:56:34Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/EntityCitizen.java", "diffHunk": "@@ -1436,6 +1435,7 @@ public void callForHelp(final Entity attacker, final int guardHelpRange)\n \n         long guardDistance = guardHelpRange;\n         AbstractEntityCitizen guard = null;\n+        AbstractEntityCitizen secondGuard = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODQxNg=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NjI2MA==", "bodyText": "could make it a map citizen id to Entity for quick access", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463546260", "createdAt": "2020-07-31T11:00:30Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/EntityCitizen.java", "diffHunk": "@@ -1436,6 +1435,7 @@ public void callForHelp(final Entity attacker, final int guardHelpRange)\n \n         long guardDistance = guardHelpRange;\n         AbstractEntityCitizen guard = null;\n+        AbstractEntityCitizen secondGuard = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODQxNg=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NzYwMQ==", "bodyText": "I'm sorting them by distance here, don't think a map would help with that :D", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463547601", "createdAt": "2020-07-31T11:04:03Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/EntityCitizen.java", "diffHunk": "@@ -1436,6 +1435,7 @@ public void callForHelp(final Entity attacker, final int guardHelpRange)\n \n         long guardDistance = guardHelpRange;\n         AbstractEntityCitizen guard = null;\n+        AbstractEntityCitizen secondGuard = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODQxNg=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0OTAwOQ==", "bodyText": "That should be relatively simple. Make it an ordered list by distance such that you can always just poll the last one out each round. That would probably make even the existing one easier.", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463549009", "createdAt": "2020-07-31T11:07:45Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/EntityCitizen.java", "diffHunk": "@@ -1436,6 +1435,7 @@ public void callForHelp(final Entity attacker, final int guardHelpRange)\n \n         long guardDistance = guardHelpRange;\n         AbstractEntityCitizen guard = null;\n+        AbstractEntityCitizen secondGuard = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODQxNg=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIwMzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobCanSee.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0MTo0NlrOG6EJ-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo1NDo1OVrOG6EfAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODY4MA==", "bodyText": "This means they can go stairs up and down though, right?", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463538680", "createdAt": "2020-07-31T10:41:46Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobCanSee.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.RayTraceContext;\n+import net.minecraft.util.math.RayTraceResult;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Pathing job for moving into vision of the given entity\n+ */\n+public class PathJobCanSee extends AbstractPathJob\n+{\n+    /**\n+     * The entity to see\n+     */\n+    private final LivingEntity lookTarget;\n+\n+    /**\n+     * The entity to move\n+     */\n+    private final LivingEntity searchingEntity;\n+\n+    public PathJobCanSee(\n+      final LivingEntity searchingEntity,\n+      final LivingEntity lookTarget,\n+      final World world,\n+      @NotNull final BlockPos start, final int range)\n+    {\n+        super(world, start, start, range, searchingEntity);\n+\n+        this.searchingEntity = searchingEntity;\n+        this.lookTarget = lookTarget;\n+    }\n+\n+    @Override\n+    protected double computeHeuristic(final BlockPos pos)\n+    {\n+        return searchingEntity.getPosition().manhattanDistance(pos);\n+    }\n+\n+    @Override\n+    protected boolean isAtDestination(final Node n)\n+    {\n+        return canSeeTargetFromPos(n.pos);\n+    }\n+\n+    /**\n+     * Calculate the distance to the target.\n+     *\n+     * @param n Node to test.\n+     * @return double of the distance.\n+     */\n+    @Override\n+    protected double getNodeResultScore(@NotNull final Node n)\n+    {\n+        //  For Result Score lower is better\n+        return lookTarget.getPosition().manhattanDistance(n.pos);\n+    }\n+\n+    private boolean canSeeTargetFromPos(final BlockPos pos)\n+    {\n+        Vec3d vec3d = new Vec3d(pos.getX(), pos.getZ() + searchingEntity.getEyeHeight(), pos.getZ());\n+        Vec3d vec3d1 = new Vec3d(lookTarget.getPosX(), lookTarget.getPosYEye(), lookTarget.getPosZ());\n+        return this.world.rayTraceBlocks(new RayTraceContext(vec3d, vec3d1, RayTraceContext.BlockMode.COLLIDER, RayTraceContext.FluidMode.NONE, searchingEntity)).getType()\n+                 == RayTraceResult.Type.MISS;\n+    }\n+\n+    @Override\n+    protected boolean isPassable(@NotNull final BlockState block)\n+    {\n+        if (block.getBlock() == Blocks.LADDER)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MjY3Ng==", "bodyText": "ye stairs would work, you often got stairs as rooftop aswell so can't exclude those.", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463542676", "createdAt": "2020-07-31T10:51:24Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobCanSee.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.RayTraceContext;\n+import net.minecraft.util.math.RayTraceResult;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Pathing job for moving into vision of the given entity\n+ */\n+public class PathJobCanSee extends AbstractPathJob\n+{\n+    /**\n+     * The entity to see\n+     */\n+    private final LivingEntity lookTarget;\n+\n+    /**\n+     * The entity to move\n+     */\n+    private final LivingEntity searchingEntity;\n+\n+    public PathJobCanSee(\n+      final LivingEntity searchingEntity,\n+      final LivingEntity lookTarget,\n+      final World world,\n+      @NotNull final BlockPos start, final int range)\n+    {\n+        super(world, start, start, range, searchingEntity);\n+\n+        this.searchingEntity = searchingEntity;\n+        this.lookTarget = lookTarget;\n+    }\n+\n+    @Override\n+    protected double computeHeuristic(final BlockPos pos)\n+    {\n+        return searchingEntity.getPosition().manhattanDistance(pos);\n+    }\n+\n+    @Override\n+    protected boolean isAtDestination(final Node n)\n+    {\n+        return canSeeTargetFromPos(n.pos);\n+    }\n+\n+    /**\n+     * Calculate the distance to the target.\n+     *\n+     * @param n Node to test.\n+     * @return double of the distance.\n+     */\n+    @Override\n+    protected double getNodeResultScore(@NotNull final Node n)\n+    {\n+        //  For Result Score lower is better\n+        return lookTarget.getPosition().manhattanDistance(n.pos);\n+    }\n+\n+    private boolean canSeeTargetFromPos(final BlockPos pos)\n+    {\n+        Vec3d vec3d = new Vec3d(pos.getX(), pos.getZ() + searchingEntity.getEyeHeight(), pos.getZ());\n+        Vec3d vec3d1 = new Vec3d(lookTarget.getPosX(), lookTarget.getPosYEye(), lookTarget.getPosZ());\n+        return this.world.rayTraceBlocks(new RayTraceContext(vec3d, vec3d1, RayTraceContext.BlockMode.COLLIDER, RayTraceContext.FluidMode.NONE, searchingEntity)).getType()\n+                 == RayTraceResult.Type.MISS;\n+    }\n+\n+    @Override\n+    protected boolean isPassable(@NotNull final BlockState block)\n+    {\n+        if (block.getBlock() == Blocks.LADDER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODY4MA=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MzEzMw==", "bodyText": "Maybe we should add something like \"max 5y difference\" or so. So they don't climb walls down if it has stairs.", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463543133", "createdAt": "2020-07-31T10:52:32Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobCanSee.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.RayTraceContext;\n+import net.minecraft.util.math.RayTraceResult;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Pathing job for moving into vision of the given entity\n+ */\n+public class PathJobCanSee extends AbstractPathJob\n+{\n+    /**\n+     * The entity to see\n+     */\n+    private final LivingEntity lookTarget;\n+\n+    /**\n+     * The entity to move\n+     */\n+    private final LivingEntity searchingEntity;\n+\n+    public PathJobCanSee(\n+      final LivingEntity searchingEntity,\n+      final LivingEntity lookTarget,\n+      final World world,\n+      @NotNull final BlockPos start, final int range)\n+    {\n+        super(world, start, start, range, searchingEntity);\n+\n+        this.searchingEntity = searchingEntity;\n+        this.lookTarget = lookTarget;\n+    }\n+\n+    @Override\n+    protected double computeHeuristic(final BlockPos pos)\n+    {\n+        return searchingEntity.getPosition().manhattanDistance(pos);\n+    }\n+\n+    @Override\n+    protected boolean isAtDestination(final Node n)\n+    {\n+        return canSeeTargetFromPos(n.pos);\n+    }\n+\n+    /**\n+     * Calculate the distance to the target.\n+     *\n+     * @param n Node to test.\n+     * @return double of the distance.\n+     */\n+    @Override\n+    protected double getNodeResultScore(@NotNull final Node n)\n+    {\n+        //  For Result Score lower is better\n+        return lookTarget.getPosition().manhattanDistance(n.pos);\n+    }\n+\n+    private boolean canSeeTargetFromPos(final BlockPos pos)\n+    {\n+        Vec3d vec3d = new Vec3d(pos.getX(), pos.getZ() + searchingEntity.getEyeHeight(), pos.getZ());\n+        Vec3d vec3d1 = new Vec3d(lookTarget.getPosX(), lookTarget.getPosYEye(), lookTarget.getPosZ());\n+        return this.world.rayTraceBlocks(new RayTraceContext(vec3d, vec3d1, RayTraceContext.BlockMode.COLLIDER, RayTraceContext.FluidMode.NONE, searchingEntity)).getType()\n+                 == RayTraceResult.Type.MISS;\n+    }\n+\n+    @Override\n+    protected boolean isPassable(@NotNull final BlockState block)\n+    {\n+        if (block.getBlock() == Blocks.LADDER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODY4MA=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NDA2NQ==", "bodyText": "ye gonna add that as destination condition", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463544065", "createdAt": "2020-07-31T10:54:59Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobCanSee.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.RayTraceContext;\n+import net.minecraft.util.math.RayTraceResult;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Pathing job for moving into vision of the given entity\n+ */\n+public class PathJobCanSee extends AbstractPathJob\n+{\n+    /**\n+     * The entity to see\n+     */\n+    private final LivingEntity lookTarget;\n+\n+    /**\n+     * The entity to move\n+     */\n+    private final LivingEntity searchingEntity;\n+\n+    public PathJobCanSee(\n+      final LivingEntity searchingEntity,\n+      final LivingEntity lookTarget,\n+      final World world,\n+      @NotNull final BlockPos start, final int range)\n+    {\n+        super(world, start, start, range, searchingEntity);\n+\n+        this.searchingEntity = searchingEntity;\n+        this.lookTarget = lookTarget;\n+    }\n+\n+    @Override\n+    protected double computeHeuristic(final BlockPos pos)\n+    {\n+        return searchingEntity.getPosition().manhattanDistance(pos);\n+    }\n+\n+    @Override\n+    protected boolean isAtDestination(final Node n)\n+    {\n+        return canSeeTargetFromPos(n.pos);\n+    }\n+\n+    /**\n+     * Calculate the distance to the target.\n+     *\n+     * @param n Node to test.\n+     * @return double of the distance.\n+     */\n+    @Override\n+    protected double getNodeResultScore(@NotNull final Node n)\n+    {\n+        //  For Result Score lower is better\n+        return lookTarget.getPosition().manhattanDistance(n.pos);\n+    }\n+\n+    private boolean canSeeTargetFromPos(final BlockPos pos)\n+    {\n+        Vec3d vec3d = new Vec3d(pos.getX(), pos.getZ() + searchingEntity.getEyeHeight(), pos.getZ());\n+        Vec3d vec3d1 = new Vec3d(lookTarget.getPosX(), lookTarget.getPosYEye(), lookTarget.getPosZ());\n+        return this.world.rayTraceBlocks(new RayTraceContext(vec3d, vec3d1, RayTraceContext.BlockMode.COLLIDER, RayTraceContext.FluidMode.NONE, searchingEntity)).getType()\n+                 == RayTraceResult.Type.MISS;\n+    }\n+\n+    @Override\n+    protected boolean isPassable(@NotNull final BlockState block)\n+    {\n+        if (block.getBlock() == Blocks.LADDER)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODY4MA=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIwNTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobWalkRandomEdge.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0MjoyMFrOG6EK4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo1ODoxN1rOG6Ej6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODkxMg==", "bodyText": "There is already a horizontal directions array in vanilla you can query afaik", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463538912", "createdAt": "2020-07-31T10:42:20Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobWalkRandomEdge.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.Direction;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Walks to a random edge block nearby, a block next to air. Does not use ladders\n+ */\n+public class PathJobWalkRandomEdge extends AbstractPathJob\n+{\n+    private static final Direction[] directions = {Direction.NORTH, Direction.SOUTH, Direction.EAST, Direction.WEST};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MzQzNQ==", "bodyText": "hm only seeing a private one", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463543435", "createdAt": "2020-07-31T10:53:23Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobWalkRandomEdge.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.Direction;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Walks to a random edge block nearby, a block next to air. Does not use ladders\n+ */\n+public class PathJobWalkRandomEdge extends AbstractPathJob\n+{\n+    private static final Direction[] directions = {Direction.NORTH, Direction.SOUTH, Direction.EAST, Direction.WEST};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODkxMg=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0NTMyMg==", "bodyText": "Direction.Plane.HORIZONTAL", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463545322", "createdAt": "2020-07-31T10:58:17Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobWalkRandomEdge.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.Direction;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Walks to a random edge block nearby, a block next to air. Does not use ladders\n+ */\n+public class PathJobWalkRandomEdge extends AbstractPathJob\n+{\n+    private static final Direction[] directions = {Direction.NORTH, Direction.SOUTH, Direction.EAST, Direction.WEST};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUzODkxMg=="}, "originalCommit": {"oid": "7bc203cfee8c36578849dca48535faf2f03c5425"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDMyMjQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobCanSee.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyOToyMVrOG6FRWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjo0OTo0MFrOG6HVeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1Njk1NA==", "bodyText": "I don't see a problem going up, I think the problem is only going down imo", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463556954", "createdAt": "2020-07-31T11:29:21Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobCanSee.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.RayTraceContext;\n+import net.minecraft.util.math.RayTraceResult;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Pathing job for moving into vision of the given entity\n+ */\n+public class PathJobCanSee extends AbstractPathJob\n+{\n+    /**\n+     * The entity to see\n+     */\n+    private final LivingEntity lookTarget;\n+\n+    /**\n+     * The entity to move\n+     */\n+    private final LivingEntity searchingEntity;\n+\n+    public PathJobCanSee(\n+      final LivingEntity searchingEntity,\n+      final LivingEntity lookTarget,\n+      final World world,\n+      @NotNull final BlockPos start, final int range)\n+    {\n+        super(world, start, start, range, searchingEntity);\n+\n+        this.searchingEntity = searchingEntity;\n+        this.lookTarget = lookTarget;\n+    }\n+\n+    @Override\n+    protected double computeHeuristic(final BlockPos pos)\n+    {\n+        return searchingEntity.getPosition().manhattanDistance(pos);\n+    }\n+\n+    @Override\n+    protected boolean isAtDestination(final Node n)\n+    {\n+        if (Math.abs(start.getY() - n.pos.getY()) > 6)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "704717205c800571903d032ae945039726e235da"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU2MjM1OA==", "bodyText": "but some might want to station them not on the highest but inbetween somewhere", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463562358", "createdAt": "2020-07-31T11:43:23Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobCanSee.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.RayTraceContext;\n+import net.minecraft.util.math.RayTraceResult;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Pathing job for moving into vision of the given entity\n+ */\n+public class PathJobCanSee extends AbstractPathJob\n+{\n+    /**\n+     * The entity to see\n+     */\n+    private final LivingEntity lookTarget;\n+\n+    /**\n+     * The entity to move\n+     */\n+    private final LivingEntity searchingEntity;\n+\n+    public PathJobCanSee(\n+      final LivingEntity searchingEntity,\n+      final LivingEntity lookTarget,\n+      final World world,\n+      @NotNull final BlockPos start, final int range)\n+    {\n+        super(world, start, start, range, searchingEntity);\n+\n+        this.searchingEntity = searchingEntity;\n+        this.lookTarget = lookTarget;\n+    }\n+\n+    @Override\n+    protected double computeHeuristic(final BlockPos pos)\n+    {\n+        return searchingEntity.getPosition().manhattanDistance(pos);\n+    }\n+\n+    @Override\n+    protected boolean isAtDestination(final Node n)\n+    {\n+        if (Math.abs(start.getY() - n.pos.getY()) > 6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1Njk1NA=="}, "originalCommit": {"oid": "704717205c800571903d032ae945039726e235da"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU5MDc3Ng==", "bodyText": "Let's say I did that. I'd be fine for them to go a bit up to hit the target, but not to go much further down (compared to the guarding position)", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463590776", "createdAt": "2020-07-31T12:49:40Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/pathfinding/PathJobCanSee.java", "diffHunk": "@@ -0,0 +1,87 @@\n+package com.minecolonies.coremod.entity.pathfinding;\n+\n+import net.minecraft.block.BlockState;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.entity.LivingEntity;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.math.RayTraceContext;\n+import net.minecraft.util.math.RayTraceResult;\n+import net.minecraft.util.math.Vec3d;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Pathing job for moving into vision of the given entity\n+ */\n+public class PathJobCanSee extends AbstractPathJob\n+{\n+    /**\n+     * The entity to see\n+     */\n+    private final LivingEntity lookTarget;\n+\n+    /**\n+     * The entity to move\n+     */\n+    private final LivingEntity searchingEntity;\n+\n+    public PathJobCanSee(\n+      final LivingEntity searchingEntity,\n+      final LivingEntity lookTarget,\n+      final World world,\n+      @NotNull final BlockPos start, final int range)\n+    {\n+        super(world, start, start, range, searchingEntity);\n+\n+        this.searchingEntity = searchingEntity;\n+        this.lookTarget = lookTarget;\n+    }\n+\n+    @Override\n+    protected double computeHeuristic(final BlockPos pos)\n+    {\n+        return searchingEntity.getPosition().manhattanDistance(pos);\n+    }\n+\n+    @Override\n+    protected boolean isAtDestination(final Node n)\n+    {\n+        if (Math.abs(start.getY() - n.pos.getY()) > 6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1Njk1NA=="}, "originalCommit": {"oid": "704717205c800571903d032ae945039726e235da"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDUyNDc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/citizen/EntityCitizen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjo0MjowMFrOG6HHpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjo0MjowMFrOG6HHpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NzIzOA==", "bodyText": "int i = 0; ;\nwhile (i < CALL_GUARDS_CONSTANT && i < possibleGuards.size)\ncallToHelpAti?", "url": "https://github.com/ldtteam/minecolonies/pull/5481#discussion_r463587238", "createdAt": "2020-07-31T12:42:00Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/EntityCitizen.java", "diffHunk": "@@ -1447,15 +1447,21 @@ public void callForHelp(final Entity attacker, final int guardHelpRange)\n                 if (entry.getJob() instanceof AbstractJobGuard && entry.getId() != citizenData.getId() && tdist < guardDistance && entry.getJob().getWorkerAI() != null\n                       && ((AbstractEntityAIGuard<?, ?>) entry.getJob().getWorkerAI()).canHelp())\n                 {\n-                    guardDistance = tdist;\n-                    guard = entry.getEntity().get();\n+                    possibleGuards.add(entry.getEntity().get());\n                 }\n             }\n         }\n \n-        if (guard != null)\n+        Collections.sort(possibleGuards, Comparator.comparingInt(guard -> (int) getPosition().distanceSq(guard.getPosition())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6702f029ed35f933a4e3f997d54612646a56049"}, "originalPosition": 135}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3596, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}