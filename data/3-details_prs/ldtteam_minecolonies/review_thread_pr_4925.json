{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0OTU2Njcy", "number": 4925, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo1MjowOVrOD6csuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwODozODoxOVrOD62DVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjE0MjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowWorkerBuilding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo1MjowOVrOGSTA7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTowNjozNlrOGSztvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTA4NQ==", "bodyText": "While i agree the lumberjack shouldn't have recipes since it has normal ones, we probably shouldn't call this method hasReadOnlyRecipes and make it not show the recipes window, instead we should rename this to something more like allowsRecipeModification or something similar, in the future we may have huts that have both readOnlyRecipes and the ability to add recipes from the player", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421839085", "createdAt": "2020-05-07T22:52:09Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowWorkerBuilding.java", "diffHunk": "@@ -96,6 +97,14 @@\n \n     private String stateString = state ? DP_MODE_STATIC : DP_MODE_AUTOMATIC;\n \n+    /**\n+     * Defines whether or not the recipes of this buildings are read-only.\n+     * Crafters with intrinsic recipes for example would override this to return true.\n+     * @return Boolean stating if the teach-recipes button should be shown and Remove should be available.\n+     */\n+    protected boolean hasReadOnlyRecipes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3NDg0Nw==", "bodyText": "Renamed to isRecipeAlterationAllowed() (based on Raycom's suggestion + inspection) in d230c91.\nAlso fixed the brackets.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422374847", "createdAt": "2020-05-08T21:06:36Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowWorkerBuilding.java", "diffHunk": "@@ -96,6 +97,14 @@\n \n     private String stateString = state ? DP_MODE_STATIC : DP_MODE_AUTOMATIC;\n \n+    /**\n+     * Defines whether or not the recipes of this buildings are read-only.\n+     * Crafters with intrinsic recipes for example would override this to return true.\n+     * @return Boolean stating if the teach-recipes button should be shown and Remove should be available.\n+     */\n+    protected boolean hasReadOnlyRecipes() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTA4NQ=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjE0Mjk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo1MjozOVrOGSTBdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTowNjo1NlrOGSzuUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTIyMw==", "bodyText": "javadoc here is off", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421839223", "createdAt": "2020-05-07T22:52:39Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -81,6 +82,23 @@ public WindowListRecipes(final IColonyView c, final BlockPos buildingId)\n         updateRecipes();\n     }\n \n+    /**\n+     * Constructor for the window when the player wants to assign a worker for a certain home building.\n+     * Can additionally disable remove-buttons", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0OTM3OQ==", "bodyText": "How so? (Just for my information though. Since we're changing this to per-recipe, I'll rework this anyway)", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421849379", "createdAt": "2020-05-07T23:23:43Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -81,6 +82,23 @@ public WindowListRecipes(final IColonyView c, final BlockPos buildingId)\n         updateRecipes();\n     }\n \n+    /**\n+     * Constructor for the window when the player wants to assign a worker for a certain home building.\n+     * Can additionally disable remove-buttons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTIyMw=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0OTY5Mg==", "bodyText": "Sorry, not that exact line, one above.\n\"the player wants to assign a worker for a certain home building.\"", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421849692", "createdAt": "2020-05-07T23:24:38Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -81,6 +82,23 @@ public WindowListRecipes(final IColonyView c, final BlockPos buildingId)\n         updateRecipes();\n     }\n \n+    /**\n+     * Constructor for the window when the player wants to assign a worker for a certain home building.\n+     * Can additionally disable remove-buttons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTIyMw=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg1MjU0NA==", "bodyText": "Ah lol, I just brain-afk copypasted it from the old constructor. Will fix.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421852544", "createdAt": "2020-05-07T23:33:24Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -81,6 +82,23 @@ public WindowListRecipes(final IColonyView c, final BlockPos buildingId)\n         updateRecipes();\n     }\n \n+    /**\n+     * Constructor for the window when the player wants to assign a worker for a certain home building.\n+     * Can additionally disable remove-buttons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTIyMw=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3NDk5NA==", "bodyText": "Fixed in d230c91", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422374994", "createdAt": "2020-05-08T21:06:56Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -81,6 +82,23 @@ public WindowListRecipes(final IColonyView c, final BlockPos buildingId)\n         updateRecipes();\n     }\n \n+    /**\n+     * Constructor for the window when the player wants to assign a worker for a certain home building.\n+     * Can additionally disable remove-buttons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTIyMw=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjE0NTM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "isResolved": true, "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo1Mzo0OFrOGSTDAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMTowODoyOFrOGSzw4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg==", "bodyText": "can we make this per recipe? So that in the future we can have both readOnly and editable ones?", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421839616", "createdAt": "2020-05-07T22:53:48Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4Nzk1Ng==", "bodyText": "You'd have to add this to RecipeStorage and then also add this to the serializer/deserializer this flag.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421987956", "createdAt": "2020-05-08T07:24:31Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MzQ4OA==", "bodyText": "Are RecipeStorages reused/shared using the RecipeManager? Is that maybe planned for performance reasons at one point? If so, coding readOnly into the recipe is bound to break something at some time (i.e. teaching the same recipe to two different huts). In that case, I would add builtInRecipes into the workerhuts, which would run in parallel with the current \"playerRecipes\". This would also align with the other suggestion about allowing/disallowing playerRecipes together with builtIn-recipes in the future. If recipes are never reused, I'll just add this flag to the recipe?", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422263488", "createdAt": "2020-05-08T17:13:52Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NjgxOA==", "bodyText": "They are reused on a global level. The question is, do we want this recipe to be ever \"alterable\" ?", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422266818", "createdAt": "2020-05-08T17:20:47Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NTQ1NA==", "bodyText": "We're talking about the ability to remove the recipe from the building. I.e. we don't want the stripped recipes to be removed from the lumberjack. In extension, the same is true for the fletcher and the dyer btw.\nBut, if I happen to teach someone a recipe that another building has built-in (maybe that's something you guys are planning to use more in the future, say the sawmill can automatically and unremovably do the plank-recipe), then I should be able to remove that recipe from the building again.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422275454", "createdAt": "2020-05-08T17:37:53Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NjUxNA==", "bodyText": "Tbf, that feature we're talking about would add it automatically to all and to new buildings. However the player would still be allowed to remove it.\n(Similarly in the glassblower it is intentionally allowed to remove sand (to avoid requesting red sand to the warehouse).", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422276514", "createdAt": "2020-05-08T17:40:04Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3Nzc3Mg==", "bodyText": "If that's the case, I'll just hide the teach-button on lumberjacks (if you even want that) and leave the rest alone? Or even better, I could refunction the teach-recipe to reteach the built-in recipes. How about that?\nBTW, adding to existing buildings didn't work with this method for me, but that might be because of the single player dev world ..", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422277772", "createdAt": "2020-05-08T17:42:43Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3OTAxMw==", "bodyText": "Yeah, I'd be fine with hiding the remove and teach button at the lj. There is nothing we'd have to teach the lj", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422279013", "createdAt": "2020-05-08T17:45:12Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4MDU5OA==", "bodyText": "So:\nOption 1: Globally hide teach+remove on Lumberjacks, like it's done in the PR now.\nOption 2: Show both teach+remove, like Fletcher+Dyer, but if the player removes the recipe, he/she has to rebuild the thing to recover.\nOption 3: Refunction the Teach-Button to reset the built-in recipes to the initial state.\nAdmin's choice :)", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422280598", "createdAt": "2020-05-08T17:48:27Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4MjU3Ng==", "bodyText": "I'd say option one, but the naming is probably bad that's why Asher complained. Better name it:\nallowRecipeAlterations()", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422282576", "createdAt": "2020-05-08T17:52:31Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI4MjY2Nw==", "bodyText": "in the building that gets synched to the view", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422282667", "createdAt": "2020-05-08T17:52:42Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3NTY1MQ==", "bodyText": "Renamed in d230c91, kept teach/recipelist logic as was previously, but added logic to hide the recipe-list-button too if there's simply no recipes available for this hut (no built-in + no way to teach).", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422375651", "createdAt": "2020-05-08T21:08:28Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowListRecipes.java", "diffHunk": "@@ -126,6 +144,13 @@ public void updateElement(final int index, @NotNull final Pane rowPane)\n                 final ItemIcon icon = rowPane.findPaneOfTypeByID(OUTPUT_ICON, ItemIcon.class);\n                 icon.setItem(recipe.getPrimaryOutput());\n \n+                if (!isRemovalPossible) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTgzOTYxNg=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjE1MjY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractFilterableListIntrinsicCrafter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMjo1NzowM1rOGSTHOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxMTo1MVrOGSz3GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MDY5Ng==", "bodyText": "While the name is okay, i can already imagine myself and others getting confused by this name when searching for the class(es) that does this stuff\nCan we rename the Intrinsic in these classes to Predefined or something similar?", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421840696", "createdAt": "2020-05-07T22:57:03Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractFilterableListIntrinsicCrafter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.minecolonies.coremod.colony.buildings;\n+\n+import com.google.common.collect.ImmutableCollection;\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.crafting.PublicCrafting;\n+import com.minecolonies.api.colony.requestsystem.resolver.IRequestResolver;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.inventory.container.ContainerCrafting;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.jobs.AbstractJobCrafter;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingRequestResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingRequestResolver;\n+import io.netty.buffer.Unpooled;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.inventory.container.Container;\n+import net.minecraft.inventory.container.INamedContainerProvider;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.StringTextComponent;\n+import net.minecraftforge.common.util.Constants;\n+import net.minecraftforge.fml.network.NetworkHooks;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+\n+/**\n+ * Abstract class for all buildings which require a filterable list of allowed items.\n+ */\n+public abstract class AbstractFilterableListIntrinsicCrafter extends AbstractFilterableListBuilding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3NzI0MA==", "bodyText": "Renamed in 7541035 to AbstractFilterableListCrafter, because there was really no reason to restrict this new type to only built-in recipes. Private+Public crafters that also show filterable lists are valid configurations. The lumberjack will now refuse to accept recipes himself. HOWEVER this means that the AbstractFilterableListCrafter now completely mirrors the code of AbstractBuildingCrafter. This is horrendeous code duplication, but I have no idea how this could be fixed without either diamond inheritance (won't do) or refactoring the whole system to use a composition-style pattern (out of the scope of this PR, honestly). If you have an idea, please let me know. Otherwise, it is what it is :-/", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422377240", "createdAt": "2020-05-08T21:11:51Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractFilterableListIntrinsicCrafter.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.minecolonies.coremod.colony.buildings;\n+\n+import com.google.common.collect.ImmutableCollection;\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.crafting.PublicCrafting;\n+import com.minecolonies.api.colony.requestsystem.resolver.IRequestResolver;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.inventory.container.ContainerCrafting;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.jobs.AbstractJobCrafter;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingRequestResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingRequestResolver;\n+import io.netty.buffer.Unpooled;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.inventory.container.Container;\n+import net.minecraft.inventory.container.INamedContainerProvider;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.StringTextComponent;\n+import net.minecraftforge.common.util.Constants;\n+import net.minecraftforge.fml.network.NetworkHooks;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+\n+/**\n+ * Abstract class for all buildings which require a filterable list of allowed items.\n+ */\n+public abstract class AbstractFilterableListIntrinsicCrafter extends AbstractFilterableListBuilding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MDY5Ng=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjE2MTY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzowMToxNlrOGSTMrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxMzo0MVrOGSz6dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MjA5NA==", "bodyText": "maybe just use \"they\" here in the javadoc, or \"it\" lol", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421842094", "createdAt": "2020-05-07T23:01:16Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "diffHunk": "@@ -209,6 +215,47 @@ public Class getExpectedBuildingClass()\n         return BuildingLumberjack.class;\n     }\n \n+    /**\n+     * The lumberjack is a special worker.\n+     * In his/her decision state, he/she will try to add lumberjack cycles\n+     * If there's nothing left to craft, he/she will proceed with woodworking", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3ODEwMw==", "bodyText": "Changed in 7541035", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422378103", "createdAt": "2020-05-08T21:13:41Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "diffHunk": "@@ -209,6 +215,47 @@ public Class getExpectedBuildingClass()\n         return BuildingLumberjack.class;\n     }\n \n+    /**\n+     * The lumberjack is a special worker.\n+     * In his/her decision state, he/she will try to add lumberjack cycles\n+     * If there's nothing left to craft, he/she will proceed with woodworking", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MjA5NA=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjE2ODc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzowNDozNFrOGSTQxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxMzo1OVrOGSz7CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MzE0MQ==", "bodyText": "This is missing @OverRide", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421843141", "createdAt": "2020-05-07T23:04:34Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "diffHunk": "@@ -209,6 +215,47 @@ public Class getExpectedBuildingClass()\n         return BuildingLumberjack.class;\n     }\n \n+    /**\n+     * The lumberjack is a special worker.\n+     * In his/her decision state, he/she will try to add lumberjack cycles\n+     * If there's nothing left to craft, he/she will proceed with woodworking\n+     * @return the next state to go to.\n+     */\n+    protected IAIState decide()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3ODI0OQ==", "bodyText": "Fixed in 7541035", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422378249", "createdAt": "2020-05-08T21:13:59Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "diffHunk": "@@ -209,6 +215,47 @@ public Class getExpectedBuildingClass()\n         return BuildingLumberjack.class;\n     }\n \n+    /**\n+     * The lumberjack is a special worker.\n+     * In his/her decision state, he/she will try to add lumberjack cycles\n+     * If there's nothing left to craft, he/she will proceed with woodworking\n+     * @return the next state to go to.\n+     */\n+    protected IAIState decide()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0MzE0MQ=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjE3MzQ0OnYy", "diffSide": "LEFT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzowNjo0N1rOGSTThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzoxNjozMFrOGSTf_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0Mzg0NQ==", "bodyText": "can you please make sure this isn't being run every tick or whatever now?", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421843845", "createdAt": "2020-05-07T23:06:47Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "diffHunk": "@@ -314,10 +361,6 @@ private IAIState findTree()\n                                  copy.getOrDefault(SAPLINGS_LIST, Collections.emptyList()),\n                                  worker.getCitizenColonyHandler().getColony());\n             }\n-\n-            // Delay between area searches\n-            setDelay(100);\n-            return getState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NzAzNg==", "bodyText": "I think this is a fragment of older code. These lines will now fall through to line 377 (the return), which will change the state to LUMBERJACK_NO_TREES_FOUND, which has a delay built-in.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421847036", "createdAt": "2020-05-07T23:16:30Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "diffHunk": "@@ -314,10 +361,6 @@ private IAIState findTree()\n                                  copy.getOrDefault(SAPLINGS_LIST, Collections.emptyList()),\n                                  worker.getCitizenColonyHandler().getColony());\n             }\n-\n-            // Delay between area searches\n-            setDelay(100);\n-            return getState();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0Mzg0NQ=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjE4NTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingLumberjack.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMzoxMjoxNlrOGSTalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwODozNjo0NVrOGS5hdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NTY1NA==", "bodyText": "I haven't looked at the Log code and etc but i would assume there's some way, either in the block or otherwise, to get the stripped version of a log from a log. Doing this would add better support for modded logs", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421845654", "createdAt": "2020-05-07T23:12:16Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingLumberjack.java", "diffHunk": "@@ -95,6 +105,32 @@ public BuildingLumberjack(final IColony c, final BlockPos l)\n         super(c, l);\n \n         keepX.put(itemStack -> ItemStackUtils.hasToolLevel(itemStack, ToolType.AXE, TOOL_LEVEL_WOOD_OR_GOLD, getMaxToolLevel()), new Tuple<>(1, true));\n+\n+        if (recipes.isEmpty()) {\n+            addStrippedWoodRecipe(Items.OAK_LOG, Items.STRIPPED_OAK_LOG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk4ODU0Ng==", "bodyText": "Agreed on that. We should probably do something like Items.Tags.Logs.getItems().forEach(addRecipe)", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r421988546", "createdAt": "2020-05-08T07:25:55Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingLumberjack.java", "diffHunk": "@@ -95,6 +105,32 @@ public BuildingLumberjack(final IColony c, final BlockPos l)\n         super(c, l);\n \n         keepX.put(itemStack -> ItemStackUtils.hasToolLevel(itemStack, ToolType.AXE, TOOL_LEVEL_WOOD_OR_GOLD, getMaxToolLevel()), new Tuple<>(1, true));\n+\n+        if (recipes.isEmpty()) {\n+            addStrippedWoodRecipe(Items.OAK_LOG, Items.STRIPPED_OAK_LOG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NTY1NA=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NjM3MA==", "bodyText": "Tbh, I can't find anything. The only mention of that in forge is in the item.AxeItem, and there it's also done manually:\n  protected static final Map<Block, Block> BLOCK_STRIPPING_MAP = (new Builder<Block, Block>()).put(Blocks.OAK_WOOD, Blocks.STRIPPED_OAK_WOOD).put(Blocks.OAK_LOG, Blocks.STRIPPED_OAK_LOG).put(Blocks.DARK_OAK_WOOD, Blocks.STRIPPED_DARK_OAK_WOOD).put(Blocks.DARK_OAK_LOG, Blocks.STRIPPED_DARK_OAK_LOG).put(Blocks.ACACIA_WOOD, Blocks.STRIPPED_ACACIA_WOOD).put(Blocks.ACACIA_LOG, Blocks.STRIPPED_ACACIA_LOG).put(Blocks.BIRCH_WOOD, Blocks.STRIPPED_BIRCH_WOOD).put(Blocks.BIRCH_LOG, Blocks.STRIPPED_BIRCH_LOG).put(Blocks.JUNGLE_WOOD, Blocks.STRIPPED_JUNGLE_WOOD).put(Blocks.JUNGLE_LOG, Blocks.STRIPPED_JUNGLE_LOG).put(Blocks.SPRUCE_WOOD, Blocks.STRIPPED_SPRUCE_WOOD).put(Blocks.SPRUCE_LOG, Blocks.STRIPPED_SPRUCE_LOG).build();", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422276370", "createdAt": "2020-05-08T17:39:46Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingLumberjack.java", "diffHunk": "@@ -95,6 +105,32 @@ public BuildingLumberjack(final IColony c, final BlockPos l)\n         super(c, l);\n \n         keepX.put(itemStack -> ItemStackUtils.hasToolLevel(itemStack, ToolType.AXE, TOOL_LEVEL_WOOD_OR_GOLD, getMaxToolLevel()), new Tuple<>(1, true));\n+\n+        if (recipes.isEmpty()) {\n+            addStrippedWoodRecipe(Items.OAK_LOG, Items.STRIPPED_OAK_LOG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NTY1NA=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3NzI4OQ==", "bodyText": "How does vanilla determine that one block can be made to the stripped version by using an axe on it? Hardcoded?", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422277289", "createdAt": "2020-05-08T17:41:46Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingLumberjack.java", "diffHunk": "@@ -95,6 +105,32 @@ public BuildingLumberjack(final IColony c, final BlockPos l)\n         super(c, l);\n \n         keepX.put(itemStack -> ItemStackUtils.hasToolLevel(itemStack, ToolType.AXE, TOOL_LEVEL_WOOD_OR_GOLD, getMaxToolLevel()), new Tuple<>(1, true));\n+\n+        if (recipes.isEmpty()) {\n+            addStrippedWoodRecipe(Items.OAK_LOG, Items.STRIPPED_OAK_LOG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NTY1NA=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3OTQwNQ==", "bodyText": "If I understand correctly, it simply uses the map I posted above:\nBlock block = BLOCK_STRIPPING_MAP.get(blockstate.getBlock()); if (block != null) { PlayerEntity playerentity = context.getPlayer(); world.playSound(playerentity, blockpos, SoundEvents.ITEM_AXE_STRIP, SoundCategory.BLOCKS, 1.0F, 1.0F);\nUnfortunately, that map is protected and there's no Getter that I can see.\nI could subclass a new AxeItem, and put a Getter for the map in there. Hacky though xD", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422279405", "createdAt": "2020-05-08T17:46:00Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingLumberjack.java", "diffHunk": "@@ -95,6 +105,32 @@ public BuildingLumberjack(final IColony c, final BlockPos l)\n         super(c, l);\n \n         keepX.put(itemStack -> ItemStackUtils.hasToolLevel(itemStack, ToolType.AXE, TOOL_LEVEL_WOOD_OR_GOLD, getMaxToolLevel()), new Tuple<>(1, true));\n+\n+        if (recipes.isEmpty()) {\n+            addStrippedWoodRecipe(Items.OAK_LOG, Items.STRIPPED_OAK_LOG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NTY1NA=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3MDAwNg==", "bodyText": "I checked with forge and that's the only way to do it.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422470006", "createdAt": "2020-05-09T08:36:45Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingLumberjack.java", "diffHunk": "@@ -95,6 +105,32 @@ public BuildingLumberjack(final IColony c, final BlockPos l)\n         super(c, l);\n \n         keepX.put(itemStack -> ItemStackUtils.hasToolLevel(itemStack, ToolType.AXE, TOOL_LEVEL_WOOD_OR_GOLD, getMaxToolLevel()), new Tuple<>(1, true));\n+\n+        if (recipes.isEmpty()) {\n+            addStrippedWoodRecipe(Items.OAK_LOG, Items.STRIPPED_OAK_LOG);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTg0NTY1NA=="}, "originalCommit": {"oid": "97de96332eefa49c3d9d535d1ee8a897de0c41fe"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDI5MDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowWorkerBuilding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwODozMDozMlrOGS5fTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjo0MDoyMlrOGS6z8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTQ1NQ==", "bodyText": "bracket format is still an issue", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422469455", "createdAt": "2020-05-09T08:30:32Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowWorkerBuilding.java", "diffHunk": "@@ -148,7 +162,14 @@ private void changeDPState()\n \n     private void recipeListClicked()\n     {\n-        @NotNull final WindowListRecipes window = new WindowListRecipes(building.getColony(), building.getPosition());\n+        if (!isRecipeAlterationAllowed() && building.getRecipes().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5MTEyMg==", "bodyText": "oh my world I've used the other style for years, this is killing me.\nFixed in c49066c.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422491122", "createdAt": "2020-05-09T12:40:22Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/AbstractWindowWorkerBuilding.java", "diffHunk": "@@ -148,7 +162,14 @@ private void changeDPState()\n \n     private void recipeListClicked()\n     {\n-        @NotNull final WindowListRecipes window = new WindowListRecipes(building.getColony(), building.getPosition());\n+        if (!isRecipeAlterationAllowed() && building.getRecipes().isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTQ1NQ=="}, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDI5MTg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutLumberjack.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwODozMjowOFrOGS5f0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjo0Mjo1M1rOGS607Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTU4NQ==", "bodyText": "overriden method doesn't need the javadoc then. (javadoc only at origin method)", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422469585", "createdAt": "2020-05-09T08:32:08Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutLumberjack.java", "diffHunk": "@@ -77,12 +77,24 @@ public WindowHutLumberjack(final BuildingLumberjack.View building)\n         registerButton(BUTTON_TOGGLE_RESTRICTION, this::toggleRestriction);\n         registerButton(BUTTON_GIVE_TOOL, this::giveTool);\n \n-\n         setupReplantButton(findPaneOfTypeByID(BUTTON_TOGGLE_REPLANT, Button.class));\n         setupRestrictionButton(findPaneOfTypeByID(BUTTON_TOGGLE_RESTRICTION, Button.class));\n         setupGiveToolButton(findPaneOfTypeByID(BUTTON_GIVE_TOOL, Button.class));\n+    }\n \n-\n+    /**\n+     * Defines whether or not players can change the building's recipe list.\n+     * This is the case for most current buildings, but some buildings might only work on built-in recipes.\n+     * It's recommended to turn this off for buildings that make no use of player-thaught recipes, to avoid confusion for new players.\n+     * Turning this on will hide the \"Teach recipes\" button, hide the remove-buttons in the recipe list,\n+     * and also hide the recipe list altogether if no recipes are present.\n+     *\n+     * @return true if player is allowed to alter  recipes, false if not\n+     */\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTc4NA==", "bodyText": "This should also not be a window function. The building should synchronize the value in the view. So that we can ask the building here", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422469784", "createdAt": "2020-05-09T08:34:09Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutLumberjack.java", "diffHunk": "@@ -77,12 +77,24 @@ public WindowHutLumberjack(final BuildingLumberjack.View building)\n         registerButton(BUTTON_TOGGLE_RESTRICTION, this::toggleRestriction);\n         registerButton(BUTTON_GIVE_TOOL, this::giveTool);\n \n-\n         setupReplantButton(findPaneOfTypeByID(BUTTON_TOGGLE_REPLANT, Button.class));\n         setupRestrictionButton(findPaneOfTypeByID(BUTTON_TOGGLE_RESTRICTION, Button.class));\n         setupGiveToolButton(findPaneOfTypeByID(BUTTON_GIVE_TOOL, Button.class));\n+    }\n \n-\n+    /**\n+     * Defines whether or not players can change the building's recipe list.\n+     * This is the case for most current buildings, but some buildings might only work on built-in recipes.\n+     * It's recommended to turn this off for buildings that make no use of player-thaught recipes, to avoid confusion for new players.\n+     * Turning this on will hide the \"Teach recipes\" button, hide the remove-buttons in the recipe list,\n+     * and also hide the recipe list altogether if no recipes are present.\n+     *\n+     * @return true if player is allowed to alter  recipes, false if not\n+     */\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTU4NQ=="}, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTgwMQ==", "bodyText": "(Only require to override one function to achieve this behaviour and not 2)", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422469801", "createdAt": "2020-05-09T08:34:24Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutLumberjack.java", "diffHunk": "@@ -77,12 +77,24 @@ public WindowHutLumberjack(final BuildingLumberjack.View building)\n         registerButton(BUTTON_TOGGLE_RESTRICTION, this::toggleRestriction);\n         registerButton(BUTTON_GIVE_TOOL, this::giveTool);\n \n-\n         setupReplantButton(findPaneOfTypeByID(BUTTON_TOGGLE_REPLANT, Button.class));\n         setupRestrictionButton(findPaneOfTypeByID(BUTTON_TOGGLE_RESTRICTION, Button.class));\n         setupGiveToolButton(findPaneOfTypeByID(BUTTON_GIVE_TOOL, Button.class));\n+    }\n \n-\n+    /**\n+     * Defines whether or not players can change the building's recipe list.\n+     * This is the case for most current buildings, but some buildings might only work on built-in recipes.\n+     * It's recommended to turn this off for buildings that make no use of player-thaught recipes, to avoid confusion for new players.\n+     * Turning this on will hide the \"Teach recipes\" button, hide the remove-buttons in the recipe list,\n+     * and also hide the recipe list altogether if no recipes are present.\n+     *\n+     * @return true if player is allowed to alter  recipes, false if not\n+     */\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTU4NQ=="}, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5MTM3Mw==", "bodyText": "I removed all the override-JDocs in the files that I touched. Also, you are absolutely right about the window function, it's moved to the building now. Still need two overrides to keep it clean (source of truth in the building ->serialized to the view), but that's much better than before.\nFixed in f1bab0e.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422491373", "createdAt": "2020-05-09T12:42:53Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutLumberjack.java", "diffHunk": "@@ -77,12 +77,24 @@ public WindowHutLumberjack(final BuildingLumberjack.View building)\n         registerButton(BUTTON_TOGGLE_RESTRICTION, this::toggleRestriction);\n         registerButton(BUTTON_GIVE_TOOL, this::giveTool);\n \n-\n         setupReplantButton(findPaneOfTypeByID(BUTTON_TOGGLE_REPLANT, Button.class));\n         setupRestrictionButton(findPaneOfTypeByID(BUTTON_TOGGLE_RESTRICTION, Button.class));\n         setupGiveToolButton(findPaneOfTypeByID(BUTTON_GIVE_TOOL, Button.class));\n+    }\n \n-\n+    /**\n+     * Defines whether or not players can change the building's recipe list.\n+     * This is the case for most current buildings, but some buildings might only work on built-in recipes.\n+     * It's recommended to turn this off for buildings that make no use of player-thaught recipes, to avoid confusion for new players.\n+     * Turning this on will hide the \"Teach recipes\" button, hide the remove-buttons in the recipe list,\n+     * and also hide the recipe list altogether if no recipes are present.\n+     *\n+     * @return true if player is allowed to alter  recipes, false if not\n+     */\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTU4NQ=="}, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDI5NDM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractFilterableListCrafter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwODozNTo1OVrOGS5hNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjo0Nzo0MVrOGS62tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTk0MA==", "bodyText": "I guess we don't need those methods here (canCraft, canRecipeBeAdded, openCraftingcontainer)", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422469940", "createdAt": "2020-05-09T08:35:59Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractFilterableListCrafter.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.minecolonies.coremod.colony.buildings;\n+\n+import com.google.common.collect.ImmutableCollection;\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.crafting.PublicCrafting;\n+import com.minecolonies.api.colony.requestsystem.resolver.IRequestResolver;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.inventory.container.ContainerCrafting;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.jobs.AbstractJobCrafter;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingRequestResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingRequestResolver;\n+import io.netty.buffer.Unpooled;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.inventory.container.Container;\n+import net.minecraft.inventory.container.INamedContainerProvider;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.StringTextComponent;\n+import net.minecraftforge.fml.network.NetworkHooks;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+/**\n+ * Abstract class for all buildings which require a filterable list of allowed items AND can also craft stuff.\n+ *\n+ * TODO: The crafter logic is just a copypaste from {@link AbstractBuildingCrafter} to avoid diamond inheritance.\n+ * This should be fixed at some point.\n+ */\n+public abstract class AbstractFilterableListCrafter extends AbstractFilterableListBuilding\n+{\n+    /**\n+     * Extra amount of recipes the crafters can learn.\n+     */\n+    private static final int EXTRA_RECIPE_MULTIPLIER = 10;\n+\n+    /**\n+     * The constructor of the building.\n+     *\n+     * @param c the colony\n+     * @param l the position\n+     */\n+    protected AbstractFilterableListCrafter(@NotNull final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+    }\n+\n+    @Override\n+    public boolean canBeGathered()\n+    {\n+        return super.canBeGathered() &&\n+                 this.getAssignedCitizen().stream()\n+                   .map(c -> c.getJob(AbstractJobCrafter.class))\n+                   .filter(Objects::nonNull)\n+                   .allMatch(AbstractJobCrafter::hasTask);\n+    }\n+\n+    @Override\n+    public ImmutableCollection<IRequestResolver<?>> createResolvers()\n+    {\n+        final Collection<IRequestResolver<?>> supers =\n+          super.createResolvers().stream()\n+            .filter(r -> !(r instanceof PrivateWorkerCraftingProductionResolver || r instanceof PrivateWorkerCraftingRequestResolver)).collect(\n+            Collectors.toList());\n+        final ImmutableList.Builder<IRequestResolver<?>> builder = ImmutableList.builder();\n+\n+        builder.addAll(supers);\n+        builder.add(new PublicWorkerCraftingRequestResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN)));\n+        builder.add(new PublicWorkerCraftingProductionResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN)));\n+\n+        return builder.build();\n+    }\n+\n+    @Override\n+    public Map<Predicate<ItemStack>, Tuple<Integer, Boolean>> getRequiredItemsAndAmount()\n+    {\n+        final Map<ItemStorage, Tuple<Integer, Boolean>> recipeOutputs = new HashMap<>();\n+        for (final ICitizenData citizen : getAssignedCitizen())\n+        {\n+            if (citizen.getJob() instanceof AbstractJobCrafter)\n+            {\n+                final List<IToken<?>> assignedTasks = citizen.getJob(AbstractJobCrafter.class).getAssignedTasks();\n+                for (final IToken taskToken : assignedTasks)\n+                {\n+                    final IRequest<? extends PublicCrafting> request = (IRequest<? extends PublicCrafting>) colony.getRequestManager().getRequestForToken(taskToken);\n+                    final IRecipeStorage recipeStorage = getFirstRecipe(request.getRequest().getStack());\n+                    if (recipeStorage != null)\n+                    {\n+                        for (final ItemStorage itemStorage : recipeStorage.getCleanedInput())\n+                        {\n+                            int amount = itemStorage.getAmount();\n+                            if (recipeOutputs.containsKey(itemStorage))\n+                            {\n+                                amount = recipeOutputs.get(itemStorage).getA() + itemStorage.getAmount();\n+                            }\n+                            recipeOutputs.put(itemStorage, new Tuple<>(amount, false));\n+                        }\n+\n+                        final ItemStorage output = new ItemStorage(recipeStorage.getPrimaryOutput());\n+                        if (recipeOutputs.containsKey(output))\n+                        {\n+                            output.setAmount(recipeOutputs.get(output).getA() + output.getAmount());\n+                        }\n+                        recipeOutputs.put(output, new Tuple<>(output.getAmount(), false));\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Map<Predicate<ItemStack>, Tuple<Integer, Boolean>> toKeep = new HashMap<>(keepX);\n+        toKeep.putAll(recipeOutputs.entrySet().stream().collect(Collectors.toMap(key -> (stack -> stack.isItemEqual(key.getKey().getItemStack())), Map.Entry::getValue)));\n+        return toKeep;\n+    }\n+\n+    @Override\n+    public boolean canCraftComplexRecipes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NTQzNA==", "bodyText": "The AbstractFilterableListCrafter inherits from AbstractFilterableListBuilding, not from AbstractBuildingCrafter. (The FilterableList one is tighter coupled with messages, so it seemed less error-prone to me to do it this way). Removing the aforementioned methods would lock this type out from complex recipes (and require subclasses to duplicate openCraftingContainer), which is not necessarily what we want. I'd leave it in for now - this whole thing (Abstract class for every type + their combinations) needs to be reworked in the long run anyway imho.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422475434", "createdAt": "2020-05-09T09:35:41Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractFilterableListCrafter.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.minecolonies.coremod.colony.buildings;\n+\n+import com.google.common.collect.ImmutableCollection;\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.crafting.PublicCrafting;\n+import com.minecolonies.api.colony.requestsystem.resolver.IRequestResolver;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.inventory.container.ContainerCrafting;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.jobs.AbstractJobCrafter;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingRequestResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingRequestResolver;\n+import io.netty.buffer.Unpooled;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.inventory.container.Container;\n+import net.minecraft.inventory.container.INamedContainerProvider;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.StringTextComponent;\n+import net.minecraftforge.fml.network.NetworkHooks;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+/**\n+ * Abstract class for all buildings which require a filterable list of allowed items AND can also craft stuff.\n+ *\n+ * TODO: The crafter logic is just a copypaste from {@link AbstractBuildingCrafter} to avoid diamond inheritance.\n+ * This should be fixed at some point.\n+ */\n+public abstract class AbstractFilterableListCrafter extends AbstractFilterableListBuilding\n+{\n+    /**\n+     * Extra amount of recipes the crafters can learn.\n+     */\n+    private static final int EXTRA_RECIPE_MULTIPLIER = 10;\n+\n+    /**\n+     * The constructor of the building.\n+     *\n+     * @param c the colony\n+     * @param l the position\n+     */\n+    protected AbstractFilterableListCrafter(@NotNull final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+    }\n+\n+    @Override\n+    public boolean canBeGathered()\n+    {\n+        return super.canBeGathered() &&\n+                 this.getAssignedCitizen().stream()\n+                   .map(c -> c.getJob(AbstractJobCrafter.class))\n+                   .filter(Objects::nonNull)\n+                   .allMatch(AbstractJobCrafter::hasTask);\n+    }\n+\n+    @Override\n+    public ImmutableCollection<IRequestResolver<?>> createResolvers()\n+    {\n+        final Collection<IRequestResolver<?>> supers =\n+          super.createResolvers().stream()\n+            .filter(r -> !(r instanceof PrivateWorkerCraftingProductionResolver || r instanceof PrivateWorkerCraftingRequestResolver)).collect(\n+            Collectors.toList());\n+        final ImmutableList.Builder<IRequestResolver<?>> builder = ImmutableList.builder();\n+\n+        builder.addAll(supers);\n+        builder.add(new PublicWorkerCraftingRequestResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN)));\n+        builder.add(new PublicWorkerCraftingProductionResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN)));\n+\n+        return builder.build();\n+    }\n+\n+    @Override\n+    public Map<Predicate<ItemStack>, Tuple<Integer, Boolean>> getRequiredItemsAndAmount()\n+    {\n+        final Map<ItemStorage, Tuple<Integer, Boolean>> recipeOutputs = new HashMap<>();\n+        for (final ICitizenData citizen : getAssignedCitizen())\n+        {\n+            if (citizen.getJob() instanceof AbstractJobCrafter)\n+            {\n+                final List<IToken<?>> assignedTasks = citizen.getJob(AbstractJobCrafter.class).getAssignedTasks();\n+                for (final IToken taskToken : assignedTasks)\n+                {\n+                    final IRequest<? extends PublicCrafting> request = (IRequest<? extends PublicCrafting>) colony.getRequestManager().getRequestForToken(taskToken);\n+                    final IRecipeStorage recipeStorage = getFirstRecipe(request.getRequest().getStack());\n+                    if (recipeStorage != null)\n+                    {\n+                        for (final ItemStorage itemStorage : recipeStorage.getCleanedInput())\n+                        {\n+                            int amount = itemStorage.getAmount();\n+                            if (recipeOutputs.containsKey(itemStorage))\n+                            {\n+                                amount = recipeOutputs.get(itemStorage).getA() + itemStorage.getAmount();\n+                            }\n+                            recipeOutputs.put(itemStorage, new Tuple<>(amount, false));\n+                        }\n+\n+                        final ItemStorage output = new ItemStorage(recipeStorage.getPrimaryOutput());\n+                        if (recipeOutputs.containsKey(output))\n+                        {\n+                            output.setAmount(recipeOutputs.get(output).getA() + output.getAmount());\n+                        }\n+                        recipeOutputs.put(output, new Tuple<>(output.getAmount(), false));\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Map<Predicate<ItemStack>, Tuple<Integer, Boolean>> toKeep = new HashMap<>(keepX);\n+        toKeep.putAll(recipeOutputs.entrySet().stream().collect(Collectors.toMap(key -> (stack -> stack.isItemEqual(key.getKey().getItemStack())), Map.Entry::getValue)));\n+        return toKeep;\n+    }\n+\n+    @Override\n+    public boolean canCraftComplexRecipes()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTk0MA=="}, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NTg2NQ==", "bodyText": "Ah okay, while it might not be necessary for the current lj, others might need it, true.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422475865", "createdAt": "2020-05-09T09:40:29Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractFilterableListCrafter.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.minecolonies.coremod.colony.buildings;\n+\n+import com.google.common.collect.ImmutableCollection;\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.crafting.PublicCrafting;\n+import com.minecolonies.api.colony.requestsystem.resolver.IRequestResolver;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.inventory.container.ContainerCrafting;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.jobs.AbstractJobCrafter;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingRequestResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingRequestResolver;\n+import io.netty.buffer.Unpooled;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.inventory.container.Container;\n+import net.minecraft.inventory.container.INamedContainerProvider;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.StringTextComponent;\n+import net.minecraftforge.fml.network.NetworkHooks;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+/**\n+ * Abstract class for all buildings which require a filterable list of allowed items AND can also craft stuff.\n+ *\n+ * TODO: The crafter logic is just a copypaste from {@link AbstractBuildingCrafter} to avoid diamond inheritance.\n+ * This should be fixed at some point.\n+ */\n+public abstract class AbstractFilterableListCrafter extends AbstractFilterableListBuilding\n+{\n+    /**\n+     * Extra amount of recipes the crafters can learn.\n+     */\n+    private static final int EXTRA_RECIPE_MULTIPLIER = 10;\n+\n+    /**\n+     * The constructor of the building.\n+     *\n+     * @param c the colony\n+     * @param l the position\n+     */\n+    protected AbstractFilterableListCrafter(@NotNull final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+    }\n+\n+    @Override\n+    public boolean canBeGathered()\n+    {\n+        return super.canBeGathered() &&\n+                 this.getAssignedCitizen().stream()\n+                   .map(c -> c.getJob(AbstractJobCrafter.class))\n+                   .filter(Objects::nonNull)\n+                   .allMatch(AbstractJobCrafter::hasTask);\n+    }\n+\n+    @Override\n+    public ImmutableCollection<IRequestResolver<?>> createResolvers()\n+    {\n+        final Collection<IRequestResolver<?>> supers =\n+          super.createResolvers().stream()\n+            .filter(r -> !(r instanceof PrivateWorkerCraftingProductionResolver || r instanceof PrivateWorkerCraftingRequestResolver)).collect(\n+            Collectors.toList());\n+        final ImmutableList.Builder<IRequestResolver<?>> builder = ImmutableList.builder();\n+\n+        builder.addAll(supers);\n+        builder.add(new PublicWorkerCraftingRequestResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN)));\n+        builder.add(new PublicWorkerCraftingProductionResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN)));\n+\n+        return builder.build();\n+    }\n+\n+    @Override\n+    public Map<Predicate<ItemStack>, Tuple<Integer, Boolean>> getRequiredItemsAndAmount()\n+    {\n+        final Map<ItemStorage, Tuple<Integer, Boolean>> recipeOutputs = new HashMap<>();\n+        for (final ICitizenData citizen : getAssignedCitizen())\n+        {\n+            if (citizen.getJob() instanceof AbstractJobCrafter)\n+            {\n+                final List<IToken<?>> assignedTasks = citizen.getJob(AbstractJobCrafter.class).getAssignedTasks();\n+                for (final IToken taskToken : assignedTasks)\n+                {\n+                    final IRequest<? extends PublicCrafting> request = (IRequest<? extends PublicCrafting>) colony.getRequestManager().getRequestForToken(taskToken);\n+                    final IRecipeStorage recipeStorage = getFirstRecipe(request.getRequest().getStack());\n+                    if (recipeStorage != null)\n+                    {\n+                        for (final ItemStorage itemStorage : recipeStorage.getCleanedInput())\n+                        {\n+                            int amount = itemStorage.getAmount();\n+                            if (recipeOutputs.containsKey(itemStorage))\n+                            {\n+                                amount = recipeOutputs.get(itemStorage).getA() + itemStorage.getAmount();\n+                            }\n+                            recipeOutputs.put(itemStorage, new Tuple<>(amount, false));\n+                        }\n+\n+                        final ItemStorage output = new ItemStorage(recipeStorage.getPrimaryOutput());\n+                        if (recipeOutputs.containsKey(output))\n+                        {\n+                            output.setAmount(recipeOutputs.get(output).getA() + output.getAmount());\n+                        }\n+                        recipeOutputs.put(output, new Tuple<>(output.getAmount(), false));\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Map<Predicate<ItemStack>, Tuple<Integer, Boolean>> toKeep = new HashMap<>(keepX);\n+        toKeep.putAll(recipeOutputs.entrySet().stream().collect(Collectors.toMap(key -> (stack -> stack.isItemEqual(key.getKey().getItemStack())), Map.Entry::getValue)));\n+        return toKeep;\n+    }\n+\n+    @Override\n+    public boolean canCraftComplexRecipes()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTk0MA=="}, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5MTgzMQ==", "bodyText": "I did realize that openCraftingContainer was already useless ('cause 1:1 copy of its parent) in the original AbstractBuildingCrafter. I removed it from both there and from the new AbstractFilterableListCrafter. Fixed in f1bab0e.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422491831", "createdAt": "2020-05-09T12:47:41Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractFilterableListCrafter.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.minecolonies.coremod.colony.buildings;\n+\n+import com.google.common.collect.ImmutableCollection;\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.crafting.PublicCrafting;\n+import com.minecolonies.api.colony.requestsystem.resolver.IRequestResolver;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.inventory.container.ContainerCrafting;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.jobs.AbstractJobCrafter;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PrivateWorkerCraftingRequestResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingProductionResolver;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.PublicWorkerCraftingRequestResolver;\n+import io.netty.buffer.Unpooled;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.entity.player.PlayerInventory;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.inventory.container.Container;\n+import net.minecraft.inventory.container.INamedContainerProvider;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.StringTextComponent;\n+import net.minecraftforge.fml.network.NetworkHooks;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+/**\n+ * Abstract class for all buildings which require a filterable list of allowed items AND can also craft stuff.\n+ *\n+ * TODO: The crafter logic is just a copypaste from {@link AbstractBuildingCrafter} to avoid diamond inheritance.\n+ * This should be fixed at some point.\n+ */\n+public abstract class AbstractFilterableListCrafter extends AbstractFilterableListBuilding\n+{\n+    /**\n+     * Extra amount of recipes the crafters can learn.\n+     */\n+    private static final int EXTRA_RECIPE_MULTIPLIER = 10;\n+\n+    /**\n+     * The constructor of the building.\n+     *\n+     * @param c the colony\n+     * @param l the position\n+     */\n+    protected AbstractFilterableListCrafter(@NotNull final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+    }\n+\n+    @Override\n+    public boolean canBeGathered()\n+    {\n+        return super.canBeGathered() &&\n+                 this.getAssignedCitizen().stream()\n+                   .map(c -> c.getJob(AbstractJobCrafter.class))\n+                   .filter(Objects::nonNull)\n+                   .allMatch(AbstractJobCrafter::hasTask);\n+    }\n+\n+    @Override\n+    public ImmutableCollection<IRequestResolver<?>> createResolvers()\n+    {\n+        final Collection<IRequestResolver<?>> supers =\n+          super.createResolvers().stream()\n+            .filter(r -> !(r instanceof PrivateWorkerCraftingProductionResolver || r instanceof PrivateWorkerCraftingRequestResolver)).collect(\n+            Collectors.toList());\n+        final ImmutableList.Builder<IRequestResolver<?>> builder = ImmutableList.builder();\n+\n+        builder.addAll(supers);\n+        builder.add(new PublicWorkerCraftingRequestResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN)));\n+        builder.add(new PublicWorkerCraftingProductionResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN)));\n+\n+        return builder.build();\n+    }\n+\n+    @Override\n+    public Map<Predicate<ItemStack>, Tuple<Integer, Boolean>> getRequiredItemsAndAmount()\n+    {\n+        final Map<ItemStorage, Tuple<Integer, Boolean>> recipeOutputs = new HashMap<>();\n+        for (final ICitizenData citizen : getAssignedCitizen())\n+        {\n+            if (citizen.getJob() instanceof AbstractJobCrafter)\n+            {\n+                final List<IToken<?>> assignedTasks = citizen.getJob(AbstractJobCrafter.class).getAssignedTasks();\n+                for (final IToken taskToken : assignedTasks)\n+                {\n+                    final IRequest<? extends PublicCrafting> request = (IRequest<? extends PublicCrafting>) colony.getRequestManager().getRequestForToken(taskToken);\n+                    final IRecipeStorage recipeStorage = getFirstRecipe(request.getRequest().getStack());\n+                    if (recipeStorage != null)\n+                    {\n+                        for (final ItemStorage itemStorage : recipeStorage.getCleanedInput())\n+                        {\n+                            int amount = itemStorage.getAmount();\n+                            if (recipeOutputs.containsKey(itemStorage))\n+                            {\n+                                amount = recipeOutputs.get(itemStorage).getA() + itemStorage.getAmount();\n+                            }\n+                            recipeOutputs.put(itemStorage, new Tuple<>(amount, false));\n+                        }\n+\n+                        final ItemStorage output = new ItemStorage(recipeStorage.getPrimaryOutput());\n+                        if (recipeOutputs.containsKey(output))\n+                        {\n+                            output.setAmount(recipeOutputs.get(output).getA() + output.getAmount());\n+                        }\n+                        recipeOutputs.put(output, new Tuple<>(output.getAmount(), false));\n+                    }\n+                }\n+            }\n+        }\n+\n+        final Map<Predicate<ItemStack>, Tuple<Integer, Boolean>> toKeep = new HashMap<>(keepX);\n+        toKeep.putAll(recipeOutputs.entrySet().stream().collect(Collectors.toMap(key -> (stack -> stack.isItemEqual(key.getKey().getItemStack())), Map.Entry::getValue)));\n+        return toKeep;\n+    }\n+\n+    @Override\n+    public boolean canCraftComplexRecipes()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ2OTk0MA=="}, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDI5NTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwODozODoxOVrOGS5iCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQxMjo0ODoxMlrOGS628A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3MDE1NQ==", "bodyText": "comment on previous line please (also for line 314)", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422470155", "createdAt": "2020-05-09T08:38:19Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "diffHunk": "@@ -243,7 +295,7 @@ private IAIState prepareForWoodcutting()\n     {\n         if (checkForToolOrWeapon(ToolType.AXE))\n         {\n-            return getState();\n+            return START_WORKING; // Reset everything, maybe there are new crafting requests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ5MTg4OA==", "bodyText": "Fixed in f1bab0e.", "url": "https://github.com/ldtteam/minecolonies/pull/4925#discussion_r422491888", "createdAt": "2020-05-09T12:48:12Z", "author": {"login": "JiaYow"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/lumberjack/EntityAIWorkLumberjack.java", "diffHunk": "@@ -243,7 +295,7 @@ private IAIState prepareForWoodcutting()\n     {\n         if (checkForToolOrWeapon(ToolType.AXE))\n         {\n-            return getState();\n+            return START_WORKING; // Reset everything, maybe there are new crafting requests", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3MDE1NQ=="}, "originalCommit": {"oid": "7541035a65bf06d75eb1e4e5eef57014cda0830a"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3050, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}