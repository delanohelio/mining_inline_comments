{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5Nzg2ODA5", "number": 4585, "title": "Feature/school", "bodyText": "Closes #4582\nThis PR adds a school to the colony.\nSchool give work to one teacher total and up to 2 kids per level.\nWhen kids grow up the automatically leave the school.\nKids only stay in school until noon, then they roam around freely again.\nIn school kids sit around on carpet and \"study\". Randomly they get a recess and run around freely in the building.\nTo compensate kids that study in a school grow up twice as quickly in the remaining time to compensate.\nTeachers give out paper to kids and randomly sit down with kids to teach them.\nReview please", "createdAt": "2020-04-06T17:16:22Z", "url": "https://github.com/ldtteam/minecolonies/pull/4585", "merged": true, "mergeCommit": {"oid": "fe395ea80a260da5a9ee329c19258c7814c926e9"}, "closed": true, "closedAt": "2020-04-06T21:14:47Z", "author": {"login": "Raycoms"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUp82CAH2gAyMzk5Nzg2ODA5OjEwNTQwNGM1ZGRiM2YwMjVmZTU4MDA5ZjMwYWM1YzA3YTI5ZDkzOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVEbLiAH2gAyMzk5Nzg2ODA5OmRlOGQ0NTFhZDhlZmQwZDFiMGIxZDlmZDZlZDYzYTFlZGRkYzUyM2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "105404c5ddb3f025fe58009f30ac5c07a29d9392", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/105404c5ddb3f025fe58009f30ac5c07a29d9392", "committedDate": "2020-04-05T13:17:08Z", "message": "Initital block, building and job setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "756ea8e58f4c92ad030919712e0f7b5f14e5d78e", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/756ea8e58f4c92ad030919712e0f7b5f14e5d78e", "committedDate": "2020-04-05T13:17:11Z", "message": "Merge remote-tracking branch 'origin/version/1.15' into feature/school"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d29739dd06d20360a4440ad1755db1191197de8", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/5d29739dd06d20360a4440ad1755db1191197de8", "committedDate": "2020-04-05T13:49:09Z", "message": "Add block model and schematic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aadcb1eb205e7e368ae49c7a843f829b00e28faa", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/aadcb1eb205e7e368ae49c7a843f829b00e28faa", "committedDate": "2020-04-05T15:52:26Z", "message": "Add teacher model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51fae285bb710a9abb258c78f6cb44caa38edf1d", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/51fae285bb710a9abb258c78f6cb44caa38edf1d", "committedDate": "2020-04-06T16:18:20Z", "message": "Finish school and AIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fc20cb83181ceed4209496c0edd77bfaef4f506", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/8fc20cb83181ceed4209496c0edd77bfaef4f506", "committedDate": "2020-04-06T16:22:22Z", "message": "constant noon"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/0b5bbf379cee1734f33957d40e8903679ae4d104", "committedDate": "2020-04-06T17:12:29Z", "message": "fix school break, add recipe, add loottable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDU4NjYw", "url": "https://github.com/ldtteam/minecolonies/pull/4585#pullrequestreview-388458660", "createdAt": "2020-04-06T17:18:40Z", "commit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NTI5OTEz", "url": "https://github.com/ldtteam/minecolonies/pull/4585#pullrequestreview-388529913", "createdAt": "2020-04-06T18:55:41Z", "commit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxODo1NTo0MVrOGBliXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxOToyNzoxMFrOGBmmzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNjc2NQ==", "bodyText": "so our  childs are patients?", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404316765", "createdAt": "2020-04-06T18:55:41Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingSchool.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.ICitizenDataView;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.client.gui.WindowHutSchool;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.CarpetBlock;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+/**\n+ * Creates a new building for the school.\n+ */\n+public class BuildingSchool extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String SCHOOL = \"school\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * NBT value to store the carpet pos.\n+     */\n+    private static final String TAG_CARPET  = \"carpet\";\n+\n+    /**\n+     * If the school has a teacher.\n+     */\n+    private boolean hasTeacher = false;\n+\n+    /**\n+     * Map from beds to patients, 0 is empty.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNzMwNg==", "bodyText": "do we \"reserve\" a slot for a teacher?", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404317306", "createdAt": "2020-04-06T18:56:38Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingSchool.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.ICitizenDataView;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.client.gui.WindowHutSchool;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.CarpetBlock;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+/**\n+ * Creates a new building for the school.\n+ */\n+public class BuildingSchool extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String SCHOOL = \"school\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * NBT value to store the carpet pos.\n+     */\n+    private static final String TAG_CARPET  = \"carpet\";\n+\n+    /**\n+     * If the school has a teacher.\n+     */\n+    private boolean hasTeacher = false;\n+\n+    /**\n+     * Map from beds to patients, 0 is empty.\n+     */\n+    @NotNull\n+    private final List<BlockPos> carpet = new ArrayList<>();\n+\n+    /**\n+     * Random obj for random calc.\n+     */\n+    private final Random random = new Random();\n+\n+    /**\n+     * Instantiates the building.\n+     * @param c the colony.\n+     * @param l the location.\n+     */\n+    public BuildingSchool(final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return SCHOOL;\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return MAX_BUILDING_LEVEL;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return \"com.minecolonies.coremod.job.pupil\";\n+    }\n+\n+    @Override\n+    public boolean canWorkDuringTheRain()\n+    {\n+        return true;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Knowledge;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getSecondarySkill()\n+    {\n+        return Skill.Mana;\n+    }\n+\n+    @Override\n+    public int getMaxInhabitants()\n+    {\n+        return 1 + 2 * getBuildingLevel();\n+    }\n+\n+    @Override\n+    public boolean assignCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild() || citizen.getJob() instanceof JobPupil)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxNzg4Ng==", "bodyText": "bedTagList?^^", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404317886", "createdAt": "2020-04-06T18:57:38Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingSchool.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.ICitizenDataView;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.client.gui.WindowHutSchool;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.CarpetBlock;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+/**\n+ * Creates a new building for the school.\n+ */\n+public class BuildingSchool extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String SCHOOL = \"school\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * NBT value to store the carpet pos.\n+     */\n+    private static final String TAG_CARPET  = \"carpet\";\n+\n+    /**\n+     * If the school has a teacher.\n+     */\n+    private boolean hasTeacher = false;\n+\n+    /**\n+     * Map from beds to patients, 0 is empty.\n+     */\n+    @NotNull\n+    private final List<BlockPos> carpet = new ArrayList<>();\n+\n+    /**\n+     * Random obj for random calc.\n+     */\n+    private final Random random = new Random();\n+\n+    /**\n+     * Instantiates the building.\n+     * @param c the colony.\n+     * @param l the location.\n+     */\n+    public BuildingSchool(final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return SCHOOL;\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return MAX_BUILDING_LEVEL;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return \"com.minecolonies.coremod.job.pupil\";\n+    }\n+\n+    @Override\n+    public boolean canWorkDuringTheRain()\n+    {\n+        return true;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Knowledge;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getSecondarySkill()\n+    {\n+        return Skill.Mana;\n+    }\n+\n+    @Override\n+    public int getMaxInhabitants()\n+    {\n+        return 1 + 2 * getBuildingLevel();\n+    }\n+\n+    @Override\n+    public boolean assignCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild() || citizen.getJob() instanceof JobPupil)\n+        {\n+            return super.assignCitizen(citizen);\n+        }\n+        else if (hasTeacher)\n+        {\n+            return false;\n+        }\n+\n+        if (super.assignCitizen(citizen))\n+        {\n+            markDirty();\n+            return hasTeacher = true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void removeCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.getJob() instanceof JobTeacher)\n+        {\n+            hasTeacher = false;\n+            markDirty();\n+        }\n+        super.removeCitizen(citizen);\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild())\n+        {\n+            return new JobPupil(citizen);\n+        }\n+        return new JobTeacher(citizen);\n+    }\n+\n+    @Override\n+    public void registerBlockPosition(@NotNull final Block block, @NotNull final BlockPos pos, @NotNull final World world)\n+    {\n+        super.registerBlockPosition(block, pos, world);\n+        if (block instanceof CarpetBlock)\n+        {\n+            carpet.add(pos);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void deserializeNBT(final CompoundNBT compound)\n+    {\n+        super.deserializeNBT(compound);\n+        final ListNBT carpetTagList = compound.getList(TAG_CARPET, Constants.NBT.TAG_COMPOUND);\n+        for (int i = 0; i < carpetTagList.size(); ++i)\n+        {\n+            final CompoundNBT bedCompound = carpetTagList.getCompound(i);\n+            final BlockPos pos = BlockPosUtil.read(bedCompound, TAG_POS);\n+            if (!carpet.contains(pos))\n+            {\n+                carpet.add(pos);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompoundNBT serializeNBT()\n+    {\n+        final CompoundNBT compound = super.serializeNBT();\n+        if (!carpet.isEmpty())\n+        {\n+            @NotNull final ListNBT bedTagList = new ListNBT();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxODIwMA==", "bodyText": "bedcompound", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404318200", "createdAt": "2020-04-06T18:58:08Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingSchool.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.ICitizenDataView;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.client.gui.WindowHutSchool;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import net.minecraft.block.Block;\n+import net.minecraft.block.CarpetBlock;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+\n+/**\n+ * Creates a new building for the school.\n+ */\n+public class BuildingSchool extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String SCHOOL = \"school\";\n+\n+    /**\n+     * Max building level of the hut.\n+     */\n+    private static final int MAX_BUILDING_LEVEL = 5;\n+\n+    /**\n+     * NBT value to store the carpet pos.\n+     */\n+    private static final String TAG_CARPET  = \"carpet\";\n+\n+    /**\n+     * If the school has a teacher.\n+     */\n+    private boolean hasTeacher = false;\n+\n+    /**\n+     * Map from beds to patients, 0 is empty.\n+     */\n+    @NotNull\n+    private final List<BlockPos> carpet = new ArrayList<>();\n+\n+    /**\n+     * Random obj for random calc.\n+     */\n+    private final Random random = new Random();\n+\n+    /**\n+     * Instantiates the building.\n+     * @param c the colony.\n+     * @param l the location.\n+     */\n+    public BuildingSchool(final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return SCHOOL;\n+    }\n+\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return MAX_BUILDING_LEVEL;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return \"com.minecolonies.coremod.job.pupil\";\n+    }\n+\n+    @Override\n+    public boolean canWorkDuringTheRain()\n+    {\n+        return true;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Knowledge;\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Skill getSecondarySkill()\n+    {\n+        return Skill.Mana;\n+    }\n+\n+    @Override\n+    public int getMaxInhabitants()\n+    {\n+        return 1 + 2 * getBuildingLevel();\n+    }\n+\n+    @Override\n+    public boolean assignCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild() || citizen.getJob() instanceof JobPupil)\n+        {\n+            return super.assignCitizen(citizen);\n+        }\n+        else if (hasTeacher)\n+        {\n+            return false;\n+        }\n+\n+        if (super.assignCitizen(citizen))\n+        {\n+            markDirty();\n+            return hasTeacher = true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public void removeCitizen(final ICitizenData citizen)\n+    {\n+        if (citizen.getJob() instanceof JobTeacher)\n+        {\n+            hasTeacher = false;\n+            markDirty();\n+        }\n+        super.removeCitizen(citizen);\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(final ICitizenData citizen)\n+    {\n+        if (citizen.isChild())\n+        {\n+            return new JobPupil(citizen);\n+        }\n+        return new JobTeacher(citizen);\n+    }\n+\n+    @Override\n+    public void registerBlockPosition(@NotNull final Block block, @NotNull final BlockPos pos, @NotNull final World world)\n+    {\n+        super.registerBlockPosition(block, pos, world);\n+        if (block instanceof CarpetBlock)\n+        {\n+            carpet.add(pos);\n+        }\n+    }\n+\n+\n+    @Override\n+    public void deserializeNBT(final CompoundNBT compound)\n+    {\n+        super.deserializeNBT(compound);\n+        final ListNBT carpetTagList = compound.getList(TAG_CARPET, Constants.NBT.TAG_COMPOUND);\n+        for (int i = 0; i < carpetTagList.size(); ++i)\n+        {\n+            final CompoundNBT bedCompound = carpetTagList.getCompound(i);\n+            final BlockPos pos = BlockPosUtil.read(bedCompound, TAG_POS);\n+            if (!carpet.contains(pos))\n+            {\n+                carpet.add(pos);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public CompoundNBT serializeNBT()\n+    {\n+        final CompoundNBT compound = super.serializeNBT();\n+        if (!carpet.isEmpty())\n+        {\n+            @NotNull final ListNBT bedTagList = new ListNBT();\n+            for (@NotNull final BlockPos pos : carpet)\n+            {\n+                final CompoundNBT bedCompound = new CompoundNBT();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTE3MA==", "bodyText": "from the teacher you mean? else this is in the wrong AI I think", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404319170", "createdAt": "2020-04-06T18:59:48Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkPupil.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.interactionhandling.ChatPriority;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.interactionhandling.StandardInteractionResponseHandler;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import com.minecolonies.coremod.entity.citizen.EntityCitizen;\n+import com.minecolonies.coremod.network.messages.CircleParticleEffectMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.TranslationConstants.PUPIL_NO_CARPET;\n+\n+public class EntityAIWorkPupil extends AbstractEntityAIInteract<JobPupil>\n+{\n+    /**\n+     * How often the kid studies for one recess.\n+     */\n+    private static final int STUDY_TO_RECESS_RATIO = 10;\n+\n+    /**\n+     * To be requested by the teacher.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTQzNA==", "bodyText": "jdoc", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404319434", "createdAt": "2020-04-06T19:00:19Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkPupil.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.interactionhandling.ChatPriority;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.interactionhandling.StandardInteractionResponseHandler;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import com.minecolonies.coremod.entity.citizen.EntityCitizen;\n+import com.minecolonies.coremod.network.messages.CircleParticleEffectMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.TranslationConstants.PUPIL_NO_CARPET;\n+\n+public class EntityAIWorkPupil extends AbstractEntityAIInteract<JobPupil>\n+{\n+    /**\n+     * How often the kid studies for one recess.\n+     */\n+    private static final int STUDY_TO_RECESS_RATIO = 10;\n+\n+    /**\n+     * To be requested by the teacher.\n+     */\n+    private final Predicate<ItemStack> PAPER = stack -> stack.getItem() == Items.PAPER;\n+\n+    /**\n+     * The max time to sit.\n+     */\n+    private int maxSittingTicks = 0;\n+\n+    /**\n+     * The current sitting time.\n+     */\n+    private int sittingTicks = 0;\n+\n+    /**\n+     * The pos to study at.\n+     */\n+    private BlockPos studyPos;\n+\n+    /**\n+     * Next recess pos to run to.\n+     */\n+    private BlockPos recessPos;\n+\n+    /**\n+     * Constructor for the AI\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkPupil(@NotNull final JobPupil job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(DECIDE, this::decide, TICKS_SECOND),\n+          new AITarget(STUDY, this::study, TICKS_SECOND),\n+          new AITarget(RECESS, this::recess, TICKS_SECOND)\n+        );\n+        worker.setCanPickUpLoot(true);\n+    }\n+\n+    private IAIState decide()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMxOTUyOA==", "bodyText": "jdoc", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404319528", "createdAt": "2020-04-06T19:00:28Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkPupil.java", "diffHunk": "@@ -0,0 +1,204 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.interactionhandling.ChatPriority;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.interactionhandling.StandardInteractionResponseHandler;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import com.minecolonies.coremod.entity.citizen.EntityCitizen;\n+import com.minecolonies.coremod.network.messages.CircleParticleEffectMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.TranslationConstants.PUPIL_NO_CARPET;\n+\n+public class EntityAIWorkPupil extends AbstractEntityAIInteract<JobPupil>\n+{\n+    /**\n+     * How often the kid studies for one recess.\n+     */\n+    private static final int STUDY_TO_RECESS_RATIO = 10;\n+\n+    /**\n+     * To be requested by the teacher.\n+     */\n+    private final Predicate<ItemStack> PAPER = stack -> stack.getItem() == Items.PAPER;\n+\n+    /**\n+     * The max time to sit.\n+     */\n+    private int maxSittingTicks = 0;\n+\n+    /**\n+     * The current sitting time.\n+     */\n+    private int sittingTicks = 0;\n+\n+    /**\n+     * The pos to study at.\n+     */\n+    private BlockPos studyPos;\n+\n+    /**\n+     * Next recess pos to run to.\n+     */\n+    private BlockPos recessPos;\n+\n+    /**\n+     * Constructor for the AI\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkPupil(@NotNull final JobPupil job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(DECIDE, this::decide, TICKS_SECOND),\n+          new AITarget(STUDY, this::study, TICKS_SECOND),\n+          new AITarget(RECESS, this::recess, TICKS_SECOND)\n+        );\n+        worker.setCanPickUpLoot(true);\n+    }\n+\n+    private IAIState decide()\n+    {\n+        if (worker.getRandom().nextInt(STUDY_TO_RECESS_RATIO) < 1)\n+        {\n+            recessPos = BlockPosUtil.getRandomPosition(world, recessPos == null ? BlockPos.ZERO : recessPos, worker.getPosition(), 10);\n+            return RECESS;\n+        }\n+\n+        final BuildingSchool school = getOwnBuilding();\n+        final BlockPos pos = school.getRandomPlaceToSit();\n+        if (pos == null)\n+        {\n+            worker.getCitizenData().triggerInteraction(new StandardInteractionResponseHandler(new TranslationTextComponent(PUPIL_NO_CARPET), ChatPriority.BLOCKING));\n+            return DECIDE;\n+        }\n+\n+        studyPos = pos;\n+        return STUDY;\n+    }\n+\n+    private IAIState recess()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzMzU0Nw==", "bodyText": "jdoc", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404333547", "createdAt": "2020-04-06T19:25:45Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkTeacher.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.requestsystem.requestable.Stack;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+\n+public class EntityAIWorkTeacher extends AbstractEntityAIInteract<JobTeacher>\n+{\n+    /**\n+     * Qty of paper to request.\n+     */\n+    private static final int PAPER_TO_REQUEST = 16;\n+\n+    /**\n+     * To be requested by the teacher.\n+     */\n+    private final Predicate<ItemStack> PAPER = stack -> stack.getItem() == Items.PAPER;\n+\n+    /**\n+     * Area the worker targets.\n+     */\n+    private AxisAlignedBB targetArea = null;\n+\n+    /**\n+     * The next pupil to teach.\n+     */\n+    private AbstractEntityCitizen pupilToTeach;\n+\n+    /**\n+     * The max time to sit.\n+     */\n+    private int maxSittingTicks = 0;\n+\n+    /**\n+     * The current sitting time.\n+     */\n+    private int sittingTicks = 0;\n+\n+    /**\n+     * Constructor for the AI\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkTeacher(@NotNull final JobTeacher job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(DECIDE, this::decide, TICKS_SECOND),\n+          new AITarget(TEACH, this::teach, TICKS_SECOND)\n+        );\n+        worker.setCanPickUpLoot(true);\n+    }\n+\n+    /**\n+     * Decide what to do next.\n+     * @return the next state to go to.\n+     */\n+    private IAIState decide()\n+    {\n+        final int paperInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), PAPER);\n+        final int paperInInv = InventoryUtils.getItemCountInItemHandler((worker.getInventoryCitizen()), PAPER);\n+        if (paperInBuilding + paperInInv <= 0)\n+        {\n+            requestPaper();\n+        }\n+\n+        if (paperInInv == 0 && paperInBuilding > 0)\n+        {\n+            needsCurrently = PAPER;\n+            return GATHERING_REQUIRED_MATERIALS;\n+        }\n+\n+        final List<? extends AbstractEntityCitizen> pupils = world.getEntitiesWithinAABB(ModEntities.CITIZEN, getTargetableArea(), cit -> cit.isChild() && cit.ridingEntity != null && cit.getCitizenJobHandler().getColonyJob() instanceof JobPupil);\n+        if (pupils.size() > 0)\n+        {\n+            pupilToTeach = pupils.get(worker.getRandom().nextInt(pupils.size()));\n+            return TEACH;\n+        }\n+\n+        return START_WORKING;\n+    }\n+\n+\n+    private IAIState teach()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDMzNDI4Ng==", "bodyText": "how much is 1 Intelligence xp per second over a half day of school in int levels? not sure if its enough", "url": "https://github.com/ldtteam/minecolonies/pull/4585#discussion_r404334286", "createdAt": "2020-04-06T19:27:10Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/school/EntityAIWorkTeacher.java", "diffHunk": "@@ -0,0 +1,214 @@\n+package com.minecolonies.coremod.entity.ai.citizen.school;\n+\n+import com.minecolonies.api.colony.requestsystem.requestable.Stack;\n+import com.minecolonies.api.entity.ModEntities;\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingSchool;\n+import com.minecolonies.coremod.colony.jobs.JobPupil;\n+import com.minecolonies.coremod.colony.jobs.JobTeacher;\n+import com.minecolonies.coremod.entity.SittingEntity;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.List;\n+import java.util.function.Predicate;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+\n+public class EntityAIWorkTeacher extends AbstractEntityAIInteract<JobTeacher>\n+{\n+    /**\n+     * Qty of paper to request.\n+     */\n+    private static final int PAPER_TO_REQUEST = 16;\n+\n+    /**\n+     * To be requested by the teacher.\n+     */\n+    private final Predicate<ItemStack> PAPER = stack -> stack.getItem() == Items.PAPER;\n+\n+    /**\n+     * Area the worker targets.\n+     */\n+    private AxisAlignedBB targetArea = null;\n+\n+    /**\n+     * The next pupil to teach.\n+     */\n+    private AbstractEntityCitizen pupilToTeach;\n+\n+    /**\n+     * The max time to sit.\n+     */\n+    private int maxSittingTicks = 0;\n+\n+    /**\n+     * The current sitting time.\n+     */\n+    private int sittingTicks = 0;\n+\n+    /**\n+     * Constructor for the AI\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkTeacher(@NotNull final JobTeacher job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(DECIDE, this::decide, TICKS_SECOND),\n+          new AITarget(TEACH, this::teach, TICKS_SECOND)\n+        );\n+        worker.setCanPickUpLoot(true);\n+    }\n+\n+    /**\n+     * Decide what to do next.\n+     * @return the next state to go to.\n+     */\n+    private IAIState decide()\n+    {\n+        final int paperInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), PAPER);\n+        final int paperInInv = InventoryUtils.getItemCountInItemHandler((worker.getInventoryCitizen()), PAPER);\n+        if (paperInBuilding + paperInInv <= 0)\n+        {\n+            requestPaper();\n+        }\n+\n+        if (paperInInv == 0 && paperInBuilding > 0)\n+        {\n+            needsCurrently = PAPER;\n+            return GATHERING_REQUIRED_MATERIALS;\n+        }\n+\n+        final List<? extends AbstractEntityCitizen> pupils = world.getEntitiesWithinAABB(ModEntities.CITIZEN, getTargetableArea(), cit -> cit.isChild() && cit.ridingEntity != null && cit.getCitizenJobHandler().getColonyJob() instanceof JobPupil);\n+        if (pupils.size() > 0)\n+        {\n+            pupilToTeach = pupils.get(worker.getRandom().nextInt(pupils.size()));\n+            return TEACH;\n+        }\n+\n+        return START_WORKING;\n+    }\n+\n+\n+    private IAIState teach()\n+    {\n+        if (pupilToTeach == null || pupilToTeach.ridingEntity == null)\n+        {\n+            return START_WORKING;\n+        }\n+\n+        if (walkToBlock(pupilToTeach.getPosition()))\n+        {\n+            return getState();\n+        }\n+\n+        if (maxSittingTicks == 0 || worker.ridingEntity == null)\n+        {\n+            // Sit for 2-100 seconds.\n+            final int jobModifier = 100 / worker.getCitizenData().getJobModifier();\n+            maxSittingTicks = worker.getRandom().nextInt(jobModifier / 2) + jobModifier / 2;\n+\n+            final SittingEntity entity = (SittingEntity) ModEntities.SITTINGENTITY.create(world);\n+            entity.setPosition(worker.posX, worker.posY - 1f, worker.posZ);\n+            entity.setMaxLifeTime(maxSittingTicks * 20);\n+            world.addEntity(entity);\n+            worker.startRiding(entity);\n+            worker.getNavigator().clearPath();\n+        }\n+\n+        sittingTicks++;\n+        if (sittingTicks < maxSittingTicks)\n+        {\n+            return getState();\n+        }\n+\n+        if (worker.ridingEntity != null)\n+        {\n+            worker.stopRiding();\n+            worker.setPosition(worker.posX, worker.posY + 1, worker.posZ);\n+        }\n+\n+        final int slot = InventoryUtils.findFirstSlotInItemHandlerWith(worker.getInventoryCitizen(), PAPER);\n+        if (slot != -1)\n+        {\n+            InventoryUtils.transferXOfFirstSlotInItemHandlerWithIntoNextFreeSlotInItemHandler(\n+              worker.getInventoryCitizen(),\n+              PAPER,\n+              1, pupilToTeach.getInventoryCitizen()\n+            );\n+        }\n+\n+        pupilToTeach.getCitizenData().getCitizenSkillHandler().addXpToSkill(Skill.Intelligence, 1, pupilToTeach.getCitizenData());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b5bbf379cee1734f33957d40e8903679ae4d104"}, "originalPosition": 153}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dacd0c853123d8c096b0ef28cb04393b5e714e80", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/dacd0c853123d8c096b0ef28cb04393b5e714e80", "committedDate": "2020-04-06T19:56:33Z", "message": "fix jdoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de8d451ad8efd0d1b0b1d9fd6ed63a1edddc523c", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/de8d451ad8efd0d1b0b1d9fd6ed63a1edddc523c", "committedDate": "2020-04-06T20:07:48Z", "message": "fix limit to employ teacher too"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2178, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}