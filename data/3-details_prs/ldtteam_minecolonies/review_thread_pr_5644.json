{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMTQyNjE3", "number": 5644, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNToxNlrOEbVxtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyNTozOFrOEbV05A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzNzk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNToxNlrOHFO5jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNjoxN1rOHFO53g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTAzNw==", "bodyText": "might need some finals around here (final Set, final CustomRecipe, final IRecipeStorage final IToken)", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249037", "createdAt": "2020-08-23T18:15:16Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "diffHunk": "@@ -787,7 +789,70 @@ public boolean canEat(final ItemStack stack)\n      */\n     public void checkForWorkerSpecificRecipes()\n     {\n-        // Override if necessary.\n+        Set<CustomRecipe> staticRecipes = CustomRecipeManager.getInstance().getRecipes(getJobName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTExOA==", "bodyText": "Good point.", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249118", "createdAt": "2020-08-23T18:16:17Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "diffHunk": "@@ -787,7 +789,70 @@ public boolean canEat(final ItemStack stack)\n      */\n     public void checkForWorkerSpecificRecipes()\n     {\n-        // Override if necessary.\n+        Set<CustomRecipe> staticRecipes = CustomRecipeManager.getInstance().getRecipes(getJobName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTAzNw=="}, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzODYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNjoyMVrOHFO55w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNjoyMVrOHFO55w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTEyNw==", "bodyText": "formatting", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249127", "createdAt": "2020-08-23T18:16:21Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "diffHunk": "@@ -787,7 +789,70 @@ public boolean canEat(final ItemStack stack)\n      */\n     public void checkForWorkerSpecificRecipes()\n     {\n-        // Override if necessary.\n+        Set<CustomRecipe> staticRecipes = CustomRecipeManager.getInstance().getRecipes(getJobName());\n+\n+        for(CustomRecipe newRecipe : staticRecipes)\n+        {\n+            IRecipeStorage recipeStorage = newRecipe.getRecipeStorage();\n+            IToken<?> recipeToken = IColonyManager.getInstance().getRecipeManager().checkOrAddRecipe(recipeStorage);\n+\n+            if(newRecipe.isValidForColony(colony))\n+            {   \n+                boolean duplicateFound = false; \n+                for(IToken<?> token : recipes)\n+                {\n+                    if(token == recipeToken)\n+                    {\n+                        duplicateFound = true;\n+                        break;\n+                    }\n+                    final IRecipeStorage storage = IColonyManager.getInstance().getRecipeManager().getRecipes().get(token);\n+\n+                    //Let's verify that this recipe doesn't exist in an improved form\n+                    if(storage != null && storage.getPrimaryOutput().equals(recipeStorage.getPrimaryOutput(), true))\n+                    {\n+                        List<ItemStorage> storageInput = storage.getCleanedInput();\n+                        List<ItemStorage> recipeInput = recipeStorage.getCleanedInput();\n+\n+                        if(storageInput.size() != recipeInput.size())\n+                        {\n+                            continue;\n+                        }\n+                        \n+                        if(storageInput.size() > 1) {\n+                            storageInput.sort(Comparator.comparing(item -> item.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNjo0M1rOHFO6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNjo0M1rOHFO6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTE2Mw==", "bodyText": "maybe better recipeInput1 and recipeInput2", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249163", "createdAt": "2020-08-23T18:16:43Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "diffHunk": "@@ -787,7 +789,70 @@ public boolean canEat(final ItemStack stack)\n      */\n     public void checkForWorkerSpecificRecipes()\n     {\n-        // Override if necessary.\n+        Set<CustomRecipe> staticRecipes = CustomRecipeManager.getInstance().getRecipes(getJobName());\n+\n+        for(CustomRecipe newRecipe : staticRecipes)\n+        {\n+            IRecipeStorage recipeStorage = newRecipe.getRecipeStorage();\n+            IToken<?> recipeToken = IColonyManager.getInstance().getRecipeManager().checkOrAddRecipe(recipeStorage);\n+\n+            if(newRecipe.isValidForColony(colony))\n+            {   \n+                boolean duplicateFound = false; \n+                for(IToken<?> token : recipes)\n+                {\n+                    if(token == recipeToken)\n+                    {\n+                        duplicateFound = true;\n+                        break;\n+                    }\n+                    final IRecipeStorage storage = IColonyManager.getInstance().getRecipeManager().getRecipes().get(token);\n+\n+                    //Let's verify that this recipe doesn't exist in an improved form\n+                    if(storage != null && storage.getPrimaryOutput().equals(recipeStorage.getPrimaryOutput(), true))\n+                    {\n+                        List<ItemStorage> storageInput = storage.getCleanedInput();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzOTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxODowMFrOHFO6ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxODowMFrOHFO6ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTI1Mw==", "bodyText": "break?", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249253", "createdAt": "2020-08-23T18:18:00Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/AbstractBuildingWorker.java", "diffHunk": "@@ -787,7 +789,70 @@ public boolean canEat(final ItemStack stack)\n      */\n     public void checkForWorkerSpecificRecipes()\n     {\n-        // Override if necessary.\n+        Set<CustomRecipe> staticRecipes = CustomRecipeManager.getInstance().getRecipes(getJobName());\n+\n+        for(CustomRecipe newRecipe : staticRecipes)\n+        {\n+            IRecipeStorage recipeStorage = newRecipe.getRecipeStorage();\n+            IToken<?> recipeToken = IColonyManager.getInstance().getRecipeManager().checkOrAddRecipe(recipeStorage);\n+\n+            if(newRecipe.isValidForColony(colony))\n+            {   \n+                boolean duplicateFound = false; \n+                for(IToken<?> token : recipes)\n+                {\n+                    if(token == recipeToken)\n+                    {\n+                        duplicateFound = true;\n+                        break;\n+                    }\n+                    final IRecipeStorage storage = IColonyManager.getInstance().getRecipeManager().getRecipes().get(token);\n+\n+                    //Let's verify that this recipe doesn't exist in an improved form\n+                    if(storage != null && storage.getPrimaryOutput().equals(recipeStorage.getPrimaryOutput(), true))\n+                    {\n+                        List<ItemStorage> storageInput = storage.getCleanedInput();\n+                        List<ItemStorage> recipeInput = recipeStorage.getCleanedInput();\n+\n+                        if(storageInput.size() != recipeInput.size())\n+                        {\n+                            continue;\n+                        }\n+                        \n+                        if(storageInput.size() > 1) {\n+                            storageInput.sort(Comparator.comparing(item -> item.toString()));\n+                            recipeInput.sort(Comparator.comparing(item -> item.toString()));\n+                        }\n+\n+                        boolean allMatch = true;\n+                        for(int i=0; i<storageInput.size(); i++)\n+                        {\n+                            if(!storageInput.get(i).getItem().equals(recipeInput.get(i).getItem()))\n+                            {\n+                                allMatch = false;\n+                                break;\n+                            }\n+                        }\n+                        if(allMatch)\n+                        {\n+                            duplicateFound = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0MTUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipe.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMDoyM1rOHFO7Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMDoyM1rOHFO7Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTQ3NA==", "bodyText": "maybe call the property ones RECIPE_TYPE_PROP, so the next one doesn't have such a confusing name =D", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249474", "createdAt": "2020-08-23T18:20:23Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipe.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.research.effects.IResearchEffect;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.research.UnlockAbilityResearchEffect;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.registries.ForgeRegistries;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * This class represents a recipe loaded from custom data that is available to a crafter\n+ * but not to a player\n+ */\n+public class CustomRecipe\n+{\n+\n+    /**\n+     * The property name that indicates type for the recipe\n+     */\n+    public static final String RECIPE_TYPE = \"type\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0MjE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipe.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMDo1M1rOHFO7hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMDo1M1rOHFO7hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTU0Mw==", "bodyText": "formatting", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249543", "createdAt": "2020-08-23T18:20:53Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipe.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.research.effects.IResearchEffect;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.research.UnlockAbilityResearchEffect;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.registries.ForgeRegistries;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * This class represents a recipe loaded from custom data that is available to a crafter\n+ * but not to a player\n+ */\n+public class CustomRecipe\n+{\n+\n+    /**\n+     * The property name that indicates type for the recipe\n+     */\n+    public static final String RECIPE_TYPE = \"type\";\n+\n+    /**\n+     * The recipe type \n+     */\n+    public static final String RECIPE_TYPE_RECIPE = \"recipe\";\n+\n+    /**\n+     * The remove type \n+     */\n+    public static final String RECIPE_TYPE_REMOVE = \"remove\";\n+\n+    /**\n+     * The property name that indicates crafter type for the recipe\n+     */\n+    public static final String RECIPE_CRAFTER = \"crafter\";\n+\n+    /**\n+     * The property name for the inputs array\n+     */\n+    public static final String RECIPE_INPUTS = \"inputs\";\n+\n+    /**\n+     * The property name for the result item \n+     */\n+    public static final String RECIPE_RESULT = \"result\";\n+\n+    /**\n+     * The property name for Count, used both in inputs array and for result\n+     */\n+    public static final String COUNT = \"count\";\n+\n+    /**\n+     * The property name for the item id in the inputs array\n+     */\n+    public static final String ITEM = \"item\";\n+\n+    /**\n+     * The property name for the intermediate block ID\n+     */\n+    public static final String RECIPE_INTERMEDIATE = \"intermediate\";\n+\n+    /**\n+     * The property name for the required research id\n+     */\n+    public static final String RECIPE_RESEARCHID = \"research-id\";\n+\n+    /**\n+     * The property name for the research id that invalidates this recipe\n+     */\n+    public static final String RECIPE_EXCLUDED_RESEARCHID = \"not-research-id\";\n+\n+    /**\n+     * The crafter name for this instance, defaults to 'unknown'\n+     */\n+    private String crafter = \"unknown\";\n+\n+    /**\n+     * The recipe id for this instance, used for removal and lookup\n+     */\n+    private String recipeId = \"\";\n+\n+    private ArrayList<ItemStack> inputs = new ArrayList<>();\n+    private ItemStack result = null;\n+    private Block intermediate = Blocks.AIR;\n+\n+    private String researchId = null;\n+    private String excludedResearchId = null;\n+\n+\n+    /**\n+     * This class can only be created by the parse static\n+     */\n+    private CustomRecipe() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0Mjk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipe.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMTo1NFrOHFO77Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMTo1NFrOHFO77Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTY0NQ==", "bodyText": "final (also for input @NotNull final probably)", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249645", "createdAt": "2020-08-23T18:21:54Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipe.java", "diffHunk": "@@ -0,0 +1,232 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.requestsystem.StandardFactoryController;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.research.effects.IResearchEffect;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.research.UnlockAbilityResearchEffect;\n+\n+import net.minecraft.block.Block;\n+import net.minecraft.block.Blocks;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraftforge.registries.ForgeRegistries;\n+\n+import java.util.ArrayList;\n+\n+/**\n+ * This class represents a recipe loaded from custom data that is available to a crafter\n+ * but not to a player\n+ */\n+public class CustomRecipe\n+{\n+\n+    /**\n+     * The property name that indicates type for the recipe\n+     */\n+    public static final String RECIPE_TYPE = \"type\";\n+\n+    /**\n+     * The recipe type \n+     */\n+    public static final String RECIPE_TYPE_RECIPE = \"recipe\";\n+\n+    /**\n+     * The remove type \n+     */\n+    public static final String RECIPE_TYPE_REMOVE = \"remove\";\n+\n+    /**\n+     * The property name that indicates crafter type for the recipe\n+     */\n+    public static final String RECIPE_CRAFTER = \"crafter\";\n+\n+    /**\n+     * The property name for the inputs array\n+     */\n+    public static final String RECIPE_INPUTS = \"inputs\";\n+\n+    /**\n+     * The property name for the result item \n+     */\n+    public static final String RECIPE_RESULT = \"result\";\n+\n+    /**\n+     * The property name for Count, used both in inputs array and for result\n+     */\n+    public static final String COUNT = \"count\";\n+\n+    /**\n+     * The property name for the item id in the inputs array\n+     */\n+    public static final String ITEM = \"item\";\n+\n+    /**\n+     * The property name for the intermediate block ID\n+     */\n+    public static final String RECIPE_INTERMEDIATE = \"intermediate\";\n+\n+    /**\n+     * The property name for the required research id\n+     */\n+    public static final String RECIPE_RESEARCHID = \"research-id\";\n+\n+    /**\n+     * The property name for the research id that invalidates this recipe\n+     */\n+    public static final String RECIPE_EXCLUDED_RESEARCHID = \"not-research-id\";\n+\n+    /**\n+     * The crafter name for this instance, defaults to 'unknown'\n+     */\n+    private String crafter = \"unknown\";\n+\n+    /**\n+     * The recipe id for this instance, used for removal and lookup\n+     */\n+    private String recipeId = \"\";\n+\n+    private ArrayList<ItemStack> inputs = new ArrayList<>();\n+    private ItemStack result = null;\n+    private Block intermediate = Blocks.AIR;\n+\n+    private String researchId = null;\n+    private String excludedResearchId = null;\n+\n+\n+    /**\n+     * This class can only be created by the parse static\n+     */\n+    private CustomRecipe() {\n+\n+    }\n+    \n+    /**\n+     * Parse a Json object into a Custom recipe\n+     * @param recipeJson the json representing the recipe\n+     * @return new instance of CustomRecipe\n+     */\n+    public static CustomRecipe parse(JsonObject recipeJson)\n+    {\n+        CustomRecipe recipe = new CustomRecipe();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0MzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMjo1NFrOHFO8TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMjo1NFrOHFO8TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTc0MA==", "bodyText": "jdoc on fields too", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249740", "createdAt": "2020-08-23T18:22:54Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import com.google.gson.JsonObject;\n+\n+import static com.minecolonies.coremod.colony.crafting.CustomRecipe.*;\n+\n+/**\n+ * Manager class for tracking Custom recipes during load and use\n+ * This class is a singleton\n+ */\n+public class CustomRecipeManager\n+{\n+    private static CustomRecipeManager instance = new CustomRecipeManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0Mzk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMzowOVrOHFO8XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxOTowMToxM1rOHFPKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTc1Ng==", "bodyText": "@NotNull final", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249756", "createdAt": "2020-08-23T18:23:09Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import com.google.gson.JsonObject;\n+\n+import static com.minecolonies.coremod.colony.crafting.CustomRecipe.*;\n+\n+/**\n+ * Manager class for tracking Custom recipes during load and use\n+ * This class is a singleton\n+ */\n+public class CustomRecipeManager\n+{\n+    private static CustomRecipeManager instance = new CustomRecipeManager();\n+    private HashMap<String, HashMap<String, CustomRecipe>> recipeMap = new HashMap<>();\n+\n+    private CustomRecipeManager()\n+    {\n+    }\n+        \n+    /**\n+     * Get the singleton instance of this class\n+     * @return\n+     */\n+    public static CustomRecipeManager getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    /**\n+     * Add a recipe Json to the manager\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void addRecipe(JsonObject recipeJson, String namespace, String path)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTg0Nw==", "bodyText": "Since I'm not sure what namespace here means, it might need a better explanation in the javadoc", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249847", "createdAt": "2020-08-23T18:24:01Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import com.google.gson.JsonObject;\n+\n+import static com.minecolonies.coremod.colony.crafting.CustomRecipe.*;\n+\n+/**\n+ * Manager class for tracking Custom recipes during load and use\n+ * This class is a singleton\n+ */\n+public class CustomRecipeManager\n+{\n+    private static CustomRecipeManager instance = new CustomRecipeManager();\n+    private HashMap<String, HashMap<String, CustomRecipe>> recipeMap = new HashMap<>();\n+\n+    private CustomRecipeManager()\n+    {\n+    }\n+        \n+    /**\n+     * Get the singleton instance of this class\n+     * @return\n+     */\n+    public static CustomRecipeManager getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    /**\n+     * Add a recipe Json to the manager\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void addRecipe(JsonObject recipeJson, String namespace, String path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTc1Ng=="}, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTg5OQ==", "bodyText": "If it's like a ResourceLocation, why don't we use a ResourceLocation here?", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249899", "createdAt": "2020-08-23T18:24:28Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import com.google.gson.JsonObject;\n+\n+import static com.minecolonies.coremod.colony.crafting.CustomRecipe.*;\n+\n+/**\n+ * Manager class for tracking Custom recipes during load and use\n+ * This class is a singleton\n+ */\n+public class CustomRecipeManager\n+{\n+    private static CustomRecipeManager instance = new CustomRecipeManager();\n+    private HashMap<String, HashMap<String, CustomRecipe>> recipeMap = new HashMap<>();\n+\n+    private CustomRecipeManager()\n+    {\n+    }\n+        \n+    /**\n+     * Get the singleton instance of this class\n+     * @return\n+     */\n+    public static CustomRecipeManager getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    /**\n+     * Add a recipe Json to the manager\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void addRecipe(JsonObject recipeJson, String namespace, String path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTc1Ng=="}, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MTExOA==", "bodyText": "I'm investigating", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475251118", "createdAt": "2020-08-23T18:37:29Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import com.google.gson.JsonObject;\n+\n+import static com.minecolonies.coremod.colony.crafting.CustomRecipe.*;\n+\n+/**\n+ * Manager class for tracking Custom recipes during load and use\n+ * This class is a singleton\n+ */\n+public class CustomRecipeManager\n+{\n+    private static CustomRecipeManager instance = new CustomRecipeManager();\n+    private HashMap<String, HashMap<String, CustomRecipe>> recipeMap = new HashMap<>();\n+\n+    private CustomRecipeManager()\n+    {\n+    }\n+        \n+    /**\n+     * Get the singleton instance of this class\n+     * @return\n+     */\n+    public static CustomRecipeManager getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    /**\n+     * Add a recipe Json to the manager\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void addRecipe(JsonObject recipeJson, String namespace, String path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTc1Ng=="}, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MzMyNg==", "bodyText": "Ok.Switching.", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475253326", "createdAt": "2020-08-23T19:01:13Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import com.google.gson.JsonObject;\n+\n+import static com.minecolonies.coremod.colony.crafting.CustomRecipe.*;\n+\n+/**\n+ * Manager class for tracking Custom recipes during load and use\n+ * This class is a singleton\n+ */\n+public class CustomRecipeManager\n+{\n+    private static CustomRecipeManager instance = new CustomRecipeManager();\n+    private HashMap<String, HashMap<String, CustomRecipe>> recipeMap = new HashMap<>();\n+\n+    private CustomRecipeManager()\n+    {\n+    }\n+        \n+    /**\n+     * Get the singleton instance of this class\n+     * @return\n+     */\n+    public static CustomRecipeManager getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    /**\n+     * Add a recipe Json to the manager\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void addRecipe(JsonObject recipeJson, String namespace, String path)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTc1Ng=="}, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0NTUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyNDo1M1rOHFO9FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxOTowMToyMVrOHFPKYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTk0MQ==", "bodyText": "I think in general we might be able to simplify a lot of this using a resource location =D", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475249941", "createdAt": "2020-08-23T18:24:53Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import com.google.gson.JsonObject;\n+\n+import static com.minecolonies.coremod.colony.crafting.CustomRecipe.*;\n+\n+/**\n+ * Manager class for tracking Custom recipes during load and use\n+ * This class is a singleton\n+ */\n+public class CustomRecipeManager\n+{\n+    private static CustomRecipeManager instance = new CustomRecipeManager();\n+    private HashMap<String, HashMap<String, CustomRecipe>> recipeMap = new HashMap<>();\n+\n+    private CustomRecipeManager()\n+    {\n+    }\n+        \n+    /**\n+     * Get the singleton instance of this class\n+     * @return\n+     */\n+    public static CustomRecipeManager getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    /**\n+     * Add a recipe Json to the manager\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void addRecipe(JsonObject recipeJson, String namespace, String path)\n+    {\n+        CustomRecipe recipe = CustomRecipe.parse(recipeJson);\n+        recipe.setRecipeId(namespace + \":\" + path);\n+\n+        if(!recipeMap.containsKey(recipe.getCrafter()))\n+        {\n+            recipeMap.put(recipe.getCrafter(), new HashMap<>());\n+        }\n+        recipeMap.get(recipe.getCrafter()).put(recipe.getRecipeId(), recipe);\n+    }\n+\n+    /**\n+     * Remove a recipe from the manager\n+     * This allows modpacks to remove 'bad' recipes in addition to adding good ones\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void removeRecipe(JsonObject recipeJson, String namespace, String path)\n+    {\n+        final String id = namespace + \":\" + path;\n+        if (recipeJson.has(RECIPE_TYPE) && recipeJson.get(RECIPE_TYPE).getAsString().equals(\"remove\") && recipeJson.has(\"recipe-id-to-remove\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDM2MA==", "bodyText": "Possibly. I thought about that, I'm not entirely convinced.", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475250360", "createdAt": "2020-08-23T18:29:38Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import com.google.gson.JsonObject;\n+\n+import static com.minecolonies.coremod.colony.crafting.CustomRecipe.*;\n+\n+/**\n+ * Manager class for tracking Custom recipes during load and use\n+ * This class is a singleton\n+ */\n+public class CustomRecipeManager\n+{\n+    private static CustomRecipeManager instance = new CustomRecipeManager();\n+    private HashMap<String, HashMap<String, CustomRecipe>> recipeMap = new HashMap<>();\n+\n+    private CustomRecipeManager()\n+    {\n+    }\n+        \n+    /**\n+     * Get the singleton instance of this class\n+     * @return\n+     */\n+    public static CustomRecipeManager getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    /**\n+     * Add a recipe Json to the manager\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void addRecipe(JsonObject recipeJson, String namespace, String path)\n+    {\n+        CustomRecipe recipe = CustomRecipe.parse(recipeJson);\n+        recipe.setRecipeId(namespace + \":\" + path);\n+\n+        if(!recipeMap.containsKey(recipe.getCrafter()))\n+        {\n+            recipeMap.put(recipe.getCrafter(), new HashMap<>());\n+        }\n+        recipeMap.get(recipe.getCrafter()).put(recipe.getRecipeId(), recipe);\n+    }\n+\n+    /**\n+     * Remove a recipe from the manager\n+     * This allows modpacks to remove 'bad' recipes in addition to adding good ones\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void removeRecipe(JsonObject recipeJson, String namespace, String path)\n+    {\n+        final String id = namespace + \":\" + path;\n+        if (recipeJson.has(RECIPE_TYPE) && recipeJson.get(RECIPE_TYPE).getAsString().equals(\"remove\") && recipeJson.has(\"recipe-id-to-remove\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTk0MQ=="}, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MzM0Ng==", "bodyText": "Switching", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475253346", "createdAt": "2020-08-23T19:01:21Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipeManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.colony.crafting;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+import com.google.gson.JsonObject;\n+\n+import static com.minecolonies.coremod.colony.crafting.CustomRecipe.*;\n+\n+/**\n+ * Manager class for tracking Custom recipes during load and use\n+ * This class is a singleton\n+ */\n+public class CustomRecipeManager\n+{\n+    private static CustomRecipeManager instance = new CustomRecipeManager();\n+    private HashMap<String, HashMap<String, CustomRecipe>> recipeMap = new HashMap<>();\n+\n+    private CustomRecipeManager()\n+    {\n+    }\n+        \n+    /**\n+     * Get the singleton instance of this class\n+     * @return\n+     */\n+    public static CustomRecipeManager getInstance()\n+    {\n+        return instance;\n+    }\n+\n+    /**\n+     * Add a recipe Json to the manager\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void addRecipe(JsonObject recipeJson, String namespace, String path)\n+    {\n+        CustomRecipe recipe = CustomRecipe.parse(recipeJson);\n+        recipe.setRecipeId(namespace + \":\" + path);\n+\n+        if(!recipeMap.containsKey(recipe.getCrafter()))\n+        {\n+            recipeMap.put(recipe.getCrafter(), new HashMap<>());\n+        }\n+        recipeMap.get(recipe.getCrafter()).put(recipe.getRecipeId(), recipe);\n+    }\n+\n+    /**\n+     * Remove a recipe from the manager\n+     * This allows modpacks to remove 'bad' recipes in addition to adding good ones\n+     * @param recipeJson\n+     * @param namespace\n+     * @param path\n+     */\n+    public void removeRecipe(JsonObject recipeJson, String namespace, String path)\n+    {\n+        final String id = namespace + \":\" + path;\n+        if (recipeJson.has(RECIPE_TYPE) && recipeJson.get(RECIPE_TYPE).getAsString().equals(\"remove\") && recipeJson.has(\"recipe-id-to-remove\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTk0MQ=="}, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0NjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/event/FMLEventHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyNTozOFrOHFO9Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODozMDozNFrOHFO_JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDAxNQ==", "bodyText": "can be straight getResourceManager().add for now I guess", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475250015", "createdAt": "2020-08-23T18:25:38Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/event/FMLEventHandler.java", "diffHunk": "@@ -51,6 +54,14 @@ public static void onPlayerLogin(@NotNull final PlayerEvent.PlayerLoggedInEvent\n         }\n     }\n \n+    @SubscribeEvent\n+    public static void onServerAboutToStart(FMLServerAboutToStartEvent event)\n+    {\n+        IReloadableResourceManager resourceManager = event.getServer().getResourceManager();\n+\n+        resourceManager.addReloadListener(new CrafterRecipeListener());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDQ2OQ==", "bodyText": "It can, I was setting up for future types.", "url": "https://github.com/ldtteam/minecolonies/pull/5644#discussion_r475250469", "createdAt": "2020-08-23T18:30:34Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/event/FMLEventHandler.java", "diffHunk": "@@ -51,6 +54,14 @@ public static void onPlayerLogin(@NotNull final PlayerEvent.PlayerLoggedInEvent\n         }\n     }\n \n+    @SubscribeEvent\n+    public static void onServerAboutToStart(FMLServerAboutToStartEvent event)\n+    {\n+        IReloadableResourceManager resourceManager = event.getServer().getResourceManager();\n+\n+        resourceManager.addReloadListener(new CrafterRecipeListener());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDAxNQ=="}, "originalCommit": {"oid": "42b70b383278867cbdaa29f9fa779a084a4025fd"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3436, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}