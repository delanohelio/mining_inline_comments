{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNDM2MzE5", "number": 5896, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTo0MDo0N1rOEr-jzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNToxNjowN1rOEsF-rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTQ5MTk2OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTo0MDo0N1rOHfCqPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNToyMDoxOFrOHfOaFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxMTQ4Ng==", "bodyText": "So question, could we make this throw an exception in dev, but simply log an error in prod?\njust so we don't get crashes at least during prod if it's somehow missed in dev.\notherwise looks great", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502311486", "createdAt": "2020-10-09T09:40:47Z", "author": {"login": "Asherslab"}, "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.crafting;\n+\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Immutable ItemStorage version.\n+ */\n+public class ImmutableItemStorage extends ItemStorage\n+{\n+    /**\n+     * Creates an instance of the storage.\n+     *\n+     * @param storage the mutable itemstorage to create it from.\n+     */\n+    public ImmutableItemStorage(@NotNull final ItemStorage storage)\n+    {\n+        super(storage.getItemStack(), storage.ignoreDamageValue(), storage.ignoreNBT());\n+        super.setAmount(storage.getAmount());\n+    }\n+\n+    @Override\n+    public void setAmount(final int amount)\n+    {\n+        throw new UnsupportedOperationException(\"Immutable instance of ItemStorage can't set value!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5OTY2MQ==", "bodyText": "I actually do want it to crash \"for now\". If this here happens there would've been data corruption and just logging could potentially result in infinite loops and stackoverflow.", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502399661", "createdAt": "2020-10-09T12:42:11Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.crafting;\n+\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Immutable ItemStorage version.\n+ */\n+public class ImmutableItemStorage extends ItemStorage\n+{\n+    /**\n+     * Creates an instance of the storage.\n+     *\n+     * @param storage the mutable itemstorage to create it from.\n+     */\n+    public ImmutableItemStorage(@NotNull final ItemStorage storage)\n+    {\n+        super(storage.getItemStack(), storage.ignoreDamageValue(), storage.ignoreNBT());\n+        super.setAmount(storage.getAmount());\n+    }\n+\n+    @Override\n+    public void setAmount(final int amount)\n+    {\n+        throw new UnsupportedOperationException(\"Immutable instance of ItemStorage can't set value!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxMTQ4Ng=="}, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5OTkzMw==", "bodyText": "To be clear, this is 'corruption' is in-memory only, at least in the scenarios we've seen so far, since it's been on non-persisted ItemStorages. Correct?", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502499933", "createdAt": "2020-10-09T15:13:48Z", "author": {"login": "Mekle001"}, "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.crafting;\n+\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Immutable ItemStorage version.\n+ */\n+public class ImmutableItemStorage extends ItemStorage\n+{\n+    /**\n+     * Creates an instance of the storage.\n+     *\n+     * @param storage the mutable itemstorage to create it from.\n+     */\n+    public ImmutableItemStorage(@NotNull final ItemStorage storage)\n+    {\n+        super(storage.getItemStack(), storage.ignoreDamageValue(), storage.ignoreNBT());\n+        super.setAmount(storage.getAmount());\n+    }\n+\n+    @Override\n+    public void setAmount(final int amount)\n+    {\n+        throw new UnsupportedOperationException(\"Immutable instance of ItemStorage can't set value!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxMTQ4Ng=="}, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMjg5Mw==", "bodyText": "Yes, the problem is that if we don't increase the count here, but loop over this and use the count in a loop, this would be an infinite loop. I want to prevent that chance.", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502502893", "createdAt": "2020-10-09T15:18:37Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.crafting;\n+\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Immutable ItemStorage version.\n+ */\n+public class ImmutableItemStorage extends ItemStorage\n+{\n+    /**\n+     * Creates an instance of the storage.\n+     *\n+     * @param storage the mutable itemstorage to create it from.\n+     */\n+    public ImmutableItemStorage(@NotNull final ItemStorage storage)\n+    {\n+        super(storage.getItemStack(), storage.ignoreDamageValue(), storage.ignoreNBT());\n+        super.setAmount(storage.getAmount());\n+    }\n+\n+    @Override\n+    public void setAmount(final int amount)\n+    {\n+        throw new UnsupportedOperationException(\"Immutable instance of ItemStorage can't set value!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxMTQ4Ng=="}, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMzk1OQ==", "bodyText": "Understood, and agreed.", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502503959", "createdAt": "2020-10-09T15:20:18Z", "author": {"login": "Mekle001"}, "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.crafting;\n+\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Immutable ItemStorage version.\n+ */\n+public class ImmutableItemStorage extends ItemStorage\n+{\n+    /**\n+     * Creates an instance of the storage.\n+     *\n+     * @param storage the mutable itemstorage to create it from.\n+     */\n+    public ImmutableItemStorage(@NotNull final ItemStorage storage)\n+    {\n+        super(storage.getItemStack(), storage.ignoreDamageValue(), storage.ignoreNBT());\n+        super.setAmount(storage.getAmount());\n+    }\n+\n+    @Override\n+    public void setAmount(final int amount)\n+    {\n+        throw new UnsupportedOperationException(\"Immutable instance of ItemStorage can't set value!\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMxMTQ4Ng=="}, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTk1MzUxOnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMjoxMTozN1rOHfHEcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNToxOTo1MVrOHfOY3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MzcyOQ==", "bodyText": "its nice that the setamount can now be immutable, but wasnt the most common problem that the internal stack got modified? which we still can do with this version. should we maybe make an ItemStack wrapper for that case?", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502383729", "createdAt": "2020-10-09T12:11:37Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.crafting;\n+\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Immutable ItemStorage version.\n+ */\n+public class ImmutableItemStorage extends ItemStorage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM5NTY5NQ==", "bodyText": "The actual problems I fixed were that the count of this storage were changed. I did check into ItemStack wrappers, but then thought that would become an overkill. It's because on creating a new ItemStack we gotta copy the old one, which needs to go in the constructor of the itemStack which itself calls the capability events which can be very slow if mods mess it up.", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502395695", "createdAt": "2020-10-09T12:34:48Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.crafting;\n+\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Immutable ItemStorage version.\n+ */\n+public class ImmutableItemStorage extends ItemStorage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MzcyOQ=="}, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ5ODk4MQ==", "bodyText": "I know we'd talked about possibly doing some corruption checks on the retrieval of the item stack from the ItemStorage. It should be as simple as checking that if the amount is less than maxstack, the count == amount, etc..\nAt least then we'd have early warning that the internal stack was getting modified when it shouldn't be.", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502498981", "createdAt": "2020-10-09T15:12:16Z", "author": {"login": "Mekle001"}, "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.crafting;\n+\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Immutable ItemStorage version.\n+ */\n+public class ImmutableItemStorage extends ItemStorage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MzcyOQ=="}, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMzY0NQ==", "bodyText": "I was thinking about easy ways to detecting it, but couldn't find any easy way that couldn't break in valid cases.", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502503645", "createdAt": "2020-10-09T15:19:51Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/crafting/ImmutableItemStorage.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.api.crafting;\n+\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Immutable ItemStorage version.\n+ */\n+public class ImmutableItemStorage extends ItemStorage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM4MzcyOQ=="}, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjcwNzY1OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/crafting/RecipeStorage.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNToxNjowN1rOHfOQOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNToxNjowN1rOHfOQOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjUwMTQzMg==", "bodyText": "I get why you're doing this, and overall I love this change. I'm not looking forward to the merge conflict with my version that adds multiple outputs and predetermined secondary outputs based asking the IRecipe for them, etc.", "url": "https://github.com/ldtteam/minecolonies/pull/5896#discussion_r502501432", "createdAt": "2020-10-09T15:16:07Z", "author": {"login": "Mekle001"}, "path": "src/api/java/com/minecolonies/api/crafting/RecipeStorage.java", "diffHunk": "@@ -137,22 +149,23 @@ public boolean canFullFillRecipe(final int qty, @NotNull final IItemHandler... i\n         final int neededMultiplier = CraftingUtils.calculateMaxCraftingCount(qty, this);\n         final List<ItemStorage> items = getCleanedInput();\n \n-        for (final ItemStorage stack : items)\n+        for (final ItemStorage storage : items)\n         {\n+            final ItemStack stack = storage.getItemStack();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4cfadee92f5a951829a4caddaa348d1548ff0797"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3332, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}