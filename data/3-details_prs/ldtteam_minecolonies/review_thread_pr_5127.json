{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjcyODEz", "number": 5127, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNDo1OFrOEDRHWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODo1MTo1MFrOEHYYCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxNTk0OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/entity/ai/statemachine/states/AIWorkerState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNDo1OFrOGgMKKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjo1Mzo1OVrOGgRL4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNjgyNQ==", "bodyText": "Wrong jdoc", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436406825", "createdAt": "2020-06-07T22:14:58Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/entity/ai/statemachine/states/AIWorkerState.java", "diffHunk": "@@ -533,7 +533,12 @@\n      */\n     PLANTATION_FARM(true),\n \n-    PLANTATION_PLANT(true);\n+    PLANTATION_PLANT(true),\n+\n+    /*\n+### Plantation related ###\n+     */\n+    BEEKEEPER_HARVEST(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4OTE4NQ==", "bodyText": "oops", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436489185", "createdAt": "2020-06-08T06:53:59Z", "author": {"login": "Minecraftschurli"}, "path": "src/api/java/com/minecolonies/api/entity/ai/statemachine/states/AIWorkerState.java", "diffHunk": "@@ -533,7 +533,12 @@\n      */\n     PLANTATION_FARM(true),\n \n-    PLANTATION_PLANT(true);\n+    PLANTATION_PLANT(true),\n+\n+    /*\n+### Plantation related ###\n+     */\n+    BEEKEEPER_HARVEST(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNjgyNQ=="}, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxNjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/blocks/huts/BlockHutBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNTo0MlrOGgMKWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNTo0MlrOGgMKWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNjg3Mg==", "bodyText": "formatting is off", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436406872", "createdAt": "2020-06-07T22:15:42Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/blocks/huts/BlockHutBeekeeper.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.minecolonies.coremod.blocks.huts;\n+\n+import com.minecolonies.api.blocks.AbstractBlockHut;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+\n+public class BlockHutBeekeeper extends AbstractBlockHut<BlockHutBeekeeper> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxNjc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNjozOFrOGgMKlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNjozOFrOGgMKlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNjkzMg==", "bodyText": "NBTtag constant class please", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436406932", "createdAt": "2020-06-07T22:16:38Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.client.gui.WindowHutBeekeeper;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.network.messages.server.colony.building.beekeeper.BeekeeperSetHarvestHoneycombsMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+public class BuildingBeekeeper extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String BEEKEEPER = \"beekeeper\";\n+\n+    private static final String TAG_HIVES              = \"hives\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxNjkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNjo0N1rOGgMKpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNjo0N1rOGgMKpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNjk0OQ==", "bodyText": "jdoc missing", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436406949", "createdAt": "2020-06-07T22:16:47Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.client.gui.WindowHutBeekeeper;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.network.messages.server.colony.building.beekeeper.BeekeeperSetHarvestHoneycombsMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+public class BuildingBeekeeper extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String BEEKEEPER = \"beekeeper\";\n+\n+    private static final String TAG_HIVES              = \"hives\";\n+    private static final String TAG_HARVEST_HONEYCOMBS = \"harvest_honeycombs\";\n+\n+    /**\n+     * List of hives.\n+     */\n+    private Set<BlockPos> hives             = new HashSet<>();\n+    private boolean       harvestHoneycombs = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxNzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNzozNVrOGgMK3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxNzozNVrOGgMK3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzAwNw==", "bodyText": "I don't think the worker needs any recipes", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436407007", "createdAt": "2020-06-07T22:17:35Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.client.gui.WindowHutBeekeeper;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.network.messages.server.colony.building.beekeeper.BeekeeperSetHarvestHoneycombsMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+public class BuildingBeekeeper extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String BEEKEEPER = \"beekeeper\";\n+\n+    private static final String TAG_HIVES              = \"hives\";\n+    private static final String TAG_HARVEST_HONEYCOMBS = \"harvest_honeycombs\";\n+\n+    /**\n+     * List of hives.\n+     */\n+    private Set<BlockPos> hives             = new HashSet<>();\n+    private boolean       harvestHoneycombs = true;\n+\n+    /**\n+     * The abstract constructor of the building.\n+     *\n+     * @param c the colony\n+     * @param l the position\n+     */\n+    public BuildingBeekeeper(@NotNull IColony c, BlockPos l)\n+    {\n+        super(c, l);\n+        keepX.put(stack -> Items.SHEARS == stack.getItem(), new Tuple<>(1, true));\n+        keepX.put(stack -> Items.GLASS_BOTTLE == stack.getItem(), new Tuple<>(4, true));\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(ICitizenData citizen)\n+    {\n+        return new JobBeekeeper(citizen);\n+    }\n+\n+    /**\n+     * The abstract method which returns the name of the job.\n+     *\n+     * @return the job name.\n+     */\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return BEEKEEPER;\n+    }\n+\n+    /**\n+     * Primary skill getter.\n+     *\n+     * @return the primary skill.\n+     */\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Stamina; //TODO\n+    }\n+\n+    /**\n+     * Secondary skill getter.\n+     *\n+     * @return the secondary skill.\n+     */\n+    @NotNull\n+    @Override\n+    public Skill getSecondarySkill()\n+    {\n+        return Skill.Focus; //TODO\n+    }\n+\n+    @Override\n+    public BuildingEntry getBuildingRegistryEntry()\n+    {\n+        return ModBuildings.beekeeper;\n+    }\n+\n+    /**\n+     * Children must return the name of their structure.\n+     *\n+     * @return StructureProxy name.\n+     */\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return BEEKEEPER;\n+    }\n+\n+    /**\n+     * Children must return their max building level.\n+     *\n+     * @return Max building level.\n+     */\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+    }\n+\n+    @Override\n+    public void deserializeNBT(CompoundNBT compound)\n+    {\n+        super.deserializeNBT(compound);\n+        NBTUtils.streamCompound(compound.getList(TAG_HIVES, Constants.NBT.TAG_COMPOUND))\n+          .map(NBTUtil::readBlockPos)\n+          .forEach(this.hives::add);\n+        this.harvestHoneycombs = compound.getBoolean(TAG_HARVEST_HONEYCOMBS);\n+    }\n+\n+    @Override\n+    public CompoundNBT serializeNBT()\n+    {\n+        final CompoundNBT nbt = super.serializeNBT();\n+        nbt.put(TAG_HIVES, this.hives.stream().map(NBTUtil::writeBlockPos).collect(NBTUtils.toListNBT()));\n+        nbt.putBoolean(TAG_HARVEST_HONEYCOMBS, this.harvestHoneycombs);\n+        return nbt;\n+    }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxNzU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxODowMVrOGgMK_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxODowMVrOGgMK_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzAzNw==", "bodyText": "@OverRide for overriden methods, else javadoc", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436407037", "createdAt": "2020-06-07T22:18:01Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.crafting.IRecipeStorage;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.client.gui.WindowHutBeekeeper;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.network.messages.server.colony.building.beekeeper.BeekeeperSetHarvestHoneycombsMessage;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+public class BuildingBeekeeper extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String BEEKEEPER = \"beekeeper\";\n+\n+    private static final String TAG_HIVES              = \"hives\";\n+    private static final String TAG_HARVEST_HONEYCOMBS = \"harvest_honeycombs\";\n+\n+    /**\n+     * List of hives.\n+     */\n+    private Set<BlockPos> hives             = new HashSet<>();\n+    private boolean       harvestHoneycombs = true;\n+\n+    /**\n+     * The abstract constructor of the building.\n+     *\n+     * @param c the colony\n+     * @param l the position\n+     */\n+    public BuildingBeekeeper(@NotNull IColony c, BlockPos l)\n+    {\n+        super(c, l);\n+        keepX.put(stack -> Items.SHEARS == stack.getItem(), new Tuple<>(1, true));\n+        keepX.put(stack -> Items.GLASS_BOTTLE == stack.getItem(), new Tuple<>(4, true));\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(ICitizenData citizen)\n+    {\n+        return new JobBeekeeper(citizen);\n+    }\n+\n+    /**\n+     * The abstract method which returns the name of the job.\n+     *\n+     * @return the job name.\n+     */\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return BEEKEEPER;\n+    }\n+\n+    /**\n+     * Primary skill getter.\n+     *\n+     * @return the primary skill.\n+     */\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Stamina; //TODO\n+    }\n+\n+    /**\n+     * Secondary skill getter.\n+     *\n+     * @return the secondary skill.\n+     */\n+    @NotNull\n+    @Override\n+    public Skill getSecondarySkill()\n+    {\n+        return Skill.Focus; //TODO\n+    }\n+\n+    @Override\n+    public BuildingEntry getBuildingRegistryEntry()\n+    {\n+        return ModBuildings.beekeeper;\n+    }\n+\n+    /**\n+     * Children must return the name of their structure.\n+     *\n+     * @return StructureProxy name.\n+     */\n+    @Override\n+    public String getSchematicName()\n+    {\n+        return BEEKEEPER;\n+    }\n+\n+    /**\n+     * Children must return their max building level.\n+     *\n+     * @return Max building level.\n+     */\n+    @Override\n+    public int getMaxBuildingLevel()\n+    {\n+        return CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+    }\n+\n+    @Override\n+    public void deserializeNBT(CompoundNBT compound)\n+    {\n+        super.deserializeNBT(compound);\n+        NBTUtils.streamCompound(compound.getList(TAG_HIVES, Constants.NBT.TAG_COMPOUND))\n+          .map(NBTUtil::readBlockPos)\n+          .forEach(this.hives::add);\n+        this.harvestHoneycombs = compound.getBoolean(TAG_HARVEST_HONEYCOMBS);\n+    }\n+\n+    @Override\n+    public CompoundNBT serializeNBT()\n+    {\n+        final CompoundNBT nbt = super.serializeNBT();\n+        nbt.put(TAG_HIVES, this.hives.stream().map(NBTUtil::writeBlockPos).collect(NBTUtils.toListNBT()));\n+        nbt.putBoolean(TAG_HARVEST_HONEYCOMBS, this.harvestHoneycombs);\n+        return nbt;\n+    }\n+\n+    @Override\n+    public boolean canRecipeBeAdded(IToken token)\n+    {\n+        if (!super.canRecipeBeAdded(token))\n+        {\n+            return false;\n+        }\n+\n+        final IRecipeStorage storage = IColonyManager.getInstance().getRecipeManager().getRecipes().get(token);\n+        if (storage == null)\n+        {\n+            return false;\n+        }\n+\n+        return storage.getInput()\n+                 .stream()\n+                 .map(ItemStack::getItem)\n+                 .anyMatch(item -> item == Items.HONEYCOMB || item == Items.HONEY_BOTTLE) ||\n+                storage.getPrimaryOutput().getItem() == Items.HONEY_BOTTLE ||\n+                storage.getPrimaryOutput().getItem() == Items.HONEYCOMB;\n+    }\n+\n+    @Override\n+    public void serializeToView(@NotNull final PacketBuffer buf)\n+    {\n+        super.serializeToView(buf);\n+        buf.writeBoolean(harvestHoneycombs);\n+    }\n+\n+    public Set<BlockPos> getHives()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxNzc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/jobs/JobBeekeeper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxODoyNVrOGgMLFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxMjoyMlrOGggjfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzA2MQ==", "bodyText": "not needed if empty", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436407061", "createdAt": "2020-06-07T22:18:25Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/jobs/JobBeekeeper.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.minecolonies.coremod.colony.jobs;\n+\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.jobs.ModJobs;\n+import com.minecolonies.api.colony.jobs.registry.JobEntry;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractAISkeleton;\n+import com.minecolonies.coremod.entity.ai.citizen.beekeeper.EntityAIWorkBeekeeper;\n+import net.minecraft.nbt.INBT;\n+\n+public class JobBeekeeper extends AbstractJob\n+{\n+    /**\n+     * Initialize citizen data.\n+     *\n+     * @param entity the citizen data.\n+     */\n+    public JobBeekeeper(ICitizenData entity)\n+    {\n+        super(entity);\n+    }\n+\n+    /**\n+     * The {@link JobEntry} for this job.\n+     *\n+     * @return The {@link JobEntry}.\n+     */\n+    @Override\n+    public JobEntry getJobRegistryEntry()\n+    {\n+        return ModJobs.beekeeper;\n+    }\n+\n+    /**\n+     * Return a Localization textContent for the Job.\n+     *\n+     * @return localization textContent String.\n+     */\n+    @Override\n+    public String getName()\n+    {\n+        return \"com.minecolonies.coremod.job.Beekeeper\";\n+    }\n+\n+    /**\n+     * Generate your AI class to register.\n+     * <p>\n+     * Suppressing Sonar Rule squid:S1452 This rule does \"Generic wildcard types should not be used in return parameters\"\n+     * But in this case the rule does not apply because\n+     * We are fine with all AbstractJob implementations and need generics only for java\n+     *\n+     * @return your personal AI instance.\n+     */\n+    @Override\n+    public AbstractAISkeleton generateAI()\n+    {\n+        return new EntityAIWorkBeekeeper(this);\n+    }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MDk4OQ==", "bodyText": "You should remove the entire deserializeMethod", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436740989", "createdAt": "2020-06-08T14:12:22Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/jobs/JobBeekeeper.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package com.minecolonies.coremod.colony.jobs;\n+\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.jobs.ModJobs;\n+import com.minecolonies.api.colony.jobs.registry.JobEntry;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractAISkeleton;\n+import com.minecolonies.coremod.entity.ai.citizen.beekeeper.EntityAIWorkBeekeeper;\n+import net.minecraft.nbt.INBT;\n+\n+public class JobBeekeeper extends AbstractJob\n+{\n+    /**\n+     * Initialize citizen data.\n+     *\n+     * @param entity the citizen data.\n+     */\n+    public JobBeekeeper(ICitizenData entity)\n+    {\n+        super(entity);\n+    }\n+\n+    /**\n+     * The {@link JobEntry} for this job.\n+     *\n+     * @return The {@link JobEntry}.\n+     */\n+    @Override\n+    public JobEntry getJobRegistryEntry()\n+    {\n+        return ModJobs.beekeeper;\n+    }\n+\n+    /**\n+     * Return a Localization textContent for the Job.\n+     *\n+     * @return localization textContent String.\n+     */\n+    @Override\n+    public String getName()\n+    {\n+        return \"com.minecolonies.coremod.job.Beekeeper\";\n+    }\n+\n+    /**\n+     * Generate your AI class to register.\n+     * <p>\n+     * Suppressing Sonar Rule squid:S1452 This rule does \"Generic wildcard types should not be used in return parameters\"\n+     * But in this case the rule does not apply because\n+     * We are fine with all AbstractJob implementations and need generics only for java\n+     *\n+     * @return your personal AI instance.\n+     */\n+    @Override\n+    public AbstractAISkeleton generateAI()\n+    {\n+        return new EntityAIWorkBeekeeper(this);\n+    }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzA2MQ=="}, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxODEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/network/messages/server/colony/building/beekeeper/BeekeeperScepterMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxOToyMVrOGgMLUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxOToyMVrOGgMLUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzEyMA==", "bodyText": "jdoc", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436407120", "createdAt": "2020-06-07T22:19:21Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/network/messages/server/colony/building/beekeeper/BeekeeperScepterMessage.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.minecolonies.coremod.network.messages.server.colony.building.beekeeper;\n+\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.buildings.views.IBuildingView;\n+import com.minecolonies.api.items.ModItems;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.network.messages.server.AbstractBuildingServerMessage;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraftforge.fml.network.NetworkEvent;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Message to set the lumberjack scepter in the player inventory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxODM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/network/messages/server/colony/building/beekeeper/BeekeeperSetHarvestHoneycombsMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxOTo0MFrOGgMLaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoxOTo0MFrOGgMLaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzE0Nw==", "bodyText": "jdoc", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436407147", "createdAt": "2020-06-07T22:19:40Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/network/messages/server/colony/building/beekeeper/BeekeeperSetHarvestHoneycombsMessage.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package com.minecolonies.coremod.network.messages.server.colony.building.beekeeper;\n+\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.network.IMessage;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingCowboy;\n+import com.minecolonies.coremod.network.messages.server.AbstractBuildingServerMessage;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraftforge.fml.network.NetworkEvent;\n+\n+public class BeekeeperSetHarvestHoneycombsMessage extends AbstractBuildingServerMessage<BuildingBeekeeper>\n+{\n+    private boolean harvestHoneycombs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxOTA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoyMDozMlrOGgMLxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzoyNDozMVrOGgR7-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzIzNg==", "bodyText": "Should probably be pass and not fail.", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436407236", "createdAt": "2020-06-07T22:20:32Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import net.minecraft.block.BeehiveBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.ItemUseContext;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.util.ActionResultType;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Beekeeper Scepter Item class. Used to give tasks to Beekeeper.\n+ */\n+public class ItemScepterBeekeeper extends AbstractItemMinecolonies\n+{\n+    private static final String NBT_HIVE_POS = Constants.MOD_ID + \":\" + \"hives\";\n+\n+    /**\n+     * BeekeeperScepter constructor. Sets max stack to 1, like other tools.\n+     * @param properties the properties.\n+     */\n+    public ItemScepterBeekeeper(final Properties properties)\n+    {\n+        super(\"scepterbeekeeper\", properties.maxStackSize(1));\n+    }\n+\n+    @Override\n+    public ActionResultType onItemUse(final ItemUseContext useContext)\n+    {\n+        // if server world, do nothing\n+        if (useContext.getWorld().isRemote)\n+        {\n+            return ActionResultType.FAIL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ5MDU0Mg==", "bodyText": "it's copied from lumberjack so I thought this is right", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436490542", "createdAt": "2020-06-08T06:57:26Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import net.minecraft.block.BeehiveBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.ItemUseContext;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.util.ActionResultType;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Beekeeper Scepter Item class. Used to give tasks to Beekeeper.\n+ */\n+public class ItemScepterBeekeeper extends AbstractItemMinecolonies\n+{\n+    private static final String NBT_HIVE_POS = Constants.MOD_ID + \":\" + \"hives\";\n+\n+    /**\n+     * BeekeeperScepter constructor. Sets max stack to 1, like other tools.\n+     * @param properties the properties.\n+     */\n+    public ItemScepterBeekeeper(final Properties properties)\n+    {\n+        super(\"scepterbeekeeper\", properties.maxStackSize(1));\n+    }\n+\n+    @Override\n+    public ActionResultType onItemUse(final ItemUseContext useContext)\n+    {\n+        // if server world, do nothing\n+        if (useContext.getWorld().isRemote)\n+        {\n+            return ActionResultType.FAIL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzIzNg=="}, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwMTQ5Ng==", "bodyText": "Ah, then you can keep it. There it works fine.", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436501496", "createdAt": "2020-06-08T07:24:31Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import net.minecraft.block.BeehiveBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.ItemUseContext;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.util.ActionResultType;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Beekeeper Scepter Item class. Used to give tasks to Beekeeper.\n+ */\n+public class ItemScepterBeekeeper extends AbstractItemMinecolonies\n+{\n+    private static final String NBT_HIVE_POS = Constants.MOD_ID + \":\" + \"hives\";\n+\n+    /**\n+     * BeekeeperScepter constructor. Sets max stack to 1, like other tools.\n+     * @param properties the properties.\n+     */\n+    public ItemScepterBeekeeper(final Properties properties)\n+    {\n+        super(\"scepterbeekeeper\", properties.maxStackSize(1));\n+    }\n+\n+    @Override\n+    public ActionResultType onItemUse(final ItemUseContext useContext)\n+    {\n+        // if server world, do nothing\n+        if (useContext.getWorld().isRemote)\n+        {\n+            return ActionResultType.FAIL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzIzNg=="}, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxODYxOTU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QyMjoyMToyNFrOGgMMBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNzozMzoxNFrOGgSLWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzMwMg==", "bodyText": "Might be easier to save them directly in the building each time already.", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436407302", "createdAt": "2020-06-07T22:21:24Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import net.minecraft.block.BeehiveBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.ItemUseContext;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.util.ActionResultType;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Beekeeper Scepter Item class. Used to give tasks to Beekeeper.\n+ */\n+public class ItemScepterBeekeeper extends AbstractItemMinecolonies\n+{\n+    private static final String NBT_HIVE_POS = Constants.MOD_ID + \":\" + \"hives\";\n+\n+    /**\n+     * BeekeeperScepter constructor. Sets max stack to 1, like other tools.\n+     * @param properties the properties.\n+     */\n+    public ItemScepterBeekeeper(final Properties properties)\n+    {\n+        super(\"scepterbeekeeper\", properties.maxStackSize(1));\n+    }\n+\n+    @Override\n+    public ActionResultType onItemUse(final ItemUseContext useContext)\n+    {\n+        // if server world, do nothing\n+        if (useContext.getWorld().isRemote)\n+        {\n+            return ActionResultType.FAIL;\n+        }\n+\n+        final ItemStack scepter = useContext.getPlayer().getHeldItem(useContext.getHand());\n+        final CompoundNBT compound = scepter.getOrCreateTag();\n+\n+        final IColony colony = IColonyManager.getInstance().getColonyByWorld(compound.getInt(TAG_ID), useContext.getWorld());\n+        final BlockPos hutPos = BlockPosUtil.read(compound, TAG_POS);\n+        final IBuilding hut = colony.getBuildingManager().getBuilding(hutPos);\n+        final BuildingBeekeeper building = (BuildingBeekeeper) hut;\n+\n+        if (useContext.getWorld().getBlockState(useContext.getPos()).getBlock() instanceof BeehiveBlock)\n+        {\n+\n+            final Collection<BlockPos> positions = readPositions(compound);\n+\n+            final BlockPos pos = useContext.getPos();\n+            if (positions.contains(pos))\n+            {\n+                LanguageHandler.sendPlayerMessage(useContext.getPlayer(), \"item.minecolonies.scepterbeekeeper.removehive\");\n+                positions.remove(pos);\n+            }\n+            else\n+            {\n+                if (positions.size() < building.getMaximumHives())\n+                {\n+                    LanguageHandler.sendPlayerMessage(useContext.getPlayer(), \"item.minecolonies.scepterbeekeeper.addhive\");\n+                    positions.add(pos);\n+                }\n+                else\n+                {\n+                    LanguageHandler.sendPlayerMessage(useContext.getPlayer(), \"item.minecolonies.scepterbeekeeper.maxhives\");\n+                    save(useContext.getPlayer(), building, compound);\n+                }\n+            }\n+            writePositions(positions, compound);\n+        }\n+        else\n+        {\n+            save(useContext.getPlayer(), building, compound);\n+        }\n+\n+        return super.onItemUse(useContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzMzMA==", "bodyText": "That would also save you from writing positions in the item", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436407330", "createdAt": "2020-06-07T22:21:51Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import net.minecraft.block.BeehiveBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.ItemUseContext;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.util.ActionResultType;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Beekeeper Scepter Item class. Used to give tasks to Beekeeper.\n+ */\n+public class ItemScepterBeekeeper extends AbstractItemMinecolonies\n+{\n+    private static final String NBT_HIVE_POS = Constants.MOD_ID + \":\" + \"hives\";\n+\n+    /**\n+     * BeekeeperScepter constructor. Sets max stack to 1, like other tools.\n+     * @param properties the properties.\n+     */\n+    public ItemScepterBeekeeper(final Properties properties)\n+    {\n+        super(\"scepterbeekeeper\", properties.maxStackSize(1));\n+    }\n+\n+    @Override\n+    public ActionResultType onItemUse(final ItemUseContext useContext)\n+    {\n+        // if server world, do nothing\n+        if (useContext.getWorld().isRemote)\n+        {\n+            return ActionResultType.FAIL;\n+        }\n+\n+        final ItemStack scepter = useContext.getPlayer().getHeldItem(useContext.getHand());\n+        final CompoundNBT compound = scepter.getOrCreateTag();\n+\n+        final IColony colony = IColonyManager.getInstance().getColonyByWorld(compound.getInt(TAG_ID), useContext.getWorld());\n+        final BlockPos hutPos = BlockPosUtil.read(compound, TAG_POS);\n+        final IBuilding hut = colony.getBuildingManager().getBuilding(hutPos);\n+        final BuildingBeekeeper building = (BuildingBeekeeper) hut;\n+\n+        if (useContext.getWorld().getBlockState(useContext.getPos()).getBlock() instanceof BeehiveBlock)\n+        {\n+\n+            final Collection<BlockPos> positions = readPositions(compound);\n+\n+            final BlockPos pos = useContext.getPos();\n+            if (positions.contains(pos))\n+            {\n+                LanguageHandler.sendPlayerMessage(useContext.getPlayer(), \"item.minecolonies.scepterbeekeeper.removehive\");\n+                positions.remove(pos);\n+            }\n+            else\n+            {\n+                if (positions.size() < building.getMaximumHives())\n+                {\n+                    LanguageHandler.sendPlayerMessage(useContext.getPlayer(), \"item.minecolonies.scepterbeekeeper.addhive\");\n+                    positions.add(pos);\n+                }\n+                else\n+                {\n+                    LanguageHandler.sendPlayerMessage(useContext.getPlayer(), \"item.minecolonies.scepterbeekeeper.maxhives\");\n+                    save(useContext.getPlayer(), building, compound);\n+                }\n+            }\n+            writePositions(positions, compound);\n+        }\n+        else\n+        {\n+            save(useContext.getPlayer(), building, compound);\n+        }\n+\n+        return super.onItemUse(useContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzMwMg=="}, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjUwNTQzMw==", "bodyText": "yea that's way better (was thinking too complicated when I did it)", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436505433", "createdAt": "2020-06-08T07:33:14Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import net.minecraft.block.BeehiveBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.ItemUseContext;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.util.ActionResultType;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Collection;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Beekeeper Scepter Item class. Used to give tasks to Beekeeper.\n+ */\n+public class ItemScepterBeekeeper extends AbstractItemMinecolonies\n+{\n+    private static final String NBT_HIVE_POS = Constants.MOD_ID + \":\" + \"hives\";\n+\n+    /**\n+     * BeekeeperScepter constructor. Sets max stack to 1, like other tools.\n+     * @param properties the properties.\n+     */\n+    public ItemScepterBeekeeper(final Properties properties)\n+    {\n+        super(\"scepterbeekeeper\", properties.maxStackSize(1));\n+    }\n+\n+    @Override\n+    public ActionResultType onItemUse(final ItemUseContext useContext)\n+    {\n+        // if server world, do nothing\n+        if (useContext.getWorld().isRemote)\n+        {\n+            return ActionResultType.FAIL;\n+        }\n+\n+        final ItemStack scepter = useContext.getPlayer().getHeldItem(useContext.getHand());\n+        final CompoundNBT compound = scepter.getOrCreateTag();\n+\n+        final IColony colony = IColonyManager.getInstance().getColonyByWorld(compound.getInt(TAG_ID), useContext.getWorld());\n+        final BlockPos hutPos = BlockPosUtil.read(compound, TAG_POS);\n+        final IBuilding hut = colony.getBuildingManager().getBuilding(hutPos);\n+        final BuildingBeekeeper building = (BuildingBeekeeper) hut;\n+\n+        if (useContext.getWorld().getBlockState(useContext.getPos()).getBlock() instanceof BeehiveBlock)\n+        {\n+\n+            final Collection<BlockPos> positions = readPositions(compound);\n+\n+            final BlockPos pos = useContext.getPos();\n+            if (positions.contains(pos))\n+            {\n+                LanguageHandler.sendPlayerMessage(useContext.getPlayer(), \"item.minecolonies.scepterbeekeeper.removehive\");\n+                positions.remove(pos);\n+            }\n+            else\n+            {\n+                if (positions.size() < building.getMaximumHives())\n+                {\n+                    LanguageHandler.sendPlayerMessage(useContext.getPlayer(), \"item.minecolonies.scepterbeekeeper.addhive\");\n+                    positions.add(pos);\n+                }\n+                else\n+                {\n+                    LanguageHandler.sendPlayerMessage(useContext.getPlayer(), \"item.minecolonies.scepterbeekeeper.maxhives\");\n+                    save(useContext.getPlayer(), building, compound);\n+                }\n+            }\n+            writePositions(positions, compound);\n+        }\n+        else\n+        {\n+            save(useContext.getPlayer(), building, compound);\n+        }\n+\n+        return super.onItemUse(useContext);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQwNzMwMg=="}, "originalCommit": {"oid": "0e03c86a2294a30fe25029ff3b9263bb0e00f4b5"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc0ODA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/blocks/huts/BlockHutBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxMDoxN1rOGggatg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxMDoxN1rOGggatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczODc0Mg==", "bodyText": "formatting slightly off", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436738742", "createdAt": "2020-06-08T14:10:17Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/blocks/huts/BlockHutBeekeeper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.minecolonies.coremod.blocks.huts;\n+\n+import com.minecolonies.api.blocks.AbstractBlockHut;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+\n+public class BlockHutBeekeeper extends AbstractBlockHut<BlockHutBeekeeper>\n+{\n+    /**\n+     * Method to return the name of the block.\n+     *\n+     * @return Name of the block.\n+     */\n+    @Override\n+    public String getName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc0OTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/blocks/huts/BlockHutBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxMDoyNFrOGggbYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxMDoyNFrOGggbYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjczODkxMw==", "bodyText": "jdoc", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436738913", "createdAt": "2020-06-08T14:10:24Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/blocks/huts/BlockHutBeekeeper.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package com.minecolonies.coremod.blocks.huts;\n+\n+import com.minecolonies.api.blocks.AbstractBlockHut;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+\n+public class BlockHutBeekeeper extends AbstractBlockHut<BlockHutBeekeeper>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc1NjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxMTozMlrOGgggCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNDo0NFrOGggpzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MDEwNw==", "bodyText": "Dexterity -> primary\nAdaptability -> Secondary\nWere planned for this worker", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436740107", "createdAt": "2020-06-08T14:11:32Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.client.gui.WindowHutBeekeeper;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.network.messages.server.colony.building.beekeeper.BeekeeperSetHarvestHoneycombsMessage;\n+import net.minecraft.item.Items;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+public class BuildingBeekeeper extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String BEEKEEPER = \"beekeeper\";\n+\n+    /**\n+     * List of hives.\n+     */\n+    private Set<BlockPos> hives = new HashSet<>();\n+\n+    /**\n+     * Wether the beekeeper should harvest honeycombs or honey bottles\n+     */\n+    private boolean harvestHoneycombs = true;\n+\n+    /**\n+     * The abstract constructor of the building.\n+     *\n+     * @param c the colony\n+     * @param l the position\n+     */\n+    public BuildingBeekeeper(@NotNull final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+        keepX.put(stack -> Items.SHEARS == stack.getItem(), new Tuple<>(1, true));\n+        keepX.put(stack -> Items.GLASS_BOTTLE == stack.getItem(), new Tuple<>(4, true));\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(final ICitizenData citizen)\n+    {\n+        return new JobBeekeeper(citizen);\n+    }\n+\n+    /**\n+     * The abstract method which returns the name of the job.\n+     *\n+     * @return the job name.\n+     */\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return BEEKEEPER;\n+    }\n+\n+    /**\n+     * Primary skill getter.\n+     *\n+     * @return the primary skill.\n+     */\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Stamina; //TODO", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MjYwNQ==", "bodyText": "ok (that's why I put the todo there)", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436742605", "createdAt": "2020-06-08T14:14:44Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBeekeeper.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.ldtteam.blockout.views.Window;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.jobs.IJob;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.util.NBTUtils;\n+import com.minecolonies.api.util.constant.NbtTagConstants;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.client.gui.WindowHutBeekeeper;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.network.messages.server.colony.building.beekeeper.BeekeeperSetHarvestHoneycombsMessage;\n+import net.minecraft.item.Items;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.NBTUtil;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.CONST_DEFAULT_MAX_BUILDING_LEVEL;\n+\n+public class BuildingBeekeeper extends AbstractBuildingWorker\n+{\n+    /**\n+     * Description of the job executed in the hut.\n+     */\n+    private static final String BEEKEEPER = \"beekeeper\";\n+\n+    /**\n+     * List of hives.\n+     */\n+    private Set<BlockPos> hives = new HashSet<>();\n+\n+    /**\n+     * Wether the beekeeper should harvest honeycombs or honey bottles\n+     */\n+    private boolean harvestHoneycombs = true;\n+\n+    /**\n+     * The abstract constructor of the building.\n+     *\n+     * @param c the colony\n+     * @param l the position\n+     */\n+    public BuildingBeekeeper(@NotNull final IColony c, final BlockPos l)\n+    {\n+        super(c, l);\n+        keepX.put(stack -> Items.SHEARS == stack.getItem(), new Tuple<>(1, true));\n+        keepX.put(stack -> Items.GLASS_BOTTLE == stack.getItem(), new Tuple<>(4, true));\n+    }\n+\n+    /**\n+     * The abstract method which creates a job for the building.\n+     *\n+     * @param citizen the citizen to take the job.\n+     * @return the Job.\n+     */\n+    @NotNull\n+    @Override\n+    public IJob createJob(final ICitizenData citizen)\n+    {\n+        return new JobBeekeeper(citizen);\n+    }\n+\n+    /**\n+     * The abstract method which returns the name of the job.\n+     *\n+     * @return the job name.\n+     */\n+    @NotNull\n+    @Override\n+    public String getJobName()\n+    {\n+        return BEEKEEPER;\n+    }\n+\n+    /**\n+     * Primary skill getter.\n+     *\n+     * @return the primary skill.\n+     */\n+    @NotNull\n+    @Override\n+    public Skill getPrimarySkill()\n+    {\n+        return Skill.Stamina; //TODO", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MDEwNw=="}, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc1ODc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/jobs/JobBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxMTo1NFrOGgghmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxMTo1NFrOGgghmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MDUwNQ==", "bodyText": "jdoc", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436740505", "createdAt": "2020-06-08T14:11:54Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/jobs/JobBeekeeper.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.minecolonies.coremod.colony.jobs;\n+\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.jobs.ModJobs;\n+import com.minecolonies.api.colony.jobs.registry.JobEntry;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractAISkeleton;\n+import com.minecolonies.coremod.entity.ai.citizen.beekeeper.EntityAIWorkBeekeeper;\n+import net.minecraft.nbt.INBT;\n+\n+public class JobBeekeeper extends AbstractJob", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc3MTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNDozM1rOGggpPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNDozM1rOGggpPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MjQ2MQ==", "bodyText": "That is quite the creative way to make a tag based request. Although I'm unsure we shouldn't create just a TagBased request type new instead of doing it the hacky way.", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436742461", "createdAt": "2020-06-08T14:14:33Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -1495,6 +1499,40 @@ public boolean checkIfRequestForItemExistOrCreateAsynch(@NotNull final ItemStack\n         return false;\n     }\n \n+    /**\n+     * Check if a tag has been requested already or is in the inventory. If not in the inventory and not requested already, create request\n+     *\n+     * @param tag the requested tag.\n+     * @return true if in the inventory, else false.\n+     */\n+    public boolean checkIfRequestForTagExistOrCreateAsynch(@NotNull final Tag<Item> tag, final int count, final String description)\n+    {\n+        if (InventoryUtils.hasItemInItemHandler(worker.getInventoryCitizen(), s -> s.getItem().isIn(tag) && s.getCount() >= count))\n+        {\n+            return true;\n+        }\n+\n+        if (InventoryUtils.getItemCountInProvider(getOwnBuilding(),\n+                itemStack -> itemStack.getItem().isIn(tag)) >= count &&\n+                InventoryUtils.transferXOfFirstSlotInProviderWithIntoNextFreeSlotInItemHandler(\n+                        getOwnBuilding(), itemStack -> itemStack.getItem().isIn(tag),\n+                        count,\n+                        worker.getInventoryCitizen()))\n+        {\n+            return true;\n+        }\n+\n+        final List<ItemStack> stacks = tag.getAllElements().stream().map(itemIn -> new ItemStack(itemIn, count)).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc3NTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNTozMlrOGggr9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1NjowNlrOGgprXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzE1OQ==", "bodyText": "I don't like the code style of this. We should have a setter for this on the building instead of getting a mutable list and add them by reference.", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436743159", "createdAt": "2020-06-08T14:15:32Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import net.minecraft.block.BeehiveBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.ItemUseContext;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.util.ActionResultType;\n+import net.minecraft.util.math.BlockPos;\n+\n+import java.util.Collection;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Beekeeper Scepter Item class. Used to give tasks to Beekeeper.\n+ */\n+public class ItemScepterBeekeeper extends AbstractItemMinecolonies\n+{\n+    /**\n+     * BeekeeperScepter constructor. Sets max stack to 1, like other tools.\n+     *\n+     * @param properties the properties.\n+     */\n+    public ItemScepterBeekeeper(final Properties properties)\n+    {\n+        super(\"scepterbeekeeper\", properties.maxStackSize(1));\n+    }\n+\n+    @Override\n+    public ActionResultType onItemUse(final ItemUseContext useContext)\n+    {\n+        // if server world, do nothing\n+        if (useContext.getWorld().isRemote)\n+        {\n+            return ActionResultType.FAIL;\n+        }\n+\n+        final PlayerEntity player = useContext.getPlayer();\n+\n+        final ItemStack scepter = useContext.getPlayer().getHeldItem(useContext.getHand());\n+        final CompoundNBT compound = scepter.getOrCreateTag();\n+\n+        final IColony colony = IColonyManager.getInstance().getColonyByWorld(compound.getInt(TAG_ID), useContext.getWorld());\n+        final BlockPos hutPos = BlockPosUtil.read(compound, TAG_POS);\n+        final IBuilding hut = colony.getBuildingManager().getBuilding(hutPos);\n+        final BuildingBeekeeper building = (BuildingBeekeeper) hut;\n+\n+        if (useContext.getWorld().getBlockState(useContext.getPos()).getBlock() instanceof BeehiveBlock)\n+        {\n+\n+            final Collection<BlockPos> positions = building.getHives();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTM2MA==", "bodyText": "you mean add and remove proxy methods?", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436745360", "createdAt": "2020-06-08T14:18:42Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import net.minecraft.block.BeehiveBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.ItemUseContext;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.util.ActionResultType;\n+import net.minecraft.util.math.BlockPos;\n+\n+import java.util.Collection;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Beekeeper Scepter Item class. Used to give tasks to Beekeeper.\n+ */\n+public class ItemScepterBeekeeper extends AbstractItemMinecolonies\n+{\n+    /**\n+     * BeekeeperScepter constructor. Sets max stack to 1, like other tools.\n+     *\n+     * @param properties the properties.\n+     */\n+    public ItemScepterBeekeeper(final Properties properties)\n+    {\n+        super(\"scepterbeekeeper\", properties.maxStackSize(1));\n+    }\n+\n+    @Override\n+    public ActionResultType onItemUse(final ItemUseContext useContext)\n+    {\n+        // if server world, do nothing\n+        if (useContext.getWorld().isRemote)\n+        {\n+            return ActionResultType.FAIL;\n+        }\n+\n+        final PlayerEntity player = useContext.getPlayer();\n+\n+        final ItemStack scepter = useContext.getPlayer().getHeldItem(useContext.getHand());\n+        final CompoundNBT compound = scepter.getOrCreateTag();\n+\n+        final IColony colony = IColonyManager.getInstance().getColonyByWorld(compound.getInt(TAG_ID), useContext.getWorld());\n+        final BlockPos hutPos = BlockPosUtil.read(compound, TAG_POS);\n+        final IBuilding hut = colony.getBuildingManager().getBuilding(hutPos);\n+        final BuildingBeekeeper building = (BuildingBeekeeper) hut;\n+\n+        if (useContext.getWorld().getBlockState(useContext.getPos()).getBlock() instanceof BeehiveBlock)\n+        {\n+\n+            final Collection<BlockPos> positions = building.getHives();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzE1OQ=="}, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MDQ2Mw==", "bodyText": "yes", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436890463", "createdAt": "2020-06-08T17:56:06Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemScepterBeekeeper.java", "diffHunk": "@@ -0,0 +1,88 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import net.minecraft.block.BeehiveBlock;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.ItemUseContext;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.util.ActionResultType;\n+import net.minecraft.util.math.BlockPos;\n+\n+import java.util.Collection;\n+\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_ID;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_POS;\n+\n+/**\n+ * Beekeeper Scepter Item class. Used to give tasks to Beekeeper.\n+ */\n+public class ItemScepterBeekeeper extends AbstractItemMinecolonies\n+{\n+    /**\n+     * BeekeeperScepter constructor. Sets max stack to 1, like other tools.\n+     *\n+     * @param properties the properties.\n+     */\n+    public ItemScepterBeekeeper(final Properties properties)\n+    {\n+        super(\"scepterbeekeeper\", properties.maxStackSize(1));\n+    }\n+\n+    @Override\n+    public ActionResultType onItemUse(final ItemUseContext useContext)\n+    {\n+        // if server world, do nothing\n+        if (useContext.getWorld().isRemote)\n+        {\n+            return ActionResultType.FAIL;\n+        }\n+\n+        final PlayerEntity player = useContext.getPlayer();\n+\n+        final ItemStack scepter = useContext.getPlayer().getHeldItem(useContext.getHand());\n+        final CompoundNBT compound = scepter.getOrCreateTag();\n+\n+        final IColony colony = IColonyManager.getInstance().getColonyByWorld(compound.getInt(TAG_ID), useContext.getWorld());\n+        final BlockPos hutPos = BlockPosUtil.read(compound, TAG_POS);\n+        final IBuilding hut = colony.getBuildingManager().getBuilding(hutPos);\n+        final BuildingBeekeeper building = (BuildingBeekeeper) hut;\n+\n+        if (useContext.getWorld().getBlockState(useContext.getPos()).getBlock() instanceof BeehiveBlock)\n+        {\n+\n+            final Collection<BlockPos> positions = building.getHives();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0MzE1OQ=="}, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc4MzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNzoxOVrOGggw1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNzoxOVrOGggw1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NDQwNA==", "bodyText": "private, jdoc, and better name", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436744404", "createdAt": "2020-06-08T14:17:19Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "diffHunk": "@@ -0,0 +1,460 @@\n+package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n+\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.constant.ToolType;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.entity.passive.AnimalEntity;\n+import net.minecraft.entity.passive.BeeEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tileentity.BeehiveTileEntity;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.ToolLevelConstants.TOOL_LEVEL_WOOD_OR_GOLD;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_BEEKEEPER_HARVESTING;\n+import static com.minecolonies.api.util.constant.TranslationConstants.FLOWERS;\n+\n+public class EntityAIWorkBeekeeper extends AbstractEntityAIInteract<JobBeekeeper>\n+{\n+    /**\n+     * Amount of animals needed to bread.\n+     */\n+    private static final int NUM_OF_ANIMALS_TO_BREED = 2;\n+    private static final int BEES_PER_LEVEL          = 3;\n+\n+    /**\n+     * Experience given per beehive harvested.\n+     */\n+    private static final double EXP_PER_HARVEST = 5.0;\n+\n+    /**\n+     * Distance two animals need to be inside to breed.\n+     */\n+    private static final int DISTANCE_TO_BREED = 10;\n+\n+    /**\n+     * Distance around a hive wher bees wander.\n+     */\n+    private static final int HIVE_BEE_RADIUS = 22;\n+\n+    /**\n+     * Delays used to setDelay()\n+     */\n+    private static final int DECIDING_DELAY   = 40;\n+    private static final int NO_ANIMALS_DELAY = 100;\n+    private static final int BREEDING_DELAY   = 40;\n+\n+    /**\n+     * Creates the abstract part of the AI. Always use this constructor!\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkBeekeeper(@NotNull JobBeekeeper job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(PREPARING, this::prepareForHerding, 1),\n+          new AITarget(DECIDE, this::decideWhatToDo, 1),\n+          new AITarget(HERDER_BREED, this::breedAnimals, 1),\n+          new AITarget(BEEKEEPER_HARVEST, this::harvestHoney, TICKS_SECOND)\n+        );\n+    }\n+\n+    public boolean maxAnimals(final List<BeeEntity> allAnimals)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc4Njg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxODowNVrOGggy-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzo1NTo1NVrOGgpq8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NDk1NA==", "bodyText": "Possibly, when there are a bunch of glass bottles and flowers in the inventory they shouldn't request", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436744954", "createdAt": "2020-06-08T14:18:05Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "diffHunk": "@@ -0,0 +1,460 @@\n+package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n+\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.constant.ToolType;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.entity.passive.AnimalEntity;\n+import net.minecraft.entity.passive.BeeEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tileentity.BeehiveTileEntity;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.ToolLevelConstants.TOOL_LEVEL_WOOD_OR_GOLD;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_BEEKEEPER_HARVESTING;\n+import static com.minecolonies.api.util.constant.TranslationConstants.FLOWERS;\n+\n+public class EntityAIWorkBeekeeper extends AbstractEntityAIInteract<JobBeekeeper>\n+{\n+    /**\n+     * Amount of animals needed to bread.\n+     */\n+    private static final int NUM_OF_ANIMALS_TO_BREED = 2;\n+    private static final int BEES_PER_LEVEL          = 3;\n+\n+    /**\n+     * Experience given per beehive harvested.\n+     */\n+    private static final double EXP_PER_HARVEST = 5.0;\n+\n+    /**\n+     * Distance two animals need to be inside to breed.\n+     */\n+    private static final int DISTANCE_TO_BREED = 10;\n+\n+    /**\n+     * Distance around a hive wher bees wander.\n+     */\n+    private static final int HIVE_BEE_RADIUS = 22;\n+\n+    /**\n+     * Delays used to setDelay()\n+     */\n+    private static final int DECIDING_DELAY   = 40;\n+    private static final int NO_ANIMALS_DELAY = 100;\n+    private static final int BREEDING_DELAY   = 40;\n+\n+    /**\n+     * Creates the abstract part of the AI. Always use this constructor!\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkBeekeeper(@NotNull JobBeekeeper job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(PREPARING, this::prepareForHerding, 1),\n+          new AITarget(DECIDE, this::decideWhatToDo, 1),\n+          new AITarget(HERDER_BREED, this::breedAnimals, 1),\n+          new AITarget(BEEKEEPER_HARVEST, this::harvestHoney, TICKS_SECOND)\n+        );\n+    }\n+\n+    public boolean maxAnimals(final List<BeeEntity> allAnimals)\n+    {\n+        if (getOwnBuilding() != null)\n+        {\n+            final int numOfBeesInHive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .map(world::getTileEntity)\n+                                          .filter(Objects::nonNull)\n+                                          .map(BeehiveTileEntity.class::cast)\n+                                          .mapToInt(BeehiveTileEntity::func_226971_j_)\n+                                          .sum();\n+            final int numOfAnimals = allAnimals.size();\n+            final int maxAnimals = getOwnBuilding().getBuildingLevel() * BEES_PER_LEVEL;\n+\n+            return (numOfAnimals + numOfBeesInHive) > maxAnimals;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Prepares the beekeeper for herding\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState prepareForHerding()\n+    {\n+        setDelay(DECIDING_DELAY);\n+        if (getOwnBuilding(BuildingBeekeeper.class).shouldHarvestHoneycombs())\n+        {\n+            if (checkForToolOrWeapon(ToolType.SHEARS))\n+            {\n+                return getState();\n+            }\n+        }\n+\n+        checkIfRequestForItemExistOrCreateAsynch(new ItemStack(Items.GLASS_BOTTLE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0OTM5Mw==", "bodyText": "I think checkIfRequestForItemExistOrCreateAsynch does already check the inventory", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436749393", "createdAt": "2020-06-08T14:24:42Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "diffHunk": "@@ -0,0 +1,460 @@\n+package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n+\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.constant.ToolType;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.entity.passive.AnimalEntity;\n+import net.minecraft.entity.passive.BeeEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tileentity.BeehiveTileEntity;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.ToolLevelConstants.TOOL_LEVEL_WOOD_OR_GOLD;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_BEEKEEPER_HARVESTING;\n+import static com.minecolonies.api.util.constant.TranslationConstants.FLOWERS;\n+\n+public class EntityAIWorkBeekeeper extends AbstractEntityAIInteract<JobBeekeeper>\n+{\n+    /**\n+     * Amount of animals needed to bread.\n+     */\n+    private static final int NUM_OF_ANIMALS_TO_BREED = 2;\n+    private static final int BEES_PER_LEVEL          = 3;\n+\n+    /**\n+     * Experience given per beehive harvested.\n+     */\n+    private static final double EXP_PER_HARVEST = 5.0;\n+\n+    /**\n+     * Distance two animals need to be inside to breed.\n+     */\n+    private static final int DISTANCE_TO_BREED = 10;\n+\n+    /**\n+     * Distance around a hive wher bees wander.\n+     */\n+    private static final int HIVE_BEE_RADIUS = 22;\n+\n+    /**\n+     * Delays used to setDelay()\n+     */\n+    private static final int DECIDING_DELAY   = 40;\n+    private static final int NO_ANIMALS_DELAY = 100;\n+    private static final int BREEDING_DELAY   = 40;\n+\n+    /**\n+     * Creates the abstract part of the AI. Always use this constructor!\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkBeekeeper(@NotNull JobBeekeeper job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(PREPARING, this::prepareForHerding, 1),\n+          new AITarget(DECIDE, this::decideWhatToDo, 1),\n+          new AITarget(HERDER_BREED, this::breedAnimals, 1),\n+          new AITarget(BEEKEEPER_HARVEST, this::harvestHoney, TICKS_SECOND)\n+        );\n+    }\n+\n+    public boolean maxAnimals(final List<BeeEntity> allAnimals)\n+    {\n+        if (getOwnBuilding() != null)\n+        {\n+            final int numOfBeesInHive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .map(world::getTileEntity)\n+                                          .filter(Objects::nonNull)\n+                                          .map(BeehiveTileEntity.class::cast)\n+                                          .mapToInt(BeehiveTileEntity::func_226971_j_)\n+                                          .sum();\n+            final int numOfAnimals = allAnimals.size();\n+            final int maxAnimals = getOwnBuilding().getBuildingLevel() * BEES_PER_LEVEL;\n+\n+            return (numOfAnimals + numOfBeesInHive) > maxAnimals;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Prepares the beekeeper for herding\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState prepareForHerding()\n+    {\n+        setDelay(DECIDING_DELAY);\n+        if (getOwnBuilding(BuildingBeekeeper.class).shouldHarvestHoneycombs())\n+        {\n+            if (checkForToolOrWeapon(ToolType.SHEARS))\n+            {\n+                return getState();\n+            }\n+        }\n+\n+        checkIfRequestForItemExistOrCreateAsynch(new ItemStack(Items.GLASS_BOTTLE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NDk1NA=="}, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDAwMQ==", "bodyText": "from checkIfRequestForItemExistOrCreateAsynch jdoc\n\nCheck if a stack has been requested already or is in the inventory. If not in the inventory and not requested already, create request", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436750001", "createdAt": "2020-06-08T14:25:26Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "diffHunk": "@@ -0,0 +1,460 @@\n+package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n+\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.constant.ToolType;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.entity.passive.AnimalEntity;\n+import net.minecraft.entity.passive.BeeEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tileentity.BeehiveTileEntity;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.ToolLevelConstants.TOOL_LEVEL_WOOD_OR_GOLD;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_BEEKEEPER_HARVESTING;\n+import static com.minecolonies.api.util.constant.TranslationConstants.FLOWERS;\n+\n+public class EntityAIWorkBeekeeper extends AbstractEntityAIInteract<JobBeekeeper>\n+{\n+    /**\n+     * Amount of animals needed to bread.\n+     */\n+    private static final int NUM_OF_ANIMALS_TO_BREED = 2;\n+    private static final int BEES_PER_LEVEL          = 3;\n+\n+    /**\n+     * Experience given per beehive harvested.\n+     */\n+    private static final double EXP_PER_HARVEST = 5.0;\n+\n+    /**\n+     * Distance two animals need to be inside to breed.\n+     */\n+    private static final int DISTANCE_TO_BREED = 10;\n+\n+    /**\n+     * Distance around a hive wher bees wander.\n+     */\n+    private static final int HIVE_BEE_RADIUS = 22;\n+\n+    /**\n+     * Delays used to setDelay()\n+     */\n+    private static final int DECIDING_DELAY   = 40;\n+    private static final int NO_ANIMALS_DELAY = 100;\n+    private static final int BREEDING_DELAY   = 40;\n+\n+    /**\n+     * Creates the abstract part of the AI. Always use this constructor!\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkBeekeeper(@NotNull JobBeekeeper job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(PREPARING, this::prepareForHerding, 1),\n+          new AITarget(DECIDE, this::decideWhatToDo, 1),\n+          new AITarget(HERDER_BREED, this::breedAnimals, 1),\n+          new AITarget(BEEKEEPER_HARVEST, this::harvestHoney, TICKS_SECOND)\n+        );\n+    }\n+\n+    public boolean maxAnimals(final List<BeeEntity> allAnimals)\n+    {\n+        if (getOwnBuilding() != null)\n+        {\n+            final int numOfBeesInHive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .map(world::getTileEntity)\n+                                          .filter(Objects::nonNull)\n+                                          .map(BeehiveTileEntity.class::cast)\n+                                          .mapToInt(BeehiveTileEntity::func_226971_j_)\n+                                          .sum();\n+            final int numOfAnimals = allAnimals.size();\n+            final int maxAnimals = getOwnBuilding().getBuildingLevel() * BEES_PER_LEVEL;\n+\n+            return (numOfAnimals + numOfBeesInHive) > maxAnimals;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Prepares the beekeeper for herding\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState prepareForHerding()\n+    {\n+        setDelay(DECIDING_DELAY);\n+        if (getOwnBuilding(BuildingBeekeeper.class).shouldHarvestHoneycombs())\n+        {\n+            if (checkForToolOrWeapon(ToolType.SHEARS))\n+            {\n+                return getState();\n+            }\n+        }\n+\n+        checkIfRequestForItemExistOrCreateAsynch(new ItemStack(Items.GLASS_BOTTLE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NDk1NA=="}, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5MDM1NQ==", "bodyText": "ah okay", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436890355", "createdAt": "2020-06-08T17:55:55Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "diffHunk": "@@ -0,0 +1,460 @@\n+package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n+\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.constant.ToolType;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.entity.passive.AnimalEntity;\n+import net.minecraft.entity.passive.BeeEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tileentity.BeehiveTileEntity;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.ToolLevelConstants.TOOL_LEVEL_WOOD_OR_GOLD;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_BEEKEEPER_HARVESTING;\n+import static com.minecolonies.api.util.constant.TranslationConstants.FLOWERS;\n+\n+public class EntityAIWorkBeekeeper extends AbstractEntityAIInteract<JobBeekeeper>\n+{\n+    /**\n+     * Amount of animals needed to bread.\n+     */\n+    private static final int NUM_OF_ANIMALS_TO_BREED = 2;\n+    private static final int BEES_PER_LEVEL          = 3;\n+\n+    /**\n+     * Experience given per beehive harvested.\n+     */\n+    private static final double EXP_PER_HARVEST = 5.0;\n+\n+    /**\n+     * Distance two animals need to be inside to breed.\n+     */\n+    private static final int DISTANCE_TO_BREED = 10;\n+\n+    /**\n+     * Distance around a hive wher bees wander.\n+     */\n+    private static final int HIVE_BEE_RADIUS = 22;\n+\n+    /**\n+     * Delays used to setDelay()\n+     */\n+    private static final int DECIDING_DELAY   = 40;\n+    private static final int NO_ANIMALS_DELAY = 100;\n+    private static final int BREEDING_DELAY   = 40;\n+\n+    /**\n+     * Creates the abstract part of the AI. Always use this constructor!\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkBeekeeper(@NotNull JobBeekeeper job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(PREPARING, this::prepareForHerding, 1),\n+          new AITarget(DECIDE, this::decideWhatToDo, 1),\n+          new AITarget(HERDER_BREED, this::breedAnimals, 1),\n+          new AITarget(BEEKEEPER_HARVEST, this::harvestHoney, TICKS_SECOND)\n+        );\n+    }\n+\n+    public boolean maxAnimals(final List<BeeEntity> allAnimals)\n+    {\n+        if (getOwnBuilding() != null)\n+        {\n+            final int numOfBeesInHive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .map(world::getTileEntity)\n+                                          .filter(Objects::nonNull)\n+                                          .map(BeehiveTileEntity.class::cast)\n+                                          .mapToInt(BeehiveTileEntity::func_226971_j_)\n+                                          .sum();\n+            final int numOfAnimals = allAnimals.size();\n+            final int maxAnimals = getOwnBuilding().getBuildingLevel() * BEES_PER_LEVEL;\n+\n+            return (numOfAnimals + numOfBeesInHive) > maxAnimals;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Prepares the beekeeper for herding\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState prepareForHerding()\n+    {\n+        setDelay(DECIDING_DELAY);\n+        if (getOwnBuilding(BuildingBeekeeper.class).shouldHarvestHoneycombs())\n+        {\n+            if (checkForToolOrWeapon(ToolType.SHEARS))\n+            {\n+                return getState();\n+            }\n+        }\n+\n+        checkIfRequestForItemExistOrCreateAsynch(new ItemStack(Items.GLASS_BOTTLE));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NDk1NA=="}, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc5MTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxOToyM1rOGgg2Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTo0MDoyNFrOGmrcwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTc5OQ==", "bodyText": "Should probably set an interaction here, if they can't find bees within a time they gotta tell the player about this.", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436745799", "createdAt": "2020-06-08T14:19:23Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "diffHunk": "@@ -0,0 +1,460 @@\n+package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n+\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.constant.ToolType;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.entity.passive.AnimalEntity;\n+import net.minecraft.entity.passive.BeeEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tileentity.BeehiveTileEntity;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.ToolLevelConstants.TOOL_LEVEL_WOOD_OR_GOLD;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_BEEKEEPER_HARVESTING;\n+import static com.minecolonies.api.util.constant.TranslationConstants.FLOWERS;\n+\n+public class EntityAIWorkBeekeeper extends AbstractEntityAIInteract<JobBeekeeper>\n+{\n+    /**\n+     * Amount of animals needed to bread.\n+     */\n+    private static final int NUM_OF_ANIMALS_TO_BREED = 2;\n+    private static final int BEES_PER_LEVEL          = 3;\n+\n+    /**\n+     * Experience given per beehive harvested.\n+     */\n+    private static final double EXP_PER_HARVEST = 5.0;\n+\n+    /**\n+     * Distance two animals need to be inside to breed.\n+     */\n+    private static final int DISTANCE_TO_BREED = 10;\n+\n+    /**\n+     * Distance around a hive wher bees wander.\n+     */\n+    private static final int HIVE_BEE_RADIUS = 22;\n+\n+    /**\n+     * Delays used to setDelay()\n+     */\n+    private static final int DECIDING_DELAY   = 40;\n+    private static final int NO_ANIMALS_DELAY = 100;\n+    private static final int BREEDING_DELAY   = 40;\n+\n+    /**\n+     * Creates the abstract part of the AI. Always use this constructor!\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkBeekeeper(@NotNull JobBeekeeper job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(PREPARING, this::prepareForHerding, 1),\n+          new AITarget(DECIDE, this::decideWhatToDo, 1),\n+          new AITarget(HERDER_BREED, this::breedAnimals, 1),\n+          new AITarget(BEEKEEPER_HARVEST, this::harvestHoney, TICKS_SECOND)\n+        );\n+    }\n+\n+    public boolean maxAnimals(final List<BeeEntity> allAnimals)\n+    {\n+        if (getOwnBuilding() != null)\n+        {\n+            final int numOfBeesInHive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .map(world::getTileEntity)\n+                                          .filter(Objects::nonNull)\n+                                          .map(BeehiveTileEntity.class::cast)\n+                                          .mapToInt(BeehiveTileEntity::func_226971_j_)\n+                                          .sum();\n+            final int numOfAnimals = allAnimals.size();\n+            final int maxAnimals = getOwnBuilding().getBuildingLevel() * BEES_PER_LEVEL;\n+\n+            return (numOfAnimals + numOfBeesInHive) > maxAnimals;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Prepares the beekeeper for herding\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState prepareForHerding()\n+    {\n+        setDelay(DECIDING_DELAY);\n+        if (getOwnBuilding(BuildingBeekeeper.class).shouldHarvestHoneycombs())\n+        {\n+            if (checkForToolOrWeapon(ToolType.SHEARS))\n+            {\n+                return getState();\n+            }\n+        }\n+\n+        checkIfRequestForItemExistOrCreateAsynch(new ItemStack(Items.GLASS_BOTTLE));\n+        checkIfRequestForTagExistOrCreateAsynch(ItemTags.field_226159_I_, 16, FLOWERS);\n+\n+        return DECIDE;\n+    }\n+\n+    /**\n+     * Redirects the beekeeper to their building.\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState startWorkingAtOwnBuilding()\n+    {\n+        worker.getCitizenStatusHandler().setLatestStatus(new TranslationTextComponent(TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_WORKER_GOINGTOHUT));\n+        if (walkToBuilding())\n+        {\n+            return getState();\n+        }\n+        return PREPARING;\n+    }\n+\n+    /**\n+     * Decides what job the beekeeper should switch to, breeding or harvesting.\n+     *\n+     * @return The next {@link IAIState} the beekeeper should switch to, after executing this method.\n+     */\n+    private IAIState decideWhatToDo()\n+    {\n+        setDelay(DECIDING_DELAY);\n+\n+        final Optional<BlockPos> hive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .filter(pos -> BeehiveTileEntity.func_226964_a_(world.getBlockState(pos)) >= 5)\n+                                          .findFirst();\n+        if (hive.isPresent())\n+        {\n+            return BEEKEEPER_HARVEST;\n+        }\n+\n+        final List<BeeEntity> bees = new ArrayList<>(searchForAnimals());\n+\n+        if (bees.isEmpty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MTg2NA==", "bodyText": "how should I implement this? with a counter variable?", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r436751864", "createdAt": "2020-06-08T14:27:49Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "diffHunk": "@@ -0,0 +1,460 @@\n+package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n+\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.constant.ToolType;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.entity.passive.AnimalEntity;\n+import net.minecraft.entity.passive.BeeEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tileentity.BeehiveTileEntity;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.ToolLevelConstants.TOOL_LEVEL_WOOD_OR_GOLD;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_BEEKEEPER_HARVESTING;\n+import static com.minecolonies.api.util.constant.TranslationConstants.FLOWERS;\n+\n+public class EntityAIWorkBeekeeper extends AbstractEntityAIInteract<JobBeekeeper>\n+{\n+    /**\n+     * Amount of animals needed to bread.\n+     */\n+    private static final int NUM_OF_ANIMALS_TO_BREED = 2;\n+    private static final int BEES_PER_LEVEL          = 3;\n+\n+    /**\n+     * Experience given per beehive harvested.\n+     */\n+    private static final double EXP_PER_HARVEST = 5.0;\n+\n+    /**\n+     * Distance two animals need to be inside to breed.\n+     */\n+    private static final int DISTANCE_TO_BREED = 10;\n+\n+    /**\n+     * Distance around a hive wher bees wander.\n+     */\n+    private static final int HIVE_BEE_RADIUS = 22;\n+\n+    /**\n+     * Delays used to setDelay()\n+     */\n+    private static final int DECIDING_DELAY   = 40;\n+    private static final int NO_ANIMALS_DELAY = 100;\n+    private static final int BREEDING_DELAY   = 40;\n+\n+    /**\n+     * Creates the abstract part of the AI. Always use this constructor!\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkBeekeeper(@NotNull JobBeekeeper job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(PREPARING, this::prepareForHerding, 1),\n+          new AITarget(DECIDE, this::decideWhatToDo, 1),\n+          new AITarget(HERDER_BREED, this::breedAnimals, 1),\n+          new AITarget(BEEKEEPER_HARVEST, this::harvestHoney, TICKS_SECOND)\n+        );\n+    }\n+\n+    public boolean maxAnimals(final List<BeeEntity> allAnimals)\n+    {\n+        if (getOwnBuilding() != null)\n+        {\n+            final int numOfBeesInHive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .map(world::getTileEntity)\n+                                          .filter(Objects::nonNull)\n+                                          .map(BeehiveTileEntity.class::cast)\n+                                          .mapToInt(BeehiveTileEntity::func_226971_j_)\n+                                          .sum();\n+            final int numOfAnimals = allAnimals.size();\n+            final int maxAnimals = getOwnBuilding().getBuildingLevel() * BEES_PER_LEVEL;\n+\n+            return (numOfAnimals + numOfBeesInHive) > maxAnimals;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Prepares the beekeeper for herding\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState prepareForHerding()\n+    {\n+        setDelay(DECIDING_DELAY);\n+        if (getOwnBuilding(BuildingBeekeeper.class).shouldHarvestHoneycombs())\n+        {\n+            if (checkForToolOrWeapon(ToolType.SHEARS))\n+            {\n+                return getState();\n+            }\n+        }\n+\n+        checkIfRequestForItemExistOrCreateAsynch(new ItemStack(Items.GLASS_BOTTLE));\n+        checkIfRequestForTagExistOrCreateAsynch(ItemTags.field_226159_I_, 16, FLOWERS);\n+\n+        return DECIDE;\n+    }\n+\n+    /**\n+     * Redirects the beekeeper to their building.\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState startWorkingAtOwnBuilding()\n+    {\n+        worker.getCitizenStatusHandler().setLatestStatus(new TranslationTextComponent(TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_WORKER_GOINGTOHUT));\n+        if (walkToBuilding())\n+        {\n+            return getState();\n+        }\n+        return PREPARING;\n+    }\n+\n+    /**\n+     * Decides what job the beekeeper should switch to, breeding or harvesting.\n+     *\n+     * @return The next {@link IAIState} the beekeeper should switch to, after executing this method.\n+     */\n+    private IAIState decideWhatToDo()\n+    {\n+        setDelay(DECIDING_DELAY);\n+\n+        final Optional<BlockPos> hive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .filter(pos -> BeehiveTileEntity.func_226964_a_(world.getBlockState(pos)) >= 5)\n+                                          .findFirst();\n+        if (hive.isPresent())\n+        {\n+            return BEEKEEPER_HARVEST;\n+        }\n+\n+        final List<BeeEntity> bees = new ArrayList<>(searchForAnimals());\n+\n+        if (bees.isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTc5OQ=="}, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMDk0NQ==", "bodyText": "Better probably if hive is empty. Then add the interaction.", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443210945", "createdAt": "2020-06-21T11:40:24Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "diffHunk": "@@ -0,0 +1,460 @@\n+package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n+\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.constant.ToolType;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.entity.passive.AnimalEntity;\n+import net.minecraft.entity.passive.BeeEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tileentity.BeehiveTileEntity;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.ToolLevelConstants.TOOL_LEVEL_WOOD_OR_GOLD;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_BEEKEEPER_HARVESTING;\n+import static com.minecolonies.api.util.constant.TranslationConstants.FLOWERS;\n+\n+public class EntityAIWorkBeekeeper extends AbstractEntityAIInteract<JobBeekeeper>\n+{\n+    /**\n+     * Amount of animals needed to bread.\n+     */\n+    private static final int NUM_OF_ANIMALS_TO_BREED = 2;\n+    private static final int BEES_PER_LEVEL          = 3;\n+\n+    /**\n+     * Experience given per beehive harvested.\n+     */\n+    private static final double EXP_PER_HARVEST = 5.0;\n+\n+    /**\n+     * Distance two animals need to be inside to breed.\n+     */\n+    private static final int DISTANCE_TO_BREED = 10;\n+\n+    /**\n+     * Distance around a hive wher bees wander.\n+     */\n+    private static final int HIVE_BEE_RADIUS = 22;\n+\n+    /**\n+     * Delays used to setDelay()\n+     */\n+    private static final int DECIDING_DELAY   = 40;\n+    private static final int NO_ANIMALS_DELAY = 100;\n+    private static final int BREEDING_DELAY   = 40;\n+\n+    /**\n+     * Creates the abstract part of the AI. Always use this constructor!\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkBeekeeper(@NotNull JobBeekeeper job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(PREPARING, this::prepareForHerding, 1),\n+          new AITarget(DECIDE, this::decideWhatToDo, 1),\n+          new AITarget(HERDER_BREED, this::breedAnimals, 1),\n+          new AITarget(BEEKEEPER_HARVEST, this::harvestHoney, TICKS_SECOND)\n+        );\n+    }\n+\n+    public boolean maxAnimals(final List<BeeEntity> allAnimals)\n+    {\n+        if (getOwnBuilding() != null)\n+        {\n+            final int numOfBeesInHive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .map(world::getTileEntity)\n+                                          .filter(Objects::nonNull)\n+                                          .map(BeehiveTileEntity.class::cast)\n+                                          .mapToInt(BeehiveTileEntity::func_226971_j_)\n+                                          .sum();\n+            final int numOfAnimals = allAnimals.size();\n+            final int maxAnimals = getOwnBuilding().getBuildingLevel() * BEES_PER_LEVEL;\n+\n+            return (numOfAnimals + numOfBeesInHive) > maxAnimals;\n+        }\n+        return true;\n+    }\n+\n+    /**\n+     * Prepares the beekeeper for herding\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState prepareForHerding()\n+    {\n+        setDelay(DECIDING_DELAY);\n+        if (getOwnBuilding(BuildingBeekeeper.class).shouldHarvestHoneycombs())\n+        {\n+            if (checkForToolOrWeapon(ToolType.SHEARS))\n+            {\n+                return getState();\n+            }\n+        }\n+\n+        checkIfRequestForItemExistOrCreateAsynch(new ItemStack(Items.GLASS_BOTTLE));\n+        checkIfRequestForTagExistOrCreateAsynch(ItemTags.field_226159_I_, 16, FLOWERS);\n+\n+        return DECIDE;\n+    }\n+\n+    /**\n+     * Redirects the beekeeper to their building.\n+     *\n+     * @return The next {@link IAIState}.\n+     */\n+    private IAIState startWorkingAtOwnBuilding()\n+    {\n+        worker.getCitizenStatusHandler().setLatestStatus(new TranslationTextComponent(TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_WORKER_GOINGTOHUT));\n+        if (walkToBuilding())\n+        {\n+            return getState();\n+        }\n+        return PREPARING;\n+    }\n+\n+    /**\n+     * Decides what job the beekeeper should switch to, breeding or harvesting.\n+     *\n+     * @return The next {@link IAIState} the beekeeper should switch to, after executing this method.\n+     */\n+    private IAIState decideWhatToDo()\n+    {\n+        setDelay(DECIDING_DELAY);\n+\n+        final Optional<BlockPos> hive = getOwnBuilding(BuildingBeekeeper.class)\n+                                          .getHives()\n+                                          .stream()\n+                                          .filter(pos -> BeehiveTileEntity.func_226964_a_(world.getBlockState(pos)) >= 5)\n+                                          .findFirst();\n+        if (hive.isPresent())\n+        {\n+            return BEEKEEPER_HARVEST;\n+        }\n+\n+        final List<BeeEntity> bees = new ArrayList<>(searchForAnimals());\n+\n+        if (bees.isEmpty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0NTc5OQ=="}, "originalCommit": {"oid": "8792a238385e153b0da333ec8dd66949d4cda9f3"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTQ4MjE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTozNjowOFrOGmrbeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMjo0MTowNFrOGmrwCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMDYxNw==", "bodyText": "you should be able to simplify this one here now.", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443210617", "createdAt": "2020-06-21T11:36:08Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -1505,6 +1507,39 @@ public boolean checkIfRequestForItemExistOrCreateAsynch(@NotNull final ItemStack\n         return false;\n     }\n \n+    /**\n+     * Check if a tag has been requested already or is in the inventory. If not in the inventory and not requested already, create request\n+     *\n+     * @param tag the requested tag.\n+     * @return true if in the inventory, else false.\n+     */\n+    public boolean checkIfRequestForTagExistOrCreateAsynch(@NotNull final Tag<Item> tag, final int count)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf28a4d9b727d033231515d2ee7a2a2e8cdddd73"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxNTg4MQ==", "bodyText": "it already is", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443215881", "createdAt": "2020-06-21T12:41:04Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -1505,6 +1507,39 @@ public boolean checkIfRequestForItemExistOrCreateAsynch(@NotNull final ItemStack\n         return false;\n     }\n \n+    /**\n+     * Check if a tag has been requested already or is in the inventory. If not in the inventory and not requested already, create request\n+     *\n+     * @param tag the requested tag.\n+     * @return true if in the inventory, else false.\n+     */\n+    public boolean checkIfRequestForTagExistOrCreateAsynch(@NotNull final Tag<Item> tag, final int count)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMDYxNw=="}, "originalCommit": {"oid": "cf28a4d9b727d033231515d2ee7a2a2e8cdddd73"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTQ4NDEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTozOToyN1rOGmrcdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTozOToyN1rOGmrcdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMDg3MA==", "bodyText": "= ?", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443210870", "createdAt": "2020-06-21T11:39:27Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/citizen/beekeeper/EntityAIWorkBeekeeper.java", "diffHunk": "@@ -0,0 +1,496 @@\n+package com.minecolonies.coremod.entity.ai.citizen.beekeeper;\n+\n+import com.minecolonies.api.entity.ai.statemachine.AITarget;\n+import com.minecolonies.api.entity.ai.statemachine.states.IAIState;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.constant.ToolType;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingBeekeeper;\n+import com.minecolonies.coremod.colony.jobs.JobBeekeeper;\n+import com.minecolonies.coremod.entity.ai.basic.AbstractEntityAIInteract;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.passive.AnimalEntity;\n+import net.minecraft.entity.passive.BeeEntity;\n+import net.minecraft.item.Item;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.item.Items;\n+import net.minecraft.state.properties.BlockStateProperties;\n+import net.minecraft.tags.ItemTags;\n+import net.minecraft.tileentity.BeehiveTileEntity;\n+import net.minecraft.util.Hand;\n+import net.minecraft.util.math.AxisAlignedBB;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.entity.ai.statemachine.states.AIWorkerState.*;\n+import static com.minecolonies.api.util.constant.Constants.TICKS_SECOND;\n+import static com.minecolonies.api.util.constant.ToolLevelConstants.TOOL_LEVEL_WOOD_OR_GOLD;\n+import static com.minecolonies.api.util.constant.TranslationConstants.COM_MINECOLONIES_COREMOD_STATUS_BEEKEEPER_HARVESTING;\n+\n+/**\n+ * Beekeeper AI class.\n+ */\n+public class EntityAIWorkBeekeeper extends AbstractEntityAIInteract<JobBeekeeper, BuildingBeekeeper>\n+{\n+    /**\n+     * Amount of animals needed to bread.\n+     */\n+    private static final int NUM_OF_ANIMALS_TO_BREED = 2;\n+    private static final int BEES_PER_LEVEL          = 3;\n+\n+    /**\n+     * Experience given per beehive harvested.\n+     */\n+    private static final double EXP_PER_HARVEST = 5.0;\n+\n+    /**\n+     * Distance two animals need to be inside to breed.\n+     */\n+    private static final int DISTANCE_TO_BREED = 10;\n+\n+    /**\n+     * Distance around a hive wher bees wander.\n+     */\n+    private static final int HIVE_BEE_RADIUS = 22;\n+\n+    /**\n+     * Delays used to setDelay()\n+     */\n+    private static final int DECIDING_DELAY   = 40;\n+    private static final int NO_ANIMALS_DELAY = 100;\n+    private static final int BREEDING_DELAY   = 40;\n+\n+    /**\n+     * Creates the abstract part of the AI. Always use this constructor!\n+     *\n+     * @param job the job to fulfill\n+     */\n+    public EntityAIWorkBeekeeper(@NotNull JobBeekeeper job)\n+    {\n+        super(job);\n+        super.registerTargets(\n+          new AITarget(IDLE, START_WORKING, 1),\n+          new AITarget(START_WORKING, this::startWorkingAtOwnBuilding, TICKS_SECOND),\n+          new AITarget(PREPARING, this::prepareForHerding, 1),\n+          new AITarget(DECIDE, this::decideWhatToDo, 1),\n+          new AITarget(HERDER_BREED, this::breedAnimals, 1),\n+          new AITarget(BEEKEEPER_HARVEST, this::harvestHoney, TICKS_SECOND)\n+        );\n+    }\n+\n+    /**\n+     * Checks the beehives/beenests and their surroundings if the maximum number of bees is reached\n+     *\n+     * @param allBees all bees in the area around the beehives/beenests\n+     * @return true if the maximum nuber of bees is reached els false\n+     */\n+    private boolean hasMaxAnimals(final List<BeeEntity> allBees)\n+    {\n+        if (getOwnBuilding() != null)\n+        {\n+            final int numOfBeesInHive = getOwnBuilding()\n+                                          .getHives()\n+                                          .stream()\n+                                          .map(world::getTileEntity)\n+                                          .filter(Objects::nonNull)\n+                                          .map(BeehiveTileEntity.class::cast)\n+                                          .mapToInt(BeehiveTileEntity::getBeeCount)\n+                                          .sum();\n+            final int numOfAnimals = allBees.size();\n+            final int maxAnimals = getOwnBuilding().getBuildingLevel() * BEES_PER_LEVEL;\n+\n+            return (numOfAnimals + numOfBeesInHive) > maxAnimals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf28a4d9b727d033231515d2ee7a2a2e8cdddd73"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTU0NjM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzoyNTo0MFrOGmr9jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzo0MToxM1rOGmsCnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxOTM0MQ==", "bodyText": "You can here filter it by TagRequest instead of Deliverable already, that's what I meant", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443219341", "createdAt": "2020-06-21T13:25:40Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -1505,6 +1507,39 @@ public boolean checkIfRequestForItemExistOrCreateAsynch(@NotNull final ItemStack\n         return false;\n     }\n \n+    /**\n+     * Check if a tag has been requested already or is in the inventory. If not in the inventory and not requested already, create request\n+     *\n+     * @param tag the requested tag.\n+     * @return true if in the inventory, else false.\n+     */\n+    public boolean checkIfRequestForTagExistOrCreateAsynch(@NotNull final Tag<Item> tag, final int count)\n+    {\n+        if (InventoryUtils.hasItemInItemHandler(worker.getInventoryCitizen(), stack -> stack.getItem().isIn(tag) && stack.getCount() >= count))\n+        {\n+            return true;\n+        }\n+\n+        if (InventoryUtils.getItemCountInProvider(getOwnBuilding(),\n+          itemStack -> itemStack.getItem().isIn(tag)) >= count &&\n+              InventoryUtils.transferXOfFirstSlotInProviderWithIntoNextFreeSlotInItemHandler(\n+                getOwnBuilding(), itemStack -> itemStack.getItem().isIn(tag),\n+                        count,\n+                        worker.getInventoryCitizen()))\n+        {\n+            return true;\n+        }\n+\n+        if (getOwnBuilding().getOpenRequestsOfTypeFiltered(worker.getCitizenData(), TypeConstants.DELIVERABLE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf28a4d9b727d033231515d2ee7a2a2e8cdddd73"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxOTkxNQ==", "bodyText": "So I should create a new entry in TypeConstants", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443219915", "createdAt": "2020-06-21T13:33:07Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -1505,6 +1507,39 @@ public boolean checkIfRequestForItemExistOrCreateAsynch(@NotNull final ItemStack\n         return false;\n     }\n \n+    /**\n+     * Check if a tag has been requested already or is in the inventory. If not in the inventory and not requested already, create request\n+     *\n+     * @param tag the requested tag.\n+     * @return true if in the inventory, else false.\n+     */\n+    public boolean checkIfRequestForTagExistOrCreateAsynch(@NotNull final Tag<Item> tag, final int count)\n+    {\n+        if (InventoryUtils.hasItemInItemHandler(worker.getInventoryCitizen(), stack -> stack.getItem().isIn(tag) && stack.getCount() >= count))\n+        {\n+            return true;\n+        }\n+\n+        if (InventoryUtils.getItemCountInProvider(getOwnBuilding(),\n+          itemStack -> itemStack.getItem().isIn(tag)) >= count &&\n+              InventoryUtils.transferXOfFirstSlotInProviderWithIntoNextFreeSlotInItemHandler(\n+                getOwnBuilding(), itemStack -> itemStack.getItem().isIn(tag),\n+                        count,\n+                        worker.getInventoryCitizen()))\n+        {\n+            return true;\n+        }\n+\n+        if (getOwnBuilding().getOpenRequestsOfTypeFiltered(worker.getCitizenData(), TypeConstants.DELIVERABLE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxOTM0MQ=="}, "originalCommit": {"oid": "cf28a4d9b727d033231515d2ee7a2a2e8cdddd73"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyMDYzOQ==", "bodyText": "yes", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443220639", "createdAt": "2020-06-21T13:41:13Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIBasic.java", "diffHunk": "@@ -1505,6 +1507,39 @@ public boolean checkIfRequestForItemExistOrCreateAsynch(@NotNull final ItemStack\n         return false;\n     }\n \n+    /**\n+     * Check if a tag has been requested already or is in the inventory. If not in the inventory and not requested already, create request\n+     *\n+     * @param tag the requested tag.\n+     * @return true if in the inventory, else false.\n+     */\n+    public boolean checkIfRequestForTagExistOrCreateAsynch(@NotNull final Tag<Item> tag, final int count)\n+    {\n+        if (InventoryUtils.hasItemInItemHandler(worker.getInventoryCitizen(), stack -> stack.getItem().isIn(tag) && stack.getCount() >= count))\n+        {\n+            return true;\n+        }\n+\n+        if (InventoryUtils.getItemCountInProvider(getOwnBuilding(),\n+          itemStack -> itemStack.getItem().isIn(tag)) >= count &&\n+              InventoryUtils.transferXOfFirstSlotInProviderWithIntoNextFreeSlotInItemHandler(\n+                getOwnBuilding(), itemStack -> itemStack.getItem().isIn(tag),\n+                        count,\n+                        worker.getInventoryCitizen()))\n+        {\n+            return true;\n+        }\n+\n+        if (getOwnBuilding().getOpenRequestsOfTypeFiltered(worker.getCitizenData(), TypeConstants.DELIVERABLE,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxOTM0MQ=="}, "originalCommit": {"oid": "cf28a4d9b727d033231515d2ee7a2a2e8cdddd73"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTc0ODU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/apiimp/initializer/InteractionValidatorInitializer.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxODo1MTo1MFrOGmtngw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxOTozNTozOVrOGmt11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjQ2Nw==", "bodyText": "simplify this to a getHives().isEmpty() on the building, that way you don't use expensive area checks or accidentally load chunks. Let the AI do the checking", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443246467", "createdAt": "2020-06-21T18:51:50Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/apiimp/initializer/InteractionValidatorInitializer.java", "diffHunk": "@@ -177,6 +180,18 @@ public static void init()\n         InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(BAKER_HAS_NO_FURNACES_MESSAGE),\n           citizen -> citizen.getWorkBuilding() instanceof BuildingBaker && ((BuildingBaker) citizen.getWorkBuilding()).getFurnaces().isEmpty());\n \n+        InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(NO_BEES),\n+          citizen -> citizen.getWorkBuilding() instanceof BuildingBeekeeper &&\n+                       EntityAIWorkBeekeeper.searchForAnimals(citizen.getColony().getWorld(), (BuildingBeekeeper) citizen.getWorkBuilding()).isEmpty() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5589914b0726f2213db3d8d8ea4e5cb078f6325d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0Nzg0MA==", "bodyText": "well but then the interaction doesn't check the bees outside the hive", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443247840", "createdAt": "2020-06-21T19:06:41Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/apiimp/initializer/InteractionValidatorInitializer.java", "diffHunk": "@@ -177,6 +180,18 @@ public static void init()\n         InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(BAKER_HAS_NO_FURNACES_MESSAGE),\n           citizen -> citizen.getWorkBuilding() instanceof BuildingBaker && ((BuildingBaker) citizen.getWorkBuilding()).getFurnaces().isEmpty());\n \n+        InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(NO_BEES),\n+          citizen -> citizen.getWorkBuilding() instanceof BuildingBeekeeper &&\n+                       EntityAIWorkBeekeeper.searchForAnimals(citizen.getColony().getWorld(), (BuildingBeekeeper) citizen.getWorkBuilding()).isEmpty() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjQ2Nw=="}, "originalCommit": {"oid": "5589914b0726f2213db3d8d8ea4e5cb078f6325d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0ODEwMg==", "bodyText": "isnt that fine? like do there have to be bees outside", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443248102", "createdAt": "2020-06-21T19:10:18Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/apiimp/initializer/InteractionValidatorInitializer.java", "diffHunk": "@@ -177,6 +180,18 @@ public static void init()\n         InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(BAKER_HAS_NO_FURNACES_MESSAGE),\n           citizen -> citizen.getWorkBuilding() instanceof BuildingBaker && ((BuildingBaker) citizen.getWorkBuilding()).getFurnaces().isEmpty());\n \n+        InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(NO_BEES),\n+          citizen -> citizen.getWorkBuilding() instanceof BuildingBeekeeper &&\n+                       EntityAIWorkBeekeeper.searchForAnimals(citizen.getColony().getWorld(), (BuildingBeekeeper) citizen.getWorkBuilding()).isEmpty() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjQ2Nw=="}, "originalCommit": {"oid": "5589914b0726f2213db3d8d8ea4e5cb078f6325d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0ODI1Ng==", "bodyText": "well this is to tell the player that the beekeeper has no bees but if there are bees around the hive they are there so players would see it as a bug", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443248256", "createdAt": "2020-06-21T19:12:35Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/apiimp/initializer/InteractionValidatorInitializer.java", "diffHunk": "@@ -177,6 +180,18 @@ public static void init()\n         InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(BAKER_HAS_NO_FURNACES_MESSAGE),\n           citizen -> citizen.getWorkBuilding() instanceof BuildingBaker && ((BuildingBaker) citizen.getWorkBuilding()).getFurnaces().isEmpty());\n \n+        InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(NO_BEES),\n+          citizen -> citizen.getWorkBuilding() instanceof BuildingBeekeeper &&\n+                       EntityAIWorkBeekeeper.searchForAnimals(citizen.getColony().getWorld(), (BuildingBeekeeper) citizen.getWorkBuilding()).isEmpty() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjQ2Nw=="}, "originalCommit": {"oid": "5589914b0726f2213db3d8d8ea4e5cb078f6325d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0ODU5Mw==", "bodyText": "doesnt this also happen when the bee's happen to be inside the hives?", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443248593", "createdAt": "2020-06-21T19:16:34Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/apiimp/initializer/InteractionValidatorInitializer.java", "diffHunk": "@@ -177,6 +180,18 @@ public static void init()\n         InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(BAKER_HAS_NO_FURNACES_MESSAGE),\n           citizen -> citizen.getWorkBuilding() instanceof BuildingBaker && ((BuildingBaker) citizen.getWorkBuilding()).getFurnaces().isEmpty());\n \n+        InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(NO_BEES),\n+          citizen -> citizen.getWorkBuilding() instanceof BuildingBeekeeper &&\n+                       EntityAIWorkBeekeeper.searchForAnimals(citizen.getColony().getWorld(), (BuildingBeekeeper) citizen.getWorkBuilding()).isEmpty() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjQ2Nw=="}, "originalCommit": {"oid": "5589914b0726f2213db3d8d8ea4e5cb078f6325d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0OTIwMA==", "bodyText": "no that's what the other part is for\n((BuildingBeekeeper) citizen.getWorkBuilding())\n                         .getHives()\n                         .stream()\n                         .map(citizen.getColony().getWorld()::getTileEntity)\n                         .filter(tileEntity -> tileEntity instanceof BeehiveTileEntity)\n                         .map(tileEntity -> (BeehiveTileEntity) tileEntity)\n                         .mapToInt(BeehiveTileEntity::getBeeCount)\n                         .sum() <= 0)", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443249200", "createdAt": "2020-06-21T19:24:45Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/apiimp/initializer/InteractionValidatorInitializer.java", "diffHunk": "@@ -177,6 +180,18 @@ public static void init()\n         InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(BAKER_HAS_NO_FURNACES_MESSAGE),\n           citizen -> citizen.getWorkBuilding() instanceof BuildingBaker && ((BuildingBaker) citizen.getWorkBuilding()).getFurnaces().isEmpty());\n \n+        InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(NO_BEES),\n+          citizen -> citizen.getWorkBuilding() instanceof BuildingBeekeeper &&\n+                       EntityAIWorkBeekeeper.searchForAnimals(citizen.getColony().getWorld(), (BuildingBeekeeper) citizen.getWorkBuilding()).isEmpty() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjQ2Nw=="}, "originalCommit": {"oid": "5589914b0726f2213db3d8d8ea4e5cb078f6325d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0OTc3MQ==", "bodyText": "only the hives is fine. About the bees the players can't do anything what matters is if there are no hives marked with the tool", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443249771", "createdAt": "2020-06-21T19:32:04Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/apiimp/initializer/InteractionValidatorInitializer.java", "diffHunk": "@@ -177,6 +180,18 @@ public static void init()\n         InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(BAKER_HAS_NO_FURNACES_MESSAGE),\n           citizen -> citizen.getWorkBuilding() instanceof BuildingBaker && ((BuildingBaker) citizen.getWorkBuilding()).getFurnaces().isEmpty());\n \n+        InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(NO_BEES),\n+          citizen -> citizen.getWorkBuilding() instanceof BuildingBeekeeper &&\n+                       EntityAIWorkBeekeeper.searchForAnimals(citizen.getColony().getWorld(), (BuildingBeekeeper) citizen.getWorkBuilding()).isEmpty() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjQ2Nw=="}, "originalCommit": {"oid": "5589914b0726f2213db3d8d8ea4e5cb078f6325d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI1MDEzNQ==", "bodyText": "ok so change it from being no bees to no hives", "url": "https://github.com/ldtteam/minecolonies/pull/5127#discussion_r443250135", "createdAt": "2020-06-21T19:35:39Z", "author": {"login": "Minecraftschurli"}, "path": "src/main/java/com/minecolonies/apiimp/initializer/InteractionValidatorInitializer.java", "diffHunk": "@@ -177,6 +180,18 @@ public static void init()\n         InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(BAKER_HAS_NO_FURNACES_MESSAGE),\n           citizen -> citizen.getWorkBuilding() instanceof BuildingBaker && ((BuildingBaker) citizen.getWorkBuilding()).getFurnaces().isEmpty());\n \n+        InteractionValidatorRegistry.registerStandardPredicate(new TranslationTextComponent(NO_BEES),\n+          citizen -> citizen.getWorkBuilding() instanceof BuildingBeekeeper &&\n+                       EntityAIWorkBeekeeper.searchForAnimals(citizen.getColony().getWorld(), (BuildingBeekeeper) citizen.getWorkBuilding()).isEmpty() &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI0NjQ2Nw=="}, "originalCommit": {"oid": "5589914b0726f2213db3d8d8ea4e5cb078f6325d"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3086, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}