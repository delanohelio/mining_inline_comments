{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMjk2ODc2", "number": 5391, "title": "Let the warehouse use the rack-maps for speed", "bodyText": "Changes proposed in this pull request:\n\nModify the warehouse resolver to use a fast path for single stack requests\n\nReview please", "createdAt": "2020-07-16T15:43:04Z", "url": "https://github.com/ldtteam/minecolonies/pull/5391", "merged": true, "mergeCommit": {"oid": "0a99fa6018d89192ad1694805bb85fe225e38cd8"}, "closed": true, "closedAt": "2020-07-25T07:42:26Z", "author": {"login": "Mekle001"}, "timelineItems": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1hJTlAH2gAyNDUwMjk2ODc2OmZjMDE4MmFkNWVjMDNjZTkzNjZiNjc2MWIyYzZiYTMxY2MyOTFlYzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4MqPBAFqTQ1NTIzMzExMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fc0182ad5ec03ce9366b6761b2c6ba31cc291ec7", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/fc0182ad5ec03ce9366b6761b2c6ba31cc291ec7", "committedDate": "2020-07-16T15:41:06Z", "message": "Let the warehouse use the rack-maps for speed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a5de31895004d4d6a31caaf4a149263ceec9ab5", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/1a5de31895004d4d6a31caaf4a149263ceec9ab5", "committedDate": "2020-07-16T17:40:11Z", "message": "Speed up Racks a bit."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDczNjM0", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-450073634", "createdAt": "2020-07-16T17:42:44Z", "commit": {"oid": "1a5de31895004d4d6a31caaf4a149263ceec9ab5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0Mjo0NFrOGy1oIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0Mjo0NFrOGy1oIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDYxMA==", "bodyText": "lol, easy one", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r455960610", "createdAt": "2020-07-16T17:42:44Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityRack.java", "diffHunk": "@@ -133,15 +133,7 @@ public int getFreeSlots()\n     @Override\n     public boolean hasItemStack(final ItemStack stack, final boolean ignoreDamageValue)\n     {\n-        final ItemStorage compareStorage = new ItemStorage(stack, ignoreDamageValue);\n-        for (final Map.Entry<ItemStorage, Integer> entry : content.entrySet())\n-        {\n-            if (compareStorage.equals(entry.getKey()))\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return content.get(new ItemStorage(stack, ignoreDamageValue)) != null;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a5de31895004d4d6a31caaf4a149263ceec9ab5"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMDc0OTQx", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-450074941", "createdAt": "2020-07-16T17:44:29Z", "commit": {"oid": "1a5de31895004d4d6a31caaf4a149263ceec9ab5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6810eb9b6ca24daf9be8927fbc2098251eba3bcb", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/6810eb9b6ca24daf9be8927fbc2098251eba3bcb", "committedDate": "2020-07-16T17:50:40Z", "message": "Review Feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMDQ0NDE5", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-451044419", "createdAt": "2020-07-18T09:21:20Z", "commit": {"oid": "6810eb9b6ca24daf9be8927fbc2098251eba3bcb"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/ef02499a178c6c561f69f352a95254594fd63146", "committedDate": "2020-07-19T02:12:21Z", "message": "Change implementation as recommended by Orion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cecb1938a6bc1a0a93ae8cb91e69cb19a7d20b7", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/6cecb1938a6bc1a0a93ae8cb91e69cb19a7d20b7", "committedDate": "2020-07-19T04:24:58Z", "message": "Boost predicate resolution speed in warehouse"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTEwNzMy", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-451110732", "createdAt": "2020-07-19T08:30:55Z", "commit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMDo1NlrOGztr8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMDo1NlrOGztr8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg3OTA5MQ==", "bodyText": "the formatting in the file got messed up =D", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456879091", "createdAt": "2020-07-19T08:30:56Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/Stack.java", "diffHunk": "@@ -73,8 +77,7 @@ public Stack(@NotNull final ItemStack stack)\n      * @param count    the count.\n      * @param minCount the min count.\n      */\n-    public Stack(@NotNull final ItemStack stack, final int count, final int minCount)\n-    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTEwNzYy", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-451110762", "createdAt": "2020-07-19T08:31:18Z", "commit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMToxOFrOGztsGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMToxOFrOGztsGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg3OTEzMA==", "bodyText": "also formatting", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456879130", "createdAt": "2020-07-19T08:31:18Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/StackList.java", "diffHunk": "@@ -375,4 +375,9 @@ public String getDescription()\n     {\n         return description;\n     }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTEwODEy", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-451110812", "createdAt": "2020-07-19T08:32:02Z", "commit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMjowM1rOGztsVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMjowM1rOGztsVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg3OTE5MQ==", "bodyText": "We should have an AbstractWareHouseRequestResolver that has the parts both have in common", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456879191", "createdAt": "2020-07-19T08:32:03Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.request.RequestState;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.deliveryman.Delivery;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTEwODg0", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-451110884", "createdAt": "2020-07-19T08:32:59Z", "commit": {"oid": "6cecb1938a6bc1a0a93ae8cb91e69cb19a7d20b7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d0c16068a37ec6e386cc539e6d67edf34f4118b", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/1d0c16068a37ec6e386cc539e6d67edf34f4118b", "committedDate": "2020-07-19T14:50:32Z", "message": "add updatehandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16273d53efa2f2036ba34121a03b93f6b592b7f7", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/16273d53efa2f2036ba34121a03b93f6b592b7f7", "committedDate": "2020-07-19T14:51:32Z", "message": "Fix Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e017fa005e084f3698949305d98af366fbcd3da0", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/e017fa005e084f3698949305d98af366fbcd3da0", "committedDate": "2020-07-19T16:25:00Z", "message": "Refactor to abstract base for warehouse resolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4ba5d501f9968608f0c76fe444c236e101f1ad4", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/c4ba5d501f9968608f0c76fe444c236e101f1ad4", "committedDate": "2020-07-19T18:41:40Z", "message": "Fix individual stack resolution not honoring count"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225a66f0102222621b7eac36b26713bac4148572", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/225a66f0102222621b7eac36b26713bac4148572", "committedDate": "2020-07-19T18:44:22Z", "message": "Clean up extra imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca2286567bff3259bd47842161a09c62213e1852", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/ca2286567bff3259bd47842161a09c62213e1852", "committedDate": "2020-07-19T18:44:41Z", "message": "Remove debug code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTU1Mzk5", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-451155399", "createdAt": "2020-07-19T19:03:41Z", "commit": {"oid": "ca2286567bff3259bd47842161a09c62213e1852"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOTowMzo0MVrOGzxmYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOTowMzo0MVrOGzxmYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzIwMg==", "bodyText": "Couldn't this and the getPriority go into the abstract?", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456943202", "createdAt": "2020-07-19T19:03:41Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.core.AbstractWarehouseRequestResolver;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public class WarehouseConcreteRequestResolver extends AbstractWarehouseRequestResolver\n+{\n+    public WarehouseConcreteRequestResolver(\n+      @NotNull final ILocation location,\n+      @NotNull final IToken<?> token)\n+    {\n+        super(location, token);\n+    }\n+\n+    @Override\n+    public boolean canResolveRequest(@NotNull final IRequestManager manager, final IRequest<? extends IDeliverable> requestToCheck)\n+    {\n+        if (requestToCheck.getRequester() instanceof BuildingBasedRequester)\n+        {\n+            final BuildingBasedRequester requester = ((BuildingBasedRequester) requestToCheck.getRequester());\n+            final Optional<IRequester> building = requester.getBuilding(manager, requestToCheck.getRequester().getId());\n+            if (building.isPresent() && building.get() instanceof BuildingWareHouse)\n+            {\n+                return false;\n+            }\n+        }\n+\n+        if (!manager.getColony().getWorld().isRemote)\n+        {\n+            if (!isRequestChainValid(manager, requestToCheck))\n+            {\n+                return false;\n+            }\n+\n+            final Colony colony = (Colony) manager.getColony();\n+            final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n+            wareHouses.removeIf(Objects::isNull);\n+\n+            try\n+            {\n+                final IDeliverable deliverable = requestToCheck.getRequest();\n+                if(deliverable instanceof IConcreteDeliverable)\n+                {\n+                    for(final ItemStack possible : ((IConcreteDeliverable) deliverable).getRequestedItems())\n+                    {\n+                        final ItemStack stack = possible.copy();\n+                        stack.setCount(requestToCheck.getRequest().getMinimumCount());\n+                        return wareHouses.stream().anyMatch(wareHouse -> wareHouse.hasMatchingItemStackInWarehouse(stack));\n+                    }\n+                }\n+            }\n+            catch (Exception e)\n+            {\n+                Log.getLogger().error(e);\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    protected boolean isRequestFromSelf(final IRequest<?> requestToCheck)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca2286567bff3259bd47842161a09c62213e1852"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5cec31cd880ee20026cc1033242d872bcfcca4ac", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/5cec31cd880ee20026cc1033242d872bcfcca4ac", "committedDate": "2020-07-19T19:03:15Z", "message": "fix #5365 (#5407)\n\nFixes the issue of diverging opinions about the solid substitution blocks\r\nFixes confused miner"}, "afterCommit": {"oid": "caf4a647022cd7aba017c7f2fa60d19d87429460", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/caf4a647022cd7aba017c7f2fa60d19d87429460", "committedDate": "2020-07-19T19:10:49Z", "message": "fix #5365 (#5407)\n\nFixes the issue of diverging opinions about the solid substitution blocks\r\nFixes confused miner"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "caf4a647022cd7aba017c7f2fa60d19d87429460", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/caf4a647022cd7aba017c7f2fa60d19d87429460", "committedDate": "2020-07-19T19:10:49Z", "message": "fix #5365 (#5407)\n\nFixes the issue of diverging opinions about the solid substitution blocks\r\nFixes confused miner"}, "afterCommit": {"oid": "ca2286567bff3259bd47842161a09c62213e1852", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/ca2286567bff3259bd47842161a09c62213e1852", "committedDate": "2020-07-19T18:44:41Z", "message": "Remove debug code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2511a6381f742db7be26681db7a780433316941", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/a2511a6381f742db7be26681db7a780433316941", "committedDate": "2020-07-19T19:19:39Z", "message": "Remove excess getPriority"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05123fdf95f3e270e45d2baa05b07b6a4099ddd0", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/05123fdf95f3e270e45d2baa05b07b6a4099ddd0", "committedDate": "2020-07-19T19:25:44Z", "message": "Move isRequestFromSelf to abstract"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6b3e6c033d35ada6ffd871674e6214f964bb1e3", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/e6b3e6c033d35ada6ffd871674e6214f964bb1e3", "committedDate": "2020-07-19T22:16:44Z", "message": "Move even more to the abstract class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb2a349e01a3de0686f87bf49b364d878243bd13", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/fb2a349e01a3de0686f87bf49b364d878243bd13", "committedDate": "2020-07-19T23:06:57Z", "message": "Merge branch 'version/1.15' into fastresolve/warehouse1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/e9c64eec3c85b4c695c26aa850ce8b60b10ba776", "committedDate": "2020-07-20T14:58:33Z", "message": "Merge branch 'version/1.15' into fastresolve/warehouse1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxMTUzNTU5", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-451153559", "createdAt": "2020-07-19T18:35:13Z", "commit": {"oid": "e017fa005e084f3698949305d98af366fbcd3da0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozNToxM1rOGzxbjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOTo0MjoxN1rOG0cpow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDQzMA==", "bodyText": "Override the matches function from IDeliverable and make it the default implementation", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456940430", "createdAt": "2020-07-19T18:35:13Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/IConcreteDeliverable.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.minecolonies.api.colony.requestsystem.requestable;\n+\n+import net.minecraft.item.ItemStack;\n+\n+import java.util.List;\n+\n+/**\n+ * An {@link IConcreteDeliverable} is an Requestable that can be looked up fast in the warehouse, and delivered.\n+ */\n+public interface IConcreteDeliverable extends IDeliverable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e017fa005e084f3698949305d98af366fbcd3da0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0Njk1Mw==", "bodyText": "No this does not work.\nThis is completely hats on ass logic.\nWhy is this here!?!?!?", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457646953", "createdAt": "2020-07-20T19:39:16Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseRequestResolver.java", "diffHunk": "@@ -48,222 +32,20 @@ public WarehouseRequestResolver(\n     }\n \n     @Override\n-    public TypeToken<? extends IDeliverable> getRequestType()\n-    {\n-        return TypeConstants.DELIVERABLE;\n-    }\n-\n-    @Override\n-    public boolean canResolveRequest(@NotNull final IRequestManager manager, final IRequest<? extends IDeliverable> requestToCheck)\n-    {\n-        if (requestToCheck.getRequester() instanceof BuildingBasedRequester)\n-        {\n-            final BuildingBasedRequester requester = ((BuildingBasedRequester) requestToCheck.getRequester());\n-            final Optional<IRequester> building = requester.getBuilding(manager, requestToCheck.getRequester().getId());\n-            if (building.isPresent() && building.get() instanceof BuildingWareHouse)\n-            {\n-                return false;\n-            }\n-        }\n-\n-        if (!manager.getColony().getWorld().isRemote)\n-        {\n-            if (!isRequestChainValid(manager, requestToCheck))\n-            {\n-                return false;\n-            }\n-\n-            final Colony colony = (Colony) manager.getColony();\n-            final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n-            wareHouses.removeIf(Objects::isNull);\n-\n-            try\n-            {\n-                return wareHouses.stream()\n-                         .anyMatch(wareHouse -> wareHouse.hasMatchingItemStackInWarehouse(itemStack -> requestToCheck.getRequest().matches(itemStack),\n-                           requestToCheck.getRequest().getMinimumCount()));\n-            }\n-            catch (Exception e)\n-            {\n-                Log.getLogger().error(e);\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    public boolean isRequestChainValid(@NotNull final IRequestManager manager, final IRequest<?> requestToCheck)\n-    {\n-        if (requestToCheck.getRequester() instanceof WarehouseRequestResolver)\n-        {\n-            return false;\n-        }\n-\n-        if (!requestToCheck.hasParent())\n-        {\n-            return true;\n-        }\n-\n-        final IRequest<?> parentRequest = manager.getRequestForToken(requestToCheck.getParent());\n-\n-        //Should not happen but just to be sure.\n-        if (parentRequest == null)\n-        {\n-            return true;\n-        }\n-\n-        return isRequestChainValid(manager, parentRequest);\n-    }\n-\n-    /*\n-     * Moving the curly braces really makes the code hard to read.\n-     */\n-    @Nullable\n-    @Override\n-    @SuppressWarnings(\"squid:LeftCurlyBraceStartLineCheck\")\n-    public List<IToken<?>> attemptResolveRequest(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n+    protected boolean internalCanResolve(final Set<TileEntityWareHouse> wareHouses, final IRequest<? extends IDeliverable> requestToCheck)\n     {\n-        if (manager.getColony().getWorld().isRemote)\n-        {\n-            return Lists.newArrayList();\n-        }\n-\n-        if (!(manager.getColony() instanceof Colony))\n+        if(requestToCheck.getRequest() instanceof IConcreteDeliverable)\n         {\n-            return Lists.newArrayList();\n+            return false; \n         }\n-\n-        final Colony colony = (Colony) manager.getColony();\n-\n-        final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n-\n-        final int totalRequested = request.getRequest().getCount();\n-        int totalAvailable = 0;\n-        for (final TileEntityWareHouse tile : wareHouses)\n-        {\n-            final List<ItemStack> inv = tile.getMatchingItemStacksInWarehouse(itemStack -> request.getRequest().matches(itemStack));\n-            for (final ItemStack stack : inv)\n-            {\n-                if (!stack.isEmpty())\n-                {\n-                    totalAvailable += stack.getCount();\n-                }\n-            }\n-        }\n-\n-        if (totalAvailable >= totalRequested || totalAvailable >= request.getRequest().getMinimumCount())\n-        {\n-            return Lists.newArrayList();\n-        }\n-\n-        final int totalRemainingRequired = totalRequested - totalAvailable;\n-        final IDeliverable remainingRequest = request.getRequest().copyWithCount(totalRemainingRequired);\n-        return Lists.newArrayList(manager.createRequest(this, remainingRequest));\n-    }\n-\n-    @Override\n-    public void resolveRequest(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n-    {\n-        manager.updateRequestState(request.getId(), RequestState.RESOLVED);\n-    }\n-\n-    @Nullable\n-    @Override\n-    public List<IRequest<?>> getFollowupRequestForCompletion(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> completedRequest)\n-    {\n-        if (manager.getColony().getWorld().isRemote)\n-        {\n-            return null;\n-        }\n-\n-        final Colony colony = (Colony) manager.getColony();\n-        final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n-\n-        List<IRequest<?>> deliveries = Lists.newArrayList();\n-        int remainingCount = completedRequest.getRequest().getCount();\n-\n-        tileentities:\n-        for (final TileEntityWareHouse wareHouse : wareHouses)\n-        {\n-            final List<ItemStack> targetStacks = wareHouse.getMatchingItemStacksInWarehouse(itemStack -> completedRequest.getRequest().matches(itemStack));\n-            for (final ItemStack stack :\n-              targetStacks)\n-            {\n-                if (ItemStackUtils.isEmpty(stack))\n-                {\n-                    continue;\n-                }\n-\n-                final ItemStack matchingStack = stack.copy();\n-                matchingStack.setCount(Math.min(remainingCount, matchingStack.getCount()));\n-\n-                final ItemStack deliveryStack = matchingStack.copy();\n-                completedRequest.addDelivery(deliveryStack.copy());\n-\n-                //todo This works okay for now. In the future we want something better here though.\n-\n-                final BlockPos itemStackPos = wareHouse.getPositionOfChestWithItemStack(itemStack -> stack == itemStack);\n-                final ILocation itemStackLocation =\n-                  manager.getFactoryController().getNewInstance(TypeConstants.ILOCATION, itemStackPos, wareHouse.getWorld().getDimension().getType().getId());\n-\n-                final Delivery delivery = new Delivery(itemStackLocation, completedRequest.getRequester().getLocation(), deliveryStack.copy(), getDefaultDeliveryPriority(true));\n-\n-                final IToken<?> requestToken =\n-                  manager.createRequest(new WarehouseRequestResolver(completedRequest.getRequester().getLocation(), completedRequest.getId()), delivery);\n-\n-                deliveries.add(manager.getRequestForToken(requestToken));\n-                remainingCount -= ItemStackUtils.getSize(matchingStack);\n-\n-                if (remainingCount <= 0)\n-                {\n-                    break tileentities;\n-                }\n-            }\n-        }\n-\n-        return deliveries.isEmpty() ? null : deliveries;\n-    }\n-\n-    @Override\n-    public void onAssignedRequestBeingCancelled(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n-    {\n-\n-    }\n-\n-    @Override\n-    public void onAssignedRequestCancelled(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n-    {\n-\n-    }\n-\n-    private static Set<TileEntityWareHouse> getWareHousesInColony(final Colony colony)\n-    {\n-        return colony.getBuildingManager().getBuildings().values().stream()\n-                 .filter(building -> building instanceof BuildingWareHouse)\n-                 .map(building -> (TileEntityWareHouse) building.getTileEntity())\n-                 .collect(Collectors.toSet());\n-    }\n-\n-    @Override\n-    public void onRequestedRequestComplete(@NotNull final IRequestManager manager, @NotNull final IRequest<?> request)\n-    {\n-    }\n-\n-    @Override\n-    public void onRequestedRequestCancelled(@NotNull final IRequestManager manager, @NotNull final IRequest<?> request)\n-    {\n-    }\n-\n-    @NotNull\n-    @Override\n-    public ITextComponent getRequesterDisplayName(@NotNull final IRequestManager manager, @NotNull final IRequest<?> request)\n-    {\n-        return new TranslationTextComponent(TranslationConstants.COM_MINECOLONIES_BUILDING_WAREHOUSE_NAME);\n+        return wareHouses.stream()\n+                .anyMatch(wareHouse -> wareHouse.hasMatchingItemStackInWarehouse(itemStack -> requestToCheck.getRequest().matches(itemStack),\n+                requestToCheck.getRequest().getMinimumCount()));\n     }\n \n     @Override\n-    public int getPriority()\n+    protected AbstractWarehouseRequestResolver newInstanceOfSelf(@NotNull final ILocation location, @NotNull final IToken<?> token)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NzI1Mw==", "bodyText": "WTF is this doing here?!?!?!?", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457647253", "createdAt": "2020-07-20T19:39:47Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/core/AbstractWarehouseRequestResolver.java", "diffHunk": "@@ -0,0 +1,285 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers.core;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.request.RequestState;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.deliveryman.Delivery;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.colony.requestsystem.requestable.deliveryman.AbstractDeliverymanRequestable.getDefaultDeliveryPriority;\n+import static com.minecolonies.api.util.RSConstants.CONST_WAREHOUSE_RESOLVER_PRIORITY;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public abstract class AbstractWarehouseRequestResolver extends AbstractRequestResolver<IDeliverable>\n+{\n+    public AbstractWarehouseRequestResolver(\n+      @NotNull final ILocation location,\n+      @NotNull final IToken<?> token)\n+    {\n+        super(location, token);\n+    }\n+\n+    /**\n+     * Check to see if this object type is the same as the request\n+     */\n+    protected boolean isRequestFromSelf(final IRequest<?> requestToCheck)\n+    {\n+        if (requestToCheck.getRequester().getClass().equals(this.getClass()))\n+        {\n+            return true;\n+        }\n+        return false;\n+    }\n+    /**\n+     * Let the decendant class create an instance for use\n+     */\n+    protected abstract AbstractWarehouseRequestResolver newInstanceOfSelf(@NotNull final ILocation location, @NotNull final IToken<?> token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0ODU0Nw==", "bodyText": "The factory for this class is missing.", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457648547", "createdAt": "2020-07-20T19:42:17Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.core.AbstractWarehouseRequestResolver;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public class WarehouseConcreteRequestResolver extends AbstractWarehouseRequestResolver", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d334593b33f6c32010c0a136adedfb2fb01b0862", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/d334593b33f6c32010c0a136adedfb2fb01b0862", "committedDate": "2020-07-20T20:54:57Z", "message": "Fix Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c1e46f544d7bedfc240022c0eb9ab715d61c568", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/1c1e46f544d7bedfc240022c0eb9ab715d61c568", "committedDate": "2020-07-20T21:14:03Z", "message": "More Formatting fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "885261aa1c16a7823365d584faf28ff2076748fa", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/885261aa1c16a7823365d584faf28ff2076748fa", "committedDate": "2020-07-20T21:56:19Z", "message": "a few more formatting fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "152bda0c535b5f3a10827ccfcf907536120967ac", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/152bda0c535b5f3a10827ccfcf907536120967ac", "committedDate": "2020-07-20T21:56:35Z", "message": "fix logic around hasItemStack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb7d06bac3aa8a9c87ebf4fd56943d713ea51c0c", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/eb7d06bac3aa8a9c87ebf4fd56943d713ea51c0c", "committedDate": "2020-07-20T21:57:54Z", "message": "Use factory to build the correct class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dcc84905b2753c237fbeadae30b141a553c1e22", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/8dcc84905b2753c237fbeadae30b141a553c1e22", "committedDate": "2020-07-20T22:25:45Z", "message": "Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac234e5606c699782726890c673693a3ebee77b4", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/ac234e5606c699782726890c673693a3ebee77b4", "committedDate": "2020-07-22T04:25:37Z", "message": "Merge branch 'version/1.15' into fastresolve/warehouse1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06f1e830c41471b56079d6562261cfc582feaf8c", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/06f1e830c41471b56079d6562261cfc582feaf8c", "committedDate": "2020-07-24T03:57:10Z", "message": "Merge branch 'version/1.15' into fastresolve/warehouse1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddea4196b91dcbaf6c189f05131b7ec6d9b19077", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/ddea4196b91dcbaf6c189f05131b7ec6d9b19077", "committedDate": "2020-07-24T04:14:00Z", "message": "Simplify ItemStorage hash and update TileEntityRack"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTczNTU3", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-455173557", "createdAt": "2020-07-24T20:41:42Z", "commit": {"oid": "ddea4196b91dcbaf6c189f05131b7ec6d9b19077"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjMzMTEz", "url": "https://github.com/ldtteam/minecolonies/pull/5391#pullrequestreview-455233113", "createdAt": "2020-07-24T23:30:50Z", "commit": {"oid": "ddea4196b91dcbaf6c189f05131b7ec6d9b19077"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1993, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}