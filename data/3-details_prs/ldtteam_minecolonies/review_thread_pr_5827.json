{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyOTczNTMz", "number": 5827, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwODo1ODoyMFrOEnulNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNjowMjoxMFrOEn2Y0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDkzMTExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/network/messages/server/BuildToolPlaceMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwODo1ODoyMFrOHYe8cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwODo1ODoyMFrOHYe8cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNDg2NA==", "bodyText": "can we get the parenthesis here?", "url": "https://github.com/ldtteam/minecolonies/pull/5827#discussion_r495434864", "createdAt": "2020-09-26T08:58:20Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/network/messages/server/BuildToolPlaceMessage.java", "diffHunk": "@@ -301,7 +309,10 @@ private static void handleDecoration(\n                 }\n             }\n \n-            colony.getWorkManager().addWorkOrder(new WorkOrderBuildDecoration(schem, woName, rotation, buildPos, mirror), false);\n+            WorkOrderBuildDecoration woDeco = new WorkOrderBuildDecoration(schem, woName, rotation, buildPos, mirror);\n+            if (!builder.equals(BlockPos.ZERO)) woDeco.setClaimedBy(builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a8a226e9da029385aee92c0333ece9ebc4e7a8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDkzMTIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/network/messages/server/BuildToolPlaceMessage.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwODo1ODozNlrOHYe8fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwOToxNzo1OVrOHYfC5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNDg3OA==", "bodyText": "potentially this properly formatted too", "url": "https://github.com/ldtteam/minecolonies/pull/5827#discussion_r495434878", "createdAt": "2020-09-26T08:58:36Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/network/messages/server/BuildToolPlaceMessage.java", "diffHunk": "@@ -104,6 +105,8 @@ public BuildToolPlaceMessage(\n         this.state = state;\n     }\n \n+    public BlockPos getPos() { return pos; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a8a226e9da029385aee92c0333ece9ebc4e7a8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNDk4NA==", "bodyText": "To be fair. I think it is not a good idea to give the window the message. Properly better to just give the window all the data it needs in the constructor instead of giving it the message and adding a getter here.", "url": "https://github.com/ldtteam/minecolonies/pull/5827#discussion_r495434984", "createdAt": "2020-09-26T08:59:38Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/network/messages/server/BuildToolPlaceMessage.java", "diffHunk": "@@ -104,6 +105,8 @@ public BuildToolPlaceMessage(\n         this.state = state;\n     }\n \n+    public BlockPos getPos() { return pos; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNDg3OA=="}, "originalCommit": {"oid": "44a8a226e9da029385aee92c0333ece9ebc4e7a8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNjMzOQ==", "bodyText": "Fair enough, I was tossing that one up anyway. Personally I prefer passing the object to save the long argument list, especially seeing that we still need to construct the message anyway. This way the message is being instantiated in a single place. I could also just pass in the builder BlockPos as a single extra argument to the Window?\nEDIT: although I did forget to lock access for the builder variable back to private. Oh nvm I needed that access.", "url": "https://github.com/ldtteam/minecolonies/pull/5827#discussion_r495436339", "createdAt": "2020-09-26T09:15:37Z", "author": {"login": "ShadowProtocol"}, "path": "src/main/java/com/minecolonies/coremod/network/messages/server/BuildToolPlaceMessage.java", "diffHunk": "@@ -104,6 +105,8 @@ public BuildToolPlaceMessage(\n         this.state = state;\n     }\n \n+    public BlockPos getPos() { return pos; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNDg3OA=="}, "originalCommit": {"oid": "44a8a226e9da029385aee92c0333ece9ebc4e7a8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNjUxOQ==", "bodyText": "that also works", "url": "https://github.com/ldtteam/minecolonies/pull/5827#discussion_r495436519", "createdAt": "2020-09-26T09:17:59Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/network/messages/server/BuildToolPlaceMessage.java", "diffHunk": "@@ -104,6 +105,8 @@ public BuildToolPlaceMessage(\n         this.state = state;\n     }\n \n+    public BlockPos getPos() { return pos; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQzNDg3OA=="}, "originalCommit": {"oid": "44a8a226e9da029385aee92c0333ece9ebc4e7a8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjIxMDExOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowBuildDecoration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNjowMjoxMFrOHYoQKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwMDoyNDo0NVrOHYrXIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4NzM3MA==", "bodyText": "could you sort the builders by distance here? and also on the Buid Building GUI?", "url": "https://github.com/ldtteam/minecolonies/pull/5827#discussion_r495587370", "createdAt": "2020-09-27T16:02:10Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowBuildDecoration.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.Color;\n+import com.ldtteam.blockout.Pane;\n+import com.ldtteam.blockout.controls.Button;\n+import com.ldtteam.blockout.controls.ItemIcon;\n+import com.ldtteam.blockout.controls.Label;\n+import com.ldtteam.blockout.views.DropDownList;\n+import com.ldtteam.blockout.views.ScrollingList;\n+import com.ldtteam.structurize.management.StructureName;\n+import com.ldtteam.structurize.management.Structures;\n+import com.ldtteam.structurize.network.messages.SchematicRequestMessage;\n+import com.ldtteam.structurize.placement.BlockPlacementResult;\n+import com.ldtteam.structurize.placement.StructurePhasePlacementResult;\n+import com.ldtteam.structurize.placement.StructurePlacer;\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.ldtteam.structurize.util.PlacementSettings;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.LoadOnlyStructureHandler;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.views.AbstractBuildingBuilderView;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingMiner;\n+import com.minecolonies.coremod.network.messages.server.BuildToolPlaceMessage;\n+import net.minecraft.client.Minecraft;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.fml.server.ServerLifecycleHooks;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.ldtteam.structurize.placement.BlueprintIterator.NULL_POS;\n+import static com.minecolonies.api.util.constant.WindowConstants.*;\n+\n+public class WindowBuildDecoration extends AbstractWindowSkeleton\n+{\n+    /**\n+     * Link to the xml file of the window.\n+     */\n+    private static final String BUILDING_NAME_RESOURCE_SUFFIX = \":gui/windowbuildbuilding.xml\";\n+\n+    /**\n+     * White color.\n+     */\n+    private static final int WHITE = Color.getByName(\"white\", 0);\n+\n+    /**\n+     * List of style for the section.\n+     */\n+    @NotNull\n+    private final List<Tuple<String, BlockPos>> builders = new ArrayList<>();\n+\n+    /**\n+     * Drop down list for builders.\n+     */\n+    private DropDownList buildersDropDownList;\n+\n+    /**\n+     * Contains all resources needed for a certain build.\n+     */\n+    private final Map<String, ItemStorage> resources = new HashMap<>();\n+\n+    /**\n+     * Stores the message to be transmitted upon completion\n+     */\n+    private final BuildToolPlaceMessage placementMessage;\n+\n+    /**\n+     * The name of the structure\n+     */\n+    private final StructureName structureName;\n+\n+    /**\n+     * The position of the decoration anchor\n+     */\n+    private final BlockPos structurePos;\n+\n+    /**\n+     * Constructs the decoration build confirmation dialog\n+     */\n+    public WindowBuildDecoration(BuildToolPlaceMessage msg, BlockPos pos, StructureName structure)\n+    {\n+        super(Constants.MOD_ID + BUILDING_NAME_RESOURCE_SUFFIX);\n+        placementMessage = msg;\n+        structureName = structure;\n+        structurePos = pos;\n+\n+        registerButton(BUTTON_BUILD, this::confirmedBuild);\n+        registerButton(BUTTON_CANCEL, this::close);\n+\n+        findPaneOfTypeByID(BUTTON_BUILD, Button.class)\n+                .setLabel(LanguageHandler.format(\"com.minecolonies.coremod.gui.workerhuts.build\"));\n+        findPaneOfTypeByID(BUTTON_MOVE_BUILDING, Button.class).hide();\n+        findPaneOfTypeByID(BUTTON_REPAIR, Button.class).hide();\n+        findPaneOfTypeByID(BUTTON_NEXT_STYLE_ID, Button.class).hide();\n+        findPaneOfTypeByID(BUTTON_PREVIOUS_STYLE_ID, Button.class).hide();\n+        findPaneOfTypeByID(DROPDOWN_STYLE_ID, DropDownList.class).disable();\n+    }\n+\n+    @Override\n+    public void onOpened()\n+    {\n+        updateBuilders();\n+        updateResources();\n+    }\n+\n+    /**\n+     * Update the builders list but try to keep the same one.\n+     */\n+    private void updateBuilders()\n+    {\n+        IColonyView colony = (IColonyView) IColonyManager.getInstance()\n+                .getIColony(Minecraft.getInstance().world, structurePos);\n+\n+        if (colony == null)\n+        {\n+            LanguageHandler.sendPlayerMessage(Minecraft.getInstance().player, TranslationConstants.OUT_OF_COLONY);\n+            close();\n+            return;\n+        }\n+\n+        builders.clear();\n+        builders.add(new Tuple<>(LanguageHandler.format(\"com.minecolonies.coremod.job.Builder\") + \":\", BlockPos.ZERO));\n+        builders.addAll(colony.getBuildings().stream()\n+                .filter(build -> build instanceof AbstractBuildingBuilderView && !((AbstractBuildingBuilderView) build).getWorkerName().isEmpty()\n+                        && !(build instanceof BuildingMiner.View))\n+                .map(build -> new Tuple<>(((AbstractBuildingBuilderView) build).getWorkerName(), build.getPosition()))\n+                .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7280f25815553db0a4d406199674a62435b3d37"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYzODMwNA==", "bodyText": "I don't like doing that sort of thing simply because it is not immediately apparent when you look at the list, and the user would have to learn the order, rather than one they most likely know (the alphabet). And just IMO, the point is to allow them to select the builder, not have that choice calculated for them. That said I do understand why that would be neat and convenient, and does make sense. So I'm torn. Thoughts?", "url": "https://github.com/ldtteam/minecolonies/pull/5827#discussion_r495638304", "createdAt": "2020-09-28T00:24:45Z", "author": {"login": "ShadowProtocol"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowBuildDecoration.java", "diffHunk": "@@ -0,0 +1,310 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.Color;\n+import com.ldtteam.blockout.Pane;\n+import com.ldtteam.blockout.controls.Button;\n+import com.ldtteam.blockout.controls.ItemIcon;\n+import com.ldtteam.blockout.controls.Label;\n+import com.ldtteam.blockout.views.DropDownList;\n+import com.ldtteam.blockout.views.ScrollingList;\n+import com.ldtteam.structurize.management.StructureName;\n+import com.ldtteam.structurize.management.Structures;\n+import com.ldtteam.structurize.network.messages.SchematicRequestMessage;\n+import com.ldtteam.structurize.placement.BlockPlacementResult;\n+import com.ldtteam.structurize.placement.StructurePhasePlacementResult;\n+import com.ldtteam.structurize.placement.StructurePlacer;\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.ldtteam.structurize.util.PlacementSettings;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.crafting.ItemStorage;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.LoadOnlyStructureHandler;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.views.AbstractBuildingBuilderView;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingMiner;\n+import com.minecolonies.coremod.network.messages.server.BuildToolPlaceMessage;\n+import net.minecraft.client.Minecraft;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.Tuple;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraftforge.fml.server.ServerLifecycleHooks;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import static com.ldtteam.structurize.placement.BlueprintIterator.NULL_POS;\n+import static com.minecolonies.api.util.constant.WindowConstants.*;\n+\n+public class WindowBuildDecoration extends AbstractWindowSkeleton\n+{\n+    /**\n+     * Link to the xml file of the window.\n+     */\n+    private static final String BUILDING_NAME_RESOURCE_SUFFIX = \":gui/windowbuildbuilding.xml\";\n+\n+    /**\n+     * White color.\n+     */\n+    private static final int WHITE = Color.getByName(\"white\", 0);\n+\n+    /**\n+     * List of style for the section.\n+     */\n+    @NotNull\n+    private final List<Tuple<String, BlockPos>> builders = new ArrayList<>();\n+\n+    /**\n+     * Drop down list for builders.\n+     */\n+    private DropDownList buildersDropDownList;\n+\n+    /**\n+     * Contains all resources needed for a certain build.\n+     */\n+    private final Map<String, ItemStorage> resources = new HashMap<>();\n+\n+    /**\n+     * Stores the message to be transmitted upon completion\n+     */\n+    private final BuildToolPlaceMessage placementMessage;\n+\n+    /**\n+     * The name of the structure\n+     */\n+    private final StructureName structureName;\n+\n+    /**\n+     * The position of the decoration anchor\n+     */\n+    private final BlockPos structurePos;\n+\n+    /**\n+     * Constructs the decoration build confirmation dialog\n+     */\n+    public WindowBuildDecoration(BuildToolPlaceMessage msg, BlockPos pos, StructureName structure)\n+    {\n+        super(Constants.MOD_ID + BUILDING_NAME_RESOURCE_SUFFIX);\n+        placementMessage = msg;\n+        structureName = structure;\n+        structurePos = pos;\n+\n+        registerButton(BUTTON_BUILD, this::confirmedBuild);\n+        registerButton(BUTTON_CANCEL, this::close);\n+\n+        findPaneOfTypeByID(BUTTON_BUILD, Button.class)\n+                .setLabel(LanguageHandler.format(\"com.minecolonies.coremod.gui.workerhuts.build\"));\n+        findPaneOfTypeByID(BUTTON_MOVE_BUILDING, Button.class).hide();\n+        findPaneOfTypeByID(BUTTON_REPAIR, Button.class).hide();\n+        findPaneOfTypeByID(BUTTON_NEXT_STYLE_ID, Button.class).hide();\n+        findPaneOfTypeByID(BUTTON_PREVIOUS_STYLE_ID, Button.class).hide();\n+        findPaneOfTypeByID(DROPDOWN_STYLE_ID, DropDownList.class).disable();\n+    }\n+\n+    @Override\n+    public void onOpened()\n+    {\n+        updateBuilders();\n+        updateResources();\n+    }\n+\n+    /**\n+     * Update the builders list but try to keep the same one.\n+     */\n+    private void updateBuilders()\n+    {\n+        IColonyView colony = (IColonyView) IColonyManager.getInstance()\n+                .getIColony(Minecraft.getInstance().world, structurePos);\n+\n+        if (colony == null)\n+        {\n+            LanguageHandler.sendPlayerMessage(Minecraft.getInstance().player, TranslationConstants.OUT_OF_COLONY);\n+            close();\n+            return;\n+        }\n+\n+        builders.clear();\n+        builders.add(new Tuple<>(LanguageHandler.format(\"com.minecolonies.coremod.job.Builder\") + \":\", BlockPos.ZERO));\n+        builders.addAll(colony.getBuildings().stream()\n+                .filter(build -> build instanceof AbstractBuildingBuilderView && !((AbstractBuildingBuilderView) build).getWorkerName().isEmpty()\n+                        && !(build instanceof BuildingMiner.View))\n+                .map(build -> new Tuple<>(((AbstractBuildingBuilderView) build).getWorkerName(), build.getPosition()))\n+                .collect(Collectors.toList()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4NzM3MA=="}, "originalCommit": {"oid": "f7280f25815553db0a4d406199674a62435b3d37"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3508, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}