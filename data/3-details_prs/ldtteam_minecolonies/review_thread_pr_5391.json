{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMjk2ODc2", "number": 5391, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0Mjo0NFrOEPPBCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOTo0MjoxN1rOEQWGSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDEwMTIwOnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityRack.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo0Mjo0NFrOGy1oIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzo1MDo1NFrOGy18Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDYxMA==", "bodyText": "lol, easy one", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r455960610", "createdAt": "2020-07-16T17:42:44Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityRack.java", "diffHunk": "@@ -133,15 +133,7 @@ public int getFreeSlots()\n     @Override\n     public boolean hasItemStack(final ItemStack stack, final boolean ignoreDamageValue)\n     {\n-        final ItemStorage compareStorage = new ItemStorage(stack, ignoreDamageValue);\n-        for (final Map.Entry<ItemStorage, Integer> entry : content.entrySet())\n-        {\n-            if (compareStorage.equals(entry.getKey()))\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return content.get(new ItemStorage(stack, ignoreDamageValue)) != null;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a5de31895004d4d6a31caaf4a149263ceec9ab5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MjE2MA==", "bodyText": "oh actually != isnt needed, could just return content.contains(...)", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r455962160", "createdAt": "2020-07-16T17:45:16Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityRack.java", "diffHunk": "@@ -133,15 +133,7 @@ public int getFreeSlots()\n     @Override\n     public boolean hasItemStack(final ItemStack stack, final boolean ignoreDamageValue)\n     {\n-        final ItemStorage compareStorage = new ItemStorage(stack, ignoreDamageValue);\n-        for (final Map.Entry<ItemStorage, Integer> entry : content.entrySet())\n-        {\n-            if (compareStorage.equals(entry.getKey()))\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return content.get(new ItemStorage(stack, ignoreDamageValue)) != null;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDYxMA=="}, "originalCommit": {"oid": "1a5de31895004d4d6a31caaf4a149263ceec9ab5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2NTc3NQ==", "bodyText": "Fair enough. :)", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r455965775", "createdAt": "2020-07-16T17:50:54Z", "author": {"login": "Mekle001"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityRack.java", "diffHunk": "@@ -133,15 +133,7 @@ public int getFreeSlots()\n     @Override\n     public boolean hasItemStack(final ItemStack stack, final boolean ignoreDamageValue)\n     {\n-        final ItemStorage compareStorage = new ItemStorage(stack, ignoreDamageValue);\n-        for (final Map.Entry<ItemStorage, Integer> entry : content.entrySet())\n-        {\n-            if (compareStorage.equals(entry.getKey()))\n-            {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return content.get(new ItemStorage(stack, ignoreDamageValue)) != null;\n     }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk2MDYxMA=="}, "originalCommit": {"oid": "1a5de31895004d4d6a31caaf4a149263ceec9ab5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDM2Nzg3OnYy", "diffSide": "LEFT", "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/Stack.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMDo1NlrOGztr8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMDo1NlrOGztr8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg3OTA5MQ==", "bodyText": "the formatting in the file got messed up =D", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456879091", "createdAt": "2020-07-19T08:30:56Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/Stack.java", "diffHunk": "@@ -73,8 +77,7 @@ public Stack(@NotNull final ItemStack stack)\n      * @param count    the count.\n      * @param minCount the min count.\n      */\n-    public Stack(@NotNull final ItemStack stack, final int count, final int minCount)\n-    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDM2ODE3OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/StackList.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMToxOFrOGztsGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMToxOFrOGztsGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg3OTEzMA==", "bodyText": "also formatting", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456879130", "createdAt": "2020-07-19T08:31:18Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/StackList.java", "diffHunk": "@@ -375,4 +375,9 @@ public String getDescription()\n     {\n         return description;\n     }\n+\n+    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDM2ODY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQwODozMjowM1rOGztsVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODo0ODozNlrOGzxgeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg3OTE5MQ==", "bodyText": "We should have an AbstractWareHouseRequestResolver that has the parts both have in common", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456879191", "createdAt": "2020-07-19T08:32:03Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.request.RequestState;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.deliveryman.Delivery;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MTY4OA==", "bodyText": "Done", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456941688", "createdAt": "2020-07-19T18:48:36Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,280 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.request.RequestState;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.deliveryman.Delivery;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njg3OTE5MQ=="}, "originalCommit": {"oid": "ef02499a178c6c561f69f352a95254594fd63146"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDg1Njc4OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/IConcreteDeliverable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxODozNToxM1rOGzxbjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMzowNToxOFrOG0iREQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDQzMA==", "bodyText": "Override the matches function from IDeliverable and make it the default implementation", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456940430", "createdAt": "2020-07-19T18:35:13Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/IConcreteDeliverable.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.minecolonies.api.colony.requestsystem.requestable;\n+\n+import net.minecraft.item.ItemStack;\n+\n+import java.util.List;\n+\n+/**\n+ * An {@link IConcreteDeliverable} is an Requestable that can be looked up fast in the warehouse, and delivered.\n+ */\n+public interface IConcreteDeliverable extends IDeliverable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e017fa005e084f3698949305d98af366fbcd3da0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzc0MDU2MQ==", "bodyText": "Let's discuss this. I started to do that and it felt inside out, because we're comparing two collections to see if there is any overlap. The deliverable list is likely the smallest of those, and thus needs to be the one we iterate over. I'm guessing the matches you're proposing would be to send in a list, but that would be the full inventory and negate the gains we're looking for.", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457740561", "createdAt": "2020-07-20T23:05:18Z", "author": {"login": "Mekle001"}, "path": "src/api/java/com/minecolonies/api/colony/requestsystem/requestable/IConcreteDeliverable.java", "diffHunk": "@@ -0,0 +1,17 @@\n+package com.minecolonies.api.colony.requestsystem.requestable;\n+\n+import net.minecraft.item.ItemStack;\n+\n+import java.util.List;\n+\n+/**\n+ * An {@link IConcreteDeliverable} is an Requestable that can be looked up fast in the warehouse, and delivered.\n+ */\n+public interface IConcreteDeliverable extends IDeliverable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MDQzMA=="}, "originalCommit": {"oid": "e017fa005e084f3698949305d98af366fbcd3da0"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MDg3OTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOTowMzo0MVrOGzxmYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOVQxOToxODo0OFrOGzxsWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzIwMg==", "bodyText": "Couldn't this and the getPriority go into the abstract?", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456943202", "createdAt": "2020-07-19T19:03:41Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.core.AbstractWarehouseRequestResolver;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public class WarehouseConcreteRequestResolver extends AbstractWarehouseRequestResolver\n+{\n+    public WarehouseConcreteRequestResolver(\n+      @NotNull final ILocation location,\n+      @NotNull final IToken<?> token)\n+    {\n+        super(location, token);\n+    }\n+\n+    @Override\n+    public boolean canResolveRequest(@NotNull final IRequestManager manager, final IRequest<? extends IDeliverable> requestToCheck)\n+    {\n+        if (requestToCheck.getRequester() instanceof BuildingBasedRequester)\n+        {\n+            final BuildingBasedRequester requester = ((BuildingBasedRequester) requestToCheck.getRequester());\n+            final Optional<IRequester> building = requester.getBuilding(manager, requestToCheck.getRequester().getId());\n+            if (building.isPresent() && building.get() instanceof BuildingWareHouse)\n+            {\n+                return false;\n+            }\n+        }\n+\n+        if (!manager.getColony().getWorld().isRemote)\n+        {\n+            if (!isRequestChainValid(manager, requestToCheck))\n+            {\n+                return false;\n+            }\n+\n+            final Colony colony = (Colony) manager.getColony();\n+            final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n+            wareHouses.removeIf(Objects::isNull);\n+\n+            try\n+            {\n+                final IDeliverable deliverable = requestToCheck.getRequest();\n+                if(deliverable instanceof IConcreteDeliverable)\n+                {\n+                    for(final ItemStack possible : ((IConcreteDeliverable) deliverable).getRequestedItems())\n+                    {\n+                        final ItemStack stack = possible.copy();\n+                        stack.setCount(requestToCheck.getRequest().getMinimumCount());\n+                        return wareHouses.stream().anyMatch(wareHouse -> wareHouse.hasMatchingItemStackInWarehouse(stack));\n+                    }\n+                }\n+            }\n+            catch (Exception e)\n+            {\n+                Log.getLogger().error(e);\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    protected boolean isRequestFromSelf(final IRequest<?> requestToCheck)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca2286567bff3259bd47842161a09c62213e1852"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0NDczMQ==", "bodyText": "The getPriority can. I guess we don't have a scenario where it would be valid to come from one of the warehouse resolvers to the other, so yeah, this can probably move too.", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r456944731", "createdAt": "2020-07-19T19:18:48Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,102 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.core.AbstractWarehouseRequestResolver;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public class WarehouseConcreteRequestResolver extends AbstractWarehouseRequestResolver\n+{\n+    public WarehouseConcreteRequestResolver(\n+      @NotNull final ILocation location,\n+      @NotNull final IToken<?> token)\n+    {\n+        super(location, token);\n+    }\n+\n+    @Override\n+    public boolean canResolveRequest(@NotNull final IRequestManager manager, final IRequest<? extends IDeliverable> requestToCheck)\n+    {\n+        if (requestToCheck.getRequester() instanceof BuildingBasedRequester)\n+        {\n+            final BuildingBasedRequester requester = ((BuildingBasedRequester) requestToCheck.getRequester());\n+            final Optional<IRequester> building = requester.getBuilding(manager, requestToCheck.getRequester().getId());\n+            if (building.isPresent() && building.get() instanceof BuildingWareHouse)\n+            {\n+                return false;\n+            }\n+        }\n+\n+        if (!manager.getColony().getWorld().isRemote)\n+        {\n+            if (!isRequestChainValid(manager, requestToCheck))\n+            {\n+                return false;\n+            }\n+\n+            final Colony colony = (Colony) manager.getColony();\n+            final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n+            wareHouses.removeIf(Objects::isNull);\n+\n+            try\n+            {\n+                final IDeliverable deliverable = requestToCheck.getRequest();\n+                if(deliverable instanceof IConcreteDeliverable)\n+                {\n+                    for(final ItemStack possible : ((IConcreteDeliverable) deliverable).getRequestedItems())\n+                    {\n+                        final ItemStack stack = possible.copy();\n+                        stack.setCount(requestToCheck.getRequest().getMinimumCount());\n+                        return wareHouses.stream().anyMatch(wareHouse -> wareHouse.hasMatchingItemStackInWarehouse(stack));\n+                    }\n+                }\n+            }\n+            catch (Exception e)\n+            {\n+                Log.getLogger().error(e);\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    @Override\n+    protected boolean isRequestFromSelf(final IRequest<?> requestToCheck)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Njk0MzIwMg=="}, "originalCommit": {"oid": "ca2286567bff3259bd47842161a09c62213e1852"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTczNzIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseRequestResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOTozOToxNlrOG0cjaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDowNDoyM1rOG2wn_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0Njk1Mw==", "bodyText": "No this does not work.\nThis is completely hats on ass logic.\nWhy is this here!?!?!?", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457646953", "createdAt": "2020-07-20T19:39:16Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseRequestResolver.java", "diffHunk": "@@ -48,222 +32,20 @@ public WarehouseRequestResolver(\n     }\n \n     @Override\n-    public TypeToken<? extends IDeliverable> getRequestType()\n-    {\n-        return TypeConstants.DELIVERABLE;\n-    }\n-\n-    @Override\n-    public boolean canResolveRequest(@NotNull final IRequestManager manager, final IRequest<? extends IDeliverable> requestToCheck)\n-    {\n-        if (requestToCheck.getRequester() instanceof BuildingBasedRequester)\n-        {\n-            final BuildingBasedRequester requester = ((BuildingBasedRequester) requestToCheck.getRequester());\n-            final Optional<IRequester> building = requester.getBuilding(manager, requestToCheck.getRequester().getId());\n-            if (building.isPresent() && building.get() instanceof BuildingWareHouse)\n-            {\n-                return false;\n-            }\n-        }\n-\n-        if (!manager.getColony().getWorld().isRemote)\n-        {\n-            if (!isRequestChainValid(manager, requestToCheck))\n-            {\n-                return false;\n-            }\n-\n-            final Colony colony = (Colony) manager.getColony();\n-            final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n-            wareHouses.removeIf(Objects::isNull);\n-\n-            try\n-            {\n-                return wareHouses.stream()\n-                         .anyMatch(wareHouse -> wareHouse.hasMatchingItemStackInWarehouse(itemStack -> requestToCheck.getRequest().matches(itemStack),\n-                           requestToCheck.getRequest().getMinimumCount()));\n-            }\n-            catch (Exception e)\n-            {\n-                Log.getLogger().error(e);\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    public boolean isRequestChainValid(@NotNull final IRequestManager manager, final IRequest<?> requestToCheck)\n-    {\n-        if (requestToCheck.getRequester() instanceof WarehouseRequestResolver)\n-        {\n-            return false;\n-        }\n-\n-        if (!requestToCheck.hasParent())\n-        {\n-            return true;\n-        }\n-\n-        final IRequest<?> parentRequest = manager.getRequestForToken(requestToCheck.getParent());\n-\n-        //Should not happen but just to be sure.\n-        if (parentRequest == null)\n-        {\n-            return true;\n-        }\n-\n-        return isRequestChainValid(manager, parentRequest);\n-    }\n-\n-    /*\n-     * Moving the curly braces really makes the code hard to read.\n-     */\n-    @Nullable\n-    @Override\n-    @SuppressWarnings(\"squid:LeftCurlyBraceStartLineCheck\")\n-    public List<IToken<?>> attemptResolveRequest(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n+    protected boolean internalCanResolve(final Set<TileEntityWareHouse> wareHouses, final IRequest<? extends IDeliverable> requestToCheck)\n     {\n-        if (manager.getColony().getWorld().isRemote)\n-        {\n-            return Lists.newArrayList();\n-        }\n-\n-        if (!(manager.getColony() instanceof Colony))\n+        if(requestToCheck.getRequest() instanceof IConcreteDeliverable)\n         {\n-            return Lists.newArrayList();\n+            return false; \n         }\n-\n-        final Colony colony = (Colony) manager.getColony();\n-\n-        final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n-\n-        final int totalRequested = request.getRequest().getCount();\n-        int totalAvailable = 0;\n-        for (final TileEntityWareHouse tile : wareHouses)\n-        {\n-            final List<ItemStack> inv = tile.getMatchingItemStacksInWarehouse(itemStack -> request.getRequest().matches(itemStack));\n-            for (final ItemStack stack : inv)\n-            {\n-                if (!stack.isEmpty())\n-                {\n-                    totalAvailable += stack.getCount();\n-                }\n-            }\n-        }\n-\n-        if (totalAvailable >= totalRequested || totalAvailable >= request.getRequest().getMinimumCount())\n-        {\n-            return Lists.newArrayList();\n-        }\n-\n-        final int totalRemainingRequired = totalRequested - totalAvailable;\n-        final IDeliverable remainingRequest = request.getRequest().copyWithCount(totalRemainingRequired);\n-        return Lists.newArrayList(manager.createRequest(this, remainingRequest));\n-    }\n-\n-    @Override\n-    public void resolveRequest(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n-    {\n-        manager.updateRequestState(request.getId(), RequestState.RESOLVED);\n-    }\n-\n-    @Nullable\n-    @Override\n-    public List<IRequest<?>> getFollowupRequestForCompletion(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> completedRequest)\n-    {\n-        if (manager.getColony().getWorld().isRemote)\n-        {\n-            return null;\n-        }\n-\n-        final Colony colony = (Colony) manager.getColony();\n-        final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n-\n-        List<IRequest<?>> deliveries = Lists.newArrayList();\n-        int remainingCount = completedRequest.getRequest().getCount();\n-\n-        tileentities:\n-        for (final TileEntityWareHouse wareHouse : wareHouses)\n-        {\n-            final List<ItemStack> targetStacks = wareHouse.getMatchingItemStacksInWarehouse(itemStack -> completedRequest.getRequest().matches(itemStack));\n-            for (final ItemStack stack :\n-              targetStacks)\n-            {\n-                if (ItemStackUtils.isEmpty(stack))\n-                {\n-                    continue;\n-                }\n-\n-                final ItemStack matchingStack = stack.copy();\n-                matchingStack.setCount(Math.min(remainingCount, matchingStack.getCount()));\n-\n-                final ItemStack deliveryStack = matchingStack.copy();\n-                completedRequest.addDelivery(deliveryStack.copy());\n-\n-                //todo This works okay for now. In the future we want something better here though.\n-\n-                final BlockPos itemStackPos = wareHouse.getPositionOfChestWithItemStack(itemStack -> stack == itemStack);\n-                final ILocation itemStackLocation =\n-                  manager.getFactoryController().getNewInstance(TypeConstants.ILOCATION, itemStackPos, wareHouse.getWorld().getDimension().getType().getId());\n-\n-                final Delivery delivery = new Delivery(itemStackLocation, completedRequest.getRequester().getLocation(), deliveryStack.copy(), getDefaultDeliveryPriority(true));\n-\n-                final IToken<?> requestToken =\n-                  manager.createRequest(new WarehouseRequestResolver(completedRequest.getRequester().getLocation(), completedRequest.getId()), delivery);\n-\n-                deliveries.add(manager.getRequestForToken(requestToken));\n-                remainingCount -= ItemStackUtils.getSize(matchingStack);\n-\n-                if (remainingCount <= 0)\n-                {\n-                    break tileentities;\n-                }\n-            }\n-        }\n-\n-        return deliveries.isEmpty() ? null : deliveries;\n-    }\n-\n-    @Override\n-    public void onAssignedRequestBeingCancelled(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n-    {\n-\n-    }\n-\n-    @Override\n-    public void onAssignedRequestCancelled(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n-    {\n-\n-    }\n-\n-    private static Set<TileEntityWareHouse> getWareHousesInColony(final Colony colony)\n-    {\n-        return colony.getBuildingManager().getBuildings().values().stream()\n-                 .filter(building -> building instanceof BuildingWareHouse)\n-                 .map(building -> (TileEntityWareHouse) building.getTileEntity())\n-                 .collect(Collectors.toSet());\n-    }\n-\n-    @Override\n-    public void onRequestedRequestComplete(@NotNull final IRequestManager manager, @NotNull final IRequest<?> request)\n-    {\n-    }\n-\n-    @Override\n-    public void onRequestedRequestCancelled(@NotNull final IRequestManager manager, @NotNull final IRequest<?> request)\n-    {\n-    }\n-\n-    @NotNull\n-    @Override\n-    public ITextComponent getRequesterDisplayName(@NotNull final IRequestManager manager, @NotNull final IRequest<?> request)\n-    {\n-        return new TranslationTextComponent(TranslationConstants.COM_MINECOLONIES_BUILDING_WAREHOUSE_NAME);\n+        return wareHouses.stream()\n+                .anyMatch(wareHouse -> wareHouse.hasMatchingItemStackInWarehouse(itemStack -> requestToCheck.getRequest().matches(itemStack),\n+                requestToCheck.getRequest().getMinimumCount()));\n     }\n \n     @Override\n-    public int getPriority()\n+    protected AbstractWarehouseRequestResolver newInstanceOfSelf(@NotNull final ILocation location, @NotNull final IToken<?> token)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3Mjk1OA==", "bodyText": "This is gone.", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r460072958", "createdAt": "2020-07-24T14:04:23Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseRequestResolver.java", "diffHunk": "@@ -48,222 +32,20 @@ public WarehouseRequestResolver(\n     }\n \n     @Override\n-    public TypeToken<? extends IDeliverable> getRequestType()\n-    {\n-        return TypeConstants.DELIVERABLE;\n-    }\n-\n-    @Override\n-    public boolean canResolveRequest(@NotNull final IRequestManager manager, final IRequest<? extends IDeliverable> requestToCheck)\n-    {\n-        if (requestToCheck.getRequester() instanceof BuildingBasedRequester)\n-        {\n-            final BuildingBasedRequester requester = ((BuildingBasedRequester) requestToCheck.getRequester());\n-            final Optional<IRequester> building = requester.getBuilding(manager, requestToCheck.getRequester().getId());\n-            if (building.isPresent() && building.get() instanceof BuildingWareHouse)\n-            {\n-                return false;\n-            }\n-        }\n-\n-        if (!manager.getColony().getWorld().isRemote)\n-        {\n-            if (!isRequestChainValid(manager, requestToCheck))\n-            {\n-                return false;\n-            }\n-\n-            final Colony colony = (Colony) manager.getColony();\n-            final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n-            wareHouses.removeIf(Objects::isNull);\n-\n-            try\n-            {\n-                return wareHouses.stream()\n-                         .anyMatch(wareHouse -> wareHouse.hasMatchingItemStackInWarehouse(itemStack -> requestToCheck.getRequest().matches(itemStack),\n-                           requestToCheck.getRequest().getMinimumCount()));\n-            }\n-            catch (Exception e)\n-            {\n-                Log.getLogger().error(e);\n-            }\n-        }\n-\n-        return false;\n-    }\n-\n-    public boolean isRequestChainValid(@NotNull final IRequestManager manager, final IRequest<?> requestToCheck)\n-    {\n-        if (requestToCheck.getRequester() instanceof WarehouseRequestResolver)\n-        {\n-            return false;\n-        }\n-\n-        if (!requestToCheck.hasParent())\n-        {\n-            return true;\n-        }\n-\n-        final IRequest<?> parentRequest = manager.getRequestForToken(requestToCheck.getParent());\n-\n-        //Should not happen but just to be sure.\n-        if (parentRequest == null)\n-        {\n-            return true;\n-        }\n-\n-        return isRequestChainValid(manager, parentRequest);\n-    }\n-\n-    /*\n-     * Moving the curly braces really makes the code hard to read.\n-     */\n-    @Nullable\n-    @Override\n-    @SuppressWarnings(\"squid:LeftCurlyBraceStartLineCheck\")\n-    public List<IToken<?>> attemptResolveRequest(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n+    protected boolean internalCanResolve(final Set<TileEntityWareHouse> wareHouses, final IRequest<? extends IDeliverable> requestToCheck)\n     {\n-        if (manager.getColony().getWorld().isRemote)\n-        {\n-            return Lists.newArrayList();\n-        }\n-\n-        if (!(manager.getColony() instanceof Colony))\n+        if(requestToCheck.getRequest() instanceof IConcreteDeliverable)\n         {\n-            return Lists.newArrayList();\n+            return false; \n         }\n-\n-        final Colony colony = (Colony) manager.getColony();\n-\n-        final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n-\n-        final int totalRequested = request.getRequest().getCount();\n-        int totalAvailable = 0;\n-        for (final TileEntityWareHouse tile : wareHouses)\n-        {\n-            final List<ItemStack> inv = tile.getMatchingItemStacksInWarehouse(itemStack -> request.getRequest().matches(itemStack));\n-            for (final ItemStack stack : inv)\n-            {\n-                if (!stack.isEmpty())\n-                {\n-                    totalAvailable += stack.getCount();\n-                }\n-            }\n-        }\n-\n-        if (totalAvailable >= totalRequested || totalAvailable >= request.getRequest().getMinimumCount())\n-        {\n-            return Lists.newArrayList();\n-        }\n-\n-        final int totalRemainingRequired = totalRequested - totalAvailable;\n-        final IDeliverable remainingRequest = request.getRequest().copyWithCount(totalRemainingRequired);\n-        return Lists.newArrayList(manager.createRequest(this, remainingRequest));\n-    }\n-\n-    @Override\n-    public void resolveRequest(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n-    {\n-        manager.updateRequestState(request.getId(), RequestState.RESOLVED);\n-    }\n-\n-    @Nullable\n-    @Override\n-    public List<IRequest<?>> getFollowupRequestForCompletion(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> completedRequest)\n-    {\n-        if (manager.getColony().getWorld().isRemote)\n-        {\n-            return null;\n-        }\n-\n-        final Colony colony = (Colony) manager.getColony();\n-        final Set<TileEntityWareHouse> wareHouses = getWareHousesInColony(colony);\n-\n-        List<IRequest<?>> deliveries = Lists.newArrayList();\n-        int remainingCount = completedRequest.getRequest().getCount();\n-\n-        tileentities:\n-        for (final TileEntityWareHouse wareHouse : wareHouses)\n-        {\n-            final List<ItemStack> targetStacks = wareHouse.getMatchingItemStacksInWarehouse(itemStack -> completedRequest.getRequest().matches(itemStack));\n-            for (final ItemStack stack :\n-              targetStacks)\n-            {\n-                if (ItemStackUtils.isEmpty(stack))\n-                {\n-                    continue;\n-                }\n-\n-                final ItemStack matchingStack = stack.copy();\n-                matchingStack.setCount(Math.min(remainingCount, matchingStack.getCount()));\n-\n-                final ItemStack deliveryStack = matchingStack.copy();\n-                completedRequest.addDelivery(deliveryStack.copy());\n-\n-                //todo This works okay for now. In the future we want something better here though.\n-\n-                final BlockPos itemStackPos = wareHouse.getPositionOfChestWithItemStack(itemStack -> stack == itemStack);\n-                final ILocation itemStackLocation =\n-                  manager.getFactoryController().getNewInstance(TypeConstants.ILOCATION, itemStackPos, wareHouse.getWorld().getDimension().getType().getId());\n-\n-                final Delivery delivery = new Delivery(itemStackLocation, completedRequest.getRequester().getLocation(), deliveryStack.copy(), getDefaultDeliveryPriority(true));\n-\n-                final IToken<?> requestToken =\n-                  manager.createRequest(new WarehouseRequestResolver(completedRequest.getRequester().getLocation(), completedRequest.getId()), delivery);\n-\n-                deliveries.add(manager.getRequestForToken(requestToken));\n-                remainingCount -= ItemStackUtils.getSize(matchingStack);\n-\n-                if (remainingCount <= 0)\n-                {\n-                    break tileentities;\n-                }\n-            }\n-        }\n-\n-        return deliveries.isEmpty() ? null : deliveries;\n-    }\n-\n-    @Override\n-    public void onAssignedRequestBeingCancelled(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n-    {\n-\n-    }\n-\n-    @Override\n-    public void onAssignedRequestCancelled(@NotNull final IRequestManager manager, @NotNull final IRequest<? extends IDeliverable> request)\n-    {\n-\n-    }\n-\n-    private static Set<TileEntityWareHouse> getWareHousesInColony(final Colony colony)\n-    {\n-        return colony.getBuildingManager().getBuildings().values().stream()\n-                 .filter(building -> building instanceof BuildingWareHouse)\n-                 .map(building -> (TileEntityWareHouse) building.getTileEntity())\n-                 .collect(Collectors.toSet());\n-    }\n-\n-    @Override\n-    public void onRequestedRequestComplete(@NotNull final IRequestManager manager, @NotNull final IRequest<?> request)\n-    {\n-    }\n-\n-    @Override\n-    public void onRequestedRequestCancelled(@NotNull final IRequestManager manager, @NotNull final IRequest<?> request)\n-    {\n-    }\n-\n-    @NotNull\n-    @Override\n-    public ITextComponent getRequesterDisplayName(@NotNull final IRequestManager manager, @NotNull final IRequest<?> request)\n-    {\n-        return new TranslationTextComponent(TranslationConstants.COM_MINECOLONIES_BUILDING_WAREHOUSE_NAME);\n+        return wareHouses.stream()\n+                .anyMatch(wareHouse -> wareHouse.hasMatchingItemStackInWarehouse(itemStack -> requestToCheck.getRequest().matches(itemStack),\n+                requestToCheck.getRequest().getMinimumCount()));\n     }\n \n     @Override\n-    public int getPriority()\n+    protected AbstractWarehouseRequestResolver newInstanceOfSelf(@NotNull final ILocation location, @NotNull final IToken<?> token)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0Njk1Mw=="}, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTczOTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/core/AbstractWarehouseRequestResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOTozOTo0N1rOG0cklQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDowMzo1OFrOG2wm_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NzI1Mw==", "bodyText": "WTF is this doing here?!?!?!?", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457647253", "createdAt": "2020-07-20T19:39:47Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/core/AbstractWarehouseRequestResolver.java", "diffHunk": "@@ -0,0 +1,285 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers.core;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.request.RequestState;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.deliveryman.Delivery;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.colony.requestsystem.requestable.deliveryman.AbstractDeliverymanRequestable.getDefaultDeliveryPriority;\n+import static com.minecolonies.api.util.RSConstants.CONST_WAREHOUSE_RESOLVER_PRIORITY;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public abstract class AbstractWarehouseRequestResolver extends AbstractRequestResolver<IDeliverable>\n+{\n+    public AbstractWarehouseRequestResolver(\n+      @NotNull final ILocation location,\n+      @NotNull final IToken<?> token)\n+    {\n+        super(location, token);\n+    }\n+\n+    /**\n+     * Check to see if this object type is the same as the request\n+     */\n+    protected boolean isRequestFromSelf(final IRequest<?> requestToCheck)\n+    {\n+        if (requestToCheck.getRequester().getClass().equals(this.getClass()))\n+        {\n+            return true;\n+        }\n+        return false;\n+    }\n+    /**\n+     * Let the decendant class create an instance for use\n+     */\n+    protected abstract AbstractWarehouseRequestResolver newInstanceOfSelf(@NotNull final ILocation location, @NotNull final IToken<?> token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3MjcwMA==", "bodyText": "This is gone.", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r460072700", "createdAt": "2020-07-24T14:03:58Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/core/AbstractWarehouseRequestResolver.java", "diffHunk": "@@ -0,0 +1,285 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers.core;\n+\n+import com.google.common.collect.Lists;\n+import com.google.common.reflect.TypeToken;\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.request.RequestState;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.deliveryman.Delivery;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.ItemStackUtils;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.TranslationConstants;\n+import com.minecolonies.api.util.constant.TypeConstants;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraft.util.text.TranslationTextComponent;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.colony.requestsystem.requestable.deliveryman.AbstractDeliverymanRequestable.getDefaultDeliveryPriority;\n+import static com.minecolonies.api.util.RSConstants.CONST_WAREHOUSE_RESOLVER_PRIORITY;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public abstract class AbstractWarehouseRequestResolver extends AbstractRequestResolver<IDeliverable>\n+{\n+    public AbstractWarehouseRequestResolver(\n+      @NotNull final ILocation location,\n+      @NotNull final IToken<?> token)\n+    {\n+        super(location, token);\n+    }\n+\n+    /**\n+     * Check to see if this object type is the same as the request\n+     */\n+    protected boolean isRequestFromSelf(final IRequest<?> requestToCheck)\n+    {\n+        if (requestToCheck.getRequester().getClass().equals(this.getClass()))\n+        {\n+            return true;\n+        }\n+        return false;\n+    }\n+    /**\n+     * Let the decendant class create an instance for use\n+     */\n+    protected abstract AbstractWarehouseRequestResolver newInstanceOfSelf(@NotNull final ILocation location, @NotNull final IToken<?> token);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0NzI1Mw=="}, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTc0NzI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxOTo0MjoxN1rOG0cpow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMjozNDoxN1rOG0hlbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0ODU0Nw==", "bodyText": "The factory for this class is missing.", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457648547", "createdAt": "2020-07-20T19:42:17Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.core.AbstractWarehouseRequestResolver;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public class WarehouseConcreteRequestResolver extends AbstractWarehouseRequestResolver", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY2MTg4Nw==", "bodyText": "And, this is why the code you went \"wtf\" about. I didn't realize that there was a factory pattern set up for the WarehouseRequestResolver, as it doesn't actually appear to be in use.  I'll gladly add the factory and remove the  newInstanceOfSelf.", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457661887", "createdAt": "2020-07-20T20:07:43Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.core.AbstractWarehouseRequestResolver;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public class WarehouseConcreteRequestResolver extends AbstractWarehouseRequestResolver", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0ODU0Nw=="}, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY3NDg3MA==", "bodyText": "The entire RS uses factories that have to be registered. They handle the entire IO for it.", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457674870", "createdAt": "2020-07-20T20:33:14Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.core.AbstractWarehouseRequestResolver;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public class WarehouseConcreteRequestResolver extends AbstractWarehouseRequestResolver", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0ODU0Nw=="}, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcyOTM4OA==", "bodyText": "So, apparently I figured it out, added it, and forgot. The factories actually are there, but with the formatting issue in Stack.java it was not apparent.", "url": "https://github.com/ldtteam/minecolonies/pull/5391#discussion_r457729388", "createdAt": "2020-07-20T22:34:17Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/WarehouseConcreteRequestResolver.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.minecolonies.coremod.colony.requestsystem.resolvers;\n+\n+import com.minecolonies.api.colony.requestsystem.location.ILocation;\n+import com.minecolonies.api.colony.requestsystem.manager.IRequestManager;\n+import com.minecolonies.api.colony.requestsystem.request.IRequest;\n+import com.minecolonies.api.colony.requestsystem.requestable.IConcreteDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requestable.IDeliverable;\n+import com.minecolonies.api.colony.requestsystem.requester.IRequester;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.coremod.colony.Colony;\n+import com.minecolonies.coremod.colony.buildings.workerbuildings.BuildingWareHouse;\n+import com.minecolonies.coremod.colony.requestsystem.requesters.BuildingBasedRequester;\n+import com.minecolonies.coremod.colony.requestsystem.resolvers.core.AbstractWarehouseRequestResolver;\n+import com.minecolonies.coremod.tileentities.TileEntityWareHouse;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+/**\n+ * ----------------------- Not Documented Object ---------------------\n+ */\n+public class WarehouseConcreteRequestResolver extends AbstractWarehouseRequestResolver", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzY0ODU0Nw=="}, "originalCommit": {"oid": "e9c64eec3c85b4c695c26aa850ce8b60b10ba776"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3559, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}