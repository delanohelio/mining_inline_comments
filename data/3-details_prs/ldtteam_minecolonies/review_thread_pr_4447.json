{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5Mzk1MTYw", "number": 4447, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoxMDowOVrODohG_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0ODo0OVrODohrYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODEyMDk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/CitizenData.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoxMDowOVrOF3HZng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjoxMjo0OFrOF3Hdkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzNzI0Ng==", "bodyText": "hm why are we rerouting requests through here now? and some might cause an NPE with no work building", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393337246", "createdAt": "2020-03-16T22:10:09Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/CitizenData.java", "diffHunk": "@@ -1635,4 +974,43 @@ public void triggerInteraction(@NotNull final IInteractionResponseHandler handle\n             markDirty();\n         }\n     }\n+\n+    @Override\n+    public int getJobModifier()\n+    {\n+        return getCitizenSkillHandler().getJobModifier(this);\n+    }\n+\n+    // --------------------------- Request Handling --------------------------- //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "927eab9926d091079ce7e656414d209bd4b2421a"}, "originalPosition": 1165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzODAwMw==", "bodyText": "Oh, because doing citizenData.getHandler.get seemed a lot of chaining and cluttering elsewhere.", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393338003", "createdAt": "2020-03-16T22:12:08Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/CitizenData.java", "diffHunk": "@@ -1635,4 +974,43 @@ public void triggerInteraction(@NotNull final IInteractionResponseHandler handle\n             markDirty();\n         }\n     }\n+\n+    @Override\n+    public int getJobModifier()\n+    {\n+        return getCitizenSkillHandler().getJobModifier(this);\n+    }\n+\n+    // --------------------------- Request Handling --------------------------- //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzNzI0Ng=="}, "originalCommit": {"oid": "927eab9926d091079ce7e656414d209bd4b2421a"}, "originalPosition": 1165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzODI1OQ==", "bodyText": "final IBuilding workBuilding = data.getWorkBuilding();\n        if (workBuilding instanceof AbstractBuildingWorker)\n        {\n\nIt shouldn't", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393338259", "createdAt": "2020-03-16T22:12:48Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/CitizenData.java", "diffHunk": "@@ -1635,4 +974,43 @@ public void triggerInteraction(@NotNull final IInteractionResponseHandler handle\n             markDirty();\n         }\n     }\n+\n+    @Override\n+    public int getJobModifier()\n+    {\n+        return getCitizenSkillHandler().getJobModifier(this);\n+    }\n+\n+    // --------------------------- Request Handling --------------------------- //", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMzNzI0Ng=="}, "originalCommit": {"oid": "927eab9926d091079ce7e656414d209bd4b2421a"}, "originalPosition": 1165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODE5Mjg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/citizen/citizenhandlers/CitizenSkillHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozODoyM1rOF3IGcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjozOTozOVrOF3IIAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODcyMQ==", "bodyText": "I think this is off now, would give a child nearly capped \"experience\" stats, maybe set a max amount they can inherit, like 5?", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393348721", "createdAt": "2020-03-16T22:38:23Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/citizenhandlers/CitizenSkillHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package com.minecolonies.coremod.entity.citizen.citizenhandlers;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.entity.citizen.citizenhandlers.ICitizenSkillHandler;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.network.messages.VanillaParticleMessage;\n+import com.minecolonies.coremod.util.ExperienceUtils;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.Tuple;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.CitizenConstants.MAX_CITIZEN_LEVEL;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_LEVEL_MAP;\n+\n+/**\n+ * The citizen skill handler of the citizen.\n+ */\n+public class CitizenSkillHandler implements ICitizenSkillHandler\n+{\n+    /**\n+     * Chance to level up intelligence.\n+     */\n+    private static final int CHANCE_TO_LEVEL = 50;\n+\n+    /**\n+     * Defines how much child stats very from parents average(+ or -).\n+     */\n+    private static final int CHILD_STATS_VARIANCE = 3;\n+\n+    /**\n+     * Skill map.\n+     */\n+    public Map<Skill, Tuple<Integer, Double>> skillMap        = new HashMap<>();\n+\n+    @Override\n+    public void init(final int levelCap)\n+    {\n+        if (levelCap <= 1)\n+        {\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(1, 0.0D));\n+            }\n+        }\n+        else\n+        {\n+            final Random random = new Random();\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(random.nextInt(levelCap - 1) + 1, 0.0D));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void init(@NotNull final ICitizenData mom, @NotNull final ICitizenData dad, final Random rand)\n+    {\n+        for (final Skill skill : Skill.values())\n+        {\n+            skillMap.put(skill, new Tuple<>((mom.getCitizenSkillHandler().getLevel(skill) + dad.getCitizenSkillHandler().getLevel(skill)) / 2 + rand.nextInt(CHILD_STATS_VARIANCE) - rand.nextInt(CHILD_STATS_VARIANCE), 0.0D));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dd9bb6a4837d3ef9ec12297192a7ed0af80944"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0OTEyMQ==", "bodyText": "Good that you mentioned it, yes.", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393349121", "createdAt": "2020-03-16T22:39:39Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/citizenhandlers/CitizenSkillHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package com.minecolonies.coremod.entity.citizen.citizenhandlers;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.entity.citizen.citizenhandlers.ICitizenSkillHandler;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.network.messages.VanillaParticleMessage;\n+import com.minecolonies.coremod.util.ExperienceUtils;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.Tuple;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.CitizenConstants.MAX_CITIZEN_LEVEL;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_LEVEL_MAP;\n+\n+/**\n+ * The citizen skill handler of the citizen.\n+ */\n+public class CitizenSkillHandler implements ICitizenSkillHandler\n+{\n+    /**\n+     * Chance to level up intelligence.\n+     */\n+    private static final int CHANCE_TO_LEVEL = 50;\n+\n+    /**\n+     * Defines how much child stats very from parents average(+ or -).\n+     */\n+    private static final int CHILD_STATS_VARIANCE = 3;\n+\n+    /**\n+     * Skill map.\n+     */\n+    public Map<Skill, Tuple<Integer, Double>> skillMap        = new HashMap<>();\n+\n+    @Override\n+    public void init(final int levelCap)\n+    {\n+        if (levelCap <= 1)\n+        {\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(1, 0.0D));\n+            }\n+        }\n+        else\n+        {\n+            final Random random = new Random();\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(random.nextInt(levelCap - 1) + 1, 0.0D));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void init(@NotNull final ICitizenData mom, @NotNull final ICitizenData dad, final Random rand)\n+    {\n+        for (final Skill skill : Skill.values())\n+        {\n+            skillMap.put(skill, new Tuple<>((mom.getCitizenSkillHandler().getLevel(skill) + dad.getCitizenSkillHandler().getLevel(skill)) / 2 + rand.nextInt(CHILD_STATS_VARIANCE) - rand.nextInt(CHILD_STATS_VARIANCE), 0.0D));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM0ODcyMQ=="}, "originalCommit": {"oid": "e2dd9bb6a4837d3ef9ec12297192a7ed0af80944"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODIwOTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/entity/citizen/citizenhandlers/CitizenSkillHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0Njo0MVrOF3IRGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo1MjozMVrOF3IYDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTQ0OA==", "bodyText": "hm can we make this a for loop? kinda don't like that it can get stuck depending on what ExperienceUtils.getXPNeededForNextLevel returns, incase we somehow got to the max level", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393351448", "createdAt": "2020-03-16T22:46:41Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/citizenhandlers/CitizenSkillHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package com.minecolonies.coremod.entity.citizen.citizenhandlers;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.entity.citizen.citizenhandlers.ICitizenSkillHandler;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.network.messages.VanillaParticleMessage;\n+import com.minecolonies.coremod.util.ExperienceUtils;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.Tuple;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.CitizenConstants.MAX_CITIZEN_LEVEL;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_LEVEL_MAP;\n+\n+/**\n+ * The citizen skill handler of the citizen.\n+ */\n+public class CitizenSkillHandler implements ICitizenSkillHandler\n+{\n+    /**\n+     * Chance to level up intelligence.\n+     */\n+    private static final int CHANCE_TO_LEVEL = 50;\n+\n+    /**\n+     * Defines how much child stats very from parents average(+ or -).\n+     */\n+    private static final int CHILD_STATS_VARIANCE = 3;\n+\n+    /**\n+     * Skill map.\n+     */\n+    public Map<Skill, Tuple<Integer, Double>> skillMap        = new HashMap<>();\n+\n+    @Override\n+    public void init(final int levelCap)\n+    {\n+        if (levelCap <= 1)\n+        {\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(1, 0.0D));\n+            }\n+        }\n+        else\n+        {\n+            final Random random = new Random();\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(random.nextInt(levelCap - 1) + 1, 0.0D));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void init(@NotNull final ICitizenData mom, @NotNull final ICitizenData dad, final Random rand)\n+    {\n+        for (final Skill skill : Skill.values())\n+        {\n+            skillMap.put(skill, new Tuple<>((mom.getCitizenSkillHandler().getLevel(skill) + dad.getCitizenSkillHandler().getLevel(skill)) / 2 + rand.nextInt(CHILD_STATS_VARIANCE) - rand.nextInt(CHILD_STATS_VARIANCE), 0.0D));\n+        }\n+    }\n+\n+    @NotNull\n+    @Override\n+    public CompoundNBT write()\n+    {\n+        final CompoundNBT compoundNBT = new CompoundNBT();\n+\n+        @NotNull final ListNBT levelTagList = new ListNBT();\n+        for (@NotNull final Map.Entry<Skill, Tuple<Integer, Double>> entry : skillMap.entrySet())\n+        {\n+            @NotNull final CompoundNBT levelCompound = new CompoundNBT();\n+            levelCompound.putInt(TAG_SKILL, entry.getKey().ordinal());\n+            levelCompound.putInt(TAG_LEVEL, entry.getValue().getA());\n+            levelCompound.putDouble(TAG_EXPERIENCE, entry.getValue().getB());\n+            levelTagList.add(levelCompound);\n+        }\n+        compoundNBT.put(TAG_LEVEL_MAP, levelTagList);\n+\n+        return compoundNBT;\n+    }\n+\n+    @Override\n+    public void read(@NotNull final CompoundNBT compoundNBT)\n+    {\n+        final ListNBT levelTagList = compoundNBT.getList(TAG_LEVEL_MAP, Constants.NBT.TAG_COMPOUND);\n+        for (int i = 0; i < levelTagList.size(); ++i)\n+        {\n+            final CompoundNBT levelExperienceAtJob = levelTagList.getCompound(i);\n+            skillMap.put(Skill.values()[levelExperienceAtJob.getInt(TAG_SKILL)],\n+              new Tuple<>(Math.min(levelExperienceAtJob.getInt(TAG_LEVEL), MAX_CITIZEN_LEVEL), levelExperienceAtJob.getDouble(TAG_EXPERIENCE)));\n+        }\n+    }\n+\n+    @Override\n+    public void tryLevelUpIntelligence(@NotNull final Random random, final int customChance, @NotNull final ICitizenData citizen)\n+    {\n+        if ((customChance > 0 && random.nextInt(customChance) > 0) || (customChance < 1 && random.nextInt(CHANCE_TO_LEVEL) > 0))\n+        {\n+            return;\n+        }\n+\n+        final int levelCap = (int) citizen.getCitizenHappinessHandler().getHappiness();\n+        if (skillMap.get(Skill.Intelligence).getB() < levelCap * 9)\n+        {\n+            addXpToSkill(Skill.Intelligence, 10, citizen);\n+        }\n+    }\n+\n+    @Override\n+    public int getLevel(@NotNull final Skill skill)\n+    {\n+        return skillMap.get(skill).getA();\n+    }\n+\n+    @Override\n+    public void incrementLevel(@NotNull final Skill skill, final int level)\n+    {\n+        final Tuple<Integer, Double> current = skillMap.get(skill);\n+        skillMap.put(skill, new Tuple<>(Math.min(MAX_CITIZEN_LEVEL, Math.max(current.getA() + level, 1)), current.getB()));\n+    }\n+\n+    @Override\n+    public void addXpToSkill(final Skill skill, final double xp, final ICitizenData data)\n+    {\n+        final Tuple<Integer, Double> tuple = skillMap.get(skill);\n+        int level = tuple.getA();\n+        final double currentXp = tuple.getB();\n+\n+        final IBuilding home = data.getHomeBuilding();\n+\n+        final double citizenHutLevel = home == null ? 0 : home.getBuildingLevel();\n+        final double citizenHutMaxLevel = home == null ? 5 : home.getMaxBuildingLevel();\n+\n+        if ((citizenHutLevel < citizenHutMaxLevel && Math.pow(2.0, citizenHutLevel + 1.0) <= level) || level >= MAX_CITIZEN_LEVEL)\n+        {\n+            return;\n+        }\n+\n+        double xpToLevelUp = Math.min(Double.MAX_VALUE, currentXp + xp);\n+        while (xpToLevelUp > 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dd9bb6a4837d3ef9ec12297192a7ed0af80944"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1Mjc5MQ==", "bodyText": "getXPNeededForNextLevel is infinite, even over the max. So that shouldn't be a problem.", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393352791", "createdAt": "2020-03-16T22:51:01Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/citizenhandlers/CitizenSkillHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package com.minecolonies.coremod.entity.citizen.citizenhandlers;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.entity.citizen.citizenhandlers.ICitizenSkillHandler;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.network.messages.VanillaParticleMessage;\n+import com.minecolonies.coremod.util.ExperienceUtils;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.Tuple;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.CitizenConstants.MAX_CITIZEN_LEVEL;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_LEVEL_MAP;\n+\n+/**\n+ * The citizen skill handler of the citizen.\n+ */\n+public class CitizenSkillHandler implements ICitizenSkillHandler\n+{\n+    /**\n+     * Chance to level up intelligence.\n+     */\n+    private static final int CHANCE_TO_LEVEL = 50;\n+\n+    /**\n+     * Defines how much child stats very from parents average(+ or -).\n+     */\n+    private static final int CHILD_STATS_VARIANCE = 3;\n+\n+    /**\n+     * Skill map.\n+     */\n+    public Map<Skill, Tuple<Integer, Double>> skillMap        = new HashMap<>();\n+\n+    @Override\n+    public void init(final int levelCap)\n+    {\n+        if (levelCap <= 1)\n+        {\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(1, 0.0D));\n+            }\n+        }\n+        else\n+        {\n+            final Random random = new Random();\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(random.nextInt(levelCap - 1) + 1, 0.0D));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void init(@NotNull final ICitizenData mom, @NotNull final ICitizenData dad, final Random rand)\n+    {\n+        for (final Skill skill : Skill.values())\n+        {\n+            skillMap.put(skill, new Tuple<>((mom.getCitizenSkillHandler().getLevel(skill) + dad.getCitizenSkillHandler().getLevel(skill)) / 2 + rand.nextInt(CHILD_STATS_VARIANCE) - rand.nextInt(CHILD_STATS_VARIANCE), 0.0D));\n+        }\n+    }\n+\n+    @NotNull\n+    @Override\n+    public CompoundNBT write()\n+    {\n+        final CompoundNBT compoundNBT = new CompoundNBT();\n+\n+        @NotNull final ListNBT levelTagList = new ListNBT();\n+        for (@NotNull final Map.Entry<Skill, Tuple<Integer, Double>> entry : skillMap.entrySet())\n+        {\n+            @NotNull final CompoundNBT levelCompound = new CompoundNBT();\n+            levelCompound.putInt(TAG_SKILL, entry.getKey().ordinal());\n+            levelCompound.putInt(TAG_LEVEL, entry.getValue().getA());\n+            levelCompound.putDouble(TAG_EXPERIENCE, entry.getValue().getB());\n+            levelTagList.add(levelCompound);\n+        }\n+        compoundNBT.put(TAG_LEVEL_MAP, levelTagList);\n+\n+        return compoundNBT;\n+    }\n+\n+    @Override\n+    public void read(@NotNull final CompoundNBT compoundNBT)\n+    {\n+        final ListNBT levelTagList = compoundNBT.getList(TAG_LEVEL_MAP, Constants.NBT.TAG_COMPOUND);\n+        for (int i = 0; i < levelTagList.size(); ++i)\n+        {\n+            final CompoundNBT levelExperienceAtJob = levelTagList.getCompound(i);\n+            skillMap.put(Skill.values()[levelExperienceAtJob.getInt(TAG_SKILL)],\n+              new Tuple<>(Math.min(levelExperienceAtJob.getInt(TAG_LEVEL), MAX_CITIZEN_LEVEL), levelExperienceAtJob.getDouble(TAG_EXPERIENCE)));\n+        }\n+    }\n+\n+    @Override\n+    public void tryLevelUpIntelligence(@NotNull final Random random, final int customChance, @NotNull final ICitizenData citizen)\n+    {\n+        if ((customChance > 0 && random.nextInt(customChance) > 0) || (customChance < 1 && random.nextInt(CHANCE_TO_LEVEL) > 0))\n+        {\n+            return;\n+        }\n+\n+        final int levelCap = (int) citizen.getCitizenHappinessHandler().getHappiness();\n+        if (skillMap.get(Skill.Intelligence).getB() < levelCap * 9)\n+        {\n+            addXpToSkill(Skill.Intelligence, 10, citizen);\n+        }\n+    }\n+\n+    @Override\n+    public int getLevel(@NotNull final Skill skill)\n+    {\n+        return skillMap.get(skill).getA();\n+    }\n+\n+    @Override\n+    public void incrementLevel(@NotNull final Skill skill, final int level)\n+    {\n+        final Tuple<Integer, Double> current = skillMap.get(skill);\n+        skillMap.put(skill, new Tuple<>(Math.min(MAX_CITIZEN_LEVEL, Math.max(current.getA() + level, 1)), current.getB()));\n+    }\n+\n+    @Override\n+    public void addXpToSkill(final Skill skill, final double xp, final ICitizenData data)\n+    {\n+        final Tuple<Integer, Double> tuple = skillMap.get(skill);\n+        int level = tuple.getA();\n+        final double currentXp = tuple.getB();\n+\n+        final IBuilding home = data.getHomeBuilding();\n+\n+        final double citizenHutLevel = home == null ? 0 : home.getBuildingLevel();\n+        final double citizenHutMaxLevel = home == null ? 5 : home.getMaxBuildingLevel();\n+\n+        if ((citizenHutLevel < citizenHutMaxLevel && Math.pow(2.0, citizenHutLevel + 1.0) <= level) || level >= MAX_CITIZEN_LEVEL)\n+        {\n+            return;\n+        }\n+\n+        double xpToLevelUp = Math.min(Double.MAX_VALUE, currentXp + xp);\n+        while (xpToLevelUp > 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTQ0OA=="}, "originalCommit": {"oid": "e2dd9bb6a4837d3ef9ec12297192a7ed0af80944"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MzIyOQ==", "bodyText": "kk", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393353229", "createdAt": "2020-03-16T22:52:31Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/citizen/citizenhandlers/CitizenSkillHandler.java", "diffHunk": "@@ -0,0 +1,252 @@\n+package com.minecolonies.coremod.entity.citizen.citizenhandlers;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import com.minecolonies.api.entity.citizen.Skill;\n+import com.minecolonies.api.entity.citizen.citizenhandlers.ICitizenSkillHandler;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuildingWorker;\n+import com.minecolonies.coremod.network.messages.VanillaParticleMessage;\n+import com.minecolonies.coremod.util.ExperienceUtils;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.Tuple;\n+import net.minecraftforge.common.util.Constants;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static com.minecolonies.api.util.constant.CitizenConstants.MAX_CITIZEN_LEVEL;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.*;\n+import static com.minecolonies.api.util.constant.NbtTagConstants.TAG_LEVEL_MAP;\n+\n+/**\n+ * The citizen skill handler of the citizen.\n+ */\n+public class CitizenSkillHandler implements ICitizenSkillHandler\n+{\n+    /**\n+     * Chance to level up intelligence.\n+     */\n+    private static final int CHANCE_TO_LEVEL = 50;\n+\n+    /**\n+     * Defines how much child stats very from parents average(+ or -).\n+     */\n+    private static final int CHILD_STATS_VARIANCE = 3;\n+\n+    /**\n+     * Skill map.\n+     */\n+    public Map<Skill, Tuple<Integer, Double>> skillMap        = new HashMap<>();\n+\n+    @Override\n+    public void init(final int levelCap)\n+    {\n+        if (levelCap <= 1)\n+        {\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(1, 0.0D));\n+            }\n+        }\n+        else\n+        {\n+            final Random random = new Random();\n+            for (final Skill skill : Skill.values())\n+            {\n+                skillMap.put(skill, new Tuple<>(random.nextInt(levelCap - 1) + 1, 0.0D));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void init(@NotNull final ICitizenData mom, @NotNull final ICitizenData dad, final Random rand)\n+    {\n+        for (final Skill skill : Skill.values())\n+        {\n+            skillMap.put(skill, new Tuple<>((mom.getCitizenSkillHandler().getLevel(skill) + dad.getCitizenSkillHandler().getLevel(skill)) / 2 + rand.nextInt(CHILD_STATS_VARIANCE) - rand.nextInt(CHILD_STATS_VARIANCE), 0.0D));\n+        }\n+    }\n+\n+    @NotNull\n+    @Override\n+    public CompoundNBT write()\n+    {\n+        final CompoundNBT compoundNBT = new CompoundNBT();\n+\n+        @NotNull final ListNBT levelTagList = new ListNBT();\n+        for (@NotNull final Map.Entry<Skill, Tuple<Integer, Double>> entry : skillMap.entrySet())\n+        {\n+            @NotNull final CompoundNBT levelCompound = new CompoundNBT();\n+            levelCompound.putInt(TAG_SKILL, entry.getKey().ordinal());\n+            levelCompound.putInt(TAG_LEVEL, entry.getValue().getA());\n+            levelCompound.putDouble(TAG_EXPERIENCE, entry.getValue().getB());\n+            levelTagList.add(levelCompound);\n+        }\n+        compoundNBT.put(TAG_LEVEL_MAP, levelTagList);\n+\n+        return compoundNBT;\n+    }\n+\n+    @Override\n+    public void read(@NotNull final CompoundNBT compoundNBT)\n+    {\n+        final ListNBT levelTagList = compoundNBT.getList(TAG_LEVEL_MAP, Constants.NBT.TAG_COMPOUND);\n+        for (int i = 0; i < levelTagList.size(); ++i)\n+        {\n+            final CompoundNBT levelExperienceAtJob = levelTagList.getCompound(i);\n+            skillMap.put(Skill.values()[levelExperienceAtJob.getInt(TAG_SKILL)],\n+              new Tuple<>(Math.min(levelExperienceAtJob.getInt(TAG_LEVEL), MAX_CITIZEN_LEVEL), levelExperienceAtJob.getDouble(TAG_EXPERIENCE)));\n+        }\n+    }\n+\n+    @Override\n+    public void tryLevelUpIntelligence(@NotNull final Random random, final int customChance, @NotNull final ICitizenData citizen)\n+    {\n+        if ((customChance > 0 && random.nextInt(customChance) > 0) || (customChance < 1 && random.nextInt(CHANCE_TO_LEVEL) > 0))\n+        {\n+            return;\n+        }\n+\n+        final int levelCap = (int) citizen.getCitizenHappinessHandler().getHappiness();\n+        if (skillMap.get(Skill.Intelligence).getB() < levelCap * 9)\n+        {\n+            addXpToSkill(Skill.Intelligence, 10, citizen);\n+        }\n+    }\n+\n+    @Override\n+    public int getLevel(@NotNull final Skill skill)\n+    {\n+        return skillMap.get(skill).getA();\n+    }\n+\n+    @Override\n+    public void incrementLevel(@NotNull final Skill skill, final int level)\n+    {\n+        final Tuple<Integer, Double> current = skillMap.get(skill);\n+        skillMap.put(skill, new Tuple<>(Math.min(MAX_CITIZEN_LEVEL, Math.max(current.getA() + level, 1)), current.getB()));\n+    }\n+\n+    @Override\n+    public void addXpToSkill(final Skill skill, final double xp, final ICitizenData data)\n+    {\n+        final Tuple<Integer, Double> tuple = skillMap.get(skill);\n+        int level = tuple.getA();\n+        final double currentXp = tuple.getB();\n+\n+        final IBuilding home = data.getHomeBuilding();\n+\n+        final double citizenHutLevel = home == null ? 0 : home.getBuildingLevel();\n+        final double citizenHutMaxLevel = home == null ? 5 : home.getMaxBuildingLevel();\n+\n+        if ((citizenHutLevel < citizenHutMaxLevel && Math.pow(2.0, citizenHutLevel + 1.0) <= level) || level >= MAX_CITIZEN_LEVEL)\n+        {\n+            return;\n+        }\n+\n+        double xpToLevelUp = Math.min(Double.MAX_VALUE, currentXp + xp);\n+        while (xpToLevelUp > 0)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MTQ0OA=="}, "originalCommit": {"oid": "e2dd9bb6a4837d3ef9ec12297192a7ed0af80944"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzODIxNDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/placementhandlers/MinecoloniesPlacementHandlers.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo0ODo0OVrOF3ITwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMjo1NTowM1rOF3IbMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjEyOQ==", "bodyText": "this isnt needed, same as above", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393352129", "createdAt": "2020-03-16T22:48:49Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/placementhandlers/MinecoloniesPlacementHandlers.java", "diffHunk": "@@ -155,9 +155,11 @@ public Object handle(\n                 {\n                     handleTileEntityPlacement(tileEntityData, world, pos);\n                 }\n+\n+                entity = world.getTileEntity(pos);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2dd9bb6a4837d3ef9ec12297192a7ed0af80944"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjQzMw==", "bodyText": "Unless a new tileEntity was placed, right?", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393352433", "createdAt": "2020-03-16T22:49:56Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/placementhandlers/MinecoloniesPlacementHandlers.java", "diffHunk": "@@ -155,9 +155,11 @@ public Object handle(\n                 {\n                     handleTileEntityPlacement(tileEntityData, world, pos);\n                 }\n+\n+                entity = world.getTileEntity(pos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjEyOQ=="}, "originalCommit": {"oid": "e2dd9bb6a4837d3ef9ec12297192a7ed0af80944"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1Mjk5Ng==", "bodyText": "oh you're right, better leave it then", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393352996", "createdAt": "2020-03-16T22:51:38Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/placementhandlers/MinecoloniesPlacementHandlers.java", "diffHunk": "@@ -155,9 +155,11 @@ public Object handle(\n                 {\n                     handleTileEntityPlacement(tileEntityData, world, pos);\n                 }\n+\n+                entity = world.getTileEntity(pos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjEyOQ=="}, "originalCommit": {"oid": "e2dd9bb6a4837d3ef9ec12297192a7ed0af80944"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1NDAzNA==", "bodyText": "It grows quadratic as well, so it should be fine", "url": "https://github.com/ldtteam/minecolonies/pull/4447#discussion_r393354034", "createdAt": "2020-03-16T22:55:03Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/placementhandlers/MinecoloniesPlacementHandlers.java", "diffHunk": "@@ -155,9 +155,11 @@ public Object handle(\n                 {\n                     handleTileEntityPlacement(tileEntityData, world, pos);\n                 }\n+\n+                entity = world.getTileEntity(pos);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzM1MjEyOQ=="}, "originalCommit": {"oid": "e2dd9bb6a4837d3ef9ec12297192a7ed0af80944"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3234, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}