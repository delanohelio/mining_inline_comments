{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Njk3MDI3", "number": 4545, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzozNjoxOVrODtaT1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowNjowMlrODtqsjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTQzNTc0OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityStash.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzozNjoxOVrOF-0QJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzozNjoxOVrOF-0QJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMjEzMg==", "bodyText": "Can you format those to our code style and add javadoc?", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401412132", "createdAt": "2020-04-01T07:36:19Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityStash.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.minecolonies.api.tileentities;\n+\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.colony.buildings.IBuildingContainer;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.tileentity.TileEntityType;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.MAX_PRIO;\n+import static com.minecolonies.api.util.constant.Constants.DEFAULT_SIZE;\n+\n+/**\n+ * Class which handles the tileEntity of our colonyBuildings.\n+ */\n+\n+public class TileEntityStash extends TileEntityColonyBuilding\n+{\n+\n+    public TileEntityStash(final TileEntityType type)\n+    {\n+        super(type);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    public TileEntityStash()\n+    {\n+        super(MinecoloniesTileEntities.STASH);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    private void buildingInventoryChanged(boolean isEmpty) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a6de4b790e8f62b1a554cc6096fb7b9c315880"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTQ0MjAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowStash.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzozNzo1N1rOF-0T3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzozNzo1N1rOF-0T3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxMzA4NQ==", "bodyText": "I would probably not have it have a GUI at all. Only the inventory GUI should be enough.", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401413085", "createdAt": "2020-04-01T07:37:57Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowStash.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.Pane;\n+import com.ldtteam.blockout.controls.*;\n+import com.ldtteam.blockout.views.ScrollingList;\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.colony.buildings.views.AbstractBuildingView;\n+import com.minecolonies.coremod.network.messages.ChangeDeliveryPriorityMessage;\n+import com.minecolonies.coremod.network.messages.ChangeDeliveryPriorityStateMessage;\n+import com.minecolonies.coremod.network.messages.OpenInventoryMessage;\n+import com.minecolonies.coremod.network.messages.PostBoxRequestMessage;\n+import net.minecraft.item.ItemStack;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+import static com.minecolonies.api.util.constant.WindowConstants.*;\n+\n+/**\n+ * Window for the replace block GUI.\n+ */\n+public class WindowStash extends AbstractWindowSkeleton implements ButtonHandler", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91a6de4b790e8f62b1a554cc6096fb7b9c315880"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjEwNTI4OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityStash.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMTozOFrOF_Oe5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOToyMDo0NFrOF_PIQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MTg5Mw==", "bodyText": "else on other line", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401841893", "createdAt": "2020-04-01T19:01:38Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityStash.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.minecolonies.api.tileentities;\n+\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.colony.buildings.IBuildingContainer;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.tileentity.TileEntityType;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.MAX_PRIO;\n+import static com.minecolonies.api.util.constant.Constants.DEFAULT_SIZE;\n+\n+/**\n+ * Class which handles the tileEntity for the Stash block.\n+ */\n+\n+public class TileEntityStash extends TileEntityColonyBuilding\n+{\n+\n+    public TileEntityStash(final TileEntityType type)\n+    {\n+        super(type);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    public TileEntityStash()\n+    {\n+        super(MinecoloniesTileEntities.STASH);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    /**\n+     * Called when the inventory of the tileEntity it holds it's changed\n+     *\n+     * @param isEmpty\n+     */\n+    private void buildingInventoryChanged(boolean isEmpty)\n+    {\n+        IBuildingContainer building = getBuilding();\n+        if (!isEmpty && building != null && !building.isPriorityStatic())\n+        {\n+            if (building instanceof IBuilding)\n+            {\n+                IBuilding iBuilding = (IBuilding) building;\n+                if (!iBuilding.isBeingGathered())\n+                {\n+                    iBuilding.alterPickUpPriority(MAX_PRIO);\n+                }\n+            } else", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae51b206bb4ac73b272b8bffa4a363b2a1599547"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MjQ4MA==", "bodyText": "Sorry, I thought I had the auto-formatter fixed this. I'm fixing this manually.", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401852480", "createdAt": "2020-04-01T19:20:44Z", "author": {"login": "Shirkit"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityStash.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.minecolonies.api.tileentities;\n+\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.colony.buildings.IBuildingContainer;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.tileentity.TileEntityType;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.MAX_PRIO;\n+import static com.minecolonies.api.util.constant.Constants.DEFAULT_SIZE;\n+\n+/**\n+ * Class which handles the tileEntity for the Stash block.\n+ */\n+\n+public class TileEntityStash extends TileEntityColonyBuilding\n+{\n+\n+    public TileEntityStash(final TileEntityType type)\n+    {\n+        super(type);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    public TileEntityStash()\n+    {\n+        super(MinecoloniesTileEntities.STASH);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    /**\n+     * Called when the inventory of the tileEntity it holds it's changed\n+     *\n+     * @param isEmpty\n+     */\n+    private void buildingInventoryChanged(boolean isEmpty)\n+    {\n+        IBuildingContainer building = getBuilding();\n+        if (!isEmpty && building != null && !building.isPriorityStatic())\n+        {\n+            if (building instanceof IBuilding)\n+            {\n+                IBuilding iBuilding = (IBuilding) building;\n+                if (!iBuilding.isBeingGathered())\n+                {\n+                    iBuilding.alterPickUpPriority(MAX_PRIO);\n+                }\n+            } else", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MTg5Mw=="}, "originalCommit": {"oid": "ae51b206bb4ac73b272b8bffa4a363b2a1599547"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjEwNzYxOnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityStash.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowMjoxNVrOF_OgRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTozMjo1NFrOF_PikQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjI0Ng==", "bodyText": "why do we need a different handling for IBuilding here? isn't it always an IBuilding or never?", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401842246", "createdAt": "2020-04-01T19:02:15Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityStash.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.minecolonies.api.tileentities;\n+\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.colony.buildings.IBuildingContainer;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.tileentity.TileEntityType;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.MAX_PRIO;\n+import static com.minecolonies.api.util.constant.Constants.DEFAULT_SIZE;\n+\n+/**\n+ * Class which handles the tileEntity for the Stash block.\n+ */\n+\n+public class TileEntityStash extends TileEntityColonyBuilding\n+{\n+\n+    public TileEntityStash(final TileEntityType type)\n+    {\n+        super(type);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    public TileEntityStash()\n+    {\n+        super(MinecoloniesTileEntities.STASH);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    /**\n+     * Called when the inventory of the tileEntity it holds it's changed\n+     *\n+     * @param isEmpty\n+     */\n+    private void buildingInventoryChanged(boolean isEmpty)\n+    {\n+        IBuildingContainer building = getBuilding();\n+        if (!isEmpty && building != null && !building.isPriorityStatic())\n+        {\n+            if (building instanceof IBuilding)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae51b206bb4ac73b272b8bffa4a363b2a1599547"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1MzY3MA==", "bodyText": "It should be always an instance of IBuilding, but as so far as I've looked, I haven't read the full project to see if it could be reset somehow, that's why I left the check there. Removing it.", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401853670", "createdAt": "2020-04-01T19:23:04Z", "author": {"login": "Shirkit"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityStash.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.minecolonies.api.tileentities;\n+\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.colony.buildings.IBuildingContainer;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.tileentity.TileEntityType;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.MAX_PRIO;\n+import static com.minecolonies.api.util.constant.Constants.DEFAULT_SIZE;\n+\n+/**\n+ * Class which handles the tileEntity for the Stash block.\n+ */\n+\n+public class TileEntityStash extends TileEntityColonyBuilding\n+{\n+\n+    public TileEntityStash(final TileEntityType type)\n+    {\n+        super(type);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    public TileEntityStash()\n+    {\n+        super(MinecoloniesTileEntities.STASH);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    /**\n+     * Called when the inventory of the tileEntity it holds it's changed\n+     *\n+     * @param isEmpty\n+     */\n+    private void buildingInventoryChanged(boolean isEmpty)\n+    {\n+        IBuildingContainer building = getBuilding();\n+        if (!isEmpty && building != null && !building.isPriorityStatic())\n+        {\n+            if (building instanceof IBuilding)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjI0Ng=="}, "originalCommit": {"oid": "ae51b206bb4ac73b272b8bffa4a363b2a1599547"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1OTIxNw==", "bodyText": "To be fair, I would replace the building != null check with that instanceof check.", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401859217", "createdAt": "2020-04-01T19:32:54Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/tileentities/TileEntityStash.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.minecolonies.api.tileentities;\n+\n+import com.minecolonies.api.colony.buildings.IBuilding;\n+import com.minecolonies.api.colony.buildings.IBuildingContainer;\n+import net.minecraft.item.ItemStack;\n+import net.minecraft.tileentity.TileEntityType;\n+import org.jetbrains.annotations.NotNull;\n+\n+import javax.annotation.Nonnull;\n+\n+import static com.minecolonies.api.util.constant.BuildingConstants.MAX_PRIO;\n+import static com.minecolonies.api.util.constant.Constants.DEFAULT_SIZE;\n+\n+/**\n+ * Class which handles the tileEntity for the Stash block.\n+ */\n+\n+public class TileEntityStash extends TileEntityColonyBuilding\n+{\n+\n+    public TileEntityStash(final TileEntityType type)\n+    {\n+        super(type);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    public TileEntityStash()\n+    {\n+        super(MinecoloniesTileEntities.STASH);\n+        inventory = new NotifyingRackInventory(DEFAULT_SIZE);\n+    }\n+\n+    /**\n+     * Called when the inventory of the tileEntity it holds it's changed\n+     *\n+     * @param isEmpty\n+     */\n+    private void buildingInventoryChanged(boolean isEmpty)\n+    {\n+        IBuildingContainer building = getBuilding();\n+        if (!isEmpty && building != null && !building.isPriorityStatic())\n+        {\n+            if (building instanceof IBuilding)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0MjI0Ng=="}, "originalCommit": {"oid": "ae51b206bb4ac73b272b8bffa4a363b2a1599547"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjEyMDQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/Stash.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTowNjowMlrOF_Ooew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTozNDoxMVrOF_PlUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0NDM0Nw==", "bodyText": "I know this is a bit out of the scope of this PR. But maybe you're up to it. Maybe it makes sense to extract what Stash and PostBox need from AbstractBuilding into a separate abstract super class and have Stash and PostBox extend those.\nSo that we don't need the \"!(building instanceof PostBox) && !(building instanceof Stash)\" checks in a row, that might be cleaner.\nOr at least an IRSComponent interface that both Stash and PostBox implement and we check only if !instanceof IRSComponent", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401844347", "createdAt": "2020-04-01T19:06:02Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/Stash.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.google.common.collect.ImmutableCollection;\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.requestsystem.resolver.IRequestResolver;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuilding;\n+import com.minecolonies.coremod.colony.buildings.views.AbstractBuildingView;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Class used to manage the stash building block.\n+ */\n+public class Stash extends AbstractBuilding\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae51b206bb4ac73b272b8bffa4a363b2a1599547"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1ODIyOQ==", "bodyText": "I thought about that as well, but I figured it was a bit out of scope of the PR. Also, it wouldn't need an extraction only from AbsctractBuilding, but the whole hierarchy, as there's a lot things there that isn't needed whatsoever. And I actually thought of, maybe, letting Stash and PostBox be also built along with an schematic? I think it's a whole project on it's on right there, and being new to the project (and to Minecraft modding), I'm not confident enough to pull drastic changes such as these.\nBut the idea of the interface is actually good. The IRSComponent you thought would be just an empty interface?", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401858229", "createdAt": "2020-04-01T19:31:12Z", "author": {"login": "Shirkit"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/Stash.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.google.common.collect.ImmutableCollection;\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.requestsystem.resolver.IRequestResolver;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuilding;\n+import com.minecolonies.coremod.colony.buildings.views.AbstractBuildingView;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Class used to manage the stash building block.\n+ */\n+public class Stash extends AbstractBuilding\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0NDM0Nw=="}, "originalCommit": {"oid": "ae51b206bb4ac73b272b8bffa4a363b2a1599547"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg1OTkyMg==", "bodyText": "Yes, I agree. Yes it would just be an empty interface.", "url": "https://github.com/ldtteam/minecolonies/pull/4545#discussion_r401859922", "createdAt": "2020-04-01T19:34:11Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/Stash.java", "diffHunk": "@@ -0,0 +1,61 @@\n+package com.minecolonies.coremod.colony.buildings.workerbuildings;\n+\n+import com.google.common.collect.ImmutableCollection;\n+import com.google.common.collect.ImmutableList;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyView;\n+import com.minecolonies.api.colony.buildings.ModBuildings;\n+import com.minecolonies.api.colony.buildings.registry.BuildingEntry;\n+import com.minecolonies.api.colony.requestsystem.resolver.IRequestResolver;\n+import com.minecolonies.coremod.colony.buildings.AbstractBuilding;\n+import com.minecolonies.coremod.colony.buildings.views.AbstractBuildingView;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+/**\n+ * Class used to manage the stash building block.\n+ */\n+public class Stash extends AbstractBuilding\n+{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg0NDM0Nw=="}, "originalCommit": {"oid": "ae51b206bb4ac73b272b8bffa4a363b2a1599547"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3247, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}