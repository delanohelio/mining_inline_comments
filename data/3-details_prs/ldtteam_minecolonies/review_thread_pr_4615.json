{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjM2NTg2", "number": 4615, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoxNTo1M1rODw_iug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODozNjoyOVrODxLcRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk5MzIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowTownHallColonyManage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoxNTo1M1rOGEQvBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwODozMjo1M1rOGETcOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMTY3MA==", "bodyText": "Why not register them as button handlers?", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407121670", "createdAt": "2020-04-11T23:15:53Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowTownHallColonyManage.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.controls.Button;\n+import com.ldtteam.blockout.controls.ButtonImage;\n+import com.ldtteam.blockout.controls.Text;\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyTagCapability;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.coremod.MineColonies;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.network.messages.CreateColonyMessage;\n+import com.minecolonies.coremod.network.messages.VanillaParticleMessage;\n+import net.minecraft.client.Minecraft;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.SoundCategory;\n+import net.minecraft.util.SoundEvents;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraft.world.chunk.Chunk;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.minecolonies.api.util.constant.Constants.MOD_ID;\n+import static com.minecolonies.api.util.constant.TranslationConstants.CANT_PLACE_COLONY_TOO_CLOSE_TO_SPAWN;\n+import static com.minecolonies.api.util.constant.TranslationConstants.CANT_PLACE_COLONY_TOO_FAR_FROM_SPAWN;\n+import static com.minecolonies.api.util.constant.WindowConstants.TOWNHALL_COLONY_MANAGEMENT_GUI;\n+import static com.minecolonies.coremod.MineColonies.CLOSE_COLONY_CAP;\n+\n+/**\n+ * TownhallGUI for managing colony creation/deletion\n+ */\n+public class WindowTownHallColonyManage extends AbstractWindowSkeleton\n+{\n+    private static final String BUTTON_CLOSE  = \"cancel\";\n+    private static final String BUTTON_DELETE = \"delete\";\n+    private static final String BUTTON_CREATE = \"create\";\n+    private static final String TEXT_NEARBY   = \"nearbycolony\";\n+    private static final String TEXT_OWN      = \"owncolony\";\n+    private static final String TEXT_FEEDBACK = \"creationpossible\";\n+\n+    /**\n+     * Townhall position\n+     */\n+    private final BlockPos pos;\n+\n+    public WindowTownHallColonyManage(final PlayerEntity player, final BlockPos pos, final World world)\n+    {\n+        super(MOD_ID + TOWNHALL_COLONY_MANAGEMENT_GUI);\n+\n+        this.pos = pos;\n+\n+        final IColony existingColony = IColonyManager.getInstance().getIColony(world, pos);\n+\n+        if (existingColony != null)\n+        {\n+            // Colony here\n+            findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.here\",\n+              existingColony.getName(),\n+              existingColony.getPermissions().getOwnerName()));\n+        }\n+        else\n+        {\n+            // Close colony\n+            int closeClonyID = findNextNearbyColony(world, pos, MineColonies.getConfig().getCommon().minTownHallPadding.get());\n+\n+            if (closeClonyID != 0)\n+            {\n+                findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.near\", closeClonyID));\n+            }\n+            else\n+            {\n+                // No close colony\n+                findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.nonenearby\"));\n+            }\n+        }\n+\n+        final IColony ownerColony = IColonyManager.getInstance().getIColonyByOwner(world, player);\n+        if (ownerColony != null)\n+        {\n+            findPaneOfTypeByID(BUTTON_DELETE, ButtonImage.class).enable();\n+            findPaneOfTypeByID(TEXT_OWN, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.own\", ownerColony.getCenter()));\n+\n+            if (MineColonies.getConfig().getCommon().allowInfiniteColonies.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.existingandabandon\"));\n+            }\n+            else\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.existing\"));\n+            }\n+        }\n+        else\n+        {\n+            findPaneOfTypeByID(TEXT_OWN, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.none\"));\n+\n+            if (existingColony != null || IColonyManager.getInstance().isTooCloseToColony(world, pos))\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.tooclose\"));\n+            }\n+        }\n+\n+        if (MineColonies.getConfig().getCommon().restrictColonyPlacement.get())\n+        {\n+            final double spawnDistance = Math.sqrt(BlockPosUtil.getDistanceSquared2D(pos, world.getSpawnPoint()));\n+            if (spawnDistance < MineColonies.getConfig().getCommon().minDistanceFromWorldSpawn.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(CANT_PLACE_COLONY_TOO_CLOSE_TO_SPAWN,\n+                  MineColonies.getConfig().getCommon().minDistanceFromWorldSpawn.get()));\n+            }\n+            else if (spawnDistance > MineColonies.getConfig().getCommon().maxDistanceFromWorldSpawn.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(CANT_PLACE_COLONY_TOO_FAR_FROM_SPAWN,\n+                  MineColonies.getConfig().getCommon().maxDistanceFromWorldSpawn.get()));\n+            }\n+        }\n+\n+        if (findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).getTextContent().isEmpty())\n+        {\n+            findPaneOfTypeByID(BUTTON_CREATE, ButtonImage.class).enable();\n+            findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.allowed.create\"));\n+        }\n+    }\n+\n+    @Override\n+    public void onButtonClicked(@NotNull final Button button)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NjAxMA==", "bodyText": "fixed", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407166010", "createdAt": "2020-04-12T08:32:53Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowTownHallColonyManage.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.controls.Button;\n+import com.ldtteam.blockout.controls.ButtonImage;\n+import com.ldtteam.blockout.controls.Text;\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyTagCapability;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.coremod.MineColonies;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.network.messages.CreateColonyMessage;\n+import com.minecolonies.coremod.network.messages.VanillaParticleMessage;\n+import net.minecraft.client.Minecraft;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.SoundCategory;\n+import net.minecraft.util.SoundEvents;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraft.world.chunk.Chunk;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.minecolonies.api.util.constant.Constants.MOD_ID;\n+import static com.minecolonies.api.util.constant.TranslationConstants.CANT_PLACE_COLONY_TOO_CLOSE_TO_SPAWN;\n+import static com.minecolonies.api.util.constant.TranslationConstants.CANT_PLACE_COLONY_TOO_FAR_FROM_SPAWN;\n+import static com.minecolonies.api.util.constant.WindowConstants.TOWNHALL_COLONY_MANAGEMENT_GUI;\n+import static com.minecolonies.coremod.MineColonies.CLOSE_COLONY_CAP;\n+\n+/**\n+ * TownhallGUI for managing colony creation/deletion\n+ */\n+public class WindowTownHallColonyManage extends AbstractWindowSkeleton\n+{\n+    private static final String BUTTON_CLOSE  = \"cancel\";\n+    private static final String BUTTON_DELETE = \"delete\";\n+    private static final String BUTTON_CREATE = \"create\";\n+    private static final String TEXT_NEARBY   = \"nearbycolony\";\n+    private static final String TEXT_OWN      = \"owncolony\";\n+    private static final String TEXT_FEEDBACK = \"creationpossible\";\n+\n+    /**\n+     * Townhall position\n+     */\n+    private final BlockPos pos;\n+\n+    public WindowTownHallColonyManage(final PlayerEntity player, final BlockPos pos, final World world)\n+    {\n+        super(MOD_ID + TOWNHALL_COLONY_MANAGEMENT_GUI);\n+\n+        this.pos = pos;\n+\n+        final IColony existingColony = IColonyManager.getInstance().getIColony(world, pos);\n+\n+        if (existingColony != null)\n+        {\n+            // Colony here\n+            findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.here\",\n+              existingColony.getName(),\n+              existingColony.getPermissions().getOwnerName()));\n+        }\n+        else\n+        {\n+            // Close colony\n+            int closeClonyID = findNextNearbyColony(world, pos, MineColonies.getConfig().getCommon().minTownHallPadding.get());\n+\n+            if (closeClonyID != 0)\n+            {\n+                findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.near\", closeClonyID));\n+            }\n+            else\n+            {\n+                // No close colony\n+                findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.nonenearby\"));\n+            }\n+        }\n+\n+        final IColony ownerColony = IColonyManager.getInstance().getIColonyByOwner(world, player);\n+        if (ownerColony != null)\n+        {\n+            findPaneOfTypeByID(BUTTON_DELETE, ButtonImage.class).enable();\n+            findPaneOfTypeByID(TEXT_OWN, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.own\", ownerColony.getCenter()));\n+\n+            if (MineColonies.getConfig().getCommon().allowInfiniteColonies.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.existingandabandon\"));\n+            }\n+            else\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.existing\"));\n+            }\n+        }\n+        else\n+        {\n+            findPaneOfTypeByID(TEXT_OWN, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.none\"));\n+\n+            if (existingColony != null || IColonyManager.getInstance().isTooCloseToColony(world, pos))\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.tooclose\"));\n+            }\n+        }\n+\n+        if (MineColonies.getConfig().getCommon().restrictColonyPlacement.get())\n+        {\n+            final double spawnDistance = Math.sqrt(BlockPosUtil.getDistanceSquared2D(pos, world.getSpawnPoint()));\n+            if (spawnDistance < MineColonies.getConfig().getCommon().minDistanceFromWorldSpawn.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(CANT_PLACE_COLONY_TOO_CLOSE_TO_SPAWN,\n+                  MineColonies.getConfig().getCommon().minDistanceFromWorldSpawn.get()));\n+            }\n+            else if (spawnDistance > MineColonies.getConfig().getCommon().maxDistanceFromWorldSpawn.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(CANT_PLACE_COLONY_TOO_FAR_FROM_SPAWN,\n+                  MineColonies.getConfig().getCommon().maxDistanceFromWorldSpawn.get()));\n+            }\n+        }\n+\n+        if (findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).getTextContent().isEmpty())\n+        {\n+            findPaneOfTypeByID(BUTTON_CREATE, ButtonImage.class).enable();\n+            findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.allowed.create\"));\n+        }\n+    }\n+\n+    @Override\n+    public void onButtonClicked(@NotNull final Button button)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMTY3MA=="}, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk5MzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowTownHallColonyManage.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoxNjo1MFrOGEQvNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwODozNDo1NlrOGETdGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMTcxNw==", "bodyText": "On the client side?", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407121717", "createdAt": "2020-04-11T23:16:50Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowTownHallColonyManage.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.controls.Button;\n+import com.ldtteam.blockout.controls.ButtonImage;\n+import com.ldtteam.blockout.controls.Text;\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyTagCapability;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.coremod.MineColonies;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.network.messages.CreateColonyMessage;\n+import com.minecolonies.coremod.network.messages.VanillaParticleMessage;\n+import net.minecraft.client.Minecraft;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.SoundCategory;\n+import net.minecraft.util.SoundEvents;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraft.world.chunk.Chunk;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.minecolonies.api.util.constant.Constants.MOD_ID;\n+import static com.minecolonies.api.util.constant.TranslationConstants.CANT_PLACE_COLONY_TOO_CLOSE_TO_SPAWN;\n+import static com.minecolonies.api.util.constant.TranslationConstants.CANT_PLACE_COLONY_TOO_FAR_FROM_SPAWN;\n+import static com.minecolonies.api.util.constant.WindowConstants.TOWNHALL_COLONY_MANAGEMENT_GUI;\n+import static com.minecolonies.coremod.MineColonies.CLOSE_COLONY_CAP;\n+\n+/**\n+ * TownhallGUI for managing colony creation/deletion\n+ */\n+public class WindowTownHallColonyManage extends AbstractWindowSkeleton\n+{\n+    private static final String BUTTON_CLOSE  = \"cancel\";\n+    private static final String BUTTON_DELETE = \"delete\";\n+    private static final String BUTTON_CREATE = \"create\";\n+    private static final String TEXT_NEARBY   = \"nearbycolony\";\n+    private static final String TEXT_OWN      = \"owncolony\";\n+    private static final String TEXT_FEEDBACK = \"creationpossible\";\n+\n+    /**\n+     * Townhall position\n+     */\n+    private final BlockPos pos;\n+\n+    public WindowTownHallColonyManage(final PlayerEntity player, final BlockPos pos, final World world)\n+    {\n+        super(MOD_ID + TOWNHALL_COLONY_MANAGEMENT_GUI);\n+\n+        this.pos = pos;\n+\n+        final IColony existingColony = IColonyManager.getInstance().getIColony(world, pos);\n+\n+        if (existingColony != null)\n+        {\n+            // Colony here\n+            findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.here\",\n+              existingColony.getName(),\n+              existingColony.getPermissions().getOwnerName()));\n+        }\n+        else\n+        {\n+            // Close colony\n+            int closeClonyID = findNextNearbyColony(world, pos, MineColonies.getConfig().getCommon().minTownHallPadding.get());\n+\n+            if (closeClonyID != 0)\n+            {\n+                findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.near\", closeClonyID));\n+            }\n+            else\n+            {\n+                // No close colony\n+                findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.nonenearby\"));\n+            }\n+        }\n+\n+        final IColony ownerColony = IColonyManager.getInstance().getIColonyByOwner(world, player);\n+        if (ownerColony != null)\n+        {\n+            findPaneOfTypeByID(BUTTON_DELETE, ButtonImage.class).enable();\n+            findPaneOfTypeByID(TEXT_OWN, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.own\", ownerColony.getCenter()));\n+\n+            if (MineColonies.getConfig().getCommon().allowInfiniteColonies.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.existingandabandon\"));\n+            }\n+            else\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.existing\"));\n+            }\n+        }\n+        else\n+        {\n+            findPaneOfTypeByID(TEXT_OWN, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.none\"));\n+\n+            if (existingColony != null || IColonyManager.getInstance().isTooCloseToColony(world, pos))\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.tooclose\"));\n+            }\n+        }\n+\n+        if (MineColonies.getConfig().getCommon().restrictColonyPlacement.get())\n+        {\n+            final double spawnDistance = Math.sqrt(BlockPosUtil.getDistanceSquared2D(pos, world.getSpawnPoint()));\n+            if (spawnDistance < MineColonies.getConfig().getCommon().minDistanceFromWorldSpawn.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(CANT_PLACE_COLONY_TOO_CLOSE_TO_SPAWN,\n+                  MineColonies.getConfig().getCommon().minDistanceFromWorldSpawn.get()));\n+            }\n+            else if (spawnDistance > MineColonies.getConfig().getCommon().maxDistanceFromWorldSpawn.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(CANT_PLACE_COLONY_TOO_FAR_FROM_SPAWN,\n+                  MineColonies.getConfig().getCommon().maxDistanceFromWorldSpawn.get()));\n+            }\n+        }\n+\n+        if (findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).getTextContent().isEmpty())\n+        {\n+            findPaneOfTypeByID(BUTTON_CREATE, ButtonImage.class).enable();\n+            findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.allowed.create\"));\n+        }\n+    }\n+\n+    @Override\n+    public void onButtonClicked(@NotNull final Button button)\n+    {\n+        switch (button.getID())\n+        {\n+            case BUTTON_CLOSE:\n+            {\n+                close();\n+                return;\n+            }\n+            case BUTTON_CREATE:\n+            {\n+                new VanillaParticleMessage(pos.getX(), pos.getY(), pos.getZ(), ParticleTypes.DRAGON_BREATH).onExecute(null, false);\n+                Minecraft.getInstance().world.playSound(Minecraft.getInstance().player, Minecraft.getInstance().player.getPosition(),\n+                  SoundEvents.BLOCK_CAMPFIRE_CRACKLE, SoundCategory.AMBIENT, 2.5f, 0.8f);\n+                Network.getNetwork().sendToServer(new CreateColonyMessage(pos));\n+                close();\n+\n+                return;\n+            }\n+            case BUTTON_DELETE:\n+            {\n+                new WindowTownHallColonyDelete().open();\n+            }\n+            default:\n+        }\n+    }\n+\n+    /**\n+     * Finds the first nearby colony claim in the range\n+     *\n+     * @param world world to use\n+     * @param start start position\n+     * @param range search range\n+     * @return\n+     */\n+    private static int findNextNearbyColony(final World world, final BlockPos start, final int range)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NjIzMw==", "bodyText": "ye its for displaying nearby colonies, and the client doesnt have a full list of colonies, but does get claim data", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407166233", "createdAt": "2020-04-12T08:34:56Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowTownHallColonyManage.java", "diffHunk": "@@ -0,0 +1,192 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.ldtteam.blockout.controls.Button;\n+import com.ldtteam.blockout.controls.ButtonImage;\n+import com.ldtteam.blockout.controls.Text;\n+import com.ldtteam.structurize.util.LanguageHandler;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.IColonyManager;\n+import com.minecolonies.api.colony.IColonyTagCapability;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.coremod.MineColonies;\n+import com.minecolonies.coremod.Network;\n+import com.minecolonies.coremod.network.messages.CreateColonyMessage;\n+import com.minecolonies.coremod.network.messages.VanillaParticleMessage;\n+import net.minecraft.client.Minecraft;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.particles.ParticleTypes;\n+import net.minecraft.util.SoundCategory;\n+import net.minecraft.util.SoundEvents;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import net.minecraft.world.chunk.Chunk;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.minecolonies.api.util.constant.Constants.MOD_ID;\n+import static com.minecolonies.api.util.constant.TranslationConstants.CANT_PLACE_COLONY_TOO_CLOSE_TO_SPAWN;\n+import static com.minecolonies.api.util.constant.TranslationConstants.CANT_PLACE_COLONY_TOO_FAR_FROM_SPAWN;\n+import static com.minecolonies.api.util.constant.WindowConstants.TOWNHALL_COLONY_MANAGEMENT_GUI;\n+import static com.minecolonies.coremod.MineColonies.CLOSE_COLONY_CAP;\n+\n+/**\n+ * TownhallGUI for managing colony creation/deletion\n+ */\n+public class WindowTownHallColonyManage extends AbstractWindowSkeleton\n+{\n+    private static final String BUTTON_CLOSE  = \"cancel\";\n+    private static final String BUTTON_DELETE = \"delete\";\n+    private static final String BUTTON_CREATE = \"create\";\n+    private static final String TEXT_NEARBY   = \"nearbycolony\";\n+    private static final String TEXT_OWN      = \"owncolony\";\n+    private static final String TEXT_FEEDBACK = \"creationpossible\";\n+\n+    /**\n+     * Townhall position\n+     */\n+    private final BlockPos pos;\n+\n+    public WindowTownHallColonyManage(final PlayerEntity player, final BlockPos pos, final World world)\n+    {\n+        super(MOD_ID + TOWNHALL_COLONY_MANAGEMENT_GUI);\n+\n+        this.pos = pos;\n+\n+        final IColony existingColony = IColonyManager.getInstance().getIColony(world, pos);\n+\n+        if (existingColony != null)\n+        {\n+            // Colony here\n+            findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.here\",\n+              existingColony.getName(),\n+              existingColony.getPermissions().getOwnerName()));\n+        }\n+        else\n+        {\n+            // Close colony\n+            int closeClonyID = findNextNearbyColony(world, pos, MineColonies.getConfig().getCommon().minTownHallPadding.get());\n+\n+            if (closeClonyID != 0)\n+            {\n+                findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.near\", closeClonyID));\n+            }\n+            else\n+            {\n+                // No close colony\n+                findPaneOfTypeByID(TEXT_NEARBY, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.nonenearby\"));\n+            }\n+        }\n+\n+        final IColony ownerColony = IColonyManager.getInstance().getIColonyByOwner(world, player);\n+        if (ownerColony != null)\n+        {\n+            findPaneOfTypeByID(BUTTON_DELETE, ButtonImage.class).enable();\n+            findPaneOfTypeByID(TEXT_OWN, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.own\", ownerColony.getCenter()));\n+\n+            if (MineColonies.getConfig().getCommon().allowInfiniteColonies.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.existingandabandon\"));\n+            }\n+            else\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.existing\"));\n+            }\n+        }\n+        else\n+        {\n+            findPaneOfTypeByID(TEXT_OWN, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.none\"));\n+\n+            if (existingColony != null || IColonyManager.getInstance().isTooCloseToColony(world, pos))\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.denied.tooclose\"));\n+            }\n+        }\n+\n+        if (MineColonies.getConfig().getCommon().restrictColonyPlacement.get())\n+        {\n+            final double spawnDistance = Math.sqrt(BlockPosUtil.getDistanceSquared2D(pos, world.getSpawnPoint()));\n+            if (spawnDistance < MineColonies.getConfig().getCommon().minDistanceFromWorldSpawn.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(CANT_PLACE_COLONY_TOO_CLOSE_TO_SPAWN,\n+                  MineColonies.getConfig().getCommon().minDistanceFromWorldSpawn.get()));\n+            }\n+            else if (spawnDistance > MineColonies.getConfig().getCommon().maxDistanceFromWorldSpawn.get())\n+            {\n+                findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(CANT_PLACE_COLONY_TOO_FAR_FROM_SPAWN,\n+                  MineColonies.getConfig().getCommon().maxDistanceFromWorldSpawn.get()));\n+            }\n+        }\n+\n+        if (findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).getTextContent().isEmpty())\n+        {\n+            findPaneOfTypeByID(BUTTON_CREATE, ButtonImage.class).enable();\n+            findPaneOfTypeByID(TEXT_FEEDBACK, Text.class).setTextContent(LanguageHandler.format(\"com.minecolonies.coremod.gui.colony.allowed.create\"));\n+        }\n+    }\n+\n+    @Override\n+    public void onButtonClicked(@NotNull final Button button)\n+    {\n+        switch (button.getID())\n+        {\n+            case BUTTON_CLOSE:\n+            {\n+                close();\n+                return;\n+            }\n+            case BUTTON_CREATE:\n+            {\n+                new VanillaParticleMessage(pos.getX(), pos.getY(), pos.getZ(), ParticleTypes.DRAGON_BREATH).onExecute(null, false);\n+                Minecraft.getInstance().world.playSound(Minecraft.getInstance().player, Minecraft.getInstance().player.getPosition(),\n+                  SoundEvents.BLOCK_CAMPFIRE_CRACKLE, SoundCategory.AMBIENT, 2.5f, 0.8f);\n+                Network.getNetwork().sendToServer(new CreateColonyMessage(pos));\n+                close();\n+\n+                return;\n+            }\n+            case BUTTON_DELETE:\n+            {\n+                new WindowTownHallColonyDelete().open();\n+            }\n+            default:\n+        }\n+    }\n+\n+    /**\n+     * Finds the first nearby colony claim in the range\n+     *\n+     * @param world world to use\n+     * @param start start position\n+     * @param range search range\n+     * @return\n+     */\n+    private static int findNextNearbyColony(final World world, final BlockPos start, final int range)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMTcxNw=="}, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk5MzgxOnYy", "diffSide": "LEFT", "path": "src/main/java/com/minecolonies/coremod/colony/Colony.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoxNzoxMVrOGEQvSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoxODo0MVrOGEQv0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMTczOA==", "bodyText": "don't we need this?", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407121738", "createdAt": "2020-04-11T23:17:11Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/Colony.java", "diffHunk": "@@ -295,7 +295,6 @@ protected Colony(final int id, @Nullable final World world)\n         this.id = id;\n         if (world != null)\n         {\n-            this.dimensionId = world.getDimension().getType().getId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMTg3Mw==", "bodyText": "if we don't se it here, in the next call it will always consider it to be 0", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407121873", "createdAt": "2020-04-11T23:18:41Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/Colony.java", "diffHunk": "@@ -295,7 +295,6 @@ protected Colony(final int id, @Nullable final World world)\n         this.id = id;\n         if (world != null)\n         {\n-            this.dimensionId = world.getDimension().getType().getId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMTczOA=="}, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk5NzA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/event/EventHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoyMjowNFrOGEQwxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwODo0NzoxOFrOGETiIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjExNg==", "bodyText": "Why only for overworld?", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407122116", "createdAt": "2020-04-11T23:22:04Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/event/EventHandler.java", "diffHunk": "@@ -785,11 +675,14 @@ public static void onWorldLoad(@NotNull final WorldEvent.Load event)\n     @SubscribeEvent\n     public static void onWorldUnload(@NotNull final WorldEvent.Unload event)\n     {\n-        Log.getLogger().warn(\"World unload\");\n-\n         if (event.getWorld() instanceof World)\n         {\n             IColonyManager.getInstance().onWorldUnload((World) event.getWorld());\n         }\n+        if (event.getWorld().isRemote() && event.getWorld().getDimension().getType() == DimensionType.OVERWORLD)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 314}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NjI3MA==", "bodyText": "its for removing the colony views on client side once you leave a world, and thats when the overworld is unloaded", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407166270", "createdAt": "2020-04-12T08:35:30Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/event/EventHandler.java", "diffHunk": "@@ -785,11 +675,14 @@ public static void onWorldLoad(@NotNull final WorldEvent.Load event)\n     @SubscribeEvent\n     public static void onWorldUnload(@NotNull final WorldEvent.Unload event)\n     {\n-        Log.getLogger().warn(\"World unload\");\n-\n         if (event.getWorld() instanceof World)\n         {\n             IColonyManager.getInstance().onWorldUnload((World) event.getWorld());\n         }\n+        if (event.getWorld().isRemote() && event.getWorld().getDimension().getType() == DimensionType.OVERWORLD)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjExNg=="}, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 314}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NzUyMw==", "bodyText": "ok", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407167523", "createdAt": "2020-04-12T08:47:18Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/event/EventHandler.java", "diffHunk": "@@ -785,11 +675,14 @@ public static void onWorldLoad(@NotNull final WorldEvent.Load event)\n     @SubscribeEvent\n     public static void onWorldUnload(@NotNull final WorldEvent.Unload event)\n     {\n-        Log.getLogger().warn(\"World unload\");\n-\n         if (event.getWorld() instanceof World)\n         {\n             IColonyManager.getInstance().onWorldUnload((World) event.getWorld());\n         }\n+        if (event.getWorld().isRemote() && event.getWorld().getDimension().getType() == DimensionType.OVERWORLD)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjExNg=="}, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 314}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjk5NzY0OnYy", "diffSide": "LEFT", "path": "src/main/java/com/minecolonies/coremod/event/FMLEventHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQyMzoyMzowMFrOGEQxBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwODozNTo1NVrOGETdbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjE4Mg==", "bodyText": "I added this for when switching worlds in singlePlayer, don't we need this?", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407122182", "createdAt": "2020-04-11T23:23:00Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/event/FMLEventHandler.java", "diffHunk": "@@ -52,10 +52,6 @@ public static void onPlayerLogin(@NotNull final PlayerEvent.PlayerLoggedInEvent\n             IColonyManager.getInstance().getIColonyByOwner(((ServerPlayerEntity) event.getPlayer()).getServerWorld(), event.getPlayer());\n             //ColonyManager.syncAllColoniesAchievements();\n         }\n-        else\n-        {\n-            IColonyManager.getInstance().resetColonyViews();\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NjMxOA==", "bodyText": "moved it to world unload instead, to not interfere with us sending views on login", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407166318", "createdAt": "2020-04-12T08:35:55Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/event/FMLEventHandler.java", "diffHunk": "@@ -52,10 +52,6 @@ public static void onPlayerLogin(@NotNull final PlayerEvent.PlayerLoggedInEvent\n             IColonyManager.getInstance().getIColonyByOwner(((ServerPlayerEntity) event.getPlayer()).getServerWorld(), event.getPlayer());\n             //ColonyManager.syncAllColoniesAchievements();\n         }\n-        else\n-        {\n-            IColonyManager.getInstance().resetColonyViews();\n-        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyMjE4Mg=="}, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzMwMTQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/network/NetworkChannel.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwNzoxMDoyNFrOGES7Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwOToxMzozNlrOGETs4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NzU0Ng==", "bodyText": "This may break universe when previous version connects to this version. Always add new messages to the end of the list, or increase network proto version", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407157546", "createdAt": "2020-04-12T07:10:24Z", "author": {"login": "Nightenom"}, "path": "src/main/java/com/minecolonies/coremod/network/NetworkChannel.java", "diffHunk": "@@ -93,6 +93,9 @@ public void registerCommonMessages()\n         registerMessage(++idx, LumberjackReplantSaplingToggleMessage.class, LumberjackReplantSaplingToggleMessage::new);\n         registerMessage(++idx, LumberjackRestrictionToggleMessage.class, LumberjackRestrictionToggleMessage::new);\n         registerMessage(++idx, LumberjackScepterMessage.class, LumberjackScepterMessage::new);\n+        registerMessage(++idx, CreateColonyMessage.class, CreateColonyMessage::new);\n+        registerMessage(++idx, ColonyDeleteOwnMessage.class, ColonyDeleteOwnMessage::new);\n+        registerMessage(++idx, ColonyViewRemoveMessage.class, ColonyViewRemoveMessage::new);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NjE3OQ==", "bodyText": "previous version never are allowed to connect to a newer version afaik", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407166179", "createdAt": "2020-04-12T08:34:21Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/network/NetworkChannel.java", "diffHunk": "@@ -93,6 +93,9 @@ public void registerCommonMessages()\n         registerMessage(++idx, LumberjackReplantSaplingToggleMessage.class, LumberjackReplantSaplingToggleMessage::new);\n         registerMessage(++idx, LumberjackRestrictionToggleMessage.class, LumberjackRestrictionToggleMessage::new);\n         registerMessage(++idx, LumberjackScepterMessage.class, LumberjackScepterMessage::new);\n+        registerMessage(++idx, CreateColonyMessage.class, CreateColonyMessage::new);\n+        registerMessage(++idx, ColonyDeleteOwnMessage.class, ColonyDeleteOwnMessage::new);\n+        registerMessage(++idx, ColonyViewRemoveMessage.class, ColonyViewRemoveMessage::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NzU0Ng=="}, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE2NjMyMA==", "bodyText": "We add this always next to matching messages and it never was a problem.", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407166320", "createdAt": "2020-04-12T08:35:57Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/network/NetworkChannel.java", "diffHunk": "@@ -93,6 +93,9 @@ public void registerCommonMessages()\n         registerMessage(++idx, LumberjackReplantSaplingToggleMessage.class, LumberjackReplantSaplingToggleMessage::new);\n         registerMessage(++idx, LumberjackRestrictionToggleMessage.class, LumberjackRestrictionToggleMessage::new);\n         registerMessage(++idx, LumberjackScepterMessage.class, LumberjackScepterMessage::new);\n+        registerMessage(++idx, CreateColonyMessage.class, CreateColonyMessage::new);\n+        registerMessage(++idx, ColonyDeleteOwnMessage.class, ColonyDeleteOwnMessage::new);\n+        registerMessage(++idx, ColonyViewRemoveMessage.class, ColonyViewRemoveMessage::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NzU0Ng=="}, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE3MDI3NA==", "bodyText": "weird, i was able to connect against different version in non dev env while testing some small mods, might be their bug", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407170274", "createdAt": "2020-04-12T09:13:36Z", "author": {"login": "Nightenom"}, "path": "src/main/java/com/minecolonies/coremod/network/NetworkChannel.java", "diffHunk": "@@ -93,6 +93,9 @@ public void registerCommonMessages()\n         registerMessage(++idx, LumberjackReplantSaplingToggleMessage.class, LumberjackReplantSaplingToggleMessage::new);\n         registerMessage(++idx, LumberjackRestrictionToggleMessage.class, LumberjackRestrictionToggleMessage::new);\n         registerMessage(++idx, LumberjackScepterMessage.class, LumberjackScepterMessage::new);\n+        registerMessage(++idx, CreateColonyMessage.class, CreateColonyMessage::new);\n+        registerMessage(++idx, ColonyDeleteOwnMessage.class, ColonyDeleteOwnMessage::new);\n+        registerMessage(++idx, ColonyViewRemoveMessage.class, ColonyViewRemoveMessage::new);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE1NzU0Ng=="}, "originalCommit": {"oid": "47de74104c93dae322bafea26b96b91414005bfb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODkzNDA5OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/IColonyTagCapability.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODozMjo0M1rOGEgWzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1MDowNlrOGEgvKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3NzYxMw==", "bodyText": "Question:\nWhy remove the final here and make it so that we set the colonies (close colonies, should probably rename this field)\nI think it'd be better to use an add (to list) method and keep it final. Then you could also add close colonies later on (say a new colony is placed down later) without getting, modifying, and setting, or elsewise", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407377613", "createdAt": "2020-04-13T08:32:43Z", "author": {"login": "Asherslab"}, "path": "src/api/java/com/minecolonies/api/colony/IColonyTagCapability.java", "diffHunk": "@@ -97,7 +104,7 @@\n         /**\n          * The set of all close colonies. Only relevant in non dynamic claiming.\n          */\n-        private final Set<Integer> colonies = new HashSet<>();\n+        private Set<Integer> colonies = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3141299039b47937e66fb7f22f766ff8eb0ee4a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4Mzg1MQ==", "bodyText": "it is so that we can override the client's chunk data with new data on receiving a message", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407383851", "createdAt": "2020-04-13T08:50:06Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/colony/IColonyTagCapability.java", "diffHunk": "@@ -97,7 +104,7 @@\n         /**\n          * The set of all close colonies. Only relevant in non dynamic claiming.\n          */\n-        private final Set<Integer> colonies = new HashSet<>();\n+        private Set<Integer> colonies = new HashSet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3NzYxMw=="}, "originalCommit": {"oid": "a3141299039b47937e66fb7f22f766ff8eb0ee4a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODkzNTI2OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/util/constant/GuardConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODozMzoxNFrOGEgXfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1MTowMFrOGEgwXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3Nzc4OA==", "bodyText": "Why is this changed in this PR?", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407377788", "createdAt": "2020-04-13T08:33:14Z", "author": {"login": "Asherslab"}, "path": "src/api/java/com/minecolonies/api/util/constant/GuardConstants.java", "diffHunk": "@@ -110,7 +110,7 @@\n     /**\n      * Basic bonus hp for knights\n      */\n-    public static final int KNIGHT_HP_BONUS = 5;\n+    public static final int KNIGHT_HP_BONUS = 15;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3141299039b47937e66fb7f22f766ff8eb0ee4a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NDE1OA==", "bodyText": "didnt want to make a new PR for two lines :D", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407384158", "createdAt": "2020-04-13T08:51:00Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/util/constant/GuardConstants.java", "diffHunk": "@@ -110,7 +110,7 @@\n     /**\n      * Basic bonus hp for knights\n      */\n-    public static final int KNIGHT_HP_BONUS = 5;\n+    public static final int KNIGHT_HP_BONUS = 15;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3Nzc4OA=="}, "originalCommit": {"oid": "a3141299039b47937e66fb7f22f766ff8eb0ee4a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyODk0Mjc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingGuardTower.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODozNjoyOVrOGEgb3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwODo1MToxMFrOGEgwnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3ODkxMA==", "bodyText": "Leave Bonus health private and call super.getBonusHealth() here instead", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407378910", "createdAt": "2020-04-13T08:36:29Z", "author": {"login": "Asherslab"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingGuardTower.java", "diffHunk": "@@ -67,6 +67,12 @@ public int getClaimRadius(final int newLevel)\n         return Math.max(0, newLevel - 1);\n     }\n \n+    @Override\n+    protected int getBonusHealth()\n+    {\n+        return BONUS_HP_SINGLE_GUARD + getBuildingLevel() * BONUS_HEALTH_PER_LEVEL;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3141299039b47937e66fb7f22f766ff8eb0ee4a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM4NDIyMQ==", "bodyText": "ye", "url": "https://github.com/ldtteam/minecolonies/pull/4615#discussion_r407384221", "createdAt": "2020-04-13T08:51:10Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingGuardTower.java", "diffHunk": "@@ -67,6 +67,12 @@ public int getClaimRadius(final int newLevel)\n         return Math.max(0, newLevel - 1);\n     }\n \n+    @Override\n+    protected int getBonusHealth()\n+    {\n+        return BONUS_HP_SINGLE_GUARD + getBuildingLevel() * BONUS_HEALTH_PER_LEVEL;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM3ODkxMA=="}, "originalCommit": {"oid": "a3141299039b47937e66fb7f22f766ff8eb0ee4a"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3126, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}