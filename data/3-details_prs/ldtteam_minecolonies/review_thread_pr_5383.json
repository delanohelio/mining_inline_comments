{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NTI2NDg3", "number": 5383, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzo0OTowOFrOEOJQXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNzo1NDoyMlrOESB6yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjY3MTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCrusher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzo0OTowOFrOGxISuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzo0OTowOFrOGxISuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE2OTI3NQ==", "bodyText": "javadoc", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r454169275", "createdAt": "2020-07-14T07:49:08Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCrusher.java", "diffHunk": "@@ -123,6 +127,30 @@ private void loadCrusherMode()\n         }\n     }\n \n+    private void loadCurrentRecipes()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e082f0be87813e34b6a515895602b3f5255dbe97"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzMjY3OTk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzo1MToyNFrOGxIXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNDo1NDo1NVrOGxXhDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MDUzNg==", "bodyText": "I'm nt a fan at all of this. Adding a lot of automatic recipes slows down the colony (each time a request is executed all recipes have to be checked). Why do we need this explicitly?", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r454170536", "createdAt": "2020-07-14T07:51:24Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -175,6 +182,34 @@ public boolean canBeGathered()\n         return toKeep;\n     }\n \n+    // Adding request system aware versions of the furnace recipes, to make keeping stock easier, and allow crafting chains. \n+    // To find what to add, we'll run through the predefined ingredients, and if any of them are smeltable, we'll add the recipe\n+    // Something to consider in the future is adding the concept of 'free' recipes that don't count against the building limit. \n+    @Override\n+    public void checkForWorkerSpecificRecipes()\n+    {\n+\n+        ResourceLocation ingredients = new ResourceLocation(\"minecolonies\", this.getJobName().toLowerCase().concat(\"_ingredient\"));\n+\n+        for (final Item item : ItemTags.getCollection().getOrCreate(ingredients).getAllElements())\n+        {\n+            final ItemStack smeltingResult = FurnaceRecipes.getInstance().getSmeltingResult(new ItemStack(item, 1));\n+            if (ItemStackUtils.CAN_EAT.test(smeltingResult))\n+            {\n+\n+                final IRecipeStorage storage = StandardFactoryController.getInstance().getNewInstance(\n+                    TypeConstants.RECIPE,\n+                    StandardFactoryController.getInstance().getNewInstance(TypeConstants.ITOKEN),\n+                    ImmutableList.of(new ItemStack(item, 1)),\n+                    1,\n+                    smeltingResult,\n+                    Blocks.FURNACE);\n+          \n+                addRecipeToList(IColonyManager.getInstance().getRecipeManager().checkOrAddRecipe(storage));\n+            }\n+        }\n+    }\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e082f0be87813e34b6a515895602b3f5255dbe97"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDQxODcwMw==", "bodyText": "In a vanilla world, we really don't. Once you add in modpacks, there are a lot of recipes that require cooked foods that can't be fulfilled today. As we discussed in Discord, I'll look at the temporary recipe via resolver.", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r454418703", "createdAt": "2020-07-14T14:54:55Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -175,6 +182,34 @@ public boolean canBeGathered()\n         return toKeep;\n     }\n \n+    // Adding request system aware versions of the furnace recipes, to make keeping stock easier, and allow crafting chains. \n+    // To find what to add, we'll run through the predefined ingredients, and if any of them are smeltable, we'll add the recipe\n+    // Something to consider in the future is adding the concept of 'free' recipes that don't count against the building limit. \n+    @Override\n+    public void checkForWorkerSpecificRecipes()\n+    {\n+\n+        ResourceLocation ingredients = new ResourceLocation(\"minecolonies\", this.getJobName().toLowerCase().concat(\"_ingredient\"));\n+\n+        for (final Item item : ItemTags.getCollection().getOrCreate(ingredients).getAllElements())\n+        {\n+            final ItemStack smeltingResult = FurnaceRecipes.getInstance().getSmeltingResult(new ItemStack(item, 1));\n+            if (ItemStackUtils.CAN_EAT.test(smeltingResult))\n+            {\n+\n+                final IRecipeStorage storage = StandardFactoryController.getInstance().getNewInstance(\n+                    TypeConstants.RECIPE,\n+                    StandardFactoryController.getInstance().getNewInstance(TypeConstants.ITOKEN),\n+                    ImmutableList.of(new ItemStack(item, 1)),\n+                    1,\n+                    smeltingResult,\n+                    Blocks.FURNACE);\n+          \n+                addRecipeToList(IColonyManager.getInstance().getRecipeManager().checkOrAddRecipe(storage));\n+            }\n+        }\n+    }\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE3MDUzNg=="}, "originalCommit": {"oid": "e082f0be87813e34b6a515895602b3f5255dbe97"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTcxODg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo1MDo1NVrOGyee9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDo1ODoxOVrOGyvBoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4MTQzMQ==", "bodyText": "I would only query this if ISFOOD", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r455581431", "createdAt": "2020-07-16T07:50:55Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -141,6 +138,50 @@ public boolean canBeGathered()\n         return builder.build();\n     }\n \n+    @Override\n+    @Nullable\n+    public IRecipeStorage getFirstRecipe(final Predicate<ItemStack> stackPredicate)\n+    {\n+        //First, do the normal check against taught recipes, and return those if found\n+        IRecipeStorage storage = super.getFirstRecipe(stackPredicate);\n+        if(storage != null)\n+        {\n+            return storage;\n+        }\n+\n+        //If we didn't have a stored recipe, see if there is a smelting recipe that is also a food output, and use it. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b200efca67aba247ba77467d24d9c43f7e1647dd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNzI5Ng==", "bodyText": "Given that we don't know what the item is until after the query, I'm not sure how to limit it. We could do a combined predicate, though I don't see any advantage to that, and this code is clearer.", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r455817296", "createdAt": "2020-07-16T14:12:03Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -141,6 +138,50 @@ public boolean canBeGathered()\n         return builder.build();\n     }\n \n+    @Override\n+    @Nullable\n+    public IRecipeStorage getFirstRecipe(final Predicate<ItemStack> stackPredicate)\n+    {\n+        //First, do the normal check against taught recipes, and return those if found\n+        IRecipeStorage storage = super.getFirstRecipe(stackPredicate);\n+        if(storage != null)\n+        {\n+            return storage;\n+        }\n+\n+        //If we didn't have a stored recipe, see if there is a smelting recipe that is also a food output, and use it. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4MTQzMQ=="}, "originalCommit": {"oid": "b200efca67aba247ba77467d24d9c43f7e1647dd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgyMjA3Mg==", "bodyText": "I think there was one getFirstRecipe that gets an itemStack too. Where we could intercept.", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r455822072", "createdAt": "2020-07-16T14:18:24Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -141,6 +138,50 @@ public boolean canBeGathered()\n         return builder.build();\n     }\n \n+    @Override\n+    @Nullable\n+    public IRecipeStorage getFirstRecipe(final Predicate<ItemStack> stackPredicate)\n+    {\n+        //First, do the normal check against taught recipes, and return those if found\n+        IRecipeStorage storage = super.getFirstRecipe(stackPredicate);\n+        if(storage != null)\n+        {\n+            return storage;\n+        }\n+\n+        //If we didn't have a stored recipe, see if there is a smelting recipe that is also a food output, and use it. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4MTQzMQ=="}, "originalCommit": {"oid": "b200efca67aba247ba77467d24d9c43f7e1647dd"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg1MjQ0OA==", "bodyText": "I had done that, and pulled it, because it's used rarely, and at the abstract level it just wraps the predicate version.  That is actually what I did first, and it didn't actually let things work, because the predicate is used almost everywhere.", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r455852448", "createdAt": "2020-07-16T14:58:19Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -141,6 +138,50 @@ public boolean canBeGathered()\n         return builder.build();\n     }\n \n+    @Override\n+    @Nullable\n+    public IRecipeStorage getFirstRecipe(final Predicate<ItemStack> stackPredicate)\n+    {\n+        //First, do the normal check against taught recipes, and return those if found\n+        IRecipeStorage storage = super.getFirstRecipe(stackPredicate);\n+        if(storage != null)\n+        {\n+            return storage;\n+        }\n+\n+        //If we didn't have a stored recipe, see if there is a smelting recipe that is also a food output, and use it. ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4MTQzMQ=="}, "originalCommit": {"oid": "b200efca67aba247ba77467d24d9c43f7e1647dd"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0OTY5NjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNToyNzoxMlrOGzo4Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xOFQxNToyNzoxMlrOGzo4Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjgwMDI2Nw==", "bodyText": "javadoc", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r456800267", "createdAt": "2020-07-18T15:27:12Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -77,6 +84,16 @@ public BuildingCook(final IColony c, final BlockPos l)\n         keepX.put(FurnaceTileEntity::isFuel, new Tuple<>(STACKSIZE, true));\n     }\n \n+    public boolean getIsCooking()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7e217f375fc09b59c766fedebd4448843f03662"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzQxMjQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNzo1NDoxMFrOG3DS2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNlQwMjoxMjoxNFrOG3IuRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3ODg0MA==", "bodyText": "hm I think this can cause issues, e.g. if the assistant stops working or is fired for some reason", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r460378840", "createdAt": "2020-07-25T07:54:10Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -73,6 +84,24 @@ public BuildingCook(final IColony c, final BlockPos l)\n         keepX.put(FurnaceTileEntity::isFuel, new Tuple<>(STACKSIZE, true));\n     }\n \n+    /**\n+     * Get the status of the assistant processing requests\n+     * @return true if currently crafting\n+     */\n+    public boolean getIsCooking()\n+    {\n+        return isCooking;\n+    }\n+\n+    /**\n+     * Record the state of the assistant processing requests\n+     * @param cookingState true if currently crafting\n+     */\n+    public void setIsCooking(final boolean cookingState)\n+    {\n+        isCooking = cookingState;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7c2f8a7b2a0c84b87c0f389f58ebf5eff56f83"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ2Nzc4Mg==", "bodyText": "Good point. Will add citizen tracking too.", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r460467782", "createdAt": "2020-07-26T02:12:14Z", "author": {"login": "Mekle001"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -73,6 +84,24 @@ public BuildingCook(final IColony c, final BlockPos l)\n         keepX.put(FurnaceTileEntity::isFuel, new Tuple<>(STACKSIZE, true));\n     }\n \n+    /**\n+     * Get the status of the assistant processing requests\n+     * @return true if currently crafting\n+     */\n+    public boolean getIsCooking()\n+    {\n+        return isCooking;\n+    }\n+\n+    /**\n+     * Record the state of the assistant processing requests\n+     * @param cookingState true if currently crafting\n+     */\n+    public void setIsCooking(final boolean cookingState)\n+    {\n+        isCooking = cookingState;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3ODg0MA=="}, "originalCommit": {"oid": "ba7c2f8a7b2a0c84b87c0f389f58ebf5eff56f83"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MzQxMjU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNzo1NDoyMlrOG3DS6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQwNzo1NDoyMlrOG3DS6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDM3ODg1OA==", "bodyText": "formatting", "url": "https://github.com/ldtteam/minecolonies/pull/5383#discussion_r460378858", "createdAt": "2020-07-25T07:54:22Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingCook.java", "diffHunk": "@@ -90,6 +119,12 @@ public int getMaxBuildingLevel()\n     @Override\n     public IJob<?> createJob(final ICitizenData citizen)\n     {\n+        for (final ICitizenData leadCitizen : getAssignedCitizen())    {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7c2f8a7b2a0c84b87c0f389f58ebf5eff56f83"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3549, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}