{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNTkzNDY2", "number": 5921, "title": "Delivery orders", "bodyText": "Closes #5927\nCloses #5923\nCloses #5811\nChanges proposed in this pull request:\nThis adapts the way deliveries are assigned to deliveryman to a multi-factor comparison system.\nThe resolver for dmen now resides in a warehouse and resolves the request it gets to its delivermen in our case those of a single warehouse. So now we compare all assigned deliverymen of a warehouse to get the best fit for the request.\nThe resolver now ask the dmen for a score for adding a certain request and then compares the score to other dmen's scores. The score(lower is better) itself is combined of these factors:\n\nCloseness: How close the target/source of the new request is compared to an existing one, in relation to its total travel length.\nPriority(also contains age): Overtaking a request of a higher priority is worse.\nPickup/Delivery alternating: When alternating between pickups and deliveries with close targets the score gets a little bonus.\nIndex: The index we would add the new request at, higher the more request we overtake and the more request we have in total.\n\nThese result in lists on deliverymen of approx ~3 times closer deliveries, allowing the AI to also bunch up deliveries more nicer in the future.\nFixes visitors sometimes getting spawn on zero pos.\nFix raids not respecting distance to unloaded buildings\nFix shipsraids sometimes instantly despawning after killing spawners, now takes a day to do so.\nReview please", "createdAt": "2020-10-14T19:33:09Z", "url": "https://github.com/ldtteam/minecolonies/pull/5921", "merged": true, "mergeCommit": {"oid": "e432440181100748441b923d6a7e1852dc8337e1"}, "closed": true, "closedAt": "2020-10-16T15:54:32Z", "author": {"login": "someaddons"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdRLW9hgH2gAyNTAzNTkzNDY2OmFiZmRkNWEyYWYwMjg5MmYzYzliMWVlZjI3ODYzNzhhMTIzOTQ3Y2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdTIbvMAFqTUxMDU5NjE0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "abfdd5a2af02892f3c9b1eef2786378a123947cd", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/abfdd5a2af02892f3c9b1eef2786378a123947cd", "committedDate": "2020-10-10T14:07:59Z", "message": "Improve some possible error for visitor spawn positions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf55e2a48d77d16b84ed46c61af652ef1364bc69", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/cf55e2a48d77d16b84ed46c61af652ef1364bc69", "committedDate": "2020-10-10T16:58:55Z", "message": "Fix research citizen limit not allowing config limit to be reached"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f664ea1a4f3c49103d3ad383b7096c8eb4a2b4d7", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/f664ea1a4f3c49103d3ad383b7096c8eb4a2b4d7", "committedDate": "2020-10-10T17:07:31Z", "message": "todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cd1171774b0b195c3241b54d7216fa24d31d7db", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/4cd1171774b0b195c3241b54d7216fa24d31d7db", "committedDate": "2020-10-11T19:00:41Z", "message": "Merge remote-tracking branch 'remotes/origin/version/1.15' into nextstuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09852b63666695536dbac510389629acda63d409", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/09852b63666695536dbac510389629acda63d409", "committedDate": "2020-10-14T17:09:45Z", "message": "Fix raids spawning near buildings\nFix visitors sometimes getting to zero pos\nDeliveries are now beeing assigned most smartly to deliverymen, based on various factors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88fd43983e9bbb134a921356c013d9fb174c936f", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/88fd43983e9bbb134a921356c013d9fb174c936f", "committedDate": "2020-10-14T17:10:27Z", "message": "Merge remote-tracking branch 'remotes/origin/version/1.15' into nextstuff"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f674f76e83ff4d20e019d2395948a4ffa1d5034d", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/f674f76e83ff4d20e019d2395948a4ffa1d5034d", "committedDate": "2020-10-15T16:35:58Z", "message": "search close warehouse for now"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NTg2Mjg3", "url": "https://github.com/ldtteam/minecolonies/pull/5921#pullrequestreview-509586287", "createdAt": "2020-10-15T16:58:50Z", "commit": {"oid": "f674f76e83ff4d20e019d2395948a4ffa1d5034d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo1ODo1MFrOHiRX7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjo1ODo1MFrOHiRX7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY5ODI4Nw==", "bodyText": "those all look like static utility methods?", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r505698287", "createdAt": "2020-10-15T16:58:50Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/jobs/JobDeliveryman.java", "diffHunk": "@@ -460,6 +456,209 @@ private boolean haveTasksSameSourceAndDest(@NotNull final Delivery requestA, @No\n         return deliveryList;\n     }\n \n+    /**\n+     * Calculates a score an position for a delivery, the bigger the score the worse the request fits.\n+     *\n+     * @param newRequest to check\n+     * @return tuple of score and index to place at.\n+     */\n+    @NotNull\n+    public Tuple<Double, Integer> getScoreForDelivery(final IRequest<?> newRequest)\n+    {\n+        final List<IToken<?>> requestTokens = getTaskQueueFromDataStore();\n+\n+        double totalScore = 10000;\n+        int bestRequestIndex = Math.max(0, requestTokens.size());\n+\n+        if (requestTokens.isEmpty())\n+        {\n+            // No task, compare with dman to warehouse pos\n+            final IWareHouse wareHouse = findWareHouse();\n+            totalScore = getClosenessFactorTo(getSource(newRequest),\n+              getTarget(newRequest),\n+              wareHouse != null ? findWareHouse().getID() : getCitizen().getLastPosition(),\n+              getCitizen().getLastPosition());\n+        }\n+\n+        for (int i = 0; i < requestTokens.size(); i++)\n+        {\n+            final IRequest<?> compareRequest = getColony().getRequestManager().getRequestForToken(requestTokens.get(i));\n+            if (compareRequest == null)\n+            {\n+                continue;\n+            }\n+\n+            if (compareRequest.getRequest() instanceof AbstractDeliverymanRequestable)\n+            {\n+                double score = getScoreOfRequestComparedTo(newRequest, compareRequest, i);\n+\n+                if (score <= totalScore)\n+                {\n+                    bestRequestIndex = i + getPickupOrRequestOffset(newRequest, compareRequest);\n+                    totalScore = score;\n+                }\n+            }\n+        }\n+\n+        totalScore += bestRequestIndex;\n+\n+        return new Tuple<>(totalScore, bestRequestIndex);\n+    }\n+\n+    /**\n+     * Calculates a score between two requesting making them compareable in many aspects.\n+     *\n+     * @param source         source request\n+     * @param comparing      comparing request\n+     * @param comparingIndex index of the comparing request in our taskque. Use taskque size when comparing a request not on the que.\n+     * @return compare score of the two requests, lower is better.\n+     */\n+    public double getScoreOfRequestComparedTo(final IRequest<?> source, final IRequest<?> comparing, final int comparingIndex)\n+    {\n+        if (!(comparing != null && comparing.getRequest() instanceof AbstractDeliverymanRequestable && source != null\n+                && source.getRequest() instanceof AbstractDeliverymanRequestable))\n+        {\n+            return 100;\n+        }\n+\n+        // Closeness compared to the existing request\n+        double score = getClosenessFactorTo(getSource(source), getTarget(source), getSource(comparing), getTarget(comparing));\n+        // Priority of the existing request in diff to priority of the newly incomming one\n+        score += (((AbstractDeliverymanRequestable) comparing.getRequest()).getPriority() - ((AbstractDeliverymanRequestable) source.getRequest()).getPriority()) * 0.3;\n+\n+        // Additional score for alternating between pickup and delivery\n+        score += getPickUpRequestScore(source, comparing);\n+\n+        // Worse score the more requests we have to overtake\n+        score += (getTaskQueue().size() - comparingIndex) * 0.5;\n+\n+        return score;\n+    }\n+\n+    /**\n+     * Gets the right task insertion order for pickups, if a new request fitting an existing request is added and the existing is a pickup and the new is a delivery it should be\n+     * infront.\n+     *\n+     * @param newRequest the new request to add\n+     * @param existing   the existing request\n+     * @return 1 for inserting after existing, 0 for infront\n+     */\n+    private int getPickupOrRequestOffset(final IRequest<?> newRequest, final IRequest<?> existing)\n+    {\n+        if (newRequest.getRequest() instanceof Delivery && existing.getRequest() instanceof Pickup)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f674f76e83ff4d20e019d2395948a4ffa1d5034d"}, "originalPosition": 165}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef5934b5c3c013446e5df2077d24f1d74b4c46ee", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/ef5934b5c3c013446e5df2077d24f1d74b4c46ee", "committedDate": "2020-10-15T17:06:39Z", "message": "add update handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "132a6003c1edcfaa799666185ec4014dfb6e2b6e", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/132a6003c1edcfaa799666185ec4014dfb6e2b6e", "committedDate": "2020-10-15T17:16:15Z", "message": "some statics"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTkzMzg1", "url": "https://github.com/ldtteam/minecolonies/pull/5921#pullrequestreview-509993385", "createdAt": "2020-10-16T03:54:13Z", "commit": {"oid": "132a6003c1edcfaa799666185ec4014dfb6e2b6e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjA4MzM1", "url": "https://github.com/ldtteam/minecolonies/pull/5921#pullrequestreview-510208335", "createdAt": "2020-10-16T07:12:46Z", "commit": {"oid": "132a6003c1edcfaa799666185ec4014dfb6e2b6e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzoxMjo0NlrOHiqjqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzoxNzowNFrOHiquJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExMDg4OA==", "bodyText": "There is a method on the blockpos todo this.", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r506110888", "createdAt": "2020-10-16T07:12:46Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/util/BlockPosUtil.java", "diffHunk": "@@ -352,6 +352,22 @@ public static int getMaxDistance2D(@NotNull final BlockPos block1, @NotNull fina\n         return Math.max(xDif, zDif);\n     }\n \n+    /**\n+     * Gets the actual distance in blocks between two positions\n+     *\n+     * @param pos1 Blockpos 1\n+     * @param pos2 Blockpos 2\n+     * @return distance in blocks.\n+     */\n+    public static double getDistance(final BlockPos pos1, final BlockPos pos2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "132a6003c1edcfaa799666185ec4014dfb6e2b6e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExMzU3NA==", "bodyText": "This won't work.\nDeliveries are not requests solely by a warehouse, but can be requested by any worker.", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r506113574", "createdAt": "2020-10-16T07:17:04Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/DeliveryRequestResolver.java", "diffHunk": "@@ -47,159 +22,22 @@ public DeliveryRequestResolver(\n         super(location, token);\n     }\n \n-    @Override\n-    public TypeToken<? extends Delivery> getRequestType()\n-    {\n-        return TypeConstants.DELIVERY;\n-    }\n-\n     @Override\n     public boolean canResolveRequest(@NotNull final IRequestManager manager, final IRequest<? extends Delivery> requestToCheck)\n     {\n-        if (manager.getColony().getWorld().isRemote)\n-        {\n-            return false;\n-        }\n-\n-        final Colony colony = (Colony) manager.getColony();\n-        final IWareHouse wareHouse = colony.getBuildingManager().getClosestWarehouseInColony(requestToCheck.getRequester().getLocation().getInDimensionLocation());\n-        if (wareHouse == null)\n+        final IWareHouse wareHouse = manager.getColony().getBuildingManager().getClosestWarehouseInColony(requestToCheck.getRequest().getStart().getInDimensionLocation());\n+        if (wareHouse == null || !wareHouse.getID().equals(getLocation().getInDimensionLocation()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "132a6003c1edcfaa799666185ec4014dfb6e2b6e"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed8162fa65435db7120f801290b8cecdc033ca91", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/ed8162fa65435db7120f801290b8cecdc033ca91", "committedDate": "2020-10-16T10:13:33Z", "message": "Fix closest warehouse lookup to only loop the warehouses and not count warehouses with level zero"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTk2MTQ5", "url": "https://github.com/ldtteam/minecolonies/pull/5921#pullrequestreview-510596149", "createdAt": "2020-10-16T15:51:17Z", "commit": {"oid": "ed8162fa65435db7120f801290b8cecdc033ca91"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTo1MToxN1rOHjGUWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTo1MToxN1rOHjGUWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU2NTcyMw==", "bodyText": "Arg it does getClosestWarehouse\u00b4\nOkey.", "url": "https://github.com/ldtteam/minecolonies/pull/5921#discussion_r506565723", "createdAt": "2020-10-16T15:51:17Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/resolvers/DeliveryRequestResolver.java", "diffHunk": "@@ -47,159 +22,22 @@ public DeliveryRequestResolver(\n         super(location, token);\n     }\n \n-    @Override\n-    public TypeToken<? extends Delivery> getRequestType()\n-    {\n-        return TypeConstants.DELIVERY;\n-    }\n-\n     @Override\n     public boolean canResolveRequest(@NotNull final IRequestManager manager, final IRequest<? extends Delivery> requestToCheck)\n     {\n-        if (manager.getColony().getWorld().isRemote)\n-        {\n-            return false;\n-        }\n-\n-        final Colony colony = (Colony) manager.getColony();\n-        final IWareHouse wareHouse = colony.getBuildingManager().getClosestWarehouseInColony(requestToCheck.getRequester().getLocation().getInDimensionLocation());\n-        if (wareHouse == null)\n+        final IWareHouse wareHouse = manager.getColony().getBuildingManager().getClosestWarehouseInColony(requestToCheck.getRequest().getStart().getInDimensionLocation());\n+        if (wareHouse == null || !wareHouse.getID().equals(getLocation().getInDimensionLocation()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjExMzU3NA=="}, "originalCommit": {"oid": "132a6003c1edcfaa799666185ec4014dfb6e2b6e"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1772, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}