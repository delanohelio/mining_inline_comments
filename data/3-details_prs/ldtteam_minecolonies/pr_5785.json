{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NzMzMzcx", "number": 5785, "title": "Rework the baker to be a real smeltercrafter", "bodyText": "Changes proposed in this pull request:\n\nThe baker is now a true crafter, and will bake on-demand\nThe baker no longer bakes as long as it has resources, but now supports prestock to force baking.\nBaker recipes reworked, and now have doughs that the baker crafts, and then cooks in the ovens to produce final result.\nReworked the way all the smeltercrafters handle fuel management. It is much faster and more reliable now.\nFixed quite a few small issues across the crafting and display code, especially around NBT handling - This will better support potions in the future.\n\nReview please - Still needs textures for doughs", "createdAt": "2020-09-16T05:18:19Z", "url": "https://github.com/ldtteam/minecolonies/pull/5785", "merged": true, "mergeCommit": {"oid": "60eaa65505510578904c0723f9021133ca476a7d"}, "closed": true, "closedAt": "2020-09-20T15:25:17Z", "author": {"login": "Mekle001"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJVNHQgH2gAyNDg3NzMzMzcxOjBiMTVlYjU0NjE1NTgyNTNkMTVlMDk5MTJlZDYwYTAxOWUzZGQ1ZGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdKwcunAFqTQ5MjIwMTgyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b15eb5461558253d15e09912ed60a019e3dd5df", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/0b15eb5461558253d15e09912ed60a019e3dd5df", "committedDate": "2020-09-16T05:04:53Z", "message": "Improve NBT support for recipes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "371d49be8776dc5803a212e683a330e2343f4388", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/371d49be8776dc5803a212e683a330e2343f4388", "committedDate": "2020-09-16T05:07:15Z", "message": "rework SmelterCrafter fueling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e9435f4d3c82d7e0710111210c3a0495e0a91b9", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/0e9435f4d3c82d7e0710111210c3a0495e0a91b9", "committedDate": "2020-09-16T05:08:20Z", "message": "Rework the baker to be a real smeltercrafter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "085a0f0aab87c53abb5a9ccb3a241ff28047cdf4", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/085a0f0aab87c53abb5a9ccb3a241ff28047cdf4", "committedDate": "2020-09-16T05:08:51Z", "message": "Add new items and recipes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d19e2abfe832d33d9a712560104cd3f35d76003", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/8d19e2abfe832d33d9a712560104cd3f35d76003", "committedDate": "2020-09-16T05:11:42Z", "message": "Add Update handler for baker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NjkxNjUw", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-489691650", "createdAt": "2020-09-16T14:34:45Z", "commit": {"oid": "8d19e2abfe832d33d9a712560104cd3f35d76003"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNDozNDo0NlrOHSz6Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoxODoxOVrOHS6stw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTQ4NjkyNw==", "bodyText": "commented out?", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489486927", "createdAt": "2020-09-16T14:34:46Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingBaker.java", "diffHunk": "@@ -197,61 +175,55 @@ public void deserializeNBT(final CompoundNBT compound)\n                 final CompoundNBT productCompound = taskTagList.getCompound(i);\n                 final BakingProduct bakingProduct = BakingProduct.createFromNBT(productCompound);\n                 bakingProducts.add(bakingProduct);\n+                if(state != ProductState.UNCRAFTED)\n+                {\n+                    InventoryUtils.addItemStackToProvider(this, bakingProduct.getEndProduct());\n+                }\n             }\n-\n-            tasks.put(state, bakingProducts);\n-        }\n-\n-        final ListNBT furnaceTagList = compound.getList(TAG_FURNACES, Constants.NBT.TAG_COMPOUND);\n-        for (int i = 0; i < furnaceTagList.size(); ++i)\n-        {\n-            final CompoundNBT furnaceCompound = furnaceTagList.getCompound(i);\n-            final BlockPos pos = BlockPosUtil.read(furnaceCompound, TAG_FURNACE_POS);\n-            final BakingProduct bakingProduct = BakingProduct.createFromNBT(furnaceCompound);\n-            furnaces.put(pos, bakingProduct);\n         }\n     }\n \n     @Override\n-    public CompoundNBT serializeNBT()\n+    public ImmutableCollection<IRequestResolver<?>> createResolvers()\n     {\n-        final CompoundNBT compound = super.serializeNBT();\n+        final Collection<IRequestResolver<?>> supers =\n+          super.createResolvers().stream()\n+            .filter(r -> !(r instanceof PrivateWorkerCraftingProductionResolver || r instanceof PrivateWorkerCraftingRequestResolver))\n+            .collect(Collectors.toList());\n+        final ImmutableList.Builder<IRequestResolver<?>> builder = ImmutableList.builder();\n+\n+        builder.addAll(supers);\n+/*        builder.add(new BuildingRequestResolver(getRequester().getLocation(),\n+          getColony().getRequestManager().getFactoryController().getNewInstance(TypeConstants.ITOKEN))); */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d19e2abfe832d33d9a712560104cd3f35d76003"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5NjIxMQ==", "bodyText": "should we check if it returns an empty air item here?  And log an error when parsing fails, also for the tags maybe.", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489596211", "createdAt": "2020-09-16T17:14:57Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/colony/crafting/CustomRecipe.java", "diffHunk": "@@ -142,40 +144,59 @@\n      */\n     private int maxBldgLevel = 5;\n \n-\n     /**\n      * This class can only be created by the parse static\n      */\n     private CustomRecipe()\n     {\n+    }\n \n+    private static ItemStack idToItemStack(String itemId)\n+    {\n+        final int tagIndex = itemId.indexOf(\"{\");\n+        final String tag = tagIndex > 0 ? itemId.substring(tagIndex) : null;\n+        itemId = tagIndex > 0 ? itemId.substring(0, tagIndex) : itemId;\n+        final String[] split = itemId.split(\":\");\n+        final Item item = ForgeRegistries.ITEMS.getValue(new ResourceLocation(split[0], split[1]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d19e2abfe832d33d9a712560104cd3f35d76003"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU5ODEzNQ==", "bodyText": "old log", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489598135", "createdAt": "2020-09-16T17:18:19Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,142 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()\n+    {\n+        final List<ItemStack> possibleFuels = getOwnBuilding().getAllowedFuel();\n+        if (possibleFuels.isEmpty())\n+        {\n+            if (worker.getCitizenData() != null)\n+            {\n+                worker.getCitizenData().triggerInteraction(new StandardInteraction(new TranslationTextComponent(FURNACE_USER_NO_FUEL), ChatPriority.IMPORTANT));\n+            }\n+            return ImmutableList.of();\n+        }\n+\n+        if(currentRecipeStorage != null)\n+        {\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getPrimaryOutput()));\n+            // There is always only one input.\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getCleanedInput().get(0).getItemStack()));\n+        }\n+        return possibleFuels;\n+    }\n+\n+    private boolean isFuelNeeded()\n+    {\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check Fuel levels in the furnace\n+     */\n+    private IAIState checkFurnaceFuel()\n+    {\n+        final World world = getOwnBuilding().getColony().getWorld();\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding + amountOfFuelInInv <= 0 && !getOwnBuilding().hasWorkerOpenRequestsOfType(worker.getCitizenData(), TypeToken.of(StackList.class)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE)\n+        {\n+            worker.getCitizenData().createRequestAsync(new StackList(possibleFuels, COM_MINECOLONIES_REQUESTS_BURNABLE, STACKSIZE, 1));\n+            return getState();\n+        }\n+\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                if (entity instanceof FurnaceTileEntity)\n+                {\n+                    final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                    if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                    {\n+                        Log.getLogger().info(\"Need to fuel the furnaces!\");\n+                        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)\n+                        {\n+                            needsCurrently = new Tuple<>(item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)), STACKSIZE);\n+                            return GATHERING_REQUIRED_MATERIALS;\n+                        }\n+\n+                        fuelPos = pos;\n+                        if(preFuelState == null)\n+                        {\n+                            preFuelState = getState();\n+                        }\n+                        return ADD_FUEL_TO_FURNACE;\n+                    }\n+                }\n+            }\n+        }\n+        return getState();\n+    }\n+\n+    /**\n+     * Add furnace fuel when necessary\n+     * @return\n+     */\n+    private IAIState addFuelToFurnace()\n+    {\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)\n+        {\n+            needsCurrently = new Tuple<>(item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)), STACKSIZE);\n+            return GATHERING_REQUIRED_MATERIALS;\n+        }\n+\n+        if (fuelPos == null || walkToBlock(fuelPos))\n+        {\n+            return getState();\n+        }\n+\n+        if (WorldUtil.isBlockLoaded(world, fuelPos))\n+        {\n+            final TileEntity entity = world.getTileEntity(fuelPos);\n+            if (entity instanceof FurnaceTileEntity)\n+            {\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                //Stoke the furnaces\n+                if (InventoryUtils.hasItemInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, item)))\n+                        && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)))\n+                {\n+                    InventoryUtils.transferXOfFirstSlotInItemHandlerWithIntoInItemHandler(\n+                        worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, item)), STACKSIZE,\n+                        new InvWrapper(furnace), FUEL_SLOT);\n+                    if(preFuelState != null && preFuelState != ADD_FUEL_TO_FURNACE)\n+                    {\n+                        IAIState returnState = preFuelState;\n+                        preFuelState = null;\n+                        fuelPos = null;\n+                        return returnState;\n+                    } \n+                }\n+            }\n+        }\n+\n+        Log.getLogger().info(\"fueling confused!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d19e2abfe832d33d9a712560104cd3f35d76003"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5ODM5Mzkx", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-489839391", "createdAt": "2020-09-16T17:22:04Z", "commit": {"oid": "8d19e2abfe832d33d9a712560104cd3f35d76003"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMjowNFrOHS606w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNzoyMjowNFrOHS606w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTYwMDIzNQ==", "bodyText": "copy paste error/ also for the other items", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r489600235", "createdAt": "2020-09-16T17:22:04Z", "author": {"login": "someaddons"}, "path": "src/main/java/com/minecolonies/coremod/items/ItemBreadDough.java", "diffHunk": "@@ -0,0 +1,21 @@\n+package com.minecolonies.coremod.items;\n+\n+import com.minecolonies.api.creativetab.ModCreativeTabs;\n+\n+import static com.minecolonies.api.util.constant.Constants.STACKSIZE;\n+\n+/**\n+ * Class handling the Santa hat.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d19e2abfe832d33d9a712560104cd3f35d76003"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "093472321cbe1bbbbeff9c4e06ae0993e67b580d", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/093472321cbe1bbbbeff9c4e06ae0993e67b580d", "committedDate": "2020-09-16T17:27:20Z", "message": "PR Feedback Cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5161c72cf84715f510419b24d2daa1f834bd30e", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/b5161c72cf84715f510419b24d2daa1f834bd30e", "committedDate": "2020-09-16T17:48:25Z", "message": "Logging for ItemDefinition parsing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/e91ccfb4a52bce8965806a38f0405d7d34492ee6", "committedDate": "2020-09-17T02:24:05Z", "message": "Add support for reading old baker furnace lists"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzg4NDU5", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-490388459", "createdAt": "2020-09-17T09:01:50Z", "commit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowMTo1MFrOHTYgQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowMTo1MFrOHTYgQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4NjQ2NQ==", "bodyText": "final?", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490086465", "createdAt": "2020-09-17T09:01:50Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowHutWareHouse.java", "diffHunk": "@@ -207,7 +207,9 @@ private void updateResourcePane()\n         neededLabel.setLabelText(resource.getAvailable() + \" / \" + resource.getAmount());\n         findPaneOfTypeByID(RESOURCE_QUANTITY_MISSING, Label.class).setLabelText(Integer.toString(resource.getAmount() - resource.getAvailable()));\n \n-        findPaneOfTypeByID(RESOURCE_ICON, ItemIcon.class).setItem(new ItemStack(resource.getItem(), 1));\n+        ItemStack image = new ItemStack(resource.getItem(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzkwNjg4", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-490390688", "createdAt": "2020-09-17T09:04:33Z", "commit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowNDozNFrOHTYmoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowNDozNFrOHTYmoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4ODA5Nw==", "bodyText": "jdoc", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490088097", "createdAt": "2020-09-17T09:04:34Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,140 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzkyMDY5", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-490392069", "createdAt": "2020-09-17T09:06:18Z", "commit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowNjoxOFrOHTYrLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowNjoxOFrOHTYrLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTI2Mw==", "bodyText": "Not sure it's worth it. But for performance reasons we could always first check the inventory and if it doesn't then we check the building (building count can be fairly expensive). Potentially also just check for hasInInv instead of count here?", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490089263", "createdAt": "2020-09-17T09:06:18Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,140 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()\n+    {\n+        final List<ItemStack> possibleFuels = getOwnBuilding().getAllowedFuel();\n+        if (possibleFuels.isEmpty())\n+        {\n+            if (worker.getCitizenData() != null)\n+            {\n+                worker.getCitizenData().triggerInteraction(new StandardInteraction(new TranslationTextComponent(FURNACE_USER_NO_FUEL), ChatPriority.IMPORTANT));\n+            }\n+            return ImmutableList.of();\n+        }\n+\n+        if(currentRecipeStorage != null)\n+        {\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getPrimaryOutput()));\n+            // There is always only one input.\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getCleanedInput().get(0).getItemStack()));\n+        }\n+        return possibleFuels;\n+    }\n+\n+    private boolean isFuelNeeded()\n+    {\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check Fuel levels in the furnace\n+     */\n+    private IAIState checkFurnaceFuel()\n+    {\n+        final World world = getOwnBuilding().getColony().getWorld();\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding + amountOfFuelInInv <= 0 && !getOwnBuilding().hasWorkerOpenRequestsOfType(worker.getCitizenData(), TypeToken.of(StackList.class)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzkyODA3", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-490392807", "createdAt": "2020-09-17T09:07:17Z", "commit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowNzoxN1rOHTYtVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowNzoxN1rOHTYtVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA4OTgxNA==", "bodyText": "if amountOfFuelInInv == 0, then fuelInBuilding > 0 is trivially true", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490089814", "createdAt": "2020-09-17T09:07:17Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,140 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()\n+    {\n+        final List<ItemStack> possibleFuels = getOwnBuilding().getAllowedFuel();\n+        if (possibleFuels.isEmpty())\n+        {\n+            if (worker.getCitizenData() != null)\n+            {\n+                worker.getCitizenData().triggerInteraction(new StandardInteraction(new TranslationTextComponent(FURNACE_USER_NO_FUEL), ChatPriority.IMPORTANT));\n+            }\n+            return ImmutableList.of();\n+        }\n+\n+        if(currentRecipeStorage != null)\n+        {\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getPrimaryOutput()));\n+            // There is always only one input.\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getCleanedInput().get(0).getItemStack()));\n+        }\n+        return possibleFuels;\n+    }\n+\n+    private boolean isFuelNeeded()\n+    {\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check Fuel levels in the furnace\n+     */\n+    private IAIState checkFurnaceFuel()\n+    {\n+        final World world = getOwnBuilding().getColony().getWorld();\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding + amountOfFuelInInv <= 0 && !getOwnBuilding().hasWorkerOpenRequestsOfType(worker.getCitizenData(), TypeToken.of(StackList.class)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE)\n+        {\n+            worker.getCitizenData().createRequestAsync(new StackList(possibleFuels, COM_MINECOLONIES_REQUESTS_BURNABLE, STACKSIZE, 1));\n+            return getState();\n+        }\n+\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                if (entity instanceof FurnaceTileEntity)\n+                {\n+                    final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                    if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                    {\n+                        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzk0NDEx", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-490394411", "createdAt": "2020-09-17T09:09:11Z", "commit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowOToxMVrOHTYyPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTowOToxMVrOHTYyPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA5MTA3MQ==", "bodyText": "if both are 0, I could imagine this here being a problem", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r490091071", "createdAt": "2020-09-17T09:09:11Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAIRequestSmelter.java", "diffHunk": "@@ -218,6 +223,140 @@ private IAIState accelerateFurnaces()\n         return getState();\n     }\n \n+    private List<ItemStack> getActivePossibleFuels()\n+    {\n+        final List<ItemStack> possibleFuels = getOwnBuilding().getAllowedFuel();\n+        if (possibleFuels.isEmpty())\n+        {\n+            if (worker.getCitizenData() != null)\n+            {\n+                worker.getCitizenData().triggerInteraction(new StandardInteraction(new TranslationTextComponent(FURNACE_USER_NO_FUEL), ChatPriority.IMPORTANT));\n+            }\n+            return ImmutableList.of();\n+        }\n+\n+        if(currentRecipeStorage != null)\n+        {\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getPrimaryOutput()));\n+            // There is always only one input.\n+            possibleFuels.removeIf(stack -> ItemStackUtils.compareItemStacksIgnoreStackSize(stack, currentRecipeStorage.getCleanedInput().get(0).getItemStack()));\n+        }\n+        return possibleFuels;\n+    }\n+\n+    private boolean isFuelNeeded()\n+    {\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * Check Fuel levels in the furnace\n+     */\n+    private IAIState checkFurnaceFuel()\n+    {\n+        final World world = getOwnBuilding().getColony().getWorld();\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding + amountOfFuelInInv <= 0 && !getOwnBuilding().hasWorkerOpenRequestsOfType(worker.getCitizenData(), TypeToken.of(StackList.class)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE)\n+        {\n+            worker.getCitizenData().createRequestAsync(new StackList(possibleFuels, COM_MINECOLONIES_REQUESTS_BURNABLE, STACKSIZE, 1));\n+            return getState();\n+        }\n+\n+        for (final BlockPos pos : getOwnBuilding().getFurnaces())\n+        {\n+            if (WorldUtil.isBlockLoaded(world, pos))\n+            {\n+                final TileEntity entity = world.getTileEntity(pos);\n+                if (entity instanceof FurnaceTileEntity)\n+                {\n+                    final FurnaceTileEntity furnace = (FurnaceTileEntity) entity;\n+                    if (!furnace.isBurning() && (hasSmeltableInFurnaceAndNoFuel(furnace) || hasNeitherFuelNorSmeltAble(furnace)) && currentRecipeStorage != null && currentRecipeStorage.getIntermediate() == Blocks.FURNACE) \n+                    {\n+                        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)\n+                        {\n+                            needsCurrently = new Tuple<>(item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)), STACKSIZE);\n+                            return GATHERING_REQUIRED_MATERIALS;\n+                        }\n+\n+                        fuelPos = pos;\n+                        if(preFuelState == null)\n+                        {\n+                            preFuelState = getState();\n+                        }\n+                        return ADD_FUEL_TO_FURNACE;\n+                    }\n+                }\n+            }\n+        }\n+        return getState();\n+    }\n+\n+    /**\n+     * Add furnace fuel when necessary\n+     * @return\n+     */\n+    private IAIState addFuelToFurnace()\n+    {\n+        final List<ItemStack> possibleFuels = getActivePossibleFuels();\n+        final int amountOfFuelInBuilding = InventoryUtils.getItemCountInProvider(getOwnBuilding(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+        final int amountOfFuelInInv = InventoryUtils.getItemCountInItemHandler(worker.getInventoryCitizen(), item -> FurnaceTileEntity.isFuel(item) && possibleFuels.stream().anyMatch(candidate -> ItemStackUtils.compareItemStacksIgnoreStackSize(candidate, item)));\n+\n+        if (amountOfFuelInBuilding > 0 && amountOfFuelInInv == 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e91ccfb4a52bce8965806a38f0405d7d34492ee6"}, "originalPosition": 165}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3813094bd4f0f46916a9973b2eacade17fcfdece", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/3813094bd4f0f46916a9973b2eacade17fcfdece", "committedDate": "2020-09-17T15:00:21Z", "message": "Furtther PR cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36da99fe553a6da7084c863e6f17cc3a6d5b484e", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/36da99fe553a6da7084c863e6f17cc3a6d5b484e", "committedDate": "2020-09-17T15:08:23Z", "message": "More optimization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1221691e906e731d341ade8cee12778093f40293", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/1221691e906e731d341ade8cee12778093f40293", "committedDate": "2020-09-18T15:47:26Z", "message": "Fix a few cases of containers comparison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b40ec00783c5ab95b6a4daf5e7d0a0ae8a73424", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/6b40ec00783c5ab95b6a4daf5e7d0a0ae8a73424", "committedDate": "2020-09-18T15:47:57Z", "message": "Fix resource icon in building"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11516b8be3fa6cbbe976f42a43fdd8a474ac111", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/f11516b8be3fa6cbbe976f42a43fdd8a474ac111", "committedDate": "2020-09-18T15:48:40Z", "message": "Fix ItemStackRequest to return right displaystacks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2224b958841e29c42cfdb581517162a1aff8b58b", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/2224b958841e29c42cfdb581517162a1aff8b58b", "committedDate": "2020-09-18T15:49:15Z", "message": "Add texturesfor bread_dough and pumpkin_pie"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMDEzMzk4", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-492013398", "createdAt": "2020-09-19T17:41:37Z", "commit": {"oid": "2224b958841e29c42cfdb581517162a1aff8b58b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNzo0MTozN1rOHUtXLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNzo0MTozN1rOHUtXLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ3Njc4MA==", "bodyText": "Can we make this an if, it's getting kinda too complex for an inline if.", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r491476780", "createdAt": "2020-09-19T17:41:37Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/entity/ai/basic/AbstractEntityAICrafting.java", "diffHunk": "@@ -168,7 +168,7 @@ protected IAIState getRecipe()\n         for (final ItemStorage inputStorage : input)\n         {\n             final ItemStack container = inputStorage.getItem().getContainerItem(inputStorage.getItemStack());\n-            final int remaining = !ItemStackUtils.isEmpty(container) ? inputStorage.getAmount() :inputStorage.getAmount() * remainingOpsCount ;\n+            final int remaining = ItemStackUtils.isEmpty(container) && ItemStackUtils.compareItemStacksIgnoreStackSize(inputStorage.getItemStack(), container , false, true) ? inputStorage.getAmount() * remainingOpsCount :inputStorage.getAmount();\n             if (InventoryUtils.getItemCountInProvider(getOwnBuilding(), itemStack -> itemStack.isItemEqual(inputStorage.getItemStack()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2224b958841e29c42cfdb581517162a1aff8b58b"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae64150f5680cc1fabc1f71d478b7b1c1fef5d00", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/ae64150f5680cc1fabc1f71d478b7b1c1fef5d00", "committedDate": "2020-09-19T17:42:58Z", "message": "Merge branch 'version/1.15' into feature/newbaker"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTg2NTk3", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-492186597", "createdAt": "2020-09-20T10:37:27Z", "commit": {"oid": "ae64150f5680cc1fabc1f71d478b7b1c1fef5d00"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMDozNzoyN1rOHU5pTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQxMDozNzoyN1rOHU5pTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTY3ODAzMQ==", "bodyText": "Empty line.", "url": "https://github.com/ldtteam/minecolonies/pull/5785#discussion_r491678031", "createdAt": "2020-09-20T10:37:27Z", "author": {"login": "OrionDevelopment"}, "path": "src/main/java/com/minecolonies/coremod/colony/requestsystem/requests/StandardRequests.java", "diffHunk": "@@ -67,6 +67,13 @@ public ITextComponent getShortDisplayString()\n             combined.appendSibling(getRequest().getStack().getTextComponent());\n             return combined;\n         }\n+        @NotNull\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae64150f5680cc1fabc1f71d478b7b1c1fef5d00"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMTg5NTE3", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-492189517", "createdAt": "2020-09-20T11:36:00Z", "commit": {"oid": "ae64150f5680cc1fabc1f71d478b7b1c1fef5d00"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2afdfc33a5a10de713cea0c544895c20dba6427b", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/2afdfc33a5a10de713cea0c544895c20dba6427b", "committedDate": "2020-09-20T13:35:13Z", "message": "PR Feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f761890ba6da8325e5c35e3e8ae52aa218d309", "author": {"user": {"login": "Raycoms", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/c9f761890ba6da8325e5c35e3e8ae52aa218d309", "committedDate": "2020-09-20T13:37:20Z", "message": "Merge branch 'version/1.15' into feature/newbaker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cce428e9f5b561829e9cd964757c5a0663935a4", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/9cce428e9f5b561829e9cd964757c5a0663935a4", "committedDate": "2020-09-20T14:44:25Z", "message": "Fix NPE"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7d9e5274fc9574d6cfd543508f1b0e5b7a6a720", "author": {"user": {"login": "Mekle001", "name": "Mike Garlick"}}, "url": "https://github.com/ldtteam/minecolonies/commit/b7d9e5274fc9574d6cfd543508f1b0e5b7a6a720", "committedDate": "2020-09-20T14:48:04Z", "message": "Fix NPE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjAwMDgy", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-492200082", "createdAt": "2020-09-20T14:55:21Z", "commit": {"oid": "b7d9e5274fc9574d6cfd543508f1b0e5b7a6a720"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMjAxODI2", "url": "https://github.com/ldtteam/minecolonies/pull/5785#pullrequestreview-492201826", "createdAt": "2020-09-20T15:23:18Z", "commit": {"oid": "b7d9e5274fc9574d6cfd543508f1b0e5b7a6a720"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1944, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}