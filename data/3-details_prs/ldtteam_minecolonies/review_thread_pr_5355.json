{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1NDU2NjU0", "number": 5355, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NTozNVrOEMKahQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzo0MDo0N1rOEPIoiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTg4OTk3OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NTozNVrOGuHZ1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NTozNVrOGuHZ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwODk4MA==", "bodyText": "ehem ehem", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r451008980", "createdAt": "2020-07-07T16:55:35Z", "author": {"login": "Raycoms"}, "path": "build.gradle", "diffHunk": "@@ -105,7 +105,7 @@ dependencies {\n }\n \n group = \"com.minecolonies\"\n-version = config.minecraft_version.toString() + \"-\" + System.getenv().containsKey(\"Version\") ? System.getenv(\"Version\") : 'null'\n+version = config.minecraft_version.toString() + \"-\" + \"0.11.950-universal\"\n archivesBaseName = \"minecolonies\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0af17b133e5f3e4dd3ea029a24c8685ffb2a03"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTg5MjMyOnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/IColony.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NjoxMFrOGuHbSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NjoxMFrOGuHbSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwOTM1NA==", "bodyText": "jdoc in this file", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r451009354", "createdAt": "2020-07-07T16:56:10Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/IColony.java", "diffHunk": "@@ -115,6 +115,8 @@ default String getTeamName()\n         return TEAM_COLONY_NAME + \"_\" + getDimension() + \"_\" + getID();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0af17b133e5f3e4dd3ea029a24c8685ffb2a03"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTg5NDE2OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/IColonyView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NjozN1rOGuHcVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NjozN1rOGuHcVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwOTYyMw==", "bodyText": "returns what?", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r451009623", "createdAt": "2020-07-07T16:56:37Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/IColonyView.java", "diffHunk": "@@ -442,4 +435,12 @@\n     List<CompactColonyReference> getFeuds();\n \n     boolean areSpiesEnabled();\n+\n+    /**\n+     * Gets the data view for a visitor\n+     *\n+     * @param citizenId\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0af17b133e5f3e4dd3ea029a24c8685ffb2a03"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTg5NDcyOnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/IColonyView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1Njo0NFrOGuHctQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1Njo0NFrOGuHctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAwOTcxNw==", "bodyText": "jdc", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r451009717", "createdAt": "2020-07-07T16:56:44Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/IColonyView.java", "diffHunk": "@@ -251,6 +248,9 @@\n     @Nullable\n     IMessage handleColonyViewCitizensMessage(int id, PacketBuffer buf);\n \n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0af17b133e5f3e4dd3ea029a24c8685ffb2a03"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTg5NjY0OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/interactionhandling/IInteractionResponseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NzoxNVrOGuHd8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1NzoxNVrOGuHd8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxMDAzNA==", "bodyText": "those semicolons in the middle of nwhere", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r451010034", "createdAt": "2020-07-07T16:57:15Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/interactionhandling/IInteractionResponseHandler.java", "diffHunk": "@@ -43,73 +43,83 @@\n \n     /**\n      * Check if this interaction is a primary interaction or secondary interaction.\n-     *\n      * @return true if primary.\n      */\n     boolean isPrimary();\n \n     /**\n      * Get the priority of this interaction response handler.\n-     *\n      * @return the chat priority.\n      */\n     IChatPriority getPriority();\n \n     /**\n      * Check if this response handler is still visible for the player.\n-     *\n      * @param world the world this citizen is in.\n      * @return true if so.\n      */\n     boolean isVisible(final World world);\n \n     /**\n      * Check if this response handler is still valid.\n-     *\n      * @param colony the colony the citizen is in.\n      * @return true if still valid, else false.\n      */\n     boolean isValid(final ICitizenData colony);\n \n     /**\n      * Server side action triggered on a possible response.\n-     *\n      * @param response the clicked string response of the player.\n-     * @param world    the world it was triggered in.\n-     * @param data     the citizen related to it.\n+     * @param player the world it was triggered in.\n+     * @param data the citizen related to it.\n      */\n-    void onServerResponseTriggered(final ITextComponent response, final World world, final ICitizenData data);\n+    void onServerResponseTriggered(final ITextComponent response, final PlayerEntity player, final ICitizenData data);\n \n     /**\n      * Client side action triggered on a possible response.\n-     *\n      * @param response the clicked string response of the player.\n-     * @param world    the client side world.\n-     * @param data     the citizen data assigned to it.\n-     * @param window   the window it was triggered in.\n+     * @param player the client side world.\n+     * @param data the citizen data assigned to it.\n+     * @param window the window it was triggered in.\n      * @return if wishing to continue interacting.\n      */\n     @OnlyIn(Dist.CLIENT)\n-    boolean onClientResponseTriggered(final ITextComponent response, final World world, final ICitizenDataView data, final Window window);\n+    boolean onClientResponseTriggered(final ITextComponent response, final PlayerEntity player, final ICitizenDataView data, final Window window);\n \n     /**\n      * Remove a certain parent.\n-     *\n      * @param inquiry the parent inquiry.\n      */\n     void removeParent(ITextComponent inquiry);\n \n     /**\n      * Gen all child interactions related to this.\n-     *\n      * @return all child interactions.\n      */\n     List<IInteractionResponseHandler> genChildInteractions();\n \n     /**\n      * Type id used to deserialize.\n-     *\n      * @return the string type.\n      */\n     String getType();\n+\n+    /**\n+     * Callback for showing the interaction, to set interaction specific stuff\n+     */\n+    default void onWindowOpened(final Window window, final ICitizenDataView dataView) {}\n+\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0af17b133e5f3e4dd3ea029a24c8685ffb2a03"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTg5ODcwOnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/compatibility/ICompatibilityManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1Nzo0OFrOGuHfTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1Nzo0OFrOGuHfTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxMDM4MA==", "bodyText": "jdc", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r451010380", "createdAt": "2020-07-07T16:57:48Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/compatibility/ICompatibilityManager.java", "diffHunk": "@@ -128,6 +129,8 @@\n      */\n     List<Disease> getDiseases();\n \n+    List<Tuple<Item, Integer>> getRecruitmentCostsWeights();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0af17b133e5f3e4dd3ea029a24c8685ffb2a03"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMTkwMzkxOnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/util/BlockPosUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNjo1OTowN1rOGuHieA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzozODoyOFrOGuI7tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxMTE5Mg==", "bodyText": "I'd make that methds.", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r451011192", "createdAt": "2020-07-07T16:59:07Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/util/BlockPosUtil.java", "diffHunk": "@@ -636,4 +640,84 @@ public static Rotation getRotationFromRotations(final int rotations)\n                 return Rotation.NONE;\n         }\n     }\n+\n+    /**\n+     * Returns the first air position near the given start. Advances vertically first then horizontally\n+     *\n+     * @param start     start position\n+     * @param vRange    vertical search range\n+     * @param hRange    horizontal search range\n+     * @param predicate check predicate for the right block\n+     * @return position or null\n+     */\n+    public static BlockPos findAround(final IBlockReader world, final BlockPos start, final int vRange, final int hRange, final Predicate<BlockState> predicate)\n+    {\n+        if (vRange < 1 && hRange < 1)\n+        {\n+            return null;\n+        }\n+\n+        BlockPos temp;\n+        int y = 0;\n+        int y_offset = 1;\n+\n+        for (int i = 0; i < hRange + 2; i++)\n+        {\n+            for (int steps = 1; steps <= vRange; steps++)\n+            {\n+                // Start topleft of middle point\n+                temp = start.add(-steps, y, -steps);\n+\n+                // X ->\n+                for (int x = 0; x <= steps; x++)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad0af17b133e5f3e4dd3ea029a24c8685ffb2a03"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAzNDAzOQ==", "bodyText": "nah that is a hassle since I would need additional tuple return types just for a simple loop", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r451034039", "createdAt": "2020-07-07T17:38:28Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/util/BlockPosUtil.java", "diffHunk": "@@ -636,4 +640,84 @@ public static Rotation getRotationFromRotations(final int rotations)\n                 return Rotation.NONE;\n         }\n     }\n+\n+    /**\n+     * Returns the first air position near the given start. Advances vertically first then horizontally\n+     *\n+     * @param start     start position\n+     * @param vRange    vertical search range\n+     * @param hRange    horizontal search range\n+     * @param predicate check predicate for the right block\n+     * @return position or null\n+     */\n+    public static BlockPos findAround(final IBlockReader world, final BlockPos start, final int vRange, final int hRange, final Predicate<BlockState> predicate)\n+    {\n+        if (vRange < 1 && hRange < 1)\n+        {\n+            return null;\n+        }\n+\n+        BlockPos temp;\n+        int y = 0;\n+        int y_offset = 1;\n+\n+        for (int i = 0; i < hRange + 2; i++)\n+        {\n+            for (int steps = 1; steps <= vRange; steps++)\n+            {\n+                // Start topleft of middle point\n+                temp = start.add(-steps, y, -steps);\n+\n+                // X ->\n+                for (int x = 0; x <= steps; x++)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxMTE5Mg=="}, "originalCommit": {"oid": "ad0af17b133e5f3e4dd3ea029a24c8685ffb2a03"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDMxNjM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingTavern.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowMjo0M1rOGv-xzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzowMjo0M1rOGv-xzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk2NDgxNQ==", "bodyText": "constants", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r452964815", "createdAt": "2020-07-10T17:02:43Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/buildings/workerbuildings/BuildingTavern.java", "diffHunk": "@@ -104,26 +154,273 @@ public void onColonyTick(@NotNull final IColony colony)\n         {\n             musicCooldown -= MAX_TICKRATE;\n         }\n+\n+        final Iterator<Integer> it = externalCitizens.iterator();\n+        while (it.hasNext())\n+        {\n+            final Integer id = it.next();\n+            if (colony.getVisitorManager().getVisitor(id) == null)\n+            {\n+                it.remove();\n+            }\n+        }\n+\n+        if (noVisitorTime > 0)\n+        {\n+            noVisitorTime -= 500;\n+        }\n+\n+        if (getBuildingLevel() > 0 && externalCitizens.size() < 3 * getBuildingLevel() && noVisitorTime <= 0)\n+        {\n+            spawnVisitor();\n+            noVisitorTime = colony.getWorld().getRandom().nextInt(3000) + 6000;\n+        }\n     }\n \n-    /*\n     @Override\n-    public void onColonyTick(@NotNull final IColony colony)\n+    public void onUpgradeComplete(final int newlevel)\n     {\n-       TODO: Next PR, Hiring\n-       for(final IColonyEvent event:colony.getEventManager().getEvents().values())\n+        super.onUpgradeComplete(newlevel);\n+        initTags = false;\n+    }\n+\n+    /**\n+     * Spawns a recruitable visitor citizen.\n+     */\n+    private void spawnVisitor()\n+    {\n+        IVisitorData newCitizen = (IVisitorData) colony.getVisitorManager().createAndRegisterNewCitizenData();\n+        externalCitizens.add(newCitizen.getId());\n+\n+        newCitizen.setBedPos(getPosition());\n+        newCitizen.setHomeBuilding(this);\n+\n+        int recruitLevel = colony.getWorld().rand.nextInt(10 * getBuildingLevel()) + 15;\n+        List<com.minecolonies.api.util.Tuple<Item, Integer>> recruitCosts = IColonyManager.getInstance().getCompatibilityManager().getRecruitmentCostsWeights();\n+\n+        if (newCitizen.getName().contains(\"Ray\"))\n         {\n-            if (event instanceof ColonyRecruitableCitizenEvent)\n+            newCitizen.setRecruitCosts(new ItemStack(Items.BAKED_POTATO, 64));\n+        }\n+\n+        newCitizen.getCitizenSkillHandler().init(recruitLevel);\n+\n+        BlockPos spawnPos = BlockPosUtil.findAround(colony.getWorld(), getPosition(), 1, 1, bs -> bs.getMaterial() == Material.AIR);\n+        if (spawnPos == null)\n+        {\n+            spawnPos = getPosition();\n+        }\n+\n+        colony.getVisitorManager().spawnOrCreateCitizen(newCitizen, colony.getWorld(), spawnPos, true);\n+\n+        final AbstractEntityCitizen citizenEntity = newCitizen.getCitizenEntity().get();\n+\n+        Tuple<Item, Integer> cost = recruitCosts.get(colony.getWorld().rand.nextInt(recruitCosts.size()));\n+        if (recruitLevel > 20)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2de26c2270f32d14d1156e5b3fe556816184c11"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjA2ODgzOnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/managers/interfaces/IEntityManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQxNjo1MToyMlrOGwN7bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMToxODowM1rOGymcbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMzAzNw==", "bodyText": "This is a bit weird in my opinion.\nIf AbstractEntityCitizen is now used for none citizens it should be renamed, together with these kinds of methods.\nPlease refactor.", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r453213037", "createdAt": "2020-07-11T16:51:22Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/colony/managers/interfaces/IEntityManager.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.minecolonies.api.colony.managers.interfaces;\n+\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Manager interface for managing entities for a colony\n+ */\n+public interface IEntityManager\n+{\n+    /**\n+     * Register a citizen entity with the colony\n+     *\n+     * @param citizen citizen to register\n+     */\n+    void registerCitizen(AbstractEntityCitizen citizen);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2de26c2270f32d14d1156e5b3fe556816184c11"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI4NDg5Nw==", "bodyText": "AbstractColonyEntity potentially?", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r453284897", "createdAt": "2020-07-12T08:16:11Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/managers/interfaces/IEntityManager.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.minecolonies.api.colony.managers.interfaces;\n+\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Manager interface for managing entities for a colony\n+ */\n+public interface IEntityManager\n+{\n+    /**\n+     * Register a citizen entity with the colony\n+     *\n+     * @param citizen citizen to register\n+     */\n+    void registerCitizen(AbstractEntityCitizen citizen);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMzAzNw=="}, "originalCommit": {"oid": "f2de26c2270f32d14d1156e5b3fe556816184c11"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI5NjIxMw==", "bodyText": "ye good point", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r453296213", "createdAt": "2020-07-12T10:08:25Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/colony/managers/interfaces/IEntityManager.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.minecolonies.api.colony.managers.interfaces;\n+\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Manager interface for managing entities for a colony\n+ */\n+public interface IEntityManager\n+{\n+    /**\n+     * Register a citizen entity with the colony\n+     *\n+     * @param citizen citizen to register\n+     */\n+    void registerCitizen(AbstractEntityCitizen citizen);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMzAzNw=="}, "originalCommit": {"oid": "f2de26c2270f32d14d1156e5b3fe556816184c11"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcxMTg1NQ==", "bodyText": "fixed", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r455711855", "createdAt": "2020-07-16T11:18:03Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/colony/managers/interfaces/IEntityManager.java", "diffHunk": "@@ -0,0 +1,115 @@\n+package com.minecolonies.api.colony.managers.interfaces;\n+\n+import com.minecolonies.api.colony.ICitizenData;\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Manager interface for managing entities for a colony\n+ */\n+public interface IEntityManager\n+{\n+    /**\n+     * Register a citizen entity with the colony\n+     *\n+     * @param citizen citizen to register\n+     */\n+    void registerCitizen(AbstractEntityCitizen citizen);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzIxMzAzNw=="}, "originalCommit": {"oid": "f2de26c2270f32d14d1156e5b3fe556816184c11"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzA0NDg4OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/ICivilianData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozODoyMlrOGyrV-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozODoyMlrOGyrV-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5MjEyMw==", "bodyText": "JDoc", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r455792123", "createdAt": "2020-07-16T13:38:22Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/colony/ICivilianData.java", "diffHunk": "@@ -0,0 +1,188 @@\n+package com.minecolonies.api.colony;\n+\n+import com.minecolonies.api.colony.interactionhandling.IInteractionResponseHandler;\n+import com.minecolonies.api.colony.requestsystem.requestable.IRequestable;\n+import com.minecolonies.api.colony.requestsystem.token.IToken;\n+import com.minecolonies.api.entity.citizen.AbstractCivilianEntity;\n+import com.minecolonies.api.entity.citizen.AbstractEntityCitizen;\n+import net.minecraft.entity.player.PlayerEntity;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.network.PacketBuffer;\n+import net.minecraft.util.text.ITextComponent;\n+import net.minecraftforge.common.util.INBTSerializable;\n+import org.jetbrains.annotations.NotNull;\n+import org.jetbrains.annotations.Nullable;\n+\n+import java.util.Optional;\n+\n+public interface ICivilianData extends ICitizen, INBTSerializable<CompoundNBT>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e690938f8c3ac15d5f73febac9752611248077b2"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzA0OTk5OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/colony/managers/interfaces/IEntityManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozOTozOFrOGyrZSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTozMjo1NlrOGywkdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5Mjk3MQ==", "bodyText": "You probably also want to take in the type T instead of ICivilianData as the first parameter?", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r455792971", "createdAt": "2020-07-16T13:39:38Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/colony/managers/interfaces/IEntityManager.java", "diffHunk": "@@ -56,50 +56,50 @@ void sendPackets(\n       @NotNull Set<ServerPlayerEntity> newSubscribers);\n \n     /**\n-     * Returns a map of citizens in the colony. The map has ID as key, and citizen data as value.\n+     * Returns a map of civilian in the colony. The map has ID as key, and civilian data as value.\n      *\n-     * @return Map of citizens in the colony, with as key the citizen ID, and as value the citizen data.\n+     * @return Map of civilian in the colony, with as key the civilian ID, and as value the civilian data.\n      */\n     @NotNull\n-    Map<Integer, ICitizenData> getCitizenMap();\n+    Map<Integer, ICivilianData> getCivilianDataMap();\n \n     /**\n-     * Get citizen by ID.\n+     * Get civilian by ID.\n      *\n-     * @param citizenId ID of the Citizen.\n-     * @return ICitizenData associated with the ID, or null if it was not found.\n+     * @param civilianId ID of the civilian.\n+     * @return ICivilianData associated with the ID, or null if it was not found.\n      */\n-    ICitizenData getCitizen(int citizenId);\n+    <T extends ICivilianData> T getCivilian(int civilianId);\n \n     /**\n-     * Spawns a citizen with the specific citizen data.\n+     * Spawns a civilian with the specific civilian data.\n      *\n      * @param data     Data to use when spawn, null when new generation.\n      * @param world    THe world.\n-     * @param force    True to skip max citizen test, false when not.\n      * @param spawnPos the pos to spawn it at.\n-     * @return the new citizen.\n+     * @param force    True to skip max civilian test, false when not.\n+     * @return the new civilian.\n      */\n-    ICitizenData spawnOrCreateCitizen(ICitizenData data, World world, BlockPos spawnPos, boolean force);\n+    <T extends ICivilianData> T spawnOrCreateCivilian(ICivilianData data, World world, BlockPos spawnPos, boolean force);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e690938f8c3ac15d5f73febac9752611248077b2"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg3Nzc0OQ==", "bodyText": "ye", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r455877749", "createdAt": "2020-07-16T15:32:56Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/colony/managers/interfaces/IEntityManager.java", "diffHunk": "@@ -56,50 +56,50 @@ void sendPackets(\n       @NotNull Set<ServerPlayerEntity> newSubscribers);\n \n     /**\n-     * Returns a map of citizens in the colony. The map has ID as key, and citizen data as value.\n+     * Returns a map of civilian in the colony. The map has ID as key, and civilian data as value.\n      *\n-     * @return Map of citizens in the colony, with as key the citizen ID, and as value the citizen data.\n+     * @return Map of civilian in the colony, with as key the civilian ID, and as value the civilian data.\n      */\n     @NotNull\n-    Map<Integer, ICitizenData> getCitizenMap();\n+    Map<Integer, ICivilianData> getCivilianDataMap();\n \n     /**\n-     * Get citizen by ID.\n+     * Get civilian by ID.\n      *\n-     * @param citizenId ID of the Citizen.\n-     * @return ICitizenData associated with the ID, or null if it was not found.\n+     * @param civilianId ID of the civilian.\n+     * @return ICivilianData associated with the ID, or null if it was not found.\n      */\n-    ICitizenData getCitizen(int citizenId);\n+    <T extends ICivilianData> T getCivilian(int civilianId);\n \n     /**\n-     * Spawns a citizen with the specific citizen data.\n+     * Spawns a civilian with the specific civilian data.\n      *\n      * @param data     Data to use when spawn, null when new generation.\n      * @param world    THe world.\n-     * @param force    True to skip max citizen test, false when not.\n      * @param spawnPos the pos to spawn it at.\n-     * @return the new citizen.\n+     * @param force    True to skip max civilian test, false when not.\n+     * @return the new civilian.\n      */\n-    ICitizenData spawnOrCreateCitizen(ICitizenData data, World world, BlockPos spawnPos, boolean force);\n+    <T extends ICivilianData> T spawnOrCreateCivilian(ICivilianData data, World world, BlockPos spawnPos, boolean force);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5Mjk3MQ=="}, "originalCommit": {"oid": "e690938f8c3ac15d5f73febac9752611248077b2"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzA1NTQ3OnYy", "diffSide": "RIGHT", "path": "src/api/java/com/minecolonies/api/inventory/container/ContainerCitizenInventory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzo0MDo0N1rOGyrcpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDowODoxNlrOGyss0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5MzgyOQ==", "bodyText": "This is a bit weird.\nCould you check if something with generics works here?", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r455793829", "createdAt": "2020-07-16T13:40:47Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/inventory/container/ContainerCitizenInventory.java", "diffHunk": "@@ -78,11 +78,11 @@ public ContainerCitizenInventory(final int windowId, final PlayerInventory inv,\n             final ICitizenData data;\n             if (citizenId > 0)\n             {\n-                data = colony.getCitizenManager().getCitizen(citizenId);\n+                data = (ICitizenData) colony.getCitizenManager().getCivilian(citizenId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e690938f8c3ac15d5f73febac9752611248077b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5NzIzNg==", "bodyText": "true thats weird, hm I think I actually did that generic let me check, would've to cast everywhere else", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r455797236", "createdAt": "2020-07-16T13:45:30Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/inventory/container/ContainerCitizenInventory.java", "diffHunk": "@@ -78,11 +78,11 @@ public ContainerCitizenInventory(final int windowId, final PlayerInventory inv,\n             final ICitizenData data;\n             if (citizenId > 0)\n             {\n-                data = colony.getCitizenManager().getCitizen(citizenId);\n+                data = (ICitizenData) colony.getCitizenManager().getCivilian(citizenId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5MzgyOQ=="}, "originalCommit": {"oid": "e690938f8c3ac15d5f73febac9752611248077b2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgxNDM1Mw==", "bodyText": "ye there is already generic support for it, just forgot to change the return type, good catch^^", "url": "https://github.com/ldtteam/minecolonies/pull/5355#discussion_r455814353", "createdAt": "2020-07-16T14:08:16Z", "author": {"login": "someaddons"}, "path": "src/api/java/com/minecolonies/api/inventory/container/ContainerCitizenInventory.java", "diffHunk": "@@ -78,11 +78,11 @@ public ContainerCitizenInventory(final int windowId, final PlayerInventory inv,\n             final ICitizenData data;\n             if (citizenId > 0)\n             {\n-                data = colony.getCitizenManager().getCitizen(citizenId);\n+                data = (ICitizenData) colony.getCitizenManager().getCivilian(citizenId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5MzgyOQ=="}, "originalCommit": {"oid": "e690938f8c3ac15d5f73febac9752611248077b2"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3647, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}