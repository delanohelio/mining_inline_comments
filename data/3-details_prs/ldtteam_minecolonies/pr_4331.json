{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0ODM5MDM3", "number": 4331, "title": "Rework raiders and fix raider issues.", "bodyText": "Closes #\nCloses #\nCloses #\nChanges proposed in this pull request:\nOriginally this was to fix loading/unloading/counting issues with the raiders, but ended up reworking it a bit and creating a new event system which can be used for future colony events as well.\nWhats new: We now have ColonyEvents, which are registered through a forge registry for them, so other mods can add events aswell. Colonyevents are managed through a new EventManager, which updates them and saves/reads them from nbt. Those events receive a regular tick from the colony,albeit pretty slow(each 500 ticks) to update their status and do whatever update logic they need to. Colony events can also register/unregister entities related to them and spawn temporary structures. For managing the structures the EventManager has an EventStructureManager. The structure manager allows spawning structures for a given event and takes a backup schematic of the surroindings. Once the event is removed(or was not loaded during colony load) the backup schematic is put back in place.\nI've translated both the raider and pirate events over as colonyevents, which also allows us now to spawn multiple ones seperatly if we want to. Atm I've added that once a raid succeeds the biggest raid size it gets split up into an additional raid from another spawn pos.\nBoth raid events now keep track of their entities and respawn them if those were not actually killed(onDeath triggered), but removed by other means, e.g. minecraft itself removing it, this also includes chunk unloads. The respawn is limited to the previous position, or a max distance of the original spawn position, so that when the colony is still active, but the raiders happen to be unloaded it tries to place them a bit closer in a loaded chunk.\nThe PirateEvent now has a maximum amount of pirates it can have active, depending on the amount of spawners remaining(spawnercount * 2 +10). It also now spawns additional pirates,depending on shipsize, without a player beeing close to the spawners, so that it always raids the colony.\nThe BarbarianEvent has a given Horde(as previously) which has a predetermined size of archers/melees/bosses. It actively keeps track of all and respawns any missing. Any additional mobs which try to register over the Horde's counter are killed off, this e.g. might happen with chunk unloading/loading.\nBarracks got a little new feature, now that we can have more than one raid from different angles, which gives the raid mobs a glow effect so they are easier to find. This is called \"Spies\" and uses gold to hire those spies  into the enemy lines which then lets the players know the position.\nReview please", "createdAt": "2020-02-13T12:23:24Z", "url": "https://github.com/ldtteam/minecolonies/pull/4331", "merged": true, "mergeCommit": {"oid": "cb561072ce4994cbce3bd301122974d530377fbb"}, "closed": true, "closedAt": "2020-03-01T19:13:28Z", "author": {"login": "someaddons"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD540HAH2gAyMzc0ODM5MDM3OmQ4YjM5ZWRhN2FmMzgzOTUzNzA3MTNmNTQyNTk4Y2VmNTY3N2JjMmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcJeC2eAFqTM2Njg3OTQ0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/d8b39eda7af38395370713f542598cef5677bc2d", "committedDate": "2020-02-13T12:14:30Z", "message": "Rework raiders and fix raider issues."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTc5NjYy", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-358179662", "createdAt": "2020-02-13T12:33:04Z", "commit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozMzowNVrOFpSEAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozMzowNVrOFpSEAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzMTg3Mg==", "bodyText": "formatting seems off here", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r378831872", "createdAt": "2020-02-13T12:33:05Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/colonyEvents/IColonyEvent.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package com.minecolonies.api.colony.colonyEvents;\n+\n+import com.minecolonies.api.colony.IColony;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.EntityLiving;\n+import net.minecraft.nbt.NBTTagCompound;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Interface for colony event types.\n+ */\n+public interface IColonyEvent\n+{\n+    void setSpawnPoint(BlockPos spawnPoint);\n+\n+    /**\n+     * The position the event starts at\n+     *\n+     * @return\n+     */\n+    public BlockPos getStartPos();\n+\n+    /**\n+     * The list of entities related to this event\n+     *\n+     * @return\n+     */\n+    default public List<Entity> getEntities()\n+    {\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Returns the events current status\n+     *\n+     * @return\n+     */\n+    public EventStatus getStatus();\n+\n+    /**\n+     * Sets the current event status\n+     *\n+     * @return\n+     */\n+    public void setStatus(final EventStatus status);\n+\n+    /**\n+     * Returns this events ID.\n+     *\n+     * @return\n+     */\n+    public int getID();\n+\n+    /**\n+     * The event type's id\n+     *\n+     * @return\n+     */\n+    public ResourceLocation getEventTypeID();\n+\n+    /**\n+     * Sets the colony\n+     *\n+     * @param colony\n+     */\n+    public void setColony(@NotNull final IColony colony);\n+\n+    /**\n+     * Writes the event to NBT\n+     *\n+     * @param compound\n+     * @return\n+     */\n+    public NBTTagCompound writeToNBT(final NBTTagCompound compound);\n+\n+    /**\n+     * Reads the events values from NBT\n+     *\n+     * @param compound\n+     */\n+    public void readFromNBT(final NBTTagCompound compound);\n+\n+    default public void registerEntity(final Entity entity) {}\n+\n+    ;\n+\n+    default public void unregisterEntity(final Entity entity) {}\n+\n+    ;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTgwNTcx", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-358180571", "createdAt": "2020-02-13T12:34:38Z", "commit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozNDozOFrOFpSGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozNDozOFrOFpSGrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzMjU1OQ==", "bodyText": "not areSpiesEnabled ?", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r378832559", "createdAt": "2020-02-13T12:34:38Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/IColonyView.java", "diffHunk": "@@ -463,4 +454,6 @@\n      * @return the list.\n      */\n     List<CompactColonyReference> getFeuds();\n+\n+    boolean isSpiesEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTgxMDkx", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-358181091", "createdAt": "2020-02-13T12:35:33Z", "commit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozNTozM1rOFpSIOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozNTozM1rOFpSIOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzMjk1NQ==", "bodyText": "We had null here on purpose to avoid them changing dimensions, is that wrong?", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r378832955", "createdAt": "2020-02-13T12:35:33Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/entity/citizen/AbstractEntityCitizen.java", "diffHunk": "@@ -115,10 +115,9 @@ public int getTicksExisted()\n      * @param dimensionIn dimension to travel to.\n      */\n     @Override\n-    @Nullable\n-    public Entity changeDimension(final int dimensionIn)\n+    public Entity changeDimension(int dimensionIn, net.minecraftforge.common.util.ITeleporter teleporter)\n     {\n-        return null;\n+        return this;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTgxNDA1", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-358181405", "createdAt": "2020-02-13T12:36:05Z", "commit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozNjowNlrOFpSJVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozNjowNlrOFpSJVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzMzIzNg==", "bodyText": "jdoc, what is this?", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r378833236", "createdAt": "2020-02-13T12:36:06Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/entity/mobs/AbstractEntityMinecoloniesMob.java", "diffHunk": "@@ -75,6 +71,18 @@\n      */\n     private int ladderCounter = 0;\n \n+    /**\n+     * The raids event id.\n+     */\n+    private int eventID = 0;\n+\n+    /**\n+     * Whether this entity is registered with the colony yet.\n+     */\n+    private boolean isRegistered = false;\n+\n+    private int invulTime = 2 * 20;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTgxODE5", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-358181819", "createdAt": "2020-02-13T12:36:44Z", "commit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozNjo0NFrOFpSKow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozNjo0NFrOFpSKow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzMzU3MQ==", "bodyText": "Good idea", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r378833571", "createdAt": "2020-02-13T12:36:44Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/entity/mobs/AbstractEntityMinecoloniesMob.java", "diffHunk": "@@ -329,7 +366,14 @@ public IColony getColony()\n      */\n     public void registerWithColony()\n     {\n-        getColony();\n+        if (colony == null || eventID == 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "originalPosition": 201}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTgzMzEz", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-358183313", "createdAt": "2020-02-13T12:39:20Z", "commit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozOToyMFrOFpSPEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjozOToyMFrOFpSPEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzNDcwNA==", "bodyText": "lang entry?", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r378834704", "createdAt": "2020-02-13T12:39:20Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/client/gui/WindowsBarracksSpies.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package com.minecolonies.coremod.client.gui;\n+\n+import com.minecolonies.api.colony.buildings.views.IBuildingView;\n+import com.minecolonies.api.tileentities.TileEntityRack;\n+import com.minecolonies.api.util.InventoryUtils;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.blockout.controls.*;\n+import com.minecolonies.blockout.views.Window;\n+import com.minecolonies.coremod.MineColonies;\n+import com.minecolonies.coremod.network.messages.HireSpiesMessage;\n+import net.minecraft.client.Minecraft;\n+import net.minecraft.init.Items;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraftforge.items.IItemHandler;\n+import net.minecraftforge.items.wrapper.InvWrapper;\n+\n+/**\n+ * UI for hiring spies on the barracks\n+ */\n+public class WindowsBarracksSpies extends Window implements ButtonHandler\n+{\n+    /**\n+     * The xml file for this gui\n+     */\n+    private static final String SPIES_GUI_XML = \":gui/windowBarracksSpies.xml\";\n+\n+    /**\n+     * The cancel button id\n+     */\n+    private static final String BUTTON_CANCEL = \"cancel\";\n+\n+    /**\n+     * The hire spies button id\n+     */\n+    private static final String BUTTON_HIRE = \"hireSpies\";\n+\n+    /**\n+     * The spies button icon id\n+     */\n+    private static final String SPIES_BUTTON_ICON = \"hireSpiesIcon\";\n+\n+    /**\n+     * The gold amount label id\n+     */\n+    private static final String GOLD_COST_LABEL = \"amount\";\n+\n+    /**\n+     * Text element id\n+     */\n+    private static final String TEXT_ID = \"text\";\n+\n+    private static final int GOLD_COST = 5;\n+\n+    /**\n+     * The client side colony data\n+     */\n+    private final IBuildingView buildingView;\n+\n+    /**\n+     * The buildings position.\n+     */\n+    private final BlockPos buildingPos;\n+\n+    public WindowsBarracksSpies(final IBuildingView buildingView, final BlockPos buildingPos)\n+    {\n+        super(Constants.MOD_ID + SPIES_GUI_XML);\n+        this.buildingView = buildingView;\n+        this.buildingPos = buildingPos;\n+\n+        findPaneOfTypeByID(SPIES_BUTTON_ICON, ItemIcon.class).setItem(Items.GOLD_INGOT.getDefaultInstance());\n+        findPaneOfTypeByID(GOLD_COST_LABEL, Label.class).setLabelText(\"x5\");\n+\n+        final IItemHandler rackInv = ((TileEntityRack) buildingView.getColony().getWorld().getTileEntity(buildingPos)).getInventory();\n+        final IItemHandler playerInv = new InvWrapper(Minecraft.getMinecraft().player.inventory);\n+        int goldCount = InventoryUtils.getItemCountInItemHandler(playerInv, Items.GOLD_INGOT, 0);\n+        goldCount += InventoryUtils.getItemCountInItemHandler(rackInv, Items.GOLD_INGOT, 0);\n+\n+        if (!buildingView.getColony().isRaiding() || goldCount < GOLD_COST || buildingView.getColony().isSpiesEnabled())\n+        {\n+            findPaneOfTypeByID(BUTTON_HIRE, ButtonImage.class).disable();\n+        }\n+        findPaneOfTypeByID(TEXT_ID, Text.class).setTextContent(\n+          \"During raids you can hire spies here, to infiltrate the enemy lines. Those then let you know enemy positions although they demand some gold as payment. Put the gold into the barracks inventory to automatically pay them.\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTgzODA3", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-358183807", "createdAt": "2020-02-13T12:40:11Z", "commit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjo0MDoxMVrOFpSQrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjo0MDoxMVrOFpSQrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzNTExOQ==", "bodyText": "isUnderRaid, isBeingRaided might be more understandable", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r378835119", "createdAt": "2020-02-13T12:40:11Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/ColonyView.java", "diffHunk": "@@ -149,9 +149,9 @@\n     private IRequestManager requestManager;\n \n     /**\n-     * The number of raiders in the horde.\n+     * Wether the colony is raided\n      */\n-    private int horde;\n+    private boolean isRaided;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTg1MTAz", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-358185103", "createdAt": "2020-02-13T12:42:22Z", "commit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjo0MjoyMlrOFpSUsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMjo0MjoyMlrOFpSUsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgzNjE0NQ==", "bodyText": "why in this one here we just remove it from all and in the other ones we do it in the instanceof check?", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r378836145", "createdAt": "2020-02-13T12:42:22Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/colonyEvents/raidEvents/babarianEvent/BarbarianRaidEvent.java", "diffHunk": "@@ -0,0 +1,399 @@\n+package com.minecolonies.coremod.colony.colonyEvents.raidEvents.babarianEvent;\n+\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.colonyEvents.EventStatus;\n+import com.minecolonies.api.colony.colonyEvents.IColonyEvent;\n+import com.minecolonies.api.entity.mobs.AbstractEntityMinecoloniesMob;\n+import com.minecolonies.api.entity.mobs.RaiderMobUtils;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.LanguageHandler;\n+import com.minecolonies.api.util.Tuple;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.ColonyState;\n+import com.minecolonies.coremod.colony.colonyEvents.raidEvents.pirateEvent.IRaidEvent;\n+import com.minecolonies.coremod.colony.colonyEvents.raidEvents.pirateEvent.PirateEventUtils;\n+import com.minecolonies.coremod.entity.mobs.barbarians.EntityArcherBarbarian;\n+import com.minecolonies.coremod.entity.mobs.barbarians.EntityBarbarian;\n+import com.minecolonies.coremod.entity.mobs.barbarians.EntityChiefBarbarian;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.EntityLiving;\n+import net.minecraft.entity.EntityLivingBase;\n+import net.minecraft.init.MobEffects;\n+import net.minecraft.nbt.NBTTagCompound;\n+import net.minecraft.potion.PotionEffect;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+import static com.minecolonies.api.colony.colonyEvents.NBTTags.*;\n+import static com.minecolonies.api.util.constant.ColonyConstants.*;\n+import static com.minecolonies.api.util.constant.TranslationConstants.*;\n+import static com.minecolonies.coremod.colony.colonyEvents.raidEvents.pirateEvent.PirateRaidEvent.TAG_DAYS_LEFT;\n+\n+public class BarbarianRaidEvent implements IColonyEvent, IRaidEvent\n+{\n+    /**\n+     * This raids event id, registry entries use res locations as ids.\n+     */\n+    public static final ResourceLocation BABARIAN_RAID_EVENT_TYPE_ID = new ResourceLocation(Constants.MOD_ID, \"babarian_raid\");\n+\n+    /**\n+     * The max distance a babarian is allowed to spawn from the original spawn position\n+     */\n+    public static int MAX_SPAWN_DEVIATION = 300;\n+\n+    /**\n+     * The max distance to search for a loaded blockpos on a respawn try\n+     */\n+    public static int MAX_RESPAWN_DEVIATION = 5 * 16;\n+\n+    /**\n+     * The minimum distance to the colony center where mobs are allowed to spawn\n+     */\n+    public static int MIN_CENTER_DISTANCE = 200;\n+\n+    /**\n+     * The amount of babarians overall\n+     */\n+    private BarbarianHorde horde;\n+\n+    /**\n+     * The references to living raiders left\n+     */\n+    private Map<Entity, UUID> barbarians = new WeakHashMap<>();\n+    private Map<Entity, UUID> archers    = new WeakHashMap<>();\n+    private Map<Entity, UUID> chiefs     = new WeakHashMap<>();\n+\n+    /**\n+     * List of respawns to do\n+     */\n+    private List<Tuple<ResourceLocation, BlockPos>> respawns = new ArrayList<>();\n+\n+    /**\n+     * The related colony\n+     */\n+    private IColony colony;\n+\n+    /**\n+     * The events id\n+     */\n+    private int id;\n+\n+    /**\n+     * The events starting spawnpoint\n+     */\n+    private BlockPos spawnPoint;\n+\n+    /**\n+     * Status of the event\n+     */\n+    private EventStatus status = EventStatus.STARTING;\n+\n+    /**\n+     * Days the event can last, to make sure it eventually despawns.\n+     */\n+    private int daysToGo = 3;\n+\n+    public BarbarianRaidEvent(IColony colony)\n+    {\n+        this.colony = colony;\n+        id = colony.getEventManager().getAndTakeNextEventID();\n+    }\n+\n+    @Override\n+    public void setSpawnPoint(final BlockPos spawnPoint)\n+    {\n+        this.spawnPoint = spawnPoint;\n+    }\n+\n+    @Override\n+    public BlockPos getStartPos()\n+    {\n+        return spawnPoint;\n+    }\n+\n+    @Override\n+    public List<Entity> getEntities()\n+    {\n+        List<Entity> entities = new ArrayList<>();\n+        entities.addAll(archers.keySet());\n+        entities.addAll(chiefs.keySet());\n+        entities.addAll(barbarians.keySet());\n+        return entities;\n+    }\n+\n+    @Override\n+    public EventStatus getStatus()\n+    {\n+        return status;\n+    }\n+\n+    @Override\n+    public void setStatus(final EventStatus status)\n+    {\n+        this.status = status;\n+    }\n+\n+    @Override\n+    public int getID()\n+    {\n+        return id;\n+    }\n+\n+    @Override\n+    public ResourceLocation getEventTypeID()\n+    {\n+        return BABARIAN_RAID_EVENT_TYPE_ID;\n+    }\n+\n+    @Override\n+    public void setColony(@NotNull final IColony colony)\n+    {\n+        this.colony = colony;\n+    }\n+\n+    @Override\n+    public void registerEntity(final Entity entity)\n+    {\n+        if (!(entity instanceof AbstractEntityMinecoloniesMob))\n+        {\n+            entity.setDead();\n+            return;\n+        }\n+\n+        if (entity instanceof EntityChiefBarbarian && chiefs.keySet().size() < horde.numberOfBosses)\n+        {\n+            chiefs.put(entity, entity.getUniqueID());\n+            return;\n+        }\n+\n+        if (entity instanceof EntityArcherBarbarian && archers.keySet().size() < horde.numberOfArchers)\n+        {\n+            archers.put(entity, entity.getUniqueID());\n+            return;\n+        }\n+\n+        if (entity instanceof EntityBarbarian && barbarians.keySet().size() < horde.numberOfRaiders)\n+        {\n+            barbarians.put(entity, entity.getUniqueID());\n+            return;\n+        }\n+\n+        entity.setDead();\n+    }\n+\n+    /**\n+     * Called when an entity is removed\n+     *\n+     * @param entity\n+     */\n+    @Override\n+    public void unregisterEntity(final Entity entity)\n+    {\n+        if (!(archers.containsKey(entity) || chiefs.containsKey(entity) || barbarians.containsKey(entity)) || status != EventStatus.PROGRESSING\n+              || colony.getState() != ColonyState.ACTIVE)\n+        {\n+            return;\n+        }\n+\n+        archers.remove(entity);\n+        chiefs.remove(entity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8b39eda7af38395370713f542598cef5677bc2d"}, "originalPosition": 202}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3514f4b66f51f8984d3b2ceb6c6ac89993cbbe8d", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/3514f4b66f51f8984d3b2ceb6c6ac89993cbbe8d", "committedDate": "2020-02-14T16:54:10Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d1e8f98bd7d170abb4135837fb5a5513d45b34f", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/4d1e8f98bd7d170abb4135837fb5a5513d45b34f", "committedDate": "2020-02-20T18:17:39Z", "message": "rebalance raid sizes and improve stuck handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "561452a7c46f42dd2082b33b8ac8cd4f09e7a43c", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/561452a7c46f42dd2082b33b8ac8cd4f09e7a43c", "committedDate": "2020-02-21T22:57:26Z", "message": "Merge remote-tracking branch 'remotes/origin/version/1.12' into raiderFix112\n\n# Conflicts:\n#\tbuild.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7f51510743627558e7c885f5a991b61a327ad0d", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/e7f51510743627558e7c885f5a991b61a327ad0d", "committedDate": "2020-02-21T23:39:41Z", "message": "fix pathing error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDg0MjQ5", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-363084249", "createdAt": "2020-02-23T10:17:13Z", "commit": {"oid": "4d1e8f98bd7d170abb4135837fb5a5513d45b34f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMDoxNzoxNFrOFtP48Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMDoxNzoxNFrOFtP48Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5MDU3Nw==", "bodyText": "those are still off, the semicolons", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r382990577", "createdAt": "2020-02-23T10:17:14Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/colony/colonyEvents/IColonyEvent.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.minecolonies.api.colony.colonyEvents;\n+\n+import com.minecolonies.api.colony.IColony;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.EntityLiving;\n+import net.minecraft.nbt.NBTTagCompound;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Interface for colony event types.\n+ */\n+public interface IColonyEvent\n+{\n+    void setSpawnPoint(BlockPos spawnPoint);\n+\n+    /**\n+     * The position the event starts at\n+     *\n+     * @return\n+     */\n+    public BlockPos getStartPos();\n+\n+    /**\n+     * The list of entities related to this event\n+     *\n+     * @return\n+     */\n+    default public List<Entity> getEntities()\n+    {\n+        return new ArrayList<>();\n+    }\n+\n+    /**\n+     * Returns the events current status\n+     *\n+     * @return\n+     */\n+    public EventStatus getStatus();\n+\n+    /**\n+     * Sets the current event status\n+     *\n+     * @return\n+     */\n+    public void setStatus(final EventStatus status);\n+\n+    /**\n+     * Returns this events ID.\n+     *\n+     * @return\n+     */\n+    public int getID();\n+\n+    /**\n+     * The event type's id\n+     *\n+     * @return\n+     */\n+    public ResourceLocation getEventTypeID();\n+\n+    /**\n+     * Sets the colony\n+     *\n+     * @param colony\n+     */\n+    public void setColony(@NotNull final IColony colony);\n+\n+    /**\n+     * Writes the event to NBT\n+     *\n+     * @param compound\n+     * @return\n+     */\n+    public NBTTagCompound writeToNBT(final NBTTagCompound compound);\n+\n+    /**\n+     * Reads the events values from NBT\n+     *\n+     * @param compound\n+     */\n+    public void readFromNBT(final NBTTagCompound compound);\n+\n+    /**\n+     * Called to register an entity with this event\n+     *\n+     * @param entity\n+     */\n+    default public void registerEntity(final Entity entity) {}\n+\n+    ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1e8f98bd7d170abb4135837fb5a5513d45b34f"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDg0NzMz", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-363084733", "createdAt": "2020-02-23T10:25:42Z", "commit": {"oid": "4d1e8f98bd7d170abb4135837fb5a5513d45b34f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMDoyNTo0MlrOFtP7EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMDoyNTo0MlrOFtP7EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5MTEyMA==", "bodyText": "Can't we import the ITeleporter for this?", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r382991120", "createdAt": "2020-02-23T10:25:42Z", "author": {"login": "Raycoms"}, "path": "src/api/java/com/minecolonies/api/entity/citizen/AbstractEntityCitizen.java", "diffHunk": "@@ -115,8 +115,7 @@ public int getTicksExisted()\n      * @param dimensionIn dimension to travel to.\n      */\n     @Override\n-    @Nullable\n-    public Entity changeDimension(final int dimensionIn)\n+    public Entity changeDimension(int dimensionIn, net.minecraftforge.common.util.ITeleporter teleporter)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1e8f98bd7d170abb4135837fb5a5513d45b34f"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMDg0ODcx", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-363084871", "createdAt": "2020-02-23T10:28:36Z", "commit": {"oid": "4d1e8f98bd7d170abb4135837fb5a5513d45b34f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMDoyODozNlrOFtP75A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxMDoyODozNlrOFtP75A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjk5MTMzMg==", "bodyText": "formatting here too", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r382991332", "createdAt": "2020-02-23T10:28:36Z", "author": {"login": "Raycoms"}, "path": "src/main/java/com/minecolonies/coremod/colony/colonyEvents/raidEvents/babarianEvent/BarbarianRaidEvent.java", "diffHunk": "@@ -0,0 +1,426 @@\n+package com.minecolonies.coremod.colony.colonyEvents.raidEvents.babarianEvent;\n+\n+import com.minecolonies.api.colony.IColony;\n+import com.minecolonies.api.colony.colonyEvents.EventStatus;\n+import com.minecolonies.api.colony.colonyEvents.IColonyEvent;\n+import com.minecolonies.api.colony.colonyEvents.IRaidEvent;\n+import com.minecolonies.api.entity.mobs.AbstractEntityMinecoloniesMob;\n+import com.minecolonies.api.entity.mobs.RaiderMobUtils;\n+import com.minecolonies.api.util.BlockPosUtil;\n+import com.minecolonies.api.util.LanguageHandler;\n+import com.minecolonies.api.util.Log;\n+import com.minecolonies.api.util.Tuple;\n+import com.minecolonies.api.util.constant.Constants;\n+import com.minecolonies.coremod.colony.ColonyState;\n+import com.minecolonies.coremod.colony.colonyEvents.raidEvents.pirateEvent.PirateEventUtils;\n+import com.minecolonies.coremod.entity.mobs.barbarians.EntityArcherBarbarian;\n+import com.minecolonies.coremod.entity.mobs.barbarians.EntityBarbarian;\n+import com.minecolonies.coremod.entity.mobs.barbarians.EntityChiefBarbarian;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.EntityLiving;\n+import net.minecraft.entity.EntityLivingBase;\n+import net.minecraft.init.MobEffects;\n+import net.minecraft.nbt.NBTTagCompound;\n+import net.minecraft.potion.PotionEffect;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.*;\n+\n+import static com.minecolonies.api.colony.colonyEvents.NBTTags.*;\n+import static com.minecolonies.api.util.constant.ColonyConstants.*;\n+import static com.minecolonies.api.util.constant.TranslationConstants.*;\n+import static com.minecolonies.coremod.colony.colonyEvents.raidEvents.pirateEvent.PirateRaidEvent.TAG_DAYS_LEFT;\n+\n+/**\n+ * Barbarian raid event for the colony, triggers a horde of barbarians which spawn and attack the colony.\n+ */\n+public class BarbarianRaidEvent implements IColonyEvent, IRaidEvent\n+{\n+    /**\n+     * This raids event id, registry entries use res locations as ids.\n+     */\n+    public static final ResourceLocation BABARIAN_RAID_EVENT_TYPE_ID = new ResourceLocation(Constants.MOD_ID, \"babarian_raid\");\n+\n+    /**\n+     * The max distance a babarian is allowed to spawn from the original spawn position\n+     */\n+    public static int MAX_SPAWN_DEVIATION = 300;\n+\n+    /**\n+     * The max distance to search for a loaded blockpos on a respawn try\n+     */\n+    public static int MAX_RESPAWN_DEVIATION = 5 * 16;\n+\n+    /**\n+     * The minimum distance to the colony center where mobs are allowed to spawn\n+     */\n+    public static int MIN_CENTER_DISTANCE = 100;\n+\n+    /**\n+     * The amount of babarians overall\n+     */\n+    private BarbarianHorde horde;\n+\n+    /**\n+     * The references to living raiders left\n+     */\n+    private Map<Entity, UUID> barbarians = new WeakHashMap<>();\n+    private Map<Entity, UUID> archers    = new WeakHashMap<>();\n+    private Map<Entity, UUID> chiefs     = new WeakHashMap<>();\n+\n+    /**\n+     * List of respawns to do\n+     */\n+    private List<Tuple<ResourceLocation, BlockPos>> respawns = new ArrayList<>();\n+\n+    /**\n+     * The related colony\n+     */\n+    private IColony colony;\n+\n+    /**\n+     * The events id\n+     */\n+    private int id;\n+\n+    /**\n+     * The events starting spawnpoint\n+     */\n+    private BlockPos spawnPoint;\n+\n+    /**\n+     * Status of the event\n+     */\n+    private EventStatus status = EventStatus.STARTING;\n+\n+    /**\n+     * Days the event can last, to make sure it eventually despawns.\n+     */\n+    private int daysToGo = 3;\n+\n+    public BarbarianRaidEvent(IColony colony)\n+    {\n+        this.colony = colony;\n+        id = colony.getEventManager().getAndTakeNextEventID();\n+    }\n+\n+    @Override\n+    public void setSpawnPoint(final BlockPos spawnPoint)\n+    {\n+        this.spawnPoint = spawnPoint;\n+    }\n+\n+    @Override\n+    public BlockPos getStartPos()\n+    {\n+        return spawnPoint;\n+    }\n+\n+    @Override\n+    public List<Entity> getEntities()\n+    {\n+        List<Entity> entities = new ArrayList<>();\n+        entities.addAll(archers.keySet());\n+        entities.addAll(chiefs.keySet());\n+        entities.addAll(barbarians.keySet());\n+        return entities;\n+    }\n+\n+    @Override\n+    public EventStatus getStatus()\n+    {\n+        return status;\n+    }\n+\n+    @Override\n+    public void setStatus(final EventStatus status)\n+    {\n+        this.status = status;\n+    }\n+\n+    @Override\n+    public int getID()\n+    {\n+        return id;\n+    }\n+\n+    @Override\n+    public ResourceLocation getEventTypeID()\n+    {\n+        return BABARIAN_RAID_EVENT_TYPE_ID;\n+    }\n+\n+    @Override\n+    public void setColony(@NotNull final IColony colony)\n+    {\n+        this.colony = colony;\n+    }\n+\n+    @Override\n+    public void registerEntity(final Entity entity)\n+    {\n+        if (!(entity instanceof AbstractEntityMinecoloniesMob) || !entity.isEntityAlive())\n+        {\n+            entity.setDead();\n+            return;\n+        }\n+\n+        if (entity instanceof EntityChiefBarbarian && chiefs.keySet().size() < horde.numberOfBosses)\n+        {\n+            chiefs.put(entity, entity.getUniqueID());\n+            return;\n+        }\n+\n+        if (entity instanceof EntityArcherBarbarian && archers.keySet().size() < horde.numberOfArchers)\n+        {\n+            archers.put(entity, entity.getUniqueID());\n+            return;\n+        }\n+\n+        if (entity instanceof EntityBarbarian && barbarians.keySet().size() < horde.numberOfRaiders)\n+        {\n+            barbarians.put(entity, entity.getUniqueID());\n+            return;\n+        }\n+\n+        entity.setDead();\n+    }\n+\n+    /**\n+     * Called when an entity is removed\n+     *\n+     * @param entity\n+     */\n+    @Override\n+    public void unregisterEntity(final Entity entity)\n+    {\n+        if (!(archers.containsKey(entity) || chiefs.containsKey(entity) || barbarians.containsKey(entity)) || status != EventStatus.PROGRESSING\n+              || colony.getState() != ColonyState.ACTIVE)\n+        {\n+            return;\n+        }\n+\n+        archers.remove(entity);\n+        chiefs.remove(entity);\n+        barbarians.remove(entity);\n+\n+        // Respawn as a new entity in a loaded chunk, if not too close.\n+        final ResourceLocation entityID = net.minecraftforge.fml.common.registry.EntityRegistry.getEntry(entity.getClass()).getRegistryName();\n+        respawns.add(new Tuple<>(entityID, entity.getPosition()));\n+    }\n+\n+    @Override\n+    public void onEntityDeath(final EntityLiving entity)\n+    {\n+        if (!(entity instanceof AbstractEntityMinecoloniesMob))\n+        {\n+            return;\n+        }\n+\n+        if (entity.isDead)\n+        {\n+            Log.getLogger().warn(\"THROWS TANTRUM!\");\n+        }\n+\n+        if (entity instanceof EntityChiefBarbarian)\n+        {\n+            chiefs.remove(entity);\n+            horde.numberOfBosses--;\n+        }\n+\n+        if (entity instanceof EntityArcherBarbarian)\n+        {\n+            archers.remove(entity);\n+            horde.numberOfArchers--;\n+        }\n+\n+        if (entity instanceof EntityBarbarian)\n+        {\n+            barbarians.remove(entity);\n+            horde.numberOfRaiders--;\n+        }\n+\n+        horde.hordeSize--;\n+\n+        if (horde.hordeSize == 0)\n+        {\n+            status = EventStatus.DONE;\n+        }\n+\n+        sendHordeMessage();\n+    }\n+\n+    @Override\n+    public void onStart()\n+    {\n+        final BlockPos spawnPos = PirateEventUtils.getLoadedPositionTowardsCenter(spawnPoint, colony, MAX_SPAWN_DEVIATION, spawnPoint, MIN_CENTER_DISTANCE, 10);\n+        if (spawnPos == null)\n+        {\n+            status = EventStatus.CANCELED;\n+            return;\n+        }\n+\n+        status = EventStatus.PROGRESSING;\n+        RaiderMobUtils.spawn(BARBARIAN, horde.numberOfRaiders, spawnPos, colony.getWorld(), colony, id);\n+        RaiderMobUtils.spawn(CHIEF, horde.numberOfBosses, spawnPos, colony.getWorld(), colony, id);\n+        RaiderMobUtils.spawn(ARCHER, horde.numberOfArchers, spawnPos, colony.getWorld(), colony, id);\n+\n+        LanguageHandler.sendPlayersMessage(\n+          colony.getImportantMessageEntityPlayers(),\n+          RAID_EVENT_MESSAGE + horde.getMessageID(), colony.getName(), BlockPosUtil.calcDirection(colony.getCenter(), spawnPoint));\n+    }\n+\n+    @Override\n+    public void onUpdate()\n+    {\n+        if (horde.hordeSize == 0)\n+        {\n+            status = EventStatus.DONE;\n+        }\n+\n+        if (!respawns.isEmpty())\n+        {\n+            for (final Tuple<ResourceLocation, BlockPos> entry : respawns)\n+            {\n+                final BlockPos spawnPos = PirateEventUtils.getLoadedPositionTowardsCenter(entry.getSecond(), colony, MAX_RESPAWN_DEVIATION, spawnPoint, MIN_CENTER_DISTANCE, 10);\n+                if (spawnPos != null)\n+                {\n+                    RaiderMobUtils.spawn(entry.getFirst(), 1, spawnPos, colony.getWorld(), colony, id);\n+                }\n+            }\n+            respawns.clear();\n+            return;\n+        }\n+\n+        if (chiefs.size() + archers.size() + barbarians.size() < horde.numberOfBosses + horde.numberOfRaiders + horde.numberOfArchers)\n+        {\n+            final BlockPos spawnPos = PirateEventUtils.getLoadedPositionTowardsCenter(spawnPoint, colony, MAX_RESPAWN_DEVIATION, spawnPoint, MIN_CENTER_DISTANCE, 10);\n+            if (spawnPos != null)\n+            {\n+                RaiderMobUtils.spawn(CHIEF, horde.numberOfBosses - chiefs.size(), spawnPos, colony.getWorld(), colony, id);\n+                RaiderMobUtils.spawn(ARCHER, horde.numberOfArchers - archers.size(), spawnPos, colony.getWorld(), colony, id);\n+                RaiderMobUtils.spawn(BARBARIAN, horde.numberOfRaiders - barbarians.size(), spawnPos, colony.getWorld(), colony, id);\n+            }\n+        }\n+\n+\n+            for (final Entity entity : getEntities())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1e8f98bd7d170abb4135837fb5a5513d45b34f"}, "originalPosition": 309}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6c2c039bf89993478270b156d4640dc63731ddc", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/f6c2c039bf89993478270b156d4640dc63731ddc", "committedDate": "2020-02-25T22:26:44Z", "message": "Finish walking AI and some cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODQ1MDgw", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-366845080", "createdAt": "2020-03-01T09:11:03Z", "commit": {"oid": "f6c2c039bf89993478270b156d4640dc63731ddc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOToxMTowM1rOFwNGaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwOToxMzozNFrOFwNHJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MDYwMQ==", "bodyText": "IColonyEvent is named a bit weirdly, especially since you force it to have a spawnpoint.\nMaybe think of something that more allines with your goals.", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r386090601", "createdAt": "2020-03-01T09:11:03Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/colony/colonyEvents/IColonyEvent.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package com.minecolonies.api.colony.colonyEvents;\n+\n+import com.minecolonies.api.colony.IColony;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.EntityLiving;\n+import net.minecraft.nbt.NBTTagCompound;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Interface for colony event types.\n+ */\n+public interface IColonyEvent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c2c039bf89993478270b156d4640dc63731ddc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MDY3MA==", "bodyText": "Something like IColonyEntitySpawnEvent or IColonyGroupSpawnEvent possibly with some abstraction into an IColonySpawnEvent and IColonyEvent", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r386090670", "createdAt": "2020-03-01T09:12:00Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/colony/colonyEvents/IColonyEvent.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package com.minecolonies.api.colony.colonyEvents;\n+\n+import com.minecolonies.api.colony.IColony;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.EntityLiving;\n+import net.minecraft.nbt.NBTTagCompound;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Interface for colony event types.\n+ */\n+public interface IColonyEvent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MDYwMQ=="}, "originalCommit": {"oid": "f6c2c039bf89993478270b156d4640dc63731ddc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MDc5MQ==", "bodyText": "Also you might want to have an interface that describes an event that spawns a structure.\nSo that raid events are both spawning and have structure handling.\nThis makes expanding this system easier in the future -> Think of camps of traiders that spawn outside the city walls to trade with etc.", "url": "https://github.com/ldtteam/minecolonies/pull/4331#discussion_r386090791", "createdAt": "2020-03-01T09:13:34Z", "author": {"login": "OrionDevelopment"}, "path": "src/api/java/com/minecolonies/api/colony/colonyEvents/IColonyEvent.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package com.minecolonies.api.colony.colonyEvents;\n+\n+import com.minecolonies.api.colony.IColony;\n+import net.minecraft.entity.Entity;\n+import net.minecraft.entity.EntityLiving;\n+import net.minecraft.nbt.NBTTagCompound;\n+import net.minecraft.tileentity.TileEntity;\n+import net.minecraft.util.ResourceLocation;\n+import net.minecraft.util.math.BlockPos;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * Interface for colony event types.\n+ */\n+public interface IColonyEvent", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA5MDYwMQ=="}, "originalCommit": {"oid": "f6c2c039bf89993478270b156d4640dc63731ddc"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f091c23d1fab2fe8dc7e1bb07f2c4b4dc0aba9e9", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/f091c23d1fab2fe8dc7e1bb07f2c4b4dc0aba9e9", "committedDate": "2020-03-01T15:21:40Z", "message": "Abstract Interfaces further\nRemove structure backup file after loading backup\nMourning now has lower priority than sleeping/hiding\nImproved raider unstuck a bit further"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78304f6f6e86701f698c9551995f3704f403323a", "author": {"user": {"login": "someaddons", "name": null}}, "url": "https://github.com/ldtteam/minecolonies/commit/78304f6f6e86701f698c9551995f3704f403323a", "committedDate": "2020-03-01T15:22:21Z", "message": "Merge remote-tracking branch 'remotes/origin/version/1.12' into raiderFix112\n\n# Conflicts:\n#\tbuild.properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODc5NDQ3", "url": "https://github.com/ldtteam/minecolonies/pull/4331#pullrequestreview-366879447", "createdAt": "2020-03-01T19:11:40Z", "commit": {"oid": "78304f6f6e86701f698c9551995f3704f403323a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2272, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}