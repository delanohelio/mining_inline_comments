{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyODg0MDky", "number": 446, "title": "Jinja expression test parity", "bodyText": "For issue #444.\nThis PR adds the missing expression tests from Jinja along with their aliases, namely eq, ne, lt, lte, gt, gte, boolean, integer, float, true, false, escaped, in. The only expression test that I've omitted is callable which returns true for built-in tests and user-defined macros. We have little existing support for this sort of type checking in Jinjava.\nAlthough there are risks, I've changed some existing Jinjava behavior to match Jinja functionality.\n\nis iterable and is sequence should return true for Maps and Strings\nA PyMap should implement Iterable and iterate over the keys. This is needed for is in and is containing to work with dicts. I did not change how ObjectIterator used by the Jinjava for loop iterates over the values, which is not to spec. The ObjectIterator also fails to iterate over a string one character at a time.\nThe escape filter now returns a SafeString. This is needed for is escaped to match the spec. I'm unsure of this change because it adds a level of indirection in the unit tests.\nMembership testing should handle types more permissively. More details in the comments.\n\ncc @TheWebTech for potential doc changes", "createdAt": "2020-05-25T20:15:23Z", "url": "https://github.com/HubSpot/jinjava/pull/446", "merged": true, "mergeCommit": {"oid": "0f53edba0f2f110634e862b2a9282d6723a07dec"}, "closed": true, "closedAt": "2020-08-14T18:45:12Z", "author": {"login": "tectonic8"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj19UzgH2gAyNDIyODg0MDkyOmYwYzExYmRiZGYyZjIwYzkwNTE1Y2VhY2ViOGYzZGFlZTVhOTlkZGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqmN1IAH2gAyNDIyODg0MDkyOjBmNTNlZGJhMGYyZjExMDYzNGU4NjJiMmE5MjgyZDY3MjNhMDdkZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f0c11bdbdf2f20c90515ceaceb8f3daee5a99dde", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/f0c11bdbdf2f20c90515ceaceb8f3daee5a99dde", "committedDate": "2020-05-22T17:45:23Z", "message": "Support symbols as expression tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2663be154ee242f4ba9416dc74b8301a5c356b99", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/2663be154ee242f4ba9416dc74b8301a5c356b99", "committedDate": "2020-05-22T17:46:25Z", "message": "Add equals exp test aliases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84cb94314845f52c371dde573637319654dadee9", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/84cb94314845f52c371dde573637319654dadee9", "committedDate": "2020-05-22T17:46:47Z", "message": "Test equals exp test aliases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b158a156a55deedd54c319b53ae93485d323b181", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/b158a156a55deedd54c319b53ae93485d323b181", "committedDate": "2020-05-22T18:32:25Z", "message": "Refactor to support more symbols as expression tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d7aaf00f0b52c12462909236be20eaddd8e638d", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/6d7aaf00f0b52c12462909236be20eaddd8e638d", "committedDate": "2020-05-22T18:32:56Z", "message": "Support lt as exp test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a98020c2fd2be8b12011d97049fc945ea54c2499", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/a98020c2fd2be8b12011d97049fc945ea54c2499", "committedDate": "2020-05-22T18:33:11Z", "message": "Test comparison exp tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "059c0f6f6e8a19bff1ac2115659f39f9e0f9722e", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/059c0f6f6e8a19bff1ac2115659f39f9e0f9722e", "committedDate": "2020-05-22T18:36:43Z", "message": "Support lessthan alias"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "080b8875e19694c7a9d0fdf4040ef59193252a95", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/080b8875e19694c7a9d0fdf4040ef59193252a95", "committedDate": "2020-05-22T18:37:43Z", "message": "Support < alias"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "181bd8249e78f6785ba7c427776695423a10e170", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/181bd8249e78f6785ba7c427776695423a10e170", "committedDate": "2020-05-22T18:50:03Z", "message": "Fix docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbf09ba73b2f0733d74707ccc288ab69add16339", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/cbf09ba73b2f0733d74707ccc288ab69add16339", "committedDate": "2020-05-22T19:06:51Z", "message": "Implement comparison exp tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "673d93ceef5433b3077fb41e88b5b73b06f43a64", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/673d93ceef5433b3077fb41e88b5b73b06f43a64", "committedDate": "2020-05-22T19:07:55Z", "message": "Fix docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c884f339827f93b05c4c581b18387182b0786a54", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/c884f339827f93b05c4c581b18387182b0786a54", "committedDate": "2020-05-22T20:21:31Z", "message": "Implement boolean, integer, float exp tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecbf9143a8a59854ff553e4fc85822607095950b", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/ecbf9143a8a59854ff553e4fc85822607095950b", "committedDate": "2020-05-22T20:29:58Z", "message": "Implement true / false exp tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be04a7a0c877266199cf06c60cf09c71e0a550a3", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/be04a7a0c877266199cf06c60cf09c71e0a550a3", "committedDate": "2020-05-25T17:17:07Z", "message": "Make PyMap implement Iterable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bf3bcd7cb58b5d16e2d687ec4269ecf75ac8e18", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/5bf3bcd7cb58b5d16e2d687ec4269ecf75ac8e18", "committedDate": "2020-05-25T17:17:44Z", "message": "Rename variables for clarity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acb58787b6080264b01772b029b84a4f27534c99", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/acb58787b6080264b01772b029b84a4f27534c99", "committedDate": "2020-05-25T18:08:18Z", "message": "Allow membership to work with iterables like dicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a91f2b0051f888da94e22550791274beba4ff95", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/6a91f2b0051f888da94e22550791274beba4ff95", "committedDate": "2020-05-25T18:08:55Z", "message": "Make isIterable, isSequence to accept Strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db51ac5a9725f4489d1c8c68c72d0f82b8304fb3", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/db51ac5a9725f4489d1c8c68c72d0f82b8304fb3", "committedDate": "2020-05-25T18:19:38Z", "message": "Make membership operation more tolerant of type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adbd29bf11d126be05e1146bb5bb91c2fc0aebd6", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/adbd29bf11d126be05e1146bb5bb91c2fc0aebd6", "committedDate": "2020-05-25T18:25:30Z", "message": "Implement in exp test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01b2c343b79153342d80b0b7e70279050eeee2e3", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/01b2c343b79153342d80b0b7e70279050eeee2e3", "committedDate": "2020-05-25T19:14:19Z", "message": "Make escaping a string make it safe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41909b0c6b72aa1896432ca82cd23999c4093772", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/41909b0c6b72aa1896432ca82cd23999c4093772", "committedDate": "2020-05-25T19:14:59Z", "message": "Implement is escaped exp test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e17b08bd046bd0df5a4ad3b9292cc3f51e52638d", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/e17b08bd046bd0df5a4ad3b9292cc3f51e52638d", "committedDate": "2020-05-25T19:26:56Z", "message": "Remove unneeded null checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04084de8885a021890af3df5385218f55276696a", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/04084de8885a021890af3df5385218f55276696a", "committedDate": "2020-05-25T19:44:12Z", "message": "Make is within an alias of is in"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a4657c270a53c4dbbd6b8f388f0299a7c666bfa", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/0a4657c270a53c4dbbd6b8f388f0299a7c666bfa", "committedDate": "2020-05-25T19:57:12Z", "message": "Refactor for clarity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/8a4e36bb944158b19b046c104ab58e648dd2457a", "committedDate": "2020-05-25T19:57:39Z", "message": "Fix escape tests for type"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODY2MTMw", "url": "https://github.com/HubSpot/jinjava/pull/446#pullrequestreview-417866130", "createdAt": "2020-05-25T20:22:57Z", "commit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDoyMjo1N1rOGaJJpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDoyMjo1N1rOGaJJpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2NjA4NA==", "bodyText": "What we had before was that we would cast the value to the type of the first element of the collection, and then return on that result. So 2 is in ['one', 2] would fail because 2 gets casted to '2'.", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r430066084", "createdAt": "2020-05-25T20:22:57Z", "author": {"login": "tectonic8"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/CollectionMembershipOperator.java", "diffHunk": "@@ -7,39 +7,43 @@\n import de.odysseus.el.tree.impl.ast.AstBinary;\n import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n import de.odysseus.el.tree.impl.ast.AstNode;\n-import java.util.Collection;\n import java.util.Objects;\n import javax.el.ELException;\n import org.apache.commons.lang3.StringUtils;\n \n public class CollectionMembershipOperator extends SimpleOperator {\n \n   @Override\n-  public Object apply(TypeConverter converter, Object o1, Object o2) {\n-    if (o2 == null) {\n+  public Object apply(TypeConverter converter, Object value, Object maybeIterable) {\n+    if (maybeIterable == null) {\n       return Boolean.FALSE;\n     }\n \n-    if (CharSequence.class.isAssignableFrom(o2.getClass())) {\n-      return StringUtils.contains((CharSequence) o2, Objects.toString(o1, \"\"));\n+    if (CharSequence.class.isAssignableFrom(maybeIterable.getClass())) {\n+      return StringUtils.contains(\n+        (CharSequence) maybeIterable,\n+        Objects.toString(value, \"\")\n+      );\n     }\n \n-    if (Collection.class.isAssignableFrom(o2.getClass())) {\n-      Collection<?> collection = (Collection<?>) o2;\n-\n-      for (Object value : collection) {\n-        if (value == null) {\n-          if (o1 == null) {\n-            return Boolean.TRUE;\n+    if (maybeIterable instanceof Iterable) {\n+      for (Object element : (Iterable) maybeIterable) {\n+        if (element == null) {\n+          if (value == null) {\n+            return true;\n           }\n         } else {\n           try {\n-            return collection.contains(converter.convert(o1, value.getClass()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODY2NzQ1", "url": "https://github.com/HubSpot/jinjava/pull/446#pullrequestreview-417866745", "createdAt": "2020-05-25T20:25:40Z", "commit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDoyNTo0MVrOGaJLtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDoyNTo0MVrOGaJLtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2NjYxNA==", "bodyText": "CollectionMembershipOperator.TOKEN.getSymbol() is just EXTENSION which is non-ideal because we really just want to add IN to this set, but we can't add symbols.", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r430066614", "createdAt": "2020-05-25T20:25:41Z", "author": {"login": "tectonic8"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/ExtendedParser.java", "diffHunk": "@@ -53,6 +64,19 @@\n   static final Scanner.ExtensionToken TRUNC_DIV = TruncDivOperator.TOKEN;\n   static final Scanner.ExtensionToken POWER_OF = PowerOfOperator.TOKEN;\n \n+  static final Set<Symbol> VALID_SYMBOLS_FOR_EXP_TEST = Sets.newHashSet(\n+    IDENTIFIER,\n+    EQ,\n+    NE,\n+    LT,\n+    LE,\n+    GT,\n+    GE,\n+    TRUE,\n+    FALSE,\n+    CollectionMembershipOperator.TOKEN.getSymbol()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODY4NTk5", "url": "https://github.com/HubSpot/jinjava/pull/446#pullrequestreview-417868599", "createdAt": "2020-05-25T20:33:56Z", "commit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDozMzo1NlrOGaJRtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDozMzo1NlrOGaJRtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2ODE0OA==", "bodyText": "It is questionable to define iterables and sequences as the same thing, but this follows the Jinja spec.", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r430068148", "createdAt": "2020-05-25T20:33:56Z", "author": {"login": "tectonic8"}, "path": "src/main/java/com/hubspot/jinjava/lib/exptest/IsSequenceExpTest.java", "diffHunk": "@@ -25,9 +27,6 @@ public String getName() {\n \n   @Override\n   public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n-    return (\n-      var != null &&\n-      (var.getClass().isArray() || Iterable.class.isAssignableFrom(var.getClass()))\n-    );\n+    return isIterable(var);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODY5MzEz", "url": "https://github.com/HubSpot/jinjava/pull/446#pullrequestreview-417869313", "createdAt": "2020-05-25T20:37:06Z", "commit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDozNzowNlrOGaJUXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDozNzowNlrOGaJUXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2ODgyOA==", "bodyText": "This is a breaking change. I don't see why this should fail before, and it does not fail in Jinja.", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r430068828", "createdAt": "2020-05-25T20:37:06Z", "author": {"login": "tectonic8"}, "path": "src/test/java/com/hubspot/jinjava/lib/exptest/IsContainingExpTestTest.java", "diffHunk": "@@ -30,14 +30,14 @@ public void itPassesOnContainedValue() {\n   }\n \n   @Test\n-  public void itFailsOnNullContainedValue() {\n+  public void itPassesOnNullContainedValue() {\n     assertThat(\n         jinjava.render(\n           String.format(CONTAINING_TEMPLATE, \"[1, 2, null]\", \"null\"),\n           new HashMap<>()\n         )\n       )\n-      .isEqualTo(\"fail\");\n+      .isEqualTo(\"pass\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODY5NjU2", "url": "https://github.com/HubSpot/jinjava/pull/446#pullrequestreview-417869656", "createdAt": "2020-05-25T20:38:21Z", "commit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDozODoyMVrOGaJVdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDozODoyMVrOGaJVdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2OTEwOQ==", "bodyText": "Should passing in an object that is not an iterable simply return false or throw an exception?", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r430069109", "createdAt": "2020-05-25T20:38:21Z", "author": {"login": "tectonic8"}, "path": "src/test/java/com/hubspot/jinjava/lib/exptest/IsInExpTestTest.java", "diffHunk": "@@ -0,0 +1,53 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.assertj.core.api.Assertions;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class IsInExpTestTest {\n+  private Jinjava jinjava;\n+\n+  @Before\n+  public void setup() {\n+    jinjava = new Jinjava();\n+  }\n+\n+  @Test\n+  public void testIsInList() {\n+    assertThat(jinjava.render(\"{{ 2 is in [1, 2] }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 2 is in ['one', 2] }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 2 is in [1] }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testIsInString() {\n+    assertThat(jinjava.render(\"{{ 'b' is in 'ab' }}\", new HashMap<>())).isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'b' is in 'a' }}\", new HashMap<>())).isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testIsInDict() {\n+    assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1', 'k2':'v2'} }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ 'k2' is in {'k1':'v1'} }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+  }\n+\n+  @Test\n+  public void testNull() {\n+    assertThat(jinjava.render(\"{{ null is in [null] }}\", new HashMap<>()))\n+      .isEqualTo(\"true\");\n+    assertThat(jinjava.render(\"{{ null is in [2] }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThat(jinjava.render(\"{{ 2 is in [null] }}\", new HashMap<>()))\n+      .isEqualTo(\"false\");\n+    assertThatThrownBy(() -> jinjava.render(\"{{ 2 is in null }}\", new HashMap<>()))\n+      .hasMessageContaining(\"1st argument with value 'null' must be iterable\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODcwMTYz", "url": "https://github.com/HubSpot/jinjava/pull/446#pullrequestreview-417870163", "createdAt": "2020-05-25T20:40:46Z", "commit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDo0MDo0N1rOGaJXWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDo0MDo0N1rOGaJXWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2OTU5Mg==", "bodyText": "This is related to whether we should return false or throw an exception. In Python, 2 in None would throw an exception.", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r430069592", "createdAt": "2020-05-25T20:40:47Z", "author": {"login": "tectonic8"}, "path": "src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java", "diffHunk": "@@ -53,12 +53,6 @@ public void itFailsOnNullValueNotInSequence() {\n       .isEqualTo(\"fail\");\n   }\n \n-  @Test\n-  public void itFailsOnNullSequence() {\n-    assertThat(jinjava.render(String.format(IN_TEMPLATE, \"2\", \"null\"), new HashMap<>()))\n-      .isEqualTo(\"fail\");\n-  }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODcwMzEy", "url": "https://github.com/HubSpot/jinjava/pull/446#pullrequestreview-417870312", "createdAt": "2020-05-25T20:41:27Z", "commit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDo0MToyN1rOGaJXyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQyMDo0MToyN1rOGaJXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2OTcwNw==", "bodyText": "This is because the escape filter now returns a SafeString. Is this fine?", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r430069707", "createdAt": "2020-05-25T20:41:27Z", "author": {"login": "tectonic8"}, "path": "src/test/java/com/hubspot/jinjava/lib/filter/EscapeFilterTest.java", "diffHunk": "@@ -20,11 +20,11 @@ public void setup() {\n \n   @Test\n   public void testEscape() {\n-    assertThat(f.filter(\"\", interpreter)).isEqualTo(\"\");\n-    assertThat(f.filter(\"me & you\", interpreter)).isEqualTo(\"me &amp; you\");\n-    assertThat(f.filter(\"jared's & ted's bogus journey\", interpreter))\n+    assertThat(f.filter(\"\", interpreter).toString()).isEqualTo(\"\");\n+    assertThat(f.filter(\"me & you\", interpreter).toString()).isEqualTo(\"me &amp; you\");\n+    assertThat(f.filter(\"jared's & ted's bogus journey\", interpreter).toString())\n       .isEqualTo(\"jared&#39;s &amp; ted&#39;s bogus journey\");\n-    assertThat(f.filter(1, interpreter)).isEqualTo(\"1\");\n+    assertThat(f.filter(1, interpreter).toString()).isEqualTo(\"1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7b76f485c9fdf171d79a9b2ce6d2ce3183dcd84", "author": {"user": null}, "url": "https://github.com/HubSpot/jinjava/commit/d7b76f485c9fdf171d79a9b2ce6d2ce3183dcd84", "committedDate": "2020-05-25T20:45:36Z", "message": "Stricter access modifier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTIyNTIy", "url": "https://github.com/HubSpot/jinjava/pull/446#pullrequestreview-418122522", "createdAt": "2020-05-26T09:25:17Z", "commit": {"oid": "d7b76f485c9fdf171d79a9b2ce6d2ce3183dcd84"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOToyNToxOFrOGaV_9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwOToyNToxOFrOGaV_9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI3NjU5OA==", "bodyText": "SafeString is kind of confusing, a string being \"safe\" means that you trust the contents and that it won't be escaped.\nI'm wondering if we should also check the context for interpreter.getContext().isAutoEscape .\nSomething like !(var instanceof SafeString) && interpreter.getContext().isAutoEscape()", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r430276598", "createdAt": "2020-05-26T09:25:18Z", "author": {"login": "Joeoh"}, "path": "src/main/java/com/hubspot/jinjava/lib/exptest/IsEscapedExpTest.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.objects.SafeString;\n+\n+@JinjavaDoc(\n+  value = \"Return true if the object is marked as escaped.\",\n+  input = @JinjavaParam(value = \"object\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if 'test' is escaped %}\\n\" +\n+      \"      <!--this code will not render-->\\n\" +\n+      \"{% endif %}\"\n+    ),\n+    @JinjavaSnippet(\n+      code = \"{% if ('test'|escape) is escaped %}\\n\" +\n+      \"      <!--this code will render-->\\n\" +\n+      \"{% endif %}\"\n+    ),\n+    @JinjavaSnippet(\n+      code = \"{% if ('test'|safe) is escaped %}\\n\" +\n+      \"      <!--this code will render-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsEscapedExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"escaped\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return var instanceof SafeString;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b76f485c9fdf171d79a9b2ce6d2ce3183dcd84"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzAzODk3", "url": "https://github.com/HubSpot/jinjava/pull/446#pullrequestreview-425303897", "createdAt": "2020-06-05T13:35:36Z", "commit": {"oid": "d7b76f485c9fdf171d79a9b2ce6d2ce3183dcd84"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzozNTozNlrOGfuvjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMzo0Mzo0NFrOGfvDZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNDg3Nw==", "bodyText": "Can you check the performance of this? I believe I did this back in https://github.com/HubSpot/jinjava/pull/314/files for performance reasons but would be good to double check. We could also split this into a separate PR to be safe.", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r435924877", "createdAt": "2020-06-05T13:35:36Z", "author": {"login": "mattcoley"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/CollectionMembershipOperator.java", "diffHunk": "@@ -7,39 +7,43 @@\n import de.odysseus.el.tree.impl.ast.AstBinary;\n import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n import de.odysseus.el.tree.impl.ast.AstNode;\n-import java.util.Collection;\n import java.util.Objects;\n import javax.el.ELException;\n import org.apache.commons.lang3.StringUtils;\n \n public class CollectionMembershipOperator extends SimpleOperator {\n \n   @Override\n-  public Object apply(TypeConverter converter, Object o1, Object o2) {\n-    if (o2 == null) {\n+  public Object apply(TypeConverter converter, Object value, Object maybeIterable) {\n+    if (maybeIterable == null) {\n       return Boolean.FALSE;\n     }\n \n-    if (CharSequence.class.isAssignableFrom(o2.getClass())) {\n-      return StringUtils.contains((CharSequence) o2, Objects.toString(o1, \"\"));\n+    if (CharSequence.class.isAssignableFrom(maybeIterable.getClass())) {\n+      return StringUtils.contains(\n+        (CharSequence) maybeIterable,\n+        Objects.toString(value, \"\")\n+      );\n     }\n \n-    if (Collection.class.isAssignableFrom(o2.getClass())) {\n-      Collection<?> collection = (Collection<?>) o2;\n-\n-      for (Object value : collection) {\n-        if (value == null) {\n-          if (o1 == null) {\n-            return Boolean.TRUE;\n+    if (maybeIterable instanceof Iterable) {\n+      for (Object element : (Iterable) maybeIterable) {\n+        if (element == null) {\n+          if (value == null) {\n+            return true;\n           }\n         } else {\n           try {\n-            return collection.contains(converter.convert(o1, value.getClass()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2NjA4NA=="}, "originalCommit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyNzg3MQ==", "bodyText": "I think we need to check BigDecimal as well (see the AddFilter). BigDecimal support was added in the math filters since python supports arbitrary precision and we had to come up with a workaround for Java.", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r435927871", "createdAt": "2020-06-05T13:40:19Z", "author": {"login": "mattcoley"}, "path": "src/main/java/com/hubspot/jinjava/lib/exptest/IsFloatExpTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is a float\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if num is float %}\\n\" +\n+      \"      <!--code to render if num contains an floating point value-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsFloatExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"float\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return var instanceof Double || var instanceof Float;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b76f485c9fdf171d79a9b2ce6d2ce3183dcd84"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyODYyMg==", "bodyText": "Same here, we will have to handle arbitrarily long numbers.", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r435928622", "createdAt": "2020-06-05T13:41:32Z", "author": {"login": "mattcoley"}, "path": "src/main/java/com/hubspot/jinjava/lib/exptest/IsIntegerExpTest.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package com.hubspot.jinjava.lib.exptest;\n+\n+import com.hubspot.jinjava.doc.annotations.JinjavaDoc;\n+import com.hubspot.jinjava.doc.annotations.JinjavaParam;\n+import com.hubspot.jinjava.doc.annotations.JinjavaSnippet;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+\n+@JinjavaDoc(\n+  value = \"Return true if object is an integer or long\",\n+  input = @JinjavaParam(value = \"value\", type = \"object\", required = true),\n+  snippets = {\n+    @JinjavaSnippet(\n+      code = \"{% if num is integer %}\\n\" +\n+      \"      <!--code to render if num contains an integral value-->\\n\" +\n+      \"{% endif %}\"\n+    )\n+  }\n+)\n+public class IsIntegerExpTest implements ExpTest {\n+\n+  @Override\n+  public String getName() {\n+    return \"integer\";\n+  }\n+\n+  @Override\n+  public boolean evaluate(Object var, JinjavaInterpreter interpreter, Object... args) {\n+    return var instanceof Integer || var instanceof Long;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7b76f485c9fdf171d79a9b2ce6d2ce3183dcd84"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTkyOTk1Nw==", "bodyText": "Escaping is tricky. I would leave out the changes to the escape filter and the addition of the escaped expression test in a separate PR to be safe.", "url": "https://github.com/HubSpot/jinjava/pull/446#discussion_r435929957", "createdAt": "2020-06-05T13:43:44Z", "author": {"login": "mattcoley"}, "path": "src/test/java/com/hubspot/jinjava/lib/exptest/IsWithinExpTestTest.java", "diffHunk": "@@ -53,12 +53,6 @@ public void itFailsOnNullValueNotInSequence() {\n       .isEqualTo(\"fail\");\n   }\n \n-  @Test\n-  public void itFailsOnNullSequence() {\n-    assertThat(jinjava.render(String.format(IN_TEMPLATE, \"2\", \"null\"), new HashMap<>()))\n-      .isEqualTo(\"fail\");\n-  }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDA2OTU5Mg=="}, "originalCommit": {"oid": "8a4e36bb944158b19b046c104ab58e648dd2457a"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63c278c17addfde7eee75e60b242b941fb456c3e", "author": {"user": {"login": "tectonic8", "name": "Hartek Sabharwal"}}, "url": "https://github.com/HubSpot/jinjava/commit/63c278c17addfde7eee75e60b242b941fb456c3e", "committedDate": "2020-06-12T07:12:12Z", "message": "Revert \"Fix escape tests for type\"\n\nThis reverts commit 8a4e36bb944158b19b046c104ab58e648dd2457a."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f53e5504e44739b547f557e9db62eef278809b7", "author": {"user": {"login": "tectonic8", "name": "Hartek Sabharwal"}}, "url": "https://github.com/HubSpot/jinjava/commit/2f53e5504e44739b547f557e9db62eef278809b7", "committedDate": "2020-06-12T07:12:25Z", "message": "Revert \"Implement is escaped exp test\"\n\nThis reverts commit 41909b0c6b72aa1896432ca82cd23999c4093772."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f92816f3f7c0d5662d116f3f144812db63a85b22", "author": {"user": {"login": "tectonic8", "name": "Hartek Sabharwal"}}, "url": "https://github.com/HubSpot/jinjava/commit/f92816f3f7c0d5662d116f3f144812db63a85b22", "committedDate": "2020-06-12T07:12:30Z", "message": "Revert \"Make escaping a string make it safe\"\n\nThis reverts commit 01b2c343b79153342d80b0b7e70279050eeee2e3."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56e92df1fd32c04d3df98fd6335423e1cd6b32ed", "author": {"user": {"login": "tectonic8", "name": "Hartek Sabharwal"}}, "url": "https://github.com/HubSpot/jinjava/commit/56e92df1fd32c04d3df98fd6335423e1cd6b32ed", "committedDate": "2020-06-12T07:58:59Z", "message": "Support BigDecimal in is float and is integer exp tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f53edba0f2f110634e862b2a9282d6723a07dec", "author": {"user": {"login": "tectonic8", "name": "Hartek Sabharwal"}}, "url": "https://github.com/HubSpot/jinjava/commit/0f53edba0f2f110634e862b2a9282d6723a07dec", "committedDate": "2020-06-12T17:22:24Z", "message": "Support other integral types"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2526, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}