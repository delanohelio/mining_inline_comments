{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTkxMTAz", "number": 557, "title": "Implement EagerSetTag", "bodyText": "Part of #532\nThis PR first extracts some functionality from the SetTag into static methods to be reusable by the EagerSetTag.\nThere are a few main use cases for interpreting a set tag while in EagerExecutionMode:\n\n\nIt's a normal set tag that doesn't work with or around any deferred values.\nThis can be interpreted as normal. The new value is set onto the context.\n\n\nIt's trying to set some value to a deferred value ({% set foo = deferred + 1 %}).\nThe target value will become deferred, and the set tag will be reconstructed and included in the output to get run during a later pass. This reconstructed set tag will get registered as an EagerToken on the context.\n\n\nIt's trying to set a deferred value to something ({% set deferred = 9 %}).\nThe set tag will be reconstructed and included in the output. This reconstructed set tag will get registered as an EagerToken on the context.\n\n\nIt's trying to modify a value on the context while in protected mode.\nThe target value will become deferred, and the set tag will be reconstructed and included in the output to get run during a later pass. This reconstructed set tag will get registered as an EagerToken on the context.\n*If the execution of the right-hand side of the equation causes any changes in the context, then additional set tags will need to get prepended to the output to preserve the initial context. *This part is true for anything running in \"protected mode\" that causes changes to the values on the context scope map.\n\n\n\nThere's also the case where the set tag is executed within an imported file, and that's handled by converting it to a DoTag that performs an update on the imported map. For instance:\nfoo.jinja:\n{% set foobar = deferred %}\n\nmain.jinja:\n{% import 'foo.jinja' as foo %}\n{{ foo.foobar }}\n\nThis will become like:\n{% set foo = {} %}\n{% do foo.update({'foobar', deferred}) %}\n{{ foo.foobar }}\n\ncc @jboulter @Joeoh let me know if I missed something in this writeup or if anything is unclear.", "createdAt": "2020-12-01T21:38:17Z", "url": "https://github.com/HubSpot/jinjava/pull/557", "merged": true, "mergeCommit": {"oid": "64814506f03c7abeb62bce9778387f337a27392c"}, "closed": true, "closedAt": "2020-12-09T21:21:10Z", "author": {"login": "jasmith-hs"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhsEFMgH2gAyNTMwNTkxMTAzOmJkMGUxY2IyNzEzOTBjYWEyODIzODAxMTcyODgyYTlkYWUyMzg5MjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdklfxbAH2gAyNTMwNTkxMTAzOjZiYmM5ZTQ2YThlNzU0YTE0Y2U0NWI2MDA3Yzc5NzYzYzYwNGUyODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd0e1cb271390caa2823801172882a9dae238924", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/bd0e1cb271390caa2823801172882a9dae238924", "committedDate": "2020-11-30T21:17:01Z", "message": "Checkout eager set tag functionality from other branch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/522a0af059234b01655f0d05b6415130d0c8d746", "committedDate": "2020-11-30T22:29:13Z", "message": "Ignore failing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTU3NTI1", "url": "https://github.com/HubSpot/jinjava/pull/557#pullrequestreview-542957525", "createdAt": "2020-12-02T15:32:43Z", "commit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozMjo0M1rOH9gqww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozMjo0M1rOH9gqww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MDQxOQ==", "bodyText": "A more general question here:\nYou probably understand this better than me at this point, but why don't we implement this by manipulating the tree directly?\nThe way most compilers work is by parsing the code up into a tree (which we have), doing n passes through the tree to manipulate nodes and perform evaluation when possible. Then they write out the code in one pass. Could we do that here instead of returning a string as the output?", "url": "https://github.com/HubSpot/jinjava/pull/557#discussion_r534260419", "createdAt": "2020-12-02T15:32:43Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.lib.tag.SetTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n+\n+  public EagerSetTag() {\n+    super(new SetTag());\n+  }\n+\n+  public EagerSetTag(SetTag setTag) {\n+    super(setTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTU5MTcw", "url": "https://github.com/HubSpot/jinjava/pull/557#pullrequestreview-542959170", "createdAt": "2020-12-02T15:34:11Z", "commit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNDoxMVrOH9gvnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNDoxMVrOH9gvnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MTY2MA==", "bodyText": "did we decide on a different name for isProtectedMode? Every time I see it, I can't remember what it protects from.", "url": "https://github.com/HubSpot/jinjava/pull/557#discussion_r534261660", "createdAt": "2020-12-02T15:34:11Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.lib.tag.SetTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n+\n+  public EagerSetTag() {\n+    super(new SetTag());\n+  }\n+\n+  public EagerSetTag(SetTag setTag) {\n+    super(setTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    if (!tagToken.getHelpers().contains(\"=\")) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        tagToken.getImage(),\n+        \"Tag 'set' expects an assignment expression with '=', but was: \" +\n+        tagToken.getHelpers()\n+      );\n+    }\n+\n+    int eqPos = tagToken.getHelpers().indexOf('=');\n+    String variables = tagToken.getHelpers().substring(0, eqPos).trim();\n+\n+    String expression = tagToken.getHelpers().substring(eqPos + 1);\n+    if (interpreter.getContext().containsKey(Context.IMPORT_RESOURCE_ALIAS)) {\n+      return interpreter.render(\n+        convertSetToUpdate(variables, expression, tagToken, interpreter)\n+      );\n+    }\n+    ChunkResolver chunkResolver = new ChunkResolver(expression, tagToken, interpreter);\n+    EagerStringResult resolvedExpression = executeInChildContext(\n+      eagerInterpreter -> chunkResolver.resolveChunks(),\n+      interpreter,\n+      true\n+    );\n+    StringJoiner joiner = new StringJoiner(\" \");\n+    joiner\n+      .add(tagToken.getSymbols().getExpressionStartWithTag())\n+      .add(tagToken.getTagName())\n+      .add(variables)\n+      .add(\"=\")\n+      .add(resolvedExpression.getResult())\n+      .add(tagToken.getSymbols().getExpressionEndWithTag());\n+    StringBuilder prefixToPreserveState = new StringBuilder(\n+      interpreter.getContext().isProtectedMode()\n+        ? resolvedExpression.getPrefixToPreserveState()\n+        : \"\"\n+    );\n+    String[] varTokens = variables.split(\",\");\n+\n+    if (\n+      chunkResolver.getDeferredWords().isEmpty() &&\n+      !interpreter.getContext().isProtectedMode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c49dbeda060d2f423ce026711fd3ebc6ae9d42a", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/2c49dbeda060d2f423ce026711fd3ebc6ae9d42a", "committedDate": "2020-12-03T19:34:19Z", "message": "Merge branch 'eager-expression-node' of github.com:HubSpot/jinjava into eager-set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "00a81f12132b292626be54d0bc1c2fd903e2de45", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/00a81f12132b292626be54d0bc1c2fd903e2de45", "committedDate": "2020-12-03T19:38:04Z", "message": "Merge branch 'eager-expression-node' of github.com:HubSpot/jinjava into eager-set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7600b82cddfc432f462ac20ef476f2bcdbd9e6b6", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/7600b82cddfc432f462ac20ef476f2bcdbd9e6b6", "committedDate": "2020-12-03T19:42:17Z", "message": "Add length limiting string joiner"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e50b7068b81d5b626bbb936f71079e3fb70a4b5", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/7e50b7068b81d5b626bbb936f71079e3fb70a4b5", "committedDate": "2020-12-03T19:45:47Z", "message": "Increase max output size for eager set tag test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4278be5a0ddfb623b60ac80c6f68028928a308cc", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/4278be5a0ddfb623b60ac80c6f68028928a308cc", "committedDate": "2020-12-03T21:52:35Z", "message": "Merge branch 'eager-expression-node' of github.com:HubSpot/jinjava into eager-set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54c38e6c25733f231b4d108cd7e14c747e72d38f", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/54c38e6c25733f231b4d108cd7e14c747e72d38f", "committedDate": "2020-12-09T21:17:49Z", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bbc9e46a8e754a14ce45b6007c79763c604e283", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/6bbc9e46a8e754a14ce45b6007c79763c604e283", "committedDate": "2020-12-09T21:19:42Z", "message": "Fix protected mode name and execution mode singleton usage"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2493, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}