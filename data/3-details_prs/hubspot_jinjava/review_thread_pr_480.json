{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4OTgzMjQ4", "number": 480, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozMDozMlrOEZK4oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozMDozMlrOEZK4oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODI4MTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/el/ext/DivOperator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxODozMDozMlrOHB1eoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxODozMjo1OFrOHChB1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY4NjgxNg==", "bodyText": "@bszabo, we should be throwing an InvalidArgumentException here instead of IllegalArgumentException. Sorry for not catching that earlier.", "url": "https://github.com/HubSpot/jinjava/pull/480#discussion_r471686816", "createdAt": "2020-08-17T18:30:32Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/DivOperator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+/**\n+ * Created to allow for the detection and handling of divide-by-zero requests in EL expressions\n+ * (see PR 473 @ https://github.com/HubSpot/jinjava/pull/473)\n+ */\n+public class DivOperator extends SimpleOperator {\n+  public static final Scanner.ExtensionToken TOKEN = new Scanner.ExtensionToken(\"/\");\n+  public static final DivOperator OP = new DivOperator();\n+\n+  @Override\n+  protected Object apply(TypeConverter converter, Object a, Object b) {\n+    if (a == null || b == null) {\n+      throw new IllegalArgumentException(\"Division argument may not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887168f7e23451dc9ca6590a0f1a141b4446c5d6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQwMDM0MA==", "bodyText": "I've made the change both here and lower down in the file, where detection of a zero divisor occurs", "url": "https://github.com/HubSpot/jinjava/pull/480#discussion_r472400340", "createdAt": "2020-08-18T18:32:58Z", "author": {"login": "bszabo"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/DivOperator.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+/**\n+ * Created to allow for the detection and handling of divide-by-zero requests in EL expressions\n+ * (see PR 473 @ https://github.com/HubSpot/jinjava/pull/473)\n+ */\n+public class DivOperator extends SimpleOperator {\n+  public static final Scanner.ExtensionToken TOKEN = new Scanner.ExtensionToken(\"/\");\n+  public static final DivOperator OP = new DivOperator();\n+\n+  @Override\n+  protected Object apply(TypeConverter converter, Object a, Object b) {\n+    if (a == null || b == null) {\n+      throw new IllegalArgumentException(\"Division argument may not be null\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY4NjgxNg=="}, "originalCommit": {"oid": "887168f7e23451dc9ca6590a0f1a141b4446c5d6"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1718, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}