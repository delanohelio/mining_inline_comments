{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NDU2NTc3", "number": 390, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjozMzoxNlrODZqKsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjozOToyNVrODZqRCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjMxODU5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjozMzoxNlrOFgLDHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNjo0MTo1OFrOFiJi8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTc3NA==", "bodyText": "any reason for running this through the escape filter (e) here?", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369279774", "createdAt": "2020-01-21T22:33:16Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3MDE3OA==", "bodyText": "this was mentioned in issue #321, therefore, I used the exact same thing to test the functionality out. there is no specific reason for choosing this template. \ud83d\ude05", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369370178", "createdAt": "2020-01-22T04:58:15Z", "author": {"login": "gabru-md"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTc3NA=="}, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTMxNzIxMA==", "bodyText": "Ok, can you remove anything that's not relevant to the test then? We don't want to be testing the escape filter here.", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r371317210", "createdAt": "2020-01-27T15:45:09Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTc3NA=="}, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTM1MjMwNQ==", "bodyText": "done!", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r371352305", "createdAt": "2020-01-27T16:41:58Z", "author": {"login": "gabru-md"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTc3NA=="}, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjMxOTk5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjozMzo1MFrOFgLD9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNTo0Mjo0M1rOFgREpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTk4OQ==", "bodyText": "this could be broken out into a separate test", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369279989", "createdAt": "2020-01-21T22:33:50Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n+\t  \t\t\"{% endfor %}\";\n+\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n+\t  \n+\t  String rendered = jinjava.render(template, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3ODQ2OA==", "bodyText": "done \ud83d\udc4d", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369378468", "createdAt": "2020-01-22T05:42:43Z", "author": {"login": "gabru-md"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n+\t  \t\t\"{% endfor %}\";\n+\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n+\t  \n+\t  String rendered = jinjava.render(template, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI3OTk4OQ=="}, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjMyMzMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjozNTowOVrOFgLGBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNTo0MzoyMlrOFgRFIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MDUxOA==", "bodyText": "could you also add a test that confirms that this works for non-string values? Perhaps add 1 + 2 + 3?", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369280518", "createdAt": "2020-01-21T22:35:09Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n+\t  \t\t\"{% endfor %}\";\n+\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n+\t  \n+\t  String rendered = jinjava.render(template, context);\n+\t  assertEquals(rendered, expected);\n+\t  \n+\t  template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t  \t\t+ \"{% endfor %}\";\n+\t  expected = \"<p>1 2 3</p>\\n\"\n+\t  \t\t+ \"<p>4 5 6</p>\\n\";\n+\t  rendered = jinjava.render(template, context);\n+\t  assertEquals(rendered, expected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3ODU5Mg==", "bodyText": "I've added tests for the same.\nAlso, I've modified the ForTag.java file to accommodate the changes.", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369378592", "createdAt": "2020-01-22T05:43:22Z", "author": {"login": "gabru-md"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/ForTagTest.java", "diffHunk": "@@ -205,6 +205,27 @@ public void testForLoopWithDates() {\n     assertEquals(new PyishDate(testDate).toString(), rendered);\n   }\n \n+  @Test\n+  public void testTuplesWithPyList() {\n+\t  String template = \"{% for href, caption in [('index.html', 'Index'), ('downloads.html', 'Downloads'), ('products.html', 'Products')] %}\" + \n+\t  \t\t\"<li><a href=\\\"{{href|e}}\\\">{{caption|e}}</a></li>\\n\" + \n+\t  \t\t\"{% endfor %}\";\n+\t  String expected = \"<li><a href=\\\"index.html\\\">Index</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"downloads.html\\\">Downloads</a></li>\\n\" +\n+\t  \t\t\"<li><a href=\\\"products.html\\\">Products</a></li>\\n\";\n+\t  \n+\t  String rendered = jinjava.render(template, context);\n+\t  assertEquals(rendered, expected);\n+\t  \n+\t  template = \"{% for a, b, c in [(1,2,3), (4,5,6)] %}\"\n+\t  \t\t+ \"<p>{{a}} {{b}} {{c}}</p>\\n\"\n+\t  \t\t+ \"{% endfor %}\";\n+\t  expected = \"<p>1 2 3</p>\\n\"\n+\t  \t\t+ \"<p>4 5 6</p>\\n\";\n+\t  rendered = jinjava.render(template, context);\n+\t  assertEquals(rendered, expected);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MDUxOA=="}, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MjMzNDgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQyMjozOToyNVrOFgLMrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwNTo0NDoxOFrOFgRF5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MjIyMA==", "bodyText": "can you add a test for this case?", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369282220", "createdAt": "2020-01-21T22:39:25Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java", "diffHunk": "@@ -159,6 +162,14 @@ public String interpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n                 entryVal = entry.getValue();\n               }\n \n+              interpreter.getContext().put(loopVar, entryVal);\n+            } else if (List.class.isAssignableFrom(val.getClass())) {\n+              List<Object> entries = ((PyList) val).toList();\n+              String entryVal = null;\n+              // safety check for size\n+              if (entries.size() >= loopVarIndex) {\n+                entryVal = Objects.toString(entries.get(loopVarIndex));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM3ODc5MA==", "bodyText": "This is a safety check only but I've added tests where the jinjava.render is expected to throw an exception when there are lesses values to unpack. \ud83d\udc4d", "url": "https://github.com/HubSpot/jinjava/pull/390#discussion_r369378790", "createdAt": "2020-01-22T05:44:18Z", "author": {"login": "gabru-md"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/ForTag.java", "diffHunk": "@@ -159,6 +162,14 @@ public String interpret(TagNode tagNode, JinjavaInterpreter interpreter) {\n                 entryVal = entry.getValue();\n               }\n \n+              interpreter.getContext().put(loopVar, entryVal);\n+            } else if (List.class.isAssignableFrom(val.getClass())) {\n+              List<Object> entries = ((PyList) val).toList();\n+              String entryVal = null;\n+              // safety check for size\n+              if (entries.size() >= loopVarIndex) {\n+                entryVal = Objects.toString(entries.get(loopVarIndex));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTI4MjIyMA=="}, "originalCommit": {"oid": "c166c881c601bd4ebb2357ca57cae9031f6d3147"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1754, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}