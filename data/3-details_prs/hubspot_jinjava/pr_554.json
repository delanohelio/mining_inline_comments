{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5ODYxMTgz", "number": 554, "title": "Implement EagerForTag", "bodyText": "Part of #532\nThis PR adds the functionality to eagerly execute a for tag. Some refactoring is done to the ForTag to allow for code to be reused in the EagerForTag as well.\nIf the expression to determine the loop variable(s) has a deferred value in it, then the eagerInterpret() method will be called. The loop variable(s) become deferred variables as their values are not yet known and the image of the for tag is preserved, and the children are executed in a protected mode to prevent modification to the context. This allows for the for tag to be re-evaluated during a subsequent rendering pass while retaining the proper end result.\nIn the scenario where the loop variable can be determined, but there are contents within the for loop that end up getting eagerly executed, then the default ForTag behaviour is run as the output from those children is safely preserved by the eager execution architecture.\n\nExamples:\n{% set foo = 'hello' %}\n{% for item in deferred %}\n{{ item }}\n{% print foo %}\n{% endfor %}\n\nSince {% print foo %} doesn't depend on the deferred value, with eager execution it can be pre-rendered like:\n{% for item in deferred %}\n{{ item }}\nhello\n{% endfor %}\n\nOf course, if it was instead {% print item %}, it wouldn't get evaluated, like {{ item }}.\nAlso with resolved = ['piece', 'chunk', 'bite']:\n{% for item in resolved %}\nA {{ item }} of {{ deferred }}.\n{% endfor %}\n\ncould get pre-rendered to:\nA piece of {{ deferred }}.\nA chunk of {{ deferred }}.\nA bite of {{ deferred }}.\n\ncc @jboulter @Joeoh", "createdAt": "2020-11-30T23:01:02Z", "url": "https://github.com/HubSpot/jinjava/pull/554", "merged": true, "mergeCommit": {"oid": "445b2331005395341cfdf7dd3e7c6250e799629b"}, "closed": true, "closedAt": "2020-12-09T21:13:44Z", "author": {"login": "jasmith-hs"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdhr0NkgH2gAyNTI5ODYxMTgzOmMyODQxN2JhZmI0YTk2MmJkNTdlYzQ3ZjM0Yzg4YzVlMjljODQ1ZDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdklZIngH2gAyNTI5ODYxMTgzOjZjODFlZGNhNTIyYjQ1MDA5ODI0Yjk3MWUyYjA5YjY2Yzk0NGUyNGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c28417bafb4a962bd57ec47f34c88c5e29c845d5", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/c28417bafb4a962bd57ec47f34c88c5e29c845d5", "committedDate": "2020-11-30T20:59:41Z", "message": "Checkout eager for tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "597dbe74b7196a15955446d38247ebb9dc9e7f63", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/597dbe74b7196a15955446d38247ebb9dc9e7f63", "committedDate": "2020-11-30T21:01:27Z", "message": "Unignore passing tests for eager for tag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjk1MjEx", "url": "https://github.com/HubSpot/jinjava/pull/554#pullrequestreview-541695211", "createdAt": "2020-12-01T09:19:57Z", "commit": {"oid": "597dbe74b7196a15955446d38247ebb9dc9e7f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToxOTo1N1rOH8gHsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToxOTo1N1rOH8gHsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIwMjg2NA==", "bodyText": "Maybe join this string just once", "url": "https://github.com/HubSpot/jinjava/pull/554#discussion_r533202864", "createdAt": "2020-12-01T09:19:57Z", "author": {"login": "Joeoh"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.ForTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import com.hubspot.jinjava.util.HelperStringTokenizer;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+public class EagerForTag extends EagerTagDecorator<ForTag> {\n+\n+  public EagerForTag() {\n+    super(new ForTag());\n+  }\n+\n+  public EagerForTag(ForTag forTag) {\n+    super(forTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    List<String> helperTokens = new HelperStringTokenizer(\n+      ForTag.getWhitespaceAdjustedHelpers(tagToken.getHelpers())\n+    )\n+      .splitComma(true)\n+      .allTokens();\n+    List<String> loopVars = getTag().getLoopVars(helperTokens);\n+    if (loopVars.size() >= helperTokens.size()) {\n+      throw new TemplateSyntaxException(\n+        tagToken.getHelpers().trim(),\n+        \"Tag 'for' expects valid 'in' clause, got: \" + tagToken.getHelpers(),\n+        tagToken.getLineNumber(),\n+        tagToken.getStartPosition()\n+      );\n+    }\n+\n+    String loopExpression = getTag().getLoopExpression(helperTokens, loopVars);\n+    ChunkResolver chunkResolver = new ChunkResolver(\n+      loopExpression,\n+      tagToken,\n+      interpreter\n+    );\n+\n+    StringJoiner joiner = new StringJoiner(\" \");\n+    joiner\n+      .add(tagToken.getSymbols().getExpressionStartWithTag())\n+      .add(tagToken.getTagName())\n+      .add(String.join(\", \", loopVars))\n+      .add(\"in\")\n+      .add(chunkResolver.resolveChunks())\n+      .add(tagToken.getSymbols().getExpressionEndWithTag());\n+    String newlyDeferredFunctionImages = reconstructFromContextBeforeDeferring(\n+      chunkResolver.getDeferredWords(),\n+      interpreter\n+    );\n+\n+    interpreter\n+      .getContext()\n+      .handleEagerToken(\n+        new EagerToken(\n+          new TagToken(\n+            joiner.toString(),\n+            tagToken.getLineNumber(),\n+            tagToken.getStartPosition(),\n+            tagToken.getSymbols()\n+          ),\n+          chunkResolver.getDeferredWords(),\n+          new HashSet<>(loopVars)\n+        )\n+      );\n+    return (newlyDeferredFunctionImages + joiner.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597dbe74b7196a15955446d38247ebb9dc9e7f63"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNzAzMjUx", "url": "https://github.com/HubSpot/jinjava/pull/554#pullrequestreview-541703251", "createdAt": "2020-12-01T09:24:09Z", "commit": {"oid": "597dbe74b7196a15955446d38247ebb9dc9e7f63"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTQxMDcy", "url": "https://github.com/HubSpot/jinjava/pull/554#pullrequestreview-542941072", "createdAt": "2020-12-02T15:17:35Z", "commit": {"oid": "597dbe74b7196a15955446d38247ebb9dc9e7f63"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToxNzozNVrOH9f6cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToxNzozNVrOH9f6cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI0ODA0OQ==", "bodyText": "There's a guava joiner which I see used more commonly. One advantage is that you can declare it statically. I'm not sure if it's worth changing to that one.", "url": "https://github.com/HubSpot/jinjava/pull/554#discussion_r534248049", "createdAt": "2020-12-02T15:17:35Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerForTag.java", "diffHunk": "@@ -0,0 +1,76 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.ForTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import com.hubspot.jinjava.util.HelperStringTokenizer;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.StringJoiner;\n+\n+public class EagerForTag extends EagerTagDecorator<ForTag> {\n+\n+  public EagerForTag() {\n+    super(new ForTag());\n+  }\n+\n+  public EagerForTag(ForTag forTag) {\n+    super(forTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    List<String> helperTokens = new HelperStringTokenizer(\n+      ForTag.getWhitespaceAdjustedHelpers(tagToken.getHelpers())\n+    )\n+      .splitComma(true)\n+      .allTokens();\n+    List<String> loopVars = getTag().getLoopVars(helperTokens);\n+    if (loopVars.size() >= helperTokens.size()) {\n+      throw new TemplateSyntaxException(\n+        tagToken.getHelpers().trim(),\n+        \"Tag 'for' expects valid 'in' clause, got: \" + tagToken.getHelpers(),\n+        tagToken.getLineNumber(),\n+        tagToken.getStartPosition()\n+      );\n+    }\n+\n+    String loopExpression = getTag().getLoopExpression(helperTokens, loopVars);\n+    ChunkResolver chunkResolver = new ChunkResolver(\n+      loopExpression,\n+      tagToken,\n+      interpreter\n+    );\n+\n+    StringJoiner joiner = new StringJoiner(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597dbe74b7196a15955446d38247ebb9dc9e7f63"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4a08fd0a50d52e70ecabfb168e5e07651b1c410", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/d4a08fd0a50d52e70ecabfb168e5e07651b1c410", "committedDate": "2020-12-03T19:55:51Z", "message": "Merge branch 'eager-expression-node' of github.com:HubSpot/jinjava into eager-for"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a538667c14d05da3fb4dcec222f7f8d29c98da75", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/a538667c14d05da3fb4dcec222f7f8d29c98da75", "committedDate": "2020-12-03T20:05:40Z", "message": "Add length limiting in eager for tag"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18a67fe9b1d88acf0338d2278872002bd8e099a3", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/18a67fe9b1d88acf0338d2278872002bd8e099a3", "committedDate": "2020-12-09T17:51:28Z", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-for"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55c99a07ba989a59965cacd34238c8d7c13057db", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/55c99a07ba989a59965cacd34238c8d7c13057db", "committedDate": "2020-12-09T21:11:03Z", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-for"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c81edca522b45009824b971e2b09b66c944e24b", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/6c81edca522b45009824b971e2b09b66c944e24b", "committedDate": "2020-12-09T21:12:27Z", "message": "Use execution mode singleton"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2487, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}