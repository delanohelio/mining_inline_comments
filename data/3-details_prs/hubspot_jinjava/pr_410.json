{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MTE3NDY4", "number": 410, "title": "adds support for Custom Token Scanner Symbols", "bodyText": "This pull request aims at implementing the Custom Token Symbols class for Jinjava. The goal is to allow the user to specify the tokens that he/she wants to use. It can be extending using the TokenScannerSymbols abstract class and then filling the abstract methods.\nA few lines inside the tree package have been changed from switch-case to if-else since switch-case allows only constant expressions to be used with them. The changes to the tests which were failing initially due to the change have also been made and it should work fine now. Furthermore a JUnit test file has also been added in support of the changes made.\nrelated issue: #402\n@KidsDontPlay perhaps this solves your problem.\ncheers!", "createdAt": "2020-03-10T12:57:26Z", "url": "https://github.com/HubSpot/jinjava/pull/410", "merged": true, "mergeCommit": {"oid": "9c161240e5554782f4af20305989dd9a92dc7cd4"}, "closed": true, "closedAt": "2020-03-27T14:02:40Z", "author": {"login": "gabru-md"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMSoSQAH2gAyMzg2MTE3NDY4OjE0MDg2YTZjNmRlMTNlYjkxNTA4NGFlNmNiYmI5MWFiMmNlZjg0YWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRxM9hAFqTM4Mjg4NDY2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "14086a6c6de13eb915084ae6cbbb91ab2cef84ac", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/14086a6c6de13eb915084ae6cbbb91ab2cef84ac", "committedDate": "2020-03-10T13:35:28Z", "message": "adds support for Custom Token Scanner Symbols"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40674ed460cdb44fc934d87281122d6d53b25cea", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/40674ed460cdb44fc934d87281122d6d53b25cea", "committedDate": "2020-03-10T12:50:18Z", "message": "adds support for Custom Token Scanner Symbols"}, "afterCommit": {"oid": "14086a6c6de13eb915084ae6cbbb91ab2cef84ac", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/14086a6c6de13eb915084ae6cbbb91ab2cef84ac", "committedDate": "2020-03-10T13:35:28Z", "message": "adds support for Custom Token Scanner Symbols"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NTc1NjMz", "url": "https://github.com/HubSpot/jinjava/pull/410#pullrequestreview-374575633", "createdAt": "2020-03-13T20:02:35Z", "commit": {"oid": "96ec8ef273ed63c800194a845116ea8cd4744760"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDowMjozNVrOF2QuAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QyMDowODoyMlrOF2Q2Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MTM0Ng==", "bodyText": "Looks like this should use the scanner symbols as well.", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392441346", "createdAt": "2020-03-13T20:02:35Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/ExpressionNode.java", "diffHunk": "@@ -51,7 +51,10 @@ public OutputNode render(JinjavaInterpreter interpreter) {\n     if (interpreter.getConfig().isNestedInterpretationEnabled()) {\n       if (\n         !StringUtils.equals(result, master.getImage()) &&\n-        (StringUtils.contains(result, \"{{\") || StringUtils.contains(result, \"{%\"))\n+        (\n+          StringUtils.contains(result, \"{{\") ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96ec8ef273ed63c800194a845116ea8cd4744760"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MTY4Mg==", "bodyText": "Use TOKEN_NOTE_CHAR here?", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392441682", "createdAt": "2020-03-13T20:03:33Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/TreeParser.java", "diffHunk": "@@ -89,40 +89,38 @@ public Node buildTree() {\n   private Node nextNode() {\n     Token token = scanner.next();\n \n-    switch (token.getType()) {\n-      case TOKEN_FIXED:\n-        return text((TextToken) token);\n-      case TOKEN_EXPR_START:\n-        return expression((ExpressionToken) token);\n-      case TOKEN_TAG:\n-        return tag((TagToken) token);\n-      case TOKEN_NOTE:\n-        if (!token.getImage().endsWith(\"#}\")) {\n-          interpreter.addError(\n-            new TemplateError(\n-              ErrorType.WARNING,\n-              ErrorReason.SYNTAX_ERROR,\n-              ErrorItem.TAG,\n-              \"Unclosed comment\",\n-              \"comment\",\n-              token.getLineNumber(),\n-              token.getStartPosition(),\n-              null\n-            )\n-          );\n-        }\n-        break;\n-      default:\n+    if (token.getType() == symbols.TOKEN_FIXED()) return text(\n+      (TextToken) token\n+    ); else if (\n+      token.getType() == symbols.TOKEN_EXPR_START()\n+    ) return expression((ExpressionToken) token); else if (\n+      token.getType() == symbols.TOKEN_TAG()\n+    ) return tag((TagToken) token); else if (\n+      token.getType() == symbols.TOKEN_NOTE()\n+    ) {\n+      if (!token.getImage().endsWith(\"#}\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96ec8ef273ed63c800194a845116ea8cd4744760"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MTk3Mg==", "bodyText": "should be getTokenPrefix(). Same for the others below.", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392441972", "createdAt": "2020-03-13T20:04:25Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/DefaultTokenScannerSymbols.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.hubspot.jinjava.tree.parse;\n+\n+public class DefaultTokenScannerSymbols extends TokenScannerSymbols {\n+  char TOKEN_PREFIX_CHAR = '{';\n+  char TOKEN_POSTFIX_CHAR = '}';\n+  char TOKEN_FIXED_CHAR = 0;\n+  char TOKEN_NOTE_CHAR = '#';\n+  char TOKEN_TAG_CHAR = '%';\n+  char TOKEN_EXPR_START_CHAR = '{';\n+  char TOKEN_EXPR_END_CHAR = '}';\n+  char TOKEN_NEWLINE_CHAR = '\\n';\n+  char TOKEN_TRIM_CHAR = '-';\n+\n+  @Override\n+  public char TOKEN_PREFIX_CHAR() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96ec8ef273ed63c800194a845116ea8cd4744760"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MjQ0OQ==", "bodyText": "else if should be on a new line", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392442449", "createdAt": "2020-03-13T20:05:42Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/Token.java", "diffHunk": "@@ -93,22 +88,33 @@ public String toString() {\n \n   public abstract int getType();\n \n-  static Token newToken(int tokenKind, String image, int lineNumber, int startPosition) {\n-    switch (tokenKind) {\n-      case TOKEN_FIXED:\n-        return new TextToken(image, lineNumber, startPosition);\n-      case TOKEN_NOTE:\n-        return new NoteToken(image, lineNumber, startPosition);\n-      case TOKEN_EXPR_START:\n-        return new ExpressionToken(image, lineNumber, startPosition);\n-      case TOKEN_TAG:\n-        return new TagToken(image, lineNumber, startPosition);\n-      default:\n-        throw new UnexpectedTokenException(\n-          String.valueOf((char) tokenKind),\n-          lineNumber,\n-          startPosition\n-        );\n-    }\n+  static Token newToken(\n+    int tokenKind,\n+    TokenScannerSymbols symbols,\n+    String image,\n+    int lineNumber,\n+    int startPosition\n+  ) {\n+    if (tokenKind == symbols.TOKEN_FIXED()) return new TextToken(\n+      image,\n+      lineNumber,\n+      startPosition\n+    ); else if (tokenKind == symbols.TOKEN_NOTE()) return new NoteToken(\n+      image,\n+      lineNumber,\n+      startPosition\n+    ); else if (\n+      tokenKind == symbols.TOKEN_EXPR_START()\n+    ) return new ExpressionToken(image, lineNumber, startPosition); else if (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96ec8ef273ed63c800194a845116ea8cd4744760"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0Mjc0MA==", "bodyText": "please always wrap bodies of if statements in { }", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392442740", "createdAt": "2020-03-13T20:06:23Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/Token.java", "diffHunk": "@@ -93,22 +88,33 @@ public String toString() {\n \n   public abstract int getType();\n \n-  static Token newToken(int tokenKind, String image, int lineNumber, int startPosition) {\n-    switch (tokenKind) {\n-      case TOKEN_FIXED:\n-        return new TextToken(image, lineNumber, startPosition);\n-      case TOKEN_NOTE:\n-        return new NoteToken(image, lineNumber, startPosition);\n-      case TOKEN_EXPR_START:\n-        return new ExpressionToken(image, lineNumber, startPosition);\n-      case TOKEN_TAG:\n-        return new TagToken(image, lineNumber, startPosition);\n-      default:\n-        throw new UnexpectedTokenException(\n-          String.valueOf((char) tokenKind),\n-          lineNumber,\n-          startPosition\n-        );\n-    }\n+  static Token newToken(\n+    int tokenKind,\n+    TokenScannerSymbols symbols,\n+    String image,\n+    int lineNumber,\n+    int startPosition\n+  ) {\n+    if (tokenKind == symbols.TOKEN_FIXED()) return new TextToken(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96ec8ef273ed63c800194a845116ea8cd4744760"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjQ0MzQwMg==", "bodyText": "same comment as before", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r392443402", "createdAt": "2020-03-13T20:08:22Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java", "diffHunk": "@@ -15,24 +15,59 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-public interface TokenScannerSymbols {\n-  char TOKEN_PREFIX_CHAR = '{';\n-  char TOKEN_POSTFIX_CHAR = '}';\n-  char TOKEN_FIXED_CHAR = 0;\n-  char TOKEN_NOTE_CHAR = '#';\n-  char TOKEN_TAG_CHAR = '%';\n-  char TOKEN_EXPR_START_CHAR = '{';\n-  char TOKEN_EXPR_END_CHAR = '}';\n-  char TOKEN_NEWLINE_CHAR = '\\n';\n-  char TOKEN_TRIM_CHAR = '-';\n-\n-  int TOKEN_PREFIX = TOKEN_PREFIX_CHAR;\n-  int TOKEN_POSTFIX = TOKEN_POSTFIX_CHAR;\n-  int TOKEN_FIXED = TOKEN_FIXED_CHAR;\n-  int TOKEN_NOTE = TOKEN_NOTE_CHAR;\n-  int TOKEN_TAG = TOKEN_TAG_CHAR;\n-  int TOKEN_EXPR_START = TOKEN_EXPR_START_CHAR;\n-  int TOKEN_EXPR_END = TOKEN_EXPR_END_CHAR;\n-  int TOKEN_NEWLINE = TOKEN_NEWLINE_CHAR;\n-  int TOKEN_TRIM = TOKEN_TRIM_CHAR;\n+public abstract class TokenScannerSymbols {\n+\n+  public abstract char TOKEN_PREFIX_CHAR();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96ec8ef273ed63c800194a845116ea8cd4744760"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10bdb169739257157e3e0bf6884116f048990c9f", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/10bdb169739257157e3e0bf6884116f048990c9f", "committedDate": "2020-03-14T06:55:20Z", "message": "renames functions + review changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "96ec8ef273ed63c800194a845116ea8cd4744760", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/96ec8ef273ed63c800194a845116ea8cd4744760", "committedDate": "2020-03-11T04:58:46Z", "message": "removes inconsistency in abstract methods return types"}, "afterCommit": {"oid": "10bdb169739257157e3e0bf6884116f048990c9f", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/10bdb169739257157e3e0bf6884116f048990c9f", "committedDate": "2020-03-14T06:55:20Z", "message": "renames functions + review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59", "committedDate": "2020-03-17T15:47:01Z", "message": "ran mvn clean verify + diff applied"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MjI0NjM3", "url": "https://github.com/HubSpot/jinjava/pull/410#pullrequestreview-376224637", "createdAt": "2020-03-17T16:55:03Z", "commit": {"oid": "f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1NTowM1rOF3lUUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjo1Nzo1NFrOF3lbrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyNzQwOA==", "bodyText": "Could you create these once and make it accessible from the TokenScannerSymbols class?", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r393827408", "createdAt": "2020-03-17T16:55:03Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/ExpressionNode.java", "diffHunk": "@@ -48,10 +49,23 @@ public OutputNode render(JinjavaInterpreter interpreter) {\n \n     String result = Objects.toString(var, \"\");\n \n+    TokenScannerSymbols symbols = interpreter.getConfig().getTokenScannerSymbols();\n+    String expressionBegins = new StringBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyODY0MQ==", "bodyText": "this can also be defined once.", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r393828641", "createdAt": "2020-03-17T16:56:54Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/TreeParser.java", "diffHunk": "@@ -89,39 +87,41 @@ public Node buildTree() {\n   private Node nextNode() {\n     Token token = scanner.next();\n \n-    switch (token.getType()) {\n-      case TOKEN_FIXED:\n-        return text((TextToken) token);\n-      case TOKEN_EXPR_START:\n-        return expression((ExpressionToken) token);\n-      case TOKEN_TAG:\n-        return tag((TagToken) token);\n-      case TOKEN_NOTE:\n-        if (!token.getImage().endsWith(\"#}\")) {\n-          interpreter.addError(\n-            new TemplateError(\n-              ErrorType.WARNING,\n-              ErrorReason.SYNTAX_ERROR,\n-              ErrorItem.TAG,\n-              \"Unclosed comment\",\n-              \"comment\",\n-              token.getLineNumber(),\n-              token.getStartPosition(),\n-              null\n-            )\n-          );\n-        }\n-        break;\n-      default:\n+    if (token.getType() == symbols.getTokenFixed()) {\n+      return text((TextToken) token);\n+    } else if (token.getType() == symbols.getTokenExprStart()) {\n+      return expression((ExpressionToken) token);\n+    } else if (token.getType() == symbols.getTokenTag()) {\n+      return tag((TagToken) token);\n+    } else if (token.getType() == symbols.getTokenNote()) {\n+      String commentClosed = new StringBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgyOTI5NQ==", "bodyText": "all of these start with getToken so the Token part is redundant. Can you remove that part?", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r393829295", "createdAt": "2020-03-17T16:57:54Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/DefaultTokenScannerSymbols.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.hubspot.jinjava.tree.parse;\n+\n+public class DefaultTokenScannerSymbols extends TokenScannerSymbols {\n+  char TOKEN_PREFIX_CHAR = '{';\n+  char TOKEN_POSTFIX_CHAR = '}';\n+  char TOKEN_FIXED_CHAR = 0;\n+  char TOKEN_NOTE_CHAR = '#';\n+  char TOKEN_TAG_CHAR = '%';\n+  char TOKEN_EXPR_START_CHAR = '{';\n+  char TOKEN_EXPR_END_CHAR = '}';\n+  char TOKEN_NEWLINE_CHAR = '\\n';\n+  char TOKEN_TRIM_CHAR = '-';\n+\n+  @Override\n+  public char getTokenPrefixChar() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f51d0906834cbe45c11c88ed1f3d56b2fa0d5e59"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce4d826b9a0f30ea65498c6d9dcfd77c2559aa8b", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/ce4d826b9a0f30ea65498c6d9dcfd77c2559aa8b", "committedDate": "2020-03-18T18:14:55Z", "message": "adds changes to TokenScannerSymbols"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/018d77d8f7bd78b47d3c125c7f617c3328c65839", "committedDate": "2020-03-18T18:32:55Z", "message": "reformats CustomTokenScannerSymbolsTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzQ3Mjcx", "url": "https://github.com/HubSpot/jinjava/pull/410#pullrequestreview-377747271", "createdAt": "2020-03-19T14:01:44Z", "commit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowMTo0NVrOF4vxzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxMDo0N1rOF4wK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzM3Mg==", "bodyText": "unnecessary variables as they are only used once.", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395047372", "createdAt": "2020-03-19T14:01:45Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/ExpressionNode.java", "diffHunk": "@@ -48,10 +49,17 @@ public OutputNode render(JinjavaInterpreter interpreter) {\n \n     String result = Objects.toString(var, \"\");\n \n+    TokenScannerSymbols symbols = interpreter.getConfig().getTokenScannerSymbols();\n+    String expressionBegins = symbols.getExpressionStart();\n+    String expressionWithTag = symbols.getExpressionStartWithTag();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0ODE5Mw==", "bodyText": "can you add a method to construct this string once as well?", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395048193", "createdAt": "2020-03-19T14:02:50Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/TagNode.java", "diffHunk": "@@ -108,24 +108,25 @@ public String reconstructImage() {\n   }\n \n   public String reconstructEnd() {\n+    TokenScannerSymbols symbols = JinjavaInterpreter\n+      .getCurrent()\n+      .getConfig()\n+      .getTokenScannerSymbols();\n     StringBuilder stringBuilder = new StringBuilder();\n-    stringBuilder\n-      .append(TokenScannerSymbols.TOKEN_EXPR_START_CHAR)\n-      .append(TokenScannerSymbols.TOKEN_TAG_CHAR);\n+    stringBuilder.append(symbols.getExprStartChar()).append(symbols.getTagChar());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0ODkyMA==", "bodyText": "same here", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395048920", "createdAt": "2020-03-19T14:03:55Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/TagNode.java", "diffHunk": "@@ -108,24 +108,25 @@ public String reconstructImage() {\n   }\n \n   public String reconstructEnd() {\n+    TokenScannerSymbols symbols = JinjavaInterpreter\n+      .getCurrent()\n+      .getConfig()\n+      .getTokenScannerSymbols();\n     StringBuilder stringBuilder = new StringBuilder();\n-    stringBuilder\n-      .append(TokenScannerSymbols.TOKEN_EXPR_START_CHAR)\n-      .append(TokenScannerSymbols.TOKEN_TAG_CHAR);\n+    stringBuilder.append(symbols.getExprStartChar()).append(symbols.getTagChar());\n     if (\n       getChildren() != null &&\n       !getChildren().isEmpty() &&\n       getChildren().getLast().getMaster().isRightTrim()\n     ) {\n-      stringBuilder.append(TokenScannerSymbols.TOKEN_TRIM_CHAR);\n+      stringBuilder.append(symbols.getTrimChar());\n     }\n     stringBuilder.append(\" \").append(getEndName()).append(\" \");\n     if (getMaster().isRightTrimAfterEnd()) {\n-      stringBuilder.append(TokenScannerSymbols.TOKEN_TRIM_CHAR);\n+      stringBuilder.append(symbols.getTrimChar());\n     }\n-    stringBuilder\n-      .append(TokenScannerSymbols.TOKEN_TAG_CHAR)\n-      .append(TokenScannerSymbols.TOKEN_EXPR_END_CHAR);\n+\n+    stringBuilder.append(symbols.getTagChar()).append(symbols.getExprEndChar());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDA2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final int TOKEN_TAG;\n          \n          \n            \n              private final int tokenTag;\n          \n      \n    \n    \n  \n\nonly static variables should be in upper case.", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395050060", "createdAt": "2020-03-19T14:05:36Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/TagToken.java", "diffHunk": "@@ -15,20 +15,22 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-import static com.hubspot.jinjava.tree.parse.TokenScannerSymbols.TOKEN_TAG;\n-\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n \n public class TagToken extends Token {\n   private static final long serialVersionUID = -4927751270481832992L;\n+  private final int TOKEN_TAG;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDI0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TOKEN_TAG =\n          \n          \n            \n                tokenTag =", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395050242", "createdAt": "2020-03-19T14:05:50Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/TagToken.java", "diffHunk": "@@ -15,20 +15,22 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-import static com.hubspot.jinjava.tree.parse.TokenScannerSymbols.TOKEN_TAG;\n-\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n import com.hubspot.jinjava.util.WhitespaceUtils;\n \n public class TagToken extends Token {\n   private static final long serialVersionUID = -4927751270481832992L;\n+  private final int TOKEN_TAG;\n \n   private String tagName;\n   private String rawTagName;\n   private String helpers;\n \n   public TagToken(String image, int lineNumber, int startPosition) {\n     super(image, lineNumber, startPosition);\n+    TOKEN_TAG =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDM1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private final int TOKEN_FIXED;\n          \n          \n            \n              private final int tokenFixed;", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395050356", "createdAt": "2020-03-19T14:06:00Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/TextToken.java", "diffHunk": "@@ -15,15 +15,17 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-import static com.hubspot.jinjava.tree.parse.TokenScannerSymbols.TOKEN_FIXED;\n-\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import org.apache.commons.lang3.StringUtils;\n \n public class TextToken extends Token {\n   private static final long serialVersionUID = -6168990984496468543L;\n+  private final int TOKEN_FIXED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MDU0OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                TOKEN_FIXED =\n          \n          \n            \n                tokenFixed =", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395050548", "createdAt": "2020-03-19T14:06:16Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/TextToken.java", "diffHunk": "@@ -15,15 +15,17 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-import static com.hubspot.jinjava.tree.parse.TokenScannerSymbols.TOKEN_FIXED;\n-\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n import org.apache.commons.lang3.StringUtils;\n \n public class TextToken extends Token {\n   private static final long serialVersionUID = -6168990984496468543L;\n+  private final int TOKEN_FIXED;\n \n   public TextToken(String image, int lineNumber, int startPosition) {\n     super(image, lineNumber, startPosition);\n+    TOKEN_FIXED =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MjY4Mw==", "bodyText": "it would good to fill this out with all the other starting and closing sequences that we'll eventually need.", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395052683", "createdAt": "2020-03-19T14:09:11Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java", "diffHunk": "@@ -15,24 +15,86 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-public interface TokenScannerSymbols {\n-  char TOKEN_PREFIX_CHAR = '{';\n-  char TOKEN_POSTFIX_CHAR = '}';\n-  char TOKEN_FIXED_CHAR = 0;\n-  char TOKEN_NOTE_CHAR = '#';\n-  char TOKEN_TAG_CHAR = '%';\n-  char TOKEN_EXPR_START_CHAR = '{';\n-  char TOKEN_EXPR_END_CHAR = '}';\n-  char TOKEN_NEWLINE_CHAR = '\\n';\n-  char TOKEN_TRIM_CHAR = '-';\n-\n-  int TOKEN_PREFIX = TOKEN_PREFIX_CHAR;\n-  int TOKEN_POSTFIX = TOKEN_POSTFIX_CHAR;\n-  int TOKEN_FIXED = TOKEN_FIXED_CHAR;\n-  int TOKEN_NOTE = TOKEN_NOTE_CHAR;\n-  int TOKEN_TAG = TOKEN_TAG_CHAR;\n-  int TOKEN_EXPR_START = TOKEN_EXPR_START_CHAR;\n-  int TOKEN_EXPR_END = TOKEN_EXPR_END_CHAR;\n-  int TOKEN_NEWLINE = TOKEN_NEWLINE_CHAR;\n-  int TOKEN_TRIM = TOKEN_TRIM_CHAR;\n+public abstract class TokenScannerSymbols {\n+  private String expressionStart = null;\n+  private String expressionStartWithTag = null;\n+  private String closingComment = null;\n+\n+  public abstract char getPrefixChar();\n+\n+  public abstract char getPostfixChar();\n+\n+  public abstract char getFixedChar();\n+\n+  public abstract char getNoteChar();\n+\n+  public abstract char getTagChar();\n+\n+  public abstract char getExprStartChar();\n+\n+  public abstract char getExprEndChar();\n+\n+  public abstract char getNewlineChar();\n+\n+  public abstract char getTrimChar();\n+\n+  public int getPrefix() {\n+    return getPrefixChar();\n+  }\n+\n+  public int getPostfix() {\n+    return getPostfixChar();\n+  }\n+\n+  public int getFixed() {\n+    return getFixedChar();\n+  }\n+\n+  public int getNote() {\n+    return getNoteChar();\n+  }\n+\n+  public int getTag() {\n+    return getTagChar();\n+  }\n+\n+  public int getExprStart() {\n+    return getExprStartChar();\n+  }\n+\n+  public int getExprEnd() {\n+    return getExprEndChar();\n+  }\n+\n+  public int getNewline() {\n+    return getNewlineChar();\n+  }\n+\n+  public int getTrim() {\n+    return getTrimChar();\n+  }\n+\n+  public String getExpressionStart() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzAxMw==", "bodyText": "why are all these methods that just call abstract methods needed?", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395053013", "createdAt": "2020-03-19T14:09:42Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java", "diffHunk": "@@ -15,24 +15,86 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-public interface TokenScannerSymbols {\n-  char TOKEN_PREFIX_CHAR = '{';\n-  char TOKEN_POSTFIX_CHAR = '}';\n-  char TOKEN_FIXED_CHAR = 0;\n-  char TOKEN_NOTE_CHAR = '#';\n-  char TOKEN_TAG_CHAR = '%';\n-  char TOKEN_EXPR_START_CHAR = '{';\n-  char TOKEN_EXPR_END_CHAR = '}';\n-  char TOKEN_NEWLINE_CHAR = '\\n';\n-  char TOKEN_TRIM_CHAR = '-';\n-\n-  int TOKEN_PREFIX = TOKEN_PREFIX_CHAR;\n-  int TOKEN_POSTFIX = TOKEN_POSTFIX_CHAR;\n-  int TOKEN_FIXED = TOKEN_FIXED_CHAR;\n-  int TOKEN_NOTE = TOKEN_NOTE_CHAR;\n-  int TOKEN_TAG = TOKEN_TAG_CHAR;\n-  int TOKEN_EXPR_START = TOKEN_EXPR_START_CHAR;\n-  int TOKEN_EXPR_END = TOKEN_EXPR_END_CHAR;\n-  int TOKEN_NEWLINE = TOKEN_NEWLINE_CHAR;\n-  int TOKEN_TRIM = TOKEN_TRIM_CHAR;\n+public abstract class TokenScannerSymbols {\n+  private String expressionStart = null;\n+  private String expressionStartWithTag = null;\n+  private String closingComment = null;\n+\n+  public abstract char getPrefixChar();\n+\n+  public abstract char getPostfixChar();\n+\n+  public abstract char getFixedChar();\n+\n+  public abstract char getNoteChar();\n+\n+  public abstract char getTagChar();\n+\n+  public abstract char getExprStartChar();\n+\n+  public abstract char getExprEndChar();\n+\n+  public abstract char getNewlineChar();\n+\n+  public abstract char getTrimChar();\n+\n+  public int getPrefix() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MzgxMA==", "bodyText": "can you make these rspec-style? itRendersWithCustomTokens, etc.", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r395053810", "createdAt": "2020-03-19T14:10:47Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/tree/parse/CustomTokenScannerSymbolsTest.java", "diffHunk": "@@ -0,0 +1,105 @@\n+package com.hubspot.jinjava.tree.parse;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Lists;\n+import com.hubspot.jinjava.Jinjava;\n+import com.hubspot.jinjava.JinjavaConfig;\n+import com.hubspot.jinjava.lib.filter.JoinFilterTest.User;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class CustomTokenScannerSymbolsTest {\n+  private Jinjava jinjava;\n+  private JinjavaConfig config;\n+\n+  @Before\n+  public void setup() {\n+    config =\n+      JinjavaConfig.newBuilder().withTokenScannerSymbols(new CustomTokens()).build();\n+    jinjava = new Jinjava(config);\n+    jinjava.getGlobalContext().put(\"numbers\", Lists.newArrayList(1L, 2L, 3L, 4L, 5L));\n+  }\n+\n+  @Test\n+  public void testsThatCustomTokensDoesNotFail() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b12da6e28763832f81fec1728801fc16c23ca18", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/6b12da6e28763832f81fec1728801fc16c23ca18", "committedDate": "2020-03-22T16:42:42Z", "message": "adds getOrDefaultToken to Token.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "313d956e5e186d90ed283c7f9a0ab1892d1daa04", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/313d956e5e186d90ed283c7f9a0ab1892d1daa04", "committedDate": "2020-03-22T16:52:53Z", "message": "removes popCurrent() from Tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyNDA1ODA3", "url": "https://github.com/HubSpot/jinjava/pull/410#pullrequestreview-382405807", "createdAt": "2020-03-26T20:48:57Z", "commit": {"oid": "313d956e5e186d90ed283c7f9a0ab1892d1daa04"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0ODo1N1rOF8Z2Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQyMDo0OTo0MlrOF8Z3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4MjM0Ng==", "bodyText": "@gabru-md", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r398882346", "createdAt": "2020-03-26T20:48:57Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/ExpressionNode.java", "diffHunk": "@@ -48,10 +49,17 @@ public OutputNode render(JinjavaInterpreter interpreter) {\n \n     String result = Objects.toString(var, \"\");\n \n+    TokenScannerSymbols symbols = interpreter.getConfig().getTokenScannerSymbols();\n+    String expressionBegins = symbols.getExpressionStart();\n+    String expressionWithTag = symbols.getExpressionStartWithTag();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzM3Mg=="}, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODg4Mjc1Nw==", "bodyText": "@gabru-md are all these in there now?", "url": "https://github.com/HubSpot/jinjava/pull/410#discussion_r398882757", "createdAt": "2020-03-26T20:49:42Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/tree/parse/TokenScannerSymbols.java", "diffHunk": "@@ -15,24 +15,86 @@\n  **********************************************************************/\n package com.hubspot.jinjava.tree.parse;\n \n-public interface TokenScannerSymbols {\n-  char TOKEN_PREFIX_CHAR = '{';\n-  char TOKEN_POSTFIX_CHAR = '}';\n-  char TOKEN_FIXED_CHAR = 0;\n-  char TOKEN_NOTE_CHAR = '#';\n-  char TOKEN_TAG_CHAR = '%';\n-  char TOKEN_EXPR_START_CHAR = '{';\n-  char TOKEN_EXPR_END_CHAR = '}';\n-  char TOKEN_NEWLINE_CHAR = '\\n';\n-  char TOKEN_TRIM_CHAR = '-';\n-\n-  int TOKEN_PREFIX = TOKEN_PREFIX_CHAR;\n-  int TOKEN_POSTFIX = TOKEN_POSTFIX_CHAR;\n-  int TOKEN_FIXED = TOKEN_FIXED_CHAR;\n-  int TOKEN_NOTE = TOKEN_NOTE_CHAR;\n-  int TOKEN_TAG = TOKEN_TAG_CHAR;\n-  int TOKEN_EXPR_START = TOKEN_EXPR_START_CHAR;\n-  int TOKEN_EXPR_END = TOKEN_EXPR_END_CHAR;\n-  int TOKEN_NEWLINE = TOKEN_NEWLINE_CHAR;\n-  int TOKEN_TRIM = TOKEN_TRIM_CHAR;\n+public abstract class TokenScannerSymbols {\n+  private String expressionStart = null;\n+  private String expressionStartWithTag = null;\n+  private String closingComment = null;\n+\n+  public abstract char getPrefixChar();\n+\n+  public abstract char getPostfixChar();\n+\n+  public abstract char getFixedChar();\n+\n+  public abstract char getNoteChar();\n+\n+  public abstract char getTagChar();\n+\n+  public abstract char getExprStartChar();\n+\n+  public abstract char getExprEndChar();\n+\n+  public abstract char getNewlineChar();\n+\n+  public abstract char getTrimChar();\n+\n+  public int getPrefix() {\n+    return getPrefixChar();\n+  }\n+\n+  public int getPostfix() {\n+    return getPostfixChar();\n+  }\n+\n+  public int getFixed() {\n+    return getFixedChar();\n+  }\n+\n+  public int getNote() {\n+    return getNoteChar();\n+  }\n+\n+  public int getTag() {\n+    return getTagChar();\n+  }\n+\n+  public int getExprStart() {\n+    return getExprStartChar();\n+  }\n+\n+  public int getExprEnd() {\n+    return getExprEndChar();\n+  }\n+\n+  public int getNewline() {\n+    return getNewlineChar();\n+  }\n+\n+  public int getTrim() {\n+    return getTrimChar();\n+  }\n+\n+  public String getExpressionStart() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1MjY4Mw=="}, "originalCommit": {"oid": "018d77d8f7bd78b47d3c125c7f617c3328c65839"}, "originalPosition": 83}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9610f1a002366b9b959ba2256ff76056ed71cda6", "author": {"user": {"login": "gabru-md", "name": "Manish Devgan"}}, "url": "https://github.com/HubSpot/jinjava/commit/9610f1a002366b9b959ba2256ff76056ed71cda6", "committedDate": "2020-03-27T11:27:42Z", "message": "removes unnecessary variables"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyODg0NjYw", "url": "https://github.com/HubSpot/jinjava/pull/410#pullrequestreview-382884660", "createdAt": "2020-03-27T14:02:18Z", "commit": {"oid": "9610f1a002366b9b959ba2256ff76056ed71cda6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2511, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}