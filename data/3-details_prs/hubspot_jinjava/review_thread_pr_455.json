{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNTE5Mzc5", "number": 455, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxMTo0M1rOEFAYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxMTo0M1rOEFAYbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjg0NTkwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxMTo0M1rOGi-o7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNjowNzozNFrOGjJiJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTA1Mg==", "bodyText": "Thanks for adding tests here too. Would you mind adding another for a deferred value on the RHS of an if?", "url": "https://github.com/HubSpot/jinjava/pull/455#discussion_r439331052", "createdAt": "2020-06-12T10:11:43Z", "author": {"login": "Joeoh"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -119,6 +119,14 @@ public void itResolvesIfTagWherePossible() {\n     assertThat(interpreter.getErrors()).isEmpty();\n   }\n \n+  @Test\n+  public void itResolveEqualToInOrCondition() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bfa8dbde3a3a4c8ea68398be3442f6b068e09d39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ1MDgzMg==", "bodyText": "Sure @Joeoh. Before that, when you say RHS you mean right side of the equation, right? If so, can you give me an example about this test scenario to make clear I got your test idea?", "url": "https://github.com/HubSpot/jinjava/pull/455#discussion_r439450832", "createdAt": "2020-06-12T14:24:30Z", "author": {"login": "samukce"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -119,6 +119,14 @@ public void itResolvesIfTagWherePossible() {\n     assertThat(interpreter.getErrors()).isEmpty();\n   }\n \n+  @Test\n+  public void itResolveEqualToInOrCondition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTA1Mg=="}, "originalCommit": {"oid": "bfa8dbde3a3a4c8ea68398be3442f6b068e09d39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5MzI5OQ==", "bodyText": "Yes the right hand side. Similar to itPreservesIfTag above we want to ensure that the if is preserved if a deferred variable is used in the Or condition. so for example: {% if 'a' is equalto 'b' or 'a' is equalto deferred %}preserved{% endif %}", "url": "https://github.com/HubSpot/jinjava/pull/455#discussion_r439493299", "createdAt": "2020-06-12T15:37:18Z", "author": {"login": "Joeoh"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -119,6 +119,14 @@ public void itResolvesIfTagWherePossible() {\n     assertThat(interpreter.getErrors()).isEmpty();\n   }\n \n+  @Test\n+  public void itResolveEqualToInOrCondition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTA1Mg=="}, "originalCommit": {"oid": "bfa8dbde3a3a4c8ea68398be3442f6b068e09d39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5NzkzOA==", "bodyText": "done @Joeoh .", "url": "https://github.com/HubSpot/jinjava/pull/455#discussion_r439497938", "createdAt": "2020-06-12T15:45:40Z", "author": {"login": "samukce"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -119,6 +119,14 @@ public void itResolvesIfTagWherePossible() {\n     assertThat(interpreter.getErrors()).isEmpty();\n   }\n \n+  @Test\n+  public void itResolveEqualToInOrCondition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTA1Mg=="}, "originalCommit": {"oid": "bfa8dbde3a3a4c8ea68398be3442f6b068e09d39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ5OTg4NA==", "bodyText": "Thanks! Can you use a var for the string instead", "url": "https://github.com/HubSpot/jinjava/pull/455#discussion_r439499884", "createdAt": "2020-06-12T15:49:15Z", "author": {"login": "Joeoh"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -119,6 +119,14 @@ public void itResolvesIfTagWherePossible() {\n     assertThat(interpreter.getErrors()).isEmpty();\n   }\n \n+  @Test\n+  public void itResolveEqualToInOrCondition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTA1Mg=="}, "originalCommit": {"oid": "bfa8dbde3a3a4c8ea68398be3442f6b068e09d39"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTUwOTU0Mg==", "bodyText": "pls, let me know if you have any other suggestion @Joeoh", "url": "https://github.com/HubSpot/jinjava/pull/455#discussion_r439509542", "createdAt": "2020-06-12T16:07:34Z", "author": {"login": "samukce"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -119,6 +119,14 @@ public void itResolvesIfTagWherePossible() {\n     assertThat(interpreter.getErrors()).isEmpty();\n   }\n \n+  @Test\n+  public void itResolveEqualToInOrCondition() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMTA1Mg=="}, "originalCommit": {"oid": "bfa8dbde3a3a4c8ea68398be3442f6b068e09d39"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1697, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}