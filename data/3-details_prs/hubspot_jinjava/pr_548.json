{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2ODEwNDYy", "number": 548, "title": "Eager expression node", "bodyText": "Part of #532\nThis PR adds in the functionality that is necessary to interpret an expression node when doing eager execution. The expression node needs to get treated similarly to a PrintTag, and it has nearly the same logic, save for the possibility for nested interpretation. Because of this, several static methods from the EagerTagDecorator are used to partially or fully evaluate the expression within the node.\nIt uses the chunk resolver in a child context to evaluate the expression in chunks. For more detail on how the chunk resolver works, see #525. If the interpretation is run in protectedMode, then if any values on the context are updated, a SetTag is pre-pended to the output to preserve the state of the context. In other words, performing the sort of speculative execution done when unsure which branch of an IfTag to execute, the values should be preserved on the context. Quick example:\n{% set list = ['foo'] %}\n{% if deferred %}\n{{ list }}\n{{ list.append('a') }}\n{% else %}\n{{ list }}\n{{ list.append('b') }}\n{% endif %}\n\nWhen executing these expressions, since the value of list gets updated via append() and protectedMode would be true, then the desired output would be something like:\n{% if deferred %}\n['foo']\n{% set list = ['foo'] %}{{ list.append('a') }}\n{% else %}\n['foo']\n{% set list = ['foo'] %}{{ list.append('b') }}\n{% endif %}\n\nThe IfTag functionality has not been PR'd yet, but it helps demonstrate the purpose of protectedMode. (Again, this functionality is similar to pre-pending a SetTag after interpreting certain tags as well.\n\nSomewhat similar to the set tag pre-pending, if an expression node references a macro function which must be deferred such as {{ some_macro(deferred) }}, then the macro function's image must be pre-pended as well as described in #547.\nWe use chunkResolver.getDeferredWords().isEmpty() to determine if the expression was able to be completely evaluated. If there are any deferred words, then we know that the expression node must be \"reconstructed\", and the partially evaluated result gets wrapped in double curly braces. If there are no words, however, then the logic continues similarly to the DefaultExpressionStrategy, although we must keep in mind that the output may need to be wrapped in a raw tag if nested interpretation is disabled. Ex: {{ 'this is an expression' + '{{ foo }}' }} would need to be output as: {% raw %}this is an expression {{ foo }}{% endraw %} to prevent evaluation on a second rendering pass if the execution mode specifies isPreserveRawTags() == true.\ncc @boulter @Joeoh @gobimcp feel free to bring up any questions or comments you may have about this alternate strategy for processing expression nodes (see #544 for how I added the strategy pattern into the expression node logic, allowing for different approaches to the logic for an ExpressionNode)", "createdAt": "2020-11-24T21:57:38Z", "url": "https://github.com/HubSpot/jinjava/pull/548", "merged": true, "mergeCommit": {"oid": "a1d6b42ce7ba567960e6f95443f2e28f3da7bd94"}, "closed": true, "closedAt": "2020-12-09T17:27:38Z", "author": {"login": "jasmith-hs"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfwCoIAH2gAyNTI2ODEwNDYyOjY3ODlmYmMzMmNiOWFlZjUwODQyNWI0ZDAxNmVkODRmMWI1ODU5NWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkiJmZAH2gAyNTI2ODEwNDYyOjRhM2UzNzY2YmEyNTZkOWIyZjg5MzkwOGFlZWJjZDQxY2Y5NjhhYjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6789fbc32cb9aef508425b4d016ed84f1b58595c", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/6789fbc32cb9aef508425b4d016ed84f1b58595c", "committedDate": "2020-11-24T20:47:12Z", "message": "Implement EagerExpressionStrategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b30c25c3bab383683cda7acca6e76553080f82bd", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/b30c25c3bab383683cda7acca6e76553080f82bd", "committedDate": "2020-11-24T20:47:43Z", "message": "Use the getHideInterpreterErrors flag to hide errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94f9e29528a19d6ab17c5397860fd09a98c67b05", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/94f9e29528a19d6ab17c5397860fd09a98c67b05", "committedDate": "2020-11-24T20:51:01Z", "message": "Unignore some passing tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "156a1395ec88026c18d0f0038827323ac23f151a", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/156a1395ec88026c18d0f0038827323ac23f151a", "committedDate": "2020-11-24T21:15:03Z", "message": "Merge branch 'eager-tag-decorator-full' of github.com:HubSpot/jinjava into eager-expression-node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3d6c599c081a98db4c537a3844317b75801e7d7", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/a3d6c599c081a98db4c537a3844317b75801e7d7", "committedDate": "2020-11-24T22:34:18Z", "message": "Working on unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eac319fef25c74ff2ee7c7fbd7fc99b5c0c740ff", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/eac319fef25c74ff2ee7c7fbd7fc99b5c0c740ff", "committedDate": "2020-11-30T16:46:03Z", "message": "Reconstruct set tag for variables that will get deferred"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5e865c87ccf0732bd3cd8b39768637629d1639b", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/e5e865c87ccf0732bd3cd8b39768637629d1639b", "committedDate": "2020-11-30T17:19:18Z", "message": "Only reconstruct set tag before deferring outside of protected mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6902404d8132751e34f18d19ce5d156288ad7524", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/6902404d8132751e34f18d19ce5d156288ad7524", "committedDate": "2020-11-30T17:32:03Z", "message": "Add more EagerTagDecorator tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f164aff6d29f70ddda1b78a7ce7a19706a261a1b", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/f164aff6d29f70ddda1b78a7ce7a19706a261a1b", "committedDate": "2020-11-30T17:35:44Z", "message": "Call wrapper method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "856c532eeea333bcdae3a29fa01abe08b0c13e8e", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/856c532eeea333bcdae3a29fa01abe08b0c13e8e", "committedDate": "2020-11-30T20:42:59Z", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-expression-node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e07ecccb578523316f4334c0156b7595b8668a74", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/e07ecccb578523316f4334c0156b7595b8668a74", "committedDate": "2020-12-03T19:33:59Z", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-expression-node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b98a632cca6987b1e6862728e790492b8cbb9cf0", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/b98a632cca6987b1e6862728e790492b8cbb9cf0", "committedDate": "2020-12-03T19:37:41Z", "message": "Add missing import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b709c8ea520c4da063983e17ee5cd6fb9b7724e", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/2b709c8ea520c4da063983e17ee5cd6fb9b7724e", "committedDate": "2020-12-03T21:50:04Z", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into eager-expression-node"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MjczNTYw", "url": "https://github.com/HubSpot/jinjava/pull/548#pullrequestreview-546273560", "createdAt": "2020-12-07T15:43:12Z", "commit": {"oid": "2b709c8ea520c4da063983e17ee5cd6fb9b7724e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo0MzoxMlrOIAs_Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo0NDo0NlrOIAtD0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwNzk5OQ==", "bodyText": "Might want to a create a variable for interpreter.getConfig() to shorten up these lines.", "url": "https://github.com/HubSpot/jinjava/pull/548#discussion_r537607999", "createdAt": "2020-12-07T15:43:12Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java", "diffHunk": "@@ -11,6 +21,113 @@ public RenderedOutputNode interpretOutput(\n     ExpressionToken master,\n     JinjavaInterpreter interpreter\n   ) {\n-    return new DefaultExpressionStrategy().interpretOutput(master, interpreter); // TODO replace with actual functionality\n+    EagerStringResult eagerStringResult = eagerResolveExpression(master, interpreter);\n+    return new RenderedOutputNode(\n+      eagerStringResult.getPrefixToPreserveState() + eagerStringResult.getResult()\n+    );\n+  }\n+\n+  private EagerStringResult eagerResolveExpression(\n+    ExpressionToken master,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    ChunkResolver chunkResolver = new ChunkResolver(\n+      master.getExpr(),\n+      master,\n+      interpreter\n+    );\n+    EagerStringResult resolvedExpression = EagerTagDecorator.executeInChildContext(\n+      eagerInterpreter -> chunkResolver.resolveChunks(),\n+      interpreter,\n+      true\n+    );\n+    StringBuilder prefixToPreserveState = new StringBuilder(\n+      interpreter.getContext().isProtectedMode()\n+        ? resolvedExpression.getPrefixToPreserveState()\n+        : \"\"\n+    );\n+    if (chunkResolver.getDeferredWords().isEmpty()) {\n+      String result = WhitespaceUtils.unquote(resolvedExpression.getResult());\n+      if (\n+        !StringUtils.equals(result, master.getImage()) &&\n+        (\n+          StringUtils.contains(result, master.getSymbols().getExpressionStart()) ||\n+          StringUtils.contains(result, master.getSymbols().getExpressionStartWithTag())\n+        )\n+      ) {\n+        if (interpreter.getConfig().isNestedInterpretationEnabled()) {\n+          try {\n+            result = interpreter.renderFlat(result);\n+          } catch (Exception e) {\n+            Logging.ENGINE_LOG.warn(\"Error rendering variable node result\", e);\n+          }\n+        } else {\n+          // Possible macro/set tag in front of this one. Includes result\n+          result = wrapInRawOrExpressionIfNeeded(result, interpreter);\n+        }\n+      }\n+\n+      if (interpreter.getContext().isAutoEscape()) {\n+        result = EscapeFilter.escapeHtmlEntities(result);\n+      }\n+      return new EagerStringResult(result, prefixToPreserveState.toString());\n+    }\n+    prefixToPreserveState.append(\n+      EagerTagDecorator.reconstructFromContextBeforeDeferring(\n+        chunkResolver.getDeferredWords(),\n+        interpreter\n+      )\n+    );\n+    String helpers = wrapInExpression(resolvedExpression.getResult(), interpreter);\n+    interpreter\n+      .getContext()\n+      .handleEagerToken(\n+        new EagerToken(\n+          new TagToken(\n+            helpers,\n+            master.getLineNumber(),\n+            master.getStartPosition(),\n+            master.getSymbols()\n+          ),\n+          chunkResolver.getDeferredWords()\n+        )\n+      );\n+    // There is no result because it couldn't be entirely evaluated.\n+    return new EagerStringResult(\n+      \"\",\n+      EagerTagDecorator.wrapInAutoEscapeIfNeeded(\n+        prefixToPreserveState.toString() + helpers,\n+        interpreter\n+      )\n+    );\n+  }\n+\n+  private static String wrapInRawOrExpressionIfNeeded(\n+    String output,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    if (\n+      interpreter.getConfig().getExecutionMode().isPreserveRawTags() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b709c8ea520c4da063983e17ee5cd6fb9b7724e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwOTE3MQ==", "bodyText": "I'd inline all of these test files for readability.", "url": "https://github.com/HubSpot/jinjava/pull/548#discussion_r537609171", "createdAt": "2020-12-07T15:44:46Z", "author": {"login": "boulter"}, "path": "src/test/resources/expression/preserves-raw-tags.jinja", "diffHunk": "@@ -0,0 +1,3 @@\n+{{ '{{ foo }}' }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b709c8ea520c4da063983e17ee5cd6fb9b7724e"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dc986879bf98e36539324e0cb4c75afcac4eeb2", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/1dc986879bf98e36539324e0cb4c75afcac4eeb2", "committedDate": "2020-12-07T20:04:42Z", "message": "Make eager expression tests inline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a3e3766ba256d9b2f893908aeebcd41cf968ab0", "author": {"user": {"login": "jasmith-hs", "name": "Jack Smith"}}, "url": "https://github.com/HubSpot/jinjava/commit/4a3e3766ba256d9b2f893908aeebcd41cf968ab0", "committedDate": "2020-12-09T17:25:46Z", "message": "Shorten multiple calls to interpreter.getConfig()"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2481, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}