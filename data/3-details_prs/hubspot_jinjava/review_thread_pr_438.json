{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjExMzEz", "number": 438, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0MToyN1rOD7DQHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo1MTo0NVrOD7DVeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjQ1ODU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0MToyN1rOGTJ4XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0MToyN1rOGTJ4XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczODAxMw==", "bodyText": "Could you use the name defined here? \n  \n    \n      jinjava/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\n    \n    \n         Line 65\n      in\n      5cb2463\n    \n    \n    \n    \n\n        \n          \n           public static final String TAG_NAME = \"set\";", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422738013", "createdAt": "2020-05-11T01:41:27Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.hubspot.jinjava.util;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.tree.ExpressionNode;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.TextNode;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class DeferredValueUtils {\n+  private static final String TEMPLATE_TAG_REGEX = \"(\\\\w+(?:\\\\.\\\\w+)*)\";\n+  private static final Pattern TEMPLATE_TAG_PATTERN = Pattern.compile(TEMPLATE_TAG_REGEX);\n+\n+  private static final Pattern SET_TAG_PATTERN = Pattern.compile(\n+    \"set \" + TEMPLATE_TAG_REGEX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjQ2NzAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0ODowMVrOGTJ9Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNjozMTo0MlrOGTkCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTI4Ng==", "bodyText": "I don't think this will work with multivariable assignments like set myvar1, myvar2, myvar3, myvar4 = ... I'm not sure you'd want to though as that might make things very complex.", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422739286", "createdAt": "2020-05-11T01:48:01Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.hubspot.jinjava.util;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.tree.ExpressionNode;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.TextNode;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class DeferredValueUtils {\n+  private static final String TEMPLATE_TAG_REGEX = \"(\\\\w+(?:\\\\.\\\\w+)*)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzE2NjU0Ng==", "bodyText": "Nice catch. I added this regex to be more specific for looking for sets as we don't have the existing context to compare matches to filter out noise. I think I will change this (and the other usages) to filter out any reserved tokens instead.", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r423166546", "createdAt": "2020-05-11T16:31:42Z", "author": {"login": "Joeoh"}, "path": "src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.hubspot.jinjava.util;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.tree.ExpressionNode;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.TextNode;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class DeferredValueUtils {\n+  private static final String TEMPLATE_TAG_REGEX = \"(\\\\w+(?:\\\\.\\\\w+)*)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTI4Ng=="}, "originalCommit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjQ3MTY2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo1MToxOFrOGTJ_6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo1MToxOFrOGTJ_6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTk0Nw==", "bodyText": "Might be nicer to put these in fixture files like some of the other tests.", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422739947", "createdAt": "2020-05-11T01:51:18Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -183,4 +187,169 @@ public void itDefersMacro() {\n     String output = interpreter.render(deferredOutput);\n     assertThat(output).isEqualTo(\"0,10,15,25\");\n   }\n+\n+  @Test\n+  public void itDefersAllVariablesUsedInDeferredNode() {\n+    String template = \"\";\n+    template += \"{% set varUsedInForScope = 'outside if statement' %}\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varUsedInForScope }}\";\n+    template += \"     {% set varUsedInForScope = 'entered if statement' %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"   {{ varUsedInForScope }}\";\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"varUsedInForScope\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"outside if statement\");\n+\n+    JinjavaInterpreter.popCurrent();\n+    HashMap<String, Object> deferredContext = DeferredValueUtils.getDeferredContextWithOriginalValues(\n+      interpreter.getContext()\n+    );\n+    deferredContext.forEach(interpreter.getContext()::put);\n+    String secondRender = interpreter.render(output);\n+    assertThat(secondRender)\n+      .isEqualTo(\"        outside if statement           entered if statement\");\n+\n+    interpreter.getContext().put(\"deferred\", DeferredValue.instance());\n+    interpreter.getContext().put(\"resolved\", \"resolvedValue\");\n+  }\n+\n+  @Test\n+  public void itDefersDependantVariables() {\n+    String template = \"\";\n+    template +=\n+      \"{% set resolved_variable = 'resolved' %} {% set deferred_variable = deferred + '-' + resolved_variable %}\";\n+    template += \"{{ deferred_variable }}\";\n+    interpreter.render(template);\n+    interpreter.getContext().get(\"resolved_variable\");\n+  }\n+\n+  @Test\n+  public void itDefersVariablesComparedAgainstDeferredVals() {\n+    String template = \"\";\n+    template += \"{% set testVar = 'testvalue' %}\";\n+    template += \"{% if deferred == testVar %} true {% else %} false {% endif %}\";\n+\n+    interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"testVar\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"testvalue\");\n+  }\n+\n+  @Test\n+  public void itPutsDeferredVariablesOnParentScopes() {\n+    String template = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMjQ3MjI1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo1MTo0NVrOGTKAQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo1MTo0NVrOGTKAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc0MDAzMg==", "bodyText": "comment needed?", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422740032", "createdAt": "2020-05-11T01:51:45Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -183,4 +187,169 @@ public void itDefersMacro() {\n     String output = interpreter.render(deferredOutput);\n     assertThat(output).isEqualTo(\"0,10,15,25\");\n   }\n+\n+  @Test\n+  public void itDefersAllVariablesUsedInDeferredNode() {\n+    String template = \"\";\n+    template += \"{% set varUsedInForScope = 'outside if statement' %}\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varUsedInForScope }}\";\n+    template += \"     {% set varUsedInForScope = 'entered if statement' %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"   {{ varUsedInForScope }}\";\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"varUsedInForScope\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"outside if statement\");\n+\n+    JinjavaInterpreter.popCurrent();\n+    HashMap<String, Object> deferredContext = DeferredValueUtils.getDeferredContextWithOriginalValues(\n+      interpreter.getContext()\n+    );\n+    deferredContext.forEach(interpreter.getContext()::put);\n+    String secondRender = interpreter.render(output);\n+    assertThat(secondRender)\n+      .isEqualTo(\"        outside if statement           entered if statement\");\n+\n+    interpreter.getContext().put(\"deferred\", DeferredValue.instance());\n+    interpreter.getContext().put(\"resolved\", \"resolvedValue\");\n+  }\n+\n+  @Test\n+  public void itDefersDependantVariables() {\n+    String template = \"\";\n+    template +=\n+      \"{% set resolved_variable = 'resolved' %} {% set deferred_variable = deferred + '-' + resolved_variable %}\";\n+    template += \"{{ deferred_variable }}\";\n+    interpreter.render(template);\n+    interpreter.getContext().get(\"resolved_variable\");\n+  }\n+\n+  @Test\n+  public void itDefersVariablesComparedAgainstDeferredVals() {\n+    String template = \"\";\n+    template += \"{% set testVar = 'testvalue' %}\";\n+    template += \"{% if deferred == testVar %} true {% else %} false {% endif %}\";\n+\n+    interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"testVar\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"testvalue\");\n+  }\n+\n+  @Test\n+  public void itPutsDeferredVariablesOnParentScopes() {\n+    String template = \"\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% set varSetInside = 'inside first scope' %}\";\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varSetInside }}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    DeferredValue varSetInsideDeferred = (DeferredValue) varSetInside;\n+    assertThat(varSetInsideDeferred.getOriginalValue()).isEqualTo(\"inside first scope\");\n+  }\n+\n+  @Test\n+  public void puttingDeferredVariablesOnParentScopesDoesNotBreakSetTag() {\n+    String template = \"\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% set varSetInside = 'inside first scope' %}\";\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varSetInside }}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{% endfor %}\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% set varSetInside = 'inside first scope2' %}\";\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varSetInside }}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    DeferredValue varSetInsideDeferred = (DeferredValue) varSetInside;\n+    assertThat(varSetInsideDeferred.getOriginalValue()).isEqualTo(\"inside first scope\");\n+\n+    JinjavaInterpreter.popCurrent();\n+    HashMap<String, Object> deferredContext = DeferredValueUtils.getDeferredContextWithOriginalValues(\n+      interpreter.getContext()\n+    );\n+    deferredContext.forEach(interpreter.getContext()::put);\n+    String secondRender = interpreter.render(output);\n+    assertThat(secondRender.trim())\n+      .isEqualTo(\"inside first scope              inside first scope2\".trim());\n+  }\n+\n+  @Test\n+  public void itMarksVariablesSetInDeferredBlockAsDeferred() {\n+    String template = \"\";\n+    template += \"   {% set reference = deferredValue %}\";\n+    template += \"   {% if reference == 'resolved' %}\"; //Deferred Node\n+    template += \"     {% set varSetInside = 'set inside' %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{{ varSetInside }}\";\n+    JinjavaInterpreter.popCurrent();\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    assertThat(output).contains(\"{{ varSetInside }}\");\n+  }\n+\n+  @Test\n+  public void itMarksVariablesUsedAsMapKeysAsDeferred() {\n+    /*    {% set week_number = contact.MOweekno %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "originalPosition": 147}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1686, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}