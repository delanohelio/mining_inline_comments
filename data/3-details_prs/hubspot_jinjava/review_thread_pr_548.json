{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2ODEwNDYy", "number": 548, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo0MzoxMlrOFB2Cuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo0NDo0NlrOFB2FlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDc4MzMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo0MzoxMlrOIAs_Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo0MzoxMlrOIAs_Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwNzk5OQ==", "bodyText": "Might want to a create a variable for interpreter.getConfig() to shorten up these lines.", "url": "https://github.com/HubSpot/jinjava/pull/548#discussion_r537607999", "createdAt": "2020-12-07T15:43:12Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/lib/expression/EagerExpressionStrategy.java", "diffHunk": "@@ -11,6 +21,113 @@ public RenderedOutputNode interpretOutput(\n     ExpressionToken master,\n     JinjavaInterpreter interpreter\n   ) {\n-    return new DefaultExpressionStrategy().interpretOutput(master, interpreter); // TODO replace with actual functionality\n+    EagerStringResult eagerStringResult = eagerResolveExpression(master, interpreter);\n+    return new RenderedOutputNode(\n+      eagerStringResult.getPrefixToPreserveState() + eagerStringResult.getResult()\n+    );\n+  }\n+\n+  private EagerStringResult eagerResolveExpression(\n+    ExpressionToken master,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    ChunkResolver chunkResolver = new ChunkResolver(\n+      master.getExpr(),\n+      master,\n+      interpreter\n+    );\n+    EagerStringResult resolvedExpression = EagerTagDecorator.executeInChildContext(\n+      eagerInterpreter -> chunkResolver.resolveChunks(),\n+      interpreter,\n+      true\n+    );\n+    StringBuilder prefixToPreserveState = new StringBuilder(\n+      interpreter.getContext().isProtectedMode()\n+        ? resolvedExpression.getPrefixToPreserveState()\n+        : \"\"\n+    );\n+    if (chunkResolver.getDeferredWords().isEmpty()) {\n+      String result = WhitespaceUtils.unquote(resolvedExpression.getResult());\n+      if (\n+        !StringUtils.equals(result, master.getImage()) &&\n+        (\n+          StringUtils.contains(result, master.getSymbols().getExpressionStart()) ||\n+          StringUtils.contains(result, master.getSymbols().getExpressionStartWithTag())\n+        )\n+      ) {\n+        if (interpreter.getConfig().isNestedInterpretationEnabled()) {\n+          try {\n+            result = interpreter.renderFlat(result);\n+          } catch (Exception e) {\n+            Logging.ENGINE_LOG.warn(\"Error rendering variable node result\", e);\n+          }\n+        } else {\n+          // Possible macro/set tag in front of this one. Includes result\n+          result = wrapInRawOrExpressionIfNeeded(result, interpreter);\n+        }\n+      }\n+\n+      if (interpreter.getContext().isAutoEscape()) {\n+        result = EscapeFilter.escapeHtmlEntities(result);\n+      }\n+      return new EagerStringResult(result, prefixToPreserveState.toString());\n+    }\n+    prefixToPreserveState.append(\n+      EagerTagDecorator.reconstructFromContextBeforeDeferring(\n+        chunkResolver.getDeferredWords(),\n+        interpreter\n+      )\n+    );\n+    String helpers = wrapInExpression(resolvedExpression.getResult(), interpreter);\n+    interpreter\n+      .getContext()\n+      .handleEagerToken(\n+        new EagerToken(\n+          new TagToken(\n+            helpers,\n+            master.getLineNumber(),\n+            master.getStartPosition(),\n+            master.getSymbols()\n+          ),\n+          chunkResolver.getDeferredWords()\n+        )\n+      );\n+    // There is no result because it couldn't be entirely evaluated.\n+    return new EagerStringResult(\n+      \"\",\n+      EagerTagDecorator.wrapInAutoEscapeIfNeeded(\n+        prefixToPreserveState.toString() + helpers,\n+        interpreter\n+      )\n+    );\n+  }\n+\n+  private static String wrapInRawOrExpressionIfNeeded(\n+    String output,\n+    JinjavaInterpreter interpreter\n+  ) {\n+    if (\n+      interpreter.getConfig().getExecutionMode().isPreserveRawTags() &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b709c8ea520c4da063983e17ee5cd6fb9b7724e"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDc5MDYwOnYy", "diffSide": "RIGHT", "path": "src/test/resources/expression/preserves-raw-tags.jinja", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo0NDo0NlrOIAtD0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTo0NDo0NlrOIAtD0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwOTE3MQ==", "bodyText": "I'd inline all of these test files for readability.", "url": "https://github.com/HubSpot/jinjava/pull/548#discussion_r537609171", "createdAt": "2020-12-07T15:44:46Z", "author": {"login": "boulter"}, "path": "src/test/resources/expression/preserves-raw-tags.jinja", "diffHunk": "@@ -0,0 +1,3 @@\n+{{ '{{ foo }}' }}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b709c8ea520c4da063983e17ee5cd6fb9b7724e"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1656, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}