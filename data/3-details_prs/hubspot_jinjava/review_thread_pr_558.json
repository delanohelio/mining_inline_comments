{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTk5Mzk4", "number": 558, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyODoyOFrOE_rHew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDo0ODozMFrOFASS2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjAyMTcxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTagTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNToyODoyOFrOH9gcvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjo0MToxMFrOH9kBTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1NjgyOQ==", "bodyText": "just as a personal preference, if inputs and expected files are short enough, I would just put them right in the code here. It's way easier to read when you don't have to flip back and forth  between files.\nSomeday we'll get text blocks.", "url": "https://github.com/HubSpot/jinjava/pull/558#discussion_r534256829", "createdAt": "2020-12-02T15:28:28Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTagTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.ExpectedNodeInterpreter;\n+import com.hubspot.jinjava.JinjavaConfig;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.tag.DoTagTest;\n+import com.hubspot.jinjava.lib.tag.Tag;\n+import com.hubspot.jinjava.mode.EagerExecutionMode;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class EagerDoTagTest extends DoTagTest {\n+  private Tag tag;\n+  private ExpectedNodeInterpreter expectedNodeInterpreter;\n+\n+  @Before\n+  public void eagerSetup() {\n+    interpreter =\n+      new JinjavaInterpreter(\n+        jinjava,\n+        context,\n+        JinjavaConfig.newBuilder().withExecutionMode(new EagerExecutionMode()).build()\n+      );\n+\n+    tag = new EagerDoTag();\n+    context.registerTag(tag);\n+    context.put(\"deferred\", DeferredValue.instance());\n+    expectedNodeInterpreter =\n+      new ExpectedNodeInterpreter(interpreter, tag, \"tags/eager/dotag\");\n+    JinjavaInterpreter.pushCurrent(interpreter);\n+  }\n+\n+  @After\n+  public void teardown() {\n+    JinjavaInterpreter.popCurrent();\n+  }\n+\n+  @Test\n+  public void itHandlesDeferredDo() {\n+    context.put(\"foo\", 2);\n+    expectedNodeInterpreter.assertExpectedOutput(\"handles-deferred-do\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112f280880ac2c81bd78a422fc0f206e83a7d3a0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxNTM0Mw==", "bodyText": "Okay, I'll make a note to clean up the one-liners, and text blocks would be perfect here if we get them", "url": "https://github.com/HubSpot/jinjava/pull/558#discussion_r534315343", "createdAt": "2020-12-02T16:41:10Z", "author": {"login": "jasmith-hs"}, "path": "src/test/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTagTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import com.hubspot.jinjava.ExpectedNodeInterpreter;\n+import com.hubspot.jinjava.JinjavaConfig;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.lib.tag.DoTagTest;\n+import com.hubspot.jinjava.lib.tag.Tag;\n+import com.hubspot.jinjava.mode.EagerExecutionMode;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class EagerDoTagTest extends DoTagTest {\n+  private Tag tag;\n+  private ExpectedNodeInterpreter expectedNodeInterpreter;\n+\n+  @Before\n+  public void eagerSetup() {\n+    interpreter =\n+      new JinjavaInterpreter(\n+        jinjava,\n+        context,\n+        JinjavaConfig.newBuilder().withExecutionMode(new EagerExecutionMode()).build()\n+      );\n+\n+    tag = new EagerDoTag();\n+    context.registerTag(tag);\n+    context.put(\"deferred\", DeferredValue.instance());\n+    expectedNodeInterpreter =\n+      new ExpectedNodeInterpreter(interpreter, tag, \"tags/eager/dotag\");\n+    JinjavaInterpreter.pushCurrent(interpreter);\n+  }\n+\n+  @After\n+  public void teardown() {\n+    JinjavaInterpreter.popCurrent();\n+  }\n+\n+  @Test\n+  public void itHandlesDeferredDo() {\n+    context.put(\"foo\", 2);\n+    expectedNodeInterpreter.assertExpectedOutput(\"handles-deferred-do\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI1NjgyOQ=="}, "originalCommit": {"oid": "112f280880ac2c81bd78a422fc0f206e83a7d3a0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODI5OTM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDozMjoyMVrOH-eoJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDozMjoyMVrOH-eoJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI3NTU1OQ==", "bodyText": "Should be \"do\"", "url": "https://github.com/HubSpot/jinjava/pull/558#discussion_r535275559", "createdAt": "2020-12-03T14:32:21Z", "author": {"login": "Joeoh"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.StringJoiner;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class EagerDoTag extends EagerStateChangingTag<DoTag> {\n+\n+  public EagerDoTag() {\n+    super(new DoTag());\n+  }\n+\n+  public EagerDoTag(DoTag doTag) {\n+    super(doTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    String expr = tagToken.getHelpers();\n+    if (StringUtils.isBlank(expr)) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        tagToken.getImage(),\n+        \"Tag 'print' expects expression\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112f280880ac2c81bd78a422fc0f206e83a7d3a0"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1ODQ0MDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNDo0ODozMFrOH-fyFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTozMzoxOVrOH-t5jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5NDQ4Ng==", "bodyText": "Looks like this logic is the same for both tags, and maybe others? Should we split it out into a function?", "url": "https://github.com/HubSpot/jinjava/pull/558#discussion_r535294486", "createdAt": "2020-12-03T14:48:30Z", "author": {"login": "Joeoh"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.StringJoiner;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class EagerDoTag extends EagerStateChangingTag<DoTag> {\n+\n+  public EagerDoTag() {\n+    super(new DoTag());\n+  }\n+\n+  public EagerDoTag(DoTag doTag) {\n+    super(doTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    String expr = tagToken.getHelpers();\n+    if (StringUtils.isBlank(expr)) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        tagToken.getImage(),\n+        \"Tag 'print' expects expression\"\n+      );\n+    }\n+    ChunkResolver chunkResolver = new ChunkResolver(expr, tagToken, interpreter);\n+    EagerStringResult resolvedExpression = executeInChildContext(\n+      eagerInterpreter -> chunkResolver.resolveChunks(),\n+      interpreter,\n+      true\n+    );\n+    StringJoiner joiner = new StringJoiner(\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112f280880ac2c81bd78a422fc0f206e83a7d3a0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUyNTc3Mw==", "bodyText": "Yes, that is a good call.", "url": "https://github.com/HubSpot/jinjava/pull/558#discussion_r535525773", "createdAt": "2020-12-03T19:33:19Z", "author": {"login": "jasmith-hs"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerDoTag.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.StringJoiner;\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class EagerDoTag extends EagerStateChangingTag<DoTag> {\n+\n+  public EagerDoTag() {\n+    super(new DoTag());\n+  }\n+\n+  public EagerDoTag(DoTag doTag) {\n+    super(doTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    String expr = tagToken.getHelpers();\n+    if (StringUtils.isBlank(expr)) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        tagToken.getImage(),\n+        \"Tag 'print' expects expression\"\n+      );\n+    }\n+    ChunkResolver chunkResolver = new ChunkResolver(expr, tagToken, interpreter);\n+    EagerStringResult resolvedExpression = executeInChildContext(\n+      eagerInterpreter -> chunkResolver.resolveChunks(),\n+      interpreter,\n+      true\n+    );\n+    StringJoiner joiner = new StringJoiner(\" \");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI5NDQ4Ng=="}, "originalCommit": {"oid": "112f280880ac2c81bd78a422fc0f206e83a7d3a0"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1666, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}