{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2ODgxMjMz", "number": 403, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzowODoyMVrODg4uLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoxNzo1MlrODg419w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODEwMzUwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/objects/collections/PyListTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzowODoyMVrOFrVyaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzowODoyMVrOFrVyaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MDA1Ng==", "bodyText": "this just confirms that variables do work in lists.", "url": "https://github.com/HubSpot/jinjava/pull/403#discussion_r380990056", "createdAt": "2020-02-18T23:08:21Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/objects/collections/PyListTest.java", "diffHunk": "@@ -105,4 +105,11 @@ public void itReturnsNegativeOneForMissingObjectForIndexWithinBounds() {\n     assertThat(jinjava.render(\"{% set test = [10, 20, 30, 10, 20, 30] %}\" +\n         \"{{ test.index(999, 1, 5) }}\", Collections.emptyMap())).isEqualTo(\"-1\");\n   }\n+\n+  @Test\n+  public void itInterpretsVariables() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92bf989b536c53ab14f4b13fd91455b8faef3f64"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODEyMzQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/el/ext/AstDict.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMzoxNzo1MlrOFrV-aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxOTo0Mjo0MFrOFsgu2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MzEzMQ==", "bodyText": "A possible fallback here to preserve the existing behavior would be to return the identifier name when the key evaluates to null.", "url": "https://github.com/HubSpot/jinjava/pull/403#discussion_r380993131", "createdAt": "2020-02-18T23:17:52Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/AstDict.java", "diffHunk": "@@ -33,7 +33,11 @@ public Object eval(Bindings bindings, ELContext context) {\n       if (entry.getKey() instanceof AstString) {\n         key = Objects.toString(entry.getKey().eval(bindings, context));\n       } else if (entry.getKey() instanceof AstIdentifier) {\n-        key = ((AstIdentifier) entry.getKey()).getName();\n+        Object result = entry.getKey().eval(bindings, context);\n+        if (result == null) {\n+          continue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4233e8d7ea36c37b43dccae3ac1095a19b2f1cd9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjIxNzk0Nw==", "bodyText": "I think the fallback is safer.", "url": "https://github.com/HubSpot/jinjava/pull/403#discussion_r382217947", "createdAt": "2020-02-20T19:42:40Z", "author": {"login": "mattcoley"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/AstDict.java", "diffHunk": "@@ -33,7 +33,11 @@ public Object eval(Bindings bindings, ELContext context) {\n       if (entry.getKey() instanceof AstString) {\n         key = Objects.toString(entry.getKey().eval(bindings, context));\n       } else if (entry.getKey() instanceof AstIdentifier) {\n-        key = ((AstIdentifier) entry.getKey()).getName();\n+        Object result = entry.getKey().eval(bindings, context);\n+        if (result == null) {\n+          continue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk5MzEzMQ=="}, "originalCommit": {"oid": "4233e8d7ea36c37b43dccae3ac1095a19b2f1cd9"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1757, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}