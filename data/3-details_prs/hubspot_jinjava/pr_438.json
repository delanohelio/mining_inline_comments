{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjExMzEz", "number": 438, "title": "Defer variables used in deferred nodes", "bodyText": "As a follow on to the discussion in the PR here: #421\nThis PR proposes a solution for two problems: Handling variables used within a deferred block and handling variables used in deferred blocks that occur at lower scopes.\nHandling variables used within a deferred block\nAs discussed in #421 we want a way to mark variables as deferred while we are processing so that any subsequent uses of the variable are not processed. This is achieved here by scanning the deferred node each time and finding variables used within it. These variables are then put back into the context as DeferredValues with their original value. Any subsequent uses of these variables will result in a DeferredValueException and be handled like any other deferred variable. Before adding DeferredValuesUtils this kind of logic only existed in internal HS code -I believe because it is a small bit hacky. Before now, anyone else making use of the deferred functionality would have had to have their own way to rebuild a Deferred Render Context for their 2nd stage render.\nI have also added support for finding yet undefined variables used within deferred blocks and marking them as deferred for example\n{% if deferred = 'foo' %} \n{% set newVariable = 'deferred was foo' %}\n{% else %}\n{% set newVariable = 'deferred was not foo' %}\n{% endif %}\n{{ newVariable }}\n\nPreviously this would have output newVariable as an empty undefined var. Now it will be put in the context as deferred and so will be re-output as {{ newVariable }}\nhandling variables used in deferred blocks that occur at lower scopes\nI have observed issues in using the previous implementation of deferred variables in a HS setup where things are rendered in lower contexts (eg modules) and any deferred values are lost. These changes copy any deferred values to the parent scope, again with their original value.\nI can think of some cases where this might go wrong. If you had a template, that imported the same module multiple times, the first instance of the module would muddle the global scope with its values. I don't think this more global scope should cause issues as any code making use of deferred values should be preserved and the order of execution should be consistent. I added handling for deferred values to SetTag to handle this case.", "createdAt": "2020-05-05T16:08:24Z", "url": "https://github.com/HubSpot/jinjava/pull/438", "merged": true, "mergeCommit": {"oid": "424d245a4aa173b4689a658ff12196d6fab8e3f5"}, "closed": true, "closedAt": "2020-05-14T15:35:44Z", "author": {"login": "Joeoh"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcc-hObAH2gAyNDEzNjExMzEzOmE5OTc5NmVlNjliMTc1MzFiMTA1MDIxN2YwNWMyYjFjMDcyZDhiOTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchPMx1gH2gAyNDEzNjExMzEzOjA3ZDk1NTVhMWI3YmJmMmY3YzUyY2JkNDE4NGEzMzdkYzZiNDI2OGY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a99796ee69b17531b1050217f05c2b1c072d8b90", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/a99796ee69b17531b1050217f05c2b1c072d8b90", "committedDate": "2020-05-01T09:46:22Z", "message": "rename addDeferredNode to handleDeferredNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f41f790695d496eefe49a3a6c7c78a47a6e6594", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/9f41f790695d496eefe49a3a6c7c78a47a6e6594", "committedDate": "2020-05-01T09:46:55Z", "message": "Mark whole property instead of individual children"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ae65e4157203e849d2d180bd3610b07f8926745", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/4ae65e4157203e849d2d180bd3610b07f8926745", "committedDate": "2020-05-01T10:58:25Z", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into defer-variables-used-in-deferred"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a84d876ec107d27192cf56e7312bbd173f422372", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/a84d876ec107d27192cf56e7312bbd173f422372", "committedDate": "2020-05-05T10:07:13Z", "message": "Merge branch 'master' of github.com:HubSpot/jinjava into defer-variables-used-in-deferred"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab803cf5ccea1799561fd55ceb5d25c83799f6f", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/aab803cf5ccea1799561fd55ceb5d25c83799f6f", "committedDate": "2020-05-05T10:54:47Z", "message": "Add deferred value utils and tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9896cc494643cd520a1e9f59fe1de688435312f", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/e9896cc494643cd520a1e9f59fe1de688435312f", "committedDate": "2020-05-05T15:31:06Z", "message": "Copy deferred property to parent scope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "018789c12ed7558a0d7cd0c9486d1d6ae75fbb72", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/018789c12ed7558a0d7cd0c9486d1d6ae75fbb72", "committedDate": "2020-05-05T16:08:17Z", "message": "Handle overwriting deferred values in set tags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1be99922338ede5182bde5fa1086c13c92cadc22", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/1be99922338ede5182bde5fa1086c13c92cadc22", "committedDate": "2020-05-05T16:14:35Z", "message": "Use varItem for multi assign"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d49ce143c3eb3ff780d508e7b8ba668c9551baa9", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/d49ce143c3eb3ff780d508e7b8ba668c9551baa9", "committedDate": "2020-05-06T16:11:34Z", "message": "Find undeclared variables used in deferred block and mark as deferred"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/de40fee56e3de6d789996caef47a952a5efe1a53", "committedDate": "2020-05-07T10:12:14Z", "message": "Fix property splitting and initialise context in tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MjYwNjQ2", "url": "https://github.com/HubSpot/jinjava/pull/438#pullrequestreview-408260646", "createdAt": "2020-05-08T14:01:53Z", "commit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4ODE0NzY5", "url": "https://github.com/HubSpot/jinjava/pull/438#pullrequestreview-408814769", "createdAt": "2020-05-11T01:41:27Z", "commit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo0MToyN1rOGTJ4XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMTo1MTo0NVrOGTKAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczODAxMw==", "bodyText": "Could you use the name defined here? \n  \n    \n      jinjava/src/main/java/com/hubspot/jinjava/lib/tag/SetTag.java\n    \n    \n         Line 65\n      in\n      5cb2463\n    \n    \n    \n    \n\n        \n          \n           public static final String TAG_NAME = \"set\";", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422738013", "createdAt": "2020-05-11T01:41:27Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.hubspot.jinjava.util;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.tree.ExpressionNode;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.TextNode;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class DeferredValueUtils {\n+  private static final String TEMPLATE_TAG_REGEX = \"(\\\\w+(?:\\\\.\\\\w+)*)\";\n+  private static final Pattern TEMPLATE_TAG_PATTERN = Pattern.compile(TEMPLATE_TAG_REGEX);\n+\n+  private static final Pattern SET_TAG_PATTERN = Pattern.compile(\n+    \"set \" + TEMPLATE_TAG_REGEX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTI4Ng==", "bodyText": "I don't think this will work with multivariable assignments like set myvar1, myvar2, myvar3, myvar4 = ... I'm not sure you'd want to though as that might make things very complex.", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422739286", "createdAt": "2020-05-11T01:48:01Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/util/DeferredValueUtils.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package com.hubspot.jinjava.util;\n+\n+import com.google.common.base.Strings;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Sets;\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValue;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.tree.ExpressionNode;\n+import com.hubspot.jinjava.tree.Node;\n+import com.hubspot.jinjava.tree.TagNode;\n+import com.hubspot.jinjava.tree.TextNode;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.StringJoiner;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public class DeferredValueUtils {\n+  private static final String TEMPLATE_TAG_REGEX = \"(\\\\w+(?:\\\\.\\\\w+)*)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjczOTk0Nw==", "bodyText": "Might be nicer to put these in fixture files like some of the other tests.", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422739947", "createdAt": "2020-05-11T01:51:18Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -183,4 +187,169 @@ public void itDefersMacro() {\n     String output = interpreter.render(deferredOutput);\n     assertThat(output).isEqualTo(\"0,10,15,25\");\n   }\n+\n+  @Test\n+  public void itDefersAllVariablesUsedInDeferredNode() {\n+    String template = \"\";\n+    template += \"{% set varUsedInForScope = 'outside if statement' %}\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varUsedInForScope }}\";\n+    template += \"     {% set varUsedInForScope = 'entered if statement' %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"   {{ varUsedInForScope }}\";\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"varUsedInForScope\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"outside if statement\");\n+\n+    JinjavaInterpreter.popCurrent();\n+    HashMap<String, Object> deferredContext = DeferredValueUtils.getDeferredContextWithOriginalValues(\n+      interpreter.getContext()\n+    );\n+    deferredContext.forEach(interpreter.getContext()::put);\n+    String secondRender = interpreter.render(output);\n+    assertThat(secondRender)\n+      .isEqualTo(\"        outside if statement           entered if statement\");\n+\n+    interpreter.getContext().put(\"deferred\", DeferredValue.instance());\n+    interpreter.getContext().put(\"resolved\", \"resolvedValue\");\n+  }\n+\n+  @Test\n+  public void itDefersDependantVariables() {\n+    String template = \"\";\n+    template +=\n+      \"{% set resolved_variable = 'resolved' %} {% set deferred_variable = deferred + '-' + resolved_variable %}\";\n+    template += \"{{ deferred_variable }}\";\n+    interpreter.render(template);\n+    interpreter.getContext().get(\"resolved_variable\");\n+  }\n+\n+  @Test\n+  public void itDefersVariablesComparedAgainstDeferredVals() {\n+    String template = \"\";\n+    template += \"{% set testVar = 'testvalue' %}\";\n+    template += \"{% if deferred == testVar %} true {% else %} false {% endif %}\";\n+\n+    interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"testVar\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"testvalue\");\n+  }\n+\n+  @Test\n+  public void itPutsDeferredVariablesOnParentScopes() {\n+    String template = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc0MDAzMg==", "bodyText": "comment needed?", "url": "https://github.com/HubSpot/jinjava/pull/438#discussion_r422740032", "createdAt": "2020-05-11T01:51:45Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/interpret/DeferredTest.java", "diffHunk": "@@ -183,4 +187,169 @@ public void itDefersMacro() {\n     String output = interpreter.render(deferredOutput);\n     assertThat(output).isEqualTo(\"0,10,15,25\");\n   }\n+\n+  @Test\n+  public void itDefersAllVariablesUsedInDeferredNode() {\n+    String template = \"\";\n+    template += \"{% set varUsedInForScope = 'outside if statement' %}\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varUsedInForScope }}\";\n+    template += \"     {% set varUsedInForScope = 'entered if statement' %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"   {{ varUsedInForScope }}\";\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"varUsedInForScope\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"outside if statement\");\n+\n+    JinjavaInterpreter.popCurrent();\n+    HashMap<String, Object> deferredContext = DeferredValueUtils.getDeferredContextWithOriginalValues(\n+      interpreter.getContext()\n+    );\n+    deferredContext.forEach(interpreter.getContext()::put);\n+    String secondRender = interpreter.render(output);\n+    assertThat(secondRender)\n+      .isEqualTo(\"        outside if statement           entered if statement\");\n+\n+    interpreter.getContext().put(\"deferred\", DeferredValue.instance());\n+    interpreter.getContext().put(\"resolved\", \"resolvedValue\");\n+  }\n+\n+  @Test\n+  public void itDefersDependantVariables() {\n+    String template = \"\";\n+    template +=\n+      \"{% set resolved_variable = 'resolved' %} {% set deferred_variable = deferred + '-' + resolved_variable %}\";\n+    template += \"{{ deferred_variable }}\";\n+    interpreter.render(template);\n+    interpreter.getContext().get(\"resolved_variable\");\n+  }\n+\n+  @Test\n+  public void itDefersVariablesComparedAgainstDeferredVals() {\n+    String template = \"\";\n+    template += \"{% set testVar = 'testvalue' %}\";\n+    template += \"{% if deferred == testVar %} true {% else %} false {% endif %}\";\n+\n+    interpreter.render(template);\n+    Object varInScope = interpreter.getContext().get(\"testVar\");\n+    assertThat(varInScope).isInstanceOf(DeferredValue.class);\n+    DeferredValue varInScopeDeferred = (DeferredValue) varInScope;\n+    assertThat(varInScopeDeferred.getOriginalValue()).isEqualTo(\"testvalue\");\n+  }\n+\n+  @Test\n+  public void itPutsDeferredVariablesOnParentScopes() {\n+    String template = \"\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% set varSetInside = 'inside first scope' %}\";\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varSetInside }}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    DeferredValue varSetInsideDeferred = (DeferredValue) varSetInside;\n+    assertThat(varSetInsideDeferred.getOriginalValue()).isEqualTo(\"inside first scope\");\n+  }\n+\n+  @Test\n+  public void puttingDeferredVariablesOnParentScopesDoesNotBreakSetTag() {\n+    String template = \"\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% set varSetInside = 'inside first scope' %}\";\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varSetInside }}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{% endfor %}\";\n+    template += \"{% for item in resolved %}\"; //Creating an inner scope\n+    template += \"   {% set varSetInside = 'inside first scope2' %}\";\n+    template += \"   {% if deferredValue %}\"; //Deferred Node\n+    template += \"     {{ varSetInside }}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{% endfor %}\";\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    DeferredValue varSetInsideDeferred = (DeferredValue) varSetInside;\n+    assertThat(varSetInsideDeferred.getOriginalValue()).isEqualTo(\"inside first scope\");\n+\n+    JinjavaInterpreter.popCurrent();\n+    HashMap<String, Object> deferredContext = DeferredValueUtils.getDeferredContextWithOriginalValues(\n+      interpreter.getContext()\n+    );\n+    deferredContext.forEach(interpreter.getContext()::put);\n+    String secondRender = interpreter.render(output);\n+    assertThat(secondRender.trim())\n+      .isEqualTo(\"inside first scope              inside first scope2\".trim());\n+  }\n+\n+  @Test\n+  public void itMarksVariablesSetInDeferredBlockAsDeferred() {\n+    String template = \"\";\n+    template += \"   {% set reference = deferredValue %}\";\n+    template += \"   {% if reference == 'resolved' %}\"; //Deferred Node\n+    template += \"     {% set varSetInside = 'set inside' %}\";\n+    template += \"   {% endif %}\"; // end Deferred Node\n+    template += \"{{ varSetInside }}\";\n+    JinjavaInterpreter.popCurrent();\n+\n+    interpreter.getContext().put(\"deferredValue\", DeferredValue.instance(\"resolved\"));\n+    String output = interpreter.render(template);\n+    assertThat(interpreter.getContext()).containsKey(\"varSetInside\");\n+    Object varSetInside = interpreter.getContext().get(\"varSetInside\");\n+    assertThat(varSetInside).isInstanceOf(DeferredValue.class);\n+    assertThat(output).contains(\"{{ varSetInside }}\");\n+  }\n+\n+  @Test\n+  public void itMarksVariablesUsedAsMapKeysAsDeferred() {\n+    /*    {% set week_number = contact.MOweekno %}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de40fee56e3de6d789996caef47a952a5efe1a53"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eabeeef1de3712310edf689b144c223d6f987bce", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/eabeeef1de3712310edf689b144c223d6f987bce", "committedDate": "2020-05-11T15:07:45Z", "message": "Add tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a478a39b62472d13fc1445d5aba4fe658557ed4d", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/a478a39b62472d13fc1445d5aba4fe658557ed4d", "committedDate": "2020-05-14T10:38:28Z", "message": "Tidy up tests using fixtures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23451f32641509073ee918389e9f4dd11bc9a214", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/23451f32641509073ee918389e9f4dd11bc9a214", "committedDate": "2020-05-14T10:38:39Z", "message": "Use set tag constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c06163b641e9c21ff9712db4bf045d7d7499ae34", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/c06163b641e9c21ff9712db4bf045d7d7499ae34", "committedDate": "2020-05-14T14:34:08Z", "message": "rename fixtures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "347d3835167334841e3380103abad81000af4b1e", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/347d3835167334841e3380103abad81000af4b1e", "committedDate": "2020-05-14T14:35:30Z", "message": "Simplify finding properties used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07d9555a1b7bbf2f7c52cbd4184a337dc6b4268f", "author": {"user": {"login": "Joeoh", "name": "Joe"}}, "url": "https://github.com/HubSpot/jinjava/commit/07d9555a1b7bbf2f7c52cbd4184a337dc6b4268f", "committedDate": "2020-05-14T15:28:07Z", "message": "Handle set tags more directly"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2518, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}