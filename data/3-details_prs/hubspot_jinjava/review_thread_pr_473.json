{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTU4NTA3", "number": 473, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozNDoyOFrOEYNLFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDowMTozN1rOEZDxRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODE3MTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozNDoyOFrOHAauAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo0NTo1NVrOHBpbAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5OTgxMQ==", "bodyText": "TODO: don't forget to delete!", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r470199811", "createdAt": "2020-08-13T19:34:28Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+public class RegularDivOperator extends SimpleOperator {\n+  public static final Scanner.ExtensionToken TOKEN = new Scanner.ExtensionToken(\"/\");\n+  public static final RegularDivOperator OP = new RegularDivOperator();\n+\n+  @Override\n+  protected Object apply(TypeConverter converter, Object a, Object b) {\n+    if (a == null || b == null) {\n+      throw new IllegalArgumentException(\"Division argument may not be null\");\n+    }\n+\n+    // Debugging support only -- Delete me", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d832767a08da98a2078cd4365c0d27a07b0b6397"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ2OTMwOA==", "bodyText": "Deleted", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r471469308", "createdAt": "2020-08-17T13:14:06Z", "author": {"login": "bszabo"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+public class RegularDivOperator extends SimpleOperator {\n+  public static final Scanner.ExtensionToken TOKEN = new Scanner.ExtensionToken(\"/\");\n+  public static final RegularDivOperator OP = new RegularDivOperator();\n+\n+  @Override\n+  protected Object apply(TypeConverter converter, Object a, Object b) {\n+    if (a == null || b == null) {\n+      throw new IllegalArgumentException(\"Division argument may not be null\");\n+    }\n+\n+    // Debugging support only -- Delete me", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5OTgxMQ=="}, "originalCommit": {"oid": "d832767a08da98a2078cd4365c0d27a07b0b6397"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4OTI4Mg==", "bodyText": "I did have a question earlier on, when I was assuming thatRegularDivOperator should return a long when dividing long arguments and that it should return a double when dividing double or mixed arguments. When I tried coding RegularDivOperator that way I got a regression failure on the ExpressionResolverTest.itResolvesMathVals(), which was expecting a result of \"5.0\" when dividing 15L by 3L. Switching to having RegularDivOperator always return a double made the question about how to simply and reliably format the result vanish. It also fixed the regression and yielded a clean build.", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r471489282", "createdAt": "2020-08-17T13:45:55Z", "author": {"login": "bszabo"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+public class RegularDivOperator extends SimpleOperator {\n+  public static final Scanner.ExtensionToken TOKEN = new Scanner.ExtensionToken(\"/\");\n+  public static final RegularDivOperator OP = new RegularDivOperator();\n+\n+  @Override\n+  protected Object apply(TypeConverter converter, Object a, Object b) {\n+    if (a == null || b == null) {\n+      throw new IllegalArgumentException(\"Division argument may not be null\");\n+    }\n+\n+    // Debugging support only -- Delete me", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5OTgxMQ=="}, "originalCommit": {"oid": "d832767a08da98a2078cd4365c0d27a07b0b6397"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODE3NzA0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozNjoxOFrOHAaxoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozNjoxOFrOHAaxoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMDczNw==", "bodyText": "we favor rspec-style test names like itDividesLongsWithNonZeroDivisor", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r470200737", "createdAt": "2020-08-13T19:36:18Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class RegularDivTest {\n+  private Jinjava jinja;\n+\n+  @Before\n+  public void setUp() {\n+    jinja = new Jinjava();\n+  }\n+\n+  @Test\n+  public void okOnLongDivisionWithNonZeroDivisor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d832767a08da98a2078cd4365c0d27a07b0b6397"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODE4MDI3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozNzoxOFrOHAazlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzo0ODoxMVrOHBpg2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIzOA==", "bodyText": "Does the normal division operator return division of longs with a decimal point?", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r470201238", "createdAt": "2020-08-13T19:37:18Z", "author": {"login": "boulter"}, "path": "src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class RegularDivTest {\n+  private Jinjava jinja;\n+\n+  @Before\n+  public void setUp() {\n+    jinja = new Jinjava();\n+  }\n+\n+  @Test\n+  public void okOnLongDivisionWithNonZeroDivisor() {\n+    assertEquals(jinja.render(\"{% set x = 10 / 2%}{{x}}\", new HashMap<>()), \"5.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d832767a08da98a2078cd4365c0d27a07b0b6397"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5MDc3Ng==", "bodyText": "(Cut-and-pasted from my reply to \"Did you have a question ...\" comment above). When I tried coding RegularDivOperator to return a long on division of long arguments I got a regression failure on the ExpressionResolverTest.itResolvesMathVals(), which was expecting a result of \"5.0\" when dividing 15L by 3L. Switching to having RegularDivOperator always return a double fixed the regression and yielded a clean build.", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r471490776", "createdAt": "2020-08-17T13:48:11Z", "author": {"login": "bszabo"}, "path": "src/test/java/com/hubspot/jinjava/el/ext/RegularDivTest.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+import com.hubspot.jinjava.Jinjava;\n+import java.util.HashMap;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class RegularDivTest {\n+  private Jinjava jinja;\n+\n+  @Before\n+  public void setUp() {\n+    jinja = new Jinjava();\n+  }\n+\n+  @Test\n+  public void okOnLongDivisionWithNonZeroDivisor() {\n+    assertEquals(jinja.render(\"{% set x = 10 / 2%}{{x}}\", new HashMap<>()), \"5.0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIzOA=="}, "originalCommit": {"oid": "d832767a08da98a2078cd4365c0d27a07b0b6397"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODE4MzU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozODowN1rOHAa1dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozODowN1rOHAa1dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTcxOA==", "bodyText": "don't you only need to check the doubleValue?", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r470201718", "createdAt": "2020-08-13T19:38:07Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "diffHunk": "@@ -0,0 +1,46 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+public class RegularDivOperator extends SimpleOperator {\n+  public static final Scanner.ExtensionToken TOKEN = new Scanner.ExtensionToken(\"/\");\n+  public static final RegularDivOperator OP = new RegularDivOperator();\n+\n+  @Override\n+  protected Object apply(TypeConverter converter, Object a, Object b) {\n+    if (a == null || b == null) {\n+      throw new IllegalArgumentException(\"Division argument may not be null\");\n+    }\n+\n+    // Debugging support only -- Delete me\n+    //    Type typeA = a.getClass();\n+    //    String typeNameA = typeA.getTypeName();\n+    //    Type typeB = b.getClass();\n+    //    String typeNameB = typeB.getTypeName();\n+    // End of debugging support\n+\n+    Number numA = (Number) a;\n+    Number numB = (Number) b;\n+    if (numB.longValue() == 0 || numB.doubleValue() == 0.0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d832767a08da98a2078cd4365c0d27a07b0b6397"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzExNjIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDowMTozN1rOHBqD5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNDowMTozN1rOHBqD5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ5OTc0OA==", "bodyText": "I think this could simply be called DivOperator.\nAlso I think it would be worth a comment on why this was overridden.", "url": "https://github.com/HubSpot/jinjava/pull/473#discussion_r471499748", "createdAt": "2020-08-17T14:01:37Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/el/ext/RegularDivOperator.java", "diffHunk": "@@ -0,0 +1,39 @@\n+package com.hubspot.jinjava.el.ext;\n+\n+import de.odysseus.el.misc.TypeConverter;\n+import de.odysseus.el.tree.impl.Parser.ExtensionHandler;\n+import de.odysseus.el.tree.impl.Parser.ExtensionPoint;\n+import de.odysseus.el.tree.impl.Scanner;\n+import de.odysseus.el.tree.impl.ast.AstBinary;\n+import de.odysseus.el.tree.impl.ast.AstBinary.SimpleOperator;\n+import de.odysseus.el.tree.impl.ast.AstNode;\n+\n+public class RegularDivOperator extends SimpleOperator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aca835942eae909619a749045d571b43f000c40a"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1712, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}