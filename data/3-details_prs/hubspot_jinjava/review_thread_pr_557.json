{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTkxMTAz", "number": 557, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozMjo0M1rOE_rQOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNDoxMVrOE_rTXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjA0NDEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozMjo0M1rOH9gqww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNjoyNjoyM1rOH9jT2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MDQxOQ==", "bodyText": "A more general question here:\nYou probably understand this better than me at this point, but why don't we implement this by manipulating the tree directly?\nThe way most compilers work is by parsing the code up into a tree (which we have), doing n passes through the tree to manipulate nodes and perform evaluation when possible. Then they write out the code in one pass. Could we do that here instead of returning a string as the output?", "url": "https://github.com/HubSpot/jinjava/pull/557#discussion_r534260419", "createdAt": "2020-12-02T15:32:43Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.lib.tag.SetTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n+\n+  public EagerSetTag() {\n+    super(new SetTag());\n+  }\n+\n+  public EagerSetTag(SetTag setTag) {\n+    super(setTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMwMzcwNQ==", "bodyText": "The jinjava engine is an interpreter rather than a compiler so it parses one line at a time into its output. Not lines exactly, as it first parses the template into a tree, and then it interprets each node in that tree as it sees it (because unlike python, jinja doesn't have a strong line-based syntax).\nThe way I have this implemented is so that nodes are still evaluated on the fly, but their evaluation is handled differently when a value is deferred. Rather than throwing an error there, a specific output can be generated such that running that output with resolved values will produce the same output as running the original with resolved values, but faster. This approach allows for the sequential node evaluation to be done as normal.\nIn a different rendering engine that's more c-based than python-based, it would probably be done by manipulating the tree", "url": "https://github.com/HubSpot/jinjava/pull/557#discussion_r534303705", "createdAt": "2020-12-02T16:26:23Z", "author": {"login": "jasmith-hs"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.lib.tag.SetTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n+\n+  public EagerSetTag() {\n+    super(new SetTag());\n+  }\n+\n+  public EagerSetTag(SetTag setTag) {\n+    super(setTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MDQxOQ=="}, "originalCommit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjA1MjEzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTozNDoxMVrOH9gvnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTozODoxMVrOIAsv-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MTY2MA==", "bodyText": "did we decide on a different name for isProtectedMode? Every time I see it, I can't remember what it protects from.", "url": "https://github.com/HubSpot/jinjava/pull/557#discussion_r534261660", "createdAt": "2020-12-02T15:34:11Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.lib.tag.SetTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n+\n+  public EagerSetTag() {\n+    super(new SetTag());\n+  }\n+\n+  public EagerSetTag(SetTag setTag) {\n+    super(setTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    if (!tagToken.getHelpers().contains(\"=\")) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        tagToken.getImage(),\n+        \"Tag 'set' expects an assignment expression with '=', but was: \" +\n+        tagToken.getHelpers()\n+      );\n+    }\n+\n+    int eqPos = tagToken.getHelpers().indexOf('=');\n+    String variables = tagToken.getHelpers().substring(0, eqPos).trim();\n+\n+    String expression = tagToken.getHelpers().substring(eqPos + 1);\n+    if (interpreter.getContext().containsKey(Context.IMPORT_RESOURCE_ALIAS)) {\n+      return interpreter.render(\n+        convertSetToUpdate(variables, expression, tagToken, interpreter)\n+      );\n+    }\n+    ChunkResolver chunkResolver = new ChunkResolver(expression, tagToken, interpreter);\n+    EagerStringResult resolvedExpression = executeInChildContext(\n+      eagerInterpreter -> chunkResolver.resolveChunks(),\n+      interpreter,\n+      true\n+    );\n+    StringJoiner joiner = new StringJoiner(\" \");\n+    joiner\n+      .add(tagToken.getSymbols().getExpressionStartWithTag())\n+      .add(tagToken.getTagName())\n+      .add(variables)\n+      .add(\"=\")\n+      .add(resolvedExpression.getResult())\n+      .add(tagToken.getSymbols().getExpressionEndWithTag());\n+    StringBuilder prefixToPreserveState = new StringBuilder(\n+      interpreter.getContext().isProtectedMode()\n+        ? resolvedExpression.getPrefixToPreserveState()\n+        : \"\"\n+    );\n+    String[] varTokens = variables.split(\",\");\n+\n+    if (\n+      chunkResolver.getDeferredWords().isEmpty() &&\n+      !interpreter.getContext().isProtectedMode()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMxMzMzNg==", "bodyText": "I have not yet come up with a better name, and I'm aware that it's not exactly clear what it does by the name.\nI have defined \"protected mode\" as a mode where the surrounding context cannot be modified such that the state of the context before entering \"protected mode\" will be the same as after exiting it. Any changes will result in the values attempted to be modified becoming DeferredValues.\nThis mode is commonly seen in IfTags and ForTags when the children are being rendered but their results need to be protected such that when the if branch/for loop is finally executed normally, the output will be correct.\nSomething like isDeferredExecutionMode might be more understandable as the code being evaluated is being partially deferred, knowing that it's final execution is being deferred", "url": "https://github.com/HubSpot/jinjava/pull/557#discussion_r534313336", "createdAt": "2020-12-02T16:38:39Z", "author": {"login": "jasmith-hs"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.lib.tag.SetTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n+\n+  public EagerSetTag() {\n+    super(new SetTag());\n+  }\n+\n+  public EagerSetTag(SetTag setTag) {\n+    super(setTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    if (!tagToken.getHelpers().contains(\"=\")) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        tagToken.getImage(),\n+        \"Tag 'set' expects an assignment expression with '=', but was: \" +\n+        tagToken.getHelpers()\n+      );\n+    }\n+\n+    int eqPos = tagToken.getHelpers().indexOf('=');\n+    String variables = tagToken.getHelpers().substring(0, eqPos).trim();\n+\n+    String expression = tagToken.getHelpers().substring(eqPos + 1);\n+    if (interpreter.getContext().containsKey(Context.IMPORT_RESOURCE_ALIAS)) {\n+      return interpreter.render(\n+        convertSetToUpdate(variables, expression, tagToken, interpreter)\n+      );\n+    }\n+    ChunkResolver chunkResolver = new ChunkResolver(expression, tagToken, interpreter);\n+    EagerStringResult resolvedExpression = executeInChildContext(\n+      eagerInterpreter -> chunkResolver.resolveChunks(),\n+      interpreter,\n+      true\n+    );\n+    StringJoiner joiner = new StringJoiner(\" \");\n+    joiner\n+      .add(tagToken.getSymbols().getExpressionStartWithTag())\n+      .add(tagToken.getTagName())\n+      .add(variables)\n+      .add(\"=\")\n+      .add(resolvedExpression.getResult())\n+      .add(tagToken.getSymbols().getExpressionEndWithTag());\n+    StringBuilder prefixToPreserveState = new StringBuilder(\n+      interpreter.getContext().isProtectedMode()\n+        ? resolvedExpression.getPrefixToPreserveState()\n+        : \"\"\n+    );\n+    String[] varTokens = variables.split(\",\");\n+\n+    if (\n+      chunkResolver.getDeferredWords().isEmpty() &&\n+      !interpreter.getContext().isProtectedMode()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MTY2MA=="}, "originalCommit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYwNDA5MQ==", "bodyText": "isDeferredExecutionMode sounds good to me.", "url": "https://github.com/HubSpot/jinjava/pull/557#discussion_r537604091", "createdAt": "2020-12-07T15:38:11Z", "author": {"login": "boulter"}, "path": "src/main/java/com/hubspot/jinjava/lib/tag/eager/EagerSetTag.java", "diffHunk": "@@ -0,0 +1,133 @@\n+package com.hubspot.jinjava.lib.tag.eager;\n+\n+import com.hubspot.jinjava.interpret.Context;\n+import com.hubspot.jinjava.interpret.DeferredValueException;\n+import com.hubspot.jinjava.interpret.JinjavaInterpreter;\n+import com.hubspot.jinjava.interpret.TemplateSyntaxException;\n+import com.hubspot.jinjava.lib.tag.DoTag;\n+import com.hubspot.jinjava.lib.tag.SetTag;\n+import com.hubspot.jinjava.tree.parse.TagToken;\n+import com.hubspot.jinjava.util.ChunkResolver;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+public class EagerSetTag extends EagerStateChangingTag<SetTag> {\n+\n+  public EagerSetTag() {\n+    super(new SetTag());\n+  }\n+\n+  public EagerSetTag(SetTag setTag) {\n+    super(setTag);\n+  }\n+\n+  @Override\n+  public String getEagerTagImage(TagToken tagToken, JinjavaInterpreter interpreter) {\n+    if (!tagToken.getHelpers().contains(\"=\")) {\n+      throw new TemplateSyntaxException(\n+        interpreter,\n+        tagToken.getImage(),\n+        \"Tag 'set' expects an assignment expression with '=', but was: \" +\n+        tagToken.getHelpers()\n+      );\n+    }\n+\n+    int eqPos = tagToken.getHelpers().indexOf('=');\n+    String variables = tagToken.getHelpers().substring(0, eqPos).trim();\n+\n+    String expression = tagToken.getHelpers().substring(eqPos + 1);\n+    if (interpreter.getContext().containsKey(Context.IMPORT_RESOURCE_ALIAS)) {\n+      return interpreter.render(\n+        convertSetToUpdate(variables, expression, tagToken, interpreter)\n+      );\n+    }\n+    ChunkResolver chunkResolver = new ChunkResolver(expression, tagToken, interpreter);\n+    EagerStringResult resolvedExpression = executeInChildContext(\n+      eagerInterpreter -> chunkResolver.resolveChunks(),\n+      interpreter,\n+      true\n+    );\n+    StringJoiner joiner = new StringJoiner(\" \");\n+    joiner\n+      .add(tagToken.getSymbols().getExpressionStartWithTag())\n+      .add(tagToken.getTagName())\n+      .add(variables)\n+      .add(\"=\")\n+      .add(resolvedExpression.getResult())\n+      .add(tagToken.getSymbols().getExpressionEndWithTag());\n+    StringBuilder prefixToPreserveState = new StringBuilder(\n+      interpreter.getContext().isProtectedMode()\n+        ? resolvedExpression.getPrefixToPreserveState()\n+        : \"\"\n+    );\n+    String[] varTokens = variables.split(\",\");\n+\n+    if (\n+      chunkResolver.getDeferredWords().isEmpty() &&\n+      !interpreter.getContext().isProtectedMode()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDI2MTY2MA=="}, "originalCommit": {"oid": "522a0af059234b01655f0d05b6415130d0c8d746"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1665, "cost": 1, "resetAt": "2021-11-12T20:44:06Z"}}}