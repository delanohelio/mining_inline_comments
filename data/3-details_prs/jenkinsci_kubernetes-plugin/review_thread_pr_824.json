{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTYyNDU4", "number": 824, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowMzozMlrOEdsVxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowNDowMlrOEe5NOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTcwNjMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowMzozM1rOHJANrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzo0OTozM1rOHJ5piQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwMjczMw==", "bodyText": "Should be in another PR", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479202733", "createdAt": "2020-08-28T12:03:33Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -580,9 +579,10 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n      * Check not too many already running.\n      *\n      */\n-    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int scheduledCount) throws Exception {\n+    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned,\n+                                        int numInProvisioning) throws Exception {\n         if (containerCap == 0) {\n-            return true;\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1ODIyMw==", "bodyText": "Please move this one to another PR for clarity.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479958223", "createdAt": "2020-08-31T07:51:37Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -580,9 +579,10 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n      * Check not too many already running.\n      *\n      */\n-    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int scheduledCount) throws Exception {\n+    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned,\n+                                        int numInProvisioning) throws Exception {\n         if (containerCap == 0) {\n-            return true;\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwMjczMw=="}, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEyMDQyNQ==", "bodyText": "OK, will do.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480120425", "createdAt": "2020-08-31T13:13:04Z", "author": {"login": "schottsfired"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -580,9 +579,10 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n      * Check not too many already running.\n      *\n      */\n-    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int scheduledCount) throws Exception {\n+    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned,\n+                                        int numInProvisioning) throws Exception {\n         if (containerCap == 0) {\n-            return true;\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwMjczMw=="}, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE0Mzc1Mw==", "bodyText": "Moved to #828", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480143753", "createdAt": "2020-08-31T13:49:33Z", "author": {"login": "schottsfired"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -580,9 +579,10 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n      * Check not too many already running.\n      *\n      */\n-    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int scheduledCount) throws Exception {\n+    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned,\n+                                        int numInProvisioning) throws Exception {\n         if (containerCap == 0) {\n-            return true;\n+            return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwMjczMw=="}, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTcxMjEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowNDoyNlrOHJARdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowNDoyNlrOHJARdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwMzcwMg==", "bodyText": "Avoid reformatting if you can to make the review easier.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479203702", "createdAt": "2020-08-28T12:04:26Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -593,23 +593,27 @@ private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull\n             templateNamespace = client.getNamespace();\n         }\n \n+        // check overall concurrency limit using the default label(s) on all templates\n         Map<String, String> podLabels = getPodLabelsMap();\n-        List<Pod> allActiveSlavePods = getActiveSlavePods(client, templateNamespace, podLabels);\n-        if (allActiveSlavePods != null && containerCap <= allActiveSlavePods.size() + scheduledCount) {\n+        long numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= containerCap) {\n             LOGGER.log(Level.INFO,\n-                    \"Maximum number of concurrently running agent pods ({0}) reached for Kubernetes Cloud {4}, not provisioning: {1} running or pending in namespace {2} with Kubernetes labels {3}\",\n-                    new Object[] { containerCap, allActiveSlavePods.size() + scheduledCount, templateNamespace, getLabels(), name });\n+                    \"Maximum number of concurrently running agent pods ({0}) reached for Kubernetes Cloud {4}, \" +\n+                            \"not provisioning: {1} running or pending in namespace {2} with Kubernetes labels {3}\",\n+                    new Object[] { containerCap, numRunningOrPending, templateNamespace, getLabels(), name });\n             return false;\n         }\n \n-        Map<String, String> labelsMap = new HashMap<>(podLabels);\n-        labelsMap.putAll(template.getLabelsMap());\n-        List<Pod> activeTemplateSlavePods = getActiveSlavePods(client, templateNamespace, labelsMap);\n-        if (activeTemplateSlavePods != null && allActiveSlavePods != null && template.getInstanceCap() <= activeTemplateSlavePods.size() + scheduledCount) {\n+        // check template-level concurrency limit using template-level labels\n+        Map<String, String> templateLabels = new HashMap<>(podLabels);\n+        templateLabels.putAll(template.getLabelsMap());\n+        numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= template.getInstanceCap()) {\n             LOGGER.log(Level.INFO,\n-                    \"Maximum number of concurrently running agent pods ({0}) reached for template {1} in Kubernetes Cloud {6}, not provisioning: {2} running or pending in namespace {3} with label \\\"{4}\\\" and Kubernetes labels {5}\",\n-                    new Object[] { template.getInstanceCap(), template.getName(), activeTemplateSlavePods.size() + scheduledCount,\n-                            templateNamespace, label == null ? \"\" : label.toString(), labelsMap, name });\n+                    \"Maximum number of concurrently running agent pods ({0}) reached for template {1} in Kubernetes Cloud {6}, \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTg3ODE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/jenkins/plugins/kubernetes/NoDelayProvisionerStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyODozMlrOHJB_pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyODozMlrOHJB_pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMTkxMQ==", "bodyText": "Keep the diff smaller by avoiding gratuitous changes. Can always file separate stylistic cleanup PRs.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479231911", "createdAt": "2020-08-28T12:28:32Z", "author": {"login": "jglick"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/NoDelayProvisionerStrategy.java", "diffHunk": "@@ -30,12 +30,12 @@\n public class NoDelayProvisionerStrategy extends NodeProvisioner.Strategy {\n \n     private static final Logger LOGGER = Logger.getLogger(NoDelayProvisionerStrategy.class.getName());\n-    private static final boolean DISABLE_NODELAY_PROVISING = Boolean.valueOf(\n+    private static final boolean DISABLE_NO_DELAY_PROVISIONING = Boolean.parseBoolean(\n             System.getProperty(\"io.jenkins.plugins.kubernetes.disableNoDelayProvisioning\"));\n \n     @Override\n     public NodeProvisioner.StrategyDecision apply(NodeProvisioner.StrategyState strategyState) {\n-        if (DISABLE_NODELAY_PROVISING) {\n+        if (DISABLE_NO_DELAY_PROVISIONING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5NTg5MDI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozMDoxNFrOHJCHvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozMDoxNFrOHJCHvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMzk4Mw==", "bodyText": "Also could be reverted to minimize review surface.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479233983", "createdAt": "2020-08-28T12:30:14Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -541,24 +539,25 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n             int toBeProvisioned = Math.max(0, excessWorkload - allInProvisioning.size());\n             LOGGER.log(Level.INFO, \"Excess workload after pending Kubernetes agents: {0}\", toBeProvisioned);\n \n-            List<NodeProvisioner.PlannedNode> r = new ArrayList<NodeProvisioner.PlannedNode>();\n+            List<NodeProvisioner.PlannedNode> plannedNodes = new ArrayList<>();\n \n-            for (PodTemplate t: getTemplatesFor(label)) {\n-                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, t.getName() });\n+            for (PodTemplate podTemplate: getTemplatesFor(label)) {\n+                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, podTemplate.getName() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTAzMzExOnYy", "diffSide": "RIGHT", "path": "src/test/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloudTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzo1MjozNlrOHJuWpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzowMjozOFrOHJ33gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1ODY5NQ==", "bodyText": "I guess it goes with https://github.com/jenkinsci/kubernetes-plugin/pull/824/files#r479202733 ?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479958695", "createdAt": "2020-08-31T07:52:36Z", "author": {"login": "Vlatombe"}, "path": "src/test/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloudTest.java", "diffHunk": "@@ -221,6 +221,11 @@ public KubernetesClient connect()  {\n         Collection<NodeProvisioner.PlannedNode> plannedNodes = cloud.provision(test, 200);\n         assertEquals(200, plannedNodes.size());\n \n+        cloud.setContainerCapStr(\"0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ffd60a39c2308ccb34d3f35982c27446ec9011"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDExNDU2MQ==", "bodyText": "yes, it does", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480114561", "createdAt": "2020-08-31T13:02:38Z", "author": {"login": "schottsfired"}, "path": "src/test/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloudTest.java", "diffHunk": "@@ -221,6 +221,11 @@ public KubernetesClient connect()  {\n         Collection<NodeProvisioner.PlannedNode> plannedNodes = cloud.provision(test, 200);\n         assertEquals(200, plannedNodes.size());\n \n+        cloud.setContainerCapStr(\"0\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1ODY5NQ=="}, "originalCommit": {"oid": "c8ffd60a39c2308ccb34d3f35982c27446ec9011"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjUyNjI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1Nzo0NlrOHJ8U0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxODowNjoxNFrOHKDEIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzYwMQ==", "bodyText": "In the method you always add inProvisioning to the other count.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (!addProvisionedSlave(podTemplate, label, i, allInProvisioning.size())) {\n          \n          \n            \n                                if (!addProvisionedSlave(podTemplate, label, i + allInProvisioning.size())) {", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480187601", "createdAt": "2020-08-31T14:57:46Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -541,24 +539,25 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n             int toBeProvisioned = Math.max(0, excessWorkload - allInProvisioning.size());\n             LOGGER.log(Level.INFO, \"Excess workload after pending Kubernetes agents: {0}\", toBeProvisioned);\n \n-            List<NodeProvisioner.PlannedNode> r = new ArrayList<NodeProvisioner.PlannedNode>();\n+            List<NodeProvisioner.PlannedNode> plannedNodes = new ArrayList<>();\n \n-            for (PodTemplate t: getTemplatesFor(label)) {\n-                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, t.getName() });\n+            for (PodTemplate podTemplate: getTemplatesFor(label)) {\n+                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, podTemplate.getName() });\n                 for (int i = 0; i < toBeProvisioned; i++) {\n-                    if (!addProvisionedSlave(t, label, i)) {\n+                    // Check concurrency limits\n+                    if (!addProvisionedSlave(podTemplate, label, i, allInProvisioning.size())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDI5ODAxNw==", "bodyText": "Right, this is a better place to do the addition vs. modifying the method signature.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480298017", "createdAt": "2020-08-31T18:06:14Z", "author": {"login": "schottsfired"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -541,24 +539,25 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n             int toBeProvisioned = Math.max(0, excessWorkload - allInProvisioning.size());\n             LOGGER.log(Level.INFO, \"Excess workload after pending Kubernetes agents: {0}\", toBeProvisioned);\n \n-            List<NodeProvisioner.PlannedNode> r = new ArrayList<NodeProvisioner.PlannedNode>();\n+            List<NodeProvisioner.PlannedNode> plannedNodes = new ArrayList<>();\n \n-            for (PodTemplate t: getTemplatesFor(label)) {\n-                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, t.getName() });\n+            for (PodTemplate podTemplate: getTemplatesFor(label)) {\n+                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, podTemplate.getName() });\n                 for (int i = 0; i < toBeProvisioned; i++) {\n-                    if (!addProvisionedSlave(t, label, i)) {\n+                    // Check concurrency limits\n+                    if (!addProvisionedSlave(podTemplate, label, i, allInProvisioning.size())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzYwMQ=="}, "originalCommit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjUzMDAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1ODo0NFrOHJ8XMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1ODo0NFrOHJ8XMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4ODIxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned,\n          \n          \n            \n                                                    int numInProvisioning) throws Exception {\n          \n          \n            \n                private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned) throws Exception {", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480188210", "createdAt": "2020-08-31T14:58:44Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -580,7 +579,8 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n      * Check not too many already running.\n      *\n      */\n-    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int scheduledCount) throws Exception {\n+    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned,\n+                                        int numInProvisioning) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjUzMDczOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1ODo1NFrOHJ8Xow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1ODo1NFrOHJ8Xow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4ODMyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (numRunningOrPending + numProvisioned + numInProvisioning >= containerCap) {\n          \n          \n            \n                    if (numRunningOrPending + numProvisioned >= containerCap) {\n          \n      \n    \n    \n  \n\nNote: the logic here is broken anyway (not new), since numProvisioned relates only to the current label and not to the whole instance.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480188323", "createdAt": "2020-08-31T14:58:54Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -593,23 +593,27 @@ private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull\n             templateNamespace = client.getNamespace();\n         }\n \n+        // check overall concurrency limit using the default label(s) on all templates\n         Map<String, String> podLabels = getPodLabelsMap();\n-        List<Pod> allActiveSlavePods = getActiveSlavePods(client, templateNamespace, podLabels);\n-        if (allActiveSlavePods != null && containerCap <= allActiveSlavePods.size() + scheduledCount) {\n+        long numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= containerCap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjUzMTU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1OTowNlrOHJ8YOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1OTowNlrOHJ8YOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4ODQ3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (numRunningOrPending + numProvisioned + numInProvisioning >= template.getInstanceCap()) {\n          \n          \n            \n                    if (numRunningOrPending + numProvisioned >= template.getInstanceCap()) {", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480188473", "createdAt": "2020-08-31T14:59:06Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -593,23 +593,27 @@ private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull\n             templateNamespace = client.getNamespace();\n         }\n \n+        // check overall concurrency limit using the default label(s) on all templates\n         Map<String, String> podLabels = getPodLabelsMap();\n-        List<Pod> allActiveSlavePods = getActiveSlavePods(client, templateNamespace, podLabels);\n-        if (allActiveSlavePods != null && containerCap <= allActiveSlavePods.size() + scheduledCount) {\n+        long numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= containerCap) {\n             LOGGER.log(Level.INFO,\n-                    \"Maximum number of concurrently running agent pods ({0}) reached for Kubernetes Cloud {4}, not provisioning: {1} running or pending in namespace {2} with Kubernetes labels {3}\",\n-                    new Object[] { containerCap, allActiveSlavePods.size() + scheduledCount, templateNamespace, getLabels(), name });\n+                    \"Maximum number of concurrently running agent pods ({0}) reached for Kubernetes Cloud {4}, \" +\n+                            \"not provisioning: {1} running or pending in namespace {2} with Kubernetes labels {3}\",\n+                    new Object[] { containerCap, numRunningOrPending, templateNamespace, getLabels(), name });\n             return false;\n         }\n \n-        Map<String, String> labelsMap = new HashMap<>(podLabels);\n-        labelsMap.putAll(template.getLabelsMap());\n-        List<Pod> activeTemplateSlavePods = getActiveSlavePods(client, templateNamespace, labelsMap);\n-        if (activeTemplateSlavePods != null && allActiveSlavePods != null && template.getInstanceCap() <= activeTemplateSlavePods.size() + scheduledCount) {\n+        // check template-level concurrency limit using template-level labels\n+        Map<String, String> templateLabels = new HashMap<>(podLabels);\n+        templateLabels.putAll(template.getLabelsMap());\n+        numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= template.getInstanceCap()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODMwMDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/jenkins/plugins/kubernetes/NoDelayProvisionerStrategy.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowNDowMlrOHK1Svw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzoxNjoxOFrOHK1xhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMDk1OQ==", "bodyText": "So the key change resides here. If the Kubernetes strategy did not provision any node through KubernetesCloud, it goes to the next strategy, allowing other clouds to pick up the request.\nHowever as soon as it was able to provision at least 1 node using a KubernetesCloud, we consider this label isn't served by other clouds so we just end the provisioning to prevent the standard strategy from causing overprovisioning.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r481120959", "createdAt": "2020-09-01T13:04:02Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/NoDelayProvisionerStrategy.java", "diffHunk": "@@ -64,26 +65,29 @@\n                         continue;\n                     }\n                 }\n+                canProvision = true;\n                 Collection<NodeProvisioner.PlannedNode> plannedNodes = cloud.provision(label, workloadToProvision);\n                 LOGGER.log(Level.FINE, \"Planned {0} new nodes\", plannedNodes.size());\n                 fireOnStarted(cloud, strategyState.getLabel(), plannedNodes);\n                 strategyState.recordPendingLaunches(plannedNodes);\n                 availableCapacity += plannedNodes.size();\n+                totalPlannedNodes += plannedNodes.size();\n                 LOGGER.log(Level.FINE, \"After provisioning, available capacity={0}, currentDemand={1}\", new Object[]{availableCapacity, currentDemand});\n                 break;\n             }\n         }\n-        if (availableCapacity > previousCapacity && label != null) {\n-            LOGGER.log(Level.FINE, \"Suggesting NodeProvisioner review\");\n-            Timer.get().schedule(label.nodeProvisioner::suggestReviewNow, 1L, TimeUnit.SECONDS);\n-        }\n-        if (availableCapacity >= currentDemand) {\n-            LOGGER.log(Level.FINE, \"Provisioning completed\");\n-            return NodeProvisioner.StrategyDecision.PROVISIONING_COMPLETED;\n+        if (currentDemand - availableCapacity <= 0) {\n+            LOGGER.log(Level.FINE, String.format(\"Provisioning completed for label: [%s]\", label));\n         } else {\n-            LOGGER.log(Level.FINE, \"Provisioning not complete, consulting remaining strategies\");\n-            return NodeProvisioner.StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n+            if (!canProvision) {\n+                return NodeProvisioner.StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4847112c2ff21737ff9ad8e6047c63fca9779fdd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyNzM2OQ==", "bodyText": "Thanks for noting! I should have documented this in the PR description but I am not very familiar with Jenkins provisioning logic.\nIf a label is served by multiple strategies, and the Kubernetes strategy serves the first N requests up to the concurrency limit, will the remaining requests eventually be served by other strategies?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r481127369", "createdAt": "2020-09-01T13:14:11Z", "author": {"login": "schottsfired"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/NoDelayProvisionerStrategy.java", "diffHunk": "@@ -64,26 +65,29 @@\n                         continue;\n                     }\n                 }\n+                canProvision = true;\n                 Collection<NodeProvisioner.PlannedNode> plannedNodes = cloud.provision(label, workloadToProvision);\n                 LOGGER.log(Level.FINE, \"Planned {0} new nodes\", plannedNodes.size());\n                 fireOnStarted(cloud, strategyState.getLabel(), plannedNodes);\n                 strategyState.recordPendingLaunches(plannedNodes);\n                 availableCapacity += plannedNodes.size();\n+                totalPlannedNodes += plannedNodes.size();\n                 LOGGER.log(Level.FINE, \"After provisioning, available capacity={0}, currentDemand={1}\", new Object[]{availableCapacity, currentDemand});\n                 break;\n             }\n         }\n-        if (availableCapacity > previousCapacity && label != null) {\n-            LOGGER.log(Level.FINE, \"Suggesting NodeProvisioner review\");\n-            Timer.get().schedule(label.nodeProvisioner::suggestReviewNow, 1L, TimeUnit.SECONDS);\n-        }\n-        if (availableCapacity >= currentDemand) {\n-            LOGGER.log(Level.FINE, \"Provisioning completed\");\n-            return NodeProvisioner.StrategyDecision.PROVISIONING_COMPLETED;\n+        if (currentDemand - availableCapacity <= 0) {\n+            LOGGER.log(Level.FINE, String.format(\"Provisioning completed for label: [%s]\", label));\n         } else {\n-            LOGGER.log(Level.FINE, \"Provisioning not complete, consulting remaining strategies\");\n-            return NodeProvisioner.StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n+            if (!canProvision) {\n+                return NodeProvisioner.StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMDk1OQ=="}, "originalCommit": {"oid": "4847112c2ff21737ff9ad8e6047c63fca9779fdd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyODgzOA==", "bodyText": "Not in the current round. If we reach the limit, on the next round, the Kubernetes strategy will provision 0 node and pass the ball to other strategies, however there won't be any more in-flight node because they get processed before each round of strategies (and the Kubernetes one returns instantly)", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r481128838", "createdAt": "2020-09-01T13:16:18Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/NoDelayProvisionerStrategy.java", "diffHunk": "@@ -64,26 +65,29 @@\n                         continue;\n                     }\n                 }\n+                canProvision = true;\n                 Collection<NodeProvisioner.PlannedNode> plannedNodes = cloud.provision(label, workloadToProvision);\n                 LOGGER.log(Level.FINE, \"Planned {0} new nodes\", plannedNodes.size());\n                 fireOnStarted(cloud, strategyState.getLabel(), plannedNodes);\n                 strategyState.recordPendingLaunches(plannedNodes);\n                 availableCapacity += plannedNodes.size();\n+                totalPlannedNodes += plannedNodes.size();\n                 LOGGER.log(Level.FINE, \"After provisioning, available capacity={0}, currentDemand={1}\", new Object[]{availableCapacity, currentDemand});\n                 break;\n             }\n         }\n-        if (availableCapacity > previousCapacity && label != null) {\n-            LOGGER.log(Level.FINE, \"Suggesting NodeProvisioner review\");\n-            Timer.get().schedule(label.nodeProvisioner::suggestReviewNow, 1L, TimeUnit.SECONDS);\n-        }\n-        if (availableCapacity >= currentDemand) {\n-            LOGGER.log(Level.FINE, \"Provisioning completed\");\n-            return NodeProvisioner.StrategyDecision.PROVISIONING_COMPLETED;\n+        if (currentDemand - availableCapacity <= 0) {\n+            LOGGER.log(Level.FINE, String.format(\"Provisioning completed for label: [%s]\", label));\n         } else {\n-            LOGGER.log(Level.FINE, \"Provisioning not complete, consulting remaining strategies\");\n-            return NodeProvisioner.StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n+            if (!canProvision) {\n+                return NodeProvisioner.StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMDk1OQ=="}, "originalCommit": {"oid": "4847112c2ff21737ff9ad8e6047c63fca9779fdd"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4966, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}