{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMDAyNzcy", "number": 682, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1MDo1M1rOEHH5Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1MDo1M1rOEHH5Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1OTA0ODYyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubectlBuildWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1MDo1M1rOGmVkkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMzo1MDo1M1rOGmVkkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg1MjQ5OA==", "bodyText": "JENKINS-61239: this is wrong, cannot work with agents. Use configFile.write().", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/682#discussion_r442852498", "createdAt": "2020-06-19T13:50:53Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubectlBuildWrapper.java", "diffHunk": "@@ -87,132 +67,31 @@ public String getCaCertificate() {\n \n     @Override\n     public void setUp(Context context, Run<?, ?> build, FilePath workspace, Launcher launcher, TaskListener listener, EnvVars initialEnvironment) throws IOException, InterruptedException {\n-\n         FilePath configFile = workspace.createTempFile(\".kube\", \"config\");\n         Set<String> tempFiles = newHashSet(configFile.getRemote());\n \n         context.env(\"KUBECONFIG\", configFile.getRemote());\n         context.setDisposer(new CleanupDisposer(tempFiles));\n \n-        String tlsConfig;\n-        if (caCertificate != null && !caCertificate.isEmpty()) {\n-            FilePath caCrtFile = workspace.createTempFile(\"cert-auth\", \"crt\");\n-            String ca = caCertificate;\n-            if (!ca.startsWith(BEGIN_CERTIFICATE)) {\n-                ca = wrapWithMarker(BEGIN_CERTIFICATE, END_CERTIFICATE, ca);\n-            }\n-            caCrtFile.write(ca, null);\n-            tempFiles.add(caCrtFile.getRemote());\n-\n-            tlsConfig = \" --certificate-authority=\" + caCrtFile.getRemote();\n-        } else {\n-            tlsConfig = \" --insecure-skip-tls-verify=true\";\n-        }\n-\n-        int status = launcher.launch()\n-                .cmdAsSingleString(\"kubectl config --kubeconfig=\\\"\" + configFile.getRemote()\n-                        + \"\\\" set-cluster k8s --server=\" + serverUrl + tlsConfig)\n-                .join();\n-        if (status != 0) throw new IOException(\"Failed to run kubectl config \"+status);\n-\n-        final StandardCredentials c = getCredentials();\n-\n-        String login;\n-        if (c == null) {\n-            throw new AbortException(\"No credentials defined to setup Kubernetes CLI\");\n+        StandardCredentials credentials = CredentialsProvider.findCredentialById(credentialsId, StandardCredentials.class, build, Collections.emptyList());\n+        if (credentials == null) {\n+            throw new AbortException(\"No credentials found for id \\\"\" + credentialsId + \"\\\"\");\n         }\n-\n-        if (c instanceof FileCredentials) {\n-            try (InputStream in = ((FileCredentials) c).getContent(); OutputStream out = configFile.write()) {\n-                IOUtils.copy(in, out);\n-            }\n-            return;\n+        KubernetesAuth auth = AuthenticationTokens.convert(KubernetesAuth.class, credentials);\n+        if (auth == null) {\n+            throw new AbortException(\"Unsupported Credentials type \" + credentials.getClass().getName());\n         }\n-\n-        if (c instanceof StringCredentials) {\n-            login = \"--token=\" + ((StringCredentials) c).getSecret().getPlainText();\n-        } else if (c instanceof TokenProducer) {\n-            login = \"--token=\" + ((TokenProducer) c).getToken(serverUrl, null, true);\n-        } else if (c instanceof UsernamePasswordCredentials) {\n-            UsernamePasswordCredentials upc = (UsernamePasswordCredentials) c;\n-            login = \"--username=\" + upc.getUsername() + \" --password=\" + Secret.toString(upc.getPassword());\n-        } else if (c instanceof StandardCertificateCredentials) {\n-            StandardCertificateCredentials scc = (StandardCertificateCredentials) c;\n-            KeyStore keyStore = scc.getKeyStore();\n-            String alias;\n+        // create Kubeconfig\n+        try (Writer w = new OutputStreamWriter(new FileOutputStream(configFile.getRemote()), \"UTF-8\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d4312bffa89a68b2abc3db57ac68f482411d3fe"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4985, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}