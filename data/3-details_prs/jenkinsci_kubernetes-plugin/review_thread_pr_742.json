{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MTM3MTc5", "number": 742, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyMTo1NlrODoZ-oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NDowNVrODowFQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNjk1MjY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/jenkins/plugins/kubernetes/TaskListenerEventWatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNjoyMTo1NlrOF27zzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MTo0MVrOF2_GvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NzM0MQ==", "bodyText": "I don't see any difference in the cases for this switch.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393147341", "createdAt": "2020-03-16T16:21:56Z", "author": {"login": "kerogers-cloudbees"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/TaskListenerEventWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.jenkins.plugins.kubernetes;\n+\n+import hudson.model.TaskListener;\n+import io.fabric8.kubernetes.api.model.Event;\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watcher;\n+\n+import java.io.PrintStream;\n+import java.util.Date;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINE;\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+public class TaskListenerEventWatcher implements Watcher<Event> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(TaskListenerEventWatcher.class.getName());\n+\n+    private final String name;\n+    private final TaskListener listener;\n+\n+    public TaskListenerEventWatcher(String name, TaskListener listener) {\n+        this.name = name;\n+        this.listener = listener;\n+    }\n+\n+    private void listenerLog(Event event) {\n+        PrintStream logger = listener.getLogger();\n+        // Messages can have multiple lines\n+        String[] lines = event.getMessage().split(\"\\n\");\n+        for (String line : lines) {\n+            logger.printf(\"[%s][%s/%s][%s] %s%n\", event.getType(), event.getInvolvedObject().getNamespace(), event.getInvolvedObject().getName(), event.getReason(), line);\n+        }\n+    }\n+\n+    @Override\n+    public void eventReceived(Action action, Event event) {\n+        switch (event.getType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMTM0MA==", "bodyText": "Right, was something forgotten here?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393201340", "createdAt": "2020-03-16T17:41:41Z", "author": {"login": "jglick"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/TaskListenerEventWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.jenkins.plugins.kubernetes;\n+\n+import hudson.model.TaskListener;\n+import io.fabric8.kubernetes.api.model.Event;\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watcher;\n+\n+import java.io.PrintStream;\n+import java.util.Date;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINE;\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+public class TaskListenerEventWatcher implements Watcher<Event> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(TaskListenerEventWatcher.class.getName());\n+\n+    private final String name;\n+    private final TaskListener listener;\n+\n+    public TaskListenerEventWatcher(String name, TaskListener listener) {\n+        this.name = name;\n+        this.listener = listener;\n+    }\n+\n+    private void listenerLog(Event event) {\n+        PrintStream logger = listener.getLogger();\n+        // Messages can have multiple lines\n+        String[] lines = event.getMessage().split(\"\\n\");\n+        for (String line : lines) {\n+            logger.printf(\"[%s][%s/%s][%s] %s%n\", event.getType(), event.getInvolvedObject().getNamespace(), event.getInvolvedObject().getName(), event.getReason(), line);\n+        }\n+    }\n+\n+    @Override\n+    public void eventReceived(Action action, Event event) {\n+        switch (event.getType()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzE0NzM0MQ=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzI3NTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/io/jenkins/plugins/kubernetes/TaskListenerEventWatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzozOTo0NlrOF2_CLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzozOTo0NlrOF2_CLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMDE3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class TaskListenerEventWatcher implements Watcher<Event> {\n          \n          \n            \n            class TaskListenerEventWatcher implements Watcher<Event> {", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393200172", "createdAt": "2020-03-16T17:39:46Z", "author": {"login": "jglick"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/TaskListenerEventWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.jenkins.plugins.kubernetes;\n+\n+import hudson.model.TaskListener;\n+import io.fabric8.kubernetes.api.model.Event;\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watcher;\n+\n+import java.io.PrintStream;\n+import java.util.Date;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINE;\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+public class TaskListenerEventWatcher implements Watcher<Event> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzI4NTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/io/jenkins/plugins/kubernetes/TaskListenerEventWatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MjozM1rOF2_IwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0MjozM1rOF2_IwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMTg1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        cause.printStackTrace(listener.getLogger());\n          \n          \n            \n                        hudson.Functions.printStackTrace(cause, listener.getLogger());", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393201856", "createdAt": "2020-03-16T17:42:33Z", "author": {"login": "jglick"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/TaskListenerEventWatcher.java", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.jenkins.plugins.kubernetes;\n+\n+import hudson.model.TaskListener;\n+import io.fabric8.kubernetes.api.model.Event;\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watcher;\n+\n+import java.io.PrintStream;\n+import java.util.Date;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static java.util.logging.Level.FINE;\n+import static java.util.logging.Level.INFO;\n+import static java.util.logging.Level.WARNING;\n+\n+public class TaskListenerEventWatcher implements Watcher<Event> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(TaskListenerEventWatcher.class.getName());\n+\n+    private final String name;\n+    private final TaskListener listener;\n+\n+    public TaskListenerEventWatcher(String name, TaskListener listener) {\n+        this.name = name;\n+        this.listener = listener;\n+    }\n+\n+    private void listenerLog(Event event) {\n+        PrintStream logger = listener.getLogger();\n+        // Messages can have multiple lines\n+        String[] lines = event.getMessage().split(\"\\n\");\n+        for (String line : lines) {\n+            logger.printf(\"[%s][%s/%s][%s] %s%n\", event.getType(), event.getInvolvedObject().getNamespace(), event.getInvolvedObject().getName(), event.getReason(), line);\n+        }\n+    }\n+\n+    @Override\n+    public void eventReceived(Action action, Event event) {\n+        switch (event.getType()) {\n+            case \"Normal\":\n+                listenerLog(event);\n+                break;\n+            case \"Warning\":\n+                listenerLog(event);\n+                break;\n+            default:\n+                listenerLog(event);\n+                break;\n+        }\n+    }\n+\n+    @Override\n+    public void onClose(KubernetesClientException cause) {\n+        String msg = String.format(\"%s onClose: %s\", getClass().getSimpleName(), name);\n+        if (cause != null) {\n+            LOGGER.log(WARNING, msg, cause);\n+            cause.printStackTrace(listener.getLogger());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzI5ODA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0NTo0OFrOF2_Qyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwODozOToxNlrOF3SYgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzkxNA==", "bodyText": "Unused?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private WatchList setupWatches(KubernetesClient client, String namespace, String name, TaskListener taskListener) {\n          \n          \n            \n                    List<Watch> watches = new ArrayList<>();\n          \n          \n            \n                    watches.add(client.pods().inNamespace(namespace).withName(name).watch(watcher));\n          \n          \n            \n                    watches.add(client.events().inNamespace(namespace).withField(\"involvedObject.name\", name).watch(new TaskListenerEventWatcher(name, taskListener)));\n          \n          \n            \n                    return new WatchList(watches);\n          \n          \n            \n                }", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393203914", "createdAt": "2020-03-16T17:45:48Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -229,6 +229,13 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n         }\n     }\n \n+    private WatchList setupWatches(KubernetesClient client, String namespace, String name, TaskListener taskListener) {\n+        List<Watch> watches = new ArrayList<>();\n+        watches.add(client.pods().inNamespace(namespace).withName(name).watch(watcher));\n+        watches.add(client.events().inNamespace(namespace).withField(\"involvedObject.name\", name).watch(new TaskListenerEventWatcher(name, taskListener)));\n+        return new WatchList(watches);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNzE4Ng==", "bodyText": "indeed, forgot to remove it before submitting the pr", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393517186", "createdAt": "2020-03-17T08:39:16Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -229,6 +229,13 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n         }\n     }\n \n+    private WatchList setupWatches(KubernetesClient client, String namespace, String name, TaskListener taskListener) {\n+        List<Watch> watches = new ArrayList<>();\n+        watches.add(client.pods().inNamespace(namespace).withName(name).watch(watcher));\n+        watches.add(client.events().inNamespace(namespace).withField(\"involvedObject.name\", name).watch(new TaskListenerEventWatcher(name, taskListener)));\n+        return new WatchList(watches);\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwMzkxNA=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzMwMTM5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0Njo0OFrOF2_S_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0Njo0OFrOF2_S_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwNDQ3OA==", "bodyText": "Unused if setupWatches is?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static class WatchList implements Closeable {\n          \n          \n            \n                    private List<Watch> watches;\n          \n          \n            \n            \n          \n          \n            \n                    public WatchList(List<Watch> watches) {\n          \n          \n            \n                        this.watches = watches;\n          \n          \n            \n                    }\n          \n          \n            \n            \n          \n          \n            \n                    @Override\n          \n          \n            \n                    public void close() throws IOException {\n          \n          \n            \n                        RuntimeException r = null;\n          \n          \n            \n                        for (Watch watch: watches) {\n          \n          \n            \n                            try {\n          \n          \n            \n                                watch.close();\n          \n          \n            \n                            } catch(RuntimeException e) {\n          \n          \n            \n                                if (r == null) {\n          \n          \n            \n                                    r = new RuntimeException();\n          \n          \n            \n                                }\n          \n          \n            \n                                r.addSuppressed(e);\n          \n          \n            \n                            }\n          \n          \n            \n                        }\n          \n          \n            \n                        if (r != null) {\n          \n          \n            \n                            throw r;\n          \n          \n            \n                        }\n          \n          \n            \n                    }\n          \n          \n            \n                }", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393204478", "createdAt": "2020-03-16T17:46:48Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -259,6 +266,32 @@ private void logLastLines(List<ContainerStatus> containers, String podId, String\n         }\n     }\n \n+    private static class WatchList implements Closeable {\n+        private List<Watch> watches;\n+\n+        public WatchList(List<Watch> watches) {\n+            this.watches = watches;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            RuntimeException r = null;\n+            for (Watch watch: watches) {\n+                try {\n+                    watch.close();\n+                } catch(RuntimeException e) {\n+                    if (r == null) {\n+                        r = new RuntimeException();\n+                    }\n+                    r.addSuppressed(e);\n+                }\n+            }\n+            if (r != null) {\n+                throw r;\n+            }\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzMwNDMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0Nzo0NFrOF2_U6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo0Nzo0NFrOF2_U6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwNDk2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (r == null) {\n          \n          \n            \n                                    r = new RuntimeException();\n          \n          \n            \n                                }\n          \n          \n            \n                                r.addSuppressed(e);\n          \n          \n            \n                                if (r == null) {\n          \n          \n            \n                                    r = e;\n          \n          \n            \n                                } else {\n          \n          \n            \n                                    r.addSuppressed(e);\n          \n          \n            \n                                }", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393204969", "createdAt": "2020-03-16T17:47:44Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -259,6 +266,32 @@ private void logLastLines(List<ContainerStatus> containers, String podId, String\n         }\n     }\n \n+    private static class WatchList implements Closeable {\n+        private List<Watch> watches;\n+\n+        public WatchList(List<Watch> watches) {\n+            this.watches = watches;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            RuntimeException r = null;\n+            for (Watch watch: watches) {\n+                try {\n+                    watch.close();\n+                } catch(RuntimeException e) {\n+                    if (r == null) {\n+                        r = new RuntimeException();\n+                    }\n+                    r.addSuppressed(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzMxMzgwOnYy", "diffSide": "RIGHT", "path": "test-in-k8s.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo1MDoyNVrOF2_a9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzozNjoxMFrOF3chjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwNjUxNw==", "bodyText": "What happens if this permission is not granted? Does the plugin gracefully ignore the failure? Otherwise we are creating a minor backward compatibility issue. For example, CloudBees Core does not currently seem to grant this.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393206517", "createdAt": "2020-03-16T17:50:25Z", "author": {"login": "jglick"}, "path": "test-in-k8s.yaml", "diffHunk": "@@ -76,6 +76,9 @@ rules:\n - apiGroups: [\"\"]\n   resources: [\"pods/log\"]\n   verbs: [\"get\",\"list\",\"watch\"]\n+- apiGroups: [\"\"]\n+  resources: [\"events\"]\n+  verbs: [\"watch\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxODIxOA==", "bodyText": "I noted it. Doable in theory through SelfSubjectAccessReview unfortunately support for this object kind seems to be broken in kubernetes-client at the moment.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393518218", "createdAt": "2020-03-17T08:41:17Z", "author": {"login": "Vlatombe"}, "path": "test-in-k8s.yaml", "diffHunk": "@@ -76,6 +76,9 @@ rules:\n - apiGroups: [\"\"]\n   resources: [\"pods/log\"]\n   verbs: [\"get\",\"list\",\"watch\"]\n+- apiGroups: [\"\"]\n+  resources: [\"events\"]\n+  verbs: [\"watch\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwNjUxNw=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY4MzM0Mw==", "bodyText": "Fixed.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393683343", "createdAt": "2020-03-17T13:36:10Z", "author": {"login": "Vlatombe"}, "path": "test-in-k8s.yaml", "diffHunk": "@@ -76,6 +76,9 @@ rules:\n - apiGroups: [\"\"]\n   resources: [\"pods/log\"]\n   verbs: [\"get\",\"list\",\"watch\"]\n+- apiGroups: [\"\"]\n+  resources: [\"events\"]\n+  verbs: [\"watch\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwNjUxNw=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzMzNDA1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo1NTo1M1rOF2_njg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxOToxMzo0N1rOGMzf8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwOTc0Mg==", "bodyText": "Is this special case still needed? I am not really sure what it was doing to begin with; looks suspicious.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393209742", "createdAt": "2020-03-16T17:55:53Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,28 +114,26 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener))) {\n                 watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n             } catch (InvalidDockerImageException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUxNzA0Mw==", "bodyText": "It fails the build if one of the docker images is invalid (#497). Ideally I think it would deserve a rework but it works.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393517043", "createdAt": "2020-03-17T08:38:58Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,28 +114,26 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener))) {\n                 watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n             } catch (InvalidDockerImageException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwOTc0Mg=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyOTAyOA==", "bodyText": "But the build would fail anyway, without this clause; the exception would be thrown up out of launch. Right? And with this PR, you would see the appropriate diagnostics right in the log. But the current code here does more, by canceling some queue items (which seem to be any node blocks associated with this build, which is wrong by the way\u2014should only be canceling the node block associated with this pod). If that is needed in order to prevent the build from hanging, then it is needed in many other error cases too. So this does not add up for me.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393729028", "createdAt": "2020-03-17T14:40:16Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,28 +114,26 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener))) {\n                 watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n             } catch (InvalidDockerImageException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwOTc0Mg=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNzQxNQ==", "bodyText": "No, the launcher would just fail but this wouldn't affect the build so the build would wait forever.\n\nshould only be canceling the node block associated with this pod\n\nprobably.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393737415", "createdAt": "2020-03-17T14:51:42Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,28 +114,26 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener))) {\n                 watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n             } catch (InvalidDockerImageException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwOTc0Mg=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc0NDAzOA==", "bodyText": "I do not think this is anything blocking the current PR but it looks like something to revisit.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393744038", "createdAt": "2020-03-17T15:00:41Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,28 +114,26 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener))) {\n                 watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n             } catch (InvalidDockerImageException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwOTc0Mg=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3NjQ0MQ==", "bodyText": "@jglick I'm revisiting this, not sure how to find out item should be cancelled exactly.\nThe only correlation I can make seems to be based on label, since at this point the queue item is not yet assigned to the node. There could be several items waiting for a node if they are inside a parallel block or using a static pod template. So, cancel the first one only?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r414476441", "createdAt": "2020-04-24T10:40:36Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,28 +114,26 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener))) {\n                 watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n             } catch (InvalidDockerImageException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwOTc0Mg=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA3OTg1OQ==", "bodyText": "Not sure.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r416079859", "createdAt": "2020-04-27T19:13:47Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,28 +114,26 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener))) {\n                 watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n             } catch (InvalidDockerImageException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwOTc0Mg=="}, "originalCommit": {"oid": "2007d04566666ef4452c2afeca11c54238209833"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTM1MDQ3OnYy", "diffSide": "RIGHT", "path": "test-in-k8s.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowNToxNlrOF3TP8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowNToxNlrOF3TP8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMTM3Nw==", "bodyText": "Will need to revert that. Only the 2 tests changed by this PR should fail in this case.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393531377", "createdAt": "2020-03-17T09:05:16Z", "author": {"login": "Vlatombe"}, "path": "test-in-k8s.yaml", "diffHunk": "@@ -76,6 +76,9 @@ rules:\n - apiGroups: [\"\"]\n   resources: [\"pods/log\"]\n   verbs: [\"get\",\"list\",\"watch\"]\n+#- apiGroups: [\"\"]\n+#  resources: [\"events\"]\n+#  verbs: [\"watch\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "390bfc0a7fb95ca444fcf9840618141aca462268"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDQ2MDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDoxODozNlrOF3eU-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NTo0MFrOF3fi8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxMjg4OQ==", "bodyText": "Is is reasonable to ask that this log line be written more readily (less restricted than FINE) and include a note/link to instructions for the required level of access needed to watch pod events?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393712889", "createdAt": "2020-03-17T14:18:36Z", "author": {"login": "lelandsindttouchnet"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -229,6 +230,15 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n         }\n     }\n \n+    private Watch eventWatch(KubernetesClient client, String podName, String namespace, TaskListener runListener) {\n+        try {\n+            return client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener));\n+        } catch (KubernetesClientException e) {\n+            LOGGER.log(Level.FINE, e, () -> \"Cannot watch events on \" + namespace + \"/\" +podName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67bd92aa1ef950367a852fc3b782be4c87560cb"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcyNjg0MA==", "bodyText": "Yes, this seems like it could be at INFO.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393726840", "createdAt": "2020-03-17T14:37:10Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -229,6 +230,15 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n         }\n     }\n \n+    private Watch eventWatch(KubernetesClient client, String podName, String namespace, TaskListener runListener) {\n+        try {\n+            return client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener));\n+        } catch (KubernetesClientException e) {\n+            LOGGER.log(Level.FINE, e, () -> \"Cannot watch events on \" + namespace + \"/\" +podName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxMjg4OQ=="}, "originalCommit": {"oid": "d67bd92aa1ef950367a852fc3b782be4c87560cb"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMjg1MA==", "bodyText": "Or printed to the runListener.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393732850", "createdAt": "2020-03-17T14:45:40Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -229,6 +230,15 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n         }\n     }\n \n+    private Watch eventWatch(KubernetesClient client, String podName, String namespace, TaskListener runListener) {\n+        try {\n+            return client.events().inNamespace(namespace).withField(\"involvedObject.name\", podName).watch(new TaskListenerEventWatcher(podName, runListener));\n+        } catch (KubernetesClientException e) {\n+            LOGGER.log(Level.FINE, e, () -> \"Cannot watch events on \" + namespace + \"/\" +podName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzcxMjg4OQ=="}, "originalCommit": {"oid": "d67bd92aa1ef950367a852fc3b782be4c87560cb"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDU3NDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo0NDowNVrOF3fewQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNDo1MjoyMVrOF3f2bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTc3Nw==", "bodyText": "How could it be null? You just assigned it via a constructor. Does SpotBugs not reject this?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393731777", "createdAt": "2020-03-17T14:44:05Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,29 +113,29 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n-                watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = eventWatch(client, podName, namespace, runListener)) {\n+                if (watcher != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d67bd92aa1ef950367a852fc3b782be4c87560cb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNDQ3MQ==", "bodyText": "I guess Spotbugs thinks eventWatch could have a side-effect.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393734471", "createdAt": "2020-03-17T14:47:45Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,29 +113,29 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n-                watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = eventWatch(client, podName, namespace, runListener)) {\n+                if (watcher != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTc3Nw=="}, "originalCommit": {"oid": "d67bd92aa1ef950367a852fc3b782be4c87560cb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNTI2NQ==", "bodyText": "AFAICT the watcher field is only written to in the one place above, so it should be definitely non-null here. You can always\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (watcher != null) {\n          \n          \n            \n                            assert watcher != null;\n          \n      \n    \n    \n  \n\nto make it behave.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393735265", "createdAt": "2020-03-17T14:48:50Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,29 +113,29 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n-                watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = eventWatch(client, podName, namespace, runListener)) {\n+                if (watcher != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTc3Nw=="}, "originalCommit": {"oid": "d67bd92aa1ef950367a852fc3b782be4c87560cb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczNzgzOA==", "bodyText": "\ud83e\udd37\u200d\u2642", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/742#discussion_r393737838", "createdAt": "2020-03-17T14:52:21Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -112,29 +113,29 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n             Pod pod = template.build(slave);\n             slave.assignPod(pod);\n \n-            String podId = pod.getMetadata().getName();\n+            String podName = pod.getMetadata().getName();\n \n             String namespace = Arrays.asList( //\n                     pod.getMetadata().getNamespace(),\n                     template.getNamespace(), client.getNamespace()) //\n                     .stream().filter(s -> StringUtils.isNotBlank(s)).findFirst().orElse(null);\n             slave.setNamespace(namespace);\n \n-            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podId });\n+            LOGGER.log(Level.FINE, \"Creating Pod: {0}/{1}\", new Object[] { namespace, podName });\n             pod = client.pods().inNamespace(namespace).create(pod);\n-            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podId });\n-            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podId);\n+            LOGGER.log(INFO, \"Created Pod: {0}/{1}\", new Object[] { namespace, podName });\n+            listener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n             TaskListener runListener = template.getListener();\n-            runListener.getLogger().printf(\"Created Pod: %s in namespace %s%n\", podId, namespace);\n-\n+            runListener.getLogger().printf(\"Created Pod: %s/%s%n\", namespace, podName);\n \n-            String podName = pod.getMetadata().getName();\n-            String namespace1 = pod.getMetadata().getNamespace();\n             template.getWorkspaceVolume().createVolume(client, pod.getMetadata());\n             watcher = new AllContainersRunningPodWatcher(client, pod, runListener);\n-            try (Watch _w = client.pods().inNamespace(namespace1).withName(podName).watch(watcher)) {\n-                watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n+            try (Watch w1 = client.pods().inNamespace(namespace).withName(podName).watch(watcher);\n+                 Watch w2 = eventWatch(client, podName, namespace, runListener)) {\n+                if (watcher != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzczMTc3Nw=="}, "originalCommit": {"oid": "d67bd92aa1ef950367a852fc3b782be4c87560cb"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4900, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}