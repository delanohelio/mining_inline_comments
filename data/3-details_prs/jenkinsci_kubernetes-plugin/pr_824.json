{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTYyNDU4", "number": 824, "title": "[JENKINS-59959] Fix concurrency limits", "bodyText": "Modified provisioning logic so that concurrency limits are always respected\nGeneral clean-up and updated names\nMake test-in-k8s.sh executable without sudo", "createdAt": "2020-08-27T21:31:09Z", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824", "merged": true, "mergeCommit": {"oid": "d4593083475de3cad86e61fbd069a02da7d2972a"}, "closed": true, "closedAt": "2020-09-01T13:06:41Z", "author": {"login": "schottsfired"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCbmLIgH2gAyNDc0OTYyNDU4OjlkZWY5ZDJhZDkwYjI1ZjQ3ZGM5ZDBkZjkxNzMwZGM5ZDMzZjYyOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEnFZ6AFqTQ3OTcxOTkwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9def9d2ad90b25f47dc9d0df91730dc9d33f6291", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/9def9d2ad90b25f47dc9d0df91730dc9d33f6291", "committedDate": "2020-08-25T18:34:13Z", "message": "don't provision when containerCap is 0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ec488d38347a140d760037bcf5f3afa25edac20", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/6ec488d38347a140d760037bcf5f3afa25edac20", "committedDate": "2020-08-25T18:43:58Z", "message": "test for zero"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "433b9383d8c78728c305c20f481b3feb52924f69", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/433b9383d8c78728c305c20f481b3feb52924f69", "committedDate": "2020-08-25T18:44:07Z", "message": "Merge branch 'master' of https://github.com/jenkinsci/kubernetes-plugin into fix-concurrency-limits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "799f9f3bc5aae51a6e9b8bda1acaf4090cc32b83", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/799f9f3bc5aae51a6e9b8bda1acaf4090cc32b83", "committedDate": "2020-08-26T18:49:11Z", "message": "less code and better horizontal scroll"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92008e41b57f957a4a50da7617a6bdb923c37ea3", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/92008e41b57f957a4a50da7617a6bdb923c37ea3", "committedDate": "2020-08-26T18:50:09Z", "message": "remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f6a7b7380856f16f31d45aaaaefe0eb1ccae003", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/6f6a7b7380856f16f31d45aaaaefe0eb1ccae003", "committedDate": "2020-08-27T21:22:12Z", "message": "make concurrency limits work as expected"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b39286766d4818f4cad1d74946ec45c8c728a79", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/9b39286766d4818f4cad1d74946ec45c8c728a79", "committedDate": "2020-08-27T21:22:33Z", "message": "make test script executable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/44a026697b2beed87a19178e457ae8fdc097059b", "committedDate": "2020-08-27T21:22:38Z", "message": "Merge branch 'master' of https://github.com/jenkinsci/kubernetes-plugin into fix-concurrency-limits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3NjcxNTY4", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#pullrequestreview-477671568", "createdAt": "2020-08-28T12:03:32Z", "commit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowMzozM1rOHJANrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjowNDoyNlrOHJARdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwMjczMw==", "bodyText": "Should be in another PR", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479202733", "createdAt": "2020-08-28T12:03:33Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -580,9 +579,10 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n      * Check not too many already running.\n      *\n      */\n-    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int scheduledCount) throws Exception {\n+    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned,\n+                                        int numInProvisioning) throws Exception {\n         if (containerCap == 0) {\n-            return true;\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIwMzcwMg==", "bodyText": "Avoid reformatting if you can to make the review easier.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479203702", "createdAt": "2020-08-28T12:04:26Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -593,23 +593,27 @@ private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull\n             templateNamespace = client.getNamespace();\n         }\n \n+        // check overall concurrency limit using the default label(s) on all templates\n         Map<String, String> podLabels = getPodLabelsMap();\n-        List<Pod> allActiveSlavePods = getActiveSlavePods(client, templateNamespace, podLabels);\n-        if (allActiveSlavePods != null && containerCap <= allActiveSlavePods.size() + scheduledCount) {\n+        long numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= containerCap) {\n             LOGGER.log(Level.INFO,\n-                    \"Maximum number of concurrently running agent pods ({0}) reached for Kubernetes Cloud {4}, not provisioning: {1} running or pending in namespace {2} with Kubernetes labels {3}\",\n-                    new Object[] { containerCap, allActiveSlavePods.size() + scheduledCount, templateNamespace, getLabels(), name });\n+                    \"Maximum number of concurrently running agent pods ({0}) reached for Kubernetes Cloud {4}, \" +\n+                            \"not provisioning: {1} running or pending in namespace {2} with Kubernetes labels {3}\",\n+                    new Object[] { containerCap, numRunningOrPending, templateNamespace, getLabels(), name });\n             return false;\n         }\n \n-        Map<String, String> labelsMap = new HashMap<>(podLabels);\n-        labelsMap.putAll(template.getLabelsMap());\n-        List<Pod> activeTemplateSlavePods = getActiveSlavePods(client, templateNamespace, labelsMap);\n-        if (activeTemplateSlavePods != null && allActiveSlavePods != null && template.getInstanceCap() <= activeTemplateSlavePods.size() + scheduledCount) {\n+        // check template-level concurrency limit using template-level labels\n+        Map<String, String> templateLabels = new HashMap<>(podLabels);\n+        templateLabels.putAll(template.getLabelsMap());\n+        numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= template.getInstanceCap()) {\n             LOGGER.log(Level.INFO,\n-                    \"Maximum number of concurrently running agent pods ({0}) reached for template {1} in Kubernetes Cloud {6}, not provisioning: {2} running or pending in namespace {3} with label \\\"{4}\\\" and Kubernetes labels {5}\",\n-                    new Object[] { template.getInstanceCap(), template.getName(), activeTemplateSlavePods.size() + scheduledCount,\n-                            templateNamespace, label == null ? \"\" : label.toString(), labelsMap, name });\n+                    \"Maximum number of concurrently running agent pods ({0}) reached for template {1} in Kubernetes Cloud {6}, \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3Njg2MjUz", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#pullrequestreview-477686253", "createdAt": "2020-08-28T12:28:32Z", "commit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjoyODozMlrOHJB_pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMjozMDoxNFrOHJCHvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMTkxMQ==", "bodyText": "Keep the diff smaller by avoiding gratuitous changes. Can always file separate stylistic cleanup PRs.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479231911", "createdAt": "2020-08-28T12:28:32Z", "author": {"login": "jglick"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/NoDelayProvisionerStrategy.java", "diffHunk": "@@ -30,12 +30,12 @@\n public class NoDelayProvisionerStrategy extends NodeProvisioner.Strategy {\n \n     private static final Logger LOGGER = Logger.getLogger(NoDelayProvisionerStrategy.class.getName());\n-    private static final boolean DISABLE_NODELAY_PROVISING = Boolean.valueOf(\n+    private static final boolean DISABLE_NO_DELAY_PROVISIONING = Boolean.parseBoolean(\n             System.getProperty(\"io.jenkins.plugins.kubernetes.disableNoDelayProvisioning\"));\n \n     @Override\n     public NodeProvisioner.StrategyDecision apply(NodeProvisioner.StrategyState strategyState) {\n-        if (DISABLE_NODELAY_PROVISING) {\n+        if (DISABLE_NO_DELAY_PROVISIONING) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTIzMzk4Mw==", "bodyText": "Also could be reverted to minimize review surface.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479233983", "createdAt": "2020-08-28T12:30:14Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -541,24 +539,25 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n             int toBeProvisioned = Math.max(0, excessWorkload - allInProvisioning.size());\n             LOGGER.log(Level.INFO, \"Excess workload after pending Kubernetes agents: {0}\", toBeProvisioned);\n \n-            List<NodeProvisioner.PlannedNode> r = new ArrayList<NodeProvisioner.PlannedNode>();\n+            List<NodeProvisioner.PlannedNode> plannedNodes = new ArrayList<>();\n \n-            for (PodTemplate t: getTemplatesFor(label)) {\n-                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, t.getName() });\n+            for (PodTemplate podTemplate: getTemplatesFor(label)) {\n+                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, podTemplate.getName() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44a026697b2beed87a19178e457ae8fdc097059b"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd32d49c7e24be7334f8cc412e70e779b26d8c63", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/dd32d49c7e24be7334f8cc412e70e779b26d8c63", "committedDate": "2020-08-28T12:40:29Z", "message": "consult other strategies if k8s can't provision the label"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8ffd60a39c2308ccb34d3f35982c27446ec9011", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/c8ffd60a39c2308ccb34d3f35982c27446ec9011", "committedDate": "2020-08-28T13:21:33Z", "message": "remove unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Mzk1MjEz", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#pullrequestreview-478395213", "createdAt": "2020-08-31T07:52:36Z", "commit": {"oid": "c8ffd60a39c2308ccb34d3f35982c27446ec9011"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzo1MjozNlrOHJuWpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwNzo1MjozNlrOHJuWpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk1ODY5NQ==", "bodyText": "I guess it goes with https://github.com/jenkinsci/kubernetes-plugin/pull/824/files#r479202733 ?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r479958695", "createdAt": "2020-08-31T07:52:36Z", "author": {"login": "Vlatombe"}, "path": "src/test/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloudTest.java", "diffHunk": "@@ -221,6 +221,11 @@ public KubernetesClient connect()  {\n         Collection<NodeProvisioner.PlannedNode> plannedNodes = cloud.provision(test, 200);\n         assertEquals(200, plannedNodes.size());\n \n+        cloud.setContainerCapStr(\"0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ffd60a39c2308ccb34d3f35982c27446ec9011"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "377f4b9ffe761a2c4ddd8d44fc5ad77ae07a7939", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/377f4b9ffe761a2c4ddd8d44fc5ad77ae07a7939", "committedDate": "2020-08-31T13:50:41Z", "message": "Revert \"don't provision when containerCap is 0\"\n\nThis reverts commit 9def9d2ad90b25f47dc9d0df91730dc9d33f6291."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/b0260445bd5404d0193ca33a555e1189d5de360d", "committedDate": "2020-08-31T13:50:54Z", "message": "Revert \"test for zero\"\n\nThis reverts commit 6ec488d38347a140d760037bcf5f3afa25edac20."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4NjkwMTM1", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#pullrequestreview-478690135", "createdAt": "2020-08-31T14:57:46Z", "commit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1Nzo0NlrOHJ8U0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1OTowNlrOHJ8YOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4NzYwMQ==", "bodyText": "In the method you always add inProvisioning to the other count.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                if (!addProvisionedSlave(podTemplate, label, i, allInProvisioning.size())) {\n          \n          \n            \n                                if (!addProvisionedSlave(podTemplate, label, i + allInProvisioning.size())) {", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480187601", "createdAt": "2020-08-31T14:57:46Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -541,24 +539,25 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n             int toBeProvisioned = Math.max(0, excessWorkload - allInProvisioning.size());\n             LOGGER.log(Level.INFO, \"Excess workload after pending Kubernetes agents: {0}\", toBeProvisioned);\n \n-            List<NodeProvisioner.PlannedNode> r = new ArrayList<NodeProvisioner.PlannedNode>();\n+            List<NodeProvisioner.PlannedNode> plannedNodes = new ArrayList<>();\n \n-            for (PodTemplate t: getTemplatesFor(label)) {\n-                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, t.getName() });\n+            for (PodTemplate podTemplate: getTemplatesFor(label)) {\n+                LOGGER.log(Level.INFO, \"Template for label {0}: {1}\", new Object[] { label, podTemplate.getName() });\n                 for (int i = 0; i < toBeProvisioned; i++) {\n-                    if (!addProvisionedSlave(t, label, i)) {\n+                    // Check concurrency limits\n+                    if (!addProvisionedSlave(podTemplate, label, i, allInProvisioning.size())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4ODIxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned,\n          \n          \n            \n                                                    int numInProvisioning) throws Exception {\n          \n          \n            \n                private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned) throws Exception {", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480188210", "createdAt": "2020-08-31T14:58:44Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -580,7 +579,8 @@ public KubernetesClient connect() throws KubernetesAuthException, IOException {\n      * Check not too many already running.\n      *\n      */\n-    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int scheduledCount) throws Exception {\n+    private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull Label label, int numProvisioned,\n+                                        int numInProvisioning) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4ODMyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (numRunningOrPending + numProvisioned + numInProvisioning >= containerCap) {\n          \n          \n            \n                    if (numRunningOrPending + numProvisioned >= containerCap) {\n          \n      \n    \n    \n  \n\nNote: the logic here is broken anyway (not new), since numProvisioned relates only to the current label and not to the whole instance.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480188323", "createdAt": "2020-08-31T14:58:54Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -593,23 +593,27 @@ private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull\n             templateNamespace = client.getNamespace();\n         }\n \n+        // check overall concurrency limit using the default label(s) on all templates\n         Map<String, String> podLabels = getPodLabelsMap();\n-        List<Pod> allActiveSlavePods = getActiveSlavePods(client, templateNamespace, podLabels);\n-        if (allActiveSlavePods != null && containerCap <= allActiveSlavePods.size() + scheduledCount) {\n+        long numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= containerCap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4ODQ3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (numRunningOrPending + numProvisioned + numInProvisioning >= template.getInstanceCap()) {\n          \n          \n            \n                    if (numRunningOrPending + numProvisioned >= template.getInstanceCap()) {", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r480188473", "createdAt": "2020-08-31T14:59:06Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java", "diffHunk": "@@ -593,23 +593,27 @@ private boolean addProvisionedSlave(@Nonnull PodTemplate template, @CheckForNull\n             templateNamespace = client.getNamespace();\n         }\n \n+        // check overall concurrency limit using the default label(s) on all templates\n         Map<String, String> podLabels = getPodLabelsMap();\n-        List<Pod> allActiveSlavePods = getActiveSlavePods(client, templateNamespace, podLabels);\n-        if (allActiveSlavePods != null && containerCap <= allActiveSlavePods.size() + scheduledCount) {\n+        long numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= containerCap) {\n             LOGGER.log(Level.INFO,\n-                    \"Maximum number of concurrently running agent pods ({0}) reached for Kubernetes Cloud {4}, not provisioning: {1} running or pending in namespace {2} with Kubernetes labels {3}\",\n-                    new Object[] { containerCap, allActiveSlavePods.size() + scheduledCount, templateNamespace, getLabels(), name });\n+                    \"Maximum number of concurrently running agent pods ({0}) reached for Kubernetes Cloud {4}, \" +\n+                            \"not provisioning: {1} running or pending in namespace {2} with Kubernetes labels {3}\",\n+                    new Object[] { containerCap, numRunningOrPending, templateNamespace, getLabels(), name });\n             return false;\n         }\n \n-        Map<String, String> labelsMap = new HashMap<>(podLabels);\n-        labelsMap.putAll(template.getLabelsMap());\n-        List<Pod> activeTemplateSlavePods = getActiveSlavePods(client, templateNamespace, labelsMap);\n-        if (activeTemplateSlavePods != null && allActiveSlavePods != null && template.getInstanceCap() <= activeTemplateSlavePods.size() + scheduledCount) {\n+        // check template-level concurrency limit using template-level labels\n+        Map<String, String> templateLabels = new HashMap<>(podLabels);\n+        templateLabels.putAll(template.getLabelsMap());\n+        numRunningOrPending = getNumActiveSlavePods(client, templateNamespace, podLabels);\n+        if (numRunningOrPending + numProvisioned + numInProvisioning >= template.getInstanceCap()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0260445bd5404d0193ca33a555e1189d5de360d"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b17027d41730140acc0bdb0bc7636220977f8a6", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/8b17027d41730140acc0bdb0bc7636220977f8a6", "committedDate": "2020-08-31T18:06:19Z", "message": "Update src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java\n\nCo-authored-by: Vincent Latombe <vincent@latombe.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d24374322d7a793aa288b73bfadcf090216460d", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/7d24374322d7a793aa288b73bfadcf090216460d", "committedDate": "2020-08-31T18:06:28Z", "message": "Update src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java\n\nCo-authored-by: Vincent Latombe <vincent@latombe.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "446bc4e151b72b4e4f92480df0a0265558238563", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/446bc4e151b72b4e4f92480df0a0265558238563", "committedDate": "2020-08-31T18:07:44Z", "message": "Update src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java\n\nCo-authored-by: Vincent Latombe <vincent@latombe.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cc91f1235228a809c49f56cf656b5d1fd23ae27", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/2cc91f1235228a809c49f56cf656b5d1fd23ae27", "committedDate": "2020-08-31T18:07:51Z", "message": "Update src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesCloud.java\n\nCo-authored-by: Vincent Latombe <vincent@latombe.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4847112c2ff21737ff9ad8e6047c63fca9779fdd", "author": {"user": {"login": "schottsfired", "name": "David B. Schott"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/4847112c2ff21737ff9ad8e6047c63fca9779fdd", "committedDate": "2020-08-31T18:09:10Z", "message": "Merge branch 'master' of https://github.com/jenkinsci/kubernetes-plugin into fix-concurrency-limits"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NzE4OTU0", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#pullrequestreview-479718954", "createdAt": "2020-09-01T13:04:02Z", "commit": {"oid": "4847112c2ff21737ff9ad8e6047c63fca9779fdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowNDowMlrOHK1Svw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMzowNDowMlrOHK1Svw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTEyMDk1OQ==", "bodyText": "So the key change resides here. If the Kubernetes strategy did not provision any node through KubernetesCloud, it goes to the next strategy, allowing other clouds to pick up the request.\nHowever as soon as it was able to provision at least 1 node using a KubernetesCloud, we consider this label isn't served by other clouds so we just end the provisioning to prevent the standard strategy from causing overprovisioning.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#discussion_r481120959", "createdAt": "2020-09-01T13:04:02Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/io/jenkins/plugins/kubernetes/NoDelayProvisionerStrategy.java", "diffHunk": "@@ -64,26 +65,29 @@\n                         continue;\n                     }\n                 }\n+                canProvision = true;\n                 Collection<NodeProvisioner.PlannedNode> plannedNodes = cloud.provision(label, workloadToProvision);\n                 LOGGER.log(Level.FINE, \"Planned {0} new nodes\", plannedNodes.size());\n                 fireOnStarted(cloud, strategyState.getLabel(), plannedNodes);\n                 strategyState.recordPendingLaunches(plannedNodes);\n                 availableCapacity += plannedNodes.size();\n+                totalPlannedNodes += plannedNodes.size();\n                 LOGGER.log(Level.FINE, \"After provisioning, available capacity={0}, currentDemand={1}\", new Object[]{availableCapacity, currentDemand});\n                 break;\n             }\n         }\n-        if (availableCapacity > previousCapacity && label != null) {\n-            LOGGER.log(Level.FINE, \"Suggesting NodeProvisioner review\");\n-            Timer.get().schedule(label.nodeProvisioner::suggestReviewNow, 1L, TimeUnit.SECONDS);\n-        }\n-        if (availableCapacity >= currentDemand) {\n-            LOGGER.log(Level.FINE, \"Provisioning completed\");\n-            return NodeProvisioner.StrategyDecision.PROVISIONING_COMPLETED;\n+        if (currentDemand - availableCapacity <= 0) {\n+            LOGGER.log(Level.FINE, String.format(\"Provisioning completed for label: [%s]\", label));\n         } else {\n-            LOGGER.log(Level.FINE, \"Provisioning not complete, consulting remaining strategies\");\n-            return NodeProvisioner.StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n+            if (!canProvision) {\n+                return NodeProvisioner.StrategyDecision.CONSULT_REMAINING_STRATEGIES;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4847112c2ff21737ff9ad8e6047c63fca9779fdd"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NzE5OTAz", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/824#pullrequestreview-479719903", "createdAt": "2020-09-01T13:05:08Z", "commit": {"oid": "4847112c2ff21737ff9ad8e6047c63fca9779fdd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 154, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}