{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3ODAwMjM2", "number": 889, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjozMToyMFrOE22O0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjozMToyMFrOE22O0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTQ3MDg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesClientProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjozMToyMFrOHv3Anw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNjozMToyMFrOHv3Anw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk0NjM5OQ==", "bodyText": "Were these used for anything?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/889#discussion_r519946399", "createdAt": "2020-11-09T16:31:20Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesClientProvider.java", "diffHunk": "@@ -125,98 +86,6 @@ public KubernetesClient getClient() {\n         public int getValidity() {\n             return validity;\n         }\n-\n-        public Instant getExpired() {\n-            return expired;\n-        }\n-    }\n-\n-    @Extension\n-    public static class PurgeExpiredKubernetesClients extends AsyncPeriodicWork {\n-\n-        public PurgeExpiredKubernetesClients() {\n-            super(\"Purge expired KubernetesClients\");\n-        }\n-\n-        @Override\n-        public long getRecurrencePeriod() {\n-            return TimeUnit.SECONDS.toMillis(EXPIRED_CLIENTS_PURGE_PERIOD);\n-        }\n-\n-        @Override\n-        protected Level getNormalLoggingLevel() {\n-            return Level.FINEST;\n-        }\n-\n-        @Override\n-        protected void execute(TaskListener listener) {\n-            closeExpiredClients();\n-        }\n-    }\n-\n-    /**\n-     * Gracefully close expired clients\n-     * \n-     * @return whether some clients have been closed or not\n-     */\n-    @Restricted(NoExternalUse.class) // testing only\n-    public static boolean closeExpiredClients() {\n-        boolean b = false;\n-        if (expiredClients.isEmpty()) {\n-            return b;\n-        }\n-        LOGGER.log(Level.FINE, \"Closing {0} expired clients\",\n-                new Object[] { expiredClients.size() });\n-        for (Iterator<Client> it = expiredClients.iterator(); it.hasNext();) {\n-            Client expiredClient = it.next();\n-            // only purge it if the EXPIRED_CLIENTS_PURGE time has elapsed\n-            if (Instant.now().minus(EXPIRED_CLIENTS_PURGE_TIME, ChronoUnit.SECONDS)\n-                    .isBefore(expiredClient.getExpired())) {\n-                break;\n-            }\n-            KubernetesClient client = expiredClient.client;\n-            if (client instanceof HttpClientAware) {\n-                if (gracefulClose(client, ((HttpClientAware) client).getHttpClient())) {\n-                    it.remove();\n-                    b = true;\n-                }\n-            } else {\n-                LOGGER.log(Level.WARNING, \"{0} is not {1}, forcing close\",\n-                        new Object[] { client.toString(), HttpClientAware.class.getSimpleName() });\n-                client.close();\n-                it.remove();\n-                b = true;\n-            }\n-        }\n-        return b;\n-    }\n-\n-    @Restricted(NoExternalUse.class) // testing only\n-    public static boolean gracefulClose(KubernetesClient client, OkHttpClient httpClient) {\n-        Dispatcher dispatcher = httpClient.dispatcher();\n-        // Remove the client if there are no more users\n-        int runningCallsCount = dispatcher.runningCallsCount();\n-        int queuedCallsCount = dispatcher.queuedCallsCount();\n-        if (runningCallsCount == 0 && queuedCallsCount == 0) {\n-            LOGGER.log(Level.FINE, \"Closing {0}\", client.toString());\n-            client.close();\n-            return true;\n-        } else {\n-            LOGGER.log(Level.INFO, \"Not closing {0}: there are still running ({1}) or queued ({2}) calls\",\n-                    new Object[] { client.toString(), runningCallsCount, queuedCallsCount });\n-            return false;\n-        }\n-    }\n-\n-    private static volatile int runningCallsCount;\n-    private static volatile int queuedCallsCount;\n-\n-    public static int getRunningCallsCount() {\n-        return runningCallsCount;\n-    }\n-\n-    public static int getQueuedCallsCount() {\n-        return queuedCallsCount;\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94ce1fee94b79879ca61cfbb5c21347162e20880"}, "originalPosition": 184}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4866, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}