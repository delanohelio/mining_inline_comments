{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MzkwNzc4", "number": 772, "title": "[JENKINS-59340] Terminate agent when a container is terminated", "bodyText": "If a container in the pod gets terminated, terminates the agent and aborts the build.", "createdAt": "2020-04-27T10:02:54Z", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772", "merged": true, "mergeCommit": {"oid": "cf7e4c5ce08c6c04feccda07364eb231e729cfb4"}, "closed": true, "closedAt": "2020-05-18T12:14:09Z", "author": {"login": "Vlatombe"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbsWiwgH2gAyNDA5MzkwNzc4OmM1YTM4OGM5ZDQ4N2EzMjBlMTUwMjA0OTI1Yzk1YmVjNWQxY2M4N2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchi20fAH2gAyNDA5MzkwNzc4OjY2Nzk0ZGU3N2YyZjY1MTVmMmYwNGNmMWVlMmY2ZmUwMDRlMDgxYWE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/c5a388c9d487a320e150204925c95bec5d1cc87d", "committedDate": "2020-04-27T10:02:29Z", "message": "[JENKINS-59340] Terminate agent when a container is terminated\n\nIf a container in the pod gets terminated, terminates the agent and aborts the build."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTk0OTk5", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#pullrequestreview-401594999", "createdAt": "2020-04-28T08:08:13Z", "commit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODoxNFrOGNH9sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODoxNFrOGNH9sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNTE1Mg==", "bodyText": "Moved to https://github.com/jenkinsci/kubernetes-plugin/pull/772/files#diff-55ff61b56516ad2fa5dd36df80c3836cR243", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r416415152", "createdAt": "2020-04-28T08:08:14Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/AllContainersRunningPodWatcher.java", "diffHunk": "@@ -68,55 +66,7 @@ private void updateState(Pod pod) {\n     }\n \n     boolean areAllContainersRunning(Pod pod) {\n-        PodStatus podStatus = pod.getStatus();\n-        if (podStatus == null) {\n-            return false;\n-        }\n-        List<ContainerStatus> containerStatuses = pod.getStatus().getContainerStatuses();\n-        if (containerStatuses.isEmpty()) {\n-            return false;\n-        }\n-        for (ContainerStatus containerStatus : containerStatuses) {\n-            if (containerStatus != null) {\n-                ContainerStateWaiting waitingState = containerStatus.getState().getWaiting();\n-                if (waitingState != null) {\n-                    String waitingStateMsg = waitingState.getMessage();\n-                    if (waitingStateMsg != null && waitingStateMsg.contains(\"Back-off pulling image\")) {\n-                        String errorMsg = \"Unable to pull Docker image \\\"\"+containerStatus.getImage()+\"\\\". Check if image tag name is spelled correctly.\";\n-                        runListener.error(errorMsg);\n-                        throw new InvalidDockerImageException(errorMsg);\n-                    }\n-                    return false;\n-                }\n-                if (containerStatus.getState().getTerminated() != null) {\n-                    return false;\n-                }\n-                if (!containerStatus.getReady()) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTk1MTcy", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#pullrequestreview-401595172", "createdAt": "2020-04-28T08:08:28Z", "commit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODoyOFrOGNH-Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODoyOFrOGNH-Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNTI5OQ==", "bodyText": "Moved to PodUtils", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r416415299", "createdAt": "2020-04-28T08:08:28Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/AllContainersRunningPodWatcher.java", "diffHunk": "@@ -68,55 +66,7 @@ private void updateState(Pod pod) {\n     }\n \n     boolean areAllContainersRunning(Pod pod) {\n-        PodStatus podStatus = pod.getStatus();\n-        if (podStatus == null) {\n-            return false;\n-        }\n-        List<ContainerStatus> containerStatuses = pod.getStatus().getContainerStatuses();\n-        if (containerStatuses.isEmpty()) {\n-            return false;\n-        }\n-        for (ContainerStatus containerStatus : containerStatuses) {\n-            if (containerStatus != null) {\n-                ContainerStateWaiting waitingState = containerStatus.getState().getWaiting();\n-                if (waitingState != null) {\n-                    String waitingStateMsg = waitingState.getMessage();\n-                    if (waitingStateMsg != null && waitingStateMsg.contains(\"Back-off pulling image\")) {\n-                        String errorMsg = \"Unable to pull Docker image \\\"\"+containerStatus.getImage()+\"\\\". Check if image tag name is spelled correctly.\";\n-                        runListener.error(errorMsg);\n-                        throw new InvalidDockerImageException(errorMsg);\n-                    }\n-                    return false;\n-                }\n-                if (containerStatus.getState().getTerminated() != null) {\n-                    return false;\n-                }\n-                if (!containerStatus.getReady()) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n-    private List<ContainerStatus> getTerminatedContainers(Pod pod) {\n-        PodStatus podStatus = pod.getStatus();\n-        if (podStatus == null) {\n-            return Collections.emptyList();\n-        }\n-        List<ContainerStatus> containerStatuses = pod.getStatus().getContainerStatuses();\n-        if (containerStatuses.isEmpty()) {\n-            return Collections.emptyList();\n-        }\n-        List<ContainerStatus> result = new ArrayList<>();\n-        for (ContainerStatus containerStatus : containerStatuses) {\n-            if (containerStatus != null) {\n-                if (containerStatus.getState().getTerminated() != null) {\n-                    result.add(containerStatus);\n-                }\n-            }\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTk1Mjk2", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#pullrequestreview-401595296", "createdAt": "2020-04-28T08:08:38Z", "commit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODozOFrOGNH-mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODozOFrOGNH-mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNTM4NA==", "bodyText": "Moved to https://github.com/jenkinsci/kubernetes-plugin/pull/772/files#diff-55ff61b56516ad2fa5dd36df80c3836cR243", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r416415384", "createdAt": "2020-04-28T08:08:38Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -135,18 +135,6 @@ public void launch(SlaveComputer computer, TaskListener listener) {\n                  Watch w2 = eventWatch(client, podName, namespace, runListener)) {\n                 assert watcher != null; // assigned 3 lines above\n                 watcher.await(template.getSlaveConnectTimeout(), TimeUnit.SECONDS);\n-            } catch (InvalidDockerImageException e) {\n-                Jenkins jenkins = Jenkins.get();\n-                Queue q = jenkins.getQueue();\n-                String runUrl = pod.getMetadata().getAnnotations().get(\"runUrl\");\n-                for (Queue.Item item: q.getItems()) {\n-                    if (item.task.getUrl().equals(runUrl)) {\n-                        q.cancel(item);\n-                        break;\n-                    }\n-                }\n-                slave.terminate();\n-                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTk1NTMy", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#pullrequestreview-401595532", "createdAt": "2020-04-28T08:08:56Z", "commit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODo1N1rOGNH_Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowODo1N1rOGNH_Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNTU4Ng==", "bodyText": "Fixed null handling", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r416415586", "createdAt": "2020-04-28T08:08:57Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/KubernetesLauncher.java", "diffHunk": "@@ -254,17 +242,19 @@ private void checkTerminatedContainers(List<ContainerStatus> terminatedContainer\n     /**\n      * Log the last lines of containers logs\n      */\n-    private void logLastLines(List<ContainerStatus> containers, String podId, String namespace, KubernetesSlave slave,\n+    private void logLastLines(@CheckForNull List<ContainerStatus> containers, String podId, String namespace, KubernetesSlave slave,\n             Map<String, Integer> errors, KubernetesClient client) {\n-        for (ContainerStatus containerStatus : containers) {\n-            String containerName = containerStatus.getName();\n-            PrettyLoggable<String, LogWatch> tailingLines = client.pods().inNamespace(namespace).withName(podId)\n-                    .inContainer(containerStatus.getName()).tailingLines(30);\n-            String log = tailingLines.getLog();\n-            if (!StringUtils.isBlank(log)) {\n-                String msg = errors != null ? String.format(\" exited with error %s\", errors.get(containerName)) : \"\";\n-                LOGGER.log(Level.SEVERE, \"Error in provisioning; agent={0}, template={1}. Container {2}{3}. Logs: {4}\",\n-                        new Object[] { slave, slave.getTemplate(), containerName, msg, tailingLines.getLog() });\n+        if (containers != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTk1ODU3", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#pullrequestreview-401595857", "createdAt": "2020-04-28T08:09:24Z", "commit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowOToyNFrOGNIAcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODowOToyNFrOGNIAcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNTg1Nw==", "bodyText": "Moved to https://github.com/jenkinsci/kubernetes-plugin/pull/772/files#diff-55ff61b56516ad2fa5dd36df80c3836cR195", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r416415857", "createdAt": "2020-04-28T08:09:24Z", "author": {"login": "Vlatombe"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/pod/retention/Reaper.java", "diffHunk": "@@ -130,29 +142,25 @@ private void activate() {\n \n     @Override\n     public void eventReceived(Watcher.Action action, Pod pod) {\n-        if (action == Watcher.Action.DELETED) {\n-            String ns = pod.getMetadata().getNamespace();\n-            String name = pod.getMetadata().getName();\n-            Jenkins jenkins = Jenkins.getInstanceOrNull();\n-            if (jenkins != null) {\n-                for (Node n : new ArrayList<>(jenkins.getNodes())) {\n-                    if (!(n instanceof KubernetesSlave)) {\n-                        continue;\n-                    }\n-                    KubernetesSlave ks = (KubernetesSlave) n;\n-                    if (Objects.equals(ks.getNamespace(), ns) && Objects.equals(ks.getPodName(), name)) {\n-                        LOGGER.info(() -> ns + \"/\" + name + \" was just deleted, so removing corresponding Jenkins agent\");\n-                        try {\n-                            jenkins.removeNode(ks);\n-                            return;\n-                        } catch (Exception x) {\n-                            LOGGER.log(Level.WARNING, \"failed to reap \" + ns + \"/\" + name, x);\n-                        }\n-                    }\n-                }\n-            }\n-            LOGGER.fine(() -> \"received deletion notice for \" + ns + \"/\" + name + \" which does not seem to correspond to any Jenkins agent\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNTk2NjU0", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#pullrequestreview-401596654", "createdAt": "2020-04-28T08:10:29Z", "commit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODoxMDoyOVrOGNIC9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwODoxMDoyOVrOGNIC9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNjUwMw==", "bodyText": "https://github.com/jenkinsci/kubernetes-plugin/pull/772/files#diff-55ff61b56516ad2fa5dd36df80c3836cR213 intercepts the event before the node is actually removed.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r416416503", "createdAt": "2020-04-28T08:10:29Z", "author": {"login": "Vlatombe"}, "path": "src/test/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/KubernetesPipelineTest.java", "diffHunk": "@@ -436,7 +436,14 @@ public void terminatedPod() throws Exception {\n         r.waitForMessage(\"+ sleep\", b);\n         deletePods(cloud.connect(), getLabels(this, name), false);\n         r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(b));\n-        r.waitForMessage(new ExecutorStepExecution.RemovedNodeCause().getShortDescription(), b);\n+        r.waitForMessage(\"Container jnlp was terminated\", b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjAzODcw", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#pullrequestreview-402603870", "createdAt": "2020-04-29T12:09:02Z", "commit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "state": "APPROVED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjowOTowM1rOGN72Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjoyMDoyN1rOGN8NpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2NTIwNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return pod.getSpec().getContainers().size() == pod.getStatus().getContainerStatuses().size() && !PodUtils.getContainerStatus(pod).stream().anyMatch(cs -> !cs.getReady());\n          \n          \n            \n                    return pod.getSpec().getContainers().size() == pod.getStatus().getContainerStatuses().size() && PodUtils.getContainerStatus(pod).stream().allMatch(ContainerStatus::getReady);\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417265207", "createdAt": "2020-04-29T12:09:03Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/AllContainersRunningPodWatcher.java", "diffHunk": "@@ -68,55 +66,7 @@ private void updateState(Pod pod) {\n     }\n \n     boolean areAllContainersRunning(Pod pod) {\n-        PodStatus podStatus = pod.getStatus();\n-        if (podStatus == null) {\n-            return false;\n-        }\n-        List<ContainerStatus> containerStatuses = pod.getStatus().getContainerStatuses();\n-        if (containerStatuses.isEmpty()) {\n-            return false;\n-        }\n-        for (ContainerStatus containerStatus : containerStatuses) {\n-            if (containerStatus != null) {\n-                ContainerStateWaiting waitingState = containerStatus.getState().getWaiting();\n-                if (waitingState != null) {\n-                    String waitingStateMsg = waitingState.getMessage();\n-                    if (waitingStateMsg != null && waitingStateMsg.contains(\"Back-off pulling image\")) {\n-                        String errorMsg = \"Unable to pull Docker image \\\"\"+containerStatus.getImage()+\"\\\". Check if image tag name is spelled correctly.\";\n-                        runListener.error(errorMsg);\n-                        throw new InvalidDockerImageException(errorMsg);\n-                    }\n-                    return false;\n-                }\n-                if (containerStatus.getState().getTerminated() != null) {\n-                    return false;\n-                }\n-                if (!containerStatus.getReady()) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return true;\n-    }\n-\n-    private List<ContainerStatus> getTerminatedContainers(Pod pod) {\n-        PodStatus podStatus = pod.getStatus();\n-        if (podStatus == null) {\n-            return Collections.emptyList();\n-        }\n-        List<ContainerStatus> containerStatuses = pod.getStatus().getContainerStatuses();\n-        if (containerStatuses.isEmpty()) {\n-            return Collections.emptyList();\n-        }\n-        List<ContainerStatus> result = new ArrayList<>();\n-        for (ContainerStatus containerStatus : containerStatuses) {\n-            if (containerStatus != null) {\n-                if (containerStatus.getState().getTerminated() != null) {\n-                    result.add(containerStatus);\n-                }\n-            }\n-        }\n-        return result;\n+        return pod.getSpec().getContainers().size() == pod.getStatus().getContainerStatuses().size() && !PodUtils.getContainerStatus(pod).stream().anyMatch(cs -> !cs.getReady());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2NjE3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return pod.getStatus().getContainerStatuses();\n          \n          \n            \n                    return podStatus.getContainerStatuses();", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417266179", "createdAt": "2020-04-29T12:10:48Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 CloudBees, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.csanchez.jenkins.plugins.kubernetes;\n+\n+import edu.umd.cs.findbugs.annotations.NonNull;\n+import io.fabric8.kubernetes.api.model.ContainerStatus;\n+import io.fabric8.kubernetes.api.model.Pod;\n+import io.fabric8.kubernetes.api.model.PodStatus;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.function.Predicate;\n+import java.util.stream.Collectors;\n+\n+public final class PodUtils {\n+\n+    public static final Predicate<ContainerStatus> CONTAINER_IS_TERMINATED = cs -> cs.getState().getTerminated() != null;\n+    public static final Predicate<ContainerStatus> CONTAINER_IS_WAITING = cs -> cs.getState().getWaiting() != null;\n+\n+    @NonNull\n+    public static List<ContainerStatus> getTerminatedContainers(Pod pod) {\n+        return getContainers(pod, CONTAINER_IS_TERMINATED);\n+    }\n+\n+    public static List<ContainerStatus> getWaitingContainers(Pod pod) {\n+        return getContainers(pod, CONTAINER_IS_WAITING);\n+    }\n+\n+    public static List<ContainerStatus> getContainerStatus(Pod pod) {\n+        PodStatus podStatus = pod.getStatus();\n+        if (podStatus == null) {\n+            return Collections.emptyList();\n+        }\n+        return pod.getStatus().getContainerStatuses();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2ODI2OA==", "bodyText": "or\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .filter(n -> n instanceof KubernetesSlave)\n          \n          \n            \n                            .map(n -> (KubernetesSlave) n)\n          \n          \n            \n                            .filter(KubernetesSlave.class::isInstance)\n          \n          \n            \n                            .map(KubernetesSlave.class::cast)\n          \n      \n    \n    \n  \n\njust to show off Java 8 skills without really making code more legible", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417268268", "createdAt": "2020-04-29T12:14:50Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/pod/retention/Reaper.java", "diffHunk": "@@ -130,29 +142,25 @@ private void activate() {\n \n     @Override\n     public void eventReceived(Watcher.Action action, Pod pod) {\n-        if (action == Watcher.Action.DELETED) {\n-            String ns = pod.getMetadata().getNamespace();\n-            String name = pod.getMetadata().getName();\n-            Jenkins jenkins = Jenkins.getInstanceOrNull();\n-            if (jenkins != null) {\n-                for (Node n : new ArrayList<>(jenkins.getNodes())) {\n-                    if (!(n instanceof KubernetesSlave)) {\n-                        continue;\n-                    }\n-                    KubernetesSlave ks = (KubernetesSlave) n;\n-                    if (Objects.equals(ks.getNamespace(), ns) && Objects.equals(ks.getPodName(), name)) {\n-                        LOGGER.info(() -> ns + \"/\" + name + \" was just deleted, so removing corresponding Jenkins agent\");\n-                        try {\n-                            jenkins.removeNode(ks);\n-                            return;\n-                        } catch (Exception x) {\n-                            LOGGER.log(Level.WARNING, \"failed to reap \" + ns + \"/\" + name, x);\n-                        }\n-                    }\n-                }\n-            }\n-            LOGGER.fine(() -> \"received deletion notice for \" + ns + \"/\" + name + \" which does not seem to correspond to any Jenkins agent\");\n+        String ns = pod.getMetadata().getNamespace();\n+        String name = pod.getMetadata().getName();\n+        Jenkins jenkins = Jenkins.getInstanceOrNull();\n+        if (jenkins == null) {\n+            return;\n+        }\n+        Optional<KubernetesSlave> optionalNode = resolveNode(jenkins, ns, name);\n+        if (!optionalNode.isPresent()) {\n+            return;\n         }\n+        ExtensionList.lookup(Listener.class).forEach(listener -> listener.onEvent(action, optionalNode.get(), pod));\n+    }\n+\n+    private static Optional<KubernetesSlave> resolveNode(@NonNull Jenkins jenkins, String namespace, String name) {\n+        return new ArrayList<>(jenkins.getNodes()).stream()\n+                .filter(n -> n instanceof KubernetesSlave)\n+                .map(n -> (KubernetesSlave) n)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2ODY3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static abstract class Listener implements ExtensionPoint {\n          \n          \n            \n                    /**\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param action the kind of event that happened to the referred pod\n          \n          \n            \n                     * @param node The affected node\n          \n          \n            \n                     * @param pod The affected pod\n          \n          \n            \n                     */\n          \n          \n            \n                    public abstract void onEvent(@NonNull Watcher.Action action, @NonNull KubernetesSlave node, @NonNull Pod pod);\n          \n          \n            \n                public interface class Listener extends ExtensionPoint {\n          \n          \n            \n                    /**\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param action the kind of event that happened to the referred pod\n          \n          \n            \n                     * @param node The affected node\n          \n          \n            \n                     * @param pod The affected pod\n          \n          \n            \n                     */\n          \n          \n            \n                    void onEvent(@NonNull Watcher.Action action, @NonNull KubernetesSlave node, @NonNull Pod pod);", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417268673", "createdAt": "2020-04-29T12:15:38Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/pod/retention/Reaper.java", "diffHunk": "@@ -169,4 +177,99 @@ private void closeWatch() {\n             watch.close();\n         }\n     }\n+\n+    /**\n+     * Listener called when a Kubernetes event related to a Kubernetes agent happens.\n+     */\n+    public static abstract class Listener implements ExtensionPoint {\n+        /**\n+         *\n+         * @param action the kind of event that happened to the referred pod\n+         * @param node The affected node\n+         * @param pod The affected pod\n+         */\n+        public abstract void onEvent(@NonNull Watcher.Action action, @NonNull KubernetesSlave node, @NonNull Pod pod);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2OTI1NA==", "bodyText": "Better for the caller at https://github.com/jenkinsci/kubernetes-plugin/pull/772/files#diff-55ff61b56516ad2fa5dd36df80c3836cR155 to catch Exception for any listener", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417269254", "createdAt": "2020-04-29T12:16:45Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/pod/retention/Reaper.java", "diffHunk": "@@ -169,4 +177,99 @@ private void closeWatch() {\n             watch.close();\n         }\n     }\n+\n+    /**\n+     * Listener called when a Kubernetes event related to a Kubernetes agent happens.\n+     */\n+    public static abstract class Listener implements ExtensionPoint {\n+        /**\n+         *\n+         * @param action the kind of event that happened to the referred pod\n+         * @param node The affected node\n+         * @param pod The affected pod\n+         */\n+        public abstract void onEvent(@NonNull Watcher.Action action, @NonNull KubernetesSlave node, @NonNull Pod pod);\n+    }\n+\n+    @Extension\n+    public static class RemoveAgentOnPodDeleted extends Listener {\n+        @Override\n+        public void onEvent(@NonNull Watcher.Action action, @NonNull KubernetesSlave node, @NonNull Pod pod) {\n+            if (action != Action.DELETED) {\n+                return;\n+            }\n+            String ns = pod.getMetadata().getNamespace();\n+            String name = pod.getMetadata().getName();\n+            LOGGER.info(() -> ns + \"/\" + name + \" was just deleted, so removing corresponding Jenkins agent\");\n+            try {\n+                Jenkins.get().removeNode(node);\n+            } catch (Exception x) {\n+                LOGGER.log(Level.WARNING, \"failed to reap \" + ns + \"/\" + name, x);\n+            }\n+        }\n+    }\n+\n+    @Extension\n+    public static class TerminateAgentOnContainerTerminated extends Listener {\n+        @Override\n+        public void onEvent(@NonNull Action action, @NonNull KubernetesSlave node, @NonNull Pod pod) {\n+            if (action != Action.MODIFIED) {\n+                return;\n+            }\n+            List<ContainerStatus> terminatedContainers = PodUtils.getTerminatedContainers(pod);\n+            if (!terminatedContainers.isEmpty()) {\n+                String ns = pod.getMetadata().getNamespace();\n+                String name = pod.getMetadata().getName();\n+                TaskListener runListener = node.getTemplate().getListener();\n+                terminatedContainers.forEach(c -> {\n+                    ContainerStateTerminated t = c.getState().getTerminated();\n+                    LOGGER.info(() -> ns + \"/\" + name + \" Container \" + c.getName() + \" was just terminated, so removing the corresponding Jenkins agent\");\n+                    runListener.getLogger().printf(\"%s/%s Container %s was terminated (Exit Code: %d, Reason: %s)%n\", ns, name, c.getName(), t.getExitCode(), t.getReason());\n+                });\n+                Computer computer = node.toComputer();\n+                if (computer != null) {\n+                    computer.getExecutors().forEach(exec -> exec.interrupt());\n+                }\n+                try {\n+                    node.terminate();\n+                } catch (Exception x) {\n+                    LOGGER.log(Level.WARNING, \"failed to reap \" + ns + \"/\" + name, x);\n+                }\n+            }\n+        }\n+    }\n+\n+    @Extension\n+    public static class TerminateAgentOnImagePullBackOff extends Listener {\n+\n+        @Override\n+        public void onEvent(@NonNull Action action, @NonNull KubernetesSlave node, @NonNull Pod pod) {\n+            String ns = pod.getMetadata().getNamespace();\n+            String name = pod.getMetadata().getName();\n+            List<ContainerStatus> backOffContainers = PodUtils.getContainers(pod, cs -> {\n+                ContainerStateWaiting waiting = cs.getState().getWaiting();\n+                return waiting != null && waiting.getMessage() != null && waiting.getMessage().contains(\"Back-off pulling image\");\n+            });\n+            if (backOffContainers.isEmpty()) {\n+                return;\n+            }\n+            backOffContainers.forEach(cs -> {\n+                TaskListener runListener = node.getTemplate().getListener();\n+                runListener.error(\"Unable to pull Docker image \\\"\"+cs.getImage()+\"\\\". Check if image tag name is spelled correctly.\");\n+            });\n+            Queue q = Jenkins.get().getQueue();\n+            String runUrl = pod.getMetadata().getAnnotations().get(\"runUrl\");\n+            for (Queue.Item item: q.getItems()) {\n+                if (item.task.getUrl().equals(runUrl)) {\n+                    q.cancel(item);\n+                    break;\n+                }\n+            }\n+            try {\n+                node.terminate();\n+            } catch (Exception x) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2OTU4MA==", "bodyText": "Mm, so making this test not exactly useless but not testing the original fix. OK.", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417269580", "createdAt": "2020-04-29T12:17:22Z", "author": {"login": "jglick"}, "path": "src/test/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/KubernetesPipelineTest.java", "diffHunk": "@@ -436,7 +436,14 @@ public void terminatedPod() throws Exception {\n         r.waitForMessage(\"+ sleep\", b);\n         deletePods(cloud.connect(), getLabels(this, name), false);\n         r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(b));\n-        r.waitForMessage(new ExecutorStepExecution.RemovedNodeCause().getShortDescription(), b);\n+        r.waitForMessage(\"Container jnlp was terminated\", b);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjQxNjUwMw=="}, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI2OTczNQ==", "bodyText": "Nice!", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417269735", "createdAt": "2020-04-29T12:17:41Z", "author": {"login": "jglick"}, "path": "src/test/java/org/csanchez/jenkins/plugins/kubernetes/pipeline/KubernetesPipelineTest.java", "diffHunk": "@@ -436,7 +436,14 @@ public void terminatedPod() throws Exception {\n         r.waitForMessage(\"+ sleep\", b);\n         deletePods(cloud.connect(), getLabels(this, name), false);\n         r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(b));\n-        r.waitForMessage(new ExecutorStepExecution.RemovedNodeCause().getShortDescription(), b);\n+        r.waitForMessage(\"Container jnlp was terminated\", b);\n+    }\n+\n+    @Issue(\"JENKINS-59340\")\n+    @Test\n+    public void containerTerminated() throws Exception {\n+        r.assertBuildStatus(Result.ABORTED, r.waitForCompletion(b));\n+        r.waitForMessage(\"Container jnlp was terminated (Exit Code: 137, Reason: OOMKilled)\", b);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI3MDIxNw==", "bodyText": "What will this test do if run in a cluster with PodSecurityPolicy enabled?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417270217", "createdAt": "2020-04-29T12:18:37Z", "author": {"login": "jglick"}, "path": "src/test/resources/org/csanchez/jenkins/plugins/kubernetes/pipeline/containerTerminated.groovy", "diffHunk": "@@ -0,0 +1,22 @@\n+podTemplate(yaml:'''\n+spec:\n+  containers:\n+  - name: jnlp\n+    image: jenkins/inbound-agent:4.3-4 # alpine flavor has alpine 3.9 which doesn't have stress-ng\n+    securityContext:\n+      runAsUser: 0\n+      privileged: true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI3MTIwNQ==", "bodyText": "Maybe better to just publish an image (e.g., Docker Hub automated build) with this preinstalled? Or kill a different container using an image that already has this tool installed? Or perhaps there is some stock Linux command which can be forced to do giant allocations with the right arguments?", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417271205", "createdAt": "2020-04-29T12:20:27Z", "author": {"login": "jglick"}, "path": "src/test/resources/org/csanchez/jenkins/plugins/kubernetes/pipeline/containerTerminated.groovy", "diffHunk": "@@ -0,0 +1,22 @@\n+podTemplate(yaml:'''\n+spec:\n+  containers:\n+  - name: jnlp\n+    image: jenkins/inbound-agent:4.3-4 # alpine flavor has alpine 3.9 which doesn't have stress-ng\n+    securityContext:\n+      runAsUser: 0\n+      privileged: true\n+    resources:\n+      limits:\n+        memory: \"256Mi\"\n+      requests:\n+        memory: \"256Mi\"\n+''') {\n+  node(POD_LABEL) {\n+    sh '''\n+        apt-get update\n+        apt-get install -y stress-ng", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5a388c9d487a320e150204925c95bec5d1cc87d"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5e9f1466b4825bd4e0303b2c31e01ba3df8690b", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/a5e9f1466b4825bd4e0303b2c31e01ba3df8690b", "committedDate": "2020-04-29T12:21:38Z", "message": "Update src/main/java/org/csanchez/jenkins/plugins/kubernetes/AllContainersRunningPodWatcher.java\n\nCo-Authored-By: Jesse Glick <jglick@cloudbees.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c884fbdc7df24d7f64e6f58a16e52f100e0abc0f", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/c884fbdc7df24d7f64e6f58a16e52f100e0abc0f", "committedDate": "2020-04-29T12:22:04Z", "message": "Update src/main/java/org/csanchez/jenkins/plugins/kubernetes/PodUtils.java\n\nCo-Authored-By: Jesse Glick <jglick@cloudbees.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5546e72ce52ec7245928bf98f2b6ad4115baa6a9", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/5546e72ce52ec7245928bf98f2b6ad4115baa6a9", "committedDate": "2020-04-29T12:22:21Z", "message": "Update src/main/java/org/csanchez/jenkins/plugins/kubernetes/pod/retention/Reaper.java\n\nCo-Authored-By: Jesse Glick <jglick@cloudbees.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b3634eff570e5a0d76db564c448128061f8a7d0", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/0b3634eff570e5a0d76db564c448128061f8a7d0", "committedDate": "2020-04-29T12:31:10Z", "message": "Handle exception at caller site"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjIxMTcw", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#pullrequestreview-402621170", "createdAt": "2020-04-29T12:34:06Z", "commit": {"oid": "0b3634eff570e5a0d76db564c448128061f8a7d0"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjozNDowN1rOGN8scQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMjozNDowN1rOGN8scQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzI3OTA4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            LOGGER.log(Level.WARNING, \"Listener \" + listener + \" failed for\" + ns + \"/\" + name, x);\n          \n          \n            \n                            LOGGER.log(Level.WARNING, \"Listener \" + listener + \" failed for \" + ns + \"/\" + name, x);", "url": "https://github.com/jenkinsci/kubernetes-plugin/pull/772#discussion_r417279089", "createdAt": "2020-04-29T12:34:07Z", "author": {"login": "jglick"}, "path": "src/main/java/org/csanchez/jenkins/plugins/kubernetes/pod/retention/Reaper.java", "diffHunk": "@@ -152,13 +152,19 @@ public void eventReceived(Watcher.Action action, Pod pod) {\n         if (!optionalNode.isPresent()) {\n             return;\n         }\n-        ExtensionList.lookup(Listener.class).forEach(listener -> listener.onEvent(action, optionalNode.get(), pod));\n+        ExtensionList.lookup(Listener.class).forEach(listener -> {\n+            try {\n+                listener.onEvent(action, optionalNode.get(), pod);\n+            } catch (Exception x) {\n+                LOGGER.log(Level.WARNING, \"Listener \" + listener + \" failed for\" + ns + \"/\" + name, x);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b3634eff570e5a0d76db564c448128061f8a7d0"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a95159549d6106b1b70d0f9abe991ae0299222b7", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/a95159549d6106b1b70d0f9abe991ae0299222b7", "committedDate": "2020-04-29T12:34:59Z", "message": "Update src/main/java/org/csanchez/jenkins/plugins/kubernetes/pod/retention/Reaper.java\n\nCo-Authored-By: Jesse Glick <jglick@cloudbees.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f25275357f7ec633ae44a109a3f9a6c1a8d49c52", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/f25275357f7ec633ae44a109a3f9a6c1a8d49c52", "committedDate": "2020-04-29T12:48:21Z", "message": "Handle pod failure as well"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8423b86655d589c2ab9088141aff19b5584b381a", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/8423b86655d589c2ab9088141aff19b5584b381a", "committedDate": "2020-04-29T14:40:19Z", "message": "Remove deadstore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f09bf7e9905bc8b9807f9d4a2ec1dd4c3120b766", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/f09bf7e9905bc8b9807f9d4a2ec1dd4c3120b766", "committedDate": "2020-05-04T14:04:38Z", "message": "Merge branch 'master' into JENKINS-59340"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eebcd28e9c54c4cd9da712dacc26f999a06a072b", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/eebcd28e9c54c4cd9da712dacc26f999a06a072b", "committedDate": "2020-05-14T07:49:53Z", "message": "Merge branch 'master' into JENKINS-59340"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d301d6af7374fb0ab423797ef6af7f3c00f7a564", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/d301d6af7374fb0ab423797ef6af7f3c00f7a564", "committedDate": "2020-05-14T14:16:15Z", "message": "Somehow I messed up this one, fixing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0610bf44dad8cac15b121b2263efd6a38eb3c1d", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/b0610bf44dad8cac15b121b2263efd6a38eb3c1d", "committedDate": "2020-05-14T14:56:41Z", "message": "Merge branch 'master' into JENKINS-59340"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b392439da71c2c3adc430572b527d59ab234765", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/4b392439da71c2c3adc430572b527d59ab234765", "committedDate": "2020-05-15T12:29:27Z", "message": "Update reaper to not interrupt executors, this is already handled in pipeline."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66794de77f2f6515f2f04cf1ee2f6fe004e081aa", "author": {"user": {"login": "Vlatombe", "name": "Vincent Latombe"}}, "url": "https://github.com/jenkinsci/kubernetes-plugin/commit/66794de77f2f6515f2f04cf1ee2f6fe004e081aa", "committedDate": "2020-05-15T14:22:14Z", "message": "Stress-ng from a sidecar"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 115, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}