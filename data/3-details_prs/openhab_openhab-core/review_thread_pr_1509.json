{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjgwOTg4", "number": 1509, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTozNzoyMlrOEBfS1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0NjoyOVrOECBXtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTk2NzU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTozNzoyMlrOGdXeuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTozNzoyMlrOGdXeuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NjU4NA==", "bodyText": "Should we omit using the annotation @SupressWarnings by using the wildcard character (?)?", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433446584", "createdAt": "2020-06-01T19:37:22Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.types.Command;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if a member of an item group receives a command.\n+ * The group name and command value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupCommandTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GroupCommandTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final String command;\n+    private final String topic;\n+\n+    private final Set<String> types;\n+    private final BundleContext bundleContext;\n+\n+    public static final String MODULE_TYPE_ID = \"core.GroupCommandTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_COMMAND = \"command\";\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private ServiceRegistration eventSubscriberRegistration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTk2OTI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTozNzo1MlrOGdXftQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTozNzo1MlrOGdXftQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0NjgzNw==", "bodyText": "Can you add nullness annotations on new classes and interfaces?", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433446837", "createdAt": "2020-06-01T19:37:52Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.types.Command;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if a member of an item group receives a command.\n+ * The group name and command value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupCommandTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTk4MjM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo0MjowN1rOGdXnxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo0MjowN1rOGdXnxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ0ODkwMQ==", "bodyText": "Is this local variable just for suppressing the null-warning on callback? If so you may want to cast it directly to TriggerHandlerCallback.\nAnd check for callback instanceof TriggerHandlerCallback.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433448901", "createdAt": "2020-06-01T19:42:07Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.types.Command;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if a member of an item group receives a command.\n+ * The group name and command value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupCommandTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GroupCommandTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final String command;\n+    private final String topic;\n+\n+    private final Set<String> types;\n+    private final BundleContext bundleContext;\n+\n+    public static final String MODULE_TYPE_ID = \"core.GroupCommandTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_COMMAND = \"command\";\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private ServiceRegistration eventSubscriberRegistration;\n+    private ItemRegistry itemRegistry;\n+\n+    public GroupCommandTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.groupName = (String) module.getConfiguration().get(CFG_GROUPNAME);\n+        this.command = (String) module.getConfiguration().get(CFG_COMMAND);\n+        this.types = Collections.singleton(ItemCommandEvent.TYPE);\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        this.topic = \"smarthome/items/\";\n+        properties.put(\"event.topics\", topic);\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (callback != null) {\n+            ModuleHandlerCallback cb = callback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTk5MjQxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo0NToyMFrOGdXt4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo0NToyMFrOGdXt4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MDQ2NA==", "bodyText": "Avoid duplicate castings and assign it to a local variable instead.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433450464", "createdAt": "2020-06-01T19:45:20Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupCommandTriggerHandler.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.ItemCommandEvent;\n+import org.openhab.core.types.Command;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if a member of an item group receives a command.\n+ * The group name and command value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupCommandTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GroupCommandTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final String command;\n+    private final String topic;\n+\n+    private final Set<String> types;\n+    private final BundleContext bundleContext;\n+\n+    public static final String MODULE_TYPE_ID = \"core.GroupCommandTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_COMMAND = \"command\";\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private ServiceRegistration eventSubscriberRegistration;\n+    private ItemRegistry itemRegistry;\n+\n+    public GroupCommandTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.groupName = (String) module.getConfiguration().get(CFG_GROUPNAME);\n+        this.command = (String) module.getConfiguration().get(CFG_COMMAND);\n+        this.types = Collections.singleton(ItemCommandEvent.TYPE);\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        this.topic = \"smarthome/items/\";\n+        properties.put(\"event.topics\", topic);\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (callback != null) {\n+            ModuleHandlerCallback cb = callback;\n+            logger.trace(\"Received Event: Source: {} Topic: {} Type: {}  Payload: {}\", event.getSource(),\n+                    event.getTopic(), event.getType(), event.getPayload());\n+            Map<String, Object> values = new HashMap<>();\n+            if (event instanceof ItemCommandEvent) {\n+                String itemName = ((ItemCommandEvent) event).getItemName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDAwMzQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo0OToxNlrOGdX1Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo0OToxNlrOGdX1Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1MjMyNg==", "bodyText": "Omit @SupressWarnings.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433452326", "createdAt": "2020-06-01T19:49:16Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.GroupItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if state event of a member of an item group occurs.\n+ * The group name and state value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class GroupStateTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+    private final Logger logger = LoggerFactory.getLogger(GroupStateTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final String state;\n+    private final String previousState;\n+    private Set<String> types;\n+    private final BundleContext bundleContext;\n+    private ItemRegistry itemRegistry;\n+\n+    public static final String UPDATE_MODULE_TYPE_ID = \"core.GroupStateUpdateTrigger\";\n+    public static final String CHANGE_MODULE_TYPE_ID = \"core.GroupStateChangeTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_STATE = \"state\";\n+    private static final String CFG_PREVIOUS_STATE = \"previousState\";\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private ServiceRegistration eventSubscriberRegistration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDAxNzU0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo1NDoxMVrOGdX-DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMDowNDoyMVrOGercvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NDYwNQ==", "bodyText": "What about other Commands (e.g. PLAY, PAUSE, etc.)?", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433454605", "createdAt": "2020-06-01T19:54:11Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "diffHunk": "@@ -231,6 +231,256 @@\n \t\t\t\t\t\"reference\": \"event\"\n \t\t\t\t}\n \t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"uid\": \"core.GroupCommandTrigger\",\n+\t\t\t\"label\": \"a member of an item group receives a command\",\n+\t\t\t\"description\": \"This triggers the rule if a member of an item group receives a command.\",\n+\t\t\t\"configDescriptions\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"groupName\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"context\": \"item\",\n+\t\t\t\t\t\"label\": \"Group\",\n+\t\t\t\t\t\"description\": \"the name of the item group\",\n+\t\t\t\t\t\"required\": true\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"command\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"label\": \"Command\",\n+\t\t\t\t\t\"description\": \"the received command\",\n+\t\t\t\t\t\"required\": false,\n+\t\t\t\t\t\"limitToOptions\": false,\n+\t\t\t\t\t\"options\": [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMDk5OA==", "bodyText": "Might become a rather long list - I did it the same way here as we have it for all the other item triggers, so this is in line. It can be discussed whether only the most frequently used commands should be listed or all enum types, but this can be done in a separate PR if needed.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434120998", "createdAt": "2020-06-02T19:19:25Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "diffHunk": "@@ -231,6 +231,256 @@\n \t\t\t\t\t\"reference\": \"event\"\n \t\t\t\t}\n \t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"uid\": \"core.GroupCommandTrigger\",\n+\t\t\t\"label\": \"a member of an item group receives a command\",\n+\t\t\t\"description\": \"This triggers the rule if a member of an item group receives a command.\",\n+\t\t\t\"configDescriptions\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"groupName\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"context\": \"item\",\n+\t\t\t\t\t\"label\": \"Group\",\n+\t\t\t\t\t\"description\": \"the name of the item group\",\n+\t\t\t\t\t\"required\": true\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"command\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"label\": \"Command\",\n+\t\t\t\t\t\"description\": \"the received command\",\n+\t\t\t\t\t\"required\": false,\n+\t\t\t\t\t\"limitToOptions\": false,\n+\t\t\t\t\t\"options\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NDYwNQ=="}, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzOTUwNg==", "bodyText": "Yes, I know. Does it make sense to add / introduce a \"context\": \"command\" for these options? Then is can be handled globally?", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434339506", "createdAt": "2020-06-03T06:39:16Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "diffHunk": "@@ -231,6 +231,256 @@\n \t\t\t\t\t\"reference\": \"event\"\n \t\t\t\t}\n \t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"uid\": \"core.GroupCommandTrigger\",\n+\t\t\t\"label\": \"a member of an item group receives a command\",\n+\t\t\t\"description\": \"This triggers the rule if a member of an item group receives a command.\",\n+\t\t\t\"configDescriptions\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"groupName\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"context\": \"item\",\n+\t\t\t\t\t\"label\": \"Group\",\n+\t\t\t\t\t\"description\": \"the name of the item group\",\n+\t\t\t\t\t\"required\": true\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"command\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"label\": \"Command\",\n+\t\t\t\t\t\"description\": \"the received command\",\n+\t\t\t\t\t\"required\": false,\n+\t\t\t\t\t\"limitToOptions\": false,\n+\t\t\t\t\t\"options\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NDYwNQ=="}, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDgyMjMzMw==", "bodyText": "Might be an option, but it would possibly shift the implementation work to the UIs then.\nI would wait and see how it is really used in daily life and what we feel is missing and should be changed. I don't have a clear view on it yet.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434822333", "createdAt": "2020-06-03T20:04:21Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "diffHunk": "@@ -231,6 +231,256 @@\n \t\t\t\t\t\"reference\": \"event\"\n \t\t\t\t}\n \t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"uid\": \"core.GroupCommandTrigger\",\n+\t\t\t\"label\": \"a member of an item group receives a command\",\n+\t\t\t\"description\": \"This triggers the rule if a member of an item group receives a command.\",\n+\t\t\t\"configDescriptions\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"groupName\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"context\": \"item\",\n+\t\t\t\t\t\"label\": \"Group\",\n+\t\t\t\t\t\"description\": \"the name of the item group\",\n+\t\t\t\t\t\"required\": true\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"command\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"label\": \"Command\",\n+\t\t\t\t\t\"description\": \"the received command\",\n+\t\t\t\t\t\"required\": false,\n+\t\t\t\t\t\"limitToOptions\": false,\n+\t\t\t\t\t\"options\": [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NDYwNQ=="}, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDAyMzE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo1NTo1N1rOGdYBkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjozNjozNlrOGeN6gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NTUwNQ==", "bodyText": "\"required\" = false is default so we don't need to set it.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433455505", "createdAt": "2020-06-01T19:55:57Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "diffHunk": "@@ -231,6 +231,256 @@\n \t\t\t\t\t\"reference\": \"event\"\n \t\t\t\t}\n \t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"uid\": \"core.GroupCommandTrigger\",\n+\t\t\t\"label\": \"a member of an item group receives a command\",\n+\t\t\t\"description\": \"This triggers the rule if a member of an item group receives a command.\",\n+\t\t\t\"configDescriptions\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"groupName\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"context\": \"item\",\n+\t\t\t\t\t\"label\": \"Group\",\n+\t\t\t\t\t\"description\": \"the name of the item group\",\n+\t\t\t\t\t\"required\": true\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"command\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"label\": \"Command\",\n+\t\t\t\t\t\"description\": \"the received command\",\n+\t\t\t\t\t\"required\": false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEyMjA3MQ==", "bodyText": "All other modules specify it explicitly as well and I think it helps for the readability (as it makes clear that this can be null). But if you wish, I can remove it from all module type definitions.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434122071", "createdAt": "2020-06-02T19:21:17Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "diffHunk": "@@ -231,6 +231,256 @@\n \t\t\t\t\t\"reference\": \"event\"\n \t\t\t\t}\n \t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"uid\": \"core.GroupCommandTrigger\",\n+\t\t\t\"label\": \"a member of an item group receives a command\",\n+\t\t\t\"description\": \"This triggers the rule if a member of an item group receives a command.\",\n+\t\t\t\"configDescriptions\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"groupName\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"context\": \"item\",\n+\t\t\t\t\t\"label\": \"Group\",\n+\t\t\t\t\t\"description\": \"the name of the item group\",\n+\t\t\t\t\t\"required\": true\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"command\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"label\": \"Command\",\n+\t\t\t\t\t\"description\": \"the received command\",\n+\t\t\t\t\t\"required\": false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NTUwNQ=="}, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzODQzMg==", "bodyText": "Okay, I am fine with that.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434338432", "createdAt": "2020-06-03T06:36:36Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "diffHunk": "@@ -231,6 +231,256 @@\n \t\t\t\t\t\"reference\": \"event\"\n \t\t\t\t}\n \t\t\t]\n+\t\t},\n+\t\t{\n+\t\t\t\"uid\": \"core.GroupCommandTrigger\",\n+\t\t\t\"label\": \"a member of an item group receives a command\",\n+\t\t\t\"description\": \"This triggers the rule if a member of an item group receives a command.\",\n+\t\t\t\"configDescriptions\": [\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"groupName\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"context\": \"item\",\n+\t\t\t\t\t\"label\": \"Group\",\n+\t\t\t\t\t\"description\": \"the name of the item group\",\n+\t\t\t\t\t\"required\": true\n+\t\t\t\t},\n+\t\t\t\t{\n+\t\t\t\t\t\"name\": \"command\",\n+\t\t\t\t\t\"type\": \"TEXT\",\n+\t\t\t\t\t\"label\": \"Command\",\n+\t\t\t\t\t\"description\": \"the received command\",\n+\t\t\t\t\t\"required\": false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NTUwNQ=="}, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDAyOTc4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/SystemEventFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo1ODowMlrOGdYFuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOTo1ODowMlrOGdYFuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ1NjU3MQ==", "bodyText": "Please remove the @NonNull annotations rather add @NonNullByDefault on class level.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433456571", "createdAt": "2020-06-01T19:58:02Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/SystemEventFactory.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.events.system;\n+\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNull;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEventFactory;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFactory;\n+import org.openhab.core.types.Type;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * Factory that creates system events.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@Component(immediate = true, service = EventFactory.class)\n+public class SystemEventFactory extends AbstractEventFactory {\n+\n+    static final String SYSTEM_STARTLEVEL_TOPIC = \"smarthome/system/startlevel\";\n+\n+    public SystemEventFactory() {\n+        super(Stream.of(StartlevelEvent.TYPE).collect(Collectors.toSet()));\n+    }\n+\n+    /**\n+     * Creates a trigger event from a {@link Type}.\n+     *\n+     * @param startlevel Startlevel of system\n+     * @return Created start level event.\n+     */\n+    public static StartlevelEvent createStartlevelEvent(Integer startlevel) {\n+        SystemEventPayloadBean bean = new SystemEventPayloadBean(startlevel);\n+        String payload = serializePayload(bean);\n+        return new StartlevelEvent(SYSTEM_STARTLEVEL_TOPIC, payload, null, startlevel);\n+    }\n+\n+    @Override\n+    protected @NonNull Event createEventByType(@NonNull String eventType, @NonNull String topic,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDA5NTM5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDoyMDoyNlrOGdYvqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMDoyMDoyNlrOGdYvqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ2NzMwNQ==", "bodyText": "This part could be improved by moving it into the previous if-condition(s).", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r433467305", "createdAt": "2020-06-01T20:20:26Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.events.system.StartlevelEvent;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a ModuleHandler implementation for Triggers which trigger the rule if a certain system event occurs.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class SystemTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+\n+    private final Logger logger = LoggerFactory.getLogger(SystemTriggerHandler.class);\n+\n+    public static final String STARTLEVEL_MODULE_TYPE_ID = \"core.SystemStartlevelTrigger\";\n+    private static final String CFG_STARTLEVEL = \"startlevel\";\n+    private static final String OUT_STARTLEVEL = \"startlevel\";\n+\n+    private final Integer startlevel;\n+    private final Set<String> types;\n+    private final BundleContext bundleContext;\n+\n+    private ServiceRegistration<?> eventSubscriberRegistration;\n+\n+    public SystemTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.startlevel = ((BigDecimal) module.getConfiguration().get(CFG_STARTLEVEL)).intValue();\n+        if (STARTLEVEL_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+            this.types = Collections.singleton(StartlevelEvent.TYPE);\n+        } else {\n+            logger.warn(\"Module type '{}' is not (yet) handled by this class.\", module.getTypeUID());\n+            throw new IllegalArgumentException(module.getTypeUID() + \" is no valid module type.\");\n+        }\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        properties.put(\"event.topics\", \"smarthome/system/*\");\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public @Nullable EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        final ModuleHandlerCallback callback = this.callback;\n+        if (!(callback instanceof TriggerHandlerCallback)) {\n+            return;\n+        }\n+\n+        TriggerHandlerCallback thCallback = (TriggerHandlerCallback) callback;\n+        logger.trace(\"Received Event: Source: {} Topic: {} Type: {}  Payload: {}\", event.getSource(), event.getTopic(),\n+                event.getType(), event.getPayload());\n+        Map<String, Object> values = new HashMap<>();\n+        if (event instanceof StartlevelEvent && STARTLEVEL_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+            Integer sl = ((StartlevelEvent) event).getStartlevel();\n+            if (startlevel.equals(sl)) {\n+                values.put(OUT_STARTLEVEL, sl);\n+            }\n+        }\n+        if (!values.isEmpty()) {\n+            thCallback.triggered(module, values);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa3595a470510f8ce75b6b23dc4f872db038ddb1"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTU0NjU4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/StartlevelEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0NDo1OVrOGeOICQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0NDo1OVrOGeOICQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MTg5Nw==", "bodyText": "One more class for adding annotations.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434341897", "createdAt": "2020-06-03T06:44:59Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/events/system/StartlevelEvent.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.events.system;\n+\n+import org.openhab.core.events.AbstractEvent;\n+\n+/**\n+ * {@link StartlevelEvent}s will be delivered through the openHAB event bus if the start level of the system has\n+ * changed.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class StartlevelEvent extends AbstractEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTU1MDUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0NjoyNlrOGeOKfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0NjoyNlrOGeOKfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MjUyNQ==", "bodyText": "Avoid duplicate castings and assign it to a local variable instead.", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434342525", "createdAt": "2020-06-03T06:46:26Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.GroupItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if state event of a member of an item group occurs.\n+ * The group name and state value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GroupStateTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+    private final Logger logger = LoggerFactory.getLogger(GroupStateTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final @Nullable String state;\n+    private final String previousState;\n+    private Set<String> types;\n+    private final BundleContext bundleContext;\n+    private @Nullable ItemRegistry itemRegistry;\n+\n+    public static final String UPDATE_MODULE_TYPE_ID = \"core.GroupStateUpdateTrigger\";\n+    public static final String CHANGE_MODULE_TYPE_ID = \"core.GroupStateChangeTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_STATE = \"state\";\n+    private static final String CFG_PREVIOUS_STATE = \"previousState\";\n+\n+    private ServiceRegistration<?> eventSubscriberRegistration;\n+\n+    public GroupStateTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.groupName = (String) module.getConfiguration().get(CFG_GROUPNAME);\n+        this.state = (String) module.getConfiguration().get(CFG_STATE);\n+        this.previousState = (String) module.getConfiguration().get(CFG_PREVIOUS_STATE);\n+        if (UPDATE_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+            this.types = Collections.singleton(ItemStateEvent.TYPE);\n+        } else {\n+            Set<String> set = new HashSet<>();\n+            set.add(ItemStateChangedEvent.TYPE);\n+            set.add(GroupItemStateChangedEvent.TYPE);\n+            this.types = Collections.unmodifiableSet(set);\n+        }\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        properties.put(\"event.topics\", \"smarthome/items/*\");\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public @Nullable EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (callback != null) {\n+            ModuleHandlerCallback cb = callback;\n+            logger.trace(\"Received Event: Source: {} Topic: {} Type: {}  Payload: {}\", event.getSource(),\n+                    event.getTopic(), event.getType(), event.getPayload());\n+            Map<String, Object> values = new HashMap<>();\n+            if (event instanceof ItemStateEvent && UPDATE_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+                String itemName = ((ItemStateEvent) event).getItemName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTU1MDYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0NjoyOVrOGeOKkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0NjoyOVrOGeOKkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MjU0NQ==", "bodyText": "See #1509 (comment)", "url": "https://github.com/openhab/openhab-core/pull/1509#discussion_r434342545", "createdAt": "2020-06-03T06:46:29Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/GroupStateTriggerHandler.java", "diffHunk": "@@ -0,0 +1,173 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.items.Item;\n+import org.openhab.core.items.ItemRegistry;\n+import org.openhab.core.items.events.GroupItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateChangedEvent;\n+import org.openhab.core.items.events.ItemStateEvent;\n+import org.openhab.core.types.State;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an ModuleHandler implementation for Triggers which trigger the rule\n+ * if state event of a member of an item group occurs.\n+ * The group name and state value can be set with the configuration.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+public class GroupStateTriggerHandler extends BaseTriggerModuleHandler implements EventSubscriber, EventFilter {\n+    private final Logger logger = LoggerFactory.getLogger(GroupStateTriggerHandler.class);\n+\n+    private final String groupName;\n+    private final @Nullable String state;\n+    private final String previousState;\n+    private Set<String> types;\n+    private final BundleContext bundleContext;\n+    private @Nullable ItemRegistry itemRegistry;\n+\n+    public static final String UPDATE_MODULE_TYPE_ID = \"core.GroupStateUpdateTrigger\";\n+    public static final String CHANGE_MODULE_TYPE_ID = \"core.GroupStateChangeTrigger\";\n+\n+    private static final String CFG_GROUPNAME = \"groupName\";\n+    private static final String CFG_STATE = \"state\";\n+    private static final String CFG_PREVIOUS_STATE = \"previousState\";\n+\n+    private ServiceRegistration<?> eventSubscriberRegistration;\n+\n+    public GroupStateTriggerHandler(Trigger module, BundleContext bundleContext) {\n+        super(module);\n+        this.groupName = (String) module.getConfiguration().get(CFG_GROUPNAME);\n+        this.state = (String) module.getConfiguration().get(CFG_STATE);\n+        this.previousState = (String) module.getConfiguration().get(CFG_PREVIOUS_STATE);\n+        if (UPDATE_MODULE_TYPE_ID.equals(module.getTypeUID())) {\n+            this.types = Collections.singleton(ItemStateEvent.TYPE);\n+        } else {\n+            Set<String> set = new HashSet<>();\n+            set.add(ItemStateChangedEvent.TYPE);\n+            set.add(GroupItemStateChangedEvent.TYPE);\n+            this.types = Collections.unmodifiableSet(set);\n+        }\n+        this.bundleContext = bundleContext;\n+        Dictionary<String, Object> properties = new Hashtable<>();\n+        properties.put(\"event.topics\", \"smarthome/items/*\");\n+        eventSubscriberRegistration = this.bundleContext.registerService(EventSubscriber.class.getName(), this,\n+                properties);\n+    }\n+\n+    @Override\n+    public Set<String> getSubscribedEventTypes() {\n+        return types;\n+    }\n+\n+    @Override\n+    public @Nullable EventFilter getEventFilter() {\n+        return this;\n+    }\n+\n+    @Override\n+    public void receive(Event event) {\n+        if (callback != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d61d5b655f7a32c5168bfc1ec1acf485c22e256"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3416, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}