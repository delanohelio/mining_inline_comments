{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxMjMyNDA1", "number": 1825, "title": "Harden item creation by checking for validity of name", "bodyText": "Fixes #1815\nSigned-off-by: Kai Kreuzer kai@openhab.org", "createdAt": "2020-11-15T17:50:19Z", "url": "https://github.com/openhab/openhab-core/pull/1825", "merged": true, "mergeCommit": {"oid": "70ca7655a23be39de3c24fd32a15816fe0083de7"}, "closed": true, "closedAt": "2020-11-17T23:18:01Z", "author": {"login": "kaikreuzer"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddBTVqAFqTUzMTEyNzA4Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddg0PsAFqTUzMjg0NDk3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTI3MDgy", "url": "https://github.com/openhab/openhab-core/pull/1825#pullrequestreview-531127082", "createdAt": "2020-11-16T09:04:11Z", "commit": {"oid": "a8e29036a41a0305272a6e0099caeea855428a79"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTowNDoxMlrOHzuEkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOToxMDoyOFrOHzuf2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5NDI1Ng==", "bodyText": "The OpenAPI doc should be improved for this response since this response is currently unexpected for non-null item names:\n@ApiResponse(responseCode = \"400\", description = \"Item null.\")", "url": "https://github.com/openhab/openhab-core/pull/1825#discussion_r523994256", "createdAt": "2020-11-16T09:04:12Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/item/ItemResource.java", "diffHunk": "@@ -590,29 +590,35 @@ public Response createOrUpdateItem(final @Context UriInfo uriInfo, final @Contex\n             return Response.status(Status.BAD_REQUEST).build();\n         }\n \n-        Item newItem = ItemDTOMapper.map(item, itemBuilderFactory);\n-        if (newItem == null) {\n-            logger.warn(\"Received HTTP PUT request at '{}' with an invalid item type '{}'.\", uriInfo.getPath(),\n-                    item.type);\n-            return Response.status(Status.BAD_REQUEST).build();\n-        }\n+        try {\n+            Item newItem = ItemDTOMapper.map(item, itemBuilderFactory);\n+            if (newItem == null) {\n+                logger.warn(\"Received HTTP PUT request at '{}' with an invalid item type '{}'.\", uriInfo.getPath(),\n+                        item.type);\n+                return Response.status(Status.BAD_REQUEST).build();\n+            }\n \n-        // Save the item\n-        if (getItem(itemname) == null) {\n-            // item does not yet exist, create it\n-            managedItemProvider.add(newItem);\n-            return getItemResponse(uriBuilder(uriInfo, httpHeaders), Status.CREATED, itemRegistry.get(itemname), locale,\n-                    null);\n-        } else if (managedItemProvider.get(itemname) != null) {\n-            // item already exists as a managed item, update it\n-            managedItemProvider.update(newItem);\n-            return getItemResponse(uriBuilder(uriInfo, httpHeaders), Status.OK, itemRegistry.get(itemname), locale,\n-                    null);\n-        } else {\n-            // Item exists but cannot be updated\n-            logger.warn(\"Cannot update existing item '{}', because is not managed.\", itemname);\n-            return JSONResponse.createErrorResponse(Status.METHOD_NOT_ALLOWED,\n-                    \"Cannot update non-managed Item \" + itemname);\n+            // Save the item\n+            if (getItem(itemname) == null) {\n+                // item does not yet exist, create it\n+                managedItemProvider.add(newItem);\n+                return getItemResponse(uriBuilder(uriInfo, httpHeaders), Status.CREATED, itemRegistry.get(itemname),\n+                        locale, null);\n+            } else if (managedItemProvider.get(itemname) != null) {\n+                // item already exists as a managed item, update it\n+                managedItemProvider.update(newItem);\n+                return getItemResponse(uriBuilder(uriInfo, httpHeaders), Status.OK, itemRegistry.get(itemname), locale,\n+                        null);\n+            } else {\n+                // Item exists but cannot be updated\n+                logger.warn(\"Cannot update existing item '{}', because is not managed.\", itemname);\n+                return JSONResponse.createErrorResponse(Status.METHOD_NOT_ALLOWED,\n+                        \"Cannot update non-managed Item \" + itemname);\n+            }\n+        } catch (IllegalArgumentException e) {\n+            logger.warn(\"Received HTTP PUT request at '{}' with an invalid item name '{}'.\", uriInfo.getPath(),\n+                    item.name);\n+            return Response.status(Status.BAD_REQUEST).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e29036a41a0305272a6e0099caeea855428a79"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk5OTI4Nw==", "bodyText": "The OpenAPI doc should be improved for this response since this response is currently unexpected for non-null item lists:\n@ApiResponse(responseCode = \"400\", description = \"Item list is null.\")", "url": "https://github.com/openhab/openhab-core/pull/1825#discussion_r523999287", "createdAt": "2020-11-16T09:08:46Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/item/ItemResource.java", "diffHunk": "@@ -641,12 +647,17 @@ public Response createOrUpdateItems(\n         Map<String, Collection<String>> tagMap = new HashMap<>();\n \n         for (GroupItemDTO item : items) {\n-            Item newItem = ItemDTOMapper.map(item, itemBuilderFactory);\n-            if (newItem == null) {\n-                wrongTypes.add(item);\n-                tagMap.put(item.name, item.tags);\n-            } else {\n-                activeItems.add(newItem);\n+            try {\n+                Item newItem = ItemDTOMapper.map(item, itemBuilderFactory);\n+                if (newItem == null) {\n+                    wrongTypes.add(item);\n+                    tagMap.put(item.name, item.tags);\n+                } else {\n+                    activeItems.add(newItem);\n+                }\n+            } catch (IllegalArgumentException e) {\n+                logger.warn(\"Received HTTP PUT request with an invalid item name '{}'.\", item.name);\n+                return Response.status(Status.BAD_REQUEST).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e29036a41a0305272a6e0099caeea855428a79"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwMDkyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"The item name `\" + itemDTO.name + \"` is invalid.\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"The item name '\" + itemDTO.name + \"' is invalid.\");", "url": "https://github.com/openhab/openhab-core/pull/1825#discussion_r524000924", "createdAt": "2020-11-16T09:10:11Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/dto/ItemDTOMapper.java", "diffHunk": "@@ -52,6 +53,10 @@\n             throw new IllegalArgumentException(\"The argument 'itemBuilderFactory' must no be null.\");\n         }\n \n+        if (!ItemUtil.isValidItemName(itemDTO.name)) {\n+            throw new IllegalArgumentException(\"The item name `\" + itemDTO.name + \"` is invalid.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e29036a41a0305272a6e0099caeea855428a79"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAwMTI0MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"The item name `\" + element.getName() + \"` is invalid.\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"The item name '\" + element.getName() + \"' is invalid.\");", "url": "https://github.com/openhab/openhab-core/pull/1825#discussion_r524001241", "createdAt": "2020-11-16T09:10:28Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "diffHunk": "@@ -105,6 +105,14 @@ public ManagedItemProvider(final @Reference StorageService storageService,\n         }\n     }\n \n+    @Override\n+    public void add(Item element) {\n+        if (!ItemUtil.isValidItemName(element.getName())) {\n+            throw new IllegalArgumentException(\"The item name `\" + element.getName() + \"` is invalid.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e29036a41a0305272a6e0099caeea855428a79"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6932e8b898f4839fd284a5fc8c4881eb7f0b5109", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/6932e8b898f4839fd284a5fc8c4881eb7f0b5109", "committedDate": "2020-11-17T20:52:11Z", "message": "Harden item creation by checking for validity of name\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0763cc335a2447c4a444af03b2fc234d19295a39", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/0763cc335a2447c4a444af03b2fc234d19295a39", "committedDate": "2020-11-17T21:33:05Z", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8e29036a41a0305272a6e0099caeea855428a79", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/a8e29036a41a0305272a6e0099caeea855428a79", "committedDate": "2020-11-15T17:49:17Z", "message": "Harden item creation by checking for validity of name\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "0763cc335a2447c4a444af03b2fc234d19295a39", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/0763cc335a2447c4a444af03b2fc234d19295a39", "committedDate": "2020-11-17T21:33:05Z", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyODQ0OTc2", "url": "https://github.com/openhab/openhab-core/pull/1825#pullrequestreview-532844976", "createdAt": "2020-11-17T21:55:04Z", "commit": {"oid": "0763cc335a2447c4a444af03b2fc234d19295a39"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4668, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}