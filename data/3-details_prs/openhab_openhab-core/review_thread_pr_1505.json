{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjAzNjM0", "number": 1505, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMlQxNjo1ODoxM1rOGBcRkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMlQxNzoxNzo1M1rOGBcX_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MTY1MDExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/binding/AbstractDynamicDescriptionProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMlQxNjo1ODoxM1rOJf5bSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNFQxMzozMzoyNlrOJsy5gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzQyNjUwNw==", "bodyText": "Please add the two missing parameters", "url": "https://github.com/openhab/openhab-core/pull/1505#discussion_r637426507", "createdAt": "2021-05-22T16:58:13Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/binding/AbstractDynamicDescriptionProvider.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.thing.binding;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent.CommonChannelDescriptionField;\n+import org.openhab.core.thing.events.ThingEventFactory;\n+import org.openhab.core.thing.i18n.ChannelTypeI18nLocalizationService;\n+import org.openhab.core.thing.link.ItemChannelLinkRegistry;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AbstractDynamicDescriptionProvider} provides a base implementation for dynamic description providers.\n+ * <p>\n+ * It holds a reference to the {@link ChannelTypeI18nLocalizationService} to provide localized descriptions. Therefore\n+ * the inheriting class has to request a reference for the {@link ChannelTypeI18nLocalizationService} on its own.\n+ * <p>\n+ * It posts {@link ChannelDescriptionChangedEvent}s through the openHAB events bus about a changed dynamic description.\n+ * Therefore the subclass has to request references for the {@link EventPublisher} and\n+ * {@link ItemChannelLinkRegistry}.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractDynamicDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    protected @NonNullByDefault({}) BundleContext bundleContext;\n+    protected @Nullable EventPublisher eventPublisher;\n+    protected @Nullable ChannelTypeI18nLocalizationService channelTypeI18nLocalizationService;\n+    protected @Nullable ItemChannelLinkRegistry itemChannelLinkRegistry;\n+\n+    /**\n+     * This method can be used in a subclass in order to create a {@link ChannelDescriptionChangedEvent} and post it\n+     * through the openHAB events bus.\n+     *\n+     * @param field the changed field\n+     * @param channelUID the {@link ChannelUID}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaa7ddc2a358dd5d659adcafe9806b3ce0d3695"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDk1MTA0MA==", "bodyText": "Done.", "url": "https://github.com/openhab/openhab-core/pull/1505#discussion_r650951040", "createdAt": "2021-06-14T13:33:26Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/binding/AbstractDynamicDescriptionProvider.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.thing.binding;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent.CommonChannelDescriptionField;\n+import org.openhab.core.thing.events.ThingEventFactory;\n+import org.openhab.core.thing.i18n.ChannelTypeI18nLocalizationService;\n+import org.openhab.core.thing.link.ItemChannelLinkRegistry;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.service.component.ComponentContext;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@link AbstractDynamicDescriptionProvider} provides a base implementation for dynamic description providers.\n+ * <p>\n+ * It holds a reference to the {@link ChannelTypeI18nLocalizationService} to provide localized descriptions. Therefore\n+ * the inheriting class has to request a reference for the {@link ChannelTypeI18nLocalizationService} on its own.\n+ * <p>\n+ * It posts {@link ChannelDescriptionChangedEvent}s through the openHAB events bus about a changed dynamic description.\n+ * Therefore the subclass has to request references for the {@link EventPublisher} and\n+ * {@link ItemChannelLinkRegistry}.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@NonNullByDefault\n+public abstract class AbstractDynamicDescriptionProvider {\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    protected @NonNullByDefault({}) BundleContext bundleContext;\n+    protected @Nullable EventPublisher eventPublisher;\n+    protected @Nullable ChannelTypeI18nLocalizationService channelTypeI18nLocalizationService;\n+    protected @Nullable ItemChannelLinkRegistry itemChannelLinkRegistry;\n+\n+    /**\n+     * This method can be used in a subclass in order to create a {@link ChannelDescriptionChangedEvent} and post it\n+     * through the openHAB events bus.\n+     *\n+     * @param field the changed field\n+     * @param channelUID the {@link ChannelUID}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzQyNjUwNw=="}, "originalCommit": {"oid": "7aaa7ddc2a358dd5d659adcafe9806b3ce0d3695"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MTY1NjY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/events/ChannelDescriptionChangedEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMlQxNzowNjoxOFrOJf5eWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNFQxMzozNToxMVrOJsy_PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzQyNzI4OQ==", "bodyText": "Is ALL necessary (not used I believe) ?", "url": "https://github.com/openhab/openhab-core/pull/1505#discussion_r637427289", "createdAt": "2021-05-22T17:06:18Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/events/ChannelDescriptionChangedEvent.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.thing.events;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEvent;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.types.CommandDescription;\n+import org.openhab.core.types.StateDescription;\n+\n+/**\n+ * {@link ChannelDescriptionChangedEvent}s will be delivered through the openHAB event bus if the\n+ * {@link CommandDescription} or {@link StateDescription} of a channel has changed. Instances must be created with the\n+ * {@link ThingEventFactory}.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ChannelDescriptionChangedEvent extends AbstractEvent {\n+\n+    public enum CommonChannelDescriptionField {\n+        ALL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaa7ddc2a358dd5d659adcafe9806b3ce0d3695"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDk1MjUwOA==", "bodyText": "It will be needed if a binding publishes the whole StateDEscription (e.g. openhab/openhab-addons#10718). Note: I have to change PRs in openHAB add-ons according the new API.", "url": "https://github.com/openhab/openhab-core/pull/1505#discussion_r650952508", "createdAt": "2021-06-14T13:35:11Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/events/ChannelDescriptionChangedEvent.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.thing.events;\n+\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEvent;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.types.CommandDescription;\n+import org.openhab.core.types.StateDescription;\n+\n+/**\n+ * {@link ChannelDescriptionChangedEvent}s will be delivered through the openHAB event bus if the\n+ * {@link CommandDescription} or {@link StateDescription} of a channel has changed. Instances must be created with the\n+ * {@link ThingEventFactory}.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@NonNullByDefault\n+public class ChannelDescriptionChangedEvent extends AbstractEvent {\n+\n+    public enum CommonChannelDescriptionField {\n+        ALL,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzQyNzI4OQ=="}, "originalCommit": {"oid": "7aaa7ddc2a358dd5d659adcafe9806b3ce0d3695"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MTY2NjE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/binding/BaseDynamicCommandDescriptionProviderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMlQxNzoxNzoxM1rOJf5iug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNi0xNFQxMzozNzozOVrOJszHCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzQyODQxMA==", "bodyText": "Suggestion: you could additionally checked the linked items and the list of options in the event.", "url": "https://github.com/openhab/openhab-core/pull/1505#discussion_r637428410", "createdAt": "2021-05-22T17:17:13Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/binding/BaseDynamicCommandDescriptionProviderTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.thing.binding;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent.CommonChannelDescriptionField;\n+import org.openhab.core.thing.link.ItemChannelLinkRegistry;\n+import org.openhab.core.types.CommandOption;\n+import org.osgi.framework.BundleContext;\n+\n+/**\n+ * Tests for {@link BaseDynamicCommandDescriptionProvider}.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.WARN)\n+class BaseDynamicCommandDescriptionProviderTest {\n+\n+    private static final ThingTypeUID THING_TYPE_UID = new ThingTypeUID(\"binding:type\");\n+    private static final ThingUID THING_UID = new ThingUID(THING_TYPE_UID, \"id\");\n+    private static final ChannelUID CHANNEL_UID = new ChannelUID(THING_UID, \"channel\");\n+\n+    @Mock\n+    EventPublisher mockEventPublisher;\n+\n+    @Mock\n+    ItemChannelLinkRegistry mockItemChannelLinkRegistry;\n+\n+    class TestDynamicCommandDescriptionProvider extends BaseDynamicCommandDescriptionProvider {\n+\n+        public TestDynamicCommandDescriptionProvider() {\n+            this.bundleContext = mock(BundleContext.class);\n+            this.eventPublisher = mockEventPublisher;\n+            this.itemChannelLinkRegistry = mockItemChannelLinkRegistry;\n+        }\n+    };\n+\n+    private TestDynamicCommandDescriptionProvider subject;\n+\n+    @BeforeEach\n+    public void setup() {\n+        when(mockItemChannelLinkRegistry.getLinkedItemNames(CHANNEL_UID)).thenReturn(Set.of(\"item1\", \"item2\"));\n+\n+        subject = new TestDynamicCommandDescriptionProvider();\n+    }\n+\n+    @Test\n+    public void setCommandOptionsPublishesEvent() {\n+        subject.setCommandOptions(CHANNEL_UID, List.of(new CommandOption(\"reboot\", \"Reboot\")));\n+\n+        ArgumentCaptor<Event> capture = ArgumentCaptor.forClass(Event.class);\n+        verify(mockEventPublisher, times(1)).post(capture.capture());\n+\n+        Event event = capture.getValue();\n+        assertTrue(event instanceof ChannelDescriptionChangedEvent);\n+        ChannelDescriptionChangedEvent cdce = (ChannelDescriptionChangedEvent) event;\n+        assertEquals(CommonChannelDescriptionField.COMMAND_OPTIONS, cdce.getField());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaa7ddc2a358dd5d659adcafe9806b3ce0d3695"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDY1MDk1NDUwNQ==", "bodyText": "The ThingEventFactoryTest class is responsible for testing the correct payloads.", "url": "https://github.com/openhab/openhab-core/pull/1505#discussion_r650954505", "createdAt": "2021-06-14T13:37:39Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/binding/BaseDynamicCommandDescriptionProviderTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.thing.binding;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent.CommonChannelDescriptionField;\n+import org.openhab.core.thing.link.ItemChannelLinkRegistry;\n+import org.openhab.core.types.CommandOption;\n+import org.osgi.framework.BundleContext;\n+\n+/**\n+ * Tests for {@link BaseDynamicCommandDescriptionProvider}.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.WARN)\n+class BaseDynamicCommandDescriptionProviderTest {\n+\n+    private static final ThingTypeUID THING_TYPE_UID = new ThingTypeUID(\"binding:type\");\n+    private static final ThingUID THING_UID = new ThingUID(THING_TYPE_UID, \"id\");\n+    private static final ChannelUID CHANNEL_UID = new ChannelUID(THING_UID, \"channel\");\n+\n+    @Mock\n+    EventPublisher mockEventPublisher;\n+\n+    @Mock\n+    ItemChannelLinkRegistry mockItemChannelLinkRegistry;\n+\n+    class TestDynamicCommandDescriptionProvider extends BaseDynamicCommandDescriptionProvider {\n+\n+        public TestDynamicCommandDescriptionProvider() {\n+            this.bundleContext = mock(BundleContext.class);\n+            this.eventPublisher = mockEventPublisher;\n+            this.itemChannelLinkRegistry = mockItemChannelLinkRegistry;\n+        }\n+    };\n+\n+    private TestDynamicCommandDescriptionProvider subject;\n+\n+    @BeforeEach\n+    public void setup() {\n+        when(mockItemChannelLinkRegistry.getLinkedItemNames(CHANNEL_UID)).thenReturn(Set.of(\"item1\", \"item2\"));\n+\n+        subject = new TestDynamicCommandDescriptionProvider();\n+    }\n+\n+    @Test\n+    public void setCommandOptionsPublishesEvent() {\n+        subject.setCommandOptions(CHANNEL_UID, List.of(new CommandOption(\"reboot\", \"Reboot\")));\n+\n+        ArgumentCaptor<Event> capture = ArgumentCaptor.forClass(Event.class);\n+        verify(mockEventPublisher, times(1)).post(capture.capture());\n+\n+        Event event = capture.getValue();\n+        assertTrue(event instanceof ChannelDescriptionChangedEvent);\n+        ChannelDescriptionChangedEvent cdce = (ChannelDescriptionChangedEvent) event;\n+        assertEquals(CommonChannelDescriptionField.COMMAND_OPTIONS, cdce.getField());\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzQyODQxMA=="}, "originalCommit": {"oid": "7aaa7ddc2a358dd5d659adcafe9806b3ce0d3695"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MTY2NjM3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/binding/BaseDynamicStateDescriptionProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMlQxNzoxNzozMlrOJf5i1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMlQxNzoxNzozMlrOJf5i1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzQyODQzOQ==", "bodyText": "Suggestion: you could additionally checked the linked items and the list of options in the event.", "url": "https://github.com/openhab/openhab-core/pull/1505#discussion_r637428439", "createdAt": "2021-05-22T17:17:32Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/binding/BaseDynamicStateDescriptionProviderTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.thing.binding;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent.CommonChannelDescriptionField;\n+import org.openhab.core.thing.link.ItemChannelLinkRegistry;\n+import org.openhab.core.types.StateOption;\n+import org.osgi.framework.BundleContext;\n+\n+/**\n+ * Tests for {@link BaseDynamicStateDescriptionProvider}.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.WARN)\n+class BaseDynamicStateDescriptionProviderTest {\n+\n+    private static final ThingTypeUID THING_TYPE_UID = new ThingTypeUID(\"binding:type\");\n+    private static final ThingUID THING_UID = new ThingUID(THING_TYPE_UID, \"id\");\n+    private static final ChannelUID CHANNEL_UID = new ChannelUID(THING_UID, \"channel\");\n+\n+    @Mock\n+    EventPublisher mockEventPublisher;\n+\n+    @Mock\n+    ItemChannelLinkRegistry mockItemChannelLinkRegistry;\n+\n+    class TestBaseDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n+\n+        public TestBaseDynamicStateDescriptionProvider() {\n+            this.bundleContext = mock(BundleContext.class);\n+            this.eventPublisher = mockEventPublisher;\n+            this.itemChannelLinkRegistry = mockItemChannelLinkRegistry;\n+        }\n+    };\n+\n+    private BaseDynamicStateDescriptionProvider subject;\n+\n+    @BeforeEach\n+    public void setup() {\n+        when(mockItemChannelLinkRegistry.getLinkedItemNames(CHANNEL_UID)).thenReturn(Set.of(\"item1\", \"item2\"));\n+\n+        subject = new TestBaseDynamicStateDescriptionProvider();\n+    }\n+\n+    @Test\n+    public void setStatePatternPublishesEvent() {\n+        subject.setStatePattern(CHANNEL_UID, \"%s\");\n+\n+        ArgumentCaptor<Event> capture = ArgumentCaptor.forClass(Event.class);\n+        verify(mockEventPublisher, times(1)).post(capture.capture());\n+\n+        Event event = capture.getValue();\n+        assertTrue(event instanceof ChannelDescriptionChangedEvent);\n+        ChannelDescriptionChangedEvent cdce = (ChannelDescriptionChangedEvent) event;\n+        assertEquals(CommonChannelDescriptionField.PATTERN, cdce.getField());\n+\n+        // check the event is not published again\n+        subject.setStatePattern(CHANNEL_UID, \"%s\");\n+\n+        verify(mockEventPublisher, times(1)).post(capture.capture());\n+    }\n+\n+    @Test\n+    public void setStateOptionsPublishesEvent() {\n+        subject.setStateOptions(CHANNEL_UID, List.of(new StateOption(\"offline\", \"Offline\")));\n+\n+        ArgumentCaptor<Event> capture = ArgumentCaptor.forClass(Event.class);\n+        verify(mockEventPublisher, times(1)).post(capture.capture());\n+\n+        Event event = capture.getValue();\n+        assertTrue(event instanceof ChannelDescriptionChangedEvent);\n+        ChannelDescriptionChangedEvent cdce = (ChannelDescriptionChangedEvent) event;\n+        assertEquals(CommonChannelDescriptionField.STATE_OPTIONS, cdce.getField());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaa7ddc2a358dd5d659adcafe9806b3ce0d3695"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkNDA0MTY2NjU1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/binding/BaseDynamicStateDescriptionProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMlQxNzoxNzo1M1rOJf5i7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wNS0yMlQxNzoxNzo1M1rOJf5i7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYzNzQyODQ2MA==", "bodyText": "Suggestion: you could additionally checked the linked items and the pattern in the event.", "url": "https://github.com/openhab/openhab-core/pull/1505#discussion_r637428460", "createdAt": "2021-05-22T17:17:53Z", "author": {"login": "lolodomo"}, "path": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/binding/BaseDynamicStateDescriptionProviderTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * Copyright (c) 2010-2021 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.thing.binding;\n+\n+import static org.junit.Assert.*;\n+import static org.mockito.Mockito.*;\n+\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.mockito.junit.jupiter.MockitoSettings;\n+import org.mockito.quality.Strictness;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.thing.ChannelUID;\n+import org.openhab.core.thing.ThingTypeUID;\n+import org.openhab.core.thing.ThingUID;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent;\n+import org.openhab.core.thing.events.ChannelDescriptionChangedEvent.CommonChannelDescriptionField;\n+import org.openhab.core.thing.link.ItemChannelLinkRegistry;\n+import org.openhab.core.types.StateOption;\n+import org.osgi.framework.BundleContext;\n+\n+/**\n+ * Tests for {@link BaseDynamicStateDescriptionProvider}.\n+ *\n+ * @author Christoph Weitkamp - Initial contribution\n+ */\n+@ExtendWith(MockitoExtension.class)\n+@MockitoSettings(strictness = Strictness.WARN)\n+class BaseDynamicStateDescriptionProviderTest {\n+\n+    private static final ThingTypeUID THING_TYPE_UID = new ThingTypeUID(\"binding:type\");\n+    private static final ThingUID THING_UID = new ThingUID(THING_TYPE_UID, \"id\");\n+    private static final ChannelUID CHANNEL_UID = new ChannelUID(THING_UID, \"channel\");\n+\n+    @Mock\n+    EventPublisher mockEventPublisher;\n+\n+    @Mock\n+    ItemChannelLinkRegistry mockItemChannelLinkRegistry;\n+\n+    class TestBaseDynamicStateDescriptionProvider extends BaseDynamicStateDescriptionProvider {\n+\n+        public TestBaseDynamicStateDescriptionProvider() {\n+            this.bundleContext = mock(BundleContext.class);\n+            this.eventPublisher = mockEventPublisher;\n+            this.itemChannelLinkRegistry = mockItemChannelLinkRegistry;\n+        }\n+    };\n+\n+    private BaseDynamicStateDescriptionProvider subject;\n+\n+    @BeforeEach\n+    public void setup() {\n+        when(mockItemChannelLinkRegistry.getLinkedItemNames(CHANNEL_UID)).thenReturn(Set.of(\"item1\", \"item2\"));\n+\n+        subject = new TestBaseDynamicStateDescriptionProvider();\n+    }\n+\n+    @Test\n+    public void setStatePatternPublishesEvent() {\n+        subject.setStatePattern(CHANNEL_UID, \"%s\");\n+\n+        ArgumentCaptor<Event> capture = ArgumentCaptor.forClass(Event.class);\n+        verify(mockEventPublisher, times(1)).post(capture.capture());\n+\n+        Event event = capture.getValue();\n+        assertTrue(event instanceof ChannelDescriptionChangedEvent);\n+        ChannelDescriptionChangedEvent cdce = (ChannelDescriptionChangedEvent) event;\n+        assertEquals(CommonChannelDescriptionField.PATTERN, cdce.getField());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7aaa7ddc2a358dd5d659adcafe9806b3ce0d3695"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3411, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}