{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NDUwNTY4", "number": 1597, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNjoyNVrOEY09pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzowNToxNFrOEZsIyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5MDI4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.javasound/NOTICE", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNjoyNVrOHBUTzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQyMDoxODozNVrOHBU72A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzM3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            https://github.com/openhab/openhab-addons\n          \n          \n            \n            https://github.com/openhab/openhab-core", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143373", "createdAt": "2020-08-16T18:26:25Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.javasound/NOTICE", "diffHunk": "@@ -0,0 +1,13 @@\n+This content is produced and maintained by the openHAB project.\n+\n+* Project home: https://www.openhab.org\n+\n+== Declared Project Licenses\n+\n+This program and the accompanying materials are made available under the terms\n+of the Eclipse Public License 2.0 which is available at\n+https://www.eclipse.org/legal/epl-2.0/.\n+\n+== Source Code\n+\n+https://github.com/openhab/openhab-addons", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE1MzYyNA==", "bodyText": "Argh, shit, I didn't mean to push all these files at all as I have put the them directly into the core.audiobundle. Just removed them from the PR again", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471153624", "createdAt": "2020-08-16T20:18:35Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.io.javasound/NOTICE", "diffHunk": "@@ -0,0 +1,13 @@\n+This content is produced and maintained by the openHAB project.\n+\n+* Project home: https://www.openhab.org\n+\n+== Declared Project Licenses\n+\n+This program and the accompanying materials are made available under the terms\n+of the Eclipse Public License 2.0 which is available at\n+https://www.eclipse.org/legal/epl-2.0/.\n+\n+== Source Code\n+\n+https://github.com/openhab/openhab-addons", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzM3Mw=="}, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5MDk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNzowNlrOHBUUGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNzowNlrOHBUUGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzQ1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n          \n          \n            \n                        .singleton(AudioStream.class);\n          \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(AudioStream.class);", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143450", "createdAt": "2020-08-16T18:27:06Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.javasound.internal;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import javazoom.jl.decoder.JavaLayerException;\n+import javazoom.jl.player.Player;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.FloatControl;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.Port;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.smarthome.core.audio.AudioFormat;\n+import org.eclipse.smarthome.core.audio.AudioSink;\n+import org.eclipse.smarthome.core.audio.AudioStream;\n+import org.eclipse.smarthome.core.audio.URLAudioStream;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioFormatException;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioStreamException;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n+ * line-out).\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@Component(service = AudioSink.class, immediate = true)\n+public class JavaSoundAudioSink implements AudioSink {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n+\n+    private boolean isMac = false;\n+    private PercentType macVolumeValue = null;\n+    private static Player streamPlayer = null;\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));\n+\n+    // we accept any stream\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n+            .singleton(AudioStream.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5MTA2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNzoxOFrOHBUUKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNzoxOFrOHBUUKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Collections.singleton(audioFormat);\n          \n          \n            \n                    return Set.of(audioFormat);", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143465", "createdAt": "2020-08-16T18:27:18Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSource.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.javasound.internal;\n+\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.sampled.TargetDataLine;\n+\n+import org.eclipse.smarthome.core.audio.AudioException;\n+import org.eclipse.smarthome.core.audio.AudioFormat;\n+import org.eclipse.smarthome.core.audio.AudioSource;\n+import org.eclipse.smarthome.core.audio.AudioStream;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an AudioSource from an input channel of the host.\n+ *\n+ * @author Kelly Davis - Initial contribution and API\n+ * @author Kai Kreuzer - Refactored and stabilized\n+ *\n+ */\n+@Component(service = AudioSource.class, immediate = true)\n+public class JavaSoundAudioSource implements AudioSource {\n+\n+    /**\n+     * Java Sound audio format\n+     */\n+    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n+            false);\n+\n+    /**\n+     * AudioFormat of the JavaSoundAudioSource\n+     */\n+    private final AudioFormat audioFormat = convertAudioFormat(format);\n+\n+    /**\n+     * TargetDataLine for the mic\n+     */\n+    private TargetDataLine microphone;\n+\n+    /**\n+     * Constructs a JavaSoundAudioSource\n+     */\n+    public JavaSoundAudioSource() {\n+    }\n+\n+    private void initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n+        try {\n+            TargetDataLine microphone;\n+            microphone = AudioSystem.getTargetDataLine(format);\n+\n+            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);\n+            microphone = (TargetDataLine) AudioSystem.getLine(info);\n+\n+            microphone.open(format);\n+\n+            this.microphone = microphone;\n+        } catch (Exception e) {\n+            throw new AudioException(\"Error creating the audio input stream.\", e);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized AudioStream getInputStream(AudioFormat expectedFormat) throws AudioException {\n+        if (!expectedFormat.isCompatible(audioFormat)) {\n+            throw new AudioException(\"Cannot produce streams in format \" + expectedFormat);\n+        }\n+        if (microphone == null) {\n+            initMicrophone(format);\n+        }\n+        return new JavaSoundInputStream(this.microphone, audioFormat);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"javasound\";\n+    }\n+\n+    /**\n+     * Converts a javax.sound.sampled.AudioFormat to a org.eclipse.smarthome.core.audio.AudioFormat\n+     *\n+     * @param audioFormat the AudioFormat to convert\n+     * @return The converted AudioFormat\n+     */\n+    private static AudioFormat convertAudioFormat(javax.sound.sampled.AudioFormat audioFormat) {\n+        String container = AudioFormat.CONTAINER_WAVE;\n+\n+        String codec = audioFormat.getEncoding().toString();\n+\n+        Boolean bigEndian = new Boolean(audioFormat.isBigEndian());\n+\n+        int frameSize = audioFormat.getFrameSize(); // In bytes\n+        int bitsPerFrame = frameSize * 8;\n+        Integer bitDepth = ((AudioSystem.NOT_SPECIFIED == frameSize) ? null : new Integer(bitsPerFrame));\n+\n+        float frameRate = audioFormat.getFrameRate();\n+        Integer bitRate = ((AudioSystem.NOT_SPECIFIED == frameRate) ? null\n+                : new Integer((int) (frameRate * bitsPerFrame)));\n+\n+        float sampleRate = audioFormat.getSampleRate();\n+        Long frequency = ((AudioSystem.NOT_SPECIFIED == sampleRate) ? null : new Long((long) sampleRate));\n+\n+        return new AudioFormat(container, codec, bigEndian, bitDepth, bitRate, frequency);\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return \"javasound\";\n+    }\n+\n+    @Override\n+    public String getLabel(Locale locale) {\n+        return \"System Microphone\";\n+    }\n+\n+    @Override\n+    public Set<AudioFormat> getSupportedFormats() {\n+        return Collections.singleton(audioFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5MTM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNzozNVrOHBUUTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNzozNVrOHBUUTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzUwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n          \n          \n            \n                        .singleton(AudioStream.class);\n          \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(AudioStream.class);", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143501", "createdAt": "2020-08-16T18:27:35Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSink.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.javasound;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Scanner;\n+import java.util.Set;\n+import java.util.function.Function;\n+import javazoom.jl.decoder.JavaLayerException;\n+import javazoom.jl.player.Player;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.FloatControl;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.Port;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioSink;\n+import org.openhab.core.audio.AudioStream;\n+import org.openhab.core.audio.URLAudioStream;\n+import org.openhab.core.audio.UnsupportedAudioFormatException;\n+import org.openhab.core.audio.UnsupportedAudioStreamException;\n+import org.openhab.core.common.NamedThreadFactory;\n+import org.openhab.core.library.types.PercentType;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n+ * line-out).\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSink.class, immediate = true)\n+public class JavaSoundAudioSink implements AudioSink {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n+\n+    private boolean isMac = false;\n+    private @Nullable PercentType macVolumeValue = null;\n+    private @Nullable static Player streamPlayer = null;\n+\n+    private NamedThreadFactory threadFactory = new NamedThreadFactory(\"audio\");\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);\n+\n+    // we accept any stream\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n+            .singleton(AudioStream.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5MTUxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNzo1MFrOHBUUYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyNzo1MFrOHBUUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzUyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Collections.singleton(audioFormat);\n          \n          \n            \n                    return Set.of(audioFormat);", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143523", "createdAt": "2020-08-16T18:27:50Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.javasound;\n+\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.sampled.TargetDataLine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioException;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioSource;\n+import org.openhab.core.audio.AudioStream;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an AudioSource from an input channel of the host.\n+ *\n+ * @author Kelly Davis - Initial contribution and API\n+ * @author Kai Kreuzer - Refactored and stabilized\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSource.class, immediate = true)\n+public class JavaSoundAudioSource implements AudioSource {\n+\n+    /**\n+     * Java Sound audio format\n+     */\n+    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n+            false);\n+\n+    /**\n+     * AudioFormat of the JavaSoundAudioSource\n+     */\n+    private final AudioFormat audioFormat = convertAudioFormat(format);\n+\n+    /**\n+     * TargetDataLine for the mic\n+     */\n+    private @Nullable TargetDataLine microphone;\n+\n+    /**\n+     * Constructs a JavaSoundAudioSource\n+     */\n+    public JavaSoundAudioSource() {\n+    }\n+\n+    private TargetDataLine initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n+        try {\n+            TargetDataLine microphone;\n+            microphone = AudioSystem.getTargetDataLine(format);\n+\n+            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);\n+            microphone = (TargetDataLine) AudioSystem.getLine(info);\n+\n+            microphone.open(format);\n+\n+            this.microphone = microphone;\n+            return microphone;\n+        } catch (Exception e) {\n+            throw new AudioException(\"Error creating the audio input stream.\", e);\n+        }\n+    }\n+\n+    @Override\n+    public synchronized AudioStream getInputStream(AudioFormat expectedFormat) throws AudioException {\n+        if (!expectedFormat.isCompatible(audioFormat)) {\n+            throw new AudioException(\"Cannot produce streams in format \" + expectedFormat);\n+        }\n+        TargetDataLine mic = this.microphone;\n+        if (mic == null) {\n+            mic = initMicrophone(format);\n+        }\n+        return new JavaSoundInputStream(mic, audioFormat);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"javasound\";\n+    }\n+\n+    /**\n+     * Converts a javax.sound.sampled.AudioFormat to a org.openhab.core.audio.AudioFormat\n+     *\n+     * @param audioFormat the AudioFormat to convert\n+     * @return The converted AudioFormat\n+     */\n+    private static AudioFormat convertAudioFormat(javax.sound.sampled.AudioFormat audioFormat) {\n+        String container = AudioFormat.CONTAINER_WAVE;\n+\n+        String codec = audioFormat.getEncoding().toString();\n+\n+        Boolean bigEndian = Boolean.valueOf(audioFormat.isBigEndian());\n+\n+        int frameSize = audioFormat.getFrameSize(); // In bytes\n+        int bitsPerFrame = frameSize * 8;\n+        Integer bitDepth = ((AudioSystem.NOT_SPECIFIED == frameSize) ? null : Integer.valueOf(bitsPerFrame));\n+\n+        float frameRate = audioFormat.getFrameRate();\n+        Integer bitRate = ((AudioSystem.NOT_SPECIFIED == frameRate) ? null\n+                : Integer.valueOf((int) (frameRate * bitsPerFrame)));\n+\n+        float sampleRate = audioFormat.getSampleRate();\n+        Long frequency = ((AudioSystem.NOT_SPECIFIED == sampleRate) ? null : Long.valueOf((long) sampleRate));\n+\n+        return new AudioFormat(container, codec, bigEndian, bitDepth, bitRate, frequency);\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return \"javasound\";\n+    }\n+\n+    @Override\n+    public String getLabel(@Nullable Locale locale) {\n+        return \"System Microphone\";\n+    }\n+\n+    @Override\n+    public Set<AudioFormat> getSupportedFormats() {\n+        return Collections.singleton(audioFormat);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5MTYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyODowNlrOHBUUbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyODowNlrOHBUUbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzUzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    super(Collections.singleton(PlayURLEvent.TYPE));\n          \n          \n            \n                    super(Set.of(PlayURLEvent.TYPE));", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143535", "createdAt": "2020-08-16T18:28:06Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.util.Collections;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEventFactory;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an {@link EventFactory} for creating web audio events.\n+ * The only currently supported event type is {@link PlayURLEvent}.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ */\n+@NonNullByDefault\n+@Component(service = EventFactory.class, immediate = true)\n+public class WebAudioEventFactory extends AbstractEventFactory {\n+\n+    private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";\n+\n+    /**\n+     * Constructs a new WebAudioEventFactory.\n+     */\n+    public WebAudioEventFactory() {\n+        super(Collections.singleton(PlayURLEvent.TYPE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5MTg1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyODozNFrOHBUUlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyODozNFrOHBUUlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzU3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143574", "createdAt": "2020-08-16T18:28:34Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioHTTPServer;\n+import org.openhab.core.audio.AudioSink;\n+import org.openhab.core.audio.AudioStream;\n+import org.openhab.core.audio.FixedLengthAudioStream;\n+import org.openhab.core.audio.URLAudioStream;\n+import org.openhab.core.audio.UnsupportedAudioFormatException;\n+import org.openhab.core.audio.UnsupportedAudioStreamException;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.library.types.PercentType;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that publishes an event through SSE and temporarily serves the stream via HTTP for web players\n+ * to pick it up.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSink.class, immediate = true)\n+public class WebAudioAudioSink implements AudioSink {\n+\n+    private final Logger logger = LoggerFactory.getLogger(WebAudioAudioSink.class);\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5MjAxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyODo1NVrOHBUUsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyODo1NVrOHBUUsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzYwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(FixedLengthAudioStream.class, URLAudioStream.class).collect(Collectors.toSet()));\n          \n          \n            \n                private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Set.of(FixedLengthAudioStream.class, URLAudioStream.class);", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143603", "createdAt": "2020-08-16T18:28:55Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioAudioSink.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.io.IOException;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioHTTPServer;\n+import org.openhab.core.audio.AudioSink;\n+import org.openhab.core.audio.AudioStream;\n+import org.openhab.core.audio.FixedLengthAudioStream;\n+import org.openhab.core.audio.URLAudioStream;\n+import org.openhab.core.audio.UnsupportedAudioFormatException;\n+import org.openhab.core.audio.UnsupportedAudioStreamException;\n+import org.openhab.core.events.EventPublisher;\n+import org.openhab.core.library.types.PercentType;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that publishes an event through SSE and temporarily serves the stream via HTTP for web players\n+ * to pick it up.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSink.class, immediate = true)\n+public class WebAudioAudioSink implements AudioSink {\n+\n+    private final Logger logger = LoggerFactory.getLogger(WebAudioAudioSink.class);\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(Collectors.toSet()));\n+    private static final Set<Class<? extends AudioStream>> SUPPORTED_AUDIO_STREAMS = Collections\n+            .unmodifiableSet(Stream.of(FixedLengthAudioStream.class, URLAudioStream.class).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDY5MjIyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyOToxN1rOHBUUzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQxODoyOToxN1rOHBUUzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE0MzYzMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n          \n          \n            \n                        .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));\n          \n          \n            \n                private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Set.of(AudioFormat.MP3, AudioFormat.WAV);", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r471143631", "createdAt": "2020-08-16T18:29:17Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.javasound/src/main/java/org/openhab/io/javasound/internal/JavaSoundAudioSink.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.io.javasound.internal;\n+\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+import javazoom.jl.decoder.JavaLayerException;\n+import javazoom.jl.player.Player;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.FloatControl;\n+import javax.sound.sampled.LineUnavailableException;\n+import javax.sound.sampled.Mixer;\n+import javax.sound.sampled.Port;\n+\n+import org.apache.commons.collections.Closure;\n+import org.apache.commons.io.IOUtils;\n+import org.eclipse.smarthome.core.audio.AudioFormat;\n+import org.eclipse.smarthome.core.audio.AudioSink;\n+import org.eclipse.smarthome.core.audio.AudioStream;\n+import org.eclipse.smarthome.core.audio.URLAudioStream;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioFormatException;\n+import org.eclipse.smarthome.core.audio.UnsupportedAudioStreamException;\n+import org.eclipse.smarthome.core.library.types.PercentType;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.Constants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is an audio sink that is registered as a service, which can play wave files to the hosts outputs (e.g. speaker,\n+ * line-out).\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ * @author Christoph Weitkamp - Added getSupportedStreams() and UnsupportedAudioStreamException\n+ *\n+ */\n+@Component(service = AudioSink.class, immediate = true)\n+public class JavaSoundAudioSink implements AudioSink {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(JavaSoundAudioSink.class);\n+\n+    private boolean isMac = false;\n+    private PercentType macVolumeValue = null;\n+    private static Player streamPlayer = null;\n+\n+    private static final Set<AudioFormat> SUPPORTED_AUDIO_FORMATS = Collections\n+            .unmodifiableSet(Stream.of(AudioFormat.MP3, AudioFormat.WAV).collect(toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37ab13f6cdfc77bd780bb1859f72292e98b5191"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTIyMjk0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyNzozNFrOHCREnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyNzozNFrOHCREnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzODkwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        TargetDataLine microphone;\n          \n          \n            \n                        microphone = AudioSystem.getTargetDataLine(format);\n          \n          \n            \n                        TargetDataLine microphone = AudioSystem.getTargetDataLine(format);", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472138908", "createdAt": "2020-08-18T12:27:34Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/javasound/JavaSoundAudioSource.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.javasound;\n+\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.sound.sampled.AudioSystem;\n+import javax.sound.sampled.DataLine;\n+import javax.sound.sampled.TargetDataLine;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.audio.AudioException;\n+import org.openhab.core.audio.AudioFormat;\n+import org.openhab.core.audio.AudioSource;\n+import org.openhab.core.audio.AudioStream;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an AudioSource from an input channel of the host.\n+ *\n+ * @author Kelly Davis - Initial contribution and API\n+ * @author Kai Kreuzer - Refactored and stabilized\n+ *\n+ */\n+@NonNullByDefault\n+@Component(service = AudioSource.class, immediate = true)\n+public class JavaSoundAudioSource implements AudioSource {\n+\n+    /**\n+     * Java Sound audio format\n+     */\n+    private final javax.sound.sampled.AudioFormat format = new javax.sound.sampled.AudioFormat(16000.0f, 16, 1, true,\n+            false);\n+\n+    /**\n+     * AudioFormat of the JavaSoundAudioSource\n+     */\n+    private final AudioFormat audioFormat = convertAudioFormat(format);\n+\n+    /**\n+     * TargetDataLine for the mic\n+     */\n+    private @Nullable TargetDataLine microphone;\n+\n+    /**\n+     * Constructs a JavaSoundAudioSource\n+     */\n+    public JavaSoundAudioSource() {\n+    }\n+\n+    private TargetDataLine initMicrophone(javax.sound.sampled.AudioFormat format) throws AudioException {\n+        try {\n+            TargetDataLine microphone;\n+            microphone = AudioSystem.getTargetDataLine(format);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTIyNTM0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyODoxNlrOHCRGBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyODoxNlrOHCRGBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzOTI2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";\n          \n          \n            \n                private static final String PLAY_URL_TOPIC = \"openhab/webaudio/playurl\";", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472139269", "createdAt": "2020-08-18T12:28:16Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/internal/webaudio/WebAudioEventFactory.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.audio.internal.webaudio;\n+\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.events.AbstractEventFactory;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFactory;\n+import org.osgi.service.component.annotations.Component;\n+\n+/**\n+ * This is an {@link EventFactory} for creating web audio events.\n+ * The only currently supported event type is {@link PlayURLEvent}.\n+ *\n+ * @author Kai Kreuzer - Initial contribution and API\n+ */\n+@NonNullByDefault\n+@Component(service = EventFactory.class, immediate = true)\n+public class WebAudioEventFactory extends AbstractEventFactory {\n+\n+    private static final String PLAY_URL_TOPIC = \"smarthome/webaudio/playurl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTI0NDA3OnYy", "diffSide": "RIGHT", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozMzozMVrOHCRRbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozMzozMVrOHCRRbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MjE5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> audioConfig = new Hashtable<>();\n          \n          \n            \n                    audioConfig.put(\"defaultSink\", sink.getId());\n          \n          \n            \n                    Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472142191", "createdAt": "2020-08-18T12:33:31Z", "author": {"login": "wborn"}, "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,19 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n+        ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n+        Dictionary<String, Object> audioConfig = new Hashtable<>();\n+        audioConfig.put(\"defaultSink\", sink.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTI0NTQzOnYy", "diffSide": "RIGHT", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozMzo1MVrOHCRSOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjozMzo1MVrOHCRSOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE0MjM5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> voiceConfig = new Hashtable<>();\n          \n          \n            \n                    voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n          \n          \n            \n                    Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472142393", "createdAt": "2020-08-18T12:33:51Z", "author": {"login": "wborn"}, "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,19 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n+        ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n+        Dictionary<String, Object> audioConfig = new Hashtable<>();\n+        audioConfig.put(\"defaultSink\", sink.getId());\n+        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n+        configuration.update(audioConfig);\n+\n+        voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n+        assertNotNull(voiceManager);\n+\n         Dictionary<String, Object> voiceConfig = new Hashtable<>();\n         voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTMzNTAzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjo0OToxM1rOHCSMJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQyMDowOTozMVrOHE7KJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE1NzIyMQ==", "bodyText": "These properties are not used in openhab-core (openhab-addons POM only). In openhab-core bnd.bnd files are used for bnd bundle specific configurations. But it seems unnecessary since these imports are not added to the manifest?", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472157221", "createdAt": "2020-08-18T12:49:13Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.audio/pom.xml", "diffHunk": "@@ -14,21 +14,34 @@\n \n   <name>openHAB Core :: Bundles :: Audio</name>\n \n+  <properties>\n+    <bnd.importpackage>!javazoom.*</bnd.importpackage>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE4NTYxMA==", "bodyText": "They were added until I added that line... Maybe I am wrong? Can check once more.", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472185610", "createdAt": "2020-08-18T13:18:04Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.audio/pom.xml", "diffHunk": "@@ -14,21 +14,34 @@\n \n   <name>openHAB Core :: Bundles :: Audio</name>\n \n+  <properties>\n+    <bnd.importpackage>!javazoom.*</bnd.importpackage>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE1NzIyMQ=="}, "originalCommit": {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDkyNTYwNw==", "bodyText": "Tested it, you're right. The package was listed in the private-packages section, not the import-packages - I didn't look closely enough. Fixed it now.", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r474925607", "createdAt": "2020-08-21T20:09:31Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.audio/pom.xml", "diffHunk": "@@ -14,21 +14,34 @@\n \n   <name>openHAB Core :: Bundles :: Audio</name>\n \n+  <properties>\n+    <bnd.importpackage>!javazoom.*</bnd.importpackage>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjE1NzIyMQ=="}, "originalCommit": {"oid": "bd80813db106152a8624c6b091fc54d36e48a4ed"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzYxMjUxOnYy", "diffSide": "RIGHT", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjoxNDoyNFrOHCoiVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjoxNDoyNFrOHCoiVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMzM1MQ==", "bodyText": "Sorry, the previous suggestion wasn't good since the IDE suggested Map.of  which is an interface implemented by Hashtable, so let's revert these:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());\n          \n          \n            \n                    Dictionary<String, Object> audioConfig = new Hashtable<>();\n          \n          \n            \n                    audioConfig.put(\"defaultSink\", sink.getId());", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472523351", "createdAt": "2020-08-18T22:14:24Z", "author": {"login": "wborn"}, "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,17 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n-        Dictionary<String, Object> voiceConfig = new Hashtable<>();\n-        voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n-        Configuration configuration = configAdmin.getConfiguration(VoiceManagerImpl.CONFIGURATION_PID);\n-        configuration.update(voiceConfig);\n+        Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eee0aa6485143d2c61195f1bbb219d77c72c23ef"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzYxMzU0OnYy", "diffSide": "RIGHT", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjoxNDo0OVrOHCoi_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMjoxNDo0OVrOHCoi_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjUyMzUxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());\n          \n          \n            \n                    Dictionary<String, Object> voiceConfig = new Hashtable<>();\n          \n          \n            \n                    voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472523516", "createdAt": "2020-08-18T22:14:49Z", "author": {"login": "wborn"}, "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/internal/VoiceManagerImplTest.java", "diffHunk": "@@ -73,14 +67,17 @@ public void setUp() throws IOException {\n         registerService(sink);\n         registerService(voice);\n \n-        Dictionary<String, Object> voiceConfig = new Hashtable<>();\n-        voiceConfig.put(CONFIG_DEFAULT_TTS, ttsService.getId());\n         ConfigurationAdmin configAdmin = super.getService(ConfigurationAdmin.class);\n-        Configuration configuration = configAdmin.getConfiguration(VoiceManagerImpl.CONFIGURATION_PID);\n-        configuration.update(voiceConfig);\n+        Dictionary<String, Object> audioConfig = Hashtable.of(\"defaultSink\", sink.getId());\n+        Configuration configuration = configAdmin.getConfiguration(\"org.openhab.audio\");\n+        configuration.update(audioConfig);\n \n-        audioManager = new AudioManagerStub();\n-        registerService(audioManager);\n+        voiceManager = getService(VoiceManager.class, VoiceManagerImpl.class);\n+        assertNotNull(voiceManager);\n+\n+        Dictionary<String, Object> voiceConfig = Hashtable.of(CONFIG_DEFAULT_TTS, ttsService.getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eee0aa6485143d2c61195f1bbb219d77c72c23ef"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzczMDAxOnYy", "diffSide": "RIGHT", "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/voiceconsolecommandextension/VoiceConsoleCommandExtensionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzowNToxNFrOHCpnlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMzowNToxNFrOHCpnlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU0MTA3Ng==", "bodyText": "It seems the resolution issues can be resolved by removing this internal import. After that the tests run again but still fail.", "url": "https://github.com/openhab/openhab-core/pull/1597#discussion_r472541076", "createdAt": "2020-08-18T23:05:14Z", "author": {"login": "wborn"}, "path": "itests/org.openhab.core.voice.tests/src/main/java/org/openhab/core/voice/voiceconsolecommandextension/VoiceConsoleCommandExtensionTest.java", "diffHunk": "@@ -16,10 +16,10 @@\n \n import org.junit.jupiter.api.BeforeEach;\n import org.openhab.core.audio.AudioManager;\n+import org.openhab.core.audio.internal.AudioManagerImpl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eee0aa6485143d2c61195f1bbb219d77c72c23ef"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3335, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}