{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzNDE3NjMw", "number": 1423, "title": "Model refactoring, Memory Leak prevention, UTF-8 encoding", "bodyText": "Model refactoring, Memory Leak prevention, UTF-8 encoding\n\nBeside our basic improvements (nullness annotations and constructor injection) this draft tries to address two other issues - I will link them, when I find them - eventually they are placed in old ESH repository. First one is a potential memory leak in the ModelRepository\u00ccmpl where we did not close the copied InputStreams (e.g. for validation). Second one is a potential encoding issue - I added XtextResource.OPTION_ENCODING = \"UTF-8\" in all places where the resources are loaded.\nWhat do you think about that? I am fine with splitting this PR into smaller pieces.\nBut there might be a bigger problem related to the internal resourceSet (SynchronizedXtextResourceSet). Today I faced a system crash and luckily I could save the heap dump. @wborn I would like to share it with you for deeper analysis.\n\nSigned-off-by: Christoph Weitkamp github@christophweitkamp.de", "createdAt": "2020-04-14T21:14:04Z", "url": "https://github.com/openhab/openhab-core/pull/1423", "merged": true, "mergeCommit": {"oid": "b7ab8070789079a9a9cbd1091ea7b9152f1a04e1"}, "closed": true, "closedAt": "2020-06-05T18:25:50Z", "author": {"login": "cweitkamp"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaNtjTAFqTM5ODUyNTcwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoW7MOgFqTQyNTUzMDA2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NTI1NzAy", "url": "https://github.com/openhab/openhab-core/pull/1423#pullrequestreview-398525702", "createdAt": "2020-04-22T19:46:37Z", "commit": {"oid": "a8bdb15a03202381c37502ceb8139f346ef851d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NjozN1rOGKILyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTo0NjozN1rOGKILyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI3MzAzMg==", "bodyText": "I'm OK with the changes, but this change will probably not fix memory leaks since the close method of a ByteArrayInputStream doesn't do anything:\n    /**\n     * Closing a {@code ByteArrayInputStream} has no effect. The methods in\n     * this class can be called after the stream has been closed without\n     * generating an {@code IOException}.\n     */\n    public void close() throws IOException {\n    }\nIt's just an InputStream backed by a byte array that doesn't hold any other resources besides the array and a few variables. It doesn't hurt to always use try-with-resources to prevent issues, but it's only really required for a few Stream implementations.", "url": "https://github.com/openhab/openhab-core/pull/1423#discussion_r413273032", "createdAt": "2020-04-22T19:46:37Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java", "diffHunk": "@@ -96,16 +100,18 @@ public EObject getModel(String name) {\n     @Override\n     public boolean addOrRefreshModel(String name, final InputStream originalInputStream) {\n         Resource resource = null;\n+        InputStream inputStream = null;\n         try {\n-            InputStream inputStream = null;\n             if (originalInputStream != null) {\n                 byte[] bytes = IOUtils.toByteArray(originalInputStream);\n-                String validationResult = validateModel(name, new ByteArrayInputStream(bytes));\n-                if (validationResult != null) {\n-                    logger.warn(\"Configuration model '{}' has errors, therefore ignoring it: {}\", name,\n-                            validationResult);\n-                    removeModel(name);\n-                    return false;\n+                try (InputStream validationStream = new ByteArrayInputStream(bytes)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8bdb15a03202381c37502ceb8139f346ef851d8"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3474cd845be1528ed3ca9aa2e8a1fb2fed70f948", "author": {"user": {"login": "cweitkamp", "name": "Christoph Weitkamp"}}, "url": "https://github.com/openhab/openhab-core/commit/3474cd845be1528ed3ca9aa2e8a1fb2fed70f948", "committedDate": "2020-06-05T17:26:23Z", "message": "Model refactoring, Memory Leak prevention, UTF-8\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8bdb15a03202381c37502ceb8139f346ef851d8", "author": {"user": {"login": "cweitkamp", "name": "Christoph Weitkamp"}}, "url": "https://github.com/openhab/openhab-core/commit/a8bdb15a03202381c37502ceb8139f346ef851d8", "committedDate": "2020-04-14T20:39:08Z", "message": "Model refactoring, Memory Leak prevention, UTF-8\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>"}, "afterCommit": {"oid": "3474cd845be1528ed3ca9aa2e8a1fb2fed70f948", "author": {"user": {"login": "cweitkamp", "name": "Christoph Weitkamp"}}, "url": "https://github.com/openhab/openhab-core/commit/3474cd845be1528ed3ca9aa2e8a1fb2fed70f948", "committedDate": "2020-06-05T17:26:23Z", "message": "Model refactoring, Memory Leak prevention, UTF-8\n\nSigned-off-by: Christoph Weitkamp <github@christophweitkamp.de>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NTMwMDYw", "url": "https://github.com/openhab/openhab-core/pull/1423#pullrequestreview-425530060", "createdAt": "2020-06-05T18:25:37Z", "commit": {"oid": "3474cd845be1528ed3ca9aa2e8a1fb2fed70f948"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4599, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}