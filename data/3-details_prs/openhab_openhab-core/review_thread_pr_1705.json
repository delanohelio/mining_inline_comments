{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwMTc1Mzc1", "number": 1705, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwODowMTowM1rOEsW1jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwODowMToxN1rOEsW1rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQ2OTU2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwODowMTowM1rOHflbiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODowOTo1MlrOHfpe_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MTE2MQ==", "bodyText": "I would keep logging this as WARN level here as the severity isn't reduced, just because debug logging is enabled. All that is added is that the exception will be logged in that case.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.debug(\"Error occurred when executing commandLine '{}'\", Arrays.toString(commandLine),\n          \n          \n            \n                            logger.warn(\"Error occurred when executing commandLine '{}'\", Arrays.toString(commandLine),", "url": "https://github.com/openhab/openhab-core/pull/1705#discussion_r502881161", "createdAt": "2020-10-11T08:01:03Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -104,22 +105,33 @@ public static void executeCommandLine(String... commandLine) {\n             } else if (process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS)) {\n                 exitCode = process.exitValue();\n             } else {\n-                logger.warn(\"Timeout occurred when executing commandLine '{}'\", commandLine);\n+                logger.warn(\"Timeout occurred when executing commandLine '{}'\", Arrays.toString(commandLine));\n                 break cleanup;\n             }\n             if (exitCode == 0) {\n                 return outputFuture.get();\n             } else {\n-                logger.debug(\"exit code '{}', result '{}', errors '{}'\", exitCode, outputFuture.get(),\n-                        errorFuture.get());\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"exit code '{}', result '{}', errors '{}'\", exitCode, outputFuture.get(),\n+                            errorFuture.get());\n+                }\n                 return null;\n             }\n         } catch (ExecutionException e) {\n-            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e.getCause());\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Error occurred when executing commandLine '{}'\", Arrays.toString(commandLine),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37bd9abbdc992a0aa50f543569cddf5eaf7079b9"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NzU4MA==", "bodyText": "done", "url": "https://github.com/openhab/openhab-core/pull/1705#discussion_r502947580", "createdAt": "2020-10-11T18:09:52Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -104,22 +105,33 @@ public static void executeCommandLine(String... commandLine) {\n             } else if (process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS)) {\n                 exitCode = process.exitValue();\n             } else {\n-                logger.warn(\"Timeout occurred when executing commandLine '{}'\", commandLine);\n+                logger.warn(\"Timeout occurred when executing commandLine '{}'\", Arrays.toString(commandLine));\n                 break cleanup;\n             }\n             if (exitCode == 0) {\n                 return outputFuture.get();\n             } else {\n-                logger.debug(\"exit code '{}', result '{}', errors '{}'\", exitCode, outputFuture.get(),\n-                        errorFuture.get());\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"exit code '{}', result '{}', errors '{}'\", exitCode, outputFuture.get(),\n+                            errorFuture.get());\n+                }\n                 return null;\n             }\n         } catch (ExecutionException e) {\n-            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e.getCause());\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Error occurred when executing commandLine '{}'\", Arrays.toString(commandLine),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MTE2MQ=="}, "originalCommit": {"oid": "37bd9abbdc992a0aa50f543569cddf5eaf7079b9"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0OTQ2OTkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQwODowMToxN1rOHflbsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMVQxODoxMDowMVrOHfpfDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MTIwMQ==", "bodyText": "dito\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            logger.debug(\"Failed to execute commandLine '{}'\", Arrays.toString(commandLine), e);\n          \n          \n            \n                            logger.warn(\"Failed to execute commandLine '{}'\", Arrays.toString(commandLine), e);", "url": "https://github.com/openhab/openhab-core/pull/1705#discussion_r502881201", "createdAt": "2020-10-11T08:01:17Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -104,22 +105,33 @@ public static void executeCommandLine(String... commandLine) {\n             } else if (process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS)) {\n                 exitCode = process.exitValue();\n             } else {\n-                logger.warn(\"Timeout occurred when executing commandLine '{}'\", commandLine);\n+                logger.warn(\"Timeout occurred when executing commandLine '{}'\", Arrays.toString(commandLine));\n                 break cleanup;\n             }\n             if (exitCode == 0) {\n                 return outputFuture.get();\n             } else {\n-                logger.debug(\"exit code '{}', result '{}', errors '{}'\", exitCode, outputFuture.get(),\n-                        errorFuture.get());\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"exit code '{}', result '{}', errors '{}'\", exitCode, outputFuture.get(),\n+                            errorFuture.get());\n+                }\n                 return null;\n             }\n         } catch (ExecutionException e) {\n-            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e.getCause());\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Error occurred when executing commandLine '{}'\", Arrays.toString(commandLine),\n+                        e.getCause());\n+            } else {\n+                logger.warn(\"Error occurred when executing commandLine '{}'\", Arrays.toString(commandLine));\n+            }\n         } catch (InterruptedException e) {\n-            logger.debug(\"commandLine '{}' was interrupted\", commandLine, e);\n+            logger.debug(\"commandLine '{}' was interrupted\", Arrays.toString(commandLine), e);\n         } catch (IOException e) {\n-            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e);\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Failed to execute commandLine '{}'\", Arrays.toString(commandLine), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37bd9abbdc992a0aa50f543569cddf5eaf7079b9"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjk0NzU5OQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-core/pull/1705#discussion_r502947599", "createdAt": "2020-10-11T18:10:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -104,22 +105,33 @@ public static void executeCommandLine(String... commandLine) {\n             } else if (process.waitFor(timeout.toMillis(), TimeUnit.MILLISECONDS)) {\n                 exitCode = process.exitValue();\n             } else {\n-                logger.warn(\"Timeout occurred when executing commandLine '{}'\", commandLine);\n+                logger.warn(\"Timeout occurred when executing commandLine '{}'\", Arrays.toString(commandLine));\n                 break cleanup;\n             }\n             if (exitCode == 0) {\n                 return outputFuture.get();\n             } else {\n-                logger.debug(\"exit code '{}', result '{}', errors '{}'\", exitCode, outputFuture.get(),\n-                        errorFuture.get());\n+                if (logger.isDebugEnabled()) {\n+                    logger.debug(\"exit code '{}', result '{}', errors '{}'\", exitCode, outputFuture.get(),\n+                            errorFuture.get());\n+                }\n                 return null;\n             }\n         } catch (ExecutionException e) {\n-            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e.getCause());\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Error occurred when executing commandLine '{}'\", Arrays.toString(commandLine),\n+                        e.getCause());\n+            } else {\n+                logger.warn(\"Error occurred when executing commandLine '{}'\", Arrays.toString(commandLine));\n+            }\n         } catch (InterruptedException e) {\n-            logger.debug(\"commandLine '{}' was interrupted\", commandLine, e);\n+            logger.debug(\"commandLine '{}' was interrupted\", Arrays.toString(commandLine), e);\n         } catch (IOException e) {\n-            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e);\n+            if (logger.isDebugEnabled()) {\n+                logger.debug(\"Failed to execute commandLine '{}'\", Arrays.toString(commandLine), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjg4MTIwMQ=="}, "originalCommit": {"oid": "37bd9abbdc992a0aa50f543569cddf5eaf7079b9"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3369, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}