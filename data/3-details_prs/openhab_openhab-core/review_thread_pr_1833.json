{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNjMzMDM0", "number": 1833, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxNTowM1rOE7NA2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMDowMDozN1rOE746DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTE0NjQ4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOToxNTowM1rOH2tw2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMlQxMToyMzozMlrOH32JMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzNDkzOA==", "bodyText": "Wouldn't it be easier to iterate over group.getMembers()?", "url": "https://github.com/openhab/openhab-core/pull/1833#discussion_r527134938", "createdAt": "2020-11-19T19:15:03Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "diffHunk": "@@ -118,6 +128,16 @@ public ManagedItemProvider(final @Reference StorageService storageService,\n         return memberNames;\n     }\n \n+    private Set<Item> getMembers(GroupItem groupItem, Collection<Item> allItems) {\n+        Set<Item> members = new HashSet<>();\n+        for (Item item : allItems) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "733d27065e2c0065e17a54a48628cfa7920fe593"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzQ4NTYwNA==", "bodyText": "If that would be possible, the other recursive function in the ManagedItemProvider could use that as well. But group.getMembers() is empty since fetching of the Item is done at the start of Remove(string key) from the StorageService.", "url": "https://github.com/openhab/openhab-core/pull/1833#discussion_r527485604", "createdAt": "2020-11-20T07:20:21Z", "author": {"login": "silamon"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "diffHunk": "@@ -118,6 +128,16 @@ public ManagedItemProvider(final @Reference StorageService storageService,\n         return memberNames;\n     }\n \n+    private Set<Item> getMembers(GroupItem groupItem, Collection<Item> allItems) {\n+        Set<Item> members = new HashSet<>();\n+        for (Item item : allItems) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzNDkzOA=="}, "originalCommit": {"oid": "733d27065e2c0065e17a54a48628cfa7920fe593"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzNjUxOA==", "bodyText": "I think digging into it and research why group members are empty needs too much time. Considering how often a group will be deleted it should be okay for now to accept the iteration over all items. Wdyt?", "url": "https://github.com/openhab/openhab-core/pull/1833#discussion_r528236518", "createdAt": "2020-11-21T19:59:56Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "diffHunk": "@@ -118,6 +128,16 @@ public ManagedItemProvider(final @Reference StorageService storageService,\n         return memberNames;\n     }\n \n+    private Set<Item> getMembers(GroupItem groupItem, Collection<Item> allItems) {\n+        Set<Item> members = new HashSet<>();\n+        for (Item item : allItems) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzNDkzOA=="}, "originalCommit": {"oid": "733d27065e2c0065e17a54a48628cfa7920fe593"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMwMzE5MA==", "bodyText": "No need to research that, I think. There's an initializeItem(Item item) in the ItemRegistry where members get filled in. If I want to have an item filled in with members, I would need to get that item from the ItemRegistry on removal or the remove function would need to be adjusted to contain the item instead of the key.\nI can't use the ItemRegistry removal event since it gets called too whenever a provider get disposed (https://github.com/openhab/openhab-core/blob/master/bundles/org.openhab.core/src/main/java/org/openhab/core/common/registry/AbstractRegistry.java#L640) . Making a dedicated service with a reference to the ManagedItemProvider and ItemRegistry, so I can listen on ManagedItemProvider removals and then fetch the item from ItemRegistry, would only work if my service is being called before the listener of ItemRegistry, which cannot be guaranteed.", "url": "https://github.com/openhab/openhab-core/pull/1833#discussion_r528303190", "createdAt": "2020-11-22T08:47:52Z", "author": {"login": "silamon"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "diffHunk": "@@ -118,6 +128,16 @@ public ManagedItemProvider(final @Reference StorageService storageService,\n         return memberNames;\n     }\n \n+    private Set<Item> getMembers(GroupItem groupItem, Collection<Item> allItems) {\n+        Set<Item> members = new HashSet<>();\n+        for (Item item : allItems) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzNDkzOA=="}, "originalCommit": {"oid": "733d27065e2c0065e17a54a48628cfa7920fe593"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODMyMDgxNw==", "bodyText": "Thank you for explanation. Let's go for the current solution.", "url": "https://github.com/openhab/openhab-core/pull/1833#discussion_r528320817", "createdAt": "2020-11-22T11:23:32Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "diffHunk": "@@ -118,6 +128,16 @@ public ManagedItemProvider(final @Reference StorageService storageService,\n         return memberNames;\n     }\n \n+    private Set<Item> getMembers(GroupItem groupItem, Collection<Item> allItems) {\n+        Set<Item> members = new HashSet<>();\n+        for (Item item : allItems) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzEzNDkzOA=="}, "originalCommit": {"oid": "733d27065e2c0065e17a54a48628cfa7920fe593"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMjMzODA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMDowMDozN1rOH3xAUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQyMDowMDozN1rOH3xAUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODIzNjYyNQ==", "bodyText": "Please remove the this where possible.", "url": "https://github.com/openhab/openhab-core/pull/1833#discussion_r528236625", "createdAt": "2020-11-21T20:00:37Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "diffHunk": "@@ -83,6 +83,16 @@ public ManagedItemProvider(final @Reference StorageService storageService,\n         this.itemBuilderFactory = itemBuilderFactory;\n     }\n \n+    @Override\n+    public @Nullable Item remove(String key) {\n+        Item item = this.get(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "733d27065e2c0065e17a54a48628cfa7920fe593"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3282, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}