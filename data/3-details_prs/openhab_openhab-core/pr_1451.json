{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMzU2NzE3", "number": 1451, "title": "Replaced \"classic\" rule engine by a DSLRuleProvider for the NGRE", "bodyText": "This PR removes the \"classic\" rule engine completely, so that the NGRE now becomes the one and only rule engine of openHAB (and I'd suggest we can call it from now on simply \"rule engine\").\nWhile the \"classic\" rule engine is removed, the support for DSL rules is kept, including their parsing through Xtext. This is imho tremendously important, since we would not want to break millions of lines of rules that already exist out there.\nThe newly introduced DSLRuleProvider serves this purpose nicely. It takes the parsed dsl rule files, creates a rule instance for each contained rule in the file, which then consists out of a list of triggers and always a single script action with scripts of mime-type application/vnd.openhab.dsl.rule.\nThose rules are nicely shown in the new rule editor in the UI:\n\nAnd also their YAML representation is quite well readable:\n\nSome further changes that had to be done along the way:\n\nAll traces of Quartz have been completely removed. The Timer class now works with our own scheduler and should be completely backward compatible. The \"core.scheduler\" bundle has thus been completely removed.\nThe now keyword in rules now resolves to java.time.ZonedDateTime.now() instead of java.time.Instant.now(). This should bring us convenience methods like now.plusHours(1) back.\n\"Member of\" triggers were added to the rule engine, which will definitely continue to be asked for, so the new rule engine has them now as well.\nA \"system trigger\" type has been introduced with a rudimentary \"startlevel\" implementation. This is a first step towards eclipse-archived/smarthome#1896 and should be the appropriate successor for the \"system started\" rule trigger. At the moment, it only waits some time, before such \"startup\" rules are executed, but I hope we can further work on the startlevel service so that our rule lifecycle becomes much more reliable.\n\"system shutdown\" triggers are no longer supported - I doubt that anybody is using them at all and if there's the strong which to keep them, it can possibly also be mapped to the new startlevel trigger once it also supports direction.\n\nWhile it all already works quite well, I marked this as WIP as I will still have to do some polishing, extensive manual testing as well as adding unit tests for it.\nI just wanted to make the work already visible to you for early testing and discussions.\nSigned-off-by: Kai Kreuzer kai@openhab.org", "createdAt": "2020-04-28T20:55:55Z", "url": "https://github.com/openhab/openhab-core/pull/1451", "merged": true, "mergeCommit": {"oid": "173c93081dd6f7b15047c50c316a0e0bf99b6100"}, "closed": true, "closedAt": "2020-06-14T08:36:26Z", "author": {"login": "kaikreuzer"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccUQjygFqTQwMjQ1NDM0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcrH4xJAFqTQzMDE5ODk0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNDU0MzQ2", "url": "https://github.com/openhab/openhab-core/pull/1451#pullrequestreview-402454346", "createdAt": "2020-04-29T08:20:56Z", "commit": {"oid": "90324e733ec2ec703a8ed79931d012b60595241a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyMDo1NlrOGN0e6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMToxMVrOGN01Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NDU1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"description\": \"the member of the group that changed it state\",\n          \n          \n            \n                                \"description\": \"the member of the group that changed its state\",", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r417144553", "createdAt": "2020-04-29T08:20:56Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "diffHunk": "@@ -231,6 +231,256 @@\n \t\t\t\t\t\"reference\": \"event\"\n \t\t\t\t}\n \t\t\t]\n-\t\t}\n+\t\t},\n+        {\n+            \"uid\": \"core.GroupCommandTrigger\",\n+            \"label\": \"a member of an item group receives a command\",\n+            \"description\": \"This triggers the rule if a member of an item group receives a command.\",\n+            \"configDescriptions\": [\n+                {\n+                    \"name\": \"groupName\",\n+                    \"type\": \"TEXT\",\n+                    \"context\": \"item\",\n+                    \"label\": \"Group\",\n+                    \"description\": \"the name of the item group\",\n+                    \"required\": true\n+                },\n+                {\n+                    \"name\": \"command\",\n+                    \"type\": \"TEXT\",\n+                    \"label\": \"Command\",\n+                    \"description\": \"the received command\",\n+                    \"required\": false,\n+                    \"limitToOptions\": false,\n+                    \"options\": [\n+                        {\n+                            \"label\": \"ON\",\n+                            \"value\": \"ON\"\n+                        },\n+                        {\n+                            \"label\": \"OFF\",\n+                            \"value\": \"OFF\"\n+                        },\n+                        {\n+                            \"label\": \"OPEN\",\n+                            \"value\": \"OPEN\"\n+                        },\n+                        {\n+                            \"label\": \"CLOSED\",\n+                            \"value\": \"CLOSED\"\n+                        },\n+                        {\n+                            \"label\": \"UP\",\n+                            \"value\": \"UP\"\n+                        },\n+                        {\n+                            \"label\": \"DOWN\",\n+                            \"value\": \"DOWN\"\n+                        }\n+                    ]\n+                }\n+            ],\n+            \"outputs\": [\n+                {\n+                    \"name\": \"triggeringItem\",\n+                    \"type\": \"org.openhab.core.items.Item\",\n+                    \"description\": \"the member of the group that received the command\",\n+                    \"label\": \"Triggering Item\"\n+                },\n+                {\n+                    \"name\": \"command\",\n+                    \"type\": \"command\",\n+                    \"description\": \"the received command\",\n+                    \"label\": \"Command\"\n+                },\n+                {\n+                    \"name\": \"event\",\n+                    \"type\": \"org.openhab.core.events.Event\",\n+                    \"label\": \"Event\",\n+                    \"description\": \"The event which was sent.\",\n+                    \"reference\": \"event\"\n+                }\n+            ]\n+        },\n+        {\n+            \"uid\": \"core.GroupStateUpdateTrigger\",\n+            \"label\": \"the state of a member of an item group is updated\",\n+            \"description\": \"This triggers the rule if the state of a member of an item group is updated (even if it does not change).\",\n+            \"configDescriptions\": [\n+                {\n+                    \"name\": \"groupName\",\n+                    \"type\": \"TEXT\",\n+                    \"context\": \"item\",\n+                    \"label\": \"Group\",\n+                    \"description\": \"the name of the item group\",\n+                    \"required\": true\n+                },\n+                {\n+                    \"name\": \"state\",\n+                    \"type\": \"TEXT\",\n+                    \"label\": \"State\",\n+                    \"description\": \"the state of the item\",\n+                    \"required\": false,\n+                    \"limitToOptions\": false,\n+                    \"options\": [\n+                        {\n+                            \"label\": \"ON\",\n+                            \"value\": \"ON\"\n+                        },\n+                        {\n+                            \"label\": \"OFF\",\n+                            \"value\": \"OFF\"\n+                        },\n+                        {\n+                            \"label\": \"OPEN\",\n+                            \"value\": \"OPEN\"\n+                        },\n+                        {\n+                            \"label\": \"CLOSED\",\n+                            \"value\": \"CLOSED\"\n+                        },\n+                        {\n+                            \"label\": \"UP\",\n+                            \"value\": \"UP\"\n+                        },\n+                        {\n+                            \"label\": \"DOWN\",\n+                            \"value\": \"DOWN\"\n+                        }\n+                    ]\n+                }\n+            ],\n+            \"outputs\": [\n+                {\n+                    \"name\": \"triggeringItem\",\n+                    \"type\": \"org.openhab.core.items.Item\",\n+                    \"description\": \"the member of the group that updated its state\",\n+                    \"label\": \"Triggering Item\"\n+                },\n+                {\n+                    \"name\": \"state\",\n+                    \"type\": \"state\",\n+                    \"description\": \"the item state\",\n+                    \"label\": \"State\"\n+                },\n+                {\n+                    \"name\": \"event\",\n+                    \"type\": \"org.openhab.core.events.Event\",\n+                    \"label\": \"Event\",\n+                    \"description\": \"The event which was sent.\",\n+                    \"reference\": \"event\"\n+                }\n+            ]\n+        },\n+        {\n+            \"uid\": \"core.GroupStateChangeTrigger\",\n+            \"label\": \"the state of a member of an item group changes\",\n+            \"description\": \"This triggers the rule if the state of a member of an item group has changed.\",\n+            \"configDescriptions\": [\n+                {\n+                    \"name\": \"groupName\",\n+                    \"type\": \"TEXT\",\n+                    \"context\": \"item\",\n+                    \"label\": \"Group\",\n+                    \"description\": \"the name of the item group\",\n+                    \"required\": true\n+                },\n+                {\n+                    \"name\": \"previousState\",\n+                    \"type\": \"TEXT\",\n+                    \"label\": \"Previous State\",\n+                    \"description\": \"the required previous state of the item\",\n+                    \"required\": false,\n+                    \"limitToOptions\": false,\n+                    \"options\": [\n+                        {\n+                            \"label\": \"ON\",\n+                            \"value\": \"ON\"\n+                        },\n+                        {\n+                            \"label\": \"OFF\",\n+                            \"value\": \"OFF\"\n+                        },\n+                        {\n+                            \"label\": \"OPEN\",\n+                            \"value\": \"OPEN\"\n+                        },\n+                        {\n+                            \"label\": \"CLOSED\",\n+                            \"value\": \"CLOSED\"\n+                        },\n+                        {\n+                            \"label\": \"UP\",\n+                            \"value\": \"UP\"\n+                        },\n+                        {\n+                            \"label\": \"DOWN\",\n+                            \"value\": \"DOWN\"\n+                        }\n+                    ]\n+                },\n+                {\n+                    \"name\": \"state\",\n+                    \"type\": \"TEXT\",\n+                    \"label\": \"State\",\n+                    \"description\": \"the state of the item\",\n+                    \"required\": false,\n+                    \"limitToOptions\": false,\n+                    \"options\": [\n+                        {\n+                            \"label\": \"ON\",\n+                            \"value\": \"ON\"\n+                        },\n+                        {\n+                            \"label\": \"OFF\",\n+                            \"value\": \"OFF\"\n+                        },\n+                        {\n+                            \"label\": \"OPEN\",\n+                            \"value\": \"OPEN\"\n+                        },\n+                        {\n+                            \"label\": \"CLOSED\",\n+                            \"value\": \"CLOSED\"\n+                        },\n+                        {\n+                            \"label\": \"UP\",\n+                            \"value\": \"UP\"\n+                        },\n+                        {\n+                            \"label\": \"DOWN\",\n+                            \"value\": \"DOWN\"\n+                        }\n+                    ]\n+                }\n+            ],\n+            \"outputs\": [\n+                {\n+                    \"name\": \"triggeringItem\",\n+                    \"type\": \"org.openhab.core.items.Item\",\n+                    \"description\": \"the member of the group that changed it state\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90324e733ec2ec703a8ed79931d012b60595241a"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDI1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This is a ModuleHandler implementation for Triggers which trigger the rule if a certain system events occurs.\n          \n          \n            \n             * This is a ModuleHandler implementation for Triggers which trigger the rule if a certain system event occurs.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r417150255", "createdAt": "2020-04-29T08:31:11Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.events.system.StartlevelEvent;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a ModuleHandler implementation for Triggers which trigger the rule if a certain system events occurs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90324e733ec2ec703a8ed79931d012b60595241a"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90324e733ec2ec703a8ed79931d012b60595241a", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/90324e733ec2ec703a8ed79931d012b60595241a", "committedDate": "2020-04-28T20:04:05Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "97ddc118b378ca9e5870d53d8e697c53fce6fd8d", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/97ddc118b378ca9e5870d53d8e697c53fce6fd8d", "committedDate": "2020-04-29T16:51:09Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMjQ2Njg2", "url": "https://github.com/openhab/openhab-core/pull/1451#pullrequestreview-403246686", "createdAt": "2020-04-30T06:53:30Z", "commit": {"oid": "d73757d0d2ea5ba9b4c7502f5fb9bbee6b91e5eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjo1MzozMFrOGOcB8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjo1MzozMFrOGOcB8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5MjQ5Nw==", "bodyText": "This doesn't work on Windows, you'll want to add this as well:\n        if (s.startsWith(\"\\r\\n\")) {\n            s = s.substring(2);\n        }\nMaybe also add a final newline if it doesn't exist (that would make the YAML multiline control a simple | instead of |-)", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r417792497", "createdAt": "2020-04-30T06:53:30Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.model.rule.runtime/src/org/openhab/core/model/rule/runtime/internal/DSLRuleProvider.java", "diffHunk": "@@ -264,14 +265,26 @@ private Rule toRule(String modelName, boolean hasContext, org.openhab.core.model\n         XBlockExpression expression = rule.getScript();\n         String script = NodeModelUtils.findActualNodeFor(expression).getText();\n         Configuration cfg = new Configuration();\n-        cfg.put(\"script\", context + script);\n+        cfg.put(\"script\", context + removeIndentation(script));\n         cfg.put(\"type\", MIMETYPE_OPENHAB_DSL_RULE);\n         List<Action> actions = Collections.singletonList(ActionBuilder.create().withId(\"script\")\n                 .withTypeUID(\"script.ScriptAction\").withConfiguration(cfg).build());\n \n         return RuleBuilder.create(uid).withName(name).withTriggers(triggers).withActions(actions).build();\n     }\n \n+    private String removeIndentation(String script) {\n+        String s = script;\n+        if (s.startsWith(\"\\n\")) {\n+            s = s.substring(1);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d73757d0d2ea5ba9b4c7502f5fb9bbee6b91e5eb"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTM5NzYy", "url": "https://github.com/openhab/openhab-core/pull/1451#pullrequestreview-404539762", "createdAt": "2020-05-02T16:04:50Z", "commit": {"oid": "857ada833862af0c5dac5525d45ffa3390f7fbda"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNjowNDo1MFrOGPkQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNjowNDo1MFrOGPkQaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3NTg1MQ==", "bodyText": "Isn't that supposed to be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    enrichedRuleDto.editable = managedRuleProvider.get(enrichedRuleDto.name) != null;\n          \n          \n            \n                    enrichedRuleDto.editable = managedRuleProvider.get(enrichedRuleDto.uid) != null;", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r418975851", "createdAt": "2020-05-02T16:04:50Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.automation.rest/src/main/java/org/openhab/core/automation/rest/internal/dto/EnrichedRuleDTOMapper.java", "diffHunk": "@@ -20,13 +21,16 @@\n  * This is a utility class to convert between the respective object and its DTO.\n  *\n  * @author Markus Rathgeb - Initial contribution\n+ * @author Kai Kreuzer - added editable field\n  */\n public class EnrichedRuleDTOMapper extends RuleDTOMapper {\n \n-    public static EnrichedRuleDTO map(final Rule rule, final RuleManager ruleEngine) {\n+    public static EnrichedRuleDTO map(final Rule rule, final RuleManager ruleEngine,\n+            final ManagedRuleProvider managedRuleProvider) {\n         final EnrichedRuleDTO enrichedRuleDto = new EnrichedRuleDTO();\n         fillProperties(rule, enrichedRuleDto);\n         enrichedRuleDto.status = ruleEngine.getStatusInfo(rule.getUID());\n+        enrichedRuleDto.editable = managedRuleProvider.get(enrichedRuleDto.name) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857ada833862af0c5dac5525d45ffa3390f7fbda"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "321cf436fe7dbb8ca0b84e6b3f3d748648c8ed39", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/321cf436fe7dbb8ca0b84e6b3f3d748648c8ed39", "committedDate": "2020-05-02T16:56:16Z", "message": "fixed test\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "076edb33fb4f67f37fd107a689796f06f2d614b5", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/076edb33fb4f67f37fd107a689796f06f2d614b5", "committedDate": "2020-05-15T19:54:33Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDYyMDk4", "url": "https://github.com/openhab/openhab-core/pull/1451#pullrequestreview-413062098", "createdAt": "2020-05-16T09:16:30Z", "commit": {"oid": "0471d124038fc2a05ea18136872dfaea302bab08"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOToxNjozMFrOGWZSIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOToxNjozMFrOGWZSIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNjA5OA==", "bodyText": "By the way @kaikreuzer, have you noticed the \"o\" gets capitalized between here and the UI? I don't think it's done client-side, so not sure where it happens.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r426136098", "createdAt": "2020-05-16T09:16:30Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.model.script.runtime/src/org/openhab/core/model/script/runtime/internal/engine/DSLScriptEngine.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.model.script.runtime.internal.engine;\n+\n+import java.io.Reader;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.script.Bindings;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptEngineFactory;\n+import javax.script.ScriptException;\n+import javax.script.SimpleScriptContext;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.xtext.naming.QualifiedName;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.interpreter.IEvaluationContext;\n+import org.eclipse.xtext.xbase.interpreter.impl.DefaultEvaluationContext;\n+import org.openhab.core.model.script.engine.ScriptExecutionException;\n+import org.openhab.core.model.script.engine.ScriptParsingException;\n+import org.openhab.core.model.script.runtime.DSLScriptContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A basic implementation of the {@link javax.script.ScriptEngine} interface for using DSL scripts\n+ * within a jsr223 scripting context in Java.\n+ * Most methods are left empty, because they aren't used in our rule engine.\n+ * The most important methods are the ones that return metadata about the script engine factory.\n+ *\n+ * Note: This class is not marked as NonNullByDefault as almost all parameters of all methods are\n+ * nullable as the interface is declared without null annotations.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class DSLScriptEngine implements javax.script.ScriptEngine {\n+\n+    public static final String MIMETYPE_OPENHAB_DSL_RULE = \"application/vnd.openhab.dsl.rule\";\n+\n+    private static final Map<String, String> implicitVars = Map.of(\"command\", \"receivedCommand\", \"event\",\n+            \"receivedEvent\", \"newState\", \"newState\", \"oldState\", \"previousState\", \"triggeringItem\", \"triggeringItem\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(DSLScriptEngine.class);\n+\n+    private final org.openhab.core.model.script.engine.ScriptEngine scriptEngine;\n+    private final @Nullable DSLScriptContextProvider contextProvider;\n+    private final ScriptContext context = new SimpleScriptContext();\n+\n+    public DSLScriptEngine(org.openhab.core.model.script.engine.ScriptEngine scriptEngine,\n+            @Nullable DSLScriptContextProvider contextProvider) {\n+        this.scriptEngine = scriptEngine;\n+        this.contextProvider = contextProvider;\n+    }\n+\n+    @Override\n+    public Object eval(String script, ScriptContext context) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(Reader reader, ScriptContext context) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(String script) throws ScriptException {\n+        String modelName = null;\n+        try {\n+            IEvaluationContext specificContext = null;\n+            org.openhab.core.model.script.engine.Script s = null;\n+            if (script.stripLeading().startsWith(DSLScriptContextProvider.CONTEXT_IDENTIFIER)) {\n+                String contextString = script.stripLeading().substring(\n+                        DSLScriptContextProvider.CONTEXT_IDENTIFIER.length(), script.stripLeading().indexOf('\\n'));\n+                String[] segments = contextString.split(\"-\");\n+                if (segments.length == 2) {\n+                    modelName = segments[0];\n+                    String ruleIndex = segments[1];\n+                    if (contextProvider != null) {\n+                        DSLScriptContextProvider cp = contextProvider;\n+                        logger.debug(\"Script uses context '{}'.\", contextString);\n+                        specificContext = cp.getContext(modelName);\n+                        XExpression xExpression = cp.getParsedScript(modelName, ruleIndex);\n+                        s = scriptEngine.newScriptFromXExpression(xExpression);\n+                    } else {\n+                        logger.error(\"Script references context '{}', but no context provider is registered!\",\n+                                contextString);\n+                        return null;\n+                    }\n+                } else {\n+                    logger.error(\"Script has an invalid context reference '{}'!\", contextString);\n+                    return null;\n+                }\n+            } else {\n+                s = scriptEngine.newScriptFromString(script);\n+            }\n+            IEvaluationContext evalContext = createEvaluationContext(specificContext);\n+            s.execute(evalContext);\n+        } catch (ScriptExecutionException | ScriptParsingException e) {\n+            throw new ScriptException(e.getMessage(), modelName, -1);\n+        }\n+        return null;\n+    }\n+\n+    private DefaultEvaluationContext createEvaluationContext(IEvaluationContext specificContext) {\n+        DefaultEvaluationContext evalContext = new DefaultEvaluationContext(specificContext);\n+        for (Map.Entry<String, String> entry : implicitVars.entrySet()) {\n+            Object value = context.getAttribute(entry.getKey());\n+            if (value != null) {\n+                evalContext.newValue(QualifiedName.create(entry.getValue()), value);\n+            }\n+        }\n+        return evalContext;\n+    }\n+\n+    @Override\n+    public Object eval(Reader reader) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(String script, Bindings n) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(Reader reader, Bindings n) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void put(String key, Object value) {\n+\n+    }\n+\n+    @Override\n+    public Object get(String key) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Bindings getBindings(int scope) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setBindings(Bindings bindings, int scope) {\n+    }\n+\n+    @Override\n+    public Bindings createBindings() {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScriptContext getContext() {\n+        return context;\n+    }\n+\n+    @Override\n+    public void setContext(ScriptContext context) {\n+\n+    }\n+\n+    @Override\n+    public ScriptEngineFactory getFactory() {\n+        return new ScriptEngineFactory() {\n+\n+            @Override\n+            public ScriptEngine getScriptEngine() {\n+                return null;\n+            }\n+\n+            @Override\n+            public String getProgram(String... statements) {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object getParameter(String key) {\n+                return null;\n+            }\n+\n+            @Override\n+            public String getOutputStatement(String toDisplay) {\n+                return null;\n+            }\n+\n+            @Override\n+            public List<String> getNames() {\n+                return null;\n+            }\n+\n+            @Override\n+            public List<String> getMimeTypes() {\n+                return Collections.singletonList(MIMETYPE_OPENHAB_DSL_RULE);\n+            }\n+\n+            @Override\n+            public String getMethodCallSyntax(String obj, String m, String... args) {\n+                return null;\n+            }\n+\n+            @Override\n+            public String getLanguageVersion() {\n+                return \"v1\";\n+            }\n+\n+            @Override\n+            public String getLanguageName() {\n+                return \"openHAB Rule DSL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0471d124038fc2a05ea18136872dfaea302bab08"}, "originalPosition": 223}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0471d124038fc2a05ea18136872dfaea302bab08", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/0471d124038fc2a05ea18136872dfaea302bab08", "committedDate": "2020-05-15T21:43:39Z", "message": "do not refresh temporary resources that are only created during validation\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "682ac0dfc023af74a66d87d63bc149168f720d63", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/682ac0dfc023af74a66d87d63bc149168f720d63", "committedDate": "2020-05-20T21:26:05Z", "message": "changed script name\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "682ac0dfc023af74a66d87d63bc149168f720d63", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/682ac0dfc023af74a66d87d63bc149168f720d63", "committedDate": "2020-05-20T21:26:05Z", "message": "changed script name\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "f817b534dd398bc2dfa547a8f53730e131a27fcd", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/f817b534dd398bc2dfa547a8f53730e131a27fcd", "committedDate": "2020-05-24T18:48:48Z", "message": "some small fixes\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f817b534dd398bc2dfa547a8f53730e131a27fcd", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/f817b534dd398bc2dfa547a8f53730e131a27fcd", "committedDate": "2020-05-24T18:48:48Z", "message": "some small fixes\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "eb356757d3f458b86ee71876449904267863b2ff", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/eb356757d3f458b86ee71876449904267863b2ff", "committedDate": "2020-05-31T22:25:59Z", "message": "optimized rule refresher and other improvements\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7234fc6e315bb151bd5728cb13a729236b12e301", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/7234fc6e315bb151bd5728cb13a729236b12e301", "committedDate": "2020-05-31T23:05:26Z", "message": "wait for rules refreshing before adding dsl rules\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "493e81e0b5941064248bd0d737a75b07b574b4a1", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/493e81e0b5941064248bd0d737a75b07b574b4a1", "committedDate": "2020-06-06T23:15:39Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "493e81e0b5941064248bd0d737a75b07b574b4a1", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/493e81e0b5941064248bd0d737a75b07b574b4a1", "committedDate": "2020-06-06T23:15:39Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "379ebac59c4efc7267466e7d13448084d6e538e2", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/379ebac59c4efc7267466e7d13448084d6e538e2", "committedDate": "2020-06-06T23:26:15Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "379ebac59c4efc7267466e7d13448084d6e538e2", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/379ebac59c4efc7267466e7d13448084d6e538e2", "committedDate": "2020-06-06T23:26:15Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "1649382c837657688c5e16211ad14c5249459de4", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/1649382c837657688c5e16211ad14c5249459de4", "committedDate": "2020-06-06T23:41:23Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1649382c837657688c5e16211ad14c5249459de4", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/1649382c837657688c5e16211ad14c5249459de4", "committedDate": "2020-06-06T23:41:23Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "41df022e3b5f584f98dc7d305ef1c657e994d293", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/41df022e3b5f584f98dc7d305ef1c657e994d293", "committedDate": "2020-06-07T00:17:04Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71f74bb89a0f6d9ae88a0a61565be2cb2231e810", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/71f74bb89a0f6d9ae88a0a61565be2cb2231e810", "committedDate": "2020-06-07T13:31:20Z", "message": "fixed tests\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "95af1edb4195cc1ded25eb03ef84c1459bc5b804", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/95af1edb4195cc1ded25eb03ef84c1459bc5b804", "committedDate": "2020-06-07T21:12:30Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95af1edb4195cc1ded25eb03ef84c1459bc5b804", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/95af1edb4195cc1ded25eb03ef84c1459bc5b804", "committedDate": "2020-06-07T21:12:30Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "02fdb34c404f34710dc78cf2f7914e36a2f52d19", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/02fdb34c404f34710dc78cf2f7914e36a2f52d19", "committedDate": "2020-06-07T21:52:28Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/c10d13bb9d02f3a090a17b4625acb601ae6869e9", "committedDate": "2020-06-07T22:07:17Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02fdb34c404f34710dc78cf2f7914e36a2f52d19", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/02fdb34c404f34710dc78cf2f7914e36a2f52d19", "committedDate": "2020-06-07T21:52:28Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/c10d13bb9d02f3a090a17b4625acb601ae6869e9", "committedDate": "2020-06-07T22:07:17Z", "message": "Replaced rule engine by DSLRuleProvider for NGRE\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTI2MjA0", "url": "https://github.com/openhab/openhab-core/pull/1451#pullrequestreview-430126204", "createdAt": "2020-06-13T09:13:57Z", "commit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOToxMzo1OFrOGjWnVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTo0MDo1M1rOGjWttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMzg2MA==", "bodyText": "This file only existed for adding the activator to the manifest. So it should be removed now.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439723860", "createdAt": "2020-06-13T09:13:58Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.boot/bnd.bnd", "diffHunk": "@@ -1,2 +1 @@\n Bundle-SymbolicName: ${project.artifactId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNDA2Ng==", "bodyText": "Can you inject these fields using constructor injection instead? That allows for making them final and also makes it easier to write unit tests for this class without having to resort to reflection tricks.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439724066", "createdAt": "2020-06-13T09:17:16Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.rule.runtime/src/org/openhab/core/model/rule/runtime/internal/DSLRuleProvider.java", "diffHunk": "@@ -0,0 +1,432 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.model.rule.runtime.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.xbase.XBlockExpression;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.interpreter.IEvaluationContext;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.Rule;\n+import org.openhab.core.automation.RuleProvider;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.util.ActionBuilder;\n+import org.openhab.core.automation.util.RuleBuilder;\n+import org.openhab.core.automation.util.TriggerBuilder;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.model.core.EventType;\n+import org.openhab.core.model.core.ModelRepository;\n+import org.openhab.core.model.core.ModelRepositoryChangeListener;\n+import org.openhab.core.model.rule.jvmmodel.RulesRefresher;\n+import org.openhab.core.model.rule.rules.ChangedEventTrigger;\n+import org.openhab.core.model.rule.rules.CommandEventTrigger;\n+import org.openhab.core.model.rule.rules.EventEmittedTrigger;\n+import org.openhab.core.model.rule.rules.EventTrigger;\n+import org.openhab.core.model.rule.rules.GroupMemberChangedEventTrigger;\n+import org.openhab.core.model.rule.rules.GroupMemberCommandEventTrigger;\n+import org.openhab.core.model.rule.rules.GroupMemberUpdateEventTrigger;\n+import org.openhab.core.model.rule.rules.RuleModel;\n+import org.openhab.core.model.rule.rules.SystemOnShutdownTrigger;\n+import org.openhab.core.model.rule.rules.SystemOnStartupTrigger;\n+import org.openhab.core.model.rule.rules.ThingStateChangedEventTrigger;\n+import org.openhab.core.model.rule.rules.ThingStateUpdateEventTrigger;\n+import org.openhab.core.model.rule.rules.TimerTrigger;\n+import org.openhab.core.model.rule.rules.UpdateEventTrigger;\n+import org.openhab.core.model.script.runtime.DSLScriptContextProvider;\n+import org.openhab.core.service.ReadyMarker;\n+import org.openhab.core.service.ReadyMarkerFilter;\n+import org.openhab.core.service.ReadyService;\n+import org.openhab.core.service.ReadyService.ReadyTracker;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This RuleProvider provides rules that are defined in DSL rule files.\n+ * All rules consist out of a list of triggers and a single script action.\n+ * No rule conditions are used as this concept does not exist for DSL rules.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true, service = { DSLRuleProvider.class, RuleProvider.class, DSLScriptContextProvider.class })\n+public class DSLRuleProvider\n+        implements RuleProvider, ModelRepositoryChangeListener, DSLScriptContextProvider, ReadyTracker {\n+\n+    private static final String RULES_MODEL_NAME = \"rules\";\n+    private static final String ITEMS_MODEL_NAME = \"items\";\n+    private static final String THINGS_MODEL_NAME = \"things\";\n+    static final String MIMETYPE_OPENHAB_DSL_RULE = \"application/vnd.openhab.dsl.rule\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(DSLRuleProvider.class);\n+    private final Collection<ProviderChangeListener<Rule>> listeners = new ArrayList<>();\n+    private final Map<String, Rule> rules = new HashMap<>();\n+    private final Map<String, IEvaluationContext> contexts = new HashMap<>();\n+    private final Map<String, XExpression> xExpressions = new HashMap<>();\n+    private int triggerId = 0;\n+    private Set<String> markers = new HashSet<>();\n+\n+    @Reference\n+    private @NonNullByDefault({}) ModelRepository modelRepository;\n+\n+    @Reference\n+    private @NonNullByDefault({}) ReadyService readyService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNDgwNw==", "bodyText": "Personally I never use @Reference on fields because it complicates writing unit tests or perhaps you know an easy way to inject these fields in tests?", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439724807", "createdAt": "2020-06-13T09:29:14Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.rule/src/org/openhab/core/model/rule/jvmmodel/RulesRefresher.java", "diffHunk": "@@ -29,51 +49,133 @@\n  * @author Kai Kreuzer - added delayed execution\n  * @author Maoliang Huang - refactor\n  */\n-public class RulesRefresher {\n+@Component(immediate = true, service = {})\n+public class RulesRefresher implements ReadyTracker {\n \n-    // delay before rule resources are refreshed after items or services have changed\n-    private static final long REFRESH_DELAY = 2000;\n+    // delay in ms before rule resources are refreshed after items or services have changed\n+    private static final long REFRESH_DELAY = 5000;\n+\n+    private static final String POOL_NAME = \"automation\";\n+    public static final String RULES_REFRESH = \"rules_refresh\";\n \n     private final Logger logger = LoggerFactory.getLogger(RulesRefresher.class);\n \n-    ModelRepository modelRepository;\n-    private ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n     private ScheduledFuture<?> job;\n+    private ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(POOL_NAME);\n+    private boolean started;\n+    private ReadyMarker marker = new ReadyMarker(\"dsl\", RULES_REFRESH);\n \n-    public void setModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = modelRepository;\n-    }\n+    private ItemRegistryChangeListener itemRegistryChangeListener;\n+    private ThingRegistryChangeListener thingRegistryChangeListener;\n+\n+    @Reference\n+    protected ModelRepository modelRepository;\n+\n+    @Reference\n+    protected ItemRegistry itemRegistry;\n+\n+    @Reference\n+    protected ThingRegistry thingRegistry;\n \n-    public void unsetModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = null;\n+    @Reference\n+    protected EventPublisher eventPublisher;\n+\n+    @Reference\n+    protected ReadyService readyService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNDk2MQ==", "bodyText": "Can this TODO be done in this PR?", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439724961", "createdAt": "2020-06-13T09:31:31Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.rule/src/org/openhab/core/model/rule/jvmmodel/RulesRefresher.java", "diffHunk": "@@ -29,51 +49,133 @@\n  * @author Kai Kreuzer - added delayed execution\n  * @author Maoliang Huang - refactor\n  */\n-public class RulesRefresher {\n+@Component(immediate = true, service = {})\n+public class RulesRefresher implements ReadyTracker {\n \n-    // delay before rule resources are refreshed after items or services have changed\n-    private static final long REFRESH_DELAY = 2000;\n+    // delay in ms before rule resources are refreshed after items or services have changed\n+    private static final long REFRESH_DELAY = 5000;\n+\n+    private static final String POOL_NAME = \"automation\";\n+    public static final String RULES_REFRESH = \"rules_refresh\";\n \n     private final Logger logger = LoggerFactory.getLogger(RulesRefresher.class);\n \n-    ModelRepository modelRepository;\n-    private ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n     private ScheduledFuture<?> job;\n+    private ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(POOL_NAME);\n+    private boolean started;\n+    private ReadyMarker marker = new ReadyMarker(\"dsl\", RULES_REFRESH);\n \n-    public void setModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = modelRepository;\n-    }\n+    private ItemRegistryChangeListener itemRegistryChangeListener;\n+    private ThingRegistryChangeListener thingRegistryChangeListener;\n+\n+    @Reference\n+    protected ModelRepository modelRepository;\n+\n+    @Reference\n+    protected ItemRegistry itemRegistry;\n+\n+    @Reference\n+    protected ThingRegistry thingRegistry;\n \n-    public void unsetModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = null;\n+    @Reference\n+    protected EventPublisher eventPublisher;\n+\n+    @Reference\n+    protected ReadyService readyService;\n+\n+    @Activate\n+    protected void activate() {\n+        readyService.registerTracker(this, new ReadyMarkerFilter().withType(\"dsl\").withIdentifier(\"rules\"));\n     }\n \n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC)\n     protected void addActionService(ActionService actionService) {\n-        scheduleRuleRefresh();\n+        if (started) {\n+            scheduleRuleRefresh();\n+        }\n     }\n \n     protected void removeActionService(ActionService actionService) {\n-        scheduleRuleRefresh();\n+        if (started) {\n+            scheduleRuleRefresh();\n+        }\n     }\n \n     protected synchronized void scheduleRuleRefresh() {\n         if (job != null && !job.isDone()) {\n             job.cancel(false);\n         }\n-        job = scheduler.schedule(runnable, REFRESH_DELAY, TimeUnit.MILLISECONDS);\n-    }\n-\n-    Runnable runnable = new Runnable() {\n-        @Override\n-        public void run() {\n+        job = scheduler.schedule(() -> {\n             try {\n-                if (modelRepository != null) {\n-                    modelRepository.reloadAllModelsOfType(\"rules\");\n-                }\n+                modelRepository.reloadAllModelsOfType(\"rules\");\n             } catch (Exception e) {\n                 logger.debug(\"Exception occurred during execution: {}\", e.getMessage(), e);\n             }\n+            readyService.markReady(marker);\n+        }, REFRESH_DELAY, TimeUnit.MILLISECONDS);\n+        readyService.unmarkReady(marker);\n+    }\n+\n+    private void setStartLevel() {\n+        if (!started) {\n+            started = true;\n+            // TODO: This is still a very dirty hack in the absence of a proper system start level management.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNTMzMg==", "bodyText": "Please use the same indentation everywhere in this file instead of mixing tabs and spaces.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439725332", "createdAt": "2020-06-13T09:38:12Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/jvmmodel/ScriptJvmModelInferrer.xtend", "diffHunk": "@@ -76,19 +94,29 @@ class ScriptJvmModelInferrer extends AbstractModelInferrer {\n \t\t\t}\n \t\t]\n \n-\t\t itemRegistry?.items?.forEach[ item |\n-\t\t \tval name = item.name\n-\t\t\t\tif (fieldNames.add(name)) {\n-\t\t \t\tmembers += \tscript.toField(item.name, script.newTypeRef(item.class)) [\n-\t\t\t \t\tstatic = true\n-\t\t\t \t]\n-\t\t \t} else {\n-\t\t \t\tlogger.warn(\"Duplicate field: '{}'. Ignoring '{}'.\", item.name, item.class.name)\n-\t\t \t}\n-\t\t ]\n+        itemRegistry?.items?.forEach[ item |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNTQ5NQ==", "bodyText": "Use constructor injection here instead?", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439725495", "createdAt": "2020-06-13T09:40:53Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.script.runtime/src/org/openhab/core/model/script/runtime/internal/engine/DSLScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.model.script.runtime.internal.engine;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.openhab.core.model.script.engine.ScriptEngine;\n+import org.openhab.core.model.script.runtime.DSLScriptContextProvider;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+\n+/**\n+ * An implementation of {@link ScriptEngineFactory} for DSL scripts.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ScriptEngineFactory.class)\n+public class DSLScriptEngineFactory implements ScriptEngineFactory {\n+\n+    private static final String SCRIPT_TYPE = \"dsl\";\n+\n+    private @NonNullByDefault({}) DSLScriptEngine dslScriptEngine;\n+\n+    @Reference\n+    protected @NonNullByDefault({}) ScriptEngine scriptEngine;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44c627d81fb4d186405846acaf97b1faa87d8b29", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/44c627d81fb4d186405846acaf97b1faa87d8b29", "committedDate": "2020-06-13T19:32:16Z", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d51562aec4ee5a8d545b1d60bc2010880804ba16", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/d51562aec4ee5a8d545b1d60bc2010880804ba16", "committedDate": "2020-06-13T19:30:26Z", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}, "afterCommit": {"oid": "44c627d81fb4d186405846acaf97b1faa87d8b29", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/44c627d81fb4d186405846acaf97b1faa87d8b29", "committedDate": "2020-06-13T19:32:16Z", "message": "addressed review comments\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTk4OTQ2", "url": "https://github.com/openhab/openhab-core/pull/1451#pullrequestreview-430198946", "createdAt": "2020-06-14T08:36:10Z", "commit": {"oid": "44c627d81fb4d186405846acaf97b1faa87d8b29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4779, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}