{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1MDU3MjE5", "number": 1387, "title": "Allow persistence services to define default strategies", "bodyText": "Also refactored Simple... classes to Persistence.... classes (that's actually 95% of the changes).\nSigned-off-by: Kai Kreuzer kai@openhab.org", "createdAt": "2020-03-06T22:57:56Z", "url": "https://github.com/openhab/openhab-core/pull/1387", "merged": true, "mergeCommit": {"oid": "427e969ef915d1496a6112936d131fb4db011d32"}, "closed": true, "closedAt": "2020-03-09T20:57:45Z", "author": {"login": "kaikreuzer"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcLIQqCgH2gAyMzg1MDU3MjE5OjRiOTlhMjI2MjAwNzcxYzgyYzFlNGVkZGRlYTc2ODdlNWQ5NTAwOTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMEVRtAFqTM3MTUyMjc0Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4b99a226200771c82c1e4edddea7687e5d950098", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/4b99a226200771c82c1e4edddea7687e5d950098", "committedDate": "2020-03-06T22:56:41Z", "message": "Allow persistence services to define default strategies\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da4f3b99f2c858a62dfe54442bd92b4a0183a044", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/da4f3b99f2c858a62dfe54442bd92b4a0183a044", "committedDate": "2020-03-06T23:26:42Z", "message": "fixed test\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwODIxNDM0", "url": "https://github.com/openhab/openhab-core/pull/1387#pullrequestreview-370821434", "createdAt": "2020-03-08T11:04:02Z", "commit": {"oid": "da4f3b99f2c858a62dfe54442bd92b4a0183a044"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMTowNDowMlrOFzUiwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMToyMjo0MFrOFzUnnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODI3Mw==", "bodyText": "I know that this PR is APIBreaking anyways but you also can add the default method implementation here:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                List<PersistenceStrategy> getDefaultStrategies();\n          \n          \n            \n                default List<PersistenceStrategy> getDefaultStrategies() {\n          \n          \n            \n                    return Collections.emptyList();\n          \n          \n            \n                }\n          \n      \n    \n    \n  \n\nBe aware of an eventually missing import.", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389358273", "createdAt": "2020-03-08T11:04:02Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/PersistenceService.java", "diffHunk": "@@ -70,4 +72,11 @@\n      * @param alias the alias under which the item should be persisted.\n      */\n     void store(Item item, String alias);\n+\n+    /**\n+     * Provides default persistence strategies that are used for all items if no user defined configuration is found.\n+     *\n+     * @return The default persistence strategies\n+     */\n+    List<PersistenceStrategy> getDefaultStrategies();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4f3b99f2c858a62dfe54442bd92b4a0183a044"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1ODMwNA==", "bodyText": "Should we add nullness annotations and other touched interfaces / classes?", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389358304", "createdAt": "2020-03-08T11:04:50Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/PersistenceFilter.java", "diffHunk": "@@ -17,6 +17,6 @@\n  *\n  * @author Markus Rathgeb - Initial contribution\n  */\n-public class SimpleFilter {\n+public class PersistenceFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4f3b99f2c858a62dfe54442bd92b4a0183a044"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1OTEzOA==", "bodyText": "Minor spelling improvement:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                        \"Failed to restore item states as persistence service '{}' can not be queried.\",\n          \n          \n            \n                                                        \"Failed to restore item states as persistence service '{}' cannot be queried.\",", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389359138", "createdAt": "2020-03-08T11:16:55Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java", "diffHunk": "@@ -256,46 +261,50 @@ private boolean appliesToItem(SimpleItemConfiguration config, Item item) {\n     private void initialize(Item item) {\n         // get the last persisted state from the persistence service if no state is yet set\n         if (item.getState().equals(UnDefType.NULL) && item instanceof GenericItem) {\n-            for (Entry<String, PersistenceServiceConfiguration> entry : persistenceServiceConfigs.entrySet()) {\n+            for (Entry<String, @Nullable PersistenceServiceConfiguration> entry : persistenceServiceConfigs\n+                    .entrySet()) {\n                 final String serviceName = entry.getKey();\n                 final PersistenceServiceConfiguration config = entry.getValue();\n-                for (SimpleItemConfiguration itemConfig : config.getConfigs()) {\n-                    if (hasStrategy(config, itemConfig, SimpleStrategy.Globals.RESTORE)) {\n-                        if (appliesToItem(itemConfig, item)) {\n-                            PersistenceService service = persistenceServices.get(serviceName);\n-                            if (service instanceof QueryablePersistenceService) {\n-                                QueryablePersistenceService queryService = (QueryablePersistenceService) service;\n-                                FilterCriteria filter = new FilterCriteria().setItemName(item.getName()).setPageSize(1);\n-                                Iterable<HistoricItem> result = safeCaller\n-                                        .create(queryService, QueryablePersistenceService.class).onTimeout(() -> {\n-                                            logger.warn(\"Querying persistence service '{}' takes more than {}ms.\",\n-                                                    queryService.getId(), SafeCaller.DEFAULT_TIMEOUT);\n-                                        }).onException(e -> {\n-                                            logger.error(\n-                                                    \"Exception occurred while querying persistence service '{}': {}\",\n-                                                    queryService.getId(), e.getMessage(), e);\n-                                        }).build().query(filter);\n-                                if (result != null) {\n-                                    Iterator<HistoricItem> it = result.iterator();\n-                                    if (it.hasNext()) {\n-                                        HistoricItem historicItem = it.next();\n-                                        GenericItem genericItem = (GenericItem) item;\n-                                        genericItem.removeStateChangeListener(this);\n-                                        genericItem.setState(historicItem.getState());\n-                                        genericItem.addStateChangeListener(this);\n-                                        if (logger.isDebugEnabled()) {\n-                                            logger.debug(\"Restored item state from '{}' for item '{}' -> '{}'\",\n-                                                    DateFormat.getDateTimeInstance()\n-                                                            .format(historicItem.getTimestamp()),\n-                                                    item.getName(), historicItem.getState());\n+                if (config != null) {\n+                    for (PersistenceItemConfiguration itemConfig : config.getConfigs()) {\n+                        if (hasStrategy(config, itemConfig, PersistenceStrategy.Globals.RESTORE)) {\n+                            if (appliesToItem(itemConfig, item)) {\n+                                PersistenceService service = persistenceServices.get(serviceName);\n+                                if (service instanceof QueryablePersistenceService) {\n+                                    QueryablePersistenceService queryService = (QueryablePersistenceService) service;\n+                                    FilterCriteria filter = new FilterCriteria().setItemName(item.getName())\n+                                            .setPageSize(1);\n+                                    Iterable<HistoricItem> result = safeCaller\n+                                            .create(queryService, QueryablePersistenceService.class).onTimeout(() -> {\n+                                                logger.warn(\"Querying persistence service '{}' takes more than {}ms.\",\n+                                                        queryService.getId(), SafeCaller.DEFAULT_TIMEOUT);\n+                                            }).onException(e -> {\n+                                                logger.error(\n+                                                        \"Exception occurred while querying persistence service '{}': {}\",\n+                                                        queryService.getId(), e.getMessage(), e);\n+                                            }).build().query(filter);\n+                                    if (result != null) {\n+                                        Iterator<HistoricItem> it = result.iterator();\n+                                        if (it.hasNext()) {\n+                                            HistoricItem historicItem = it.next();\n+                                            GenericItem genericItem = (GenericItem) item;\n+                                            genericItem.removeStateChangeListener(this);\n+                                            genericItem.setState(historicItem.getState());\n+                                            genericItem.addStateChangeListener(this);\n+                                            if (logger.isDebugEnabled()) {\n+                                                logger.debug(\"Restored item state from '{}' for item '{}' -> '{}'\",\n+                                                        DateFormat.getDateTimeInstance()\n+                                                                .format(historicItem.getTimestamp()),\n+                                                        item.getName(), historicItem.getState());\n+                                            }\n+                                            return;\n                                         }\n-                                        return;\n                                     }\n+                                } else if (service != null) {\n+                                    logger.warn(\n+                                            \"Failed to restore item states as persistence service '{}' can not be queried.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4f3b99f2c858a62dfe54442bd92b4a0183a044"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM1OTUxNg==", "bodyText": "One liner?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!persistenceServiceConfigs.containsKey(persistenceService.getId())) {\n          \n          \n            \n                        persistenceServiceConfigs.put(persistenceService.getId(), getDefaultConfig(persistenceService));\n          \n          \n            \n                    }\n          \n          \n            \n                    persistenceServiceConfigs.putIfAbsent(persistenceService.getId(), getDefaultConfig(persistenceService));", "url": "https://github.com/openhab/openhab-core/pull/1387#discussion_r389359516", "createdAt": "2020-03-08T11:22:40Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java", "diffHunk": "@@ -107,6 +108,9 @@ protected void deactivate() {\n     protected void addPersistenceService(PersistenceService persistenceService) {\n         logger.debug(\"Initializing {} persistence service.\", persistenceService.getId());\n         persistenceServices.put(persistenceService.getId(), persistenceService);\n+        if (!persistenceServiceConfigs.containsKey(persistenceService.getId())) {\n+            persistenceServiceConfigs.put(persistenceService.getId(), getDefaultConfig(persistenceService));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4f3b99f2c858a62dfe54442bd92b4a0183a044"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de6555b9cd606fd335ab9a55489a39709eb94e5d", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/de6555b9cd606fd335ab9a55489a39709eb94e5d", "committedDate": "2020-03-08T20:20:08Z", "message": "Update bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java\n\nCo-Authored-By: Christoph Weitkamp <github@christophweitkamp.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4518d9d618bc31732b73fb94ac66fd97f319a9b0", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/4518d9d618bc31732b73fb94ac66fd97f319a9b0", "committedDate": "2020-03-08T20:21:43Z", "message": "Update bundles/org.openhab.core.persistence/src/main/java/org/openhab/core/persistence/internal/PersistenceManagerImpl.java\n\nCo-Authored-By: Christoph Weitkamp <github@christophweitkamp.de>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d496a7ba0065480679ac20da5259addfd8b7599", "author": {"user": {"login": "kaikreuzer", "name": "Kai Kreuzer"}}, "url": "https://github.com/openhab/openhab-core/commit/6d496a7ba0065480679ac20da5259addfd8b7599", "committedDate": "2020-03-08T20:34:28Z", "message": "added null annotations\n\nSigned-off-by: Kai Kreuzer <kai@openhab.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNTIyNzQy", "url": "https://github.com/openhab/openhab-core/pull/1387#pullrequestreview-371522742", "createdAt": "2020-03-09T20:56:02Z", "commit": {"oid": "6d496a7ba0065480679ac20da5259addfd8b7599"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4554, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}