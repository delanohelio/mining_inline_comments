{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDcwODA0", "number": 1412, "title": "Add null annotations to providers and ThingManager", "bodyText": "It's almost complete so I'll already create a WIP PR for visibility so others don't start annotating these classes.\nThere are still failing tests and I want to give it a test to see that it really works.", "createdAt": "2020-04-07T06:42:46Z", "url": "https://github.com/openhab/openhab-core/pull/1412", "merged": true, "mergeCommit": {"oid": "fb7a7ac42173d3228b7e4447582e827aa541e9ac"}, "closed": true, "closedAt": "2020-04-11T06:29:13Z", "author": {"login": "wborn"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVNdw1AH2gAyNDAwMDcwODA0Ojc3NjcxMTlmOGIyYTNiODIzMjgyZWYyN2Q0OTFlYWMwZjM1YzhhNzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWfsVhAFqTM5MTc0MTAwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7767119f8b2a3b823282ef27d491eac0f35c8a72", "author": {"user": {"login": "wborn", "name": "Wouter Born"}}, "url": "https://github.com/openhab/openhab-core/commit/7767119f8b2a3b823282ef27d491eac0f35c8a72", "committedDate": "2020-04-07T06:39:46Z", "message": "Add null annotations to providers and ThingManager\n\nSigned-off-by: Wouter Born <github@maindrain.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODI1NDA2", "url": "https://github.com/openhab/openhab-core/pull/1412#pullrequestreview-388825406", "createdAt": "2020-04-07T06:45:15Z", "commit": {"oid": "7767119f8b2a3b823282ef27d491eac0f35c8a72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0NToxNVrOGB1Fsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0NToxNVrOGB1Fsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3MTU3MA==", "bodyText": "It seems that @NonNullByDefault is not applied to generic type parameters. So it would be nice if SAT will not generate warnings for these.\nWe might also want to test what happens when annotating the generic type parameter in the interface with @NonNull. Maybe adding @Nullable on these types in methods would then override @NonNull?", "url": "https://github.com/openhab/openhab-core/pull/1412#discussion_r404571570", "createdAt": "2020-04-07T06:45:15Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/common/registry/ManagedProvider.java", "diffHunk": "@@ -63,6 +65,6 @@\n      * @return returns element or null, if no element for the given key exists\n      */\n     @Nullable\n-    E get(K key);\n+    E get(@NonNull K key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7767119f8b2a3b823282ef27d491eac0f35c8a72"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODI3MDYx", "url": "https://github.com/openhab/openhab-core/pull/1412#pullrequestreview-388827061", "createdAt": "2020-04-07T06:48:31Z", "commit": {"oid": "7767119f8b2a3b823282ef27d491eac0f35c8a72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0ODozMlrOGB1LRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNjo0ODozMlrOGB1LRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU3Mjk5OQ==", "bodyText": "There are 57 classes defined as \"public final class\".\nIf they cannot be easily mocked in tests, it will either result in custom build Mocks or less tests.", "url": "https://github.com/openhab/openhab-core/pull/1412#discussion_r404572999", "createdAt": "2020-04-07T06:48:32Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.thing/src/test/java/org/openhab/core/thing/internal/ThingManagerImplTest.java", "diffHunk": "@@ -17,103 +17,129 @@\n import static org.mockito.Mockito.*;\n import static org.mockito.MockitoAnnotations.initMocks;\n \n+import org.eclipse.jdt.annotation.NonNullByDefault;\n import org.junit.Before;\n import org.junit.Test;\n import org.mockito.Mock;\n+import org.openhab.core.common.SafeCaller;\n+import org.openhab.core.config.core.ConfigDescriptionRegistry;\n+import org.openhab.core.config.core.validation.ConfigDescriptionValidator;\n+import org.openhab.core.events.EventPublisher;\n import org.openhab.core.service.ReadyService;\n import org.openhab.core.storage.Storage;\n import org.openhab.core.storage.StorageService;\n import org.openhab.core.thing.Thing;\n import org.openhab.core.thing.ThingUID;\n import org.openhab.core.thing.binding.ThingHandlerFactory;\n+import org.openhab.core.thing.i18n.ThingStatusInfoI18nLocalizationService;\n+import org.openhab.core.thing.internal.ThingTracker.ThingTrackerEvent;\n+import org.openhab.core.thing.link.ItemChannelLinkRegistry;\n+import org.openhab.core.thing.type.ChannelGroupTypeRegistry;\n+import org.openhab.core.thing.type.ChannelTypeRegistry;\n+import org.openhab.core.thing.type.ThingTypeRegistry;\n import org.openhab.core.util.BundleResolver;\n import org.osgi.framework.Bundle;\n-import org.osgi.service.component.ComponentContext;\n \n /**\n  * @author Simon Kaufmann - Initial contribution\n  */\n+@NonNullByDefault\n public class ThingManagerImplTest {\n \n-    private @Mock BundleResolver mockBundleResolver;\n-    private @Mock Bundle mockBundle;\n-    private @Mock ComponentContext mockComponentContext;\n-    private @Mock ReadyService mockReadyService;\n-    private @Mock Thing mockThing;\n-\n-    private @Mock StorageService mockStorageService;\n-    private @Mock Storage<Object> mockStorage;\n-\n-    private final ThingRegistryImpl thingRegistry = new ThingRegistryImpl();\n+    private @Mock @NonNullByDefault({}) Bundle bundleMock;\n+    private @Mock @NonNullByDefault({}) BundleResolver bundleResolverMock;\n+    private @Mock @NonNullByDefault({}) ChannelGroupTypeRegistry channelGroupTypeRegistryMock;\n+    private @Mock @NonNullByDefault({}) ChannelTypeRegistry channelTypeRegistryMock;\n+    private @Mock @NonNullByDefault({}) CommunicationManager communicationManagerMock;\n+    private @Mock @NonNullByDefault({}) EventPublisher eventPublisherMock;\n+    private @Mock @NonNullByDefault({}) ConfigDescriptionRegistry configDescriptionRegistryMock;\n+    private @Mock @NonNullByDefault({}) ConfigDescriptionValidator configDescriptionValidatorMock;\n+    private @Mock @NonNullByDefault({}) ItemChannelLinkRegistry itemChannelLinkRegistryMock;\n+    private @Mock @NonNullByDefault({}) ThingTypeRegistry thingTypeRegistryMock;\n+    private @Mock @NonNullByDefault({}) ReadyService readyServiceMock;\n+    private @Mock @NonNullByDefault({}) SafeCaller safeCallerMock;\n+    private @Mock @NonNullByDefault({}) Storage<Object> storageMock;\n+    private @Mock @NonNullByDefault({}) StorageService storageServiceMock;\n+    private @Mock @NonNullByDefault({}) Thing thingMock;\n+    private @Mock @NonNullByDefault({}) ThingRegistryImpl thingRegistryMock;\n+\n+    // This class is final so it cannot be mocked\n+    private final ThingStatusInfoI18nLocalizationService thingStatusInfoI18nLocalizationService = new ThingStatusInfoI18nLocalizationService();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7767119f8b2a3b823282ef27d491eac0f35c8a72"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4ODQyNDY0", "url": "https://github.com/openhab/openhab-core/pull/1412#pullrequestreview-388842464", "createdAt": "2020-04-07T07:15:09Z", "commit": {"oid": "7767119f8b2a3b823282ef27d491eac0f35c8a72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNTowOVrOGB1-Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwNzoxNTowOVrOGB1-Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDU4NjA1MQ==", "bodyText": "I always use this trick to force the auto formatter to start the next item on a new line. \ud83d\ude09\nThat way you don't have to use formatter:on/off for this particular case.", "url": "https://github.com/openhab/openhab-core/pull/1412#discussion_r404586051", "createdAt": "2020-04-07T07:15:09Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/ThingManagerImpl.java", "diffHunk": "@@ -347,20 +348,53 @@ public boolean isChannelLinked(ChannelUID channelUID) {\n         }\n     };\n \n-    private ThingRegistryImpl thingRegistry;\n-\n-    private BundleResolver bundleResolver;\n-\n-    private ConfigDescriptionRegistry configDescriptionRegistry;\n-    private ConfigDescriptionValidator configDescriptionValidator;\n+    @Activate\n+    public ThingManagerImpl( //\n+            final @Reference BundleResolver bundleResolver,\n+            final @Reference ChannelGroupTypeRegistry channelGroupTypeRegistry,\n+            final @Reference ChannelTypeRegistry channelTypeRegistry,\n+            final @Reference CommunicationManager communicationManager,\n+            final @Reference ConfigDescriptionRegistry configDescriptionRegistry,\n+            final @Reference ConfigDescriptionValidator configDescriptionValidator,\n+            final @Reference EventPublisher eventPublisher,\n+            final @Reference ItemChannelLinkRegistry itemChannelLinkRegistry,\n+            final @Reference ReadyService readyService, //\n+            final @Reference SafeCaller safeCaller, //\n+            final @Reference StorageService storageService, //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7767119f8b2a3b823282ef27d491eac0f35c8a72"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7da61c59b47fc04e5fe64b2196c8a638f7584a1", "author": {"user": {"login": "wborn", "name": "Wouter Born"}}, "url": "https://github.com/openhab/openhab-core/commit/d7da61c59b47fc04e5fe64b2196c8a638f7584a1", "committedDate": "2020-04-07T11:43:39Z", "message": "Use @NonNull with generic type parameters\n\nSigned-off-by: Wouter Born <github@maindrain.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f0ad3cbab0d7f899ca996607620284de57150ab", "author": {"user": {"login": "wborn", "name": "Wouter Born"}}, "url": "https://github.com/openhab/openhab-core/commit/2f0ad3cbab0d7f899ca996607620284de57150ab", "committedDate": "2020-04-07T20:36:03Z", "message": "Cast to ThingRegistryImpl as before\n\nSigned-off-by: Wouter Born <github@maindrain.net>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cc1401251e42542a4623b08d071a33e95e853ef", "author": {"user": {"login": "wborn", "name": "Wouter Born"}}, "url": "https://github.com/openhab/openhab-core/commit/7cc1401251e42542a4623b08d071a33e95e853ef", "committedDate": "2020-04-07T21:17:39Z", "message": "Cleanup code\n\nSigned-off-by: Wouter Born <github@maindrain.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMjI0OTA4", "url": "https://github.com/openhab/openhab-core/pull/1412#pullrequestreview-390224908", "createdAt": "2020-04-08T18:26:56Z", "commit": {"oid": "7cc1401251e42542a4623b08d071a33e95e853ef"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODoyNjo1NlrOGC7nKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozOTo0MVrOGC8FGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyNzAxOQ==", "bodyText": "Minor improvement:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (reference != null && reference.getProperty(Parser.PARSER_TYPE).equals(Parser.PARSER_RULE)) {\n          \n          \n            \n                    if (reference != null && Parser.PARSER_RULE.equals(reference.getProperty(Parser.PARSER_TYPE))) {", "url": "https://github.com/openhab/openhab-core/pull/1412#discussion_r405727019", "createdAt": "2020-04-08T18:26:56Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/commands/CommandlineRuleImporter.java", "diffHunk": "@@ -66,8 +69,8 @@ public CommandlineRuleImporter(BundleContext context, RuleRegistry ruleRegistry)\n      * @see AbstractCommandProvider#addingService(org.osgi.framework.ServiceReference)\n      */\n     @Override\n-    public Object addingService(@SuppressWarnings(\"rawtypes\") ServiceReference reference) {\n-        if (reference.getProperty(Parser.PARSER_TYPE).equals(Parser.PARSER_RULE)) {\n+    public @Nullable Object addingService(@SuppressWarnings(\"rawtypes\") @Nullable ServiceReference reference) {\n+        if (reference != null && reference.getProperty(Parser.PARSER_TYPE).equals(Parser.PARSER_RULE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc1401251e42542a4623b08d071a33e95e853ef"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyODk3NQ==", "bodyText": "We use ThingTypeUID in other log messages.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        logger.debug(\"No ThingHandler to dispose for {}\", thing.getUID());\n          \n          \n            \n                                        logger.debug(\"No ThingHandler to dispose for {}\", thing.getThingTypeUID());", "url": "https://github.com/openhab/openhab-core/pull/1412#discussion_r405728975", "createdAt": "2020-04-08T18:30:09Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/ThingManagerImpl.java", "diffHunk": "@@ -379,8 +413,12 @@ public void run() {\n                     final ThingHandlerFactory oldThingHandlerFactory = findThingHandlerFactory(thing.getThingTypeUID());\n                     if (oldThingHandlerFactory != null) {\n                         ThingHandler thingHandler = thing.getHandler();\n-                        unregisterAndDisposeHandler(oldThingHandlerFactory, thing, thingHandler);\n-                        waitUntilHandlerUnregistered(thing, 60 * 1000);\n+                        if (thingHandler != null) {\n+                            unregisterAndDisposeHandler(oldThingHandlerFactory, thing, thingHandler);\n+                            waitUntilHandlerUnregistered(thing, 60 * 1000);\n+                        } else {\n+                            logger.debug(\"No ThingHandler to dispose for {}\", thing.getUID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc1401251e42542a4623b08d071a33e95e853ef"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcyOTcyMQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/openhab/openhab-core/pull/1412#discussion_r405729721", "createdAt": "2020-04-08T18:31:22Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/ThingManagerImpl.java", "diffHunk": "@@ -659,7 +702,7 @@ private void initializeHandler(Thing thing) {\n \n             if (isInitializable(thing, thingType)) {\n                 setThingStatus(thing, buildStatusInfo(ThingStatus.INITIALIZING, ThingStatusDetail.NONE));\n-                doInitializeHandler(thing.getHandler());\n+                doInitializeHandler(handler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc1401251e42542a4623b08d071a33e95e853ef"}, "originalPosition": 221}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNDI4MA==", "bodyText": "Wow ... this looks crazy ...", "url": "https://github.com/openhab/openhab-core/pull/1412#discussion_r405734280", "createdAt": "2020-04-08T18:38:56Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "diffHunk": "@@ -78,7 +78,7 @@ public PersistedItem(String itemType) {\n     public static class PersistedItemInstanceCreator implements InstanceCreator<PersistedItem> {\n \n         @Override\n-        public PersistedItem createInstance(Type type) {\n+        public PersistedItem createInstance(@NonNullByDefault({}) Type type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc1401251e42542a4623b08d071a33e95e853ef"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNDY4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (persistedItem.itemType.equals(GroupItem.TYPE)) {\n          \n          \n            \n                    if (GroupItem.TYPE.equals(persistedItem.itemType)) {", "url": "https://github.com/openhab/openhab-core/pull/1412#discussion_r405734681", "createdAt": "2020-04-08T18:39:41Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/ManagedItemProvider.java", "diffHunk": "@@ -195,12 +195,13 @@ protected void removeItemFactory(ItemFactory itemFactory) {\n     }\n \n     @Override\n-    protected Item toElement(String itemName, PersistedItem persistedItem) {\n+    protected @Nullable Item toElement(String itemName, PersistedItem persistedItem) {\n         Item item = null;\n \n         if (persistedItem.itemType.equals(GroupItem.TYPE)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cc1401251e42542a4623b08d071a33e95e853ef"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e319ca27f9a86cb6fd5b8450afc8f51c248969d", "author": {"user": {"login": "wborn", "name": "Wouter Born"}}, "url": "https://github.com/openhab/openhab-core/commit/8e319ca27f9a86cb6fd5b8450afc8f51c248969d", "committedDate": "2020-04-09T07:53:18Z", "message": "Prevent NPEs by calling equals on non-null constants\n\nSigned-off-by: Wouter Born <github@maindrain.net>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNzQxMDA0", "url": "https://github.com/openhab/openhab-core/pull/1412#pullrequestreview-391741004", "createdAt": "2020-04-11T06:27:54Z", "commit": {"oid": "8e319ca27f9a86cb6fd5b8450afc8f51c248969d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4582, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}