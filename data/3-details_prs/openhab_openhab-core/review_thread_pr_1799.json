{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjM0NjU5", "number": 1799, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTozNTozN1rOE2AxdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTozNTozN1rOE2AxdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDcxMjIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation.module.script/src/main/java/org/openhab/core/automation/module/script/internal/NashornScriptEngineFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwOTozNTozN1rOHumqLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNFQxNDoxNjowMlrOHzLRpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyOTkzNA==", "bodyText": "If the classloader that creates the component is also usable, you might be able to get rid of this reflection and reuse the same NashornScriptEngineFactory in createScriptEngine like I did with Groovy by just assigning the NashornScriptEngineFactory to a field.\nSee: GroovyScriptEngineFactory", "url": "https://github.com/openhab/openhab-core/pull/1799#discussion_r518629934", "createdAt": "2020-11-06T09:35:37Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.automation.module.script/src/main/java/org/openhab/core/automation/module/script/internal/NashornScriptEngineFactory.java", "diffHunk": "@@ -72,4 +80,25 @@ public void scopeValues(ScriptEngine scriptEngine, Map<String, Object> scopeValu\n             logger.error(\"ScriptException while importing scope: {}\", ex.getMessage());\n         }\n     }\n+\n+    @Override\n+    public @Nullable ScriptEngine createScriptEngine(String scriptType) {\n+        try {\n+            for (javax.script.ScriptEngineFactory f : ENGINE_MANAGER.getEngineFactories()) {\n+                List<String> mimeTypes = f.getMimeTypes();\n+                List<String> extensions = f.getExtensions();\n+\n+                if (mimeTypes.contains(scriptType) || extensions.contains(scriptType)) {\n+                    Method method = f.getClass().getMethod(\"getScriptEngine\", ClassLoader.class);\n+                    return (ScriptEngine) method.invoke(f, NashornScriptEngineFactory.class.getClassLoader());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f8bfdd041ce6767f7fd030fc176c8169f9a5433"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODc0ODc0Mw==", "bodyText": "That's what I did initially, but I got resolution failures (https://ci.openhab.org/job/PR-openHAB-Core/2682/console):\nmissing requirement [org.openhab.core.automation.module.script/3.0.0.202011051754] osgi.wiring.package; filter:=\"(osgi.wiring.package=jdk.nashorn.api.scripting)\"]]\nand I didn't know how to solve them \ud83d\ude1e", "url": "https://github.com/openhab/openhab-core/pull/1799#discussion_r518748743", "createdAt": "2020-11-06T13:25:30Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.automation.module.script/src/main/java/org/openhab/core/automation/module/script/internal/NashornScriptEngineFactory.java", "diffHunk": "@@ -72,4 +80,25 @@ public void scopeValues(ScriptEngine scriptEngine, Map<String, Object> scopeValu\n             logger.error(\"ScriptException while importing scope: {}\", ex.getMessage());\n         }\n     }\n+\n+    @Override\n+    public @Nullable ScriptEngine createScriptEngine(String scriptType) {\n+        try {\n+            for (javax.script.ScriptEngineFactory f : ENGINE_MANAGER.getEngineFactories()) {\n+                List<String> mimeTypes = f.getMimeTypes();\n+                List<String> extensions = f.getExtensions();\n+\n+                if (mimeTypes.contains(scriptType) || extensions.contains(scriptType)) {\n+                    Method method = f.getClass().getMethod(\"getScriptEngine\", ClassLoader.class);\n+                    return (ScriptEngine) method.invoke(f, NashornScriptEngineFactory.class.getClassLoader());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyOTkzNA=="}, "originalCommit": {"oid": "5f8bfdd041ce6767f7fd030fc176c8169f9a5433"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzQyNDE2Ng==", "bodyText": "It's probably because it is considered to be an internal JDK package and it may not be available in each JVM implementation. Since it is also deprecated it's probably best not to depend on it also because Nashorn has been removed since Java 15.", "url": "https://github.com/openhab/openhab-core/pull/1799#discussion_r523424166", "createdAt": "2020-11-14T14:16:02Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.automation.module.script/src/main/java/org/openhab/core/automation/module/script/internal/NashornScriptEngineFactory.java", "diffHunk": "@@ -72,4 +80,25 @@ public void scopeValues(ScriptEngine scriptEngine, Map<String, Object> scopeValu\n             logger.error(\"ScriptException while importing scope: {}\", ex.getMessage());\n         }\n     }\n+\n+    @Override\n+    public @Nullable ScriptEngine createScriptEngine(String scriptType) {\n+        try {\n+            for (javax.script.ScriptEngineFactory f : ENGINE_MANAGER.getEngineFactories()) {\n+                List<String> mimeTypes = f.getMimeTypes();\n+                List<String> extensions = f.getExtensions();\n+\n+                if (mimeTypes.contains(scriptType) || extensions.contains(scriptType)) {\n+                    Method method = f.getClass().getMethod(\"getScriptEngine\", ClassLoader.class);\n+                    return (ScriptEngine) method.invoke(f, NashornScriptEngineFactory.class.getClassLoader());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYyOTkzNA=="}, "originalCommit": {"oid": "5f8bfdd041ce6767f7fd030fc176c8169f9a5433"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3271, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}