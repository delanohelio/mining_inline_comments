{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5MTI4MjIw", "number": 1862, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowMDo0NVrOE-v7cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowMjoxM1rOE-v-Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjMyNDMzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/AutoUpdateManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowMDo0NVrOH8EmUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowMDo0NVrOH8EmUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1MTk1Mg==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/openhab/openhab-core/pull/1862#discussion_r532751952", "createdAt": "2020-11-30T17:00:45Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/AutoUpdateManager.java", "diffHunk": "@@ -281,14 +289,19 @@ private boolean isAcceptedState(State newState, Item item) {\n             // Look for class hierarchy\n             for (Class<?> state : item.getAcceptedDataTypes()) {\n                 try {\n-                    if (!state.isEnum() && state.newInstance().getClass().isAssignableFrom(newState.getClass())) {\n+                    if (!state.isEnum() && state.getDeclaredConstructor().newInstance().getClass()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eadb074fc9d005b1d0e89150ac02e1900317e6b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjMzMTE5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/AutoUpdateManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowMjoxM1rOH8EqcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNzowMjoxM1rOH8EqcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc1MzAwOQ==", "bodyText": "I guess we can shrink this block to be a one liner:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            } catch (InstantiationException e) {\n          \n          \n            \n                                logger.warn(\"InstantiationException on {}\", e.getMessage(), e); // Should never happen\n          \n          \n            \n                            } catch (IllegalAccessException e) {\n          \n          \n            \n                                logger.warn(\"IllegalAccessException on {}\", e.getMessage(), e); // Should never happen\n          \n          \n            \n                            } catch (NoSuchMethodException e) {\n          \n          \n            \n                                logger.warn(\"NoSuchMethodException on {}\", e.getMessage(), e); // Should never happen\n          \n          \n            \n                            } catch (InvocationTargetException e) {\n          \n          \n            \n                                logger.warn(\"InvocationTargetException on {}\", e.getMessage(), e); // Should never happen\n          \n          \n            \n                            } catch (InstantiationException | IllegalAccessException | NoSuchMethodException | InvocationTargetException e) {\n          \n          \n            \n                                logger.warn(\"Exception on {}\", e.getMessage(), e); // Should never happen", "url": "https://github.com/openhab/openhab-core/pull/1862#discussion_r532753009", "createdAt": "2020-11-30T17:02:13Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/AutoUpdateManager.java", "diffHunk": "@@ -281,14 +289,19 @@ private boolean isAcceptedState(State newState, Item item) {\n             // Look for class hierarchy\n             for (Class<?> state : item.getAcceptedDataTypes()) {\n                 try {\n-                    if (!state.isEnum() && state.newInstance().getClass().isAssignableFrom(newState.getClass())) {\n+                    if (!state.isEnum() && state.getDeclaredConstructor().newInstance().getClass()\n+                            .isAssignableFrom(newState.getClass())) {\n                         isAccepted = true;\n                         break;\n                     }\n                 } catch (InstantiationException e) {\n                     logger.warn(\"InstantiationException on {}\", e.getMessage(), e); // Should never happen\n                 } catch (IllegalAccessException e) {\n                     logger.warn(\"IllegalAccessException on {}\", e.getMessage(), e); // Should never happen\n+                } catch (NoSuchMethodException e) {\n+                    logger.warn(\"NoSuchMethodException on {}\", e.getMessage(), e); // Should never happen\n+                } catch (InvocationTargetException e) {\n+                    logger.warn(\"InvocationTargetException on {}\", e.getMessage(), e); // Should never happen", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4eadb074fc9d005b1d0e89150ac02e1900317e6b"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3302, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}