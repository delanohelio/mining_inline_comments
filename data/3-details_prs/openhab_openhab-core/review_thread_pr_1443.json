{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MzY2MzUw", "number": 1443, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToxOTo0OVrOD62N5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTowODowOFrOD8nQAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDMyMjk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/persistence/PersistenceResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToxOTo0OVrOGS5wrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToxOTo0OVrOGS5wrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3MzkwMA==", "bodyText": "Rename const to PATH_PERSISTENCE?", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422473900", "createdAt": "2020-05-09T09:19:49Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/persistence/PersistenceResource.java", "diffHunk": "@@ -79,10 +85,15 @@\n  * @author Franck Dechavanne - Added DTOs to ApiResponses\n  * @author Erdoan Hadzhiyusein - Adapted the convertTime() method to work with the new DateTimeType\n  * @author Lyubomir Papazov - Change java.util.Date references to be of type java.time.ZonedDateTime\n+ * @author Markus Rathgeb - Migrated to JAX-RS Whiteboard Specification\n  */\n-@Path(PersistenceResource.PATH)\n-@Api(value = PersistenceResource.PATH)\n @Component\n+@JaxrsResource\n+@JaxrsName(PersistenceResource.PATH)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDMyMzYwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/thing/ThingTypeResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToyMDo1MFrOGS5xCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToyMDo1MFrOGS5xCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3Mzk5NQ==", "bodyText": "Rename to PATH_THING_TYPES", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422473995", "createdAt": "2020-05-09T09:20:50Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/thing/ThingTypeResource.java", "diffHunk": "@@ -79,10 +85,15 @@\n  * @author Miki Jankov - Introducing StrippedThingTypeDTO\n  * @author Franck Dechavanne - Added DTOs to ApiResponses\n  * @author Yannick Schaus - Added filter to getAll\n+ * @author Markus Rathgeb - Migrated to JAX-RS Whiteboard Specification\n  */\n-@Path(ThingTypeResource.PATH_THINGS_TYPES)\n-@Api(value = ThingTypeResource.PATH_THINGS_TYPES)\n @Component\n+@JaxrsResource\n+@JaxrsName(ThingTypeResource.PATH_THINGS_TYPES)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDMyNTkxOnYy", "diffSide": "LEFT", "path": "bundles/org.openhab.core.io.rest.sse/src/main/java/org/openhab/core/io/rest/sse/SseResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToyNDoxN1rOGS5yTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToyNDoxN1rOGS5yTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDMxNw==", "bodyText": "Why remove this? Shouldn't we use it for annotations?", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422474317", "createdAt": "2020-05-09T09:24:17Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.sse/src/main/java/org/openhab/core/io/rest/sse/SseResource.java", "diffHunk": "@@ -63,75 +74,66 @@\n  * @author Ivan Iliev - Initial contribution\n  * @author Yordan Zhelev - Added Swagger annotations\n  * @author Yannick Schaus - Add endpoints to track item state updates\n+ * @author Markus Rathgeb - Drop Glassfish dependency and use API only\n+ * @author Wouter Born - Rework SSE item state sinks for dropping Glassfish\n  */\n-@Component(immediate = true, service = SseResource.class)\n-@Path(SseResource.PATH_EVENTS)\n+@Component(service = SsePublisher.class/* , scope = ServiceScope.PROTOTYPE */)\n+@JaxrsResource\n+@JaxrsName(\"events\")\n+@JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n+@JSONRequired\n+@Path(\"/events\")\n @RolesAllowed({ Role.USER })\n @Singleton\n-@Api(value = SseResource.PATH_EVENTS, hidden = true)\n-public class SseResource {\n-\n-    public static final String PATH_EVENTS = \"events\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDMyNzQ0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest/src/main/java/org/openhab/core/io/rest/JSONInputStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToyNjoyNFrOGS5zHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToyNjoyNFrOGS5zHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDUyNw==", "bodyText": "NonNullByDefault", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422474527", "createdAt": "2020-05-09T09:26:24Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest/src/main/java/org/openhab/core/io/rest/JSONInputStream.java", "diffHunk": "@@ -0,0 +1,22 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest;\n+\n+/**\n+ * Marker interface for an input stream that provides a JSON string.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public interface JSONInputStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDMyOTQxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyReader.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToyOToyOVrOGS50Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNjo1MzoxMFrOGTBVCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDgxMQ==", "bodyText": "NonNullByDefault", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422474811", "createdAt": "2020-05-09T09:29:29Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.MessageBodyReader;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * A message body reader for JSON using GSON.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public class GsonMessageBodyReader<T> implements MessageBodyReader<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0ODAzNQ==", "bodyText": "That's not possible because it's implementing an unannotated non-OH interface so adding that annotation results in many \"Illegal redefinition of parameter annotations, inherited method from ... does not constrain this parameter\" errors.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422548035", "createdAt": "2020-05-09T21:25:15Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.MessageBodyReader;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * A message body reader for JSON using GSON.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public class GsonMessageBodyReader<T> implements MessageBodyReader<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDgxMQ=="}, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5NjI3NA==", "bodyText": "That\u2018s one of the bigger problems we have with our null-annotations. All classes implementing non-annotated (external) interfaces cannot be annotated in our code.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422596274", "createdAt": "2020-05-10T06:37:49Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.MessageBodyReader;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * A message body reader for JSON using GSON.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public class GsonMessageBodyReader<T> implements MessageBodyReader<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDgxMQ=="}, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5Nzg5OA==", "bodyText": "Yes we should really get those EEAs working (#888). Maybe we have more time for that when this PR is merged. :-)", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422597898", "createdAt": "2020-05-10T06:53:10Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyReader.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.ext.MessageBodyReader;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * A message body reader for JSON using GSON.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public class GsonMessageBodyReader<T> implements MessageBodyReader<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDgxMQ=="}, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDMyOTY0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOToyOTo1MVrOGS50WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMToyNToxOVrOGS-STg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDg0MQ==", "bodyText": "NonNullByDefault", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422474841", "createdAt": "2020-05-09T09:29:51Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyWriter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n+import javax.ws.rs.ext.MessageBodyWriter;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.openhab.core.io.rest.JSONInputStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * A message body writer for JSON using GSON.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public class GsonMessageBodyWriter<T> implements MessageBodyWriter<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0ODA0Ng==", "bodyText": "That's not possible because it's implementing an unannotated non-OH interface so adding that annotation results in many \"Illegal redefinition of parameter annotations, inherited method from ... does not constrain this parameter\" errors.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422548046", "createdAt": "2020-05-09T21:25:19Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyWriter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n+import javax.ws.rs.ext.MessageBodyWriter;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.openhab.core.io.rest.JSONInputStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * A message body writer for JSON using GSON.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public class GsonMessageBodyWriter<T> implements MessageBodyWriter<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDg0MQ=="}, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDMyOTk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/JSONResponseExceptionMapper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOTozMDoyMFrOGS50hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMToyOToyNVrOGS-TwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDg4NQ==", "bodyText": "NonNullByDefault\nThere are more new classes / interfaces where the annotation is missing. Can we add them on every new one?", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422474885", "createdAt": "2020-05-09T09:30:20Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/JSONResponseExceptionMapper.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+\n+import org.openhab.core.io.rest.JSONResponse;\n+import org.openhab.core.io.rest.RESTConstants;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsExtension;\n+\n+/**\n+ * Trap exceptions.\n+ *\n+ * @author Markus Rathgeb - Migrated to JAX-RS Whiteboard Specification\n+ */\n+@Component\n+@JaxrsExtension\n+@JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n+public class JSONResponseExceptionMapper implements ExceptionMapper<Exception> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0ODE5OA==", "bodyText": "I added them where possible.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422548198", "createdAt": "2020-05-09T21:27:08Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/JSONResponseExceptionMapper.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+\n+import org.openhab.core.io.rest.JSONResponse;\n+import org.openhab.core.io.rest.RESTConstants;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsExtension;\n+\n+/**\n+ * Trap exceptions.\n+ *\n+ * @author Markus Rathgeb - Migrated to JAX-RS Whiteboard Specification\n+ */\n+@Component\n+@JaxrsExtension\n+@JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n+public class JSONResponseExceptionMapper implements ExceptionMapper<Exception> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDg4NQ=="}, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0ODQxNw==", "bodyText": "I guess we do not want to add nullness annotations on every REST resource in the scope of this PR\n\nYes let's do that in follow up PRs so this PR doesn't grow even bigger. \ud83d\ude09", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422548417", "createdAt": "2020-05-09T21:29:25Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/JSONResponseExceptionMapper.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+\n+import org.openhab.core.io.rest.JSONResponse;\n+import org.openhab.core.io.rest.RESTConstants;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsExtension;\n+\n+/**\n+ * Trap exceptions.\n+ *\n+ * @author Markus Rathgeb - Migrated to JAX-RS Whiteboard Specification\n+ */\n+@Component\n+@JaxrsExtension\n+@JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n+public class JSONResponseExceptionMapper implements ExceptionMapper<Exception> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NDg4NQ=="}, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDMzNTMyOnYy", "diffSide": "RIGHT", "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOTozNzozMFrOGS53Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMToyNTozMlrOGS-SaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NTU5NQ==", "bodyText": "Can we use variable ${jackson.version}?", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422475595", "createdAt": "2020-05-09T09:37:30Z", "author": {"login": "cweitkamp"}, "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "diffHunk": "@@ -78,31 +78,37 @@\n \t</feature>\n \n \t<feature name=\"openhab.tp-jackson\" description=\"FasterXML Jackson bundles\" version=\"${project.version}\">\n-\t\t<capability>openhab.tp;feature=jackson;version=2.9.10</capability>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-annotations/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-core/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-databind/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.datatype/jackson-datatype-joda/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:org.yaml/snakeyaml/1.23</bundle>\n+\t\t<capability>openhab.tp;feature=jackson;version=2.10.3</capability>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0ODA3Mg==", "bodyText": "This property doesn't exist for openhab-core because Jackson is only defined here for the OH distro.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422548072", "createdAt": "2020-05-09T21:25:32Z", "author": {"login": "wborn"}, "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "diffHunk": "@@ -78,31 +78,37 @@\n \t</feature>\n \n \t<feature name=\"openhab.tp-jackson\" description=\"FasterXML Jackson bundles\" version=\"${project.version}\">\n-\t\t<capability>openhab.tp;feature=jackson;version=2.9.10</capability>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-annotations/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-core/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-databind/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.datatype/jackson-datatype-joda/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:org.yaml/snakeyaml/1.23</bundle>\n+\t\t<capability>openhab.tp;feature=jackson;version=2.10.3</capability>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NTU5NQ=="}, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDMzNjYwOnYy", "diffSide": "RIGHT", "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwOTozOToxMFrOGS537g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMToyNTo0MFrOGS-SfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NTc1OA==", "bodyText": "Can we use variable ${swagger.version}?", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422475758", "createdAt": "2020-05-09T09:39:10Z", "author": {"login": "cweitkamp"}, "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "diffHunk": "@@ -267,37 +249,25 @@\n \t\t<bundle dependency=\"true\">mvn:org.eclipse.xtext/org.eclipse.xtext.xbase.ide/2.19.0</bundle>\n \t</feature>\n \n-\t<!-- <feature name=\"openhab.tp-swagger-annotations\" description=\"Swagger Annotations\" version=\"${project.version}\"> <bundle dependency=\"true\">mvn:io.swagger/swagger-annotations/1.5.5</bundle> </feature> -->\n-\n-\t<feature name=\"openhab.tp-swagger-jax-rs-provider\" description=\"JAX-RS provider for Swagger integration\" version=\"${project.version}\">\n+\t<feature name=\"openhab.tp-jaxrswb-swagger1-gen\" description=\"JAX-RS Whiteboard Swagger 1 generator\" version=\"${project.version}\">\n \t\t<details>\n \t\t\tThis feature is currently only for external usage by products and not used by openHAB Core itself.\n \t\t</details>\n-\t\t<capability>openhab.tp;feature=jax-rs-provider-swagger;version=1.1.1</capability>\n-\t\t<feature dependency=\"true\">openhab.tp-jax-rs-min</feature>\n+\t\t<capability>openhab.tp;feature=jaxrswb-swagger1-gen;version=0.0.4</capability>\n+\t\t<bundle>mvn:de.maggu2810.jaxrswb.bundles/jaxrswb-swagger1-gen/0.0.4</bundle>\n+\t\t<feature dependency=\"true\">openhab.tp-jax-rs-whiteboard</feature>\n \t\t<feature dependency=\"true\">openhab.tp-jackson</feature>\n-\t\t<!-- BEG: swagger-jersey2-1.5.8 -->\n-\t\t<feature dependency=\"true\">openhab.tp-kat.cpy-jersey-min-2.22.2</feature>\n-\t\t<bundle>mvn:de.maggu2810.thirdparty.modified.io.swagger/swagger-jersey2-jaxrs/1.5.8.v20160511-1038</bundle>\n-\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-annotations/1.5.8</bundle>\n-\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-core/1.5.8</bundle>\n-\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-jaxrs/1.5.8</bundle>\n-\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-models/1.5.8</bundle>\n-\t\t<bundle dependency=\"true\">mvn:de.maggu2810.thirdparty.modified.org.reflections/reflections/0.9.10.v20160429-1435</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.google.code.findbugs/annotations/2.0.1</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.google.guava/guava/18.0</bundle>\n+\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-jaxrs/1.6.1</bundle>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU0ODA5Mg==", "bodyText": "This property doesn't exist for openhab-core because Swagger is only defined here for the OH distro.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r422548092", "createdAt": "2020-05-09T21:25:40Z", "author": {"login": "wborn"}, "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "diffHunk": "@@ -267,37 +249,25 @@\n \t\t<bundle dependency=\"true\">mvn:org.eclipse.xtext/org.eclipse.xtext.xbase.ide/2.19.0</bundle>\n \t</feature>\n \n-\t<!-- <feature name=\"openhab.tp-swagger-annotations\" description=\"Swagger Annotations\" version=\"${project.version}\"> <bundle dependency=\"true\">mvn:io.swagger/swagger-annotations/1.5.5</bundle> </feature> -->\n-\n-\t<feature name=\"openhab.tp-swagger-jax-rs-provider\" description=\"JAX-RS provider for Swagger integration\" version=\"${project.version}\">\n+\t<feature name=\"openhab.tp-jaxrswb-swagger1-gen\" description=\"JAX-RS Whiteboard Swagger 1 generator\" version=\"${project.version}\">\n \t\t<details>\n \t\t\tThis feature is currently only for external usage by products and not used by openHAB Core itself.\n \t\t</details>\n-\t\t<capability>openhab.tp;feature=jax-rs-provider-swagger;version=1.1.1</capability>\n-\t\t<feature dependency=\"true\">openhab.tp-jax-rs-min</feature>\n+\t\t<capability>openhab.tp;feature=jaxrswb-swagger1-gen;version=0.0.4</capability>\n+\t\t<bundle>mvn:de.maggu2810.jaxrswb.bundles/jaxrswb-swagger1-gen/0.0.4</bundle>\n+\t\t<feature dependency=\"true\">openhab.tp-jax-rs-whiteboard</feature>\n \t\t<feature dependency=\"true\">openhab.tp-jackson</feature>\n-\t\t<!-- BEG: swagger-jersey2-1.5.8 -->\n-\t\t<feature dependency=\"true\">openhab.tp-kat.cpy-jersey-min-2.22.2</feature>\n-\t\t<bundle>mvn:de.maggu2810.thirdparty.modified.io.swagger/swagger-jersey2-jaxrs/1.5.8.v20160511-1038</bundle>\n-\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-annotations/1.5.8</bundle>\n-\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-core/1.5.8</bundle>\n-\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-jaxrs/1.5.8</bundle>\n-\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-models/1.5.8</bundle>\n-\t\t<bundle dependency=\"true\">mvn:de.maggu2810.thirdparty.modified.org.reflections/reflections/0.9.10.v20160429-1435</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.google.code.findbugs/annotations/2.0.1</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.google.guava/guava/18.0</bundle>\n+\t\t<bundle dependency=\"true\">mvn:io.swagger/swagger-jaxrs/1.6.1</bundle>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQ3NTc1OA=="}, "originalCommit": {"oid": "26b5f2bc1b1833ae68d4fc7eeb5fef3c15f2494b"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA5MTg1OnYy", "diffSide": "LEFT", "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0MzoyMVrOGTsozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMjowMTozNlrOGVFElQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNzQ2OA==", "bodyText": "I think it might be good idea to retain openhab.tp-jax-rs just to ship javax.ws.rs package to resolver. After all some of elements might require only annotations or jax-rs client api to be resolved.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r423307468", "createdAt": "2020-05-11T20:43:21Z", "author": {"login": "splatch"}, "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "diffHunk": "@@ -78,31 +78,37 @@\n \t</feature>\n \n \t<feature name=\"openhab.tp-jackson\" description=\"FasterXML Jackson bundles\" version=\"${project.version}\">\n-\t\t<capability>openhab.tp;feature=jackson;version=2.9.10</capability>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-annotations/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-core/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-databind/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.datatype/jackson-datatype-joda/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:org.yaml/snakeyaml/1.23</bundle>\n+\t\t<capability>openhab.tp;feature=jackson;version=2.10.3</capability>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-annotations/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-core/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-databind/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.datatype/jackson-datatype-joda/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:org.yaml/snakeyaml/1.26</bundle>\n \t</feature>\n \n-\t<feature name=\"openhab.tp-jax-rs\" version=\"${project.version}\">\n-\t\t<capability>openhab.tp;feature=jax-rs;version=5.3.1</capability>\n-\t\t<feature>openhab.tp-jax-rs-min</feature>\n-\t</feature>\n-\n-\t<feature name=\"openhab.tp-jax-rs-min\" version=\"${project.version}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc1NjM3Mw==", "bodyText": "Can you explain this use case? The bundle will always be installed because the whiteboard is a dependency of openhab-core-base.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r424756373", "createdAt": "2020-05-13T22:01:36Z", "author": {"login": "wborn"}, "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "diffHunk": "@@ -78,31 +78,37 @@\n \t</feature>\n \n \t<feature name=\"openhab.tp-jackson\" description=\"FasterXML Jackson bundles\" version=\"${project.version}\">\n-\t\t<capability>openhab.tp;feature=jackson;version=2.9.10</capability>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-annotations/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-core/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-databind/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.datatype/jackson-datatype-joda/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.9.10</bundle>\n-\t\t<bundle dependency=\"true\">mvn:org.yaml/snakeyaml/1.23</bundle>\n+\t\t<capability>openhab.tp;feature=jackson;version=2.10.3</capability>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-annotations/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-core/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.core/jackson-databind/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-xml/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.dataformat/jackson-dataformat-yaml/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.datatype/jackson-datatype-joda/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-base/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.jaxrs/jackson-jaxrs-json-provider/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:com.fasterxml.jackson.module/jackson-module-jaxb-annotations/2.10.3</bundle>\n+\t\t<bundle dependency=\"true\">mvn:org.yaml/snakeyaml/1.26</bundle>\n \t</feature>\n \n-\t<feature name=\"openhab.tp-jax-rs\" version=\"${project.version}\">\n-\t\t<capability>openhab.tp;feature=jax-rs;version=5.3.1</capability>\n-\t\t<feature>openhab.tp-jax-rs-min</feature>\n-\t</feature>\n-\n-\t<feature name=\"openhab.tp-jax-rs-min\" version=\"${project.version}\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNzQ2OA=="}, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjEzNzc2OnYy", "diffSide": "RIGHT", "path": "bom/compile/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo1Njo0OFrOGTtFpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMToyODowNlrOGVEKyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxNDg1Mw==", "bodyText": "Maven central dependency which serves this API is javax.ws.rs:javax.ws.rs-api. Is there any reason for not using it for compilation?", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r423314853", "createdAt": "2020-05-11T20:56:48Z", "author": {"login": "splatch"}, "path": "bom/compile/pom.xml", "diffHunk": "@@ -238,11 +230,17 @@\n       <scope>compile</scope>\n     </dependency>\n \n-    <!-- Servlet API -->\n+    <!-- Servlet and JAX-RS API -->\n+    <dependency>\n+      <groupId>org.apache.felix</groupId>\n+      <artifactId>org.apache.felix.http.servlet-api</artifactId>\n+      <version>1.1.2</version>\n+      <scope>compile</scope>\n+    </dependency>\n     <dependency>\n-      <groupId>javax.servlet</groupId>\n-      <artifactId>javax.servlet-api</artifactId>\n-      <version>3.1.0</version>\n+      <groupId>org.apache.aries.spec</groupId>\n+      <artifactId>org.apache.aries.javax.jax.rs-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDc0MTU3OQ==", "bodyText": "It's the same artifact as used by the whiteboard features. It's possible code compiles with one but not the other. When that's the case I think it says more if it does or doesn't compile with the Aries artifact. I think keeping track of versions will also be easier with the Aries artifact.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r424741579", "createdAt": "2020-05-13T21:28:06Z", "author": {"login": "wborn"}, "path": "bom/compile/pom.xml", "diffHunk": "@@ -238,11 +230,17 @@\n       <scope>compile</scope>\n     </dependency>\n \n-    <!-- Servlet API -->\n+    <!-- Servlet and JAX-RS API -->\n+    <dependency>\n+      <groupId>org.apache.felix</groupId>\n+      <artifactId>org.apache.felix.http.servlet-api</artifactId>\n+      <version>1.1.2</version>\n+      <scope>compile</scope>\n+    </dependency>\n     <dependency>\n-      <groupId>javax.servlet</groupId>\n-      <artifactId>javax.servlet-api</artifactId>\n-      <version>3.1.0</version>\n+      <groupId>org.apache.aries.spec</groupId>\n+      <artifactId>org.apache.aries.javax.jax.rs-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxNDg1Mw=="}, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODE4MTQ3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.swagger1/.project", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxMzoyN1rOGVjycw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjozNzowOFrOGVk3wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1OTYzNQ==", "bodyText": "Will we also have ever a swagger2 in parallel? If not, I'd prefer to simply call the bundle \"swagger\" here.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425259635", "createdAt": "2020-05-14T16:13:27Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.io.rest.swagger1/.project", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <projectDescription>\n-\t<name>org.openhab.core.io.rest.optimize</name>\n+\t<name>org.openhab.core.io.rest.swagger1</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3NzM3Ng==", "bodyText": "It's not likely so I'll update it.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425277376", "createdAt": "2020-05-14T16:37:08Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.swagger1/.project", "diffHunk": "@@ -1,6 +1,6 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <projectDescription>\n-\t<name>org.openhab.core.io.rest.optimize</name>\n+\t<name>org.openhab.core.io.rest.swagger1</name>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI1OTYzNQ=="}, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODE4NDUzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.swagger1/src/main/java/org/openhab/core/io/rest/swagger1/impl/RESTResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNDowNVrOGVj0XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNDowNVrOGVj0XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MDEyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * An endpoint to generate and provide an Swagger 1 description.\n          \n          \n            \n             * An endpoint to generate and provide a Swagger 1 description.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425260124", "createdAt": "2020-05-14T16:14:05Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.io.rest.swagger1/src/main/java/org/openhab/core/io/rest/swagger1/impl/RESTResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.swagger1.impl;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.io.rest.RESTConstants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ServiceScope;\n+import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JSONRequired;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import de.maggu2810.jaxrswb.swagger1.gen.JaxRsWhiteboardSwaggerGenerator;\n+\n+/**\n+ * An endpoint to generate and provide an Swagger 1 description.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODE4NzE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.swagger1/src/main/java/org/openhab/core/io/rest/swagger1/impl/RESTResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNDozNlrOGVj17Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoxNDozNlrOGVj17Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2MDUyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @return an Swagger 1 description of the endpoints\n          \n          \n            \n                 * @return a Swagger 1 description of the endpoints", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425260525", "createdAt": "2020-05-14T16:14:36Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.io.rest.swagger1/src/main/java/org/openhab/core/io/rest/swagger1/impl/RESTResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.swagger1.impl;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.io.rest.RESTConstants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ServiceScope;\n+import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JSONRequired;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import de.maggu2810.jaxrswb.swagger1.gen.JaxRsWhiteboardSwaggerGenerator;\n+\n+/**\n+ * An endpoint to generate and provide an Swagger 1 description.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+@Component(service = { RESTResource.class }, scope = ServiceScope.PROTOTYPE)\n+@JaxrsResource\n+@JaxrsApplicationSelect(\"(\" + JaxrsWhiteboardConstants.JAX_RS_NAME + \"=\" + RESTConstants.JAX_RS_NAME + \")\")\n+@JSONRequired\n+@Path(\"/swagger.json\")\n+@NonNullByDefault\n+public class RESTResource {\n+\n+    private final Logger logger = LoggerFactory.getLogger(RESTResource.class);\n+    private final JaxRsWhiteboardSwaggerGenerator generator;\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param generator the generator\n+     */\n+    @Activate\n+    public RESTResource(final @Reference JaxRsWhiteboardSwaggerGenerator generator) {\n+        this.generator = generator;\n+    }\n+\n+    /**\n+     * Gets the current JAX-RS Whiteboard provided endpoint information by Swagger 1.\n+     *\n+     * @return an Swagger 1 description of the endpoints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODIzMzMwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest/src/main/java/org/openhab/core/io/rest/internal/RESTApplicationImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyNDoyNFrOGVkTWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyNDoyNFrOGVkTWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2ODA1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"servlet.init.hide-service-list-page=true\" //\n          \n          \n            \n                    \"servlet.init.hide-service-list-page=true\"", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425268058", "createdAt": "2020-05-14T16:24:24Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.io.rest/src/main/java/org/openhab/core/io/rest/internal/RESTApplicationImpl.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.internal;\n+\n+import javax.ws.rs.core.Application;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.io.rest.RESTConstants;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationBase;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsName;\n+\n+/**\n+ * The JAX-RS application for the openHAB JAX-RS resources.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+@Component(service = Application.class, property = {\n+        // https://lists.apache.org/thread.html/\n+        // r1379789bd90c6b7e3971d5ffeedb2e0d1e1c9103fd2392cb95458596%40%3Cuser.aries.apache.org%3E\n+        \"servlet.init.hide-service-list-page=true\" //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODI0MDA1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest/src/main/java/org/openhab/core/io/rest/internal/resources/RootResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyNToyOVrOGVkX9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyNToyOVrOGVkX9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI2OTIzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = RootResource.class, configurationPid = \"org.openhab.restroot\" // , scope = ServiceScope.PROTOTYPE\n          \n          \n            \n            @Component(service = RootResource.class, configurationPid = \"org.openhab.restroot\"", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425269236", "createdAt": "2020-05-14T16:25:29Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.io.rest/src/main/java/org/openhab/core/io/rest/internal/resources/RootResource.java", "diffHunk": "@@ -52,82 +58,62 @@\n  * The result is returned as JSON\n  *\n  * @author Kai Kreuzer - Initial contribution\n+ * @author Markus Rathgeb - Migrated to JAX-RS Whiteboard Specification\n  */\n+@Component(service = RootResource.class, configurationPid = \"org.openhab.restroot\" // , scope = ServiceScope.PROTOTYPE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODI1MDI0OnYy", "diffSide": "RIGHT", "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyNzoxOFrOGVkebQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNjoyNzoxOFrOGVkebQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTI3MDg5Mw==", "bodyText": "dito: \"swagger\" should be enough", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425270893", "createdAt": "2020-05-14T16:27:18Z", "author": {"login": "kaikreuzer"}, "path": "features/karaf/openhab-tp/src/main/feature/feature.xml", "diffHunk": "@@ -267,37 +249,25 @@\n \t\t<bundle dependency=\"true\">mvn:org.eclipse.xtext/org.eclipse.xtext.xbase.ide/2.19.0</bundle>\n \t</feature>\n \n-\t<!-- <feature name=\"openhab.tp-swagger-annotations\" description=\"Swagger Annotations\" version=\"${project.version}\"> <bundle dependency=\"true\">mvn:io.swagger/swagger-annotations/1.5.5</bundle> </feature> -->\n-\n-\t<feature name=\"openhab.tp-swagger-jax-rs-provider\" description=\"JAX-RS provider for Swagger integration\" version=\"${project.version}\">\n+\t<feature name=\"openhab.tp-jaxrswb-swagger1-gen\" description=\"JAX-RS Whiteboard Swagger 1 generator\" version=\"${project.version}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bdf8166e3ac0eb5ab4ccedd3cb0e8d4d5a3c7df"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODc4NTU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo1MTozNFrOGVp4zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo0NzozN1rOGVrs9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1OTU2Nw==", "bodyText": "Remove org.apache.commons.io.IOUtilsfrom imports:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        IOUtils.copy((InputStream) object, entityStream);\n          \n          \n            \n                        ((InputStream) object).transferTo(entityStream);", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425359567", "createdAt": "2020-05-14T18:51:34Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyWriter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n+import javax.ws.rs.ext.MessageBodyWriter;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.openhab.core.io.rest.JSONInputStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * A message body writer for JSON using GSON.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public class GsonMessageBodyWriter<T> implements MessageBodyWriter<T> {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GsonMessageBodyWriter.class);\n+\n+    private final Gson gson;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param gson the GSON object to use\n+     */\n+    public GsonMessageBodyWriter(final Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public long getSize(final T object, final Class<?> type, final Type genericType, final Annotation[] annotations,\n+            final MediaType mediaType) {\n+        return -1;\n+    }\n+\n+    @Override\n+    public boolean isWriteable(final Class<?> type, final Type genericType, final Annotation[] annotations,\n+            final MediaType mediaType) {\n+        return true;\n+    }\n+\n+    @Override\n+    public void writeTo(final T object, final Class<?> type, final Type genericType, final Annotation[] annotations,\n+            final MediaType mediaType, final MultivaluedMap<String, Object> httpHeaders,\n+            final OutputStream entityStream) throws IOException, WebApplicationException {\n+        if (object == null) {\n+            return;\n+        }\n+\n+        // Log a message if a response builder is received.\n+        if (object instanceof ResponseBuilder) {\n+            logger.error(\n+                    \"A REST endpoint returns a ResponseBuilder object. This is mostly wrong and the call to \\\"build()\\\" is missing. Please report or fix it. Got: {}\",\n+                    object);\n+        }\n+\n+        if (object instanceof InputStream && object instanceof JSONInputStream) {\n+            IOUtils.copy((InputStream) object, entityStream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b092113fd3dda43f8d46c729021da88c050221ee"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4NTk1OA==", "bodyText": "I didn't know that one yet. \ud83d\udc4d", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425385958", "createdAt": "2020-05-14T19:41:32Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyWriter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n+import javax.ws.rs.ext.MessageBodyWriter;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.openhab.core.io.rest.JSONInputStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * A message body writer for JSON using GSON.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public class GsonMessageBodyWriter<T> implements MessageBodyWriter<T> {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GsonMessageBodyWriter.class);\n+\n+    private final Gson gson;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param gson the GSON object to use\n+     */\n+    public GsonMessageBodyWriter(final Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public long getSize(final T object, final Class<?> type, final Type genericType, final Annotation[] annotations,\n+            final MediaType mediaType) {\n+        return -1;\n+    }\n+\n+    @Override\n+    public boolean isWriteable(final Class<?> type, final Type genericType, final Annotation[] annotations,\n+            final MediaType mediaType) {\n+        return true;\n+    }\n+\n+    @Override\n+    public void writeTo(final T object, final Class<?> type, final Type genericType, final Annotation[] annotations,\n+            final MediaType mediaType, final MultivaluedMap<String, Object> httpHeaders,\n+            final OutputStream entityStream) throws IOException, WebApplicationException {\n+        if (object == null) {\n+            return;\n+        }\n+\n+        // Log a message if a response builder is received.\n+        if (object instanceof ResponseBuilder) {\n+            logger.error(\n+                    \"A REST endpoint returns a ResponseBuilder object. This is mostly wrong and the call to \\\"build()\\\" is missing. Please report or fix it. Got: {}\",\n+                    object);\n+        }\n+\n+        if (object instanceof InputStream && object instanceof JSONInputStream) {\n+            IOUtils.copy((InputStream) object, entityStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1OTU2Nw=="}, "originalCommit": {"oid": "b092113fd3dda43f8d46c729021da88c050221ee"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM4OTMwMw==", "bodyText": "Me neither. I discovered it during #1441. It has been introduced with JDK 9.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425389303", "createdAt": "2020-05-14T19:47:37Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.core/src/main/java/org/openhab/core/io/rest/core/internal/GsonMessageBodyWriter.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.core.internal;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.nio.charset.StandardCharsets;\n+\n+import javax.ws.rs.WebApplicationException;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n+import javax.ws.rs.ext.MessageBodyWriter;\n+\n+import org.apache.commons.io.IOUtils;\n+import org.openhab.core.io.rest.JSONInputStream;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+\n+/**\n+ * A message body writer for JSON using GSON.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+public class GsonMessageBodyWriter<T> implements MessageBodyWriter<T> {\n+\n+    private final Logger logger = LoggerFactory.getLogger(GsonMessageBodyWriter.class);\n+\n+    private final Gson gson;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param gson the GSON object to use\n+     */\n+    public GsonMessageBodyWriter(final Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    @Override\n+    public long getSize(final T object, final Class<?> type, final Type genericType, final Annotation[] annotations,\n+            final MediaType mediaType) {\n+        return -1;\n+    }\n+\n+    @Override\n+    public boolean isWriteable(final Class<?> type, final Type genericType, final Annotation[] annotations,\n+            final MediaType mediaType) {\n+        return true;\n+    }\n+\n+    @Override\n+    public void writeTo(final T object, final Class<?> type, final Type genericType, final Annotation[] annotations,\n+            final MediaType mediaType, final MultivaluedMap<String, Object> httpHeaders,\n+            final OutputStream entityStream) throws IOException, WebApplicationException {\n+        if (object == null) {\n+            return;\n+        }\n+\n+        // Log a message if a response builder is received.\n+        if (object instanceof ResponseBuilder) {\n+            logger.error(\n+                    \"A REST endpoint returns a ResponseBuilder object. This is mostly wrong and the call to \\\"build()\\\" is missing. Please report or fix it. Got: {}\",\n+                    object);\n+        }\n+\n+        if (object instanceof InputStream && object instanceof JSONInputStream) {\n+            IOUtils.copy((InputStream) object, entityStream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM1OTU2Nw=="}, "originalCommit": {"oid": "b092113fd3dda43f8d46c729021da88c050221ee"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODgxMzk2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.sse/src/main/java/org/openhab/core/io/rest/sse/SseResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo1OTo0MlrOGVqLBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxODo1OTo0MlrOGVqLBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2NDIyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = SsePublisher.class/* , scope = ServiceScope.PROTOTYPE */)\n          \n          \n            \n            @Component(service = SsePublisher.class)", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425364228", "createdAt": "2020-05-14T18:59:42Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.sse/src/main/java/org/openhab/core/io/rest/sse/SseResource.java", "diffHunk": "@@ -63,75 +74,69 @@\n  * @author Ivan Iliev - Initial contribution\n  * @author Yordan Zhelev - Added Swagger annotations\n  * @author Yannick Schaus - Add endpoints to track item state updates\n+ * @author Markus Rathgeb - Drop Glassfish dependency and use API only\n+ * @author Wouter Born - Rework SSE item state sinks for dropping Glassfish\n  */\n-@Component(immediate = true, service = SseResource.class)\n+@Component(service = SsePublisher.class/* , scope = ServiceScope.PROTOTYPE */)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b092113fd3dda43f8d46c729021da88c050221ee"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0ODg0MjI1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.swagger/src/main/java/org/openhab/core/io/rest/swagger/impl/RESTResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTowODowOFrOGVqdHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxOTo1NzoyMlrOGVsB_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2ODg2MA==", "bodyText": "Do we need the ServiceScope here? You removed it everywhere else.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @Component(service = { RESTResource.class }, scope = ServiceScope.PROTOTYPE)\n          \n          \n            \n            @Component(service = RESTResource.class)", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425368860", "createdAt": "2020-05-14T19:08:08Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.swagger/src/main/java/org/openhab/core/io/rest/swagger/impl/RESTResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.swagger.impl;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.io.rest.RESTConstants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ServiceScope;\n+import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JSONRequired;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import de.maggu2810.jaxrswb.swagger1.gen.JaxRsWhiteboardSwaggerGenerator;\n+\n+/**\n+ * An endpoint to generate and provide a Swagger 1 description.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+@Component(service = { RESTResource.class }, scope = ServiceScope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b092113fd3dda43f8d46c729021da88c050221ee"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5MDU5MQ==", "bodyText": "It's explained in the whiteboard resource lifecycle. To me it seems that using a prototype scope may be overkill and also causes more overhead.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425390591", "createdAt": "2020-05-14T19:50:06Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.swagger/src/main/java/org/openhab/core/io/rest/swagger/impl/RESTResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.swagger.impl;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.io.rest.RESTConstants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ServiceScope;\n+import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JSONRequired;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import de.maggu2810.jaxrswb.swagger1.gen.JaxRsWhiteboardSwaggerGenerator;\n+\n+/**\n+ * An endpoint to generate and provide a Swagger 1 description.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+@Component(service = { RESTResource.class }, scope = ServiceScope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2ODg2MA=="}, "originalCommit": {"oid": "b092113fd3dda43f8d46c729021da88c050221ee"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM5NDY4Nw==", "bodyText": "Everything still seems to work without it so I'll remove it here as well.", "url": "https://github.com/openhab/openhab-core/pull/1443#discussion_r425394687", "createdAt": "2020-05-14T19:57:22Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.rest.swagger/src/main/java/org/openhab/core/io/rest/swagger/impl/RESTResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.io.rest.swagger.impl;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.openhab.core.io.rest.RESTConstants;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ServiceScope;\n+import org.osgi.service.jaxrs.whiteboard.JaxrsWhiteboardConstants;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JSONRequired;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsApplicationSelect;\n+import org.osgi.service.jaxrs.whiteboard.propertytypes.JaxrsResource;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import de.maggu2810.jaxrswb.swagger1.gen.JaxRsWhiteboardSwaggerGenerator;\n+\n+/**\n+ * An endpoint to generate and provide a Swagger 1 description.\n+ *\n+ * @author Markus Rathgeb - Initial contribution\n+ */\n+@Component(service = { RESTResource.class }, scope = ServiceScope.PROTOTYPE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTM2ODg2MA=="}, "originalCommit": {"oid": "b092113fd3dda43f8d46c729021da88c050221ee"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3379, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}