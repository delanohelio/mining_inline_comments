{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MDE1NzY5", "number": 1700, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTo1NTo0OFrOErVbqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzowMToyNVrOEreT1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODc1MzY5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTo1NTo0OFrOHeDPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTowMTo1NlrOHeFZtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MjM0MA==", "bodyText": "This JavaDoc still needs to be updated for the latest changes.", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501272340", "createdAt": "2020-10-07T19:55:48Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -28,87 +35,101 @@\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n+ * @author Connor Petty - rewrote\n  */\n+@NonNullByDefault\n public class ExecUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(ExecUtil.class);\n \n-    /**\n-     * Use this to separate between command and parameter, and also between parameters.\n-     */\n-    public static final String CMD_LINE_DELIMITER = \"@@\";\n+    private static ExecutorService executor = ThreadPoolManager.getPool(\"ExecUtil\");\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code>. Sometimes (especially observed on MacOS) the commandLine isn't executed\n-     * properly. In that cases another exec-method is to be used. To accomplish this please use the special delimiter\n-     * '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a String list and the\n-     * special exec-method is used.\n+     * Executes <code>commandLine</code>.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n      * @param commandLine the command line to execute\n      */\n-    public static void executeCommandLine(String commandLine) {\n-        internalExecute(commandLine);\n+    public static void executeCommandLine(String... commandLine) {\n+        try {\n+            new ProcessBuilder(commandLine).redirectError(Redirect.DISCARD).redirectOutput(Redirect.DISCARD).start();\n+        } catch (IOException e) {\n+            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e);\n+        }\n     }\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code> and return its result. Sometimes (especially observed on MacOS) the commandLine\n-     * isn't executed properly. In that cases another exec-method is to be used. To accomplish this please use the\n-     * special delimiter '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a\n-     * String list and the special exec-method is used.\n+     * Executes <code>commandLine</code> and return its result.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n+     * @param timeout timeout for execution in milliseconds, 0 to wait indefinitely", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f467089103cd0450cc24becf177fd8b91154ac1d"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzgzMQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501307831", "createdAt": "2020-10-07T21:01:56Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -28,87 +35,101 @@\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n+ * @author Connor Petty - rewrote\n  */\n+@NonNullByDefault\n public class ExecUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(ExecUtil.class);\n \n-    /**\n-     * Use this to separate between command and parameter, and also between parameters.\n-     */\n-    public static final String CMD_LINE_DELIMITER = \"@@\";\n+    private static ExecutorService executor = ThreadPoolManager.getPool(\"ExecUtil\");\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code>. Sometimes (especially observed on MacOS) the commandLine isn't executed\n-     * properly. In that cases another exec-method is to be used. To accomplish this please use the special delimiter\n-     * '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a String list and the\n-     * special exec-method is used.\n+     * Executes <code>commandLine</code>.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n      * @param commandLine the command line to execute\n      */\n-    public static void executeCommandLine(String commandLine) {\n-        internalExecute(commandLine);\n+    public static void executeCommandLine(String... commandLine) {\n+        try {\n+            new ProcessBuilder(commandLine).redirectError(Redirect.DISCARD).redirectOutput(Redirect.DISCARD).start();\n+        } catch (IOException e) {\n+            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e);\n+        }\n     }\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code> and return its result. Sometimes (especially observed on MacOS) the commandLine\n-     * isn't executed properly. In that cases another exec-method is to be used. To accomplish this please use the\n-     * special delimiter '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a\n-     * String list and the special exec-method is used.\n+     * Executes <code>commandLine</code> and return its result.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n+     * @param timeout timeout for execution in milliseconds, 0 to wait indefinitely", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MjM0MA=="}, "originalCommit": {"oid": "f467089103cd0450cc24becf177fd8b91154ac1d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzODc1NDcyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxOTo1NjowOVrOHeDPxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QyMTowMjowMVrOHeFZ4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MjUxNg==", "bodyText": "Can you  be a bit more specific?", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501272516", "createdAt": "2020-10-07T19:56:09Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -28,87 +35,101 @@\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n+ * @author Connor Petty - rewrote", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f467089103cd0450cc24becf177fd8b91154ac1d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTMwNzg3NQ==", "bodyText": "done", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501307875", "createdAt": "2020-10-07T21:02:01Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -28,87 +35,101 @@\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n+ * @author Connor Petty - rewrote", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTI3MjUxNg=="}, "originalCommit": {"oid": "f467089103cd0450cc24becf177fd8b91154ac1d"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDIwODIwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzowMToyNVrOHeQibg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozNDozMVrOHekebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5MDI4Ng==", "bodyText": "The timeout is only used when it is not null:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param timeout the max time to wait for a process to finish, 0 to wait indefinitely\n          \n          \n            \n                 * @param timeout the max time to wait for a process to finish, null to wait indefinitely", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501490286", "createdAt": "2020-10-08T07:01:25Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -28,87 +35,101 @@\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n+ * @author Connor Petty - replaced delimiter usage with argument array\n  */\n+@NonNullByDefault\n public class ExecUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(ExecUtil.class);\n \n-    /**\n-     * Use this to separate between command and parameter, and also between parameters.\n-     */\n-    public static final String CMD_LINE_DELIMITER = \"@@\";\n+    private static ExecutorService executor = ThreadPoolManager.getPool(\"ExecUtil\");\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code>. Sometimes (especially observed on MacOS) the commandLine isn't executed\n-     * properly. In that cases another exec-method is to be used. To accomplish this please use the special delimiter\n-     * '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a String list and the\n-     * special exec-method is used.\n+     * Executes <code>commandLine</code>.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n      * @param commandLine the command line to execute\n      */\n-    public static void executeCommandLine(String commandLine) {\n-        internalExecute(commandLine);\n+    public static void executeCommandLine(String... commandLine) {\n+        try {\n+            new ProcessBuilder(commandLine).redirectError(Redirect.DISCARD).redirectOutput(Redirect.DISCARD).start();\n+        } catch (IOException e) {\n+            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e);\n+        }\n     }\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code> and return its result. Sometimes (especially observed on MacOS) the commandLine\n-     * isn't executed properly. In that cases another exec-method is to be used. To accomplish this please use the\n-     * special delimiter '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a\n-     * String list and the special exec-method is used.\n+     * Executes <code>commandLine</code> and return its result.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n+     * @param timeout the max time to wait for a process to finish, 0 to wait indefinitely", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a47bcd6540ae3d50cfdecf7188dd1bb18d1c3a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxNjk0Mw==", "bodyText": "oof, forgot that one.\nFixed", "url": "https://github.com/openhab/openhab-core/pull/1700#discussion_r501816943", "createdAt": "2020-10-08T15:34:31Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.io.net/src/main/java/org/openhab/core/io/net/exec/ExecUtil.java", "diffHunk": "@@ -28,87 +35,101 @@\n  *\n  * @author Pauli Anttila - Initial contribution\n  * @author Kai Kreuzer - added exception logging\n+ * @author Connor Petty - replaced delimiter usage with argument array\n  */\n+@NonNullByDefault\n public class ExecUtil {\n \n     private static Logger logger = LoggerFactory.getLogger(ExecUtil.class);\n \n-    /**\n-     * Use this to separate between command and parameter, and also between parameters.\n-     */\n-    public static final String CMD_LINE_DELIMITER = \"@@\";\n+    private static ExecutorService executor = ThreadPoolManager.getPool(\"ExecUtil\");\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code>. Sometimes (especially observed on MacOS) the commandLine isn't executed\n-     * properly. In that cases another exec-method is to be used. To accomplish this please use the special delimiter\n-     * '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a String list and the\n-     * special exec-method is used.\n+     * Executes <code>commandLine</code>.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n      * @param commandLine the command line to execute\n      */\n-    public static void executeCommandLine(String commandLine) {\n-        internalExecute(commandLine);\n+    public static void executeCommandLine(String... commandLine) {\n+        try {\n+            new ProcessBuilder(commandLine).redirectError(Redirect.DISCARD).redirectOutput(Redirect.DISCARD).start();\n+        } catch (IOException e) {\n+            logger.warn(\"Error occurred when executing commandLine '{}'\", commandLine, e);\n+        }\n     }\n \n     /**\n      * <p>\n-     * Executes <code>commandLine</code> and return its result. Sometimes (especially observed on MacOS) the commandLine\n-     * isn't executed properly. In that cases another exec-method is to be used. To accomplish this please use the\n-     * special delimiter '<code>@@</code>'. If <code>commandLine</code> contains this delimiter it is split into a\n-     * String list and the special exec-method is used.\n+     * Executes <code>commandLine</code> and return its result.\n      *\n      * <p>\n      * A possible {@link IOException} gets logged but no further processing is done.\n      *\n+     * @param timeout the max time to wait for a process to finish, 0 to wait indefinitely", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTQ5MDI4Ng=="}, "originalCommit": {"oid": "c7a47bcd6540ae3d50cfdecf7188dd1bb18d1c3a"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3365, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}