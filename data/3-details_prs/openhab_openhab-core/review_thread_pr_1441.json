{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NTI1MDgx", "number": 1441, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozNDowM1rOD09WvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxMzoyN1rOD6yHRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODU3Nzg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.id/src/main/java/org/openhab/core/id/InstanceUUID.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozNDowM1rOGKKb2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozNDowM1rOGKKb2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwOTkxMw==", "bodyText": "We only need the first line. Could be changed to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final List<String> lines = Files.readAllLines(file.toPath(), StandardCharsets.UTF_8);\n          \n          \n            \n                        return lines.isEmpty() ? \"\" : lines.get(0);\n          \n          \n            \n                        final BufferedReader reader = Files.newBufferedReader(file.toPath());\n          \n          \n            \n                        return reader.readLine();", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r413309913", "createdAt": "2020-04-22T20:34:03Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.id/src/main/java/org/openhab/core/id/InstanceUUID.java", "diffHunk": "@@ -75,19 +73,21 @@ public static synchronized String get() {\n     private static void writeFile(File file, String content) throws IOException {\n         // create intermediary directories\n         file.getParentFile().mkdirs();\n-        try (OutputStream outputStream = new FileOutputStream(file)) {\n-            IOUtils.write(content, outputStream);\n+        try {\n+            Files.writeString(file.toPath(), content, StandardCharsets.UTF_8);\n+        } catch (IOException ioe) {\n+            LOGGER.warn(\"Failed writing to file '{}': {}\", content, file.getAbsolutePath(), ioe.getMessage());\n         }\n     }\n \n     private static String readFirstLine(File file) {\n-        List<String> lines = null;\n         try {\n-            lines = IOUtils.readLines(new FileInputStream(file));\n+            final List<String> lines = Files.readAllLines(file.toPath(), StandardCharsets.UTF_8);\n+            return lines.isEmpty() ? \"\" : lines.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7ec179d251a0a5fcfc83dc0b51b7f316aa1a6e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODU4MzI3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.auth/src/main/java/org/openhab/core/io/rest/auth/internal/JwtHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozNToyOVrOGKKfFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozNToyOVrOGKKfFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxMDc0Mg==", "bodyText": "We only need the first line. Could be changed to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        List<String> lines = Files.readAllLines(file.toPath(), StandardCharsets.UTF_8);\n          \n          \n            \n                        return (RsaJsonWebKey) JsonWebKey.Factory.newJwk(lines.get(0));\n          \n          \n            \n                        final BufferedReader reader = Files.newBufferedReader(file.toPath());\n          \n          \n            \n                        return (RsaJsonWebKey) JsonWebKey.Factory.newJwk(reader.readLine());", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r413310742", "createdAt": "2020-04-22T20:35:29Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.io.rest.auth/src/main/java/org/openhab/core/io/rest/auth/internal/JwtHelper.java", "diffHunk": "@@ -78,13 +77,14 @@ private RsaJsonWebKey generateNewKey() throws JoseException, FileNotFoundExcepti\n \n         String keyJson = newKey.toJson(OutputControlLevel.INCLUDE_PRIVATE);\n \n-        IOUtils.write(keyJson, new FileOutputStream(file));\n+        Files.writeString(file.toPath(), keyJson, StandardCharsets.UTF_8);\n         return newKey;\n     }\n \n     private RsaJsonWebKey loadOrGenerateKey() throws FileNotFoundException, JoseException, IOException {\n         try {\n-            List<String> lines = IOUtils.readLines(new FileInputStream(KEY_FILE_PATH));\n+            File file = new File(KEY_FILE_PATH);\n+            List<String> lines = Files.readAllLines(file.toPath(), StandardCharsets.UTF_8);\n             return (RsaJsonWebKey) JsonWebKey.Factory.newJwk(lines.get(0));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7ec179d251a0a5fcfc83dc0b51b7f316aa1a6e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODU5Njk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.config.dispatch/src/main/java/org/openhab/core/config/dispatch/internal/ConfigDispatcher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDozODo1N1rOGKKnew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxMTo0OToyOVrOGP84YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxMjg5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    List<String> lines = Files.readAllLines(configFile.toPath(), StandardCharsets.UTF_8);\n          \n          \n            \n                    String exclusivePID = lines.size() > 0 ? getPIDFromLine(lines.get(0)) : null;\n          \n          \n            \n                    final BufferedReader reader = Files.newBufferedReader(configFile.toPath());\n          \n          \n            \n                    String exclusivePID = getPIDFromLine(reader.readLine());", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r413312891", "createdAt": "2020-04-22T20:38:57Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.config.dispatch/src/main/java/org/openhab/core/config/dispatch/internal/ConfigDispatcher.java", "diffHunk": "@@ -300,7 +300,7 @@ private void internalProcessConfigFile(File configFile) throws IOException, File\n         String context = null;\n \n         // configuration file contains a PID Marker\n-        List<String> lines = IOUtils.readLines(new FileInputStream(configFile));\n+        List<String> lines = Files.readAllLines(configFile.toPath(), StandardCharsets.UTF_8);\n         String exclusivePID = lines.size() > 0 ? getPIDFromLine(lines.get(0)) : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7ec179d251a0a5fcfc83dc0b51b7f316aa1a6e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExNDQ5OQ==", "bodyText": "all lines are required later (line 359)", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r419114499", "createdAt": "2020-05-03T14:52:59Z", "author": {"login": "Legion2"}, "path": "bundles/org.openhab.core.config.dispatch/src/main/java/org/openhab/core/config/dispatch/internal/ConfigDispatcher.java", "diffHunk": "@@ -300,7 +300,7 @@ private void internalProcessConfigFile(File configFile) throws IOException, File\n         String context = null;\n \n         // configuration file contains a PID Marker\n-        List<String> lines = IOUtils.readLines(new FileInputStream(configFile));\n+        List<String> lines = Files.readAllLines(configFile.toPath(), StandardCharsets.UTF_8);\n         String exclusivePID = lines.size() > 0 ? getPIDFromLine(lines.get(0)) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxMjg5MQ=="}, "originalCommit": {"oid": "bf7ec179d251a0a5fcfc83dc0b51b7f316aa1a6e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTM3OTI5Nw==", "bodyText": "Correct. Thanks for the hint.", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r419379297", "createdAt": "2020-05-04T11:49:29Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.config.dispatch/src/main/java/org/openhab/core/config/dispatch/internal/ConfigDispatcher.java", "diffHunk": "@@ -300,7 +300,7 @@ private void internalProcessConfigFile(File configFile) throws IOException, File\n         String context = null;\n \n         // configuration file contains a PID Marker\n-        List<String> lines = IOUtils.readLines(new FileInputStream(configFile));\n+        List<String> lines = Files.readAllLines(configFile.toPath(), StandardCharsets.UTF_8);\n         String exclusivePID = lines.size() > 0 ? getPIDFromLine(lines.get(0)) : null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxMjg5MQ=="}, "originalCommit": {"oid": "bf7ec179d251a0a5fcfc83dc0b51b7f316aa1a6e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODYwOTA5OnYy", "diffSide": "RIGHT", "path": "itests/org.openhab.core.config.dispatch.tests/src/main/java/org/openhab/core/config/dispatch/internal/ConfigDispatcherOSGiTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDo0MTo0OVrOGKKukw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDo0MTo0OVrOGKKukw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMxNDcwNw==", "bodyText": "Could be changed to Files.lines(file.toPath()).foreach(...)", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r413314707", "createdAt": "2020-04-22T20:41:49Z", "author": {"login": "cweitkamp"}, "path": "itests/org.openhab.core.config.dispatch.tests/src/main/java/org/openhab/core/config/dispatch/internal/ConfigDispatcherOSGiTest.java", "diffHunk": "@@ -1028,22 +1029,22 @@ private void verifyNoPropertiesForConfiguration(String pid) {\n     }\n \n     private void truncateLastLine(File file) throws IOException {\n-        List<String> lines = IOUtils.readLines(new FileInputStream(file));\n-        IOUtils.writeLines(lines.subList(0, lines.size() - 1), \"\\n\", new FileOutputStream(file));\n+        final Path path = file.toPath();\n+        List<String> lines = Files.readAllLines(path, StandardCharsets.UTF_8);\n+        Files.writeString(path, lines.subList(0, lines.size() - 1).stream().collect(Collectors.joining(\"\\n\")),\n+                StandardCharsets.UTF_8);\n     }\n \n     private String getLastModifiedValueForPoperty(String path, String property) {\n-        // This method will return null, if there are no files in the directory.\n-        final String separator = property + \"=\";\n-        String value = null;\n-\n         File file = getLastModifiedFileFromDir(path);\n         if (file == null) {\n             return null;\n         }\n-        try (FileInputStream fileInputStream = new FileInputStream(file)) {\n-            List<String> lines = IOUtils.readLines(fileInputStream);\n-            for (String line : lines) {\n+        // This method will return null, if there are no files in the directory.\n+        final String separator = property + \"=\";\n+        String value = null;\n+        try {\n+            for (String line : Files.readAllLines(file.toPath(), StandardCharsets.UTF_8)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf7ec179d251a0a5fcfc83dc0b51b7f316aa1a6e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDA4ODAwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.id/src/main/java/org/openhab/core/id/InstanceUUID.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNjoyMTo0MlrOGLxN0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQwNjoyMTo0MlrOGLxN0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDk5Mzg3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOGGER.warn(\"Failed writing to file '{}': {}\", content, file.getAbsolutePath(), ioe.getMessage());\n          \n          \n            \n                        LOGGER.warn(\"Failed writing to file '{}': {}\", file.getAbsolutePath(), ioe.getMessage());", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r414993873", "createdAt": "2020-04-25T06:21:42Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.id/src/main/java/org/openhab/core/id/InstanceUUID.java", "diffHunk": "@@ -75,19 +73,21 @@ public static synchronized String get() {\n     private static void writeFile(File file, String content) throws IOException {\n         // create intermediary directories\n         file.getParentFile().mkdirs();\n-        try (OutputStream outputStream = new FileOutputStream(file)) {\n-            IOUtils.write(content, outputStream);\n+        try {\n+            Files.writeString(file.toPath(), content, StandardCharsets.UTF_8);\n+        } catch (IOException ioe) {\n+            LOGGER.warn(\"Failed writing to file '{}': {}\", content, file.getAbsolutePath(), ioe.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98381499addd951126d8ec9cebf35e75b1d1372"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTcyNTUwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/URLAudioStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzowNTozN1rOGRogdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzowNTozN1rOGRogdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0MjY0NA==", "bodyText": "Converting urls to files can cause a lot of problems if the urls don't have the right schema so create the path from a URI instead.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for (final String line : Files.readAllLines(new File(url).toPath())) {\n          \n          \n            \n                                for (final String line : Files.readAllLines(Paths.get(URI.create(url)))) {", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r421142644", "createdAt": "2020-05-06T23:05:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/URLAudioStream.java", "diffHunk": "@@ -65,24 +66,20 @@ private InputStream createInputStream() throws AudioException {\n         try {\n             switch (extension) {\n                 case M3U_EXTENSION:\n-                    try (final InputStream isM3U = new URL(url).openStream()) {\n-                        for (final String line : IOUtils.readLines(isM3U)) {\n-                            if (!line.isEmpty() && !line.startsWith(\"#\")) {\n-                                url = line;\n-                                break;\n-                            }\n+                    for (final String line : Files.readAllLines(new File(url).toPath())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4b40aeba4388eed73b620afc2ae6d46653832"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTcyNzA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/URLAudioStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzowNjoxN1rOGRohYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzowNjoxN1rOGRohYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0Mjg4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                for (final String line : Files.readAllLines(new File(url).toPath())) {\n          \n          \n            \n                                for (final String line : Files.readAllLines(Paths.get(URI.create(url)))) {", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r421142882", "createdAt": "2020-05-06T23:06:17Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.audio/src/main/java/org/openhab/core/audio/URLAudioStream.java", "diffHunk": "@@ -65,24 +66,20 @@ private InputStream createInputStream() throws AudioException {\n         try {\n             switch (extension) {\n                 case M3U_EXTENSION:\n-                    try (final InputStream isM3U = new URL(url).openStream()) {\n-                        for (final String line : IOUtils.readLines(isM3U)) {\n-                            if (!line.isEmpty() && !line.startsWith(\"#\")) {\n-                                url = line;\n-                                break;\n-                            }\n+                    for (final String line : Files.readAllLines(new File(url).toPath())) {\n+                        if (!line.isEmpty() && !line.startsWith(\"#\")) {\n+                            url = line;\n+                            break;\n                         }\n                     }\n                     break;\n                 case PLS_EXTENSION:\n-                    try (final InputStream isPLS = new URL(url).openStream()) {\n-                        for (final String line : IOUtils.readLines(isPLS)) {\n-                            if (!line.isEmpty() && line.startsWith(\"File\")) {\n-                                final Matcher matcher = PLS_STREAM_PATTERN.matcher(line);\n-                                if (matcher.find()) {\n-                                    url = matcher.group(1);\n-                                    break;\n-                                }\n+                    for (final String line : Files.readAllLines(new File(url).toPath())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4b40aeba4388eed73b620afc2ae6d46653832"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc2NTk1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyMjo1OFrOGRo3bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyMjo1OFrOGRo3bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0ODUyNw==", "bodyText": "DoesoriginalInputStream.readAllBytes() not work?", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r421148527", "createdAt": "2020-05-06T23:22:58Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.model.core/src/main/java/org/openhab/core/model/core/internal/ModelRepositoryImpl.java", "diffHunk": "@@ -98,7 +98,9 @@ public boolean addOrRefreshModel(String name, final InputStream originalInputStr\n         try {\n             InputStream inputStream = null;\n             if (originalInputStream != null) {\n-                byte[] bytes = IOUtils.toByteArray(originalInputStream);\n+                final ByteArrayOutputStream output = new ByteArrayOutputStream();\n+                originalInputStream.transferTo(output);\n+                byte[] bytes = output.toByteArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4b40aeba4388eed73b620afc2ae6d46653832"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc3MDcxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/actions/HTTP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyNToxM1rOGRo6Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyNToxM1rOGRo6Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTI1OQ==", "bodyText": "Charset should be specified", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r421149259", "createdAt": "2020-05-06T23:25:13Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/actions/HTTP.java", "diffHunk": "@@ -147,16 +148,19 @@ static public String sendHttpPutRequest(String url, String contentType, String c\n      *\r\n      * @param url the URL to be used for the PUT request.\r\n      * @param contentType the content type of the given <code>content</code>\r\n-     * @param content the content to be send to the given <code>url</code> or <code>null</code> if no content should be sent.\r\n+     * @param content the content to be send to the given <code>url</code> or <code>null</code> if no content should be\r\n+     *            sent.\r\n      * @param headers the HTTP headers to be sent in the request.\r\n      * @param timeout timeout in ms\r\n      * @return the response body or <code>NULL</code> when the request went wrong\r\n      */\r\n-    static public String sendHttpPutRequest(String url, String contentType, String content, Map<String, String> headers, int timeout) {\r\n+    static public String sendHttpPutRequest(String url, String contentType, String content, Map<String, String> headers,\r\n+            int timeout) {\r\n         try {\r\n             Properties headerProperties = new Properties();\r\n             headerProperties.putAll(headers);\r\n-            return HttpUtil.executeUrl(HttpMethod.PUT.name(), url, headerProperties, IOUtils.toInputStream(content), contentType, timeout);\r\n+            return HttpUtil.executeUrl(HttpMethod.PUT.name(), url, headerProperties,\r\n+                    new ByteArrayInputStream(content.getBytes()), contentType, timeout);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4b40aeba4388eed73b620afc2ae6d46653832"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc3MTE2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/actions/HTTP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyNToyNlrOGRo6lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyNToyNlrOGRo6lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTMzMw==", "bodyText": "Charset should be specified", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r421149333", "createdAt": "2020-05-06T23:25:26Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/actions/HTTP.java", "diffHunk": "@@ -216,7 +220,8 @@ static public String sendHttpPostRequest(String url, String contentType, String\n     static public String sendHttpPostRequest(String url, String contentType, String content, int timeout) {\r\n         String response = null;\r\n         try {\r\n-            response = HttpUtil.executeUrl(HttpMethod.POST.name(), url, IOUtils.toInputStream(content), contentType, timeout);\r\n+            response = HttpUtil.executeUrl(HttpMethod.POST.name(), url, new ByteArrayInputStream(content.getBytes()),\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4b40aeba4388eed73b620afc2ae6d46653832"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc3MTYyOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/actions/HTTP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyNTozN1rOGRo61g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyNTozN1rOGRo61g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTM5OA==", "bodyText": "see above", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r421149398", "createdAt": "2020-05-06T23:25:37Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/actions/HTTP.java", "diffHunk": "@@ -225,19 +230,22 @@ static public String sendHttpPostRequest(String url, String contentType, String\n \r\n     /**\r\n      * Send out a POST-HTTP request. Errors will be logged, returned values just ignored.\r\n-     * \r\n+     *\r\n      * @param url the URL to be used for the GET request.\r\n      * @param contentType the content type of the given <code>content</code>\r\n-     * @param content the content to be send to the given <code>url</code> or <code>null</code> if no content should be sent.\r\n+     * @param content the content to be send to the given <code>url</code> or <code>null</code> if no content should be\r\n+     *            sent.\r\n      * @param headers the HTTP headers to be sent in the request.\r\n      * @param timeout timeout in ms\r\n      * @return the response body or <code>NULL</code> when the request went wrong\r\n      */\r\n-    public static String sendHttpPostRequest(String url, String contentType, String content, Map<String, String> headers, int timeout) {\r\n+    public static String sendHttpPostRequest(String url, String contentType, String content,\r\n+            Map<String, String> headers, int timeout) {\r\n         try {\r\n             Properties headerProperties = new Properties();\r\n             headerProperties.putAll(headers);\r\n-            return HttpUtil.executeUrl(HttpMethod.POST.name(), url, headerProperties, IOUtils.toInputStream(content), contentType, timeout);\r\n+            return HttpUtil.executeUrl(HttpMethod.POST.name(), url, headerProperties,\r\n+                    new ByteArrayInputStream(content.getBytes()), contentType, timeout);\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4b40aeba4388eed73b620afc2ae6d46653832"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc3MzE4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/firmware/FirmwareImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyNjoyNVrOGRo7yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzoyNjoyNVrOGRo7yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE0OTY0Mw==", "bodyText": "Same question as earlier", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r421149643", "createdAt": "2020-05-06T23:26:25Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.thing/src/main/java/org/openhab/core/thing/internal/firmware/FirmwareImpl.java", "diffHunk": "@@ -176,7 +176,9 @@ public FirmwareRestriction getFirmwareRestriction() {\n                 MessageDigest md = MessageDigest.getInstance(\"MD5\");\n \n                 try (DigestInputStream dis = new DigestInputStream(inputStream, md)) {\n-                    bytes = IOUtils.toByteArray(dis);\n+                    final ByteArrayOutputStream output = new ByteArrayOutputStream();\n+                    dis.transferTo(output);\n+                    bytes = output.toByteArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4b40aeba4388eed73b620afc2ae6d46653832"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTc5MjQzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/actions/HTTP.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzozNTozOFrOGRpHGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMzozNTozOFrOGRpHGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTE1MjUzOA==", "bodyText": "Charset should be specified", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r421152538", "createdAt": "2020-05-06T23:35:38Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/actions/HTTP.java", "diffHunk": "@@ -135,7 +135,8 @@ static public String sendHttpPutRequest(String url, String contentType, String c\n     static public String sendHttpPutRequest(String url, String contentType, String content, int timeout) {\r\n         String response = null;\r\n         try {\r\n-            response = HttpUtil.executeUrl(HttpMethod.PUT.name(), url, IOUtils.toInputStream(content), contentType, timeout);\r\n+            response = HttpUtil.executeUrl(HttpMethod.PUT.name(), url, new ByteArrayInputStream(content.getBytes()),\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4b40aeba4388eed73b620afc2ae6d46653832"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTY1MDYxOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.io.rest.auth/src/main/java/org/openhab/core/io/rest/auth/internal/JwtHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxMzoyN1rOGSz5_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMToxMzoyN1rOGSz5_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM3Nzk4Mw==", "bodyText": "You should also close this reader after you are done with it", "url": "https://github.com/openhab/openhab-core/pull/1441#discussion_r422377983", "createdAt": "2020-05-08T21:13:27Z", "author": {"login": "cpmeister"}, "path": "bundles/org.openhab.core.io.rest.auth/src/main/java/org/openhab/core/io/rest/auth/internal/JwtHelper.java", "diffHunk": "@@ -78,14 +79,14 @@ private RsaJsonWebKey generateNewKey() throws JoseException, FileNotFoundExcepti\n \n         String keyJson = newKey.toJson(OutputControlLevel.INCLUDE_PRIVATE);\n \n-        IOUtils.write(keyJson, new FileOutputStream(file));\n+        Files.writeString(file.toPath(), keyJson, StandardCharsets.UTF_8);\n         return newKey;\n     }\n \n     private RsaJsonWebKey loadOrGenerateKey() throws FileNotFoundException, JoseException, IOException {\n         try {\n-            List<String> lines = IOUtils.readLines(new FileInputStream(KEY_FILE_PATH));\n-            return (RsaJsonWebKey) JsonWebKey.Factory.newJwk(lines.get(0));\n+            final BufferedReader reader = Files.newBufferedReader(Paths.get(KEY_FILE_PATH));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0db3722cf20268adbc6d7e58588e00c8a0c647e"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3374, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}