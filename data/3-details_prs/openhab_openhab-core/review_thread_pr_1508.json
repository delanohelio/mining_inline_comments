{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NjgwMzg2", "number": 1508, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxODoyMlrOEBe7ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxOToyMlrOEBe8qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTkwNzU3OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation.rest/src/main/java/org/openhab/core/automation/rest/internal/RuleResource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxODoyMlrOGdW45g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODo0ODowOFrOGd_i4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNjkwMg==", "bodyText": "Is this really an optional reference? Isn't it mandatory and we can pass it via constructor injection?", "url": "https://github.com/openhab/openhab-core/pull/1508#discussion_r433436902", "createdAt": "2020-06-01T19:18:22Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation.rest/src/main/java/org/openhab/core/automation/rest/internal/RuleResource.java", "diffHunk": "@@ -121,6 +126,15 @@ public RuleResource( //\n         this.ruleRegistry = ruleRegistry;\n     }\n \n+    @Reference(cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb53b3c41a63a800944dd4788532360579704d58"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEwMzAxMQ==", "bodyText": "Agree, can be mandatory.", "url": "https://github.com/openhab/openhab-core/pull/1508#discussion_r434103011", "createdAt": "2020-06-02T18:48:08Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.automation.rest/src/main/java/org/openhab/core/automation/rest/internal/RuleResource.java", "diffHunk": "@@ -121,6 +126,15 @@ public RuleResource( //\n         this.ruleRegistry = ruleRegistry;\n     }\n \n+    @Reference(cardinality = ReferenceCardinality.OPTIONAL, policy = ReferencePolicy.DYNAMIC)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNjkwMg=="}, "originalCommit": {"oid": "fb53b3c41a63a800944dd4788532360579704d58"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTkxMDgzOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation.rest/src/main/java/org/openhab/core/automation/rest/internal/dto/EnrichedRuleDTOMapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxOToyMlrOGdW64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxOToxOToyMlrOGdW64g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQzNzQxMA==", "bodyText": "If the reference stays optional I prefer to see a null-check on the managedRuleProvider here.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    enrichedRuleDto.editable = managedRuleProvider.get(enrichedRuleDto.uid) != null;\n          \n          \n            \n                    enrichedRuleDto.editable = managedRuleProvider.get(rule.getUID()) != null;", "url": "https://github.com/openhab/openhab-core/pull/1508#discussion_r433437410", "createdAt": "2020-06-01T19:19:22Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core.automation.rest/src/main/java/org/openhab/core/automation/rest/internal/dto/EnrichedRuleDTOMapper.java", "diffHunk": "@@ -20,13 +21,16 @@\n  * This is a utility class to convert between the respective object and its DTO.\n  *\n  * @author Markus Rathgeb - Initial contribution\n+ * @author Kai Kreuzer - added editable field\n  */\n public class EnrichedRuleDTOMapper extends RuleDTOMapper {\n \n-    public static EnrichedRuleDTO map(final Rule rule, final RuleManager ruleEngine) {\n+    public static EnrichedRuleDTO map(final Rule rule, final RuleManager ruleEngine,\n+            final ManagedRuleProvider managedRuleProvider) {\n         final EnrichedRuleDTO enrichedRuleDto = new EnrichedRuleDTO();\n         fillProperties(rule, enrichedRuleDto);\n         enrichedRuleDto.status = ruleEngine.getStatusInfo(rule.getUID());\n+        enrichedRuleDto.editable = managedRuleProvider.get(enrichedRuleDto.uid) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb53b3c41a63a800944dd4788532360579704d58"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3413, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}