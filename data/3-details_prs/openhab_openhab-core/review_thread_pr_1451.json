{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMzU2NzE3", "number": 1451, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyMDo1NlrOD3hixQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTo0MDo1M1rOEFPm1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTQ3ODQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyMDo1NlrOGN0e6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODoyMDo1NlrOGN0e6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE0NDU1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"description\": \"the member of the group that changed it state\",\n          \n          \n            \n                                \"description\": \"the member of the group that changed its state\",", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r417144553", "createdAt": "2020-04-29T08:20:56Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.automation/src/main/resources/OH-INF/automation/moduletypes/ItemTriggers.json", "diffHunk": "@@ -231,6 +231,256 @@\n \t\t\t\t\t\"reference\": \"event\"\n \t\t\t\t}\n \t\t\t]\n-\t\t}\n+\t\t},\n+        {\n+            \"uid\": \"core.GroupCommandTrigger\",\n+            \"label\": \"a member of an item group receives a command\",\n+            \"description\": \"This triggers the rule if a member of an item group receives a command.\",\n+            \"configDescriptions\": [\n+                {\n+                    \"name\": \"groupName\",\n+                    \"type\": \"TEXT\",\n+                    \"context\": \"item\",\n+                    \"label\": \"Group\",\n+                    \"description\": \"the name of the item group\",\n+                    \"required\": true\n+                },\n+                {\n+                    \"name\": \"command\",\n+                    \"type\": \"TEXT\",\n+                    \"label\": \"Command\",\n+                    \"description\": \"the received command\",\n+                    \"required\": false,\n+                    \"limitToOptions\": false,\n+                    \"options\": [\n+                        {\n+                            \"label\": \"ON\",\n+                            \"value\": \"ON\"\n+                        },\n+                        {\n+                            \"label\": \"OFF\",\n+                            \"value\": \"OFF\"\n+                        },\n+                        {\n+                            \"label\": \"OPEN\",\n+                            \"value\": \"OPEN\"\n+                        },\n+                        {\n+                            \"label\": \"CLOSED\",\n+                            \"value\": \"CLOSED\"\n+                        },\n+                        {\n+                            \"label\": \"UP\",\n+                            \"value\": \"UP\"\n+                        },\n+                        {\n+                            \"label\": \"DOWN\",\n+                            \"value\": \"DOWN\"\n+                        }\n+                    ]\n+                }\n+            ],\n+            \"outputs\": [\n+                {\n+                    \"name\": \"triggeringItem\",\n+                    \"type\": \"org.openhab.core.items.Item\",\n+                    \"description\": \"the member of the group that received the command\",\n+                    \"label\": \"Triggering Item\"\n+                },\n+                {\n+                    \"name\": \"command\",\n+                    \"type\": \"command\",\n+                    \"description\": \"the received command\",\n+                    \"label\": \"Command\"\n+                },\n+                {\n+                    \"name\": \"event\",\n+                    \"type\": \"org.openhab.core.events.Event\",\n+                    \"label\": \"Event\",\n+                    \"description\": \"The event which was sent.\",\n+                    \"reference\": \"event\"\n+                }\n+            ]\n+        },\n+        {\n+            \"uid\": \"core.GroupStateUpdateTrigger\",\n+            \"label\": \"the state of a member of an item group is updated\",\n+            \"description\": \"This triggers the rule if the state of a member of an item group is updated (even if it does not change).\",\n+            \"configDescriptions\": [\n+                {\n+                    \"name\": \"groupName\",\n+                    \"type\": \"TEXT\",\n+                    \"context\": \"item\",\n+                    \"label\": \"Group\",\n+                    \"description\": \"the name of the item group\",\n+                    \"required\": true\n+                },\n+                {\n+                    \"name\": \"state\",\n+                    \"type\": \"TEXT\",\n+                    \"label\": \"State\",\n+                    \"description\": \"the state of the item\",\n+                    \"required\": false,\n+                    \"limitToOptions\": false,\n+                    \"options\": [\n+                        {\n+                            \"label\": \"ON\",\n+                            \"value\": \"ON\"\n+                        },\n+                        {\n+                            \"label\": \"OFF\",\n+                            \"value\": \"OFF\"\n+                        },\n+                        {\n+                            \"label\": \"OPEN\",\n+                            \"value\": \"OPEN\"\n+                        },\n+                        {\n+                            \"label\": \"CLOSED\",\n+                            \"value\": \"CLOSED\"\n+                        },\n+                        {\n+                            \"label\": \"UP\",\n+                            \"value\": \"UP\"\n+                        },\n+                        {\n+                            \"label\": \"DOWN\",\n+                            \"value\": \"DOWN\"\n+                        }\n+                    ]\n+                }\n+            ],\n+            \"outputs\": [\n+                {\n+                    \"name\": \"triggeringItem\",\n+                    \"type\": \"org.openhab.core.items.Item\",\n+                    \"description\": \"the member of the group that updated its state\",\n+                    \"label\": \"Triggering Item\"\n+                },\n+                {\n+                    \"name\": \"state\",\n+                    \"type\": \"state\",\n+                    \"description\": \"the item state\",\n+                    \"label\": \"State\"\n+                },\n+                {\n+                    \"name\": \"event\",\n+                    \"type\": \"org.openhab.core.events.Event\",\n+                    \"label\": \"Event\",\n+                    \"description\": \"The event which was sent.\",\n+                    \"reference\": \"event\"\n+                }\n+            ]\n+        },\n+        {\n+            \"uid\": \"core.GroupStateChangeTrigger\",\n+            \"label\": \"the state of a member of an item group changes\",\n+            \"description\": \"This triggers the rule if the state of a member of an item group has changed.\",\n+            \"configDescriptions\": [\n+                {\n+                    \"name\": \"groupName\",\n+                    \"type\": \"TEXT\",\n+                    \"context\": \"item\",\n+                    \"label\": \"Group\",\n+                    \"description\": \"the name of the item group\",\n+                    \"required\": true\n+                },\n+                {\n+                    \"name\": \"previousState\",\n+                    \"type\": \"TEXT\",\n+                    \"label\": \"Previous State\",\n+                    \"description\": \"the required previous state of the item\",\n+                    \"required\": false,\n+                    \"limitToOptions\": false,\n+                    \"options\": [\n+                        {\n+                            \"label\": \"ON\",\n+                            \"value\": \"ON\"\n+                        },\n+                        {\n+                            \"label\": \"OFF\",\n+                            \"value\": \"OFF\"\n+                        },\n+                        {\n+                            \"label\": \"OPEN\",\n+                            \"value\": \"OPEN\"\n+                        },\n+                        {\n+                            \"label\": \"CLOSED\",\n+                            \"value\": \"CLOSED\"\n+                        },\n+                        {\n+                            \"label\": \"UP\",\n+                            \"value\": \"UP\"\n+                        },\n+                        {\n+                            \"label\": \"DOWN\",\n+                            \"value\": \"DOWN\"\n+                        }\n+                    ]\n+                },\n+                {\n+                    \"name\": \"state\",\n+                    \"type\": \"TEXT\",\n+                    \"label\": \"State\",\n+                    \"description\": \"the state of the item\",\n+                    \"required\": false,\n+                    \"limitToOptions\": false,\n+                    \"options\": [\n+                        {\n+                            \"label\": \"ON\",\n+                            \"value\": \"ON\"\n+                        },\n+                        {\n+                            \"label\": \"OFF\",\n+                            \"value\": \"OFF\"\n+                        },\n+                        {\n+                            \"label\": \"OPEN\",\n+                            \"value\": \"OPEN\"\n+                        },\n+                        {\n+                            \"label\": \"CLOSED\",\n+                            \"value\": \"CLOSED\"\n+                        },\n+                        {\n+                            \"label\": \"UP\",\n+                            \"value\": \"UP\"\n+                        },\n+                        {\n+                            \"label\": \"DOWN\",\n+                            \"value\": \"DOWN\"\n+                        }\n+                    ]\n+                }\n+            ],\n+            \"outputs\": [\n+                {\n+                    \"name\": \"triggeringItem\",\n+                    \"type\": \"org.openhab.core.items.Item\",\n+                    \"description\": \"the member of the group that changed it state\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90324e733ec2ec703a8ed79931d012b60595241a"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NTUxNDE0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMToxMVrOGN01Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMToxMVrOGN01Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MDI1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This is a ModuleHandler implementation for Triggers which trigger the rule if a certain system events occurs.\n          \n          \n            \n             * This is a ModuleHandler implementation for Triggers which trigger the rule if a certain system event occurs.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r417150255", "createdAt": "2020-04-29T08:31:11Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.automation/src/main/java/org/openhab/core/automation/internal/module/handler/SystemTriggerHandler.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.automation.internal.module.handler;\n+\n+import java.math.BigDecimal;\n+import java.util.Collections;\n+import java.util.Dictionary;\n+import java.util.HashMap;\n+import java.util.Hashtable;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.ModuleHandlerCallback;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.handler.BaseTriggerModuleHandler;\n+import org.openhab.core.automation.handler.TriggerHandlerCallback;\n+import org.openhab.core.events.Event;\n+import org.openhab.core.events.EventFilter;\n+import org.openhab.core.events.EventSubscriber;\n+import org.openhab.core.events.system.StartlevelEvent;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceRegistration;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This is a ModuleHandler implementation for Triggers which trigger the rule if a certain system events occurs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90324e733ec2ec703a8ed79931d012b60595241a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTU2NTc5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.rule.runtime/src/org/openhab/core/model/rule/runtime/internal/DSLRuleProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjo1MzozMFrOGOcB8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTozOTo1OFrOGO3pvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5MjQ5Nw==", "bodyText": "This doesn't work on Windows, you'll want to add this as well:\n        if (s.startsWith(\"\\r\\n\")) {\n            s = s.substring(2);\n        }\nMaybe also add a final newline if it doesn't exist (that would make the YAML multiline control a simple | instead of |-)", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r417792497", "createdAt": "2020-04-30T06:53:30Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.model.rule.runtime/src/org/openhab/core/model/rule/runtime/internal/DSLRuleProvider.java", "diffHunk": "@@ -264,14 +265,26 @@ private Rule toRule(String modelName, boolean hasContext, org.openhab.core.model\n         XBlockExpression expression = rule.getScript();\n         String script = NodeModelUtils.findActualNodeFor(expression).getText();\n         Configuration cfg = new Configuration();\n-        cfg.put(\"script\", context + script);\n+        cfg.put(\"script\", context + removeIndentation(script));\n         cfg.put(\"type\", MIMETYPE_OPENHAB_DSL_RULE);\n         List<Action> actions = Collections.singletonList(ActionBuilder.create().withId(\"script\")\n                 .withTypeUID(\"script.ScriptAction\").withConfiguration(cfg).build());\n \n         return RuleBuilder.create(uid).withName(name).withTriggers(triggers).withActions(actions).build();\n     }\n \n+    private String removeIndentation(String script) {\n+        String s = script;\n+        if (s.startsWith(\"\\n\")) {\n+            s = s.substring(1);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d73757d0d2ea5ba9b4c7502f5fb9bbee6b91e5eb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI0NTA1NA==", "bodyText": "These Windows users ;-)\nDone!", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r418245054", "createdAt": "2020-04-30T19:39:58Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.model.rule.runtime/src/org/openhab/core/model/rule/runtime/internal/DSLRuleProvider.java", "diffHunk": "@@ -264,14 +265,26 @@ private Rule toRule(String modelName, boolean hasContext, org.openhab.core.model\n         XBlockExpression expression = rule.getScript();\n         String script = NodeModelUtils.findActualNodeFor(expression).getText();\n         Configuration cfg = new Configuration();\n-        cfg.put(\"script\", context + script);\n+        cfg.put(\"script\", context + removeIndentation(script));\n         cfg.put(\"type\", MIMETYPE_OPENHAB_DSL_RULE);\n         List<Action> actions = Collections.singletonList(ActionBuilder.create().withId(\"script\")\n                 .withTypeUID(\"script.ScriptAction\").withConfiguration(cfg).build());\n \n         return RuleBuilder.create(uid).withName(name).withTriggers(triggers).withActions(actions).build();\n     }\n \n+    private String removeIndentation(String script) {\n+        String s = script;\n+        if (s.startsWith(\"\\n\")) {\n+            s = s.substring(1);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5MjQ5Nw=="}, "originalCommit": {"oid": "d73757d0d2ea5ba9b4c7502f5fb9bbee6b91e5eb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzUwMDg5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.automation.rest/src/main/java/org/openhab/core/automation/rest/internal/dto/EnrichedRuleDTOMapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNjowNDo1MFrOGPkQaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQxNjo1Njo1NVrOGPkmLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3NTg1MQ==", "bodyText": "Isn't that supposed to be\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    enrichedRuleDto.editable = managedRuleProvider.get(enrichedRuleDto.name) != null;\n          \n          \n            \n                    enrichedRuleDto.editable = managedRuleProvider.get(enrichedRuleDto.uid) != null;", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r418975851", "createdAt": "2020-05-02T16:04:50Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.automation.rest/src/main/java/org/openhab/core/automation/rest/internal/dto/EnrichedRuleDTOMapper.java", "diffHunk": "@@ -20,13 +21,16 @@\n  * This is a utility class to convert between the respective object and its DTO.\n  *\n  * @author Markus Rathgeb - Initial contribution\n+ * @author Kai Kreuzer - added editable field\n  */\n public class EnrichedRuleDTOMapper extends RuleDTOMapper {\n \n-    public static EnrichedRuleDTO map(final Rule rule, final RuleManager ruleEngine) {\n+    public static EnrichedRuleDTO map(final Rule rule, final RuleManager ruleEngine,\n+            final ManagedRuleProvider managedRuleProvider) {\n         final EnrichedRuleDTO enrichedRuleDto = new EnrichedRuleDTO();\n         fillProperties(rule, enrichedRuleDto);\n         enrichedRuleDto.status = ruleEngine.getStatusInfo(rule.getUID());\n+        enrichedRuleDto.editable = managedRuleProvider.get(enrichedRuleDto.name) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "857ada833862af0c5dac5525d45ffa3390f7fbda"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk4MTQyMw==", "bodyText": "I should have tested it myself, sorry. Fixed it.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r418981423", "createdAt": "2020-05-02T16:56:55Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.automation.rest/src/main/java/org/openhab/core/automation/rest/internal/dto/EnrichedRuleDTOMapper.java", "diffHunk": "@@ -20,13 +21,16 @@\n  * This is a utility class to convert between the respective object and its DTO.\n  *\n  * @author Markus Rathgeb - Initial contribution\n+ * @author Kai Kreuzer - added editable field\n  */\n public class EnrichedRuleDTOMapper extends RuleDTOMapper {\n \n-    public static EnrichedRuleDTO map(final Rule rule, final RuleManager ruleEngine) {\n+    public static EnrichedRuleDTO map(final Rule rule, final RuleManager ruleEngine,\n+            final ManagedRuleProvider managedRuleProvider) {\n         final EnrichedRuleDTO enrichedRuleDto = new EnrichedRuleDTO();\n         fillProperties(rule, enrichedRuleDto);\n         enrichedRuleDto.status = ruleEngine.getStatusInfo(rule.getUID());\n+        enrichedRuleDto.editable = managedRuleProvider.get(enrichedRuleDto.name) != null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODk3NTg1MQ=="}, "originalCommit": {"oid": "857ada833862af0c5dac5525d45ffa3390f7fbda"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MzY4NDkwOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.script.runtime/src/org/openhab/core/model/script/runtime/internal/engine/DSLScriptEngine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwOToxNjozMFrOGWZSIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMTozMzozOFrOGYel_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNjA5OA==", "bodyText": "By the way @kaikreuzer, have you noticed the \"o\" gets capitalized between here and the UI? I don't think it's done client-side, so not sure where it happens.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r426136098", "createdAt": "2020-05-16T09:16:30Z", "author": {"login": "ghys"}, "path": "bundles/org.openhab.core.model.script.runtime/src/org/openhab/core/model/script/runtime/internal/engine/DSLScriptEngine.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.model.script.runtime.internal.engine;\n+\n+import java.io.Reader;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.script.Bindings;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptEngineFactory;\n+import javax.script.ScriptException;\n+import javax.script.SimpleScriptContext;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.xtext.naming.QualifiedName;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.interpreter.IEvaluationContext;\n+import org.eclipse.xtext.xbase.interpreter.impl.DefaultEvaluationContext;\n+import org.openhab.core.model.script.engine.ScriptExecutionException;\n+import org.openhab.core.model.script.engine.ScriptParsingException;\n+import org.openhab.core.model.script.runtime.DSLScriptContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A basic implementation of the {@link javax.script.ScriptEngine} interface for using DSL scripts\n+ * within a jsr223 scripting context in Java.\n+ * Most methods are left empty, because they aren't used in our rule engine.\n+ * The most important methods are the ones that return metadata about the script engine factory.\n+ *\n+ * Note: This class is not marked as NonNullByDefault as almost all parameters of all methods are\n+ * nullable as the interface is declared without null annotations.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class DSLScriptEngine implements javax.script.ScriptEngine {\n+\n+    public static final String MIMETYPE_OPENHAB_DSL_RULE = \"application/vnd.openhab.dsl.rule\";\n+\n+    private static final Map<String, String> implicitVars = Map.of(\"command\", \"receivedCommand\", \"event\",\n+            \"receivedEvent\", \"newState\", \"newState\", \"oldState\", \"previousState\", \"triggeringItem\", \"triggeringItem\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(DSLScriptEngine.class);\n+\n+    private final org.openhab.core.model.script.engine.ScriptEngine scriptEngine;\n+    private final @Nullable DSLScriptContextProvider contextProvider;\n+    private final ScriptContext context = new SimpleScriptContext();\n+\n+    public DSLScriptEngine(org.openhab.core.model.script.engine.ScriptEngine scriptEngine,\n+            @Nullable DSLScriptContextProvider contextProvider) {\n+        this.scriptEngine = scriptEngine;\n+        this.contextProvider = contextProvider;\n+    }\n+\n+    @Override\n+    public Object eval(String script, ScriptContext context) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(Reader reader, ScriptContext context) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(String script) throws ScriptException {\n+        String modelName = null;\n+        try {\n+            IEvaluationContext specificContext = null;\n+            org.openhab.core.model.script.engine.Script s = null;\n+            if (script.stripLeading().startsWith(DSLScriptContextProvider.CONTEXT_IDENTIFIER)) {\n+                String contextString = script.stripLeading().substring(\n+                        DSLScriptContextProvider.CONTEXT_IDENTIFIER.length(), script.stripLeading().indexOf('\\n'));\n+                String[] segments = contextString.split(\"-\");\n+                if (segments.length == 2) {\n+                    modelName = segments[0];\n+                    String ruleIndex = segments[1];\n+                    if (contextProvider != null) {\n+                        DSLScriptContextProvider cp = contextProvider;\n+                        logger.debug(\"Script uses context '{}'.\", contextString);\n+                        specificContext = cp.getContext(modelName);\n+                        XExpression xExpression = cp.getParsedScript(modelName, ruleIndex);\n+                        s = scriptEngine.newScriptFromXExpression(xExpression);\n+                    } else {\n+                        logger.error(\"Script references context '{}', but no context provider is registered!\",\n+                                contextString);\n+                        return null;\n+                    }\n+                } else {\n+                    logger.error(\"Script has an invalid context reference '{}'!\", contextString);\n+                    return null;\n+                }\n+            } else {\n+                s = scriptEngine.newScriptFromString(script);\n+            }\n+            IEvaluationContext evalContext = createEvaluationContext(specificContext);\n+            s.execute(evalContext);\n+        } catch (ScriptExecutionException | ScriptParsingException e) {\n+            throw new ScriptException(e.getMessage(), modelName, -1);\n+        }\n+        return null;\n+    }\n+\n+    private DefaultEvaluationContext createEvaluationContext(IEvaluationContext specificContext) {\n+        DefaultEvaluationContext evalContext = new DefaultEvaluationContext(specificContext);\n+        for (Map.Entry<String, String> entry : implicitVars.entrySet()) {\n+            Object value = context.getAttribute(entry.getKey());\n+            if (value != null) {\n+                evalContext.newValue(QualifiedName.create(entry.getValue()), value);\n+            }\n+        }\n+        return evalContext;\n+    }\n+\n+    @Override\n+    public Object eval(Reader reader) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(String script, Bindings n) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(Reader reader, Bindings n) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void put(String key, Object value) {\n+\n+    }\n+\n+    @Override\n+    public Object get(String key) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Bindings getBindings(int scope) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setBindings(Bindings bindings, int scope) {\n+    }\n+\n+    @Override\n+    public Bindings createBindings() {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScriptContext getContext() {\n+        return context;\n+    }\n+\n+    @Override\n+    public void setContext(ScriptContext context) {\n+\n+    }\n+\n+    @Override\n+    public ScriptEngineFactory getFactory() {\n+        return new ScriptEngineFactory() {\n+\n+            @Override\n+            public ScriptEngine getScriptEngine() {\n+                return null;\n+            }\n+\n+            @Override\n+            public String getProgram(String... statements) {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object getParameter(String key) {\n+                return null;\n+            }\n+\n+            @Override\n+            public String getOutputStatement(String toDisplay) {\n+                return null;\n+            }\n+\n+            @Override\n+            public List<String> getNames() {\n+                return null;\n+            }\n+\n+            @Override\n+            public List<String> getMimeTypes() {\n+                return Collections.singletonList(MIMETYPE_OPENHAB_DSL_RULE);\n+            }\n+\n+            @Override\n+            public String getMethodCallSyntax(String obj, String m, String... args) {\n+                return null;\n+            }\n+\n+            @Override\n+            public String getLanguageVersion() {\n+                return \"v1\";\n+            }\n+\n+            @Override\n+            public String getLanguageName() {\n+                return \"openHAB Rule DSL\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0471d124038fc2a05ea18136872dfaea302bab08"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODMyMDI1NA==", "bodyText": "Yes, I had noticed this as well. I assume it must be the javax.script implementation that capitalizes it. I've now simply changed the name to \"Rule DSL\", so we don't have to bother anymore ;-)", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r428320254", "createdAt": "2020-05-20T21:33:38Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.model.script.runtime/src/org/openhab/core/model/script/runtime/internal/engine/DSLScriptEngine.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.model.script.runtime.internal.engine;\n+\n+import java.io.Reader;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.script.Bindings;\n+import javax.script.ScriptContext;\n+import javax.script.ScriptEngine;\n+import javax.script.ScriptEngineFactory;\n+import javax.script.ScriptException;\n+import javax.script.SimpleScriptContext;\n+\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.xtext.naming.QualifiedName;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.interpreter.IEvaluationContext;\n+import org.eclipse.xtext.xbase.interpreter.impl.DefaultEvaluationContext;\n+import org.openhab.core.model.script.engine.ScriptExecutionException;\n+import org.openhab.core.model.script.engine.ScriptParsingException;\n+import org.openhab.core.model.script.runtime.DSLScriptContextProvider;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A basic implementation of the {@link javax.script.ScriptEngine} interface for using DSL scripts\n+ * within a jsr223 scripting context in Java.\n+ * Most methods are left empty, because they aren't used in our rule engine.\n+ * The most important methods are the ones that return metadata about the script engine factory.\n+ *\n+ * Note: This class is not marked as NonNullByDefault as almost all parameters of all methods are\n+ * nullable as the interface is declared without null annotations.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+public class DSLScriptEngine implements javax.script.ScriptEngine {\n+\n+    public static final String MIMETYPE_OPENHAB_DSL_RULE = \"application/vnd.openhab.dsl.rule\";\n+\n+    private static final Map<String, String> implicitVars = Map.of(\"command\", \"receivedCommand\", \"event\",\n+            \"receivedEvent\", \"newState\", \"newState\", \"oldState\", \"previousState\", \"triggeringItem\", \"triggeringItem\");\n+\n+    private final Logger logger = LoggerFactory.getLogger(DSLScriptEngine.class);\n+\n+    private final org.openhab.core.model.script.engine.ScriptEngine scriptEngine;\n+    private final @Nullable DSLScriptContextProvider contextProvider;\n+    private final ScriptContext context = new SimpleScriptContext();\n+\n+    public DSLScriptEngine(org.openhab.core.model.script.engine.ScriptEngine scriptEngine,\n+            @Nullable DSLScriptContextProvider contextProvider) {\n+        this.scriptEngine = scriptEngine;\n+        this.contextProvider = contextProvider;\n+    }\n+\n+    @Override\n+    public Object eval(String script, ScriptContext context) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(Reader reader, ScriptContext context) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(String script) throws ScriptException {\n+        String modelName = null;\n+        try {\n+            IEvaluationContext specificContext = null;\n+            org.openhab.core.model.script.engine.Script s = null;\n+            if (script.stripLeading().startsWith(DSLScriptContextProvider.CONTEXT_IDENTIFIER)) {\n+                String contextString = script.stripLeading().substring(\n+                        DSLScriptContextProvider.CONTEXT_IDENTIFIER.length(), script.stripLeading().indexOf('\\n'));\n+                String[] segments = contextString.split(\"-\");\n+                if (segments.length == 2) {\n+                    modelName = segments[0];\n+                    String ruleIndex = segments[1];\n+                    if (contextProvider != null) {\n+                        DSLScriptContextProvider cp = contextProvider;\n+                        logger.debug(\"Script uses context '{}'.\", contextString);\n+                        specificContext = cp.getContext(modelName);\n+                        XExpression xExpression = cp.getParsedScript(modelName, ruleIndex);\n+                        s = scriptEngine.newScriptFromXExpression(xExpression);\n+                    } else {\n+                        logger.error(\"Script references context '{}', but no context provider is registered!\",\n+                                contextString);\n+                        return null;\n+                    }\n+                } else {\n+                    logger.error(\"Script has an invalid context reference '{}'!\", contextString);\n+                    return null;\n+                }\n+            } else {\n+                s = scriptEngine.newScriptFromString(script);\n+            }\n+            IEvaluationContext evalContext = createEvaluationContext(specificContext);\n+            s.execute(evalContext);\n+        } catch (ScriptExecutionException | ScriptParsingException e) {\n+            throw new ScriptException(e.getMessage(), modelName, -1);\n+        }\n+        return null;\n+    }\n+\n+    private DefaultEvaluationContext createEvaluationContext(IEvaluationContext specificContext) {\n+        DefaultEvaluationContext evalContext = new DefaultEvaluationContext(specificContext);\n+        for (Map.Entry<String, String> entry : implicitVars.entrySet()) {\n+            Object value = context.getAttribute(entry.getKey());\n+            if (value != null) {\n+                evalContext.newValue(QualifiedName.create(entry.getValue()), value);\n+            }\n+        }\n+        return evalContext;\n+    }\n+\n+    @Override\n+    public Object eval(Reader reader) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(String script, Bindings n) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public Object eval(Reader reader, Bindings n) throws ScriptException {\n+        return null;\n+    }\n+\n+    @Override\n+    public void put(String key, Object value) {\n+\n+    }\n+\n+    @Override\n+    public Object get(String key) {\n+        return null;\n+    }\n+\n+    @Override\n+    public Bindings getBindings(int scope) {\n+        return null;\n+    }\n+\n+    @Override\n+    public void setBindings(Bindings bindings, int scope) {\n+    }\n+\n+    @Override\n+    public Bindings createBindings() {\n+        return null;\n+    }\n+\n+    @Override\n+    public ScriptContext getContext() {\n+        return context;\n+    }\n+\n+    @Override\n+    public void setContext(ScriptContext context) {\n+\n+    }\n+\n+    @Override\n+    public ScriptEngineFactory getFactory() {\n+        return new ScriptEngineFactory() {\n+\n+            @Override\n+            public ScriptEngine getScriptEngine() {\n+                return null;\n+            }\n+\n+            @Override\n+            public String getProgram(String... statements) {\n+                return null;\n+            }\n+\n+            @Override\n+            public Object getParameter(String key) {\n+                return null;\n+            }\n+\n+            @Override\n+            public String getOutputStatement(String toDisplay) {\n+                return null;\n+            }\n+\n+            @Override\n+            public List<String> getNames() {\n+                return null;\n+            }\n+\n+            @Override\n+            public List<String> getMimeTypes() {\n+                return Collections.singletonList(MIMETYPE_OPENHAB_DSL_RULE);\n+            }\n+\n+            @Override\n+            public String getMethodCallSyntax(String obj, String m, String... args) {\n+                return null;\n+            }\n+\n+            @Override\n+            public String getLanguageVersion() {\n+                return \"v1\";\n+            }\n+\n+            @Override\n+            public String getLanguageName() {\n+                return \"openHAB Rule DSL\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEzNjA5OA=="}, "originalCommit": {"oid": "0471d124038fc2a05ea18136872dfaea302bab08"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTMyNzQ1OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.boot/bnd.bnd", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOToxMzo1OFrOGjWnVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOToxMzo1OFrOGjWnVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyMzg2MA==", "bodyText": "This file only existed for adding the activator to the manifest. So it should be removed now.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439723860", "createdAt": "2020-06-13T09:13:58Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.boot/bnd.bnd", "diffHunk": "@@ -1,2 +1 @@\n Bundle-SymbolicName: ${project.artifactId}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTMyOTA0OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.rule.runtime/src/org/openhab/core/model/rule/runtime/internal/DSLRuleProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOToxNzoxNlrOGjWoIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOToxNzoxNlrOGjWoIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNDA2Ng==", "bodyText": "Can you inject these fields using constructor injection instead? That allows for making them final and also makes it easier to write unit tests for this class without having to resort to reflection tricks.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439724066", "createdAt": "2020-06-13T09:17:16Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.rule.runtime/src/org/openhab/core/model/rule/runtime/internal/DSLRuleProvider.java", "diffHunk": "@@ -0,0 +1,432 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.model.rule.runtime.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.eclipse.emf.ecore.EObject;\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.eclipse.xtext.nodemodel.util.NodeModelUtils;\n+import org.eclipse.xtext.xbase.XBlockExpression;\n+import org.eclipse.xtext.xbase.XExpression;\n+import org.eclipse.xtext.xbase.interpreter.IEvaluationContext;\n+import org.openhab.core.automation.Action;\n+import org.openhab.core.automation.Rule;\n+import org.openhab.core.automation.RuleProvider;\n+import org.openhab.core.automation.Trigger;\n+import org.openhab.core.automation.util.ActionBuilder;\n+import org.openhab.core.automation.util.RuleBuilder;\n+import org.openhab.core.automation.util.TriggerBuilder;\n+import org.openhab.core.common.registry.ProviderChangeListener;\n+import org.openhab.core.config.core.Configuration;\n+import org.openhab.core.model.core.EventType;\n+import org.openhab.core.model.core.ModelRepository;\n+import org.openhab.core.model.core.ModelRepositoryChangeListener;\n+import org.openhab.core.model.rule.jvmmodel.RulesRefresher;\n+import org.openhab.core.model.rule.rules.ChangedEventTrigger;\n+import org.openhab.core.model.rule.rules.CommandEventTrigger;\n+import org.openhab.core.model.rule.rules.EventEmittedTrigger;\n+import org.openhab.core.model.rule.rules.EventTrigger;\n+import org.openhab.core.model.rule.rules.GroupMemberChangedEventTrigger;\n+import org.openhab.core.model.rule.rules.GroupMemberCommandEventTrigger;\n+import org.openhab.core.model.rule.rules.GroupMemberUpdateEventTrigger;\n+import org.openhab.core.model.rule.rules.RuleModel;\n+import org.openhab.core.model.rule.rules.SystemOnShutdownTrigger;\n+import org.openhab.core.model.rule.rules.SystemOnStartupTrigger;\n+import org.openhab.core.model.rule.rules.ThingStateChangedEventTrigger;\n+import org.openhab.core.model.rule.rules.ThingStateUpdateEventTrigger;\n+import org.openhab.core.model.rule.rules.TimerTrigger;\n+import org.openhab.core.model.rule.rules.UpdateEventTrigger;\n+import org.openhab.core.model.script.runtime.DSLScriptContextProvider;\n+import org.openhab.core.service.ReadyMarker;\n+import org.openhab.core.service.ReadyMarkerFilter;\n+import org.openhab.core.service.ReadyService;\n+import org.openhab.core.service.ReadyService.ReadyTracker;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Deactivate;\n+import org.osgi.service.component.annotations.Reference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * This RuleProvider provides rules that are defined in DSL rule files.\n+ * All rules consist out of a list of triggers and a single script action.\n+ * No rule conditions are used as this concept does not exist for DSL rules.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(immediate = true, service = { DSLRuleProvider.class, RuleProvider.class, DSLScriptContextProvider.class })\n+public class DSLRuleProvider\n+        implements RuleProvider, ModelRepositoryChangeListener, DSLScriptContextProvider, ReadyTracker {\n+\n+    private static final String RULES_MODEL_NAME = \"rules\";\n+    private static final String ITEMS_MODEL_NAME = \"items\";\n+    private static final String THINGS_MODEL_NAME = \"things\";\n+    static final String MIMETYPE_OPENHAB_DSL_RULE = \"application/vnd.openhab.dsl.rule\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(DSLRuleProvider.class);\n+    private final Collection<ProviderChangeListener<Rule>> listeners = new ArrayList<>();\n+    private final Map<String, Rule> rules = new HashMap<>();\n+    private final Map<String, IEvaluationContext> contexts = new HashMap<>();\n+    private final Map<String, XExpression> xExpressions = new HashMap<>();\n+    private int triggerId = 0;\n+    private Set<String> markers = new HashSet<>();\n+\n+    @Reference\n+    private @NonNullByDefault({}) ModelRepository modelRepository;\n+\n+    @Reference\n+    private @NonNullByDefault({}) ReadyService readyService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTMzNDg4OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.rule/src/org/openhab/core/model/rule/jvmmodel/RulesRefresher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOToyOToxNFrOGjWrBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOToyOToxNFrOGjWrBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNDgwNw==", "bodyText": "Personally I never use @Reference on fields because it complicates writing unit tests or perhaps you know an easy way to inject these fields in tests?", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439724807", "createdAt": "2020-06-13T09:29:14Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.rule/src/org/openhab/core/model/rule/jvmmodel/RulesRefresher.java", "diffHunk": "@@ -29,51 +49,133 @@\n  * @author Kai Kreuzer - added delayed execution\n  * @author Maoliang Huang - refactor\n  */\n-public class RulesRefresher {\n+@Component(immediate = true, service = {})\n+public class RulesRefresher implements ReadyTracker {\n \n-    // delay before rule resources are refreshed after items or services have changed\n-    private static final long REFRESH_DELAY = 2000;\n+    // delay in ms before rule resources are refreshed after items or services have changed\n+    private static final long REFRESH_DELAY = 5000;\n+\n+    private static final String POOL_NAME = \"automation\";\n+    public static final String RULES_REFRESH = \"rules_refresh\";\n \n     private final Logger logger = LoggerFactory.getLogger(RulesRefresher.class);\n \n-    ModelRepository modelRepository;\n-    private ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n     private ScheduledFuture<?> job;\n+    private ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(POOL_NAME);\n+    private boolean started;\n+    private ReadyMarker marker = new ReadyMarker(\"dsl\", RULES_REFRESH);\n \n-    public void setModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = modelRepository;\n-    }\n+    private ItemRegistryChangeListener itemRegistryChangeListener;\n+    private ThingRegistryChangeListener thingRegistryChangeListener;\n+\n+    @Reference\n+    protected ModelRepository modelRepository;\n+\n+    @Reference\n+    protected ItemRegistry itemRegistry;\n+\n+    @Reference\n+    protected ThingRegistry thingRegistry;\n \n-    public void unsetModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = null;\n+    @Reference\n+    protected EventPublisher eventPublisher;\n+\n+    @Reference\n+    protected ReadyService readyService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTMzNjExOnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.rule/src/org/openhab/core/model/rule/jvmmodel/RulesRefresher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTozMTozMVrOGjWroQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxOToyMTowN1rOGjY-pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNDk2MQ==", "bodyText": "Can this TODO be done in this PR?", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439724961", "createdAt": "2020-06-13T09:31:31Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.rule/src/org/openhab/core/model/rule/jvmmodel/RulesRefresher.java", "diffHunk": "@@ -29,51 +49,133 @@\n  * @author Kai Kreuzer - added delayed execution\n  * @author Maoliang Huang - refactor\n  */\n-public class RulesRefresher {\n+@Component(immediate = true, service = {})\n+public class RulesRefresher implements ReadyTracker {\n \n-    // delay before rule resources are refreshed after items or services have changed\n-    private static final long REFRESH_DELAY = 2000;\n+    // delay in ms before rule resources are refreshed after items or services have changed\n+    private static final long REFRESH_DELAY = 5000;\n+\n+    private static final String POOL_NAME = \"automation\";\n+    public static final String RULES_REFRESH = \"rules_refresh\";\n \n     private final Logger logger = LoggerFactory.getLogger(RulesRefresher.class);\n \n-    ModelRepository modelRepository;\n-    private ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n     private ScheduledFuture<?> job;\n+    private ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(POOL_NAME);\n+    private boolean started;\n+    private ReadyMarker marker = new ReadyMarker(\"dsl\", RULES_REFRESH);\n \n-    public void setModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = modelRepository;\n-    }\n+    private ItemRegistryChangeListener itemRegistryChangeListener;\n+    private ThingRegistryChangeListener thingRegistryChangeListener;\n+\n+    @Reference\n+    protected ModelRepository modelRepository;\n+\n+    @Reference\n+    protected ItemRegistry itemRegistry;\n+\n+    @Reference\n+    protected ThingRegistry thingRegistry;\n \n-    public void unsetModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = null;\n+    @Reference\n+    protected EventPublisher eventPublisher;\n+\n+    @Reference\n+    protected ReadyService readyService;\n+\n+    @Activate\n+    protected void activate() {\n+        readyService.registerTracker(this, new ReadyMarkerFilter().withType(\"dsl\").withIdentifier(\"rules\"));\n     }\n \n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC)\n     protected void addActionService(ActionService actionService) {\n-        scheduleRuleRefresh();\n+        if (started) {\n+            scheduleRuleRefresh();\n+        }\n     }\n \n     protected void removeActionService(ActionService actionService) {\n-        scheduleRuleRefresh();\n+        if (started) {\n+            scheduleRuleRefresh();\n+        }\n     }\n \n     protected synchronized void scheduleRuleRefresh() {\n         if (job != null && !job.isDone()) {\n             job.cancel(false);\n         }\n-        job = scheduler.schedule(runnable, REFRESH_DELAY, TimeUnit.MILLISECONDS);\n-    }\n-\n-    Runnable runnable = new Runnable() {\n-        @Override\n-        public void run() {\n+        job = scheduler.schedule(() -> {\n             try {\n-                if (modelRepository != null) {\n-                    modelRepository.reloadAllModelsOfType(\"rules\");\n-                }\n+                modelRepository.reloadAllModelsOfType(\"rules\");\n             } catch (Exception e) {\n                 logger.debug(\"Exception occurred during execution: {}\", e.getMessage(), e);\n             }\n+            readyService.markReady(marker);\n+        }, REFRESH_DELAY, TimeUnit.MILLISECONDS);\n+        readyService.unmarkReady(marker);\n+    }\n+\n+    private void setStartLevel() {\n+        if (!started) {\n+            started = true;\n+            // TODO: This is still a very dirty hack in the absence of a proper system start level management.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2MjU5Nw==", "bodyText": "No, definitely not - this is about eclipse-archived/smarthome#1896, which will be a huge new PR in itself.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439762597", "createdAt": "2020-06-13T19:21:07Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.model.rule/src/org/openhab/core/model/rule/jvmmodel/RulesRefresher.java", "diffHunk": "@@ -29,51 +49,133 @@\n  * @author Kai Kreuzer - added delayed execution\n  * @author Maoliang Huang - refactor\n  */\n-public class RulesRefresher {\n+@Component(immediate = true, service = {})\n+public class RulesRefresher implements ReadyTracker {\n \n-    // delay before rule resources are refreshed after items or services have changed\n-    private static final long REFRESH_DELAY = 2000;\n+    // delay in ms before rule resources are refreshed after items or services have changed\n+    private static final long REFRESH_DELAY = 5000;\n+\n+    private static final String POOL_NAME = \"automation\";\n+    public static final String RULES_REFRESH = \"rules_refresh\";\n \n     private final Logger logger = LoggerFactory.getLogger(RulesRefresher.class);\n \n-    ModelRepository modelRepository;\n-    private ScheduledExecutorService scheduler = Executors.newSingleThreadScheduledExecutor();\n     private ScheduledFuture<?> job;\n+    private ScheduledExecutorService scheduler = ThreadPoolManager.getScheduledPool(POOL_NAME);\n+    private boolean started;\n+    private ReadyMarker marker = new ReadyMarker(\"dsl\", RULES_REFRESH);\n \n-    public void setModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = modelRepository;\n-    }\n+    private ItemRegistryChangeListener itemRegistryChangeListener;\n+    private ThingRegistryChangeListener thingRegistryChangeListener;\n+\n+    @Reference\n+    protected ModelRepository modelRepository;\n+\n+    @Reference\n+    protected ItemRegistry itemRegistry;\n+\n+    @Reference\n+    protected ThingRegistry thingRegistry;\n \n-    public void unsetModelRepository(ModelRepository modelRepository) {\n-        this.modelRepository = null;\n+    @Reference\n+    protected EventPublisher eventPublisher;\n+\n+    @Reference\n+    protected ReadyService readyService;\n+\n+    @Activate\n+    protected void activate() {\n+        readyService.registerTracker(this, new ReadyMarkerFilter().withType(\"dsl\").withIdentifier(\"rules\"));\n     }\n \n+    @Reference(cardinality = ReferenceCardinality.MULTIPLE, policy = ReferencePolicy.DYNAMIC)\n     protected void addActionService(ActionService actionService) {\n-        scheduleRuleRefresh();\n+        if (started) {\n+            scheduleRuleRefresh();\n+        }\n     }\n \n     protected void removeActionService(ActionService actionService) {\n-        scheduleRuleRefresh();\n+        if (started) {\n+            scheduleRuleRefresh();\n+        }\n     }\n \n     protected synchronized void scheduleRuleRefresh() {\n         if (job != null && !job.isDone()) {\n             job.cancel(false);\n         }\n-        job = scheduler.schedule(runnable, REFRESH_DELAY, TimeUnit.MILLISECONDS);\n-    }\n-\n-    Runnable runnable = new Runnable() {\n-        @Override\n-        public void run() {\n+        job = scheduler.schedule(() -> {\n             try {\n-                if (modelRepository != null) {\n-                    modelRepository.reloadAllModelsOfType(\"rules\");\n-                }\n+                modelRepository.reloadAllModelsOfType(\"rules\");\n             } catch (Exception e) {\n                 logger.debug(\"Exception occurred during execution: {}\", e.getMessage(), e);\n             }\n+            readyService.markReady(marker);\n+        }, REFRESH_DELAY, TimeUnit.MILLISECONDS);\n+        readyService.unmarkReady(marker);\n+    }\n+\n+    private void setStartLevel() {\n+        if (!started) {\n+            started = true;\n+            // TODO: This is still a very dirty hack in the absence of a proper system start level management.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNDk2MQ=="}, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTMzOTA5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/jvmmodel/ScriptJvmModelInferrer.xtend", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTozODoxMlrOGjWtFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxOTozNDozN1rOGjZCKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNTMzMg==", "bodyText": "Please use the same indentation everywhere in this file instead of mixing tabs and spaces.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439725332", "createdAt": "2020-06-13T09:38:12Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/jvmmodel/ScriptJvmModelInferrer.xtend", "diffHunk": "@@ -76,19 +94,29 @@ class ScriptJvmModelInferrer extends AbstractModelInferrer {\n \t\t\t}\n \t\t]\n \n-\t\t itemRegistry?.items?.forEach[ item |\n-\t\t \tval name = item.name\n-\t\t\t\tif (fieldNames.add(name)) {\n-\t\t \t\tmembers += \tscript.toField(item.name, script.newTypeRef(item.class)) [\n-\t\t\t \t\tstatic = true\n-\t\t\t \t]\n-\t\t \t} else {\n-\t\t \t\tlogger.warn(\"Duplicate field: '{}'. Ignoring '{}'.\", item.name, item.class.name)\n-\t\t \t}\n-\t\t ]\n+        itemRegistry?.items?.forEach[ item |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc2MzQ5OA==", "bodyText": "I now applied the formatter on the full file, which touched most lines.", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439763498", "createdAt": "2020-06-13T19:34:37Z", "author": {"login": "kaikreuzer"}, "path": "bundles/org.openhab.core.model.script/src/org/openhab/core/model/script/jvmmodel/ScriptJvmModelInferrer.xtend", "diffHunk": "@@ -76,19 +94,29 @@ class ScriptJvmModelInferrer extends AbstractModelInferrer {\n \t\t\t}\n \t\t]\n \n-\t\t itemRegistry?.items?.forEach[ item |\n-\t\t \tval name = item.name\n-\t\t\t\tif (fieldNames.add(name)) {\n-\t\t \t\tmembers += \tscript.toField(item.name, script.newTypeRef(item.class)) [\n-\t\t\t \t\tstatic = true\n-\t\t\t \t]\n-\t\t \t} else {\n-\t\t \t\tlogger.warn(\"Duplicate field: '{}'. Ignoring '{}'.\", item.name, item.class.name)\n-\t\t \t}\n-\t\t ]\n+        itemRegistry?.items?.forEach[ item |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNTMzMg=="}, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTM0MDM2OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core.model.script.runtime/src/org/openhab/core/model/script/runtime/internal/engine/DSLScriptEngineFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTo0MDo1M1rOGjWttw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QwOTo0MDo1M1rOGjWttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTcyNTQ5NQ==", "bodyText": "Use constructor injection here instead?", "url": "https://github.com/openhab/openhab-core/pull/1451#discussion_r439725495", "createdAt": "2020-06-13T09:40:53Z", "author": {"login": "wborn"}, "path": "bundles/org.openhab.core.model.script.runtime/src/org/openhab/core/model/script/runtime/internal/engine/DSLScriptEngineFactory.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) 2010-2020 Contributors to the openHAB project\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ */\n+package org.openhab.core.model.script.runtime.internal.engine;\n+\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.eclipse.jdt.annotation.NonNullByDefault;\n+import org.eclipse.jdt.annotation.Nullable;\n+import org.openhab.core.automation.module.script.ScriptEngineFactory;\n+import org.openhab.core.model.script.engine.ScriptEngine;\n+import org.openhab.core.model.script.runtime.DSLScriptContextProvider;\n+import org.osgi.service.component.annotations.Activate;\n+import org.osgi.service.component.annotations.Component;\n+import org.osgi.service.component.annotations.Reference;\n+import org.osgi.service.component.annotations.ReferenceCardinality;\n+\n+/**\n+ * An implementation of {@link ScriptEngineFactory} for DSL scripts.\n+ *\n+ * @author Kai Kreuzer - Initial contribution\n+ */\n+@NonNullByDefault\n+@Component(service = ScriptEngineFactory.class)\n+public class DSLScriptEngineFactory implements ScriptEngineFactory {\n+\n+    private static final String SCRIPT_TYPE = \"dsl\";\n+\n+    private @NonNullByDefault({}) DSLScriptEngine dslScriptEngine;\n+\n+    @Reference\n+    protected @NonNullByDefault({}) ScriptEngine scriptEngine;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c10d13bb9d02f3a090a17b4625acb601ae6869e9"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3381, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}