{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5MTU4ODc2", "number": 1406, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxOTo0MDo1M1rODu6SHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMDowODowNFrODu6bGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTE1OTk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxOTo0MDo1M1rOGBCy8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNzo1Mzo0MVrOGC6amg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NzU2OA==", "bodyText": "Do we really have to catch a base Exception here. Or is a more specific one possible (e.g. IAE thrown by the compareTo() method).", "url": "https://github.com/openhab/openhab-core/pull/1406#discussion_r403747568", "createdAt": "2020-04-05T19:40:53Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java", "diffHunk": "@@ -251,18 +251,23 @@ protected void notifyListeners(final State oldState, final State newState) {\n         Set<StateChangeListener> clonedListeners = null;\n         clonedListeners = new CopyOnWriteArraySet<>(listeners);\n         ExecutorService pool = ThreadPoolManager.getPool(ITEM_THREADPOOLNAME);\n-        for (final StateChangeListener listener : clonedListeners) {\n-            pool.execute(() -> {\n-                try {\n-                    listener.stateUpdated(GenericItem.this, newState);\n-                    if (newState != null && !newState.equals(oldState)) {\n-                        listener.stateChanged(GenericItem.this, oldState, newState);\n+        try {\n+            final boolean stateChanged = newState != null && !newState.equals(oldState);\n+            clonedListeners.forEach(listener ->\n+                pool.execute(() -> {\n+                    try {\n+                        listener.stateUpdated(GenericItem.this, newState);\n+                        if (stateChanged) {\n+                            listener.stateChanged(GenericItem.this, oldState, newState);\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n+                                GenericItem.this.getName(), e.getMessage(), e);\n                     }\n-                } catch (Exception e) {\n-                    logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n-                            GenericItem.this.getName(), e.getMessage(), e);\n-                }\n-            });\n+                }));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86744d0cc0f549b74df87c98ee27e8280a595fee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDIyNTk1Mw==", "bodyText": "Changed to IAE. WDYT about making compareTo a synchronized method?", "url": "https://github.com/openhab/openhab-core/pull/1406#discussion_r404225953", "createdAt": "2020-04-06T16:28:50Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java", "diffHunk": "@@ -251,18 +251,23 @@ protected void notifyListeners(final State oldState, final State newState) {\n         Set<StateChangeListener> clonedListeners = null;\n         clonedListeners = new CopyOnWriteArraySet<>(listeners);\n         ExecutorService pool = ThreadPoolManager.getPool(ITEM_THREADPOOLNAME);\n-        for (final StateChangeListener listener : clonedListeners) {\n-            pool.execute(() -> {\n-                try {\n-                    listener.stateUpdated(GenericItem.this, newState);\n-                    if (newState != null && !newState.equals(oldState)) {\n-                        listener.stateChanged(GenericItem.this, oldState, newState);\n+        try {\n+            final boolean stateChanged = newState != null && !newState.equals(oldState);\n+            clonedListeners.forEach(listener ->\n+                pool.execute(() -> {\n+                    try {\n+                        listener.stateUpdated(GenericItem.this, newState);\n+                        if (stateChanged) {\n+                            listener.stateChanged(GenericItem.this, oldState, newState);\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n+                                GenericItem.this.getName(), e.getMessage(), e);\n                     }\n-                } catch (Exception e) {\n-                    logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n-                            GenericItem.this.getName(), e.getMessage(), e);\n-                }\n-            });\n+                }));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NzU2OA=="}, "originalCommit": {"oid": "86744d0cc0f549b74df87c98ee27e8280a595fee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAyNzQzMg==", "bodyText": "In general I am not a big fan of synchronized for this method because we cannot be sure the result is still the same after the synchronization was left. If we want to force that we have to snyc the whole block - the compared objects too. We should make sure the values used for comparison are immutable and preferable final.", "url": "https://github.com/openhab/openhab-core/pull/1406#discussion_r405027432", "createdAt": "2020-04-07T18:35:13Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java", "diffHunk": "@@ -251,18 +251,23 @@ protected void notifyListeners(final State oldState, final State newState) {\n         Set<StateChangeListener> clonedListeners = null;\n         clonedListeners = new CopyOnWriteArraySet<>(listeners);\n         ExecutorService pool = ThreadPoolManager.getPool(ITEM_THREADPOOLNAME);\n-        for (final StateChangeListener listener : clonedListeners) {\n-            pool.execute(() -> {\n-                try {\n-                    listener.stateUpdated(GenericItem.this, newState);\n-                    if (newState != null && !newState.equals(oldState)) {\n-                        listener.stateChanged(GenericItem.this, oldState, newState);\n+        try {\n+            final boolean stateChanged = newState != null && !newState.equals(oldState);\n+            clonedListeners.forEach(listener ->\n+                pool.execute(() -> {\n+                    try {\n+                        listener.stateUpdated(GenericItem.this, newState);\n+                        if (stateChanged) {\n+                            listener.stateChanged(GenericItem.this, oldState, newState);\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n+                                GenericItem.this.getName(), e.getMessage(), e);\n                     }\n-                } catch (Exception e) {\n-                    logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n-                            GenericItem.this.getName(), e.getMessage(), e);\n-                }\n-            });\n+                }));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NzU2OA=="}, "originalCommit": {"oid": "86744d0cc0f549b74df87c98ee27e8280a595fee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTAzODA4Ng==", "bodyText": "The problem is not our code. The problem is that https://github.com/unitsofmeasurement/uom-se/blob/b9b4d770e25a245492d98909529e51961edb7bc3/src/main/java/tec/uom/se/unit/ProductUnit.java#L75 is not as final as it looks (the array itself is final, its elements are not) and during comparison the elements are changed https://github.com/unitsofmeasurement/uom-se/blob/b9b4d770e25a245492d98909529e51961edb7bc3/src/main/java/tec/uom/se/unit/ProductUnit.java#L279 which probably causes a problem if the same Unit is compared a second time while the first comparison is not finished. That explains why moving the comparison solves our problem and why it only happens under high load conditions when a lot of scheduled comparison are executed.\nI don\u2018t see an easy way to solve this (except changing the array to a thread-safe collection-type).", "url": "https://github.com/openhab/openhab-core/pull/1406#discussion_r405038086", "createdAt": "2020-04-07T18:52:36Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java", "diffHunk": "@@ -251,18 +251,23 @@ protected void notifyListeners(final State oldState, final State newState) {\n         Set<StateChangeListener> clonedListeners = null;\n         clonedListeners = new CopyOnWriteArraySet<>(listeners);\n         ExecutorService pool = ThreadPoolManager.getPool(ITEM_THREADPOOLNAME);\n-        for (final StateChangeListener listener : clonedListeners) {\n-            pool.execute(() -> {\n-                try {\n-                    listener.stateUpdated(GenericItem.this, newState);\n-                    if (newState != null && !newState.equals(oldState)) {\n-                        listener.stateChanged(GenericItem.this, oldState, newState);\n+        try {\n+            final boolean stateChanged = newState != null && !newState.equals(oldState);\n+            clonedListeners.forEach(listener ->\n+                pool.execute(() -> {\n+                    try {\n+                        listener.stateUpdated(GenericItem.this, newState);\n+                        if (stateChanged) {\n+                            listener.stateChanged(GenericItem.this, oldState, newState);\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n+                                GenericItem.this.getName(), e.getMessage(), e);\n                     }\n-                } catch (Exception e) {\n-                    logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n-                            GenericItem.this.getName(), e.getMessage(), e);\n-                }\n-            });\n+                }));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NzU2OA=="}, "originalCommit": {"oid": "86744d0cc0f549b74df87c98ee27e8280a595fee"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTcwNzQxOA==", "bodyText": "Your current change is a good step and I will merge it for now. I think we can synchronize the comparison later if needed.\nMaybe @keilw is interested in this topic.", "url": "https://github.com/openhab/openhab-core/pull/1406#discussion_r405707418", "createdAt": "2020-04-08T17:53:41Z", "author": {"login": "cweitkamp"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java", "diffHunk": "@@ -251,18 +251,23 @@ protected void notifyListeners(final State oldState, final State newState) {\n         Set<StateChangeListener> clonedListeners = null;\n         clonedListeners = new CopyOnWriteArraySet<>(listeners);\n         ExecutorService pool = ThreadPoolManager.getPool(ITEM_THREADPOOLNAME);\n-        for (final StateChangeListener listener : clonedListeners) {\n-            pool.execute(() -> {\n-                try {\n-                    listener.stateUpdated(GenericItem.this, newState);\n-                    if (newState != null && !newState.equals(oldState)) {\n-                        listener.stateChanged(GenericItem.this, oldState, newState);\n+        try {\n+            final boolean stateChanged = newState != null && !newState.equals(oldState);\n+            clonedListeners.forEach(listener ->\n+                pool.execute(() -> {\n+                    try {\n+                        listener.stateUpdated(GenericItem.this, newState);\n+                        if (stateChanged) {\n+                            listener.stateChanged(GenericItem.this, oldState, newState);\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n+                                GenericItem.this.getName(), e.getMessage(), e);\n                     }\n-                } catch (Exception e) {\n-                    logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n-                            GenericItem.this.getName(), e.getMessage(), e);\n-                }\n-            });\n+                }));\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc0NzU2OA=="}, "originalCommit": {"oid": "86744d0cc0f549b74df87c98ee27e8280a595fee"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTE4Mjk5OnYy", "diffSide": "RIGHT", "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMDowODowNVrOGBC-kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQyMDoyODo0M1rOGBDH7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDU0NA==", "bodyText": "Minor point - I assume that this should say -:\nfailed comparing oldState '{}' to newState '{}' during state update of item\n\nor\nfailed comparing oldState '{}' to newState '{}' while updating state of item\n\nor something similar - basically the \"about\" doesn't seem right.\n(I told you it was minor - sorry for being pick :) ).", "url": "https://github.com/openhab/openhab-core/pull/1406#discussion_r403750544", "createdAt": "2020-04-05T20:08:05Z", "author": {"login": "cdjackson"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java", "diffHunk": "@@ -251,18 +251,23 @@ protected void notifyListeners(final State oldState, final State newState) {\n         Set<StateChangeListener> clonedListeners = null;\n         clonedListeners = new CopyOnWriteArraySet<>(listeners);\n         ExecutorService pool = ThreadPoolManager.getPool(ITEM_THREADPOOLNAME);\n-        for (final StateChangeListener listener : clonedListeners) {\n-            pool.execute(() -> {\n-                try {\n-                    listener.stateUpdated(GenericItem.this, newState);\n-                    if (newState != null && !newState.equals(oldState)) {\n-                        listener.stateChanged(GenericItem.this, oldState, newState);\n+        try {\n+            final boolean stateChanged = newState != null && !newState.equals(oldState);\n+            clonedListeners.forEach(listener ->\n+                pool.execute(() -> {\n+                    try {\n+                        listener.stateUpdated(GenericItem.this, newState);\n+                        if (stateChanged) {\n+                            listener.stateChanged(GenericItem.this, oldState, newState);\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n+                                GenericItem.this.getName(), e.getMessage(), e);\n                     }\n-                } catch (Exception e) {\n-                    logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n-                            GenericItem.this.getName(), e.getMessage(), e);\n-                }\n-            });\n+                }));\n+        } catch (Exception e) {\n+            logger.warn(\"failed comparing oldState '{}' to newState '{}' about state update of item {}: {}\", oldState,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86744d0cc0f549b74df87c98ee27e8280a595fee"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1Mjk0Mw==", "bodyText": "Copy&Paste error... Will fix it.", "url": "https://github.com/openhab/openhab-core/pull/1406#discussion_r403752943", "createdAt": "2020-04-05T20:28:43Z", "author": {"login": "J-N-K"}, "path": "bundles/org.openhab.core/src/main/java/org/openhab/core/items/GenericItem.java", "diffHunk": "@@ -251,18 +251,23 @@ protected void notifyListeners(final State oldState, final State newState) {\n         Set<StateChangeListener> clonedListeners = null;\n         clonedListeners = new CopyOnWriteArraySet<>(listeners);\n         ExecutorService pool = ThreadPoolManager.getPool(ITEM_THREADPOOLNAME);\n-        for (final StateChangeListener listener : clonedListeners) {\n-            pool.execute(() -> {\n-                try {\n-                    listener.stateUpdated(GenericItem.this, newState);\n-                    if (newState != null && !newState.equals(oldState)) {\n-                        listener.stateChanged(GenericItem.this, oldState, newState);\n+        try {\n+            final boolean stateChanged = newState != null && !newState.equals(oldState);\n+            clonedListeners.forEach(listener ->\n+                pool.execute(() -> {\n+                    try {\n+                        listener.stateUpdated(GenericItem.this, newState);\n+                        if (stateChanged) {\n+                            listener.stateChanged(GenericItem.this, oldState, newState);\n+                        }\n+                    } catch (Exception e) {\n+                        logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n+                                GenericItem.this.getName(), e.getMessage(), e);\n                     }\n-                } catch (Exception e) {\n-                    logger.warn(\"failed notifying listener '{}' about state update of item {}: {}\", listener,\n-                            GenericItem.this.getName(), e.getMessage(), e);\n-                }\n-            });\n+                }));\n+        } catch (Exception e) {\n+            logger.warn(\"failed comparing oldState '{}' to newState '{}' about state update of item {}: {}\", oldState,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzc1MDU0NA=="}, "originalCommit": {"oid": "86744d0cc0f549b74df87c98ee27e8280a595fee"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3180, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}