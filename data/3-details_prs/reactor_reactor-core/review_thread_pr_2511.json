{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MDkxNTU5", "number": 2511, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoxMjoyMVrOE975PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoxMzowM1rOE976Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzc5OTAxOnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/coreFeatures.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoxMjoyMVrOH64d5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoxMjoyMVrOH64d5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwNDYxMg==", "bodyText": "It might be still a bit ambiguous for someone less familiar with Reactive Streams (this could be their first exposure to the concepts).\nSuggestion:\nthat emits at most one item via the `onNext` signal then terminates with an `onComplete` signal (successful `Mono`, with or without value), or only emits a single `onError` signal (failed `Mono`).", "url": "https://github.com/reactor/reactor-core/pull/2511#discussion_r531504612", "createdAt": "2020-11-27T10:12:21Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/coreFeatures.adoc", "diffHunk": "@@ -47,7 +47,11 @@ The following image shows how a `Mono` transforms an item:\n image::https://raw.githubusercontent.com/reactor/reactor-core/v3.0.7.RELEASE/src/docs/marble/mono.png[Mono]\n \n A `Mono<T>` is a specialized `Publisher<T>` that emits at most one item and then\n-(optionally) terminates with an `onComplete` signal or an `onError` signal.\n+terminates with an `onComplete` signal or alternatively, emits an `onError` signal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae87d235a7c004d650537ab6b5430f986945f6c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzgwMTQyOnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/coreFeatures.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoxMzowM1rOH64fXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0NTozNlrOH7Ck3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwNDk5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            of tests. On the other hand, `onNext+onError` is explicitly forbidden.\n          \n          \n            \n            of tests. On the other hand, `onNext` + `onError` is explicitly forbidden.", "url": "https://github.com/reactor/reactor-core/pull/2511#discussion_r531504990", "createdAt": "2020-11-27T10:13:03Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/coreFeatures.adoc", "diffHunk": "@@ -47,7 +47,11 @@ The following image shows how a `Mono` transforms an item:\n image::https://raw.githubusercontent.com/reactor/reactor-core/v3.0.7.RELEASE/src/docs/marble/mono.png[Mono]\n \n A `Mono<T>` is a specialized `Publisher<T>` that emits at most one item and then\n-(optionally) terminates with an `onComplete` signal or an `onError` signal.\n+terminates with an `onComplete` signal or alternatively, emits an `onError` signal.\n+Most `Mono` implementations are expected to immediately call `onComplete` on their\n+`Subscriber` after having called `onNext`. `Mono.never()` is an outlier: it doesn't\n+emit any signal, which is not technically forbidden although not terribly useful outside\n+of tests. On the other hand, `onNext+onError` is explicitly forbidden.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bae87d235a7c004d650537ab6b5430f986945f6c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxNTUzMg==", "bodyText": "Tried that, but this leaves the room for a line change that I wanted to avoid. Your call.", "url": "https://github.com/reactor/reactor-core/pull/2511#discussion_r531515532", "createdAt": "2020-11-27T10:32:22Z", "author": {"login": "ericbottard"}, "path": "docs/asciidoc/coreFeatures.adoc", "diffHunk": "@@ -47,7 +47,11 @@ The following image shows how a `Mono` transforms an item:\n image::https://raw.githubusercontent.com/reactor/reactor-core/v3.0.7.RELEASE/src/docs/marble/mono.png[Mono]\n \n A `Mono<T>` is a specialized `Publisher<T>` that emits at most one item and then\n-(optionally) terminates with an `onComplete` signal or an `onError` signal.\n+terminates with an `onComplete` signal or alternatively, emits an `onError` signal.\n+Most `Mono` implementations are expected to immediately call `onComplete` on their\n+`Subscriber` after having called `onNext`. `Mono.never()` is an outlier: it doesn't\n+emit any signal, which is not technically forbidden although not terribly useful outside\n+of tests. On the other hand, `onNext+onError` is explicitly forbidden.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwNDk5MA=="}, "originalCommit": {"oid": "bae87d235a7c004d650537ab6b5430f986945f6c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3MDIzNg==", "bodyText": "ah I see, ugly line breaks is the issue. let me suggest a third phrasing option then:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            of tests. On the other hand, `onNext+onError` is explicitly forbidden.\n          \n          \n            \n            of tests. On the other hand, a combination of `onNext` and `onError` is explicitly forbidden.", "url": "https://github.com/reactor/reactor-core/pull/2511#discussion_r531670236", "createdAt": "2020-11-27T15:45:36Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/coreFeatures.adoc", "diffHunk": "@@ -47,7 +47,11 @@ The following image shows how a `Mono` transforms an item:\n image::https://raw.githubusercontent.com/reactor/reactor-core/v3.0.7.RELEASE/src/docs/marble/mono.png[Mono]\n \n A `Mono<T>` is a specialized `Publisher<T>` that emits at most one item and then\n-(optionally) terminates with an `onComplete` signal or an `onError` signal.\n+terminates with an `onComplete` signal or alternatively, emits an `onError` signal.\n+Most `Mono` implementations are expected to immediately call `onComplete` on their\n+`Subscriber` after having called `onNext`. `Mono.never()` is an outlier: it doesn't\n+emit any signal, which is not technically forbidden although not terribly useful outside\n+of tests. On the other hand, `onNext+onError` is explicitly forbidden.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUwNDk5MA=="}, "originalCommit": {"oid": "bae87d235a7c004d650537ab6b5430f986945f6c"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 854, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}