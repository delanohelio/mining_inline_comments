{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzQyODYz", "number": 2250, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1NjoxMVrOELvz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDoxMjozMlrOEMgg2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzUzMTE2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/LambdaMonoSubscriber.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1NjoxMVrOGtdXlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1NjoxMVrOGtdXlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyMDI3Nw==", "bodyText": "this looks pretty much aligned with what is done in LambdaSubscriber#onNext, taking into account the fact that for Mono it already cancels the subscription (and calls completeConsumer on top of that). that said, maybe the only thing missing vs the flux version is Exceptions.throwIfFatal(t)", "url": "https://github.com/reactor/reactor-core/pull/2250#discussion_r450320277", "createdAt": "2020-07-06T15:56:11Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/LambdaMonoSubscriber.java", "diffHunk": "@@ -171,8 +171,7 @@ public final void onNext(T x) {\n \t\t\t\tconsumer.accept(x);\n \t\t\t}\n \t\t\tcatch (Throwable t) {\n-\t\t\t\tOperators.onErrorDropped(t, this.initialContext);\n-\t\t\t\treturn;\n+\t\t\t\tdoError(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ceb8be8e0928f87707030a541a1d160d100f0e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzUzNTg1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1NzoyMlrOGtdaVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNTo1NzoyMlrOGtdaVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDMyMDk4Mw==", "bodyText": "I would keep at least one additional test where the errorHolder::set is omitted, to demonstrate that if there is no error consumer, the exception in nextConsumer bubbles up wrapped in an ErrorCallbackNotImplemented exception.", "url": "https://github.com/reactor/reactor-core/pull/2250#discussion_r450320983", "createdAt": "2020-07-06T15:57:22Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "diffHunk": "@@ -153,7 +153,7 @@ public void noSubscriptionConsumerTriggersRequestOfMax() {\n \t}\n \n \t@Test\n-\tpublic void onNextConsumerExceptionBubblesUpDoesntTriggerCancellation() {\n+\tpublic void onNextConsumerExceptionHandledByErrorHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55ceb8be8e0928f87707030a541a1d160d100f0e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDQxNDQxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToxODowOFrOGufbJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToxODowOFrOGufbJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMjUzMg==", "bodyText": "the errorHolder is unused in this test", "url": "https://github.com/reactor/reactor-core/pull/2250#discussion_r451402532", "createdAt": "2020-07-08T09:18:08Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "diffHunk": "@@ -165,18 +165,38 @@ public void onNextConsumerExceptionBubblesUpDoesntTriggerCancellation() {\n \t\tTestSubscription testSubscription = new TestSubscription();\n \t\ttested.onSubscribe(testSubscription);\n \n-\t\t//as Mono is single-value, it cancels early on onNext. this leads to an exception\n-\t\t//during onNext to be bubbled up as a BubbledException, not propagated through onNext\n+\t\t//the error is expected to be propagated through doError\n+\t\ttested.onNext(\"foo\");\n+\n+\t\tassertThat(errorHolder.get()).as(\"onError\").isInstanceOf(IllegalArgumentException.class);\n+\t\tassertThat(testSubscription.isCancelled).as(\"subscription isCancelled\").isTrue();\n+\t}\n+\n+\n+\t@Test\n+\tpublic void onNextConsumerBubblesUpErrorCallbackNotImplemented() {\n+\t\tAtomicReference<Throwable> errorHolder = new AtomicReference<>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b636b35edd573ef059b2500b80a3da87b6f51ebd"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDQxNDY5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToxODoxM1rOGufbTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwOToxOTo1NlrOGuffdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMjU3NQ==", "bodyText": "mmh UnsupportedOperatorException ?? \ud83e\udd14", "url": "https://github.com/reactor/reactor-core/pull/2250#discussion_r451402575", "createdAt": "2020-07-08T09:18:13Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "diffHunk": "@@ -165,18 +165,38 @@ public void onNextConsumerExceptionBubblesUpDoesntTriggerCancellation() {\n \t\tTestSubscription testSubscription = new TestSubscription();\n \t\ttested.onSubscribe(testSubscription);\n \n-\t\t//as Mono is single-value, it cancels early on onNext. this leads to an exception\n-\t\t//during onNext to be bubbled up as a BubbledException, not propagated through onNext\n+\t\t//the error is expected to be propagated through doError\n+\t\ttested.onNext(\"foo\");\n+\n+\t\tassertThat(errorHolder.get()).as(\"onError\").isInstanceOf(IllegalArgumentException.class);\n+\t\tassertThat(testSubscription.isCancelled).as(\"subscription isCancelled\").isTrue();\n+\t}\n+\n+\n+\t@Test\n+\tpublic void onNextConsumerBubblesUpErrorCallbackNotImplemented() {\n+\t\tAtomicReference<Throwable> errorHolder = new AtomicReference<>(null);\n+\n+\t\tLambdaMonoSubscriber<String> tested = new LambdaMonoSubscriber<>(\n+\t\t\t\tvalue -> { throw new IllegalArgumentException(); },\n+\t\t\t\tnull,\n+\t\t\t\t() -> {},\n+\t\t\t\tnull);\n+\n+\t\tTestSubscription testSubscription = new TestSubscription();\n+\t\ttested.onSubscribe(testSubscription);\n+\n+\t\t//the error is expected to be thrown as there is no error handler\n \t\ttry {\n \t\t\ttested.onNext(\"foo\");\n-\t\t\tfail(\"Expected a bubbling Exception\");\n-\t\t} catch (RuntimeException e) {\n-\t\t\tassertThat(e).matches(Exceptions::isBubbling, \"Expected a bubbling Exception\")\n-\t\t\t             .hasCauseInstanceOf(IllegalArgumentException.class);\n+\t\t\tfail(\"Expected IllegalArgumentException to be thrown\");\n+\t\t}\n+\t\tcatch (UnsupportedOperationException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b636b35edd573ef059b2500b80a3da87b6f51ebd"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMzYzNg==", "bodyText": "also you could use assertj assertThatIllegalArgumentException().isThrownBy(() -> tested.onNext(\"foo\"))", "url": "https://github.com/reactor/reactor-core/pull/2250#discussion_r451403636", "createdAt": "2020-07-08T09:19:56Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "diffHunk": "@@ -165,18 +165,38 @@ public void onNextConsumerExceptionBubblesUpDoesntTriggerCancellation() {\n \t\tTestSubscription testSubscription = new TestSubscription();\n \t\ttested.onSubscribe(testSubscription);\n \n-\t\t//as Mono is single-value, it cancels early on onNext. this leads to an exception\n-\t\t//during onNext to be bubbled up as a BubbledException, not propagated through onNext\n+\t\t//the error is expected to be propagated through doError\n+\t\ttested.onNext(\"foo\");\n+\n+\t\tassertThat(errorHolder.get()).as(\"onError\").isInstanceOf(IllegalArgumentException.class);\n+\t\tassertThat(testSubscription.isCancelled).as(\"subscription isCancelled\").isTrue();\n+\t}\n+\n+\n+\t@Test\n+\tpublic void onNextConsumerBubblesUpErrorCallbackNotImplemented() {\n+\t\tAtomicReference<Throwable> errorHolder = new AtomicReference<>(null);\n+\n+\t\tLambdaMonoSubscriber<String> tested = new LambdaMonoSubscriber<>(\n+\t\t\t\tvalue -> { throw new IllegalArgumentException(); },\n+\t\t\t\tnull,\n+\t\t\t\t() -> {},\n+\t\t\t\tnull);\n+\n+\t\tTestSubscription testSubscription = new TestSubscription();\n+\t\ttested.onSubscribe(testSubscription);\n+\n+\t\t//the error is expected to be thrown as there is no error handler\n \t\ttry {\n \t\t\ttested.onNext(\"foo\");\n-\t\t\tfail(\"Expected a bubbling Exception\");\n-\t\t} catch (RuntimeException e) {\n-\t\t\tassertThat(e).matches(Exceptions::isBubbling, \"Expected a bubbling Exception\")\n-\t\t\t             .hasCauseInstanceOf(IllegalArgumentException.class);\n+\t\t\tfail(\"Expected IllegalArgumentException to be thrown\");\n+\t\t}\n+\t\tcatch (UnsupportedOperationException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTQwMjU3NQ=="}, "originalCommit": {"oid": "b636b35edd573ef059b2500b80a3da87b6f51ebd"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNTUxMDY1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNDoxMjozMlrOGuqECA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNjoxNToyM1rOGuvbxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU3Njg0MA==", "bodyText": "eh sorry for the back and forth. now the test fails because obviously no error handler == ErrorCallbackNotImplemented. So the assertion should A) check that the exception satisfies the Exceptions.isErrorCallbackNotImplemented Predicate and B) that its cause is the IllegalArgumentException.\nthe starting point of the assertion should thus be the more generic assertThatExceptionOfType(RuntimeException.class).isThrownBy(() -> ....", "url": "https://github.com/reactor/reactor-core/pull/2250#discussion_r451576840", "createdAt": "2020-07-08T14:12:32Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "diffHunk": "@@ -165,18 +166,27 @@ public void onNextConsumerExceptionBubblesUpDoesntTriggerCancellation() {\n \t\tTestSubscription testSubscription = new TestSubscription();\n \t\ttested.onSubscribe(testSubscription);\n \n-\t\t//as Mono is single-value, it cancels early on onNext. this leads to an exception\n-\t\t//during onNext to be bubbled up as a BubbledException, not propagated through onNext\n-\t\ttry {\n-\t\t\ttested.onNext(\"foo\");\n-\t\t\tfail(\"Expected a bubbling Exception\");\n-\t\t} catch (RuntimeException e) {\n-\t\t\tassertThat(e).matches(Exceptions::isBubbling, \"Expected a bubbling Exception\")\n-\t\t\t             .hasCauseInstanceOf(IllegalArgumentException.class);\n-\t\t}\n+\t\t//the error is expected to be propagated through doError\n+\t\ttested.onNext(\"foo\");\n \n-\t\tassertThat(errorHolder.get()).as(\"onError\").isNull();\n-\t\tassertThat(testSubscription.isCancelled).as(\"subscription isCancelled\").isFalse();\n+\t\tassertThat(errorHolder.get()).as(\"onError\").isInstanceOf(IllegalArgumentException.class);\n+\t\tassertThat(testSubscription.isCancelled).as(\"subscription isCancelled\").isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void onNextConsumerBubblesUpErrorCallbackNotImplemented() {\n+\t\tLambdaMonoSubscriber<String> tested = new LambdaMonoSubscriber<>(\n+\t\t\t\tvalue -> { throw new IllegalArgumentException(); },\n+\t\t\t\tnull,\n+\t\t\t\t() -> {},\n+\t\t\t\tnull);\n+\n+\t\tTestSubscription testSubscription = new TestSubscription();\n+\t\ttested.onSubscribe(testSubscription);\n+\n+\t\t//the error is expected to be thrown as there is no error handler\n+\t\tassertThatIllegalArgumentException().isThrownBy(() -> tested.onNext(\"foo\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc79cf3f568366836f027547c8cb36faf8dfaffc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTY2NDgzNw==", "bodyText": "My bad, I didnt' know how I missed it when re-running the test \ud83d\ude47\u200d\u2640\ufe0f", "url": "https://github.com/reactor/reactor-core/pull/2250#discussion_r451664837", "createdAt": "2020-07-08T16:15:23Z", "author": {"login": "aneveu"}, "path": "reactor-core/src/test/java/reactor/core/publisher/LambdaMonoSubscriberTest.java", "diffHunk": "@@ -165,18 +166,27 @@ public void onNextConsumerExceptionBubblesUpDoesntTriggerCancellation() {\n \t\tTestSubscription testSubscription = new TestSubscription();\n \t\ttested.onSubscribe(testSubscription);\n \n-\t\t//as Mono is single-value, it cancels early on onNext. this leads to an exception\n-\t\t//during onNext to be bubbled up as a BubbledException, not propagated through onNext\n-\t\ttry {\n-\t\t\ttested.onNext(\"foo\");\n-\t\t\tfail(\"Expected a bubbling Exception\");\n-\t\t} catch (RuntimeException e) {\n-\t\t\tassertThat(e).matches(Exceptions::isBubbling, \"Expected a bubbling Exception\")\n-\t\t\t             .hasCauseInstanceOf(IllegalArgumentException.class);\n-\t\t}\n+\t\t//the error is expected to be propagated through doError\n+\t\ttested.onNext(\"foo\");\n \n-\t\tassertThat(errorHolder.get()).as(\"onError\").isNull();\n-\t\tassertThat(testSubscription.isCancelled).as(\"subscription isCancelled\").isFalse();\n+\t\tassertThat(errorHolder.get()).as(\"onError\").isInstanceOf(IllegalArgumentException.class);\n+\t\tassertThat(testSubscription.isCancelled).as(\"subscription isCancelled\").isTrue();\n+\t}\n+\n+\t@Test\n+\tpublic void onNextConsumerBubblesUpErrorCallbackNotImplemented() {\n+\t\tLambdaMonoSubscriber<String> tested = new LambdaMonoSubscriber<>(\n+\t\t\t\tvalue -> { throw new IllegalArgumentException(); },\n+\t\t\t\tnull,\n+\t\t\t\t() -> {},\n+\t\t\t\tnull);\n+\n+\t\tTestSubscription testSubscription = new TestSubscription();\n+\t\ttested.onSubscribe(testSubscription);\n+\n+\t\t//the error is expected to be thrown as there is no error handler\n+\t\tassertThatIllegalArgumentException().isThrownBy(() -> tested.onNext(\"foo\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTU3Njg0MA=="}, "originalCommit": {"oid": "cc79cf3f568366836f027547c8cb36faf8dfaffc"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 883, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}