{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDMxOTE3", "number": 2395, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1NToxMlrOEmJ6YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyNzo0M1rOEs-ODg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDQzNzQ0OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1NToxMlrOHWBOfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTo0MDoxOFrOHWhZ6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MDgxMg==", "bodyText": "IMO we should go with AssertJ and not introduce an intermediate step that we will need to change later", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r492850812", "createdAt": "2020-09-22T15:55:12Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -26,29 +26,30 @@\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import org.junit.AfterClass;\n+import org.junit.jupiter.api.AfterAll;\n import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import reactor.core.Exceptions;\n import reactor.core.scheduler.Scheduler;\n import reactor.core.scheduler.Schedulers;\n import reactor.test.StepVerifier;\n \n import static org.assertj.core.api.AssertionsForClassTypes.*;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3MTc4OA==", "bodyText": "Well, those 250+ manual changes are done now, so if that's a stepping stone for automatic migration to assertJ, I'd rather use them :).", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493371788", "createdAt": "2020-09-23T09:33:46Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -26,29 +26,30 @@\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import org.junit.AfterClass;\n+import org.junit.jupiter.api.AfterAll;\n import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import reactor.core.Exceptions;\n import reactor.core.scheduler.Scheduler;\n import reactor.core.scheduler.Schedulers;\n import reactor.test.StepVerifier;\n \n import static org.assertj.core.api.AssertionsForClassTypes.*;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MDgxMg=="}, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3NDI2MA==", "bodyText": "Although I am sorry that you spent time on it, I think \"already done manually\" isn't a good argument in favour of introducing a \"legacy\"\nI see no point in merging the use of org.junit.jupiter.api.Assertions.assertThrows while we could go with AssertJ from the beginning.", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493374260", "createdAt": "2020-09-23T09:36:20Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -26,29 +26,30 @@\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import org.junit.AfterClass;\n+import org.junit.jupiter.api.AfterAll;\n import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import reactor.core.Exceptions;\n import reactor.core.scheduler.Scheduler;\n import reactor.core.scheduler.Schedulers;\n import reactor.test.StepVerifier;\n \n import static org.assertj.core.api.AssertionsForClassTypes.*;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MDgxMg=="}, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3ODAyNg==", "bodyText": "As I said, I hope it's easier to migrate (via plugin or dumb search/replace) from Assertions.assertThrows to assertJ than from @Test(expected = Foo.class) to assertJ. I'll take a look at it (but initial look I had to assertJ migration was also heavy work, as stated in the PR comment)", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493378026", "createdAt": "2020-09-23T09:40:18Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -26,29 +26,30 @@\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import org.junit.AfterClass;\n+import org.junit.jupiter.api.AfterAll;\n import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import reactor.core.Exceptions;\n import reactor.core.scheduler.Scheduler;\n import reactor.core.scheduler.Schedulers;\n import reactor.test.StepVerifier;\n \n import static org.assertj.core.api.AssertionsForClassTypes.*;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MDgxMg=="}, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NDQzOTY0OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1NTo0MVrOHWBP2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDozNDo1MlrOHWkimA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw==", "bodyText": "nit: I would avoid using short lambda syntax for multiline lambdas", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r492851163", "createdAt": "2020-09-22T15:55:41Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -98,32 +99,36 @@ public void blockingLastTimeout() {\n \t\t               .blockLast(Duration.ofMillis(1))).isNull();\n \t}\n \n-\t@Test(expected = RuntimeException.class)\n+\t@Test\n \tpublic void blockingFirstError() {\n-\t\tFlux.error(new RuntimeException(\"test\"))\n-\t\t    .publishOn(scheduler)\n-\t\t    .blockFirst();\n+\t\tassertThrows(RuntimeException.class, () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3NTM1MA==", "bodyText": "Can you clarify exactly the style you expect on a concrete case (this one for example)?\nThis is the result of manual editing, but always applying the same kind of repetitive keystrokes, also favoring less diff noise I thought.", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493375350", "createdAt": "2020-09-23T09:37:29Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -98,32 +99,36 @@ public void blockingLastTimeout() {\n \t\t               .blockLast(Duration.ofMillis(1))).isNull();\n \t}\n \n-\t@Test(expected = RuntimeException.class)\n+\t@Test\n \tpublic void blockingFirstError() {\n-\t\tFlux.error(new RuntimeException(\"test\"))\n-\t\t    .publishOn(scheduler)\n-\t\t    .blockFirst();\n+\t\tassertThrows(RuntimeException.class, () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw=="}, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM4NDI5OQ==", "bodyText": "public void blockingFirstError() {\n\tassertThrows(RuntimeException.class, () ->\n\t\t\tFlux.error(new RuntimeException(\"test\"))\n\t\t\t    .publishOn(scheduler)\n\t\t\t    .blockFirst());\n}\nvs:\npublic void blockingFirstError() {\n\tassertThrows(RuntimeException.class, () -> {\n\t\tFlux.error(new RuntimeException(\"test\"))\n\t\t    .publishOn(scheduler)\n\t\t    .blockFirst();\n\t});\n}\nless indentation, easier to match the blocks/parenthesises.\nMy suggestion would also help with the diff noise, btw", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493384299", "createdAt": "2020-09-23T09:46:46Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -98,32 +99,36 @@ public void blockingLastTimeout() {\n \t\t               .blockLast(Duration.ofMillis(1))).isNull();\n \t}\n \n-\t@Test(expected = RuntimeException.class)\n+\t@Test\n \tpublic void blockingFirstError() {\n-\t\tFlux.error(new RuntimeException(\"test\"))\n-\t\t    .publishOn(scheduler)\n-\t\t    .blockFirst();\n+\t\tassertThrows(RuntimeException.class, () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw=="}, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxMjAyNw==", "bodyText": "It's quite tedious sadly.", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493412027", "createdAt": "2020-09-23T10:15:52Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -98,32 +99,36 @@ public void blockingLastTimeout() {\n \t\t               .blockLast(Duration.ofMillis(1))).isNull();\n \t}\n \n-\t@Test(expected = RuntimeException.class)\n+\t@Test\n \tpublic void blockingFirstError() {\n-\t\tFlux.error(new RuntimeException(\"test\"))\n-\t\t    .publishOn(scheduler)\n-\t\t    .blockFirst();\n+\t\tassertThrows(RuntimeException.class, () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw=="}, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQyOTQwMA==", "bodyText": "huh? \ud83e\udd14", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r493429400", "createdAt": "2020-09-23T10:34:52Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -98,32 +99,36 @@ public void blockingLastTimeout() {\n \t\t               .blockLast(Duration.ofMillis(1))).isNull();\n \t}\n \n-\t@Test(expected = RuntimeException.class)\n+\t@Test\n \tpublic void blockingFirstError() {\n-\t\tFlux.error(new RuntimeException(\"test\"))\n-\t\t    .publishOn(scheduler)\n-\t\t    .blockFirst();\n+\t\tassertThrows(RuntimeException.class, () ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw=="}, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjkyNDE3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/io/reactor/gradle/JavaConventions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo1MToxNVrOHXSqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDowNjozOVrOHXTOqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4NTA4Mg==", "bodyText": "Could you please clarify this change?", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494185082", "createdAt": "2020-09-24T09:51:15Z", "author": {"login": "bsideup"}, "path": "buildSrc/src/main/java/io/reactor/gradle/JavaConventions.java", "diffHunk": "@@ -59,6 +59,8 @@ private void applyJavaConvention(Project project) {\n \t\t\t\t\t       \"-Xlint:processing\",\n \t\t\t\t\t       \"-Xlint:static\",\n \t\t\t\t\t       \"-Xlint:try\",\n+\t\t\t\t\t\t   \"-Xmaxerrs\", \"1000\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72858d9255ed3b920910f757ad41f4d4c25c50e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5MTE5MQ==", "bodyText": "I can since I did a similarly large change in the past (but abandoned it): javac will only show 100 errors by default. it is a bit cumbersome and quite disheartening to fix these 100 errors only to find 100 new ones have appeared (because there is actually a total of eg. 384 errors in the codebase)", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494191191", "createdAt": "2020-09-24T10:01:14Z", "author": {"login": "simonbasle"}, "path": "buildSrc/src/main/java/io/reactor/gradle/JavaConventions.java", "diffHunk": "@@ -59,6 +59,8 @@ private void applyJavaConvention(Project project) {\n \t\t\t\t\t       \"-Xlint:processing\",\n \t\t\t\t\t       \"-Xlint:static\",\n \t\t\t\t\t       \"-Xlint:try\",\n+\t\t\t\t\t\t   \"-Xmaxerrs\", \"1000\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4NTA4Mg=="}, "originalCommit": {"oid": "72858d9255ed3b920910f757ad41f4d4c25c50e8"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE5NDM0Ng==", "bodyText": "yes, this is something that helped me grasp the total amount of errors I needed to fix (and where). May not need to be left in the final merge.", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494194346", "createdAt": "2020-09-24T10:06:39Z", "author": {"login": "ericbottard"}, "path": "buildSrc/src/main/java/io/reactor/gradle/JavaConventions.java", "diffHunk": "@@ -59,6 +59,8 @@ private void applyJavaConvention(Project project) {\n \t\t\t\t\t       \"-Xlint:processing\",\n \t\t\t\t\t       \"-Xlint:static\",\n \t\t\t\t\t       \"-Xlint:try\",\n+\t\t\t\t\t\t   \"-Xmaxerrs\", \"1000\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4NTA4Mg=="}, "originalCommit": {"oid": "72858d9255ed3b920910f757ad41f4d4c25c50e8"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzA2NDEyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/BaseSubscriberTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoxOVrOHXT-9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjowMzowNVrOHXXJyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjcwOA==", "bodyText": "knowledge sharing, no action needed:\nwhen it comes to assertThatExceptionOfType + isThrownBy, sometimes it makes sense to put isThrownBy\nat the same line as assertThatExceptionOfType. It will result in much less indentation of lambda's body :)", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494206708", "createdAt": "2020-09-24T10:28:19Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BaseSubscriberTest.java", "diffHunk": "@@ -134,35 +136,38 @@ protected void hookFinally(SignalType type) {\n \t\tassertThat(error.get(), is(instanceOf(IllegalStateException.class)));\n \t}\n \n-\t@Test(expected = OutOfMemoryError.class)\n+\t@Test\n \tpublic void onSubscribeFatalThrown() {\n \t\tFlux<String> flux = Flux.just(\"foo\");\n \t\tAtomicReference<Throwable> error = new AtomicReference<>();\n \t\tAtomicReference<SignalType> checkFinally = new AtomicReference<>();\n \n-\t\tflux.subscribe(new BaseSubscriber<String>() {\n-\t\t\t@Override\n-\t\t\tprotected void hookOnSubscribe(Subscription subscription) {\n-\t\t\t\tthrow new OutOfMemoryError(\"boom\");\n-\t\t\t}\n+\t\tassertThatExceptionOfType(OutOfMemoryError.class)\n+\t\t\t\t.isThrownBy(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1ODYzNA==", "bodyText": "That's actually worth doing I think. Let me try that.", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494258634", "createdAt": "2020-09-24T12:03:05Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BaseSubscriberTest.java", "diffHunk": "@@ -134,35 +136,38 @@ protected void hookFinally(SignalType type) {\n \t\tassertThat(error.get(), is(instanceOf(IllegalStateException.class)));\n \t}\n \n-\t@Test(expected = OutOfMemoryError.class)\n+\t@Test\n \tpublic void onSubscribeFatalThrown() {\n \t\tFlux<String> flux = Flux.just(\"foo\");\n \t\tAtomicReference<Throwable> error = new AtomicReference<>();\n \t\tAtomicReference<SignalType> checkFinally = new AtomicReference<>();\n \n-\t\tflux.subscribe(new BaseSubscriber<String>() {\n-\t\t\t@Override\n-\t\t\tprotected void hookOnSubscribe(Subscription subscription) {\n-\t\t\t\tthrow new OutOfMemoryError(\"boom\");\n-\t\t\t}\n+\t\tassertThatExceptionOfType(OutOfMemoryError.class)\n+\t\t\t\t.isThrownBy(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjcwOA=="}, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzA3MzUzOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/DirectProcessorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozMDo1NlrOHXUEkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjowMToyN1rOHXXF8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwODE0Ng==", "bodyText": "unused?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494208146", "createdAt": "2020-09-24T10:30:56Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/DirectProcessorTest.java", "diffHunk": "@@ -16,40 +16,54 @@\n package reactor.core.publisher;\n \n import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscriber;\n import reactor.core.Scannable;\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI1NzY1MA==", "bodyText": "good catch", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494257650", "createdAt": "2020-09-24T12:01:27Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/publisher/DirectProcessorTest.java", "diffHunk": "@@ -16,40 +16,54 @@\n package reactor.core.publisher;\n \n import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscriber;\n import reactor.core.Scannable;\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwODE0Ng=="}, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzQzNDkxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRangeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDoxMlrOHXXiVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDoxMlrOHXXiVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NDkxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494264916", "createdAt": "2020-09-24T12:14:12Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRangeTest.java", "diffHunk": "@@ -25,6 +25,8 @@\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzQzNjIyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRepeatTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDozNVrOHXXjJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDozNVrOHXXjJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTEyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265127", "createdAt": "2020-09-24T12:14:35Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRepeatTest.java", "diffHunk": "@@ -19,16 +19,22 @@\n import java.time.Duration;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzQzNzkyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxReplayTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDo1NlrOHXXkLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDo1NlrOHXXkLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTM5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265391", "createdAt": "2020-09-24T12:14:56Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxReplayTest.java", "diffHunk": "@@ -38,6 +38,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzQzOTQ3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNToyMVrOHXXlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNToyMVrOHXXlLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTY0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265646", "createdAt": "2020-09-24T12:15:21Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -45,6 +44,7 @@\n import reactor.util.function.Tuples;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzQ0MTEwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxScanSeedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNTo0MlrOHXXmIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNTo0MlrOHXXmIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTg5MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265890", "createdAt": "2020-09-24T12:15:42Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxScanSeedTest.java", "diffHunk": "@@ -16,23 +16,22 @@\n \n package reactor.core.publisher;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.assertj.core.api.Assertions;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscription;\n \n import reactor.core.CoreSubscriber;\n import reactor.core.Scannable;\n import reactor.test.publisher.FluxOperatorTest;\n import reactor.test.subscriber.AssertSubscriber;\n import reactor.test.util.RaceTestUtils;\n-import reactor.util.context.Context;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk3MjU1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/MonoCallableTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoyODo0NlrOHehaGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoyODo0NlrOHehaGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2NjY4Mg==", "bodyText": "tabs is ideally what we'd use everywhere, so switching to tabs on modified lines was \ud83d\udc4d", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501766682", "createdAt": "2020-10-08T14:28:46Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/MonoCallableTest.java", "diffHunk": "@@ -24,22 +24,20 @@\n import org.assertj.core.data.Offset;\n import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscription;\n-\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n \n public class MonoCallableTest {\n \n     @Test\n     public void nullCallable() {\n-\t\tassertThrows(NullPointerException.class, () -> {\n-\t\t\tMono.<Integer>fromCallable(null);\n-\t\t});\n-\t}\n+        assertThatExceptionOfType(NullPointerException.class).isThrownBy(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk3OTg5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMDoxM1rOHehewg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMDoxM1rOHehewg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2Nzg3NA==", "bodyText": "nitpick: put on one line? the })); below I mean", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501767874", "createdAt": "2020-10-08T14:30:13Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -286,8 +287,8 @@ final public void directScheduleAndDisposeDelay() throws Exception {\n \t\t\ts.dispose();\n \t\t\tassertThat(s.isDisposed()).isTrue();\n \n-\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }));\n+\t\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk4MTExOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMDoyOVrOHehfhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMDoyOVrOHehfhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODA3MQ==", "bodyText": "nitpick: put back on one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768071", "createdAt": "2020-10-08T14:30:29Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -354,7 +355,8 @@ final public void directScheduleAndDisposePeriod() throws Exception {\n \n \t\t\tif (!shouldCheckDirectTimeScheduling()) {\n \t\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }, 10, TimeUnit.MILLISECONDS))\n+\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk4MjUyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMDo0OVrOHehgeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyODoyNlrOHggCJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODMxMw==", "bodyText": "nitpick: put back on one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768313", "createdAt": "2020-10-08T14:30:49Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -257,7 +257,8 @@ final public void directScheduleAndDisposeDelay() throws Exception {\n \n \t\t\tif (!shouldCheckDirectTimeScheduling()) {\n \t\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }, 10, TimeUnit.MILLISECONDS))\n+\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTMxOA==", "bodyText": "ugly line split not fixed for that one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r503841318", "createdAt": "2020-10-13T10:28:26Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -257,7 +257,8 @@ final public void directScheduleAndDisposeDelay() throws Exception {\n \n \t\t\tif (!shouldCheckDirectTimeScheduling()) {\n \t\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }, 10, TimeUnit.MILLISECONDS))\n+\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODMxMw=="}, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk4NTQ3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMToxNlrOHehiIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMToxNlrOHehiIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODczNg==", "bodyText": "nitpick: put back on one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768736", "createdAt": "2020-10-08T14:31:16Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -386,8 +388,8 @@ final public void directScheduleAndDisposePeriod() throws Exception {\n \t\t\ts.dispose();\n \t\t\tassertThat(s.isDisposed()).isTrue();\n \n-\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }));\n+\t\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MTk4Njk4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMTozNlrOHehjHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMTozNlrOHehjHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODk4OA==", "bodyText": "nitpick: put back the empty lambdas on one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768988", "createdAt": "2020-10-08T14:31:36Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java", "diffHunk": "@@ -512,21 +512,25 @@ public void testShutdownOldOnSetFactory() {\n \n \n \t\tAssert.assertNotSame(cachedTimerOld, standaloneTimer);\n-\t\tAssert.assertNotNull(cachedTimerOld.schedule(() -> {}));\n-\t\tAssert.assertNotNull(standaloneTimer.schedule(() -> {}));\n+\t\tAssert.assertNotNull(cachedTimerOld.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NTkyMjA2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyNzo0M1rOHggAaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMjowNTozMVrOHhPsCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDg3Mw==", "bodyText": "still some ugly line split there", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r503840873", "createdAt": "2020-10-13T10:27:43Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java", "diffHunk": "@@ -521,8 +521,8 @@ public void testShutdownOldOnSetFactory() {\n \t\tAssert.assertEquals(cachedTimerNew, Schedulers.newSingle(\"unused\"));\n \t\tAssert.assertNotSame(cachedTimerNew, cachedTimerOld);\n \t\t//assert that the old factory\"s cached scheduler was shut down\n-\t\tAssertions.assertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t          .isThrownBy(() -> cachedTimerOld.schedule(() -> {}));\n+\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> cachedTimerOld.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afad7802733ad5958d0748292e05b52e76cab899"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDYyMjA5MQ==", "bodyText": "given the effort involved in the merge commits, let's forget about these minor cosmetics polishes", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r504622091", "createdAt": "2020-10-14T12:05:31Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java", "diffHunk": "@@ -521,8 +521,8 @@ public void testShutdownOldOnSetFactory() {\n \t\tAssert.assertEquals(cachedTimerNew, Schedulers.newSingle(\"unused\"));\n \t\tAssert.assertNotSame(cachedTimerNew, cachedTimerOld);\n \t\t//assert that the old factory\"s cached scheduler was shut down\n-\t\tAssertions.assertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t          .isThrownBy(() -> cachedTimerOld.schedule(() -> {}));\n+\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> cachedTimerOld.schedule(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDg3Mw=="}, "originalCommit": {"oid": "afad7802733ad5958d0748292e05b52e76cab899"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 975, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}