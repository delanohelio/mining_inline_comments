{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NjI5MjAx", "number": 2164, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozMjo0N1rOD9t3Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo0MjowNlrOD9uFXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDQxMTg3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozMjo0N1rOGXYBAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMjoxMzoyM1rOGXdexQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MzkwNw==", "bodyText": "maybe just insist on a positive r meaning concurrent requestN which would trigger another round of the loop", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427163907", "createdAt": "2020-05-19T09:32:47Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1444,53 +1444,72 @@ public int size() {\n \tpublic static class DeferredSubscription\n \t\t\timplements Subscription, Scannable {\n \n-\t\tvolatile Subscription s;\n+\t\tstatic final int STATE_CANCELLED = -2;\n+\t\tstatic final int STATE_SUBSCRIBED = -1;\n+\n+\t\tSubscription s;\n \t\tvolatile long requested;\n \n \t\tprotected boolean isCancelled(){\n-\t\t\treturn s == cancelledSubscription();\n+\t\t\treturn requested == STATE_CANCELLED;\n \t\t}\n \n \t\t@Override\n \t\tpublic void cancel() {\n-\t\t\tSubscription a = s;\n-\t\t\tif (a != cancelledSubscription()) {\n-\t\t\t\ta = S.getAndSet(this, cancelledSubscription());\n-\t\t\t\tif (a != null && a != cancelledSubscription()) {\n-\t\t\t\t\ta.cancel();\n-\t\t\t\t}\n+\t\t\tfinal long state = REQUESTED.getAndSet(this, STATE_CANCELLED);\n+\t\t\tif (state == STATE_CANCELLED) {\n+\t\t\t\treturn;\n \t\t\t}\n+\n+\t\t\tif (state == STATE_SUBSCRIBED) {\n+\t\t\t\tthis.s.cancel();\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected void terminate() {\n+\t\t\tREQUESTED.getAndSet(this, STATE_CANCELLED);\n \t\t}\n \n \t\t@Override\n \t\t@Nullable\n \t\tpublic Object scanUnsafe(Attr key) {\n+\t\t\tlong requested = this.requested; // volatile read to see subscription\n \t\t\tif (key == Attr.PARENT) return s;\n-\t\t\tif (key == Attr.REQUESTED_FROM_DOWNSTREAM) return requested;\n+\t\t\tif (key == Attr.REQUESTED_FROM_DOWNSTREAM) return requested < 0 ? 0 : requested;\n \t\t\tif (key == Attr.CANCELLED) return isCancelled();\n \n \t\t\treturn null;\n \t\t}\n \n \t\t@Override\n \t\tpublic void request(long n) {\n-\t\t\tSubscription a = s;\n-\t\t\tif (a != null) {\n-\t\t\t\ta.request(n);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\taddCap(REQUESTED, this, n);\n-\n-\t\t\t\ta = s;\n+\t\t\tlong r = this.requested; // volatile read beforehand\n \n-\t\t\t\tif (a != null) {\n-\t\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n+\t\t\tif (r > STATE_SUBSCRIBED) { // works only in case onSubscribe has not happened\n+\t\t\t\tlong u;\n+\t\t\t\tfor (;;) { // normal CAS loop with overflow protection\n+\t\t\t\t\tif (r == Long.MAX_VALUE) { // if r == Long.MAX_VALUE then we dont care and we can loose this request just in case of racing\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tu = Operators.addCap(r, n);\n+\t\t\t\t\tif (REQUESTED.compareAndSet(this, r, u)) { // Means increment happened before onSubscribe\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\telse { // Means increment happened after onSubscribe\n+\t\t\t\t\t\tr = this.requested; // update new state to see what exactly happened (onSubscribe | cancel | requestN)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIwOTQwOA==", "bodyText": "This should not be possible. Due to spec requestN and requestN should not ever overlap with each other. So the only racing possible in the case if onSubscribe racing with requestN.\nTherefore if onSubscribe wins racing the request should observer negative state after CAS (relying on Rule 2.7 which exclude racing between requestN requestN) so, deductively, the only possible outcome is STATE_SUBSCRIBED", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427209408", "createdAt": "2020-05-19T10:52:06Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1444,53 +1444,72 @@ public int size() {\n \tpublic static class DeferredSubscription\n \t\t\timplements Subscription, Scannable {\n \n-\t\tvolatile Subscription s;\n+\t\tstatic final int STATE_CANCELLED = -2;\n+\t\tstatic final int STATE_SUBSCRIBED = -1;\n+\n+\t\tSubscription s;\n \t\tvolatile long requested;\n \n \t\tprotected boolean isCancelled(){\n-\t\t\treturn s == cancelledSubscription();\n+\t\t\treturn requested == STATE_CANCELLED;\n \t\t}\n \n \t\t@Override\n \t\tpublic void cancel() {\n-\t\t\tSubscription a = s;\n-\t\t\tif (a != cancelledSubscription()) {\n-\t\t\t\ta = S.getAndSet(this, cancelledSubscription());\n-\t\t\t\tif (a != null && a != cancelledSubscription()) {\n-\t\t\t\t\ta.cancel();\n-\t\t\t\t}\n+\t\t\tfinal long state = REQUESTED.getAndSet(this, STATE_CANCELLED);\n+\t\t\tif (state == STATE_CANCELLED) {\n+\t\t\t\treturn;\n \t\t\t}\n+\n+\t\t\tif (state == STATE_SUBSCRIBED) {\n+\t\t\t\tthis.s.cancel();\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected void terminate() {\n+\t\t\tREQUESTED.getAndSet(this, STATE_CANCELLED);\n \t\t}\n \n \t\t@Override\n \t\t@Nullable\n \t\tpublic Object scanUnsafe(Attr key) {\n+\t\t\tlong requested = this.requested; // volatile read to see subscription\n \t\t\tif (key == Attr.PARENT) return s;\n-\t\t\tif (key == Attr.REQUESTED_FROM_DOWNSTREAM) return requested;\n+\t\t\tif (key == Attr.REQUESTED_FROM_DOWNSTREAM) return requested < 0 ? 0 : requested;\n \t\t\tif (key == Attr.CANCELLED) return isCancelled();\n \n \t\t\treturn null;\n \t\t}\n \n \t\t@Override\n \t\tpublic void request(long n) {\n-\t\t\tSubscription a = s;\n-\t\t\tif (a != null) {\n-\t\t\t\ta.request(n);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\taddCap(REQUESTED, this, n);\n-\n-\t\t\t\ta = s;\n+\t\t\tlong r = this.requested; // volatile read beforehand\n \n-\t\t\t\tif (a != null) {\n-\t\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n+\t\t\tif (r > STATE_SUBSCRIBED) { // works only in case onSubscribe has not happened\n+\t\t\t\tlong u;\n+\t\t\t\tfor (;;) { // normal CAS loop with overflow protection\n+\t\t\t\t\tif (r == Long.MAX_VALUE) { // if r == Long.MAX_VALUE then we dont care and we can loose this request just in case of racing\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tu = Operators.addCap(r, n);\n+\t\t\t\t\tif (REQUESTED.compareAndSet(this, r, u)) { // Means increment happened before onSubscribe\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\telse { // Means increment happened after onSubscribe\n+\t\t\t\t\t\tr = this.requested; // update new state to see what exactly happened (onSubscribe | cancel | requestN)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MzkwNw=="}, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1MzQ0NQ==", "bodyText": "In theory, I can remove cas loop at all since there should not be any racing between requestN and requestN", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427253445", "createdAt": "2020-05-19T12:13:23Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1444,53 +1444,72 @@ public int size() {\n \tpublic static class DeferredSubscription\n \t\t\timplements Subscription, Scannable {\n \n-\t\tvolatile Subscription s;\n+\t\tstatic final int STATE_CANCELLED = -2;\n+\t\tstatic final int STATE_SUBSCRIBED = -1;\n+\n+\t\tSubscription s;\n \t\tvolatile long requested;\n \n \t\tprotected boolean isCancelled(){\n-\t\t\treturn s == cancelledSubscription();\n+\t\t\treturn requested == STATE_CANCELLED;\n \t\t}\n \n \t\t@Override\n \t\tpublic void cancel() {\n-\t\t\tSubscription a = s;\n-\t\t\tif (a != cancelledSubscription()) {\n-\t\t\t\ta = S.getAndSet(this, cancelledSubscription());\n-\t\t\t\tif (a != null && a != cancelledSubscription()) {\n-\t\t\t\t\ta.cancel();\n-\t\t\t\t}\n+\t\t\tfinal long state = REQUESTED.getAndSet(this, STATE_CANCELLED);\n+\t\t\tif (state == STATE_CANCELLED) {\n+\t\t\t\treturn;\n \t\t\t}\n+\n+\t\t\tif (state == STATE_SUBSCRIBED) {\n+\t\t\t\tthis.s.cancel();\n+\t\t\t}\n+\t\t}\n+\n+\t\tprotected void terminate() {\n+\t\t\tREQUESTED.getAndSet(this, STATE_CANCELLED);\n \t\t}\n \n \t\t@Override\n \t\t@Nullable\n \t\tpublic Object scanUnsafe(Attr key) {\n+\t\t\tlong requested = this.requested; // volatile read to see subscription\n \t\t\tif (key == Attr.PARENT) return s;\n-\t\t\tif (key == Attr.REQUESTED_FROM_DOWNSTREAM) return requested;\n+\t\t\tif (key == Attr.REQUESTED_FROM_DOWNSTREAM) return requested < 0 ? 0 : requested;\n \t\t\tif (key == Attr.CANCELLED) return isCancelled();\n \n \t\t\treturn null;\n \t\t}\n \n \t\t@Override\n \t\tpublic void request(long n) {\n-\t\t\tSubscription a = s;\n-\t\t\tif (a != null) {\n-\t\t\t\ta.request(n);\n-\t\t\t}\n-\t\t\telse {\n-\t\t\t\taddCap(REQUESTED, this, n);\n-\n-\t\t\t\ta = s;\n+\t\t\tlong r = this.requested; // volatile read beforehand\n \n-\t\t\t\tif (a != null) {\n-\t\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n+\t\t\tif (r > STATE_SUBSCRIBED) { // works only in case onSubscribe has not happened\n+\t\t\t\tlong u;\n+\t\t\t\tfor (;;) { // normal CAS loop with overflow protection\n+\t\t\t\t\tif (r == Long.MAX_VALUE) { // if r == Long.MAX_VALUE then we dont care and we can loose this request just in case of racing\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\tu = Operators.addCap(r, n);\n+\t\t\t\t\tif (REQUESTED.compareAndSet(this, r, u)) { // Means increment happened before onSubscribe\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t\telse { // Means increment happened after onSubscribe\n+\t\t\t\t\t\tr = this.requested; // update new state to see what exactly happened (onSubscribe | cancel | requestN)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2MzkwNw=="}, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDQxMzAyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozMzowN1rOGXYBxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDo1NzoxN1rOGXa9sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NDEwMQ==", "bodyText": "typo: accumulated", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427164101", "createdAt": "2020-05-19T09:33:07Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1512,30 +1532,30 @@ public final boolean set(Subscription s) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\tif (S.compareAndSet(this, null, s)) {\n+\t\t\tlong r;\n+\t\t\tlong accomulated = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIxMjIxMA==", "bodyText": "fixed", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427212210", "createdAt": "2020-05-19T10:57:17Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1512,30 +1532,30 @@ public final boolean set(Subscription s) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\tif (S.compareAndSet(this, null, s)) {\n+\t\t\tlong r;\n+\t\t\tlong accomulated = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2NDEwMQ=="}, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDQzNzU1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTozOTozMVrOGXYRGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMzo0MjoyM1rOGXhCvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2ODAyNA==", "bodyText": "suggestion: accumulated += toRequest. it simplifies to the same, but is easier to read and better conveys the logic IMHO (we track how much of the pre-subscribe request we've already propagated)", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427168024", "createdAt": "2020-05-19T09:39:31Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1512,30 +1532,30 @@ public final boolean set(Subscription s) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\tif (S.compareAndSet(this, null, s)) {\n+\t\t\tlong r;\n+\t\t\tlong accomulated = 0;\n+\t\t\tfor (;;) {\n+\t\t\t\tr = this.requested;\n \n-\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n-\n-\t\t\t\tif (r != 0L) {\n-\t\t\t\t\ts.request(r);\n+\t\t\t\tif (r == STATE_CANCELLED || r == STATE_SUBSCRIBED) {\n+\t\t\t\t\ts.cancel();\n+\t\t\t\t\treturn false;\n \t\t\t\t}\n \n-\t\t\t\treturn true;\n-\t\t\t}\n+\t\t\t\tthis.s = s;\n \n-\t\t\ta = this.s;\n+\t\t\t\tlong toRequest = r - accomulated;\n+\t\t\t\tif (toRequest > 0) { // if there is something,\n+\t\t\t\t\ts.request(toRequest); // then we do a request on the given subscription\n+\t\t\t\t}\n+\t\t\t\taccomulated = r;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIwNDI5NQ==", "bodyText": "is not it redundant?\nsince we calculate dif and that add this dif back", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427204295", "createdAt": "2020-05-19T10:42:40Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1512,30 +1532,30 @@ public final boolean set(Subscription s) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\tif (S.compareAndSet(this, null, s)) {\n+\t\t\tlong r;\n+\t\t\tlong accomulated = 0;\n+\t\t\tfor (;;) {\n+\t\t\t\tr = this.requested;\n \n-\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n-\n-\t\t\t\tif (r != 0L) {\n-\t\t\t\t\ts.request(r);\n+\t\t\t\tif (r == STATE_CANCELLED || r == STATE_SUBSCRIBED) {\n+\t\t\t\t\ts.cancel();\n+\t\t\t\t\treturn false;\n \t\t\t\t}\n \n-\t\t\t\treturn true;\n-\t\t\t}\n+\t\t\t\tthis.s = s;\n \n-\t\t\ta = this.s;\n+\t\t\t\tlong toRequest = r - accomulated;\n+\t\t\t\tif (toRequest > 0) { // if there is something,\n+\t\t\t\t\ts.request(toRequest); // then we do a request on the given subscription\n+\t\t\t\t}\n+\t\t\t\taccomulated = r;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2ODAyNA=="}, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIyMjQwNg==", "bodyText": "I'm just saying that we are doing\nsubstruction from r (long diff = r - accumulated) and addition to accumulated that diff, so it is equal to r in any, case", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427222406", "createdAt": "2020-05-19T11:16:02Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1512,30 +1532,30 @@ public final boolean set(Subscription s) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\tif (S.compareAndSet(this, null, s)) {\n+\t\t\tlong r;\n+\t\t\tlong accomulated = 0;\n+\t\t\tfor (;;) {\n+\t\t\t\tr = this.requested;\n \n-\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n-\n-\t\t\t\tif (r != 0L) {\n-\t\t\t\t\ts.request(r);\n+\t\t\t\tif (r == STATE_CANCELLED || r == STATE_SUBSCRIBED) {\n+\t\t\t\t\ts.cancel();\n+\t\t\t\t\treturn false;\n \t\t\t\t}\n \n-\t\t\t\treturn true;\n-\t\t\t}\n+\t\t\t\tthis.s = s;\n \n-\t\t\ta = this.s;\n+\t\t\t\tlong toRequest = r - accomulated;\n+\t\t\t\tif (toRequest > 0) { // if there is something,\n+\t\t\t\t\ts.request(toRequest); // then we do a request on the given subscription\n+\t\t\t\t}\n+\t\t\t\taccomulated = r;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2ODAyNA=="}, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI1NzM2NQ==", "bodyText": "yeah, that's what I meant by \"it simplifies to the same\". but I find the logic far easier to follow in this form. it makes it more visible that accumulated accumulates the consecutive demands that have already been propagated. just \"cosmetic\"", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427257365", "createdAt": "2020-05-19T12:20:13Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1512,30 +1532,30 @@ public final boolean set(Subscription s) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\tif (S.compareAndSet(this, null, s)) {\n+\t\t\tlong r;\n+\t\t\tlong accomulated = 0;\n+\t\t\tfor (;;) {\n+\t\t\t\tr = this.requested;\n \n-\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n-\n-\t\t\t\tif (r != 0L) {\n-\t\t\t\t\ts.request(r);\n+\t\t\t\tif (r == STATE_CANCELLED || r == STATE_SUBSCRIBED) {\n+\t\t\t\t\ts.cancel();\n+\t\t\t\t\treturn false;\n \t\t\t\t}\n \n-\t\t\t\treturn true;\n-\t\t\t}\n+\t\t\t\tthis.s = s;\n \n-\t\t\ta = this.s;\n+\t\t\t\tlong toRequest = r - accomulated;\n+\t\t\t\tif (toRequest > 0) { // if there is something,\n+\t\t\t\t\ts.request(toRequest); // then we do a request on the given subscription\n+\t\t\t\t}\n+\t\t\t\taccomulated = r;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2ODAyNA=="}, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzI4NDQxOA==", "bodyText": "alright. Np", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427284418", "createdAt": "2020-05-19T13:03:43Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1512,30 +1532,30 @@ public final boolean set(Subscription s) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\tif (S.compareAndSet(this, null, s)) {\n+\t\t\tlong r;\n+\t\t\tlong accomulated = 0;\n+\t\t\tfor (;;) {\n+\t\t\t\tr = this.requested;\n \n-\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n-\n-\t\t\t\tif (r != 0L) {\n-\t\t\t\t\ts.request(r);\n+\t\t\t\tif (r == STATE_CANCELLED || r == STATE_SUBSCRIBED) {\n+\t\t\t\t\ts.cancel();\n+\t\t\t\t\treturn false;\n \t\t\t\t}\n \n-\t\t\t\treturn true;\n-\t\t\t}\n+\t\t\t\tthis.s = s;\n \n-\t\t\ta = this.s;\n+\t\t\t\tlong toRequest = r - accomulated;\n+\t\t\t\tif (toRequest > 0) { // if there is something,\n+\t\t\t\t\ts.request(toRequest); // then we do a request on the given subscription\n+\t\t\t\t}\n+\t\t\t\taccomulated = r;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2ODAyNA=="}, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzMxMTgwNw==", "bodyText": "fixed", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427311807", "createdAt": "2020-05-19T13:42:23Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -1512,30 +1532,30 @@ public final boolean set(Subscription s) {\n \t\t\t\treturn false;\n \t\t\t}\n \n-\t\t\tif (S.compareAndSet(this, null, s)) {\n+\t\t\tlong r;\n+\t\t\tlong accomulated = 0;\n+\t\t\tfor (;;) {\n+\t\t\t\tr = this.requested;\n \n-\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n-\n-\t\t\t\tif (r != 0L) {\n-\t\t\t\t\ts.request(r);\n+\t\t\t\tif (r == STATE_CANCELLED || r == STATE_SUBSCRIBED) {\n+\t\t\t\t\ts.cancel();\n+\t\t\t\t\treturn false;\n \t\t\t\t}\n \n-\t\t\t\treturn true;\n-\t\t\t}\n+\t\t\t\tthis.s = s;\n \n-\t\t\ta = this.s;\n+\t\t\t\tlong toRequest = r - accomulated;\n+\t\t\t\tif (toRequest > 0) { // if there is something,\n+\t\t\t\t\ts.request(toRequest); // then we do a request on the given subscription\n+\t\t\t\t}\n+\t\t\t\taccomulated = r;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2ODAyNA=="}, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDQ0NzY1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/StrictSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQwOTo0MjowNlrOGXYXaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDoyMDo1M1rOGXZxww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2OTY0MA==", "bodyText": "was this intended as a separate change?\nif not, would benefit from the same level of commenting and from test coverage ;)", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427169640", "createdAt": "2020-05-19T09:42:06Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/StrictSubscriber.java", "diffHunk": "@@ -72,9 +72,22 @@ public void onSubscribe(Subscription s) {\n \t\t\tactual.onSubscribe(this);\n \n \t\t\tif (Operators.setOnce(S, this, s)) {\n-\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n-\t\t\t\tif (r != 0L) {\n+\t\t\t\tfor (;;) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE5Mjc3MQ==", "bodyText": "Oh. That was for another PR", "url": "https://github.com/reactor/reactor-core/pull/2164#discussion_r427192771", "createdAt": "2020-05-19T10:20:53Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/StrictSubscriber.java", "diffHunk": "@@ -72,9 +72,22 @@ public void onSubscribe(Subscription s) {\n \t\t\tactual.onSubscribe(this);\n \n \t\t\tif (Operators.setOnce(S, this, s)) {\n-\t\t\t\tlong r = REQUESTED.getAndSet(this, 0L);\n-\t\t\t\tif (r != 0L) {\n+\t\t\t\tfor (;;) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE2OTY0MA=="}, "originalCommit": {"oid": "6720f8b08819597cfd96f925773938d6fc9f470e"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1053, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}