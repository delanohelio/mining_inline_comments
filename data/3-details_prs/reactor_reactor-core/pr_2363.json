{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODY1MDY2", "number": 2363, "title": "fix #2173 Add firstWithValue operator, alias/deprecate first", "bodyText": "add a new FirstValue operator for both Flux and Mono, with a new variant of the or, called orValue", "createdAt": "2020-09-08T08:10:24Z", "url": "https://github.com/reactor/reactor-core/pull/2363", "merged": true, "mergeCommit": {"oid": "41c937ff3bf7ca82f57b8c4b343a2219966e1422"}, "closed": true, "closedAt": "2020-10-05T16:12:45Z", "author": {"login": "aneveu"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGzNQSgFqTQ4MzkwMjUzMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPls-tgBqjM4NDExNTI3NDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTAyNTMy", "url": "https://github.com/reactor/reactor-core/pull/2363#pullrequestreview-483902532", "createdAt": "2020-09-08T08:20:25Z", "commit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODoyMDoyNVrOHOSCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODoyMDoyNVrOHOSCsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNzcxNA==", "bodyText": "After further thoughts, I'm having huge doubts about the introduction of this method and the corresponding one in Mono as I think it can easily be missed by the user and though results in an invalid mix & match of firstValues and or operators called.", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484737714", "createdAt": "2020-09-08T08:20:25Z", "author": {"login": "aneveu"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6602,17 +6637,42 @@ public int getPrefetch() {\n \t * @see #first\n \t */\n \tpublic final Flux<T> or(Publisher<? extends T> other) {\n-\t\tif (this instanceof FluxFirstEmitting) {\n-\t\t\tFluxFirstEmitting<T> publisherAmb = (FluxFirstEmitting<T>) this;\n+\t\tif (this instanceof FluxFirst) {\n+\t\t\tFluxFirst<T> orPublisher = (FluxFirst<T>) this;\n \n-\t\t\tFluxFirstEmitting<T> result = publisherAmb.ambAdditionalSource(other);\n+\t\t\tFluxFirst<T> result = orPublisher.orAdditionalSource(other);\n \t\t\tif (result != null) {\n \t\t\t\treturn result;\n \t\t\t}\n \t\t}\n \t\treturn first(this, other);\n \t}\n \n+\t/**\n+\t * Pick the first {@link Publisher} between this {@link Flux} and another publisher\n+\t * to emit any value and replay all signals from that\n+\t * {@link Publisher}, effectively behaving like the fastest of these competing sources.\n+\t *\n+\t * <p> TODO\n+\t * <img class=\"marble\" src=\"doc-files/marbles/orForFlux.svg\" alt=\"\">\n+\t *\n+\t * @param other the {@link Publisher} to race with\n+\t *\n+\t * @return the fastest sequence\n+\t * @see #firstValues\n+\t */\n+\tpublic final Flux<T> orValues(Publisher<? extends T> other) {\n+\t\tif (this instanceof FluxFirstValues) {\n+\t\t\tFluxFirstValues<T> orPublisher = (FluxFirstValues<T>) this;\n+\n+\t\t\tFluxFirstValues<T> result = orPublisher.orAdditionalSource(other);\n+\t\t\tif (result != null) {\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t}\n+\t\treturn firstValues(this, other);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTM5OTY3", "url": "https://github.com/reactor/reactor-core/pull/2363#pullrequestreview-484139967", "createdAt": "2020-09-08T13:29:07Z", "commit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTYyMDU3", "url": "https://github.com/reactor/reactor-core/pull/2363#pullrequestreview-484162057", "createdAt": "2020-09-08T13:52:09Z", "commit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MjowOVrOHOePAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1NDowMlrOHOeUbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzNzQ3Mw==", "bodyText": "let's cover the case where first source in the vararg is a FluxFirstValues (and return the result of orAdditionalSource then)", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484937473", "createdAt": "2020-09-08T13:52:09Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -942,7 +942,42 @@\n \t * @return a new {@link Flux} behaving like the fastest of its sources\n \t */\n \tpublic static <I> Flux<I> first(Iterable<? extends Publisher<? extends I>> sources) {\n-\t\treturn onAssembly(new FluxFirstEmitting<>(sources));\n+\t\treturn onAssembly(new FluxFirst<>(sources));\n+\t}\n+\n+\t/**\n+\t * Pick the first {@link Publisher} to emit any value and replay all signals\n+\t * from that {@link Publisher}, effectively behaving like the\n+\t * fastest of these competing sources.\n+\t *\n+\t * <p>\n+\t * // TODO replace the img\n+\t *\n+\t * @param sources The competing source publishers\n+\t * @param <I> The type of values in both source and output sequences\n+\t *\n+\t * @return a new {@link Flux} behaving like the fastest of its sources\n+\t */\n+\t@SafeVarargs\n+\tpublic static <I> Flux<I> firstValues(Publisher<? extends I>... sources) {\n+\t\treturn onAssembly(new FluxFirstValues<>(sources));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzNzk4NQ==", "bodyText": "actually, let's forget about orValues for now.", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484937985", "createdAt": "2020-09-08T13:52:51Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6602,17 +6637,42 @@ public int getPrefetch() {\n \t * @see #first\n \t */\n \tpublic final Flux<T> or(Publisher<? extends T> other) {\n-\t\tif (this instanceof FluxFirstEmitting) {\n-\t\t\tFluxFirstEmitting<T> publisherAmb = (FluxFirstEmitting<T>) this;\n+\t\tif (this instanceof FluxFirst) {\n+\t\t\tFluxFirst<T> orPublisher = (FluxFirst<T>) this;\n \n-\t\t\tFluxFirstEmitting<T> result = publisherAmb.ambAdditionalSource(other);\n+\t\t\tFluxFirst<T> result = orPublisher.orAdditionalSource(other);\n \t\t\tif (result != null) {\n \t\t\t\treturn result;\n \t\t\t}\n \t\t}\n \t\treturn first(this, other);\n \t}\n \n+\t/**\n+\t * Pick the first {@link Publisher} between this {@link Flux} and another publisher\n+\t * to emit any value and replay all signals from that\n+\t * {@link Publisher}, effectively behaving like the fastest of these competing sources.\n+\t *\n+\t * <p> TODO\n+\t * <img class=\"marble\" src=\"doc-files/marbles/orForFlux.svg\" alt=\"\">\n+\t *\n+\t * @param other the {@link Publisher} to race with\n+\t *\n+\t * @return the fastest sequence\n+\t * @see #firstValues\n+\t */\n+\tpublic final Flux<T> orValues(Publisher<? extends T> other) {\n+\t\tif (this instanceof FluxFirstValues) {\n+\t\t\tFluxFirstValues<T> orPublisher = (FluxFirstValues<T>) this;\n+\n+\t\t\tFluxFirstValues<T> result = orPublisher.orAdditionalSource(other);\n+\t\t\tif (result != null) {\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t}\n+\t\treturn firstValues(this, other);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNzcxNA=="}, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzODM2Mw==", "bodyText": "same as in flux, do some amount of macro-fusion", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484938363", "createdAt": "2020-09-08T13:53:21Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -355,6 +355,15 @@\n \t\treturn onAssembly(new MonoFirst<>(monos));\n \t}\n \n+\t@SafeVarargs\n+\tpublic static <T> Mono<T> firstValue(Mono<? extends T>... monos) {\n+\t\treturn onAssembly(new MonoFirstValue<>(monos));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzODQ5Ng==", "bodyText": "same as in Flux, remove the instance method", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484938496", "createdAt": "2020-09-08T13:53:33Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -3082,6 +3091,17 @@ public T block(Duration timeout) {\n \t\treturn first(this, other);\n \t}\n \n+\tpublic final Mono<T> orValue(Mono<? extends T> other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzODg2MA==", "bodyText": "formatting unrelated change", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484938860", "createdAt": "2020-09-08T13:54:02Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -3259,8 +3279,7 @@ public T block(Duration timeout) {\n \t * @see Flux#onErrorResume\n \t */\n \tpublic final Mono<T> onErrorResume(Function<? super Throwable, ? extends Mono<? extends\n-\t\t\tT>> fallback) {\n-\t\treturn onAssembly(new MonoOnErrorResume<>(this, fallback));\n+\t\t\tT>> fallback) {\t\treturn onAssembly(new MonoOnErrorResume<>(this, fallback));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 49}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1df8ab9faa575c45d8935c898fad1ec59f1d0100", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/1df8ab9faa575c45d8935c898fad1ec59f1d0100", "committedDate": "2020-09-09T13:03:47Z", "message": "add header to new file + replace existing ones"}, "afterCommit": {"oid": "d8977750e8ccdf3f8e19d7a2d13d5f6bf7b9d129", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/d8977750e8ccdf3f8e19d7a2d13d5f6bf7b9d129", "committedDate": "2020-09-09T15:27:21Z", "message": "remove the or operator and replace it with a firstValue method doing the equivalent treatment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MDk2OTc5", "url": "https://github.com/reactor/reactor-core/pull/2363#pullrequestreview-486096979", "createdAt": "2020-09-10T16:11:26Z", "commit": {"oid": "f56d86f5312f1c8fef003e304dc56a9875df32a8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoxMToyNlrOHP7h0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoxMToyNlrOHP7h0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ2NjAwMA==", "bodyText": "this sounds really weird to me (\"valued\" as an adjective, not verb)\nWhat about race/fastest/other suggested names from the issue?", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r486466000", "createdAt": "2020-09-10T16:11:26Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -942,7 +941,66 @@\n \t * @return a new {@link Flux} behaving like the fastest of its sources\n \t */\n \tpublic static <I> Flux<I> first(Iterable<? extends Publisher<? extends I>> sources) {\n-\t\treturn onAssembly(new FluxFirstEmitting<>(sources));\n+\t\treturn onAssembly(new FluxFirstSignalling<>(sources));\n+\t}\n+\n+\t/**\n+\t * Pick the first {@link Publisher} to emit any value and replay all values\n+\t * from that {@link Publisher}, effectively behaving like the source that first\n+\t * emits an {@link Subscriber#onNext(Object) onNext}.\n+\t *\n+\t * <p>\n+\t * // TODO replace the img\n+\t * <p>\n+\t * Valued sources always \"win\" over an empty source (one that only emits onComplete)\n+\t * or a failing source (one that only emits onError).\n+\t * Note that like in {@link #first(Iterable)}, an infinite source can be problematic\n+\t * if no other source emits onNext.\n+\t *\n+\t * @param sources An {@link Iterable} of the competing source publishers\n+\t * @param <I> The type of values in both source and output sequences\n+\t *\n+\t * @return a new {@link Flux} behaving like the fastest of its sources\n+\t */\n+\tpublic static <I> Flux<I> firstValued(Iterable<? extends Publisher<? extends I>> sources) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56d86f5312f1c8fef003e304dc56a9875df32a8"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTMwMjUx", "url": "https://github.com/reactor/reactor-core/pull/2363#pullrequestreview-486130251", "createdAt": "2020-09-10T16:53:29Z", "commit": {"oid": "cb0e09979768f83e94ba3fb96c864df350edaaa7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NjczMDMx", "url": "https://github.com/reactor/reactor-core/pull/2363#pullrequestreview-497673031", "createdAt": "2020-09-28T15:56:17Z", "commit": {"oid": "e345febd044b9fde129a794ed79085c2ec2394f4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjc2ODU1", "url": "https://github.com/reactor/reactor-core/pull/2363#pullrequestreview-501276855", "createdAt": "2020-10-02T16:24:30Z", "commit": {"oid": "052a14b48126a64eb59698c622066c8858afdae5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTE1NDk2", "url": "https://github.com/reactor/reactor-core/pull/2363#pullrequestreview-501915496", "createdAt": "2020-10-05T10:21:26Z", "commit": {"oid": "f1a35a690f0a2cb79f595965cb13afec3f1b1abe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTc4NjM3", "url": "https://github.com/reactor/reactor-core/pull/2363#pullrequestreview-502178637", "createdAt": "2020-10-05T15:34:09Z", "commit": {"oid": "abe1ce7c7696d632fa1b768509d2f20fd53ca7ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e63583254092375d0e8ab13f6d32af2578540c", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/c9e63583254092375d0e8ab13f6d32af2578540c", "committedDate": "2020-10-05T15:37:41Z", "message": "fix #2173 add a FluxFirstValue operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e130104a68ec9e55d03502f83870211114107e6d", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/e130104a68ec9e55d03502f83870211114107e6d", "committedDate": "2020-10-05T15:37:41Z", "message": "Add tests, add orValues() operator.\n\nCo-authored-by: Audrey Neveu <aneveu@pivotal.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48fc66093cca42a338b1576b86a60d321e50bc5d", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/48fc66093cca42a338b1576b86a60d321e50bc5d", "committedDate": "2020-10-05T15:37:42Z", "message": "add MonoFirstValue operator + try to fix flaky test in FluxFirstValue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1a4b8faf98fc2a9d3ac85992a258679f7df55cd", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/f1a4b8faf98fc2a9d3ac85992a258679f7df55cd", "committedDate": "2020-10-05T15:37:42Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b8d7697cdd1097bd1009d32ffb18eb1dbe948ba", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/6b8d7697cdd1097bd1009d32ffb18eb1dbe948ba", "committedDate": "2020-10-05T15:37:42Z", "message": "add missing orValue to Mono"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "010e41173dc610790af33dadc91128f66512d93a", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/010e41173dc610790af33dadc91128f66512d93a", "committedDate": "2020-10-05T15:37:42Z", "message": "polish: unify and clarify naming on first operators:\n* unify naming of FluFirst and Mono First operators\n* rename field WIP to WINNER to be more accurate with its purpose\n* rename `amb` method to `or`for clarity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eef8932c6d6cca855915295bb09e7a9aa8e6f62", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/7eef8932c6d6cca855915295bb09e7a9aa8e6f62", "committedDate": "2020-10-05T15:37:42Z", "message": "add header to new file + replace existing ones"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "645a69d29f664168938df46364e7e0ded6a7538e", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/645a69d29f664168938df46364e7e0ded6a7538e", "committedDate": "2020-10-05T15:37:42Z", "message": "remove the or operator and replace it with a firstValue method doing the equivalent treatment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd7bafb2fb2f9784c3b7614fcbd72bb59784e300", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/bd7bafb2fb2f9784c3b7614fcbd72bb59784e300", "committedDate": "2020-10-05T15:37:42Z", "message": "Polish javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "665bf89c079411b7386f2e5113b91b88fa8ffe6d", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/665bf89c079411b7386f2e5113b91b88fa8ffe6d", "committedDate": "2020-10-05T15:37:42Z", "message": "renamed FluxFirst to FluxFirstSignalling (preparing for a potential future name change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3152e341899d28aa08689a1931004fee9f6fc105", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/3152e341899d28aa08689a1931004fee9f6fc105", "committedDate": "2020-10-05T15:37:42Z", "message": "rename operator to firstValued in both Flux and Mono"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c3b05836ebe7cd1f2f61bd88536a6fabae6ac76", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/3c3b05836ebe7cd1f2f61bd88536a6fabae6ac76", "committedDate": "2020-10-05T15:37:42Z", "message": "rename classes to align with new operator name firstValued"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4614e147737e9bad7b5b8e1a522bc6d0a8401b2b", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/4614e147737e9bad7b5b8e1a522bc6d0a8401b2b", "committedDate": "2020-10-05T15:37:42Z", "message": "suppress unchecked warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43708ae81d151dbba91ca91df2c23a057636ecad", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/43708ae81d151dbba91ca91df2c23a057636ecad", "committedDate": "2020-10-05T15:37:43Z", "message": "Rework the macro fusion to allow vararg others, remove firstValued(array)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82499dd82c4f4f32b9d2f600c37d01071fa9acbc", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/82499dd82c4f4f32b9d2f600c37d01071fa9acbc", "committedDate": "2020-10-05T15:37:43Z", "message": "fix missing safevararg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb43f87f5790fe71b173a2951c76001f4542632", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/4fb43f87f5790fe71b173a2951c76001f4542632", "committedDate": "2020-10-05T15:37:43Z", "message": "junit5: no need for public modifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c891dfd8d1b7249944ad6fdae1bed572ed9b6923", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/c891dfd8d1b7249944ad6fdae1bed572ed9b6923", "committedDate": "2020-10-05T15:37:43Z", "message": "Fix generics related warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e56f35e19387e29ffc64817052b3f90e4bbfe544", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/e56f35e19387e29ffc64817052b3f90e4bbfe544", "committedDate": "2020-10-05T15:37:43Z", "message": "Add marble diagram for Flux"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dfb9151bcf4035ead367edd127b17b9c9ed84e8", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/2dfb9151bcf4035ead367edd127b17b9c9ed84e8", "committedDate": "2020-10-05T15:37:43Z", "message": "Packed the subscribe() call on diagram"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1386f1ce4354535988369ea32ac5330da398971", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/a1386f1ce4354535988369ea32ac5330da398971", "committedDate": "2020-10-05T15:37:43Z", "message": "Moved end arrows for no-impact fluxes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "245e98677b3420bf937d813dc60ebfae57e3c847", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/245e98677b3420bf937d813dc60ebfae57e3c847", "committedDate": "2020-10-05T15:37:43Z", "message": "Added marble for Mono, changed name, optimized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c3ea153bfb481cbda835dbc4ab46d0a1b610915", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/2c3ea153bfb481cbda835dbc4ab46d0a1b610915", "committedDate": "2020-10-05T15:37:43Z", "message": "Rename to firstWithValues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b3dec1426d6df098f207981f16668efcef13b97", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/3b3dec1426d6df098f207981f16668efcef13b97", "committedDate": "2020-10-05T15:37:43Z", "message": "Aliased first to firstWithSignal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfb85008e34c8e4eeea702b7310cf7488f1195ae", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/cfb85008e34c8e4eeea702b7310cf7488f1195ae", "committedDate": "2020-10-05T15:37:43Z", "message": "Rename Mono related classes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b997150f90086586a6274f74c9dbfdfaf527fe10", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/b997150f90086586a6274f74c9dbfdfaf527fe10", "committedDate": "2020-10-05T15:37:43Z", "message": "Added a second case for the first(WithSignal) diagrams."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a784eceb4874ae8a5348b5ce8d98504ff611f55", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/5a784eceb4874ae8a5348b5ce8d98504ff611f55", "committedDate": "2020-10-05T15:37:43Z", "message": "Remove diagrams for first alias."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "384e08929100333757ed904d76f2877875585498", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/384e08929100333757ed904d76f2877875585498", "committedDate": "2020-10-05T15:37:44Z", "message": "Empty value shapes after cancel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "551c092e9ab94192b8f555fe395a0f72e6319d8d", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/551c092e9ab94192b8f555fe395a0f72e6319d8d", "committedDate": "2020-10-05T15:41:33Z", "message": "small last minute polish after rebasing on master"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abe1ce7c7696d632fa1b768509d2f20fd53ca7ab", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/abe1ce7c7696d632fa1b768509d2f20fd53ca7ab", "committedDate": "2020-10-05T14:50:37Z", "message": "Empty value shapes after cancel"}, "afterCommit": {"oid": "551c092e9ab94192b8f555fe395a0f72e6319d8d", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/551c092e9ab94192b8f555fe395a0f72e6319d8d", "committedDate": "2020-10-05T15:41:33Z", "message": "small last minute polish after rebasing on master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2857, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}