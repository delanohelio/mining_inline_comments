{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNTI1MTUz", "number": 2111, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxNjoyMlrODxnetw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxNjoyMlrODxnetw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzUzNjU1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMjoxNjoyMlrOGFLxfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDowMzoyOFrOGFys5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4ODk1OA==", "bodyText": "@simonbasle after thinking more about it, I ended up with OnErrorSubscription in both #error and #reportThrowInSubscribe.\nThe meaning of it is the same - we pass a dummy subscription to satisfy spec's 1.9 rule.\nBut now #error and #reportThrowInSubscribe look almost identical (except the spec violating catch).\nWDYT about adding try {} catch {} to error and removing reportThrowInSubscribe?", "url": "https://github.com/reactor/reactor-core/pull/2111#discussion_r408088958", "createdAt": "2020-04-14T12:16:22Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -181,13 +193,13 @@ public static Subscription emptySubscription() {\n \t * @param e the actual error\n \t */\n \tpublic static void error(Subscriber<?> s, Throwable e) {\n-\t\ts.onSubscribe(EmptySubscription.INSTANCE);\n+\t\ts.onSubscribe(OnErrorSubscription.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99ade54b8dba0a81f7504a38831566e0a9aa8bb3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODIyNzAwOA==", "bodyText": "I'm not comfortable with this modification, as #error can be used as part of the normal path, where we KNOW the subscription isn't supposed to be passed yet. the only situation where the double subscribe can be ignored by StepVerifier is reportThrowInSubscribe", "url": "https://github.com/reactor/reactor-core/pull/2111#discussion_r408227008", "createdAt": "2020-04-14T15:26:25Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -181,13 +193,13 @@ public static Subscription emptySubscription() {\n \t * @param e the actual error\n \t */\n \tpublic static void error(Subscriber<?> s, Throwable e) {\n-\t\ts.onSubscribe(EmptySubscription.INSTANCE);\n+\t\ts.onSubscribe(OnErrorSubscription.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4ODk1OA=="}, "originalCommit": {"oid": "99ade54b8dba0a81f7504a38831566e0a9aa8bb3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcyNjc1OQ==", "bodyText": "pushed a new attempt :D", "url": "https://github.com/reactor/reactor-core/pull/2111#discussion_r408726759", "createdAt": "2020-04-15T10:03:28Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Operators.java", "diffHunk": "@@ -181,13 +193,13 @@ public static Subscription emptySubscription() {\n \t * @param e the actual error\n \t */\n \tpublic static void error(Subscriber<?> s, Throwable e) {\n-\t\ts.onSubscribe(EmptySubscription.INSTANCE);\n+\t\ts.onSubscribe(OnErrorSubscription.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA4ODk1OA=="}, "originalCommit": {"oid": "99ade54b8dba0a81f7504a38831566e0a9aa8bb3"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1026, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}