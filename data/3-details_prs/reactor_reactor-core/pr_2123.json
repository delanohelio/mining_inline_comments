{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MTEzMjE4", "number": 2123, "title": "fix #2058 identify operators with scheduler through new scannable property", "bodyText": "", "createdAt": "2020-04-20T14:52:37Z", "url": "https://github.com/reactor/reactor-core/pull/2123", "merged": true, "mergeCommit": {"oid": "741f0eb72d806dcba589b6636f6bbd333643dcfa"}, "closed": true, "closedAt": "2020-07-02T09:40:22Z", "author": {"login": "aneveu"}, "timelineItems": {"totalCount": 62, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZg9oSAFqTM5NjU3MjkzMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcw7dKdABqjM1MDYyMzE3MjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTcyOTMz", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-396572933", "createdAt": "2020-04-20T15:38:28Z", "commit": {"oid": "445cd2db94419f041fdc6eacd27053e4eed7ec6c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTozODoyOFrOGIavvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNTozODoyOFrOGIavvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTQ3OTk5OQ==", "bodyText": "@simonbasle I wonder if \"asynchronous\" (or the inverse - \"synchronous\") would be a better term?", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r411479999", "createdAt": "2020-04-20T15:38:28Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/Scannable.java", "diffHunk": "@@ -210,6 +210,8 @@\n \t\t */\n \t\tpublic static final Attr<Stream<Tuple2<String, String>>> TAGS = new Attr<>(null);\n \n+\t\tpublic static final Attr<Boolean> THREAD_MODIFIER = new Attr<>(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "445cd2db94419f041fdc6eacd27053e4eed7ec6c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NjIwMTA3", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-396620107", "createdAt": "2020-04-20T16:31:50Z", "commit": {"oid": "445cd2db94419f041fdc6eacd27053e4eed7ec6c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "445cd2db94419f041fdc6eacd27053e4eed7ec6c", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/445cd2db94419f041fdc6eacd27053e4eed7ec6c", "committedDate": "2020-04-20T14:51:32Z", "message": "fix #2058 identify operators w. scheduler through new scannable prop."}, "afterCommit": {"oid": "989b89c6b9c8e9276258145f43898ed67ab8cf35", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/989b89c6b9c8e9276258145f43898ed67ab8cf35", "committedDate": "2020-04-28T08:39:42Z", "message": "fix #2058 identify operators w. scheduler through new scannable prop."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "989b89c6b9c8e9276258145f43898ed67ab8cf35", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/989b89c6b9c8e9276258145f43898ed67ab8cf35", "committedDate": "2020-04-28T08:39:42Z", "message": "fix #2058 identify operators w. scheduler through new scannable prop."}, "afterCommit": {"oid": "a2cb92dfdd21b26484bf678c2a87dabfa0a0970b", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/a2cb92dfdd21b26484bf678c2a87dabfa0a0970b", "committedDate": "2020-05-14T10:57:04Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2cb92dfdd21b26484bf678c2a87dabfa0a0970b", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/a2cb92dfdd21b26484bf678c2a87dabfa0a0970b", "committedDate": "2020-05-14T10:57:04Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "3552ef72d08a62de3b92d52f9727027acbed0ffb", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/3552ef72d08a62de3b92d52f9727027acbed0ffb", "committedDate": "2020-05-14T15:45:38Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3552ef72d08a62de3b92d52f9727027acbed0ffb", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/3552ef72d08a62de3b92d52f9727027acbed0ffb", "committedDate": "2020-05-14T15:45:38Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "cd2e8b1afb45f615c67144d4dbf2fd6c0aac464a", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/cd2e8b1afb45f615c67144d4dbf2fd6c0aac464a", "committedDate": "2020-05-14T16:46:15Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd2e8b1afb45f615c67144d4dbf2fd6c0aac464a", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/cd2e8b1afb45f615c67144d4dbf2fd6c0aac464a", "committedDate": "2020-05-14T16:46:15Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "511d40ede2ff50b80567c885564d81b3f1b2ba7a", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/511d40ede2ff50b80567c885564d81b3f1b2ba7a", "committedDate": "2020-05-15T15:30:55Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "511d40ede2ff50b80567c885564d81b3f1b2ba7a", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/511d40ede2ff50b80567c885564d81b3f1b2ba7a", "committedDate": "2020-05-15T15:30:55Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "bb8eec5243f90bfe19b7117e78b16169be4edc28", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/bb8eec5243f90bfe19b7117e78b16169be4edc28", "committedDate": "2020-05-20T09:58:26Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTk4MTEy", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-415198112", "createdAt": "2020-05-20T10:26:53Z", "commit": {"oid": "bb8eec5243f90bfe19b7117e78b16169be4edc28"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyNjo1M1rOGYFMnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyNjo1M1rOGYFMnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwNDE1Nw==", "bodyText": "Isn't it UNKNOWN here? Or source. scanUnsafe(key)?", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r427904157", "createdAt": "2020-05-20T10:26:53Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxSourceMono.java", "diffHunk": "@@ -55,4 +55,9 @@ public void subscribe(CoreSubscriber<? super I> actual) {\n \t\tsource.subscribe(actual);\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8eec5243f90bfe19b7117e78b16169be4edc28"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTk5NTA2", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-415199506", "createdAt": "2020-05-20T10:28:41Z", "commit": {"oid": "bb8eec5243f90bfe19b7117e78b16169be4edc28"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyODo0MVrOGYFQ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDoyODo0MVrOGYFQ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkwNTI3NA==", "bodyText": "ElapsedSubscriber is synchronous and does not change the thread. The scheduler is used, but only for timestamping", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r427905274", "createdAt": "2020-05-20T10:28:41Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxElapsed.java", "diffHunk": "@@ -46,7 +46,7 @@ public void subscribe(CoreSubscriber<? super Tuple2<Long, T>> actual) {\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.RUN_ON) return scheduler;\n-\n+\t\tif (key == Attr.THREAD_MODIFIER) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8eec5243f90bfe19b7117e78b16169be4edc28"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MjA1NzI1", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-415205725", "createdAt": "2020-05-20T10:37:49Z", "commit": {"oid": "bb8eec5243f90bfe19b7117e78b16169be4edc28"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDozNzo0OVrOGYFjuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMDozNzo0OVrOGYFjuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzkxMDA3NQ==", "bodyText": "see https://github.com/reactor/reactor-core/pull/2123/files#r427904157", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r427910075", "createdAt": "2020-05-20T10:37:49Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxSourceMonoFuseable.java", "diffHunk": "@@ -47,4 +47,11 @@ public String stepName() {\n \t\t}\n \t\treturn \"FluxFromMono(\" + source.toString() + \")\";\n \t}\n+\n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb8eec5243f90bfe19b7117e78b16169be4edc28"}, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb8eec5243f90bfe19b7117e78b16169be4edc28", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/bb8eec5243f90bfe19b7117e78b16169be4edc28", "committedDate": "2020-05-20T09:58:26Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "b3b2430fb837a9883ed96d92d0362c14c53e3d5e", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/b3b2430fb837a9883ed96d92d0362c14c53e3d5e", "committedDate": "2020-05-20T14:50:53Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3b2430fb837a9883ed96d92d0362c14c53e3d5e", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/b3b2430fb837a9883ed96d92d0362c14c53e3d5e", "committedDate": "2020-05-20T14:50:53Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "d035c6ff5119546ee1dcb4039e6e52830150742c", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/d035c6ff5119546ee1dcb4039e6e52830150742c", "committedDate": "2020-05-26T14:55:05Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d035c6ff5119546ee1dcb4039e6e52830150742c", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/d035c6ff5119546ee1dcb4039e6e52830150742c", "committedDate": "2020-05-26T14:55:05Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "1f4e278e1a3b34a4207c9cbfb6fe49f10e27ca2a", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/1f4e278e1a3b34a4207c9cbfb6fe49f10e27ca2a", "committedDate": "2020-05-26T15:02:58Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f4e278e1a3b34a4207c9cbfb6fe49f10e27ca2a", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/1f4e278e1a3b34a4207c9cbfb6fe49f10e27ca2a", "committedDate": "2020-05-26T15:02:58Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "b77d4fe1a0d55d392873fdd44b8b26550b3882db", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/b77d4fe1a0d55d392873fdd44b8b26550b3882db", "committedDate": "2020-05-26T15:04:30Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b77d4fe1a0d55d392873fdd44b8b26550b3882db", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/b77d4fe1a0d55d392873fdd44b8b26550b3882db", "committedDate": "2020-05-26T15:04:30Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "37d9903fe92135266044827e6c87ed2b7e14fdb2", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/37d9903fe92135266044827e6c87ed2b7e14fdb2", "committedDate": "2020-05-26T15:08:37Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37d9903fe92135266044827e6c87ed2b7e14fdb2", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/37d9903fe92135266044827e6c87ed2b7e14fdb2", "committedDate": "2020-05-26T15:08:37Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "1c4032385816a05c7bfce3440ad675f1a8f8eb0f", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/1c4032385816a05c7bfce3440ad675f1a8f8eb0f", "committedDate": "2020-05-26T15:11:12Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4Mzk5MzQ5", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-418399349", "createdAt": "2020-05-26T15:12:55Z", "commit": {"oid": "1c4032385816a05c7bfce3440ad675f1a8f8eb0f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNToxMjo1NVrOGai-tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNToxMjo1NVrOGai-tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ4OTI3MQ==", "bodyText": "replaced this entire bloc of assertions with the unique following one in order to be coherent with the rest of those tests", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r430489271", "createdAt": "2020-05-26T15:12:55Z", "author": {"login": "aneveu"}, "path": "reactor-core/src/test/java/reactor/core/publisher/MonoUsingWhenTest.java", "diffHunk": "@@ -357,28 +356,13 @@ public void resourceSupplierCanAccessContext() {\n \t\t    .verifyComplete();\n \t}\n \n-\t// == scanUnsafe tests ==\n+\t// == scan tests ==\n \n \t@Test\n \tpublic void scanOperator() {\n \t\tMonoUsingWhen<Object, Object> op = new MonoUsingWhen<>(Mono.empty(), Mono::just, Mono::just, Mono::just, Mono::just);\n \n-\t\tassertThat(op.scanUnsafe(Attr.ACTUAL))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.ACTUAL_METADATA))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.BUFFERED))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.CAPACITY))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.CANCELLED))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.DELAY_ERROR))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.ERROR))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.LARGE_BUFFERED))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.NAME))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.PARENT))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.RUN_ON))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.PREFETCH))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.REQUESTED_FROM_DOWNSTREAM))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.TERMINATED))\n-\t\t\t\t.isSameAs(op.scanUnsafe(Attr.TAGS))\n-\t\t\t\t.isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c4032385816a05c7bfce3440ad675f1a8f8eb0f"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21e78b8b50b9f4c8bc0c7c7e7e349c2bcbb80eea", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/21e78b8b50b9f4c8bc0c7c7e7e349c2bcbb80eea", "committedDate": "2020-05-27T11:39:27Z", "message": "fix #2058 identify operators with scheduler through new scannable property"}, "afterCommit": {"oid": "600f7a242f6ae55b905467457bdb4f689c1f0451", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/600f7a242f6ae55b905467457bdb4f689c1f0451", "committedDate": "2020-05-27T11:44:27Z", "message": "fix #2058 use source run mode for FluxSourceMono and fuseable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "45d9fb6ff3b47564c511512258e91640effabcd3", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/45d9fb6ff3b47564c511512258e91640effabcd3", "committedDate": "2020-06-03T15:12:25Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of SourceProducer"}, "afterCommit": {"oid": "a6982dd56dd7435c0001709dd073021197f2a5d7", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/a6982dd56dd7435c0001709dd073021197f2a5d7", "committedDate": "2020-06-03T15:15:11Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of SourceProducer"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b857b8484a74649bee9cb68762d319084666bc8", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/4b857b8484a74649bee9cb68762d319084666bc8", "committedDate": "2020-06-05T17:00:38Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 1)"}, "afterCommit": {"oid": "9998972238ac7227fda8e66b2102eb778511dea2", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/9998972238ac7227fda8e66b2102eb778511dea2", "committedDate": "2020-06-11T08:45:16Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 1)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9998972238ac7227fda8e66b2102eb778511dea2", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/9998972238ac7227fda8e66b2102eb778511dea2", "committedDate": "2020-06-11T08:45:16Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 1)"}, "afterCommit": {"oid": "2d3f7f6bc49d110f9416a3b2c07098a05a20087a", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/2d3f7f6bc49d110f9416a3b2c07098a05a20087a", "committedDate": "2020-06-11T08:55:07Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 1)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d3f7f6bc49d110f9416a3b2c07098a05a20087a", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/2d3f7f6bc49d110f9416a3b2c07098a05a20087a", "committedDate": "2020-06-11T08:55:07Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 1)"}, "afterCommit": {"oid": "b7e452722da1910330a0b813570b68728ef6e7b3", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/b7e452722da1910330a0b813570b68728ef6e7b3", "committedDate": "2020-06-11T13:01:28Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 2)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c5762475601c2eecff186fa75e69a5ba6bc5440f", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/c5762475601c2eecff186fa75e69a5ba6bc5440f", "committedDate": "2020-06-11T17:09:08Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 3)"}, "afterCommit": {"oid": "90b8d7f5a9da554ae9575ba7d5d5ebf1ee13fcc5", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/90b8d7f5a9da554ae9575ba7d5d5ebf1ee13fcc5", "committedDate": "2020-06-17T09:09:00Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 4)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "90b8d7f5a9da554ae9575ba7d5d5ebf1ee13fcc5", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/90b8d7f5a9da554ae9575ba7d5d5ebf1ee13fcc5", "committedDate": "2020-06-17T09:09:00Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 4)"}, "afterCommit": {"oid": "4fe42ba848c8a0d974059fbf23a9bb194fc25f43", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/4fe42ba848c8a0d974059fbf23a9bb194fc25f43", "committedDate": "2020-06-17T16:30:42Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 4)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4fe42ba848c8a0d974059fbf23a9bb194fc25f43", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/4fe42ba848c8a0d974059fbf23a9bb194fc25f43", "committedDate": "2020-06-17T16:30:42Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 4)"}, "afterCommit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "committedDate": "2020-06-18T17:44:26Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 5)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjY1ODE2", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-433665816", "createdAt": "2020-06-18T21:38:24Z", "commit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTozODoyNFrOGmBGKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTozODoyNFrOGmBGKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxNzAzMw==", "bodyText": "isn't it potentially ASYNC source?", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442517033", "createdAt": "2020-06-18T21:38:24Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxCreate.java", "diffHunk": "@@ -103,7 +103,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjY4NDM1", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-433668435", "createdAt": "2020-06-18T21:43:28Z", "commit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo0MzoyOFrOGmBOOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo0MzoyOFrOGmBOOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxOTA5Ng==", "bodyText": "as far as I see it is SYNC", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442519096", "createdAt": "2020-06-18T21:43:28Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxElapsed.java", "diffHunk": "@@ -46,6 +46,7 @@\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.RUN_ON) return scheduler;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjc4ODI3", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-433678827", "createdAt": "2020-06-18T22:04:45Z", "commit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjowNDo0NlrOGmBvGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjowNDo0NlrOGmBvGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyNzUxNQ==", "bodyText": "is it really ASYNC? I see it uses Scheduler for getting time", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442527515", "createdAt": "2020-06-18T22:04:46Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxReplay.java", "diffHunk": "@@ -1146,6 +1146,7 @@ public Object scanUnsafe(Scannable.Attr key) {\n \t\tif (key == Attr.PREFETCH) return getPrefetch();\n \t\tif (key == Attr.PARENT) return source;\n \t\tif (key == Attr.RUN_ON) return scheduler;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjg3ODM2", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-433687836", "createdAt": "2020-06-18T22:25:24Z", "commit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjoyNToyNFrOGmCK5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjoyNToyNFrOGmCK5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUzNDYyOQ==", "bodyText": "looks like it is SYNC", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442534629", "createdAt": "2020-06-18T22:25:24Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/MonoElapsed.java", "diffHunk": "@@ -41,6 +41,7 @@\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.RUN_ON) return scheduler;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjk1NDI5", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-433695429", "createdAt": "2020-06-18T22:44:51Z", "commit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjo0NDo1MVrOGmCi_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjo0NDo1MVrOGmCi_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MDc5OQ==", "bodyText": "I do not see other Lift operators\nare they still in progress?\nDoesn't it ignores scanUnsafe() from its super class?\nDoes it mean that CoreSubscriber<? super I> input considered to be SYNC?", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442540799", "createdAt": "2020-06-18T22:44:51Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/MonoLift.java", "diffHunk": "@@ -53,4 +53,9 @@ public String stepName() {\n \t\t}\n \t\treturn super.stepName();\n \t}\n+\n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\treturn Scannable.from(source).scanUnsafe(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjk5MDQ2", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-433699046", "createdAt": "2020-06-18T22:54:38Z", "commit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjo1NDozOFrOGmCuaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjo1NDozOFrOGmCuaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0MzcyMw==", "bodyText": "isn't the same as #2123 (comment) ?", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442543723", "createdAt": "2020-06-18T22:54:38Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/MonoSource.java", "diffHunk": "@@ -86,6 +89,9 @@ public Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.PARENT) {\n \t\t\t\treturn source;\n \t\t}\n+\t\tif (key == RUN_STYLE) {\n+\t\t    return SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzAwMTAy", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-433700102", "createdAt": "2020-06-18T22:57:36Z", "commit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjo1NzozNlrOGmCx0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjo1NzozNlrOGmCx0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjU0NDU5NQ==", "bodyText": "isn't the same as #2123 (comment) ?", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r442544595", "createdAt": "2020-06-18T22:57:36Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/MonoSourceFuseable.java", "diffHunk": "@@ -79,6 +79,9 @@ public Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.PARENT) {\n \t\t\treturn source;\n \t\t}\n+\t\tif (key == Attr.RUN_STYLE) {\n+\t\t    return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/0f5b25c9db162ac698aad3ea4b53d8d7f737b81c", "committedDate": "2020-06-18T17:44:26Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 5)"}, "afterCommit": {"oid": "3c4ebeda4e237c12428d419b6de2d83a98ac330d", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/3c4ebeda4e237c12428d419b6de2d83a98ac330d", "committedDate": "2020-06-22T09:02:44Z", "message": "fix #2058 add RUN SYNC attribute to lift publishers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a69fc2ac7f60a06b480ab1273d97afaa47cfc036", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/a69fc2ac7f60a06b480ab1273d97afaa47cfc036", "committedDate": "2020-06-22T16:08:50Z", "message": "fix #2058 code review"}, "afterCommit": {"oid": "abd40036e30e787e47e07fc7461c90fbdb1102e0", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/abd40036e30e787e47e07fc7461c90fbdb1102e0", "committedDate": "2020-06-23T16:25:17Z", "message": "fix #2058 code review (part2)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "abd40036e30e787e47e07fc7461c90fbdb1102e0", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/abd40036e30e787e47e07fc7461c90fbdb1102e0", "committedDate": "2020-06-23T16:25:17Z", "message": "fix #2058 code review (part2)"}, "afterCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/a1387b68205b077036a7f0b8fb5c97fa74ffb597", "committedDate": "2020-06-25T09:55:56Z", "message": "fix #2058 code review (part2)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NDk0NDc2", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-437494476", "createdAt": "2020-06-25T13:30:05Z", "commit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzozMDowNlrOGo6wbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDo0ODo1MVrOGo-RtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1ODg5NQ==", "bodyText": "please document this, refer to the enum for strongness of guarantees", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445558895", "createdAt": "2020-06-25T13:30:06Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/Scannable.java", "diffHunk": "@@ -210,6 +210,12 @@\n \t\t */\n \t\tpublic static final Attr<Stream<Tuple2<String, String>>> TAGS = new Attr<>(null);\n \n+\t\tpublic static final Attr<RunStyle> RUN_STYLE = new Attr<>(RunStyle.UNKNOWN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1OTkwMw==", "bodyText": "I would revert SYNC and ASYNC, document each enum independently and document that sorting by ordinal is effectively sorting from weakest confidence (0, UNKNOWN) to strongest confidence (2, SYNC)", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445559903", "createdAt": "2020-06-25T13:31:39Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/Scannable.java", "diffHunk": "@@ -210,6 +210,12 @@\n \t\t */\n \t\tpublic static final Attr<Stream<Tuple2<String, String>>> TAGS = new Attr<>(null);\n \n+\t\tpublic static final Attr<RunStyle> RUN_STYLE = new Attr<>(RunStyle.UNKNOWN);\n+\n+\t\tpublic enum RunStyle {\n+\t\t\tUNKNOWN, SYNC, ASYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU2MjIzMQ==", "bodyText": "at first I wondered if it should delegate to the source, but contrary to LiftSubscriber this one can be asserted by the onEachOperatorHook, so it makes sense to set it as SYNC (eg. so that only the parent would be decorated by Sleuth if ASYNC) \ud83d\udc4d", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445562231", "createdAt": "2020-06-25T13:35:04Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/ConnectableFluxHide.java", "diffHunk": "@@ -42,9 +42,10 @@ public int getPrefetch() {\n \n \t@Override\n \t@Nullable\n-\tpublic Object scanUnsafe(Scannable.Attr key) {\n-\t\tif (key == Scannable.Attr.PARENT) return source;\n-\t\tif (key == Scannable.Attr.PREFETCH) return getPrefetch();\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.PARENT) return source;\n+\t\tif (key == Attr.PREFETCH) return getPrefetch();\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NTE2MA==", "bodyText": "the ErrorSubscription should also answer to RUN_STYLE", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445575160", "createdAt": "2020-06-25T13:52:49Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxErrorOnRequest.java", "diffHunk": "@@ -45,7 +45,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3NzIwMA==", "bodyText": "should probably also cover GenerateSubscription", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445577200", "createdAt": "2020-06-25T13:55:32Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxGenerate.java", "diffHunk": "@@ -85,7 +85,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODU1MA==", "bodyText": "as discussed above in ConnectableFluxHide, I think it makes better sense to reply SYNC for xxxHide operators.", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445578550", "createdAt": "2020-06-25T13:57:13Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxHide.java", "diffHunk": "@@ -39,6 +40,12 @@\n \t\treturn new HideSubscriber<>(actual);\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t    if (key == Attr.RUN_STYLE) return Scannable.from(source).scanUnsafe(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4MDI1Mg==", "bodyText": "the HideSubscriber and SuppressFuseableSubscriber should also be covered (same, replying SYNC)", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445580252", "createdAt": "2020-06-25T13:59:29Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxHide.java", "diffHunk": "@@ -39,6 +40,12 @@\n \t\treturn new HideSubscriber<>(actual);\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t    if (key == Attr.RUN_STYLE) return Scannable.from(source).scanUnsafe(key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3ODU1MA=="}, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4MTc3Mw==", "bodyText": "the IntervalRunnable should also be covered", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445581773", "createdAt": "2020-06-25T14:01:33Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxInterval.java", "diffHunk": "@@ -79,6 +78,7 @@ public void subscribe(CoreSubscriber<? super Long> actual) {\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.RUN_ON) return timedScheduler;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4Mjk3NQ==", "bodyText": "IterableSubscription and its conditional counterpart should also be covered", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445582975", "createdAt": "2020-06-25T14:03:21Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxIterable.java", "diffHunk": "@@ -92,6 +95,9 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (iterable instanceof Collection) return ((Collection) iterable).size();\n \t\t\tif (iterable instanceof Tuple2) return ((Tuple2) iterable).size();\n \t\t}\n+\t\tif (key == RUN_STYLE) {\n+\t\t    return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4NjkxMw==", "bodyText": "move up, close to subscribeOrReturn. I was first confused that this was covering the inner (which is already covered by virtue of extending the non=fused version)", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445586913", "createdAt": "2020-06-25T14:09:08Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxMetricsFuseable.java", "diffHunk": "@@ -185,4 +183,10 @@ public int size() {\n \t\t\treturn qs == null ? 0 : qs.size();\n \t\t}\n \t}\n+\n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NjAyNg==", "bodyText": "the inner WeakScalarSubscription should also be covered. Also, neightbour class FluxJoin isn't covered at all.", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445596026", "createdAt": "2020-06-25T14:21:25Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxJust.java", "diffHunk": "@@ -73,6 +73,7 @@ public void subscribe(final CoreSubscriber<? super T> actual) {\n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.BUFFERED) return 1;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU5NzY3OQ==", "bodyText": "neighbour class FluxLimitRequest isn't covered at all", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445597679", "createdAt": "2020-06-25T14:23:33Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxLiftFuseable.java", "diffHunk": "@@ -62,6 +62,12 @@ public String stepName() {\n \t\treturn super.stepName();\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.RUN_STYLE) return Scannable.from(source).scanUnsafe(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwMDI2MA==", "bodyText": "the other subscriber, MergeOrderedMainProducer should also be covered", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445600260", "createdAt": "2020-06-25T14:27:08Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxMergeOrdered.java", "diffHunk": "@@ -421,6 +422,7 @@ public Object scanUnsafe(Attr key){\n \t\t\tif (key == Attr.PREFETCH) return prefetch;\n \t\t\tif (key == Attr.TERMINATED) return done;\n \t\t\tif (key == Attr.BUFFERED) return queue.size();\n+\t\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwNDE0NA==", "bodyText": "FluxOnBackpressureBuffer isn't covered at all", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445604144", "createdAt": "2020-06-25T14:32:18Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxOnBackpressureBufferStrategy.java", "diffHunk": "@@ -66,6 +66,12 @@ public int getPrefetch() {\n \t\treturn Integer.MAX_VALUE;\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwODIwNQ==", "bodyText": "the two other inners should probably be covered too", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445608205", "createdAt": "2020-06-25T14:37:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxPublish.java", "diffHunk": "@@ -552,6 +553,7 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (key == Attr.BUFFERED) return queue != null ? queue.size() : 0;\n \t\t\tif (key == Attr.TERMINATED) return isTerminated();\n \t\t\tif (key == Attr.CANCELLED) return s == Operators.cancelledSubscription();\n+\t\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYwOTMxOA==", "bodyText": "PublishMulticastInner should be also covered", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445609318", "createdAt": "2020-06-25T14:39:03Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxPublishMulticast.java", "diffHunk": "@@ -169,6 +178,9 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (key == Attr.BUFFERED) {\n \t\t\t\treturn queue != null ? queue.size() : 0;\n \t\t\t}\n+\t\t\tif (key == RUN_STYLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxMDU3Mw==", "bodyText": "RangeSubscription should also be covered", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445610573", "createdAt": "2020-06-25T14:40:47Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxRange.java", "diffHunk": "@@ -70,7 +70,8 @@ public void subscribe(CoreSubscriber<? super Integer> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTYxNjU2NA==", "bodyText": "actually, after looking carefully at the operator I think this one is SYNC: the timeout only is for delaying cancellation from source. The RefCountInner isn't scheduled on a separate thread. By the way said inner should be covered>", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r445616564", "createdAt": "2020-06-25T14:48:51Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxRefCountGrace.java", "diffHunk": "@@ -63,6 +63,7 @@ public int getPrefetch() {\n \tpublic Object scanUnsafe(Attr key) {\n \t\tif (key == Attr.PREFETCH) return getPrefetch();\n \t\tif (key == Attr.PARENT) return source;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.ASYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTI1MjAx", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-438125201", "createdAt": "2020-06-26T08:51:52Z", "commit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1MTo1MlrOGpZDYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwODo1MTo1MlrOGpZDYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA1NTI2Ng==", "bodyText": "missing coverage of SampleTimeoutMain and SampleTimeoutOther inners", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446055266", "createdAt": "2020-06-26T08:51:52Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxSampleTimeout.java", "diffHunk": "@@ -74,6 +74,12 @@ public int getPrefetch() {\n \t\treturn main;\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MTMzOTYy", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-438133962", "createdAt": "2020-06-26T09:04:29Z", "commit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwOTowNDoyOVrOGpZcVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMDoxMjozMlrOGpbfwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2MTY1NQ==", "bodyText": "This one and the inner should probably also report RUN_ON.", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446061655", "createdAt": "2020-06-26T09:04:29Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxSubscribeOn.java", "diffHunk": "@@ -69,6 +69,12 @@\n \t\treturn null;\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA2ODEzOQ==", "bodyText": "I think it would make sense to cover TimeoutTimeoutSubscriber and TimeoutOtherSubscriber. They currently don't implement Scannable-via-InnerConsumer<T> though, so it would mean having them implement InnerConsumer<T> (which I think is acceptable)", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446068139", "createdAt": "2020-06-26T09:17:28Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxTimeout.java", "diffHunk": "@@ -295,6 +301,12 @@ void handleTimeout() {\n \t\t\t\tother.subscribe(new TimeoutOtherSubscriber<>(actual, this));\n \t\t\t}\n \t\t}\n+\n+\t\t@Override\n+\t\tpublic Object scanUnsafe(Attr key) {\n+\t\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;\n+\t\t\treturn super.scanUnsafe(key);\n+\t\t}\n \t}\n \n \tstatic final class TimeoutOtherSubscriber<T> implements CoreSubscriber<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3MjMzMg==", "bodyText": "missing coverage of ZipCoordinator", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446072332", "createdAt": "2020-06-26T09:25:20Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxZip.java", "diffHunk": "@@ -488,6 +490,7 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (key == Attr.ACTUAL) return parent;\n \t\t\tif (key == Attr.CANCELLED) return s == Operators.cancelledSubscription();\n \t\t\tif (key == Attr.BUFFERED) return parent.scalars[index] == null ? 0 : 1;\n+\t\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3NzE1Mg==", "bodyText": "This one is ASYNC, as the Thread that complete the CompletionStage might be different than the one that performs the conversion from CompletionStage to Mono.", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446077152", "createdAt": "2020-06-26T09:35:04Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/MonoCompletionStage.java", "diffHunk": "@@ -98,6 +94,7 @@ else if (v != null) {\n \n     @Override\n     public Object scanUnsafe(Attr key) {\n-        return null; //no particular key to be represented, still useful in hooks\n+        if (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3ODUwNg==", "bodyText": "Like FluxCreate, MonoCreate is ASYNC> It is debatable for the sink itself, since it is unlikely to be wrapped by hooks, but to be on the safe side let's mark it as ASYNC too.", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446078506", "createdAt": "2020-06-26T09:37:51Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/MonoCreate.java", "diffHunk": "@@ -115,6 +116,9 @@ public Object scanUnsafe(Attr key) {\n \t\t\tif (key == Attr.CANCELLED) {\n \t\t\t\treturn disposable == CANCELLED;\n \t\t\t}\n+\t\t\tif (key == Attr.RUN_STYLE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA3ODUxOA==", "bodyText": "Like FluxCreate, MonoCreate is ASYNC", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446078518", "createdAt": "2020-06-26T09:37:54Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/MonoCreate.java", "diffHunk": "@@ -63,7 +63,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA4ODIwMw==", "bodyText": "as discussed in ConnectableFluxHide and FluxHide, I think it makes better sense to reply SYNC for xxxHide operators.", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446088203", "createdAt": "2020-06-26T09:57:19Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/MonoHide.java", "diffHunk": "@@ -37,4 +38,10 @@\n     public CoreSubscriber<? super T> subscribeOrReturn(CoreSubscriber<? super T> actual) {\n         return new FluxHide.HideSubscriber<>(actual);\n     }\n+\n+    @Override\n+    public Object scanUnsafe(Attr key) {\n+        if (key == Attr.RUN_STYLE) return Scannable.from(source).scanUnsafe(key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjA5NTI5Nw==", "bodyText": "should also cover MonoUsingSubscriber", "url": "https://github.com/reactor/reactor-core/pull/2123#discussion_r446095297", "createdAt": "2020-06-26T10:12:32Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/MonoUsing.java", "diffHunk": "@@ -116,7 +116,8 @@ public void subscribe(CoreSubscriber<? super T> actual) {\n \n \t@Override\n \tpublic Object scanUnsafe(Attr key) {\n-\t\treturn null; //no particular key to be represented, still useful in hooks\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1387b68205b077036a7f0b8fb5c97fa74ffb597", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/a1387b68205b077036a7f0b8fb5c97fa74ffb597", "committedDate": "2020-06-25T09:55:56Z", "message": "fix #2058 code review (part2)"}, "afterCommit": {"oid": "26552f67f2cfd7c10e59e60f3b905504c55b6e1d", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/26552f67f2cfd7c10e59e60f3b905504c55b6e1d", "committedDate": "2020-06-26T16:16:12Z", "message": "fix #2058 code review (part 3)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0542a81a2f3a7548cfd69739a77d273dd98c4b33", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/0542a81a2f3a7548cfd69739a77d273dd98c4b33", "committedDate": "2020-06-26T16:52:57Z", "message": "fix #2058 code review (part 4)"}, "afterCommit": {"oid": "a8162d675ed6c6d1287b0553ab4bec032b6d504c", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/a8162d675ed6c6d1287b0553ab4bec032b6d504c", "committedDate": "2020-06-29T14:42:23Z", "message": "fix #2058 code review (part 4)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNDYzMzM4", "url": "https://github.com/reactor/reactor-core/pull/2123#pullrequestreview-441463338", "createdAt": "2020-07-02T08:32:18Z", "commit": {"oid": "a8162d675ed6c6d1287b0553ab4bec032b6d504c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c32e4a585e7336d4b87773a08e4e47f198714c8", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/3c32e4a585e7336d4b87773a08e4e47f198714c8", "committedDate": "2020-07-02T08:41:30Z", "message": "fix #2058 add RUN SYNC attribute to implementations of MonoOperator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c834e1ec8fcbcd522757e8ea9de00adc66523c8d", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/c834e1ec8fcbcd522757e8ea9de00adc66523c8d", "committedDate": "2020-07-02T08:41:30Z", "message": "fix #2058 add RUN SYNC attribute to implementations of MonoFromFluxOperator + clean on Mono Operator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bf0336611f3c8c41e692d6199896e5f682a22a3", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/7bf0336611f3c8c41e692d6199896e5f682a22a3", "committedDate": "2020-07-02T08:41:30Z", "message": "fix #2058 add RUN SYNC attribute to implementations of FluxOperator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "614c9e045be0566e83f616f4bf87f58d423f8486", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/614c9e045be0566e83f616f4bf87f58d423f8486", "committedDate": "2020-07-02T08:41:30Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of SourceProducer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e671ca2b669b4b7277d18a7d5c8b53e50aa6787", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/2e671ca2b669b4b7277d18a7d5c8b53e50aa6787", "committedDate": "2020-07-02T08:46:29Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 2)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4b9e14ec685b0de66be4ac6ad1026e68485aa2", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/5e4b9e14ec685b0de66be4ac6ad1026e68485aa2", "committedDate": "2020-07-02T08:46:29Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 3)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11f2c85efe3403493a5f33e2d474580b6c720ad2", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/11f2c85efe3403493a5f33e2d474580b6c720ad2", "committedDate": "2020-07-02T08:46:29Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 4)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "963c2c703cea6eb9dc14d232a9da228f1b788c25", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/963c2c703cea6eb9dc14d232a9da228f1b788c25", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 add RUN SYNC attribute to flux implementations of FluxOperator (part 5)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66bc75f33ae07801bd53f96767ca30e7031c970b", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/66bc75f33ae07801bd53f96767ca30e7031c970b", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 add RUN SYNC attribute to lift publishers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cb3b3da50a436fdb8b5c965783b2089c6b49ff3", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/6cb3b3da50a436fdb8b5c965783b2089c6b49ff3", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 add RUN SYNC attribute to Mono Publishers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "511d2e9781da2acdc453878617eaa3354151bd09", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/511d2e9781da2acdc453878617eaa3354151bd09", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 add RUN SYNC attribute to ConnectableFlux implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87d573910aab8922c1b6e15bfc344f3c656eb643", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/87d573910aab8922c1b6e15bfc344f3c656eb643", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 add RUN SYNC attribute to ParallelFlux implementations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41f82a8bfa78d0f0fadcc9d0f88b60fdafdea6b8", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/41f82a8bfa78d0f0fadcc9d0f88b60fdafdea6b8", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 code review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8e72dcccc472ab883135be8bdc70b9029344d3", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/ec8e72dcccc472ab883135be8bdc70b9029344d3", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 add missing ParallelFlux Implementations :("}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89ba942ca14767b5e8e02ad882eaa4c7015cd7d2", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/89ba942ca14767b5e8e02ad882eaa4c7015cd7d2", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 code review (part2)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5f33983ec23d6df70c12b0d2466f2f9299ec06f", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/b5f33983ec23d6df70c12b0d2466f2f9299ec06f", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 code review (part 3)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8acdbf84e79a8fb0819d658f9e7dcb8da6753aa4", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/8acdbf84e79a8fb0819d658f9e7dcb8da6753aa4", "committedDate": "2020-07-02T08:49:17Z", "message": "fix #2058 code review (part 4)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce02fc4bfcc8ff3943cf8462312a2bd2c178dbc7", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/ce02fc4bfcc8ff3943cf8462312a2bd2c178dbc7", "committedDate": "2020-07-02T09:09:17Z", "message": "fix #2058 add RUN_SYNC attribute to FluxConcatMapNoPrefetch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e7d1961e58108b9590de910df6aa8be6a01c0c1", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/1e7d1961e58108b9590de910df6aa8be6a01c0c1", "committedDate": "2020-07-02T09:28:45Z", "message": "fix #2058 add RUN_SYNC attribute to FluxConcatMapNoPrefetch"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a8162d675ed6c6d1287b0553ab4bec032b6d504c", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/a8162d675ed6c6d1287b0553ab4bec032b6d504c", "committedDate": "2020-06-29T14:42:23Z", "message": "fix #2058 code review (part 4)"}, "afterCommit": {"oid": "1e7d1961e58108b9590de910df6aa8be6a01c0c1", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/1e7d1961e58108b9590de910df6aa8be6a01c0c1", "committedDate": "2020-07-02T09:28:45Z", "message": "fix #2058 add RUN_SYNC attribute to FluxConcatMapNoPrefetch"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2947, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}