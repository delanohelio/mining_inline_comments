{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MjU2MzY3", "number": 2100, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowODoxN1rODucNtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyMTo0M1rODylCBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDIzMzUxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjowODoxN1rOGAb_5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNjoxNjozNFrOGAcbbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExMTkxMQ==", "bodyText": "nit: wrong indentation", "url": "https://github.com/reactor/reactor-core/pull/2100#discussion_r403111911", "createdAt": "2020-04-03T16:08:17Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "diffHunk": "@@ -232,6 +259,25 @@ else if (d) {\n \t\t}\n \t}\n \n+\tprivate void discardMultiple(LinkedArrayNode<T> head) {\n+\t\tsynchronized (actual) {\n+\t\tLinkedArrayNode<T> originalHead = head;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03798cc792061ebc1e80ffb402049e4108f7fab6"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExODk1OA==", "bodyText": "ah snap that is actually a leftover that wasn't supposed to be here (the synchronized is redundant)", "url": "https://github.com/reactor/reactor-core/pull/2100#discussion_r403118958", "createdAt": "2020-04-03T16:16:34Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "diffHunk": "@@ -232,6 +259,25 @@ else if (d) {\n \t\t}\n \t}\n \n+\tprivate void discardMultiple(LinkedArrayNode<T> head) {\n+\t\tsynchronized (actual) {\n+\t\tLinkedArrayNode<T> originalHead = head;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzExMTkxMQ=="}, "originalCommit": {"oid": "03798cc792061ebc1e80ffb402049e4108f7fab6"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTA1OTUzOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNzo0NzoyOVrOGBCATw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODoxMjo0OVrOGBMZbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczNDYwNw==", "bodyText": "Should not we use Operators.onNextDropped here?\noperators discard is Reactor only feature, so someone who uses another framework (yeah, if reactor meets non-reactor publisher, then SerializedSubscriber applies) then it is going to be impossible to handle discarded element at all.\nAlso, I found it really confusing having onDrop and discard unintegrated, which means that if no on discard hooks, most likely onDrop should be applied and element should find at least something", "url": "https://github.com/reactor/reactor-core/pull/2100#discussion_r403734607", "createdAt": "2020-04-05T17:47:29Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "diffHunk": "@@ -69,21 +69,23 @@ public void onSubscribe(Subscription s) {\n \t@Override\n \tpublic void onNext(T t) {\n \t\tif (cancelled || done) {\n+\t\t\tOperators.onDiscard(t, actual.currentContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9eda6445f8ee7bbe661284cedd9f00d1229deb"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkwNDg3OQ==", "bodyText": "right ! one way to do it would be to check for cancelled and done separately.", "url": "https://github.com/reactor/reactor-core/pull/2100#discussion_r403904879", "createdAt": "2020-04-06T08:12:49Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "diffHunk": "@@ -69,21 +69,23 @@ public void onSubscribe(Subscription s) {\n \t@Override\n \tpublic void onNext(T t) {\n \t\tif (cancelled || done) {\n+\t\t\tOperators.onDiscard(t, actual.currentContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczNDYwNw=="}, "originalCommit": {"oid": "1d9eda6445f8ee7bbe661284cedd9f00d1229deb"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTA1OTgyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNzo0Nzo0M1rOGBCAcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNzo0Nzo0M1rOGBCAcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczNDY0MQ==", "bodyText": "same as above", "url": "https://github.com/reactor/reactor-core/pull/2100#discussion_r403734641", "createdAt": "2020-04-05T17:47:43Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "diffHunk": "@@ -69,21 +69,23 @@ public void onSubscribe(Subscription s) {\n \t@Override\n \tpublic void onNext(T t) {\n \t\tif (cancelled || done) {\n+\t\t\tOperators.onDiscard(t, actual.currentContext());\n \t\t\treturn;\n \t\t}\n \n \t\tsynchronized (this) {\n \t\t\tif (cancelled || done) {\n+\t\t\t\tOperators.onDiscard(t, actual.currentContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9eda6445f8ee7bbe661284cedd9f00d1229deb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwNTA1OTk3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNVQxNzo0ODowMVrOGBCAhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQwODo1MTo0MVrOGBN0kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczNDY2Mw==", "bodyText": "same as above", "url": "https://github.com/reactor/reactor-core/pull/2100#discussion_r403734663", "createdAt": "2020-04-05T17:48:01Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "diffHunk": "@@ -148,6 +150,11 @@ public void cancel() {\n \t}\n \n \tvoid serAdd(T value) {\n+\t\tif (cancelled) {\n+\t\t\tOperators.onDiscard(value, actual.currentContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d9eda6445f8ee7bbe661284cedd9f00d1229deb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzkyODIwOA==", "bodyText": "here I don't think so, since we're dealing with cancellation inside onNext (which is precisely what doOnDiscard is about)", "url": "https://github.com/reactor/reactor-core/pull/2100#discussion_r403928208", "createdAt": "2020-04-06T08:51:41Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "diffHunk": "@@ -148,6 +150,11 @@ public void cancel() {\n \t}\n \n \tvoid serAdd(T value) {\n+\t\tif (cancelled) {\n+\t\t\tOperators.onDiscard(value, actual.currentContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzczNDY2Mw=="}, "originalCommit": {"oid": "1d9eda6445f8ee7bbe661284cedd9f00d1229deb"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0MzYyMTE5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyMTo0M1rOGGtONg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNlQxNjoyMzowMVrOGGtRiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NTU1OA==", "bodyText": "dead code, oops", "url": "https://github.com/reactor/reactor-core/pull/2100#discussion_r409685558", "createdAt": "2020-04-16T16:21:43Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "diffHunk": "@@ -182,22 +206,27 @@ void serDrainLoop(CoreSubscriber<? super T> actual) {\n \n \t\t\tsynchronized (this) {\n \t\t\t\tif (cancelled) {\n+\t\t\t\t\tdiscardMultiple(this.head);\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tif (!missed) {\n-\t\t\t\t\temitting = false;\n+\t\t\t\tif (!concurrentlyAddedContent) {\n+\t\t\t\t\tdrainLoopInProgress = false;\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tmissed = false;\n+\t\t\t\tconcurrentlyAddedContent = false;\n \n \t\t\t\td = done;\n \t\t\t\te = error;\n \t\t\t\tn = head;\n \n \t\t\t\thead = null;\n \t\t\t\ttail = null;\n+\n+//\t\t\t\tif (cancelled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e10a2d7862947c99e5d863d1931d8c4961ab6172"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NjQwOQ==", "bodyText": "I started looking. Will get back with my approval shortly", "url": "https://github.com/reactor/reactor-core/pull/2100#discussion_r409686409", "createdAt": "2020-04-16T16:23:01Z", "author": {"login": "OlegDokuka"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SerializedSubscriber.java", "diffHunk": "@@ -182,22 +206,27 @@ void serDrainLoop(CoreSubscriber<? super T> actual) {\n \n \t\t\tsynchronized (this) {\n \t\t\t\tif (cancelled) {\n+\t\t\t\t\tdiscardMultiple(this.head);\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tif (!missed) {\n-\t\t\t\t\temitting = false;\n+\t\t\t\tif (!concurrentlyAddedContent) {\n+\t\t\t\t\tdrainLoopInProgress = false;\n \t\t\t\t\treturn;\n \t\t\t\t}\n \n-\t\t\t\tmissed = false;\n+\t\t\t\tconcurrentlyAddedContent = false;\n \n \t\t\t\td = done;\n \t\t\t\te = error;\n \t\t\t\tn = head;\n \n \t\t\t\thead = null;\n \t\t\t\ttail = null;\n+\n+//\t\t\t\tif (cancelled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTY4NTU1OA=="}, "originalCommit": {"oid": "e10a2d7862947c99e5d863d1931d8c4961ab6172"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1024, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}