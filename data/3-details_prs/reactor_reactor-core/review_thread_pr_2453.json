{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA4MTc2NzY4", "number": 2453, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozMDo1NFrOEzPGIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0NzozNVrOEzQuHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTYwMTYyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozMDo1NFrOHqVkvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0OTo0M1rOHqYMbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NTcxMA==", "bodyText": ".isTrue() shouldn't be part of the description here, probably a false positive during search-replace", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514155710", "createdAt": "2020-10-29T10:30:54Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "diffHunk": "@@ -163,9 +163,8 @@ public void onComplete() {\n \t\tlatch.await(8, TimeUnit.SECONDS);\n \n \t\tlong count = latch.getCount();\n-\t\torg.junit.Assert.assertTrue(\"Count > 0 : \" + count + \" (\" + list + \")  , Running on \" +\n-\t\t\t\t\t\tSchedulers.DEFAULT_POOL_SIZE + \" CPU\",\n-\t\t\t\tlatch.getCount() == 0);\n+\t\tassertThat(latch.getCount()).as(\"Count > 0 : \" + count + \" (\" + list + \").isTrue()  , Running on \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5ODYzOA==", "bodyText": "still not fixed", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514198638", "createdAt": "2020-10-29T11:49:43Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "diffHunk": "@@ -163,9 +163,8 @@ public void onComplete() {\n \t\tlatch.await(8, TimeUnit.SECONDS);\n \n \t\tlong count = latch.getCount();\n-\t\torg.junit.Assert.assertTrue(\"Count > 0 : \" + count + \" (\" + list + \")  , Running on \" +\n-\t\t\t\t\t\tSchedulers.DEFAULT_POOL_SIZE + \" CPU\",\n-\t\t\t\tlatch.getCount() == 0);\n+\t\tassertThat(latch.getCount()).as(\"Count > 0 : \" + count + \" (\" + list + \").isTrue()  , Running on \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NTcxMA=="}, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTYwNTA2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingIterableTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozMTo1NFrOHqVm9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozMTo1NFrOHqVm9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1NjI3OQ==", "bodyText": "can be containsExactly(1, 2, ...) (applies to all assertThat(list).isEqualTo(Arrays.asList(...)) occurrences)", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514156279", "createdAt": "2020-10-29T10:31:54Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingIterableTest.java", "diffHunk": "@@ -51,7 +50,7 @@ public void normal() {\n \t\t\tvalues.add(i);\n \t\t}\n \n-\t\tAssert.assertEquals(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), values);\n+\t\tassertThat(values).isEqualTo(Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTYxODIxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxCancelOnTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozNTozNVrOHqVvVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo1MToyN1rOHqYP0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1ODQyMA==", "bodyText": "can be assertThat(threadHash).hasValue(null)", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514158420", "createdAt": "2020-10-29T10:35:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxCancelOnTest.java", "diffHunk": "@@ -52,7 +51,7 @@ public void cancelOnDedicatedScheduler() throws Exception {\n \t\t    .cancel();\n \n \t\tlatch.await();\n-\t\tAssert.assertNull(threadHash.get());\n+\t\tassertThat(threadHash.get()).isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5OTUwNg==", "bodyText": "still not fixed", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514199506", "createdAt": "2020-10-29T11:51:27Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxCancelOnTest.java", "diffHunk": "@@ -52,7 +51,7 @@ public void cancelOnDedicatedScheduler() throws Exception {\n \t\t    .cancel();\n \n \t\tlatch.await();\n-\t\tAssert.assertNull(threadHash.get());\n+\t\tassertThat(threadHash.get()).isNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1ODQyMA=="}, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTYyMDExOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxConcatArrayTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozNjowNVrOHqVwfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozNjowNVrOHqVwfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1ODcxNw==", "bodyText": "can be fluently chained", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514158717", "createdAt": "2020-10-29T10:36:05Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxConcatArrayTest.java", "diffHunk": "@@ -174,10 +173,10 @@ public void pairWise() {\n \t\tFlux<String> f = Flux.concat(Flux.just(\"test\"), Flux.just(\"test2\"))\n \t\t                     .concatWith(Flux.just(\"test3\"));\n \n-\t\tAssert.assertTrue(f instanceof FluxConcatArray);\n+\t\tassertThat(f).isInstanceOf(FluxConcatArray.class);\n \t\tFluxConcatArray<String> s = (FluxConcatArray<String>) f;\n-\t\tAssert.assertTrue(s.array != null);\n-\t\tAssert.assertTrue(s.array.length == 3);\n+\t\tassertThat(s.array).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTYyMDU3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxConcatArrayTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozNjoxNlrOHqVw0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozNjoxNlrOHqVw0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE1ODgwMQ==", "bodyText": "can be fluently chained", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514158801", "createdAt": "2020-10-29T10:36:16Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxConcatArrayTest.java", "diffHunk": "@@ -190,10 +189,10 @@ public void pairWise2() {\n \t\tFlux<String> f = Mono.just(\"test\")\n \t\t                     .concatWith(Flux.just(\"test2\"));\n \n-\t\tAssert.assertTrue(f instanceof FluxConcatArray);\n+\t\tassertThat(f).isInstanceOf(FluxConcatArray.class);\n \t\tFluxConcatArray<String> s = (FluxConcatArray<String>) f;\n-\t\tAssert.assertTrue(s.array != null);\n-\t\tAssert.assertTrue(s.array.length == 2);\n+\t\tassertThat(s.array).isNotNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTYyOTA2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxDeferTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozODoyOVrOHqV2Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDozODoyOVrOHqV2Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2MDE1OA==", "bodyText": "reverse the logic, always put the value under test in the assertThat", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514160158", "createdAt": "2020-10-29T10:38:29Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxDeferTest.java", "diffHunk": "@@ -78,9 +78,9 @@ public void deferStream(){\n \t\tFlux<Integer> source =\n \t\t\t\tFlux.defer(() -> Flux.just(i.incrementAndGet()));\n \n-\t\tAssert.assertEquals(source.blockLast().intValue(), 1);\n-\t\tAssert.assertEquals(source.blockLast().intValue(), 2);\n-\t\tAssert.assertEquals(source.blockLast().intValue(), 3);\n+\t\tassertThat(1).isEqualTo(source.blockLast().intValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTY3NDEwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekFuseableTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDo1MTowN1rOHqWSGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDo1MTowN1rOHqWSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2NzMyMA==", "bodyText": "can be assertThat(e).hasCause(err)", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514167320", "createdAt": "2020-10-29T10:51:07Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekFuseableTest.java", "diffHunk": "@@ -444,8 +442,8 @@ public void afterTerminateCallbackErrorAndErrorCallbackError() {\n \t\t}\n \t\tcatch (Exception e) {\n \t\t\te.printStackTrace();\n-\t\t\tassertSame(e.toString(), err, e.getCause());\n-\t\t\tassertEquals(0, err2.getSuppressed().length);\n+\t\t\tassertThat(e.getCause()).as(e.toString()).isSameAs(err);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTY3NjY1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDo1MTo1NVrOHqWTvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDo1MTo1NVrOHqWTvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2Nzc0Mg==", "bodyText": "can be assertThat(d).hasMessage(exception().getMessage())", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514167742", "createdAt": "2020-10-29T10:51:55Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "diffHunk": "@@ -143,9 +140,7 @@\n \t\t\t\t})).producerNever()\n \t\t\t\t   .verifier(step -> {\n \t\t\t\t\t   //fixme Support bubbled error verification in reactor-test\n-\t\t\t\t\t   Hooks.onErrorDropped(d -> assertTrue(d.getMessage(),\n-\t\t\t\t\t\t\t   d.getMessage()\n-\t\t\t\t\t\t\t    .equals(exception().getMessage())));\n+\t\t\t\t\t   Hooks.onErrorDropped(d -> assertThat(d.getMessage()).isEqualTo(exception().getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTY4MjE4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDo1MzozN1rOHqWXMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDo1MzozN1rOHqWXMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2ODYyNA==", "bodyText": "nitpick: can be assertThat(e).hasCause(err)", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514168624", "createdAt": "2020-10-29T10:53:37Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "diffHunk": "@@ -682,8 +665,8 @@ public void afterTerminateCallbackErrorAndErrorCallbackError() {\n \t\t\tfail(\"expected thrown exception\");\n \t\t}\n \t\tcatch (Exception e) {\n-\t\t\tassertSame(err, e.getCause());\n-\t\t\tassertEquals(0, err2.getSuppressed().length);\n+\t\t\tassertThat(e.getCause()).isSameAs(err);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 266}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTY4NDYxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDo1NDoyNlrOHqWY2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMDo1NDoyNlrOHqWY2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE2OTA0OQ==", "bodyText": "all these can use hasCause(...) and hasSuppressedException(...)", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514169049", "createdAt": "2020-10-29T10:54:26Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "diffHunk": "@@ -710,13 +693,13 @@ public void afterTerminateCallbackErrorAndErrorCallbackError2() {\n \t\t\tfail(\"expected thrown exception\");\n \t\t}\n \t\tcatch (Exception e) {\n-\t\t\tassertSame(afterTerminate, e.getCause());\n+\t\t\tassertThat(e.getCause()).isSameAs(afterTerminate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTc4MjAwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToyMTo1OVrOHqXUPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToyMTo1OVrOHqXUPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4NDI1NA==", "bodyText": "should be isGreaterThanOrEqualTo", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514184254", "createdAt": "2020-10-29T11:21:59Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "diffHunk": "@@ -562,7 +561,7 @@ public void analyticsTest() throws Exception {\n \t\t}\n \t\tsource.onComplete();\n \n-\t\tAssert.assertTrue(result.block(Duration.ofSeconds(5)) >= avgTime * 0.6);\n+\t\tassertThat(result.block(Duration.ofSeconds(5))).isGreaterThan((long)(avgTime * 0.6));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTc4NTUxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToyMzowN1rOHqXWfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToyMzowN1rOHqXWfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4NDgyOA==", "bodyText": "invert expected and asserted values", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514184828", "createdAt": "2020-10-29T11:23:07Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "diffHunk": "@@ -1099,7 +1097,7 @@ public void shouldCorrectlyDispatchBatchedTimeout() throws InterruptedException\n \t\t\tthrow new RuntimeException(latch.getCount()+\"\");\n \t\t}\n \t\telse {\n-\t\t\tassertEquals(\"Must have correct latch number : \" + latch.getCount(), latch.getCount(), 0);\n+\t\t\tassertThat(0).as(\"Must have correct latch number : \" + latch.getCount()).isEqualTo(latch.getCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTc5NDYzOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/SingleSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToyNTo0OFrOHqXb5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMToyNTo0OFrOHqXb5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE4NjIxNQ==", "bodyText": "could assert before + 20_000_000 isGreaterThan(after)", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514186215", "createdAt": "2020-10-29T11:25:48Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/SingleSchedulerTest.java", "diffHunk": "@@ -113,14 +114,14 @@ public void lotsOfTasks() throws Exception {\n     \t            w.schedule(r);\n     \t        }\n     \t        \n-    \t        Assert.assertTrue(cdl.await(5, TimeUnit.SECONDS));\n+    \t        assertThat(cdl.await(5, TimeUnit.SECONDS)).isTrue();\n \n     \t        System.gc();\n     \t        Thread.sleep(200);\n \n                 long after = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().getUsed();\n \n-    \t        Assert.assertTrue(String.format(\"%,d -> %,d\", before, after), before + 20_000_000 > after);\n+    \t        assertThat(before + 20_000_000 > after).as(format(\"%,d -> %,d\", before, after)).isTrue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f71a70821d7d4325a86bdeeb5b5ac0bb226b1ad1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTgzMTMzOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozNjo0MVrOHqXx7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozNjo0MVrOHqXx7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MTg1Mw==", "bodyText": "missing the values for the placeholders", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514191853", "createdAt": "2020-10-29T11:36:41Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "diffHunk": "@@ -217,7 +217,7 @@ public void onComplete() {\n \t\tlatch.await(8, TimeUnit.SECONDS);\n \n \t\tlong count = latch.getCount();\n-\t\tassertThat(latch.getCount() == 0).as(\"Count > 0 : \" + count + \"  , Running on \" + DEFAULT_POOL_SIZE + \" CPU\").isTrue();\n+\t\tassertThat(latch.getCount()).as(\"Count > 0 : %d, Running on %s CPU\").isEqualTo(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTgzMjYwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxBufferPredicateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozNzowNVrOHqXyqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozNzowNVrOHqXyqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MjA0Mg==", "bodyText": "missing the values for the placeholders", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514192042", "createdAt": "2020-10-29T11:37:05Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxBufferPredicateTest.java", "diffHunk": "@@ -1186,7 +1186,7 @@ public void discardRaceWithOnNext_bufferWhileWithNoMatch() {\n \t\t\tAssertions.assertThat(value2).as(\"trigger value not discarded\").hasValue(-2);\n \n \t\t\tAssertions.assertThat(received.get() + (value1.get() + 1))\n-\t\t\t\t\t.as(\"received \" + received.get() + \", val1 state \" + value1.get())\n+\t\t\t\t\t.as(\"received %d, val1 state %d\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTg0MTQ5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekFuseableTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTozOTo0NVrOHqX4Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMzoyMjoyNVrOHqbhXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MzQzOQ==", "bodyText": "wondering about the removal of s here. can we make sure the message displays the toString of  s anyway?", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514193439", "createdAt": "2020-10-29T11:39:45Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekFuseableTest.java", "diffHunk": "@@ -493,7 +493,7 @@ public void syncFusionAvailable() {\n \t\t    .subscribe(ts);\n \n \t\tSubscription s = ts.upstream();\n-\t\tassertThat(s).as(\"Non-fuseable upstream: \" + s).isInstanceOf(QueueSubscription.class);\n+\t\tassertThat(s).as(\"Non-fuseable upstream\").isInstanceOf(QueueSubscription.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDIzMzUwOQ==", "bodyText": "It does, but there is actually another problem: assertJ tries to be smart when printing s and tries to call iterator() on it. And so we get\nAlthough QueueSubscription extends Queue it is purely internal and only guarantees support for poll/clear/size/isEmpty. Instances shouldn't be used/exposed as Queue outside of Reactor operators.\n\nwhich is a design problem in the first place IMHO (Liskov substitution principle violation)", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514233509", "createdAt": "2020-10-29T12:51:47Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekFuseableTest.java", "diffHunk": "@@ -493,7 +493,7 @@ public void syncFusionAvailable() {\n \t\t    .subscribe(ts);\n \n \t\tSubscription s = ts.upstream();\n-\t\tassertThat(s).as(\"Non-fuseable upstream: \" + s).isInstanceOf(QueueSubscription.class);\n+\t\tassertThat(s).as(\"Non-fuseable upstream\").isInstanceOf(QueueSubscription.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MzQzOQ=="}, "originalCommit": {"oid": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDI1MzE0OA==", "bodyText": "withFailMessage should fix that I think", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514253148", "createdAt": "2020-10-29T13:22:25Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekFuseableTest.java", "diffHunk": "@@ -493,7 +493,7 @@ public void syncFusionAvailable() {\n \t\t    .subscribe(ts);\n \n \t\tSubscription s = ts.upstream();\n-\t\tassertThat(s).as(\"Non-fuseable upstream: \" + s).isInstanceOf(QueueSubscription.class);\n+\t\tassertThat(s).as(\"Non-fuseable upstream\").isInstanceOf(QueueSubscription.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5MzQzOQ=="}, "originalCommit": {"oid": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTg0NDI4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxSubscribeOnValueTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0MDozOFrOHqX50g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0MDozOFrOHqX50g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5Mzg3NA==", "bodyText": "missing the values for the placeholders", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514193874", "createdAt": "2020-10-29T11:40:38Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxSubscribeOnValueTest.java", "diffHunk": "@@ -54,7 +54,7 @@ public void testSubscribeOnValueFusion() {\n \t\tint minExec = 2;\n \n \t\tfor (Integer counted : execs.values()) {\n-\t\t\tassertThat(counted).as(\"Thread used less than \" + minExec + \" \" + \"times\").isGreaterThanOrEqualTo(minExec);\n+\t\t\tassertThat(counted).as(\"Thread used less than %d times\").isGreaterThanOrEqualTo(minExec);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTg0ODI2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0MTo1NFrOHqX8Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0MTo1NFrOHqX8Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5NDUxNQ==", "bodyText": "missing the values for the placeholders", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514194515", "createdAt": "2020-10-29T11:41:54Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -484,7 +484,7 @@ public void lifoEvictionNoThreadRegrowth() throws InterruptedException {\n \t\t\t\t\t.withFailMessage(\"worker thread count after shutdown is not zero. threads: %s\", Thread.getAllStackTraces().keySet())\n \t\t\t\t\t.isNotPositive();\n \t\t\tassertThat(dumpThreadNames())\n-\t\t\t\t\t.as(\"current evictor \" + newEvictor + \" shutdown\")\n+\t\t\t\t\t.as(\"current evictor %s shutdown\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTg2NzgzOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0NzozNVrOHqYH5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxMTo0NzozNVrOHqYH5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDE5NzQ3Nw==", "bodyText": "same as in previous file with the removal of s from message", "url": "https://github.com/reactor/reactor-core/pull/2453#discussion_r514197477", "createdAt": "2020-10-29T11:47:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPeekTest.java", "diffHunk": "@@ -716,7 +716,7 @@ public void syncFusionAvailable() {\n \t\t    .subscribe(ts);\n \n \t\tSubscription s = ts.upstream();\n-\t\tassertThat(s instanceof QueueSubscription).as(\"Non-fuseable upstream: \" + s).isTrue();\n+\t\tassertThat(s).as(\"Non-fuseable upstream\").isInstanceOf(QueueSubscription.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ea99fbf77085a1fd9bfd4044a807781bd1fc308"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 814, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}