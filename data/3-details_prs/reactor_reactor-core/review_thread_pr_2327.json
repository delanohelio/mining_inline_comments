{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTA5OTY5", "number": 2327, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo1MjozNVrOEYMJNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxNDoyNlrOEYdwvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODAwMjQ1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo1MjozNVrOHAZLNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDozMTozN1rOHAv1SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDUxNg==", "bodyText": "IMO this and many other usages should use the regular emitNext that would fail on overflow. Otherwise we're introducing the same problem as in M2", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470174516", "createdAt": "2020-08-13T18:52:35Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java", "diffHunk": "@@ -47,17 +47,17 @@ public Context currentContext() {\n \n \t@Override\n \tpublic void onComplete() {\n-\t\tsink.emitComplete();\n+\t\tsink.tryEmitComplete();\n \t}\n \n \t@Override\n \tpublic void onError(Throwable t) {\n-\t\tsink.emitError(t);\n+\t\tsink.tryEmitError(t);\n \t}\n \n \t@Override\n \tpublic void onNext(IN in) {\n-\t\tsink.emitNext(in);\n+\t\tsink.tryEmitNext(in);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da6855525b2760928ea56c9b51eec2f09908b035"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3Mjg5OA==", "bodyText": "good catch, indeed and same for DelegateSinkOneMonoProcessor", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470472898", "createdAt": "2020-08-14T08:04:07Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java", "diffHunk": "@@ -47,17 +47,17 @@ public Context currentContext() {\n \n \t@Override\n \tpublic void onComplete() {\n-\t\tsink.emitComplete();\n+\t\tsink.tryEmitComplete();\n \t}\n \n \t@Override\n \tpublic void onError(Throwable t) {\n-\t\tsink.emitError(t);\n+\t\tsink.tryEmitError(t);\n \t}\n \n \t@Override\n \tpublic void onNext(IN in) {\n-\t\tsink.emitNext(in);\n+\t\tsink.tryEmitNext(in);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDUxNg=="}, "originalCommit": {"oid": "da6855525b2760928ea56c9b51eec2f09908b035"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ3NDg2NQ==", "bodyText": "this will actually greatly simplify the PR since most uses in tests will be back to calling emitXxx", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470474865", "createdAt": "2020-08-14T08:08:20Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java", "diffHunk": "@@ -47,17 +47,17 @@ public Context currentContext() {\n \n \t@Override\n \tpublic void onComplete() {\n-\t\tsink.emitComplete();\n+\t\tsink.tryEmitComplete();\n \t}\n \n \t@Override\n \tpublic void onError(Throwable t) {\n-\t\tsink.emitError(t);\n+\t\tsink.tryEmitError(t);\n \t}\n \n \t@Override\n \tpublic void onNext(IN in) {\n-\t\tsink.emitNext(in);\n+\t\tsink.tryEmitNext(in);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDUxNg=="}, "originalCommit": {"oid": "da6855525b2760928ea56c9b51eec2f09908b035"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NTczNw==", "bodyText": "I've rebased so that a single commit has the introduction of tryEmit BUT correct use of emit in test classes", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470545737", "createdAt": "2020-08-14T10:31:37Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java", "diffHunk": "@@ -47,17 +47,17 @@ public Context currentContext() {\n \n \t@Override\n \tpublic void onComplete() {\n-\t\tsink.emitComplete();\n+\t\tsink.tryEmitComplete();\n \t}\n \n \t@Override\n \tpublic void onError(Throwable t) {\n-\t\tsink.emitError(t);\n+\t\tsink.tryEmitError(t);\n \t}\n \n \t@Override\n \tpublic void onNext(IN in) {\n-\t\tsink.emitNext(in);\n+\t\tsink.tryEmitNext(in);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDUxNg=="}, "originalCommit": {"oid": "da6855525b2760928ea56c9b51eec2f09908b035"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDA3MDU1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwODozOTo0MlrOHAseiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMDozMTo0NVrOHAv1gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5MDc2MQ==", "bodyText": "nit: could use a switch for readability and performance", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470490761", "createdAt": "2020-08-14T08:39:42Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -166,13 +189,33 @@ public Emission emitError(Throwable t) {\n \t}\n \n \t@Override\n-\tpublic Emission emitNext(T t) {\n+\tpublic void emitNext(T value) {\n+\t\tEmission result = tryEmitNext(value);\n+\t\tif (result == Emission.FAIL_OVERFLOW) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da6855525b2760928ea56c9b51eec2f09908b035"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NTc5NA==", "bodyText": "done", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470545794", "createdAt": "2020-08-14T10:31:45Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -166,13 +189,33 @@ public Emission emitError(Throwable t) {\n \t}\n \n \t@Override\n-\tpublic Emission emitNext(T t) {\n+\tpublic void emitNext(T value) {\n+\t\tEmission result = tryEmitNext(value);\n+\t\tif (result == Emission.FAIL_OVERFLOW) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQ5MDc2MQ=="}, "originalCommit": {"oid": "da6855525b2760928ea56c9b51eec2f09908b035"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDE2NjQxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTowODoyMlrOHAtYLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzowMjo1OFrOHAzvlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw==", "bodyText": "while migrating some of r-kafka code, I had the following in mind:\nwhat if r-core adds more \"negative\" Emission cases but I only handle one.\nHence the idea:\nAdd Emission#isSuccessful, so that it can be checked in places like this one.\nWDYT?", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470505517", "createdAt": "2020-08-14T09:08:22Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -147,14 +158,26 @@ public Emission emitComplete() {\n \t}\n \n \t@Override\n-\tpublic Emission emitError(Throwable t) {\n+\tpublic void onError(Throwable throwable) {\n+\t\temitError(throwable);\n+\t}\n+\n+\t@Override\n+\tpublic void emitError(Throwable error) {\n+\t\tEmission result = tryEmitError(error);\n+\t\tif (result == Emission.FAIL_TERMINATED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTU0OQ==", "bodyText": "there's hasEmitted() and hasFailed(). Maybe I should rename hasEmitted() to hasSucceeded()? not sure what you mean by \"checked in places like this one\" though... are you suggesting this piece of code should check something more?", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470511549", "createdAt": "2020-08-14T09:20:37Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -147,14 +158,26 @@ public Emission emitComplete() {\n \t}\n \n \t@Override\n-\tpublic Emission emitError(Throwable t) {\n+\tpublic void onError(Throwable throwable) {\n+\t\temitError(throwable);\n+\t}\n+\n+\t@Override\n+\tpublic void emitError(Throwable error) {\n+\t\tEmission result = tryEmitError(error);\n+\t\tif (result == Emission.FAIL_TERMINATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, "originalCommit": {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxNTMxMg==", "bodyText": "Ah, cool, so we can use hasEmitted() here (although renaming it to hasSucceeded() would be nice).\nBTW isn't hasFailed() == !hasEmitted()? Why both?\nre \"can be checked in places like this one\":\nsorry, I meant this method is a good example where such boolean could be handy, and there are more methods like this one (in this PR but also in r-kafka, for example), hence \"the flag that can be checked in places like this one\"", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470515312", "createdAt": "2020-08-14T09:28:11Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -147,14 +158,26 @@ public Emission emitComplete() {\n \t}\n \n \t@Override\n-\tpublic Emission emitError(Throwable t) {\n+\tpublic void onError(Throwable throwable) {\n+\t\temitError(throwable);\n+\t}\n+\n+\t@Override\n+\tpublic void emitError(Throwable error) {\n+\t\tEmission result = tryEmitError(error);\n+\t\tif (result == Emission.FAIL_TERMINATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, "originalCommit": {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzNzgwMQ==", "bodyText": "yeah, I think it was just added because it reads better. And most likely, hasFailed() is going to be the more interesting one to check...\nI've opened a separate issue to track these", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470537801", "createdAt": "2020-08-14T10:13:50Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -147,14 +158,26 @@ public Emission emitComplete() {\n \t}\n \n \t@Override\n-\tpublic Emission emitError(Throwable t) {\n+\tpublic void onError(Throwable throwable) {\n+\t\temitError(throwable);\n+\t}\n+\n+\t@Override\n+\tpublic void emitError(Throwable error) {\n+\t\tEmission result = tryEmitError(error);\n+\t\tif (result == Emission.FAIL_TERMINATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, "originalCommit": {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU0NjA5Mw==", "bodyText": "added a commit for #2329 in the latest rebase (with the orThrow split out of the original tryEmit commit)", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470546093", "createdAt": "2020-08-14T10:32:30Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -147,14 +158,26 @@ public Emission emitComplete() {\n \t}\n \n \t@Override\n-\tpublic Emission emitError(Throwable t) {\n+\tpublic void onError(Throwable throwable) {\n+\t\temitError(throwable);\n+\t}\n+\n+\t@Override\n+\tpublic void emitError(Throwable error) {\n+\t\tEmission result = tryEmitError(error);\n+\t\tif (result == Emission.FAIL_TERMINATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, "originalCommit": {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU2ODIyMg==", "bodyText": "Either I don't see it or don't get it :D\nAnyways, shouldn't it be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (result == Emission.FAIL_TERMINATED) {\n          \n          \n            \n            \t\tif (result.hasFailed()) {\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470568222", "createdAt": "2020-08-14T11:28:04Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -147,14 +158,26 @@ public Emission emitComplete() {\n \t}\n \n \t@Override\n-\tpublic Emission emitError(Throwable t) {\n+\tpublic void onError(Throwable throwable) {\n+\t\temitError(throwable);\n+\t}\n+\n+\t@Override\n+\tpublic void emitError(Throwable error) {\n+\t\tEmission result = tryEmitError(error);\n+\t\tif (result == Emission.FAIL_TERMINATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, "originalCommit": {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwNTMzMQ==", "bodyText": "no. for an emitError, cancelled or overflown states don't warrant specific action, whereas an attempt at terminating twice is illegal and usually notified to the onErrorDropped", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470605331", "createdAt": "2020-08-14T12:53:58Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -147,14 +158,26 @@ public Emission emitComplete() {\n \t}\n \n \t@Override\n-\tpublic Emission emitError(Throwable t) {\n+\tpublic void onError(Throwable throwable) {\n+\t\temitError(throwable);\n+\t}\n+\n+\t@Override\n+\tpublic void emitError(Throwable error) {\n+\t\tEmission result = tryEmitError(error);\n+\t\tif (result == Emission.FAIL_TERMINATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, "originalCommit": {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYwOTgxNQ==", "bodyText": "ok \ud83d\udc4d", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470609815", "createdAt": "2020-08-14T13:02:58Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java", "diffHunk": "@@ -147,14 +158,26 @@ public Emission emitComplete() {\n \t}\n \n \t@Override\n-\tpublic Emission emitError(Throwable t) {\n+\tpublic void onError(Throwable throwable) {\n+\t\temitError(throwable);\n+\t}\n+\n+\t@Override\n+\tpublic void emitError(Throwable error) {\n+\t\tEmission result = tryEmitError(error);\n+\t\tif (result == Emission.FAIL_TERMINATED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNTUxNw=="}, "originalCommit": {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDE3NDUyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/NextProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToxMDo1MFrOHAtc-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToxMDo1MFrOHAtc-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUwNjc0Ng==", "bodyText": "idea:\n@SuppressWarnings(\"unused\")\nEmission emission = tryEmitEmpty();", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470506746", "createdAt": "2020-08-14T09:10:50Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/NextProcessor.java", "diffHunk": "@@ -114,17 +114,41 @@ public O block(@Nullable Duration timeout) {\n \t}\n \n \t@Override\n-\tpublic Emission emitEmpty() {\n-\t\treturn emitValue(null);\n+\tpublic final void onComplete() {\n+\t\t//no particular error condition handling for onComplete", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80d0e985e01f009f73d9e7dafa1e3e93840a7dff"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDg4MjI2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxMjoyNlrOHA0DMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxNToyMFrOHA0JTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNDgzMg==", "bodyText": "this one is indeed inconsistent with other usages. tryEmitNext should probably not emit any error here", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470614832", "createdAt": "2020-08-14T13:12:26Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java", "diffHunk": "@@ -280,8 +328,7 @@ public Emission emitNext(T t) {\n \t\t\t\t\tex.initCause(e);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tOperators.onDiscard(t, ctx);\n-\t\t\tonError(ex);\n+\t\t\tonError(ex); //FIXME should this really error ??", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6add6403b36a28e56d71b328d8aaf86ba984e7ef"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNjM5OQ==", "bodyText": "I opened a separate issue, SerializedManySink is also guilty of a similar thing => #2330", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470616399", "createdAt": "2020-08-14T13:15:20Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastProcessor.java", "diffHunk": "@@ -280,8 +328,7 @@ public Emission emitNext(T t) {\n \t\t\t\t\tex.initCause(e);\n \t\t\t\t}\n \t\t\t}\n-\t\t\tOperators.onDiscard(t, ctx);\n-\t\t\tonError(ex);\n+\t\t\tonError(ex); //FIXME should this really error ??", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNDgzMg=="}, "originalCommit": {"oid": "6add6403b36a28e56d71b328d8aaf86ba984e7ef"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDg4NDE5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxMzowNFrOHA0EbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTozNTo0NVrOHA5Twg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTE0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\twhile (s.tryEmitNext(i).hasFailed() ) {\n          \n          \n            \n            \t\t\twhile (s.tryEmitNext(i).hasFailed()) {", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615149", "createdAt": "2020-08-14T13:13:04Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "diffHunk": "@@ -1186,8 +1184,15 @@ public void mapNotifiesOnce() throws InterruptedException {\n \t\t\t                            }\n \t\t                            }));\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 0; i < COUNT; i++) {\n-\t\t\twhile (s.emitNext(i).hasFailed() );\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile (s.tryEmitNext(i).hasFailed() ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6add6403b36a28e56d71b328d8aaf86ba984e7ef"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwMDk5NA==", "bodyText": "the extra space appears in several other places, I'll fix it", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470700994", "createdAt": "2020-08-14T15:35:45Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "diffHunk": "@@ -1186,8 +1184,15 @@ public void mapNotifiesOnce() throws InterruptedException {\n \t\t\t                            }\n \t\t                            }));\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 0; i < COUNT; i++) {\n-\t\t\twhile (s.emitNext(i).hasFailed() );\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile (s.tryEmitNext(i).hasFailed() ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTE0OQ=="}, "originalCommit": {"oid": "6add6403b36a28e56d71b328d8aaf86ba984e7ef"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDg4NjcyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxMzo0N1rOHA0GAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNTozNToyM1rOHA5TAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTU1NQ==", "bodyText": "nit: this whole thing can be replaced with Awaitility, I think", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615555", "createdAt": "2020-08-14T13:13:47Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "diffHunk": "@@ -1186,8 +1184,15 @@ public void mapNotifiesOnce() throws InterruptedException {\n \t\t\t                            }\n \t\t                            }));\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 0; i < COUNT; i++) {\n-\t\t\twhile (s.emitNext(i).hasFailed() );\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile (s.tryEmitNext(i).hasFailed() ) {\n+\t\t\t\tbusyLoops++;\n+\t\t\t\tif (busyLoops % 5000 == 0 && System.currentTimeMillis() - start >= 10_0000) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6add6403b36a28e56d71b328d8aaf86ba984e7ef"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDcwMDgwMQ==", "bodyText": "I tried, but it makes the test longer and the tuning of poll interval is complicated, I won't have time to fine tune it.", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470700801", "createdAt": "2020-08-14T15:35:23Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "diffHunk": "@@ -1186,8 +1184,15 @@ public void mapNotifiesOnce() throws InterruptedException {\n \t\t\t                            }\n \t\t                            }));\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 0; i < COUNT; i++) {\n-\t\t\twhile (s.emitNext(i).hasFailed() );\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile (s.tryEmitNext(i).hasFailed() ) {\n+\t\t\t\tbusyLoops++;\n+\t\t\t\tif (busyLoops % 5000 == 0 && System.currentTimeMillis() - start >= 10_0000) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTU1NQ=="}, "originalCommit": {"oid": "6add6403b36a28e56d71b328d8aaf86ba984e7ef"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDg4NzM3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxMzo1NlrOHA0GYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxMzo1NlrOHA0GYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTY0OA==", "bodyText": "ditto", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615648", "createdAt": "2020-08-14T13:13:56Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxPublishOnTest.java", "diffHunk": "@@ -1226,8 +1231,15 @@ public void mapManyFlushesAllValuesThoroughly() throws InterruptedException {\n \t\t\tlatch.countDown();\n \t\t});\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tfor (int i = 1; i <= items; i++) {\n-\t\t\twhile (s.emitNext(String.valueOf(i)).hasFailed() );\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile (s.tryEmitNext(String.valueOf(i)).hasFailed() ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6add6403b36a28e56d71b328d8aaf86ba984e7ef"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDg4ODIyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxSpecTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxNDoxMFrOHA0G3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxNDoxMFrOHA0G3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTc3NA==", "bodyText": "ditto", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615774", "createdAt": "2020-08-14T13:14:10Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxSpecTests.java", "diffHunk": "@@ -1103,8 +1103,15 @@ public void collectFromMultipleThread1() throws Exception {\n \t\t\t\t\tlatch.countDown();\n \t\t\t\t});\n \n+\t\tfinal long start = System.currentTimeMillis();\n \t\tFlux.range(1, 1000).subscribe(data -> {\n-\t\t\twhile(head.emitNext(data).hasFailed());\n+\t\t\tlong busyLoops = 0;\n+\t\t\twhile(head.tryEmitNext(data).hasFailed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6add6403b36a28e56d71b328d8aaf86ba984e7ef"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDg4ODk1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxNDoyNlrOHA0HWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMzoxNDoyNlrOHA0HWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDYxNTg5OA==", "bodyText": "ditto", "url": "https://github.com/reactor/reactor-core/pull/2327#discussion_r470615898", "createdAt": "2020-08-14T13:14:26Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/scenarios/FluxTests.java", "diffHunk": "@@ -589,7 +589,13 @@ private void parallelBufferedTimeoutTest(int iterations) throws InterruptedExcep\n \t\tlong start = System.currentTimeMillis();\n \n \t\tfor (String i : data) {\n-\t\t\twhile (deferred.emitNext(i).hasFailed() );\n+\t\t\tlong busyLoops = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6add6403b36a28e56d71b328d8aaf86ba984e7ef"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 927, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}