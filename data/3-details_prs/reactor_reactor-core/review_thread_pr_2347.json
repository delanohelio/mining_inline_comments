{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MzQyMzMw", "number": 2347, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxMjo1NFrOEeX4pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo1OToyMlrOEe3ulA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg0MDY5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Contextable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxMjo1NFrOHJ_Rgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxMjo1NFrOHJ_Rgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzNTkwNg==", "bodyText": "rename to Contextualizable or Contextualized ?", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r480235906", "createdAt": "2020-08-31T16:12:54Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Contextable.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package reactor.core.publisher;\n+\n+import reactor.util.context.Context;\n+\n+interface Contextable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3522031f2a4b9329360756628c56a47ee44f03fa"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjg2NDU5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxOToxNFrOHJ_fwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNjoxOToxNFrOHJ_fwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIzOTU1Mw==", "bodyText": "I don't think we need a different emission for tryEmit[Error|Complete], but for tryEmitNext we might, so we can distinguish early attempts at emitting through a Sink that doesn't \"warm up\" from FAIL_OVERFLOW (and emitNext would also discard in these cases)... follow up issue I think.", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r480239553", "createdAt": "2020-08-31T16:19:14Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package reactor.core.publisher;\n+\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLongFieldUpdater;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import org.reactivestreams.Subscription;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Exceptions;\n+import reactor.core.publisher.Sinks.Emission;\n+import reactor.util.context.Context;\n+\n+final class UnicastManySinkNoBackpressure<T> extends Flux<T> implements Sinks.Many<T>, Subscription, Contextable {\n+\n+\tpublic static <E> UnicastManySinkNoBackpressure<E> create() {\n+\t\treturn new UnicastManySinkNoBackpressure<>();\n+\t}\n+\n+\tenum State {\n+\t\tINITIAL,\n+\t\tSUBSCRIBED,\n+\t\tTERMINATED,\n+\t\tCANCELLED,\n+\t}\n+\n+\tvolatile State state;\n+\n+\t@SuppressWarnings(\"rawtypes\")\n+\tprivate static final AtomicReferenceFieldUpdater<UnicastManySinkNoBackpressure, State> STATE = AtomicReferenceFieldUpdater.newUpdater(\n+\t\t\tUnicastManySinkNoBackpressure.class,\n+\t\t\tState.class,\n+\t\t\t\"state\"\n+\t);\n+\n+\tprivate volatile CoreSubscriber<? super T> actual = null;\n+\n+\tvolatile long requested;\n+\t@SuppressWarnings(\"rawtypes\")\n+\tstatic final AtomicLongFieldUpdater<UnicastManySinkNoBackpressure> REQUESTED =\n+\t\t\tAtomicLongFieldUpdater.newUpdater(UnicastManySinkNoBackpressure.class, \"requested\");\n+\n+\tUnicastManySinkNoBackpressure() {\n+\t\tSTATE.lazySet(this, State.INITIAL);\n+\t}\n+\n+\t@Override\n+\tpublic Flux<T> asFlux() {\n+\t\treturn this;\n+\t}\n+\n+\t@Override\n+\tpublic void subscribe(CoreSubscriber<? super T> actual) {\n+\t\tObjects.requireNonNull(actual, \"subscribe\");\n+\n+\t\tif (!STATE.compareAndSet(this, State.INITIAL, State.SUBSCRIBED)) {\n+\t\t\tOperators.reportThrowInSubscribe(actual, new IllegalStateException(\"Unicast Sinks.Many allows only a single Subscriber\"));\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tthis.actual = actual;\n+\t\tactual.onSubscribe(this);\n+\t}\n+\n+\t@Override\n+\tpublic void request(long n) {\n+\t\tif (Operators.validate(n)) {\n+\t\t\tOperators.addCap(REQUESTED, this, n);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void cancel() {\n+\t\tswitch (STATE.getAndSet(this, State.CANCELLED)) {\n+\t\t\tcase SUBSCRIBED:\n+\t\t\t\tactual = null;\n+\t\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Context currentContext() {\n+\t\tCoreSubscriber<? super T> actual = this.actual;\n+\t\treturn actual != null ? actual.currentContext() : Context.empty();\n+\t}\n+\n+\t@Override\n+\tpublic void emitNext(T value) {\n+\t\tswitch (tryEmitNext(value)) {\n+\t\t\tcase FAIL_OVERFLOW:\n+\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\t//the emitError will onErrorDropped if already terminated\n+\t\t\t\temitError(Exceptions.failWithOverflow(\"Backpressure overflow during Sinks.Many#emitNext\"));\n+\t\t\t\tbreak;\n+\t\t\tcase FAIL_CANCELLED:\n+\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\tbreak;\n+\t\t\tcase FAIL_TERMINATED:\n+\t\t\t\tOperators.onNextDropped(value, currentContext());\n+\t\t\t\tbreak;\n+\t\t\tcase OK:\n+\t\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Emission tryEmitNext(T t) {\n+\t\tObjects.requireNonNull(t, \"t\");\n+\n+\t\tswitch (state) {\n+\t\t\tcase INITIAL:\n+\t\t\t\t// TODO different Emission?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3522031f2a4b9329360756628c56a47ee44f03fa"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzI1NDgwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwODoyMTozMVrOHKrcEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTowMzo1OVrOHKtBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1OTUwNA==", "bodyText": "if the interface is only added to FluxProcessor and the new sink, maybe make its name more sink-oriented? like SinkSerializable for instance?", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r480959504", "createdAt": "2020-09-01T08:21:31Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java", "diffHunk": "@@ -43,7 +43,7 @@\n  * @param <OUT> the output value type\n  */\n public abstract class FluxProcessor<IN, OUT> extends Flux<OUT>\n-\t\timplements Processor<IN, OUT>, CoreSubscriber<IN>, Scannable, Disposable {\n+\t\timplements Processor<IN, OUT>, CoreSubscriber<IN>, Scannable, Disposable, Contextable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3522031f2a4b9329360756628c56a47ee44f03fa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk4NTQ1NA==", "bodyText": "I see no reason to make it sink-oriented, especially given that it can be useful in other places.\nSinkSerializable sounds like \"a Sink that supports Java Serialization\" to me :D", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r480985454", "createdAt": "2020-09-01T09:03:59Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxProcessor.java", "diffHunk": "@@ -43,7 +43,7 @@\n  * @param <OUT> the output value type\n  */\n public abstract class FluxProcessor<IN, OUT> extends Flux<OUT>\n-\t\timplements Processor<IN, OUT>, CoreSubscriber<IN>, Scannable, Disposable {\n+\t\timplements Processor<IN, OUT>, CoreSubscriber<IN>, Scannable, Disposable, Contextable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDk1OTUwNA=="}, "originalCommit": {"oid": "3522031f2a4b9329360756628c56a47ee44f03fa"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODA0MjcyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo1NToyMVrOHKy3Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjoyMjowOFrOHKzvrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MTE0Mg==", "bodyText": "markdown doesn't work \ud83d\ude1b either make it a link to Subscriber#onError(Throwable) or {@code onError}", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481081142", "createdAt": "2020-09-01T11:55:21Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -260,6 +260,18 @@ public Emission getReason() {\n \t\t * @param endCallback when a terminal signal is observed: error, complete or cancel\n \t\t */\n \t\t<T> Sinks.Many<T> onBackpressureBuffer(Queue<T> queue, Disposable endCallback);\n+\n+\t\t/**\n+\t\t * A {@link Sinks.Many} with the following characteristics:\n+\t\t * <ul>\n+\t\t *     <li><strong>Unicast</strong>: contrary to most other {@link Sinks.Many}, the\n+\t\t *     {@link Flux} view rejects {@link Subscriber subscribers} past the first one.</li>\n+\t\t *     <li>Backpressure : this sink is able to honor downstream demand and will emit `onError` if there is a mismatch.</li>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af44912c5ade7a6a18864c378e390971df7eaa2c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MTc1Mw==", "bodyText": "I'd also rephrase a bit to mimic the phrasing of the other methods (\"this sink honors downstream demand of its single Subscriber, and will emit onError if there is a mismatch\")", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481081753", "createdAt": "2020-09-01T11:56:28Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -260,6 +260,18 @@ public Emission getReason() {\n \t\t * @param endCallback when a terminal signal is observed: error, complete or cancel\n \t\t */\n \t\t<T> Sinks.Many<T> onBackpressureBuffer(Queue<T> queue, Disposable endCallback);\n+\n+\t\t/**\n+\t\t * A {@link Sinks.Many} with the following characteristics:\n+\t\t * <ul>\n+\t\t *     <li><strong>Unicast</strong>: contrary to most other {@link Sinks.Many}, the\n+\t\t *     {@link Flux} view rejects {@link Subscriber subscribers} past the first one.</li>\n+\t\t *     <li>Backpressure : this sink is able to honor downstream demand and will emit `onError` if there is a mismatch.</li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MTE0Mg=="}, "originalCommit": {"oid": "af44912c5ade7a6a18864c378e390971df7eaa2c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA5NTU5Ng==", "bodyText": "re \"markdown\" - this was copied from another method. Will fix both.", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481095596", "createdAt": "2020-09-01T12:22:08Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -260,6 +260,18 @@ public Emission getReason() {\n \t\t * @param endCallback when a terminal signal is observed: error, complete or cancel\n \t\t */\n \t\t<T> Sinks.Many<T> onBackpressureBuffer(Queue<T> queue, Disposable endCallback);\n+\n+\t\t/**\n+\t\t * A {@link Sinks.Many} with the following characteristics:\n+\t\t * <ul>\n+\t\t *     <li><strong>Unicast</strong>: contrary to most other {@link Sinks.Many}, the\n+\t\t *     {@link Flux} view rejects {@link Subscriber subscribers} past the first one.</li>\n+\t\t *     <li>Backpressure : this sink is able to honor downstream demand and will emit `onError` if there is a mismatch.</li>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MTE0Mg=="}, "originalCommit": {"oid": "af44912c5ade7a6a18864c378e390971df7eaa2c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODA1NzgwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo1OToyMlrOHKzABg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjoyNzozN1rOHKz7sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MzM5OA==", "bodyText": "would it be beneficial to mark it as @FunctionalInterface ?", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481083398", "createdAt": "2020-09-01T11:59:22Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package reactor.core.publisher;\n+\n+import reactor.util.context.Context;\n+\n+interface ContextHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af44912c5ade7a6a18864c378e390971df7eaa2c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA5NTgzNw==", "bodyText": "Why? The lambda usage isn't the primary goal. And even if lambda form is used (e.g. in tests), it will work just fine. From @FunctionalInterface's Javadoc:\n\nHowever, the compiler will treat any interface meeting the\ndefinition of a functional interface as a functional interface\nregardless of whether or not a {@code FunctionalInterface}\nannotation is present on the interface declaration.", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481095837", "createdAt": "2020-09-01T12:22:36Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package reactor.core.publisher;\n+\n+import reactor.util.context.Context;\n+\n+interface ContextHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MzM5OA=="}, "originalCommit": {"oid": "af44912c5ade7a6a18864c378e390971df7eaa2c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA5ODY3Mw==", "bodyText": "yeah ok, since the implementing classes are less than likely to be functional interfaces themselves, it doesn't really bring any value.", "url": "https://github.com/reactor/reactor-core/pull/2347#discussion_r481098673", "createdAt": "2020-09-01T12:27:37Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/ContextHolder.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright (c) 2011-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package reactor.core.publisher;\n+\n+import reactor.util.context.Context;\n+\n+interface ContextHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MzM5OA=="}, "originalCommit": {"oid": "af44912c5ade7a6a18864c378e390971df7eaa2c"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 944, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}