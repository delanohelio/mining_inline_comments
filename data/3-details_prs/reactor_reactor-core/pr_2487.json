{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjQxNjQ3", "number": 2487, "title": "fix #1518 Add cold variants of TestPublisher", "bodyText": "", "createdAt": "2020-11-13T15:16:51Z", "url": "https://github.com/reactor/reactor-core/pull/2487", "merged": true, "mergeCommit": {"oid": "3f77caa79e4a4c113fce7ecbcf289b5e4f89d888"}, "closed": true, "closedAt": "2020-11-23T11:57:38Z", "author": {"login": "ericbottard"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddV8gWABqjQwMDQzODU1NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdfTx_MgFqTUzNjQwMTY4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f883fdc546cf637a817d65451c131d328df48f6", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/5f883fdc546cf637a817d65451c131d328df48f6", "committedDate": "2020-11-16T15:55:11Z", "message": "Add support for Violations, polish API."}, "afterCommit": {"oid": "757413be4ef97a5fc21f6db43eb600f5fb85fe81", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/757413be4ef97a5fc21f6db43eb600f5fb85fe81", "committedDate": "2020-11-17T09:14:57Z", "message": "Add support for Violations, polish API."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "757413be4ef97a5fc21f6db43eb600f5fb85fe81", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/757413be4ef97a5fc21f6db43eb600f5fb85fe81", "committedDate": "2020-11-17T09:14:57Z", "message": "Add support for Violations, polish API."}, "afterCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/c3b7017b8cc7f08a894c9b8a36963c964eaffa99", "committedDate": "2020-11-17T09:18:21Z", "message": "Add support for Violations, polish API."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTY1NDU4", "url": "https://github.com/reactor/reactor-core/pull/2487#pullrequestreview-532165458", "createdAt": "2020-11-17T09:21:53Z", "commit": {"oid": "757413be4ef97a5fc21f6db43eb600f5fb85fe81"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyMjoyMVrOH0rkFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozMjoyNFrOH0r_Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMTc0OQ==", "bodyText": "shouldn't it check for emitTerminalSignalIfAny() here too?", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525001749", "createdAt": "2020-11-17T09:22:21Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -226,6 +221,76 @@ void onComplete() {\n \t\t\tparent.remove(this);\n \t\t\tactual.onComplete();\n \t\t}\n+\n+\t\tprivate void drain(long n) {\n+\t\t\tint i = index;\n+\t\t\tint emitted = 0;\n+\t\t\tfor ( ; ; ) {\n+\t\t\t\tif (cancelled) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t\twhile (i != parent.values.size()) {\n+\t\t\t\t\tif (emitted == n && !parent.violations.contains(REQUEST_OVERFLOW)) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tT t = parent.values.get(i);\n+\t\t\t\t\tif (t == null && !parent.violations.contains(ALLOW_NULL)) {\n+\t\t\t\t\t\tactual.onError(new NullPointerException(\"The \" + i + \"th element was null\"));\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (this.onNext(t)) {\n+\t\t\t\t\t\temitted++;\n+\t\t\t\t\t}\n+\t\t\t\t\ti++;\n+\t\t\t\t\tif (cancelled) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tn = requested;\n+\t\t\t\tif (emitted > n) {\n+\t\t\t\t\tassert parent.violations.contains(Violation.REQUEST_OVERFLOW);\n+\t\t\t\t\tparent.hasOverflown = true;\n+\t\t\t\t\treturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMzUwNg==", "bodyText": "wouldn't it be possible for the drain to have no parameter, computing the n from its latest requested state?", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525003506", "createdAt": "2020-11-17T09:24:59Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -338,23 +403,29 @@ public boolean wasRequested() {\n \n \t@Override\n \tpublic ColdTestPublisher<T> assertRequestOverflow() {\n-\t\t//the cold publisher cannot really overflow requests, as it immediately throws\n-\t\tthrow new AssertionError(\"Expected some request overflow\");\n+\t\tif (!hasOverflown) {\n+\t\t\tthrow new AssertionError(\"Expected some request overflow\");\n+\t\t}\n+\t\treturn this;\n \t}\n \n \t@Override\n \tpublic ColdTestPublisher<T> assertNoRequestOverflow() {\n-\t\t//the cold publisher cannot really overflow requests, as it immediately throws\n+\t\tif (hasOverflown) {\n+\t\t\tthrow new AssertionError(\"Unexpected request overflow\");\n+\t\t}\n \t\treturn this;\n \t}\n \n \t@Override\n \tpublic ColdTestPublisher<T> next(@Nullable T t) {\n-\t\tObjects.requireNonNull(t, \"emitted values must be non-null\");\n+\t\tif (!violations.contains(ALLOW_NULL)) {\n+\t\t\tObjects.requireNonNull(t, \"emitted values must be non-null\");\n+\t\t}\n \n \t\tvalues.add(t);\n \t\tfor (ColdTestPublisherSubscription<T> s : subscribers) {\n-\t\t\ts.onNext(t);\n+\t\t\ts.drain(s.requested);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNTY0NQ==", "bodyText": "drain has to be guarded by a WIP in order to avoid parallel drains (since there is no restriction on which thread calls next from the TestPublisher API vs request from the Subscription API)", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525005645", "createdAt": "2020-11-17T09:28:01Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -226,6 +221,76 @@ void onComplete() {\n \t\t\tparent.remove(this);\n \t\t\tactual.onComplete();\n \t\t}\n+\n+\t\tprivate void drain(long n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjU1MA==", "bodyText": "it only caches if boolean errorOnOverflow is false", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525006550", "createdAt": "2020-11-17T09:29:21Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.\n \t *\n \t * @param <T> the type of the publisher\n \t * @return the new {@link TestPublisher}\n \t */\n \tpublic static <T> TestPublisher<T> createCold() {\n-\t\treturn new ColdTestPublisher<>();\n+\t\treturn new ColdTestPublisher<>(false, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.\n+\t * <p>\n+\t * The returned publisher will emit an overflow error if there is not enough request from subscribers.\n+\t *\n+\t * @param <T> the type of the publisher\n+\t * @return the new {@link TestPublisher}\n+\t */\n+\tpublic static <T> TestPublisher<T> createColdNonBuffering() {\n+\t\treturn new ColdTestPublisher<>(true, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwODczNQ==", "bodyText": "If that test is made that way because the StepVerifier complains that it's under-requesting when adding an expectNext(\"bar\"), that under-requesting check can be disabled using StepVerifierOptions (namely, StepVerifierOptions#checkUnderRequesting(false)).", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525008735", "createdAt": "2020-11-17T09:32:24Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/test/java/reactor/test/publisher/ColdTestPublisherTests.java", "diffHunk": "@@ -111,6 +124,21 @@ public void coldDisallowsOverflow() {\n \t\tpublisher.assertNoRequestOverflow();\n \t}\n \n+\t@Test\n+\tpublic void misbehavingAllowsOverflow() {\n+\t\tTestPublisher<String> publisher = TestPublisher.createColdNonCompliant(false, TestPublisher.Violation.REQUEST_OVERFLOW);\n+\n+\t\tassertThatExceptionOfType(AssertionError.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMjY2MDI2", "url": "https://github.com/reactor/reactor-core/pull/2487#pullrequestreview-532266026", "createdAt": "2020-11-17T11:25:00Z", "commit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyNTowMVrOH0wZNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0MDo1M1rOH0w79Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MDg4Nw==", "bodyText": "ok then I'd rephrase the second paragraph in createCold and createColdNonBuffering above, then. Will comment there.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525080887", "createdAt": "2020-11-17T11:25:01Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.\n \t *\n \t * @param <T> the type of the publisher\n \t * @return the new {@link TestPublisher}\n \t */\n \tpublic static <T> TestPublisher<T> createCold() {\n-\t\treturn new ColdTestPublisher<>();\n+\t\treturn new ColdTestPublisher<>(false, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.\n+\t * <p>\n+\t * The returned publisher will emit an overflow error if there is not enough request from subscribers.\n+\t *\n+\t * @param <T> the type of the publisher\n+\t * @return the new {@link TestPublisher}\n+\t */\n+\tpublic static <T> TestPublisher<T> createColdNonBuffering() {\n+\t\treturn new ColdTestPublisher<>(true, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjU1MA=="}, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NTc2OA==", "bodyText": "Let's use buffers instead of caches. Also, rephrase the and replays... part to something more along the lines of:\n\nand tracks how many elements have been seen by each subscriber in order to correctly replay the buffer to each subscriber, with backpressure.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525085768", "createdAt": "2020-11-17T11:33:48Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NjIyOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * The returned publisher will buffer values if there is not enough request from subscribers.\n          \n          \n            \n            \t * The publisher honors backpressure, holding off emitting newest items\n          \n          \n            \n            \t * from the buffer if the subscriber doesn't have enough request.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525086229", "createdAt": "2020-11-17T11:34:34Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4ODg2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n          \n          \n            \n            \t * all subscribers upon subscription.\n          \n          \n            \n            \t * <p>\n          \n          \n            \n            \t * The returned publisher will emit an overflow error if there is not enough request from subscribers.\n          \n          \n            \n            \t * subscribers. It buffers the {@link #next(Object)} events and tracks how many\n          \n          \n            \n            \t * elements have been seen by each subscriber in order to correctly replay the\n          \n          \n            \n            \t * buffer.\n          \n          \n            \n            \t * <p>\n          \n          \n            \n            \t * The returned publisher will emit an overflow error if a new subscriber's\n          \n          \n            \n            \t * first request is lower than the current buffer size, or if a new element\n          \n          \n            \n            \t * is pushed to a registered subscriber that has zero pending demand.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525088867", "createdAt": "2020-11-17T11:39:25Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.\n \t *\n \t * @param <T> the type of the publisher\n \t * @return the new {@link TestPublisher}\n \t */\n \tpublic static <T> TestPublisher<T> createCold() {\n-\t\treturn new ColdTestPublisher<>();\n+\t\treturn new ColdTestPublisher<>(false, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.\n+\t * <p>\n+\t * The returned publisher will emit an overflow error if there is not enough request from subscribers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4OTc4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n          \n          \n            \n            \t * all subscribers upon subscription.\n          \n          \n            \n            \t * subscribers. It buffers the {@link #next(Object)} events and tracks how many\n          \n          \n            \n            \t * elements have been seen by each subscriber in order to correctly replay the\n          \n          \n            \n            \t * buffer.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525089781", "createdAt": "2020-11-17T11:40:53Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.\n \t *\n \t * @param <T> the type of the publisher\n \t * @return the new {@link TestPublisher}\n \t */\n \tpublic static <T> TestPublisher<T> createCold() {\n-\t\treturn new ColdTestPublisher<>();\n+\t\treturn new ColdTestPublisher<>(false, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.\n+\t * <p>\n+\t * The returned publisher will emit an overflow error if there is not enough request from subscribers.\n+\t *\n+\t * @param <T> the type of the publisher\n+\t * @return the new {@link TestPublisher}\n+\t */\n+\tpublic static <T> TestPublisher<T> createColdNonBuffering() {\n+\t\treturn new ColdTestPublisher<>(true, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f45e9ef1ca54a682830998abda438ff06d76c69e", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/f45e9ef1ca54a682830998abda438ff06d76c69e", "committedDate": "2020-11-18T10:25:24Z", "message": "fix: remove unnecessary code into ColdTestPublisher #1518"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bdd2e315240ef6ffed53427eae4a253b4aa9d23", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/2bdd2e315240ef6ffed53427eae4a253b4aa9d23", "committedDate": "2020-11-18T10:25:24Z", "message": "fix: manage 3 different behaviors for ColdTestPublisher (Misbehave, Error, Backpressure)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c4a5b82dffbb61738fc9a29485316c3d77e9595", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/2c4a5b82dffbb61738fc9a29485316c3d77e9595", "committedDate": "2020-11-18T10:25:24Z", "message": "Support request in ColdTestPublisher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "180075aa54224abb23ae7b9af09f0e8be04f842f", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/180075aa54224abb23ae7b9af09f0e8be04f842f", "committedDate": "2020-11-18T10:25:24Z", "message": "Support fusion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c5c95485c50d1155da405686cbd5a00821b9af3", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/8c5c95485c50d1155da405686cbd5a00821b9af3", "committedDate": "2020-11-18T10:25:24Z", "message": "Fix on overflow support in some tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb57257eac5235e1f68578782dff529fb2899419", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/eb57257eac5235e1f68578782dff529fb2899419", "committedDate": "2020-11-18T10:25:24Z", "message": "Add support for Violations, polish API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b48018a062a3b02425f39e0bddb7475bd5f705", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/22b48018a062a3b02425f39e0bddb7475bd5f705", "committedDate": "2020-11-18T10:25:24Z", "message": "Remove argument to drain()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "476e9a0826f54d30e27ca08d2ae37ba3230d6bef", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/476e9a0826f54d30e27ca08d2ae37ba3230d6bef", "committedDate": "2020-11-18T10:25:24Z", "message": "Protect drain() from parallel invocations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fd7dedc22e4096bc6aaca64542127af1eacef17", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/1fd7dedc22e4096bc6aaca64542127af1eacef17", "committedDate": "2020-11-18T10:25:24Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Simon Basl\u00e9 <sbasle@vmware.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97cf12246c2aafcd7be7a185092685ee8753b4f6", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/97cf12246c2aafcd7be7a185092685ee8753b4f6", "committedDate": "2020-11-18T10:24:50Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Simon Basl\u00e9 <sbasle@vmware.com>"}, "afterCommit": {"oid": "1fd7dedc22e4096bc6aaca64542127af1eacef17", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/1fd7dedc22e4096bc6aaca64542127af1eacef17", "committedDate": "2020-11-18T10:25:24Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Simon Basl\u00e9 <sbasle@vmware.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1MzY1MjQ1", "url": "https://github.com/reactor/reactor-core/pull/2487#pullrequestreview-535365245", "createdAt": "2020-11-20T11:56:49Z", "commit": {"oid": "1fd7dedc22e4096bc6aaca64542127af1eacef17"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1Njo0OVrOH3MzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1Njo0OVrOH3MzRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MzQ2MQ==", "bodyText": "you need to perform that check atomically in the decrementAndGet at the end of the loop, rather than here, otherwise it defeats the purpose:\n\nthread A wins the guard and goes into the loop\nthread B looses and exits\nthread A does a first loop, decrements\nthread A does a second loop, corresponding to thread B's event\nthread A decrements to 0\nthread C enters drain and wins the guard (swapping from 0 to 1)\nthread A reads WIP and sees 1\n\ud83d\udc1b both A and C enter the loop and clash", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r527643461", "createdAt": "2020-11-20T11:56:49Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -226,6 +226,95 @@ void onComplete() {\n \t\t\tparent.remove(this);\n \t\t\tactual.onComplete();\n \t\t}\n+\n+\t\tprivate void drain() {\n+\t\t\tif (WIP.getAndIncrement(this) == 0) {\n+\t\t\t\twhile (WIP.get(this) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd7dedc22e4096bc6aaca64542127af1eacef17"}, "originalPosition": 182}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ed4dcd5e961c7949d1cf1c9a82c371248b2574d", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/3ed4dcd5e961c7949d1cf1c9a82c371248b2574d", "committedDate": "2020-11-20T15:09:19Z", "message": "Fix WIP access"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "05b481e782482e063f5045728cb2d864ae579c08", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/05b481e782482e063f5045728cb2d864ae579c08", "committedDate": "2020-11-20T15:08:53Z", "message": "Fix WIP access"}, "afterCommit": {"oid": "3ed4dcd5e961c7949d1cf1c9a82c371248b2574d", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/3ed4dcd5e961c7949d1cf1c9a82c371248b2574d", "committedDate": "2020-11-20T15:09:19Z", "message": "Fix WIP access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84d0afe277fe01cbff9428fc70328731a6030127", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/84d0afe277fe01cbff9428fc70328731a6030127", "committedDate": "2020-11-20T16:21:34Z", "message": "polish: javadoc, formatting and null detection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8047eb0e1b0e70c9adb3a49fce28eee714b67d2", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/f8047eb0e1b0e70c9adb3a49fce28eee714b67d2", "committedDate": "2020-11-20T16:22:16Z", "message": "fix bug that prevents draining from incremental requests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b1ab09cd7f361b6f9e87141637213fa27e8c855", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/7b1ab09cd7f361b6f9e87141637213fa27e8c855", "committedDate": "2020-11-20T16:23:52Z", "message": "Rework the whole drain loop, simplify it further"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3e9835cc5b13f7e2c72a530901fe8d48ba7dc46", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/f3e9835cc5b13f7e2c72a530901fe8d48ba7dc46", "committedDate": "2020-11-20T16:40:15Z", "message": "Polish inner next/error/complete methods: clearer name and consistent use"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93ad489195bfdf4b18585b5c099d2361b58fbd1e", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/93ad489195bfdf4b18585b5c099d2361b58fbd1e", "committedDate": "2020-11-23T10:53:29Z", "message": "inline doTryNext doComplete doError"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2MzYzMDY1", "url": "https://github.com/reactor/reactor-core/pull/2487#pullrequestreview-536363065", "createdAt": "2020-11-23T10:57:43Z", "commit": {"oid": "93ad489195bfdf4b18585b5c099d2361b58fbd1e"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM2NDAxNjgw", "url": "https://github.com/reactor/reactor-core/pull/2487#pullrequestreview-536401680", "createdAt": "2020-11-23T11:51:41Z", "commit": {"oid": "93ad489195bfdf4b18585b5c099d2361b58fbd1e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2693, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}