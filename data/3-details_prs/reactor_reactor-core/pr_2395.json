{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDMxOTE3", "number": 2395, "title": "fix #2344 migrate reactor-core tests to junit5", "bodyText": "Opening a draft PR for now.\nIt's actually not that bad to review once you look at all commits together, manual cleanups included.\nOf particular interest are\nreactor-core/src/test/java/reactor/guide/GuideTests.java\nreactor-core/src/test/java/reactor/core/publisher/OnDiscardShouldNotLeakTest.java\nreactor-core/src/test/java/reactor/core/publisher/FluxUsingWhenTest.java\nreactor-core/src/test/java/reactor/core/publisher/FluxDoOnEachTest.java\n\nI also looked at the Assert -> AssertJ migration but it's not that trivial, and introduces 56 compile errors. I think it will be better handled as a change after this one.\nOpening this as a draft for now, if you want to take a look @simonbasle, while I assess the 3.2.x -> 3.3.x difficulty", "createdAt": "2020-09-22T15:42:41Z", "url": "https://github.com/reactor/reactor-core/pull/2395", "merged": true, "mergeCommit": {"oid": "37b3cee315e03fcab092e557036c904da9fb787e"}, "closed": true, "closedAt": "2020-10-14T13:19:51Z", "author": {"login": "ericbottard"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLaGqugFqTQ5MzYxMzcyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdScBMVgFqTUwODI3NTA0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjEzNzI2", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-493613726", "createdAt": "2020-09-22T15:55:12Z", "commit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1NToxMlrOHWBOfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1NToxMlrOHWBOfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MDgxMg==", "bodyText": "IMO we should go with AssertJ and not introduce an intermediate step that we will need to change later", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r492850812", "createdAt": "2020-09-22T15:55:12Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -26,29 +26,30 @@\n import java.util.function.Function;\n import java.util.stream.Stream;\n \n-import org.junit.AfterClass;\n+import org.junit.jupiter.api.AfterAll;\n import org.junit.Assert;\n-import org.junit.BeforeClass;\n-import org.junit.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n import reactor.core.Exceptions;\n import reactor.core.scheduler.Scheduler;\n import reactor.core.scheduler.Schedulers;\n import reactor.test.StepVerifier;\n \n import static org.assertj.core.api.AssertionsForClassTypes.*;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNjE0MTYx", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-493614161", "createdAt": "2020-09-22T15:55:40Z", "commit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1NTo0MVrOHWBP2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNTo1NTo0MVrOHWBP2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjg1MTE2Mw==", "bodyText": "nit: I would avoid using short lambda syntax for multiline lambdas", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r492851163", "createdAt": "2020-09-22T15:55:41Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BlockingTests.java", "diffHunk": "@@ -98,32 +99,36 @@ public void blockingLastTimeout() {\n \t\t               .blockLast(Duration.ofMillis(1))).isNull();\n \t}\n \n-\t@Test(expected = RuntimeException.class)\n+\t@Test\n \tpublic void blockingFirstError() {\n-\t\tFlux.error(new RuntimeException(\"test\"))\n-\t\t    .publishOn(scheduler)\n-\t\t    .blockFirst();\n+\t\tassertThrows(RuntimeException.class, () ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1605f0a874bc9e0e5a81afd87e95d5ad8553c01f"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDAzMTI3", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-495403127", "createdAt": "2020-09-24T09:51:15Z", "commit": {"oid": "72858d9255ed3b920910f757ad41f4d4c25c50e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo1MToxNVrOHXSqeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwOTo1MToxNVrOHXSqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDE4NTA4Mg==", "bodyText": "Could you please clarify this change?", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494185082", "createdAt": "2020-09-24T09:51:15Z", "author": {"login": "bsideup"}, "path": "buildSrc/src/main/java/io/reactor/gradle/JavaConventions.java", "diffHunk": "@@ -59,6 +59,8 @@ private void applyJavaConvention(Project project) {\n \t\t\t\t\t       \"-Xlint:processing\",\n \t\t\t\t\t       \"-Xlint:static\",\n \t\t\t\t\t       \"-Xlint:try\",\n+\t\t\t\t\t\t   \"-Xmaxerrs\", \"1000\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72858d9255ed3b920910f757ad41f4d4c25c50e8"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDMwNjQw", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-495430640", "createdAt": "2020-09-24T10:28:19Z", "commit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoxOVrOHXT-9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDoyODoxOVrOHXT-9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwNjcwOA==", "bodyText": "knowledge sharing, no action needed:\nwhen it comes to assertThatExceptionOfType + isThrownBy, sometimes it makes sense to put isThrownBy\nat the same line as assertThatExceptionOfType. It will result in much less indentation of lambda's body :)", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494206708", "createdAt": "2020-09-24T10:28:19Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/BaseSubscriberTest.java", "diffHunk": "@@ -134,35 +136,38 @@ protected void hookFinally(SignalType type) {\n \t\tassertThat(error.get(), is(instanceOf(IllegalStateException.class)));\n \t}\n \n-\t@Test(expected = OutOfMemoryError.class)\n+\t@Test\n \tpublic void onSubscribeFatalThrown() {\n \t\tFlux<String> flux = Flux.just(\"foo\");\n \t\tAtomicReference<Throwable> error = new AtomicReference<>();\n \t\tAtomicReference<SignalType> checkFinally = new AtomicReference<>();\n \n-\t\tflux.subscribe(new BaseSubscriber<String>() {\n-\t\t\t@Override\n-\t\t\tprotected void hookOnSubscribe(Subscription subscription) {\n-\t\t\t\tthrow new OutOfMemoryError(\"boom\");\n-\t\t\t}\n+\t\tassertThatExceptionOfType(OutOfMemoryError.class)\n+\t\t\t\t.isThrownBy(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDMyNDI1", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-495432425", "createdAt": "2020-09-24T10:30:56Z", "commit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozMDo1NlrOHXUEkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMDozMDo1NlrOHXUEkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDIwODE0Ng==", "bodyText": "unused?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494208146", "createdAt": "2020-09-24T10:30:56Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/DirectProcessorTest.java", "diffHunk": "@@ -16,40 +16,54 @@\n package reactor.core.publisher;\n \n import org.junit.Assert;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscriber;\n import reactor.core.Scannable;\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTA1MTU1", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-495505155", "createdAt": "2020-09-24T12:14:12Z", "commit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDoxMlrOHXXiVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDoxMlrOHXXiVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NDkxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494264916", "createdAt": "2020-09-24T12:14:12Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRangeTest.java", "diffHunk": "@@ -25,6 +25,8 @@\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTA1NDMx", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-495505431", "createdAt": "2020-09-24T12:14:35Z", "commit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDozNVrOHXXjJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDozNVrOHXXjJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTEyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265127", "createdAt": "2020-09-24T12:14:35Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRepeatTest.java", "diffHunk": "@@ -19,16 +19,22 @@\n import java.time.Duration;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTA1NzM3", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-495505737", "createdAt": "2020-09-24T12:14:56Z", "commit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDo1NlrOHXXkLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNDo1NlrOHXXkLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTM5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265391", "createdAt": "2020-09-24T12:14:56Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxReplayTest.java", "diffHunk": "@@ -38,6 +38,7 @@\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTA2MDU2", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-495506056", "createdAt": "2020-09-24T12:15:21Z", "commit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNToyMVrOHXXlLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNToyMVrOHXXlLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTY0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265646", "createdAt": "2020-09-24T12:15:21Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -45,6 +44,7 @@\n import reactor.util.function.Tuples;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTA2MzYw", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-495506360", "createdAt": "2020-09-24T12:15:42Z", "commit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNTo0MlrOHXXmIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMjoxNTo0MlrOHXXmIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI2NTg5MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import static org.junit.jupiter.api.Assertions.assertThrows;", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r494265890", "createdAt": "2020-09-24T12:15:42Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxScanSeedTest.java", "diffHunk": "@@ -16,23 +16,22 @@\n \n package reactor.core.publisher;\n \n-import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.assertj.core.api.Assertions;\n-import org.junit.Test;\n+import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscription;\n \n import reactor.core.CoreSubscriber;\n import reactor.core.Scannable;\n import reactor.test.publisher.FluxOperatorTest;\n import reactor.test.subscriber.AssertSubscriber;\n import reactor.test.util.RaceTestUtils;\n-import reactor.util.context.Context;\n \n import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertThrows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58d57d908fe5ca7fc8eb27f92b5e6afcf3ac7c9a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0ODQ0MzM1", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-504844335", "createdAt": "2020-10-08T14:28:45Z", "commit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDoyODo0NlrOHehaGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNDozMTozNlrOHehjHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2NjY4Mg==", "bodyText": "tabs is ideally what we'd use everywhere, so switching to tabs on modified lines was \ud83d\udc4d", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501766682", "createdAt": "2020-10-08T14:28:46Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/MonoCallableTest.java", "diffHunk": "@@ -24,22 +24,20 @@\n import org.assertj.core.data.Offset;\n import org.junit.jupiter.api.Test;\n import org.reactivestreams.Subscription;\n-\n import reactor.test.StepVerifier;\n import reactor.test.subscriber.AssertSubscriber;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n-import static org.junit.jupiter.api.Assertions.assertThrows;\n \n public class MonoCallableTest {\n \n     @Test\n     public void nullCallable() {\n-\t\tassertThrows(NullPointerException.class, () -> {\n-\t\t\tMono.<Integer>fromCallable(null);\n-\t\t});\n-\t}\n+        assertThatExceptionOfType(NullPointerException.class).isThrownBy(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2Nzg3NA==", "bodyText": "nitpick: put on one line? the })); below I mean", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501767874", "createdAt": "2020-10-08T14:30:13Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -286,8 +287,8 @@ final public void directScheduleAndDisposeDelay() throws Exception {\n \t\t\ts.dispose();\n \t\t\tassertThat(s.isDisposed()).isTrue();\n \n-\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }));\n+\t\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODA3MQ==", "bodyText": "nitpick: put back on one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768071", "createdAt": "2020-10-08T14:30:29Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -354,7 +355,8 @@ final public void directScheduleAndDisposePeriod() throws Exception {\n \n \t\t\tif (!shouldCheckDirectTimeScheduling()) {\n \t\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }, 10, TimeUnit.MILLISECONDS))\n+\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODMxMw==", "bodyText": "nitpick: put back on one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768313", "createdAt": "2020-10-08T14:30:49Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -257,7 +257,8 @@ final public void directScheduleAndDisposeDelay() throws Exception {\n \n \t\t\tif (!shouldCheckDirectTimeScheduling()) {\n \t\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }, 10, TimeUnit.MILLISECONDS))\n+\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODczNg==", "bodyText": "nitpick: put back on one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768736", "createdAt": "2020-10-08T14:31:16Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -386,8 +388,8 @@ final public void directScheduleAndDisposePeriod() throws Exception {\n \t\t\ts.dispose();\n \t\t\tassertThat(s.isDisposed()).isTrue();\n \n-\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }));\n+\t\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODk4OA==", "bodyText": "nitpick: put back the empty lambdas on one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r501768988", "createdAt": "2020-10-08T14:31:36Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java", "diffHunk": "@@ -512,21 +512,25 @@ public void testShutdownOldOnSetFactory() {\n \n \n \t\tAssert.assertNotSame(cachedTimerOld, standaloneTimer);\n-\t\tAssert.assertNotNull(cachedTimerOld.schedule(() -> {}));\n-\t\tAssert.assertNotNull(standaloneTimer.schedule(() -> {}));\n+\t\tAssert.assertNotNull(cachedTimerOld.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afad7802733ad5958d0748292e05b52e76cab899", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/afad7802733ad5958d0748292e05b52e76cab899", "committedDate": "2020-10-13T10:03:10Z", "message": "fix #2344 migrate tests to junit 5\n\nSwitch to assertJ for exception support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/9b444e40038216e3449ed600a8da202f9aee70d0", "committedDate": "2020-09-28T13:16:21Z", "message": "Fix unused imports and vice-versa"}, "afterCommit": {"oid": "afad7802733ad5958d0748292e05b52e76cab899", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/afad7802733ad5958d0748292e05b52e76cab899", "committedDate": "2020-10-13T10:03:10Z", "message": "fix #2344 migrate tests to junit 5\n\nSwitch to assertJ for exception support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3MjkwNDQz", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-507290443", "createdAt": "2020-10-13T10:27:43Z", "commit": {"oid": "afad7802733ad5958d0748292e05b52e76cab899"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyNzo0M1rOHggAaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMDoyODoyNlrOHggCJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MDg3Mw==", "bodyText": "still some ugly line split there", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r503840873", "createdAt": "2020-10-13T10:27:43Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/SchedulersTest.java", "diffHunk": "@@ -521,8 +521,8 @@ public void testShutdownOldOnSetFactory() {\n \t\tAssert.assertEquals(cachedTimerNew, Schedulers.newSingle(\"unused\"));\n \t\tAssert.assertNotSame(cachedTimerNew, cachedTimerOld);\n \t\t//assert that the old factory\"s cached scheduler was shut down\n-\t\tAssertions.assertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t          .isThrownBy(() -> cachedTimerOld.schedule(() -> {}));\n+\t\tassertThatExceptionOfType(RejectedExecutionException.class).isThrownBy(() -> cachedTimerOld.schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afad7802733ad5958d0748292e05b52e76cab899"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzg0MTMxOA==", "bodyText": "ugly line split not fixed for that one line", "url": "https://github.com/reactor/reactor-core/pull/2395#discussion_r503841318", "createdAt": "2020-10-13T10:28:26Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/AbstractSchedulerTest.java", "diffHunk": "@@ -257,7 +257,8 @@ final public void directScheduleAndDisposeDelay() throws Exception {\n \n \t\t\tif (!shouldCheckDirectTimeScheduling()) {\n \t\t\t\tassertThatExceptionOfType(RejectedExecutionException.class)\n-\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> { }, 10, TimeUnit.MILLISECONDS))\n+\t\t\t\t\t\t.isThrownBy(() -> s.schedule(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTc2ODMxMw=="}, "originalCommit": {"oid": "9b444e40038216e3449ed600a8da202f9aee70d0"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4Mjc1MDQx", "url": "https://github.com/reactor/reactor-core/pull/2395#pullrequestreview-508275041", "createdAt": "2020-10-14T12:06:31Z", "commit": {"oid": "afad7802733ad5958d0748292e05b52e76cab899"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2876, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}