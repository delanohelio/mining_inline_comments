{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MjgyNDA0", "number": 2514, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyMjoyMVrOE98G8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyNjowNVrOE98Lxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzgzNDA4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/SinksTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyMjoyMlrOH64zYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0Mzo0MVrOH67ZeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMDExNQ==", "bodyText": "please at least setup the replaySink in a @BeforeEach so that each test get their own", "url": "https://github.com/reactor/reactor-core/pull/2514#discussion_r531510115", "createdAt": "2020-11-27T10:22:22Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinksTest.java", "diffHunk": "@@ -165,6 +165,39 @@ void noReplayBeforeFirstSubscriberIfEarlyError() {\n \t\t}\n \t}\n \n+\t@Nested\n+\tclass MulticastReplayDuration {\n+\n+\t\tfinal Duration            duration = Duration.ofMillis(1000);\n+\t\tfinal Sinks.Many<Integer> replaySink = Sinks.many().replay().limit(duration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9dc7e6f02590ce81f774a1bb1c8836de66e2b14"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1MjYzMw==", "bodyText": "right, will fix it", "url": "https://github.com/reactor/reactor-core/pull/2514#discussion_r531552633", "createdAt": "2020-11-27T11:43:41Z", "author": {"login": "dowgiallom"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinksTest.java", "diffHunk": "@@ -165,6 +165,39 @@ void noReplayBeforeFirstSubscriberIfEarlyError() {\n \t\t}\n \t}\n \n+\t@Nested\n+\tclass MulticastReplayDuration {\n+\n+\t\tfinal Duration            duration = Duration.ofMillis(1000);\n+\t\tfinal Sinks.Many<Integer> replaySink = Sinks.many().replay().limit(duration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMDExNQ=="}, "originalCommit": {"oid": "f9dc7e6f02590ce81f774a1bb1c8836de66e2b14"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMzg0NjQ2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/SinksTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMDoyNjowNlrOH647Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxMTo0Mzo1MFrOH67Zxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMjEwMw==", "bodyText": "nitpick: I'd add a comment referencing the issue to avoid somebody later changing the retention duration or the minusMillis(1) instruction for example", "url": "https://github.com/reactor/reactor-core/pull/2514#discussion_r531512103", "createdAt": "2020-11-27T10:26:06Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinksTest.java", "diffHunk": "@@ -165,6 +165,39 @@ void noReplayBeforeFirstSubscriberIfEarlyError() {\n \t\t}\n \t}\n \n+\t@Nested\n+\tclass MulticastReplayDuration {\n+\n+\t\tfinal Duration            duration = Duration.ofMillis(1000);\n+\t\tfinal Sinks.Many<Integer> replaySink = Sinks.many().replay().limit(duration);\n+\t\tfinal Flux<Integer>       flux = replaySink.asFlux();\n+\t\tfinal int \t\t\t\t  event = 12;\n+\n+\t\t@Test\n+\t\tvoid lateSubscriberReceivesEventInRetentionTime() {\n+\t\t\treplaySink.emitNext(event, FAIL_FAST);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9dc7e6f02590ce81f774a1bb1c8836de66e2b14"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTU1MjcxMA==", "bodyText": "added comment", "url": "https://github.com/reactor/reactor-core/pull/2514#discussion_r531552710", "createdAt": "2020-11-27T11:43:50Z", "author": {"login": "dowgiallom"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinksTest.java", "diffHunk": "@@ -165,6 +165,39 @@ void noReplayBeforeFirstSubscriberIfEarlyError() {\n \t\t}\n \t}\n \n+\t@Nested\n+\tclass MulticastReplayDuration {\n+\n+\t\tfinal Duration            duration = Duration.ofMillis(1000);\n+\t\tfinal Sinks.Many<Integer> replaySink = Sinks.many().replay().limit(duration);\n+\t\tfinal Flux<Integer>       flux = replaySink.asFlux();\n+\t\tfinal int \t\t\t\t  event = 12;\n+\n+\t\t@Test\n+\t\tvoid lateSubscriberReceivesEventInRetentionTime() {\n+\t\t\treplaySink.emitNext(event, FAIL_FAST);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTUxMjEwMw=="}, "originalCommit": {"oid": "f9dc7e6f02590ce81f774a1bb1c8836de66e2b14"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 860, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}