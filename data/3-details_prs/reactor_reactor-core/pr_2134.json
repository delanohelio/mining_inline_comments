{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjI0MTIx", "number": 2134, "title": "Fix onDiscard leaks in fused operators with queue", "bodyText": "Follow up on on the series of onDiscard leaks fixes for specific fusion case\nSigned-off-by: Oleh Dokuka shadowgun@i.ua", "createdAt": "2020-04-23T22:05:25Z", "url": "https://github.com/reactor/reactor-core/pull/2134", "merged": true, "mergeCommit": {"oid": "d61d3319790ca41e4205250deb04cc04c8e4292c"}, "closed": true, "closedAt": "2020-04-24T14:39:02Z", "author": {"login": "OlegDokuka"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcassIEAH2gAyNDA4MjI0MTIxOmU5OWMzM2ZjOWU2ZTZjNjYzZWM1N2I5ZWRjOGNlYjYzZjkzNjFmNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcayfR-AFqTQwMDAwNTIzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43", "committedDate": "2020-04-24T07:52:08Z", "message": "fixes leaks on the fused operators with queue\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9751ee03041b01428696130a1e780acd92c390da", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/9751ee03041b01428696130a1e780acd92c390da", "committedDate": "2020-04-23T22:03:00Z", "message": "fixes leaks on the fused operators with queue\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}, "afterCommit": {"oid": "e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43", "committedDate": "2020-04-24T07:52:08Z", "message": "fixes leaks on the fused operators with queue\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5NzE5MjAw", "url": "https://github.com/reactor/reactor-core/pull/2134#pullrequestreview-399719200", "createdAt": "2020-04-24T07:53:42Z", "commit": {"oid": "9751ee03041b01428696130a1e780acd92c390da"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzo1NToxMVrOGLLTAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzo1NToxMVrOGLLTAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM3MjYxMA==", "bodyText": "formatting: there shouldn't be spaces in this file if you use the official Reactor intellij format", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414372610", "createdAt": "2020-04-24T07:55:11Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/OnDiscardShouldNotLeakTest.java", "diffHunk": "@@ -45,24 +45,50 @@\n @RunWith(Parameterized.class)\n public class OnDiscardShouldNotLeakTest {\n \n-\t//add DiscardScenarios here to test more operators\n-\tprivate static DiscardScenario[] SCENARIOS = new DiscardScenario[] {\n-\t\t\tDiscardScenario.allFluxSourceArray(\"merge\", 4, Flux::merge),\n-\t\t\tDiscardScenario.fluxSource(\"onBackpressureBuffer\", 1, Flux::onBackpressureBuffer),\n-\t\t\tDiscardScenario.rawSource(\"flatMapInner\", 1, raw -> Flux.just(1).flatMap(f -> raw)),\n-\t\t\tDiscardScenario.fluxSource(\"flatMap\", 1, main -> main.flatMap(f -> Mono.just(f).hide().flux())),\n-\t\t\tDiscardScenario.fluxSource(\"flatMapIterable\", 1, f -> f.flatMapIterable(Arrays::asList)),\n-\t\t\tDiscardScenario.fluxSource(\"publishOnDelayErrors\", 1, f -> f.publishOn(Schedulers.immediate())),\n-\t\t\tDiscardScenario.fluxSource(\"publishOnImmediateErrors\", 1, f -> f.publishOn(Schedulers.immediate(), false, Queues.SMALL_BUFFER_SIZE)),\n-\t\t\tDiscardScenario.fluxSource(\"unicastProcessor\", 1, f -> f.subscribeWith(UnicastProcessor.create()))\n-\t};\n-\n-\tprivate static boolean[][] CONDITIONAL_AND_FUSED = new boolean[][] {\n-\t\t\t{ false, false },\n-\t\t\t{ true, false },\n-\t\t\t{ false, true },\n-\t\t\t{ true, true }\n-\t};\n+    //add DiscardScenarios here to test more operators", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e99c33fc9e6e6c663ec57b9edc8ceb63f9361f43"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d06eda341294d4e0b959284ed72c453c59a1bee1", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/d06eda341294d4e0b959284ed72c453c59a1bee1", "committedDate": "2020-04-24T07:56:31Z", "message": "adding space\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2c9b7bf84dfefb2f889d4296c3a7049a9741b1", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/8d2c9b7bf84dfefb2f889d4296c3a7049a9741b1", "committedDate": "2020-04-24T08:05:27Z", "message": "fixes to use common method which protects from NPE\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ea73e22f70520f2b03da0176ae38aac419321c", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/21ea73e22f70520f2b03da0176ae38aac419321c", "committedDate": "2020-04-24T08:49:40Z", "message": "eliminates synchronization if favor of non-blocking guard\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODkxMzkz", "url": "https://github.com/reactor/reactor-core/pull/2134#pullrequestreview-399891393", "createdAt": "2020-04-24T12:14:17Z", "commit": {"oid": "21ea73e22f70520f2b03da0176ae38aac419321c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxNDoxN1rOGLU09w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxNzo0NlrOGLU9LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyODc1OQ==", "bodyText": "nitpick: can you rename the variable to at least stick to the convention that local copies in drain loops are named after the initial of their corresponding field? it. w becomes dg", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414528759", "createdAt": "2020-04-24T12:14:17Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxOnBackpressureBuffer.java", "diffHunk": "@@ -349,7 +364,29 @@ public boolean isEmpty() {\n \n \t\t@Override\n \t\tpublic void clear() {\n-\t\t\tOperators.onDiscardQueueWithClear(queue, ctx, null);\n+\t\t\t// use guard on the queue instance as the best way to ensure there is no racing on draining\n+\t\t\t// the call to this method must be done only during the ASYNC fusion so all the callers will be waiting\n+\t\t\t// this should not ber performance costly with the assumption the cancel is rare operation\n+\t\t\tif (DISCARD_GUARD.getAndIncrement(this) != 0) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tint missed = 1;\n+\n+\t\t\tfor (;;) {\n+\t\t\t\tOperators.onDiscardQueueWithClear(queue, ctx, null);\n+\n+\t\t\t\tint w = discardGuard;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ea73e22f70520f2b03da0176ae38aac419321c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTg0Ng==", "bodyText": "typo not ber -> not be", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414529846", "createdAt": "2020-04-24T12:16:05Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxOnBackpressureBuffer.java", "diffHunk": "@@ -349,7 +364,29 @@ public boolean isEmpty() {\n \n \t\t@Override\n \t\tpublic void clear() {\n-\t\t\tOperators.onDiscardQueueWithClear(queue, ctx, null);\n+\t\t\t// use guard on the queue instance as the best way to ensure there is no racing on draining\n+\t\t\t// the call to this method must be done only during the ASYNC fusion so all the callers will be waiting\n+\t\t\t// this should not ber performance costly with the assumption the cancel is rare operation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ea73e22f70520f2b03da0176ae38aac419321c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMDYyOQ==", "bodyText": "still whitespace formatting issue", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414530629", "createdAt": "2020-04-24T12:17:23Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/OnDiscardShouldNotLeakTest.java", "diffHunk": "@@ -45,24 +45,50 @@\n @RunWith(Parameterized.class)\n public class OnDiscardShouldNotLeakTest {\n \n-\t//add DiscardScenarios here to test more operators\n-\tprivate static DiscardScenario[] SCENARIOS = new DiscardScenario[] {\n-\t\t\tDiscardScenario.allFluxSourceArray(\"merge\", 4, Flux::merge),\n-\t\t\tDiscardScenario.fluxSource(\"onBackpressureBuffer\", 1, Flux::onBackpressureBuffer),\n-\t\t\tDiscardScenario.rawSource(\"flatMapInner\", 1, raw -> Flux.just(1).flatMap(f -> raw)),\n-\t\t\tDiscardScenario.fluxSource(\"flatMap\", 1, main -> main.flatMap(f -> Mono.just(f).hide().flux())),\n-\t\t\tDiscardScenario.fluxSource(\"flatMapIterable\", 1, f -> f.flatMapIterable(Arrays::asList)),\n-\t\t\tDiscardScenario.fluxSource(\"publishOnDelayErrors\", 1, f -> f.publishOn(Schedulers.immediate())),\n-\t\t\tDiscardScenario.fluxSource(\"publishOnImmediateErrors\", 1, f -> f.publishOn(Schedulers.immediate(), false, Queues.SMALL_BUFFER_SIZE)),\n-\t\t\tDiscardScenario.fluxSource(\"unicastProcessor\", 1, f -> f.subscribeWith(UnicastProcessor.create()))\n-\t};\n-\n-\tprivate static boolean[][] CONDITIONAL_AND_FUSED = new boolean[][] {\n-\t\t\t{ false, false },\n-\t\t\t{ true, false },\n-\t\t\t{ false, true },\n-\t\t\t{ true, true }\n-\t};\n+    // add DiscardScenarios here to test more operators", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ea73e22f70520f2b03da0176ae38aac419321c"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMDc5OQ==", "bodyText": "applies to all occurrences below as well", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414530799", "createdAt": "2020-04-24T12:17:40Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxOnBackpressureBuffer.java", "diffHunk": "@@ -349,7 +364,29 @@ public boolean isEmpty() {\n \n \t\t@Override\n \t\tpublic void clear() {\n-\t\t\tOperators.onDiscardQueueWithClear(queue, ctx, null);\n+\t\t\t// use guard on the queue instance as the best way to ensure there is no racing on draining\n+\t\t\t// the call to this method must be done only during the ASYNC fusion so all the callers will be waiting\n+\t\t\t// this should not ber performance costly with the assumption the cancel is rare operation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyOTg0Ng=="}, "originalCommit": {"oid": "21ea73e22f70520f2b03da0176ae38aac419321c"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMDg2MQ==", "bodyText": "applies to all occurrences below as well", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414530861", "createdAt": "2020-04-24T12:17:46Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxOnBackpressureBuffer.java", "diffHunk": "@@ -349,7 +364,29 @@ public boolean isEmpty() {\n \n \t\t@Override\n \t\tpublic void clear() {\n-\t\t\tOperators.onDiscardQueueWithClear(queue, ctx, null);\n+\t\t\t// use guard on the queue instance as the best way to ensure there is no racing on draining\n+\t\t\t// the call to this method must be done only during the ASYNC fusion so all the callers will be waiting\n+\t\t\t// this should not ber performance costly with the assumption the cancel is rare operation\n+\t\t\tif (DISCARD_GUARD.getAndIncrement(this) != 0) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tint missed = 1;\n+\n+\t\t\tfor (;;) {\n+\t\t\t\tOperators.onDiscardQueueWithClear(queue, ctx, null);\n+\n+\t\t\t\tint w = discardGuard;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUyODc1OQ=="}, "originalCommit": {"oid": "21ea73e22f70520f2b03da0176ae38aac419321c"}, "originalPosition": 73}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20bf3e64415848d3ebe07039449693e58052d302", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/20bf3e64415848d3ebe07039449693e58052d302", "committedDate": "2020-04-24T12:30:50Z", "message": "polishing\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1dd6a7fdf0916dfffb209016f918f326eef8cc5f", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/1dd6a7fdf0916dfffb209016f918f326eef8cc5f", "committedDate": "2020-04-24T12:28:56Z", "message": "polishing\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}, "afterCommit": {"oid": "20bf3e64415848d3ebe07039449693e58052d302", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/20bf3e64415848d3ebe07039449693e58052d302", "committedDate": "2020-04-24T12:30:50Z", "message": "polishing\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTE1MDAx", "url": "https://github.com/reactor/reactor-core/pull/2134#pullrequestreview-399915001", "createdAt": "2020-04-24T12:48:49Z", "commit": {"oid": "20bf3e64415848d3ebe07039449693e58052d302"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0ODo0OVrOGLWGeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0ODo0OVrOGLWGeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0OTYyNQ==", "bodyText": "haha nice try, I meant on the whole file \ud83d\ude1b", "url": "https://github.com/reactor/reactor-core/pull/2134#discussion_r414549625", "createdAt": "2020-04-24T12:48:49Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/OnDiscardShouldNotLeakTest.java", "diffHunk": "@@ -45,7 +45,7 @@\n @RunWith(Parameterized.class)\n public class OnDiscardShouldNotLeakTest {\n \n-    // add DiscardScenarios here to test more operators\n+\t// add DiscardScenarios here to test more operators", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20bf3e64415848d3ebe07039449693e58052d302"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7922ce127ce77fdc141559e9ed98a3a82a17d3a2", "author": {"user": {"login": "OlegDokuka", "name": "Oleh Dokuka"}}, "url": "https://github.com/reactor/reactor-core/commit/7922ce127ce77fdc141559e9ed98a3a82a17d3a2", "committedDate": "2020-04-24T13:07:11Z", "message": "polishing\n\nSigned-off-by: Oleh Dokuka <shadowgun@i.ua>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "024d08b1fd8b4b62f9a4d032a942b609d65e68a5", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/024d08b1fd8b4b62f9a4d032a942b609d65e68a5", "committedDate": "2020-04-24T13:54:28Z", "message": "Adjust polish on top of polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMDA1MjM2", "url": "https://github.com/reactor/reactor-core/pull/2134#pullrequestreview-400005236", "createdAt": "2020-04-24T14:37:32Z", "commit": {"oid": "024d08b1fd8b4b62f9a4d032a942b609d65e68a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2959, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}