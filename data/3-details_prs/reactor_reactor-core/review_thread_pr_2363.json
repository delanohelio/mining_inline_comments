{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODY1MDY2", "number": 2363, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODoyMDoyNVrOEhIqUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoxMToyNlrOEiMRVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTgwMzY4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODoyMDoyNVrOHOSCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1Mjo1MVrOHOeRAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNzcxNA==", "bodyText": "After further thoughts, I'm having huge doubts about the introduction of this method and the corresponding one in Mono as I think it can easily be missed by the user and though results in an invalid mix & match of firstValues and or operators called.", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484737714", "createdAt": "2020-09-08T08:20:25Z", "author": {"login": "aneveu"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6602,17 +6637,42 @@ public int getPrefetch() {\n \t * @see #first\n \t */\n \tpublic final Flux<T> or(Publisher<? extends T> other) {\n-\t\tif (this instanceof FluxFirstEmitting) {\n-\t\t\tFluxFirstEmitting<T> publisherAmb = (FluxFirstEmitting<T>) this;\n+\t\tif (this instanceof FluxFirst) {\n+\t\t\tFluxFirst<T> orPublisher = (FluxFirst<T>) this;\n \n-\t\t\tFluxFirstEmitting<T> result = publisherAmb.ambAdditionalSource(other);\n+\t\t\tFluxFirst<T> result = orPublisher.orAdditionalSource(other);\n \t\t\tif (result != null) {\n \t\t\t\treturn result;\n \t\t\t}\n \t\t}\n \t\treturn first(this, other);\n \t}\n \n+\t/**\n+\t * Pick the first {@link Publisher} between this {@link Flux} and another publisher\n+\t * to emit any value and replay all signals from that\n+\t * {@link Publisher}, effectively behaving like the fastest of these competing sources.\n+\t *\n+\t * <p> TODO\n+\t * <img class=\"marble\" src=\"doc-files/marbles/orForFlux.svg\" alt=\"\">\n+\t *\n+\t * @param other the {@link Publisher} to race with\n+\t *\n+\t * @return the fastest sequence\n+\t * @see #firstValues\n+\t */\n+\tpublic final Flux<T> orValues(Publisher<? extends T> other) {\n+\t\tif (this instanceof FluxFirstValues) {\n+\t\t\tFluxFirstValues<T> orPublisher = (FluxFirstValues<T>) this;\n+\n+\t\t\tFluxFirstValues<T> result = orPublisher.orAdditionalSource(other);\n+\t\t\tif (result != null) {\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t}\n+\t\treturn firstValues(this, other);\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc3NzY4NA==", "bodyText": "that is actually a huge argument in favor of NOT mutualizing the publisher concrete classes !", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484777684", "createdAt": "2020-09-08T09:24:33Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6602,17 +6637,42 @@ public int getPrefetch() {\n \t * @see #first\n \t */\n \tpublic final Flux<T> or(Publisher<? extends T> other) {\n-\t\tif (this instanceof FluxFirstEmitting) {\n-\t\t\tFluxFirstEmitting<T> publisherAmb = (FluxFirstEmitting<T>) this;\n+\t\tif (this instanceof FluxFirst) {\n+\t\t\tFluxFirst<T> orPublisher = (FluxFirst<T>) this;\n \n-\t\t\tFluxFirstEmitting<T> result = publisherAmb.ambAdditionalSource(other);\n+\t\t\tFluxFirst<T> result = orPublisher.orAdditionalSource(other);\n \t\t\tif (result != null) {\n \t\t\t\treturn result;\n \t\t\t}\n \t\t}\n \t\treturn first(this, other);\n \t}\n \n+\t/**\n+\t * Pick the first {@link Publisher} between this {@link Flux} and another publisher\n+\t * to emit any value and replay all signals from that\n+\t * {@link Publisher}, effectively behaving like the fastest of these competing sources.\n+\t *\n+\t * <p> TODO\n+\t * <img class=\"marble\" src=\"doc-files/marbles/orForFlux.svg\" alt=\"\">\n+\t *\n+\t * @param other the {@link Publisher} to race with\n+\t *\n+\t * @return the fastest sequence\n+\t * @see #firstValues\n+\t */\n+\tpublic final Flux<T> orValues(Publisher<? extends T> other) {\n+\t\tif (this instanceof FluxFirstValues) {\n+\t\t\tFluxFirstValues<T> orPublisher = (FluxFirstValues<T>) this;\n+\n+\t\t\tFluxFirstValues<T> result = orPublisher.orAdditionalSource(other);\n+\t\t\tif (result != null) {\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t}\n+\t\treturn firstValues(this, other);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNzcxNA=="}, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzNzk4NQ==", "bodyText": "actually, let's forget about orValues for now.", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484937985", "createdAt": "2020-09-08T13:52:51Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6602,17 +6637,42 @@ public int getPrefetch() {\n \t * @see #first\n \t */\n \tpublic final Flux<T> or(Publisher<? extends T> other) {\n-\t\tif (this instanceof FluxFirstEmitting) {\n-\t\t\tFluxFirstEmitting<T> publisherAmb = (FluxFirstEmitting<T>) this;\n+\t\tif (this instanceof FluxFirst) {\n+\t\t\tFluxFirst<T> orPublisher = (FluxFirst<T>) this;\n \n-\t\t\tFluxFirstEmitting<T> result = publisherAmb.ambAdditionalSource(other);\n+\t\t\tFluxFirst<T> result = orPublisher.orAdditionalSource(other);\n \t\t\tif (result != null) {\n \t\t\t\treturn result;\n \t\t\t}\n \t\t}\n \t\treturn first(this, other);\n \t}\n \n+\t/**\n+\t * Pick the first {@link Publisher} between this {@link Flux} and another publisher\n+\t * to emit any value and replay all signals from that\n+\t * {@link Publisher}, effectively behaving like the fastest of these competing sources.\n+\t *\n+\t * <p> TODO\n+\t * <img class=\"marble\" src=\"doc-files/marbles/orForFlux.svg\" alt=\"\">\n+\t *\n+\t * @param other the {@link Publisher} to race with\n+\t *\n+\t * @return the fastest sequence\n+\t * @see #firstValues\n+\t */\n+\tpublic final Flux<T> orValues(Publisher<? extends T> other) {\n+\t\tif (this instanceof FluxFirstValues) {\n+\t\t\tFluxFirstValues<T> orPublisher = (FluxFirstValues<T>) this;\n+\n+\t\t\tFluxFirstValues<T> result = orPublisher.orAdditionalSource(other);\n+\t\t\tif (result != null) {\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t}\n+\t\treturn firstValues(this, other);\n+\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNzcxNA=="}, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzA4NzkwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MjowOVrOHOePAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MjowOVrOHOePAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzNzQ3Mw==", "bodyText": "let's cover the case where first source in the vararg is a FluxFirstValues (and return the result of orAdditionalSource then)", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484937473", "createdAt": "2020-09-08T13:52:09Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -942,7 +942,42 @@\n \t * @return a new {@link Flux} behaving like the fastest of its sources\n \t */\n \tpublic static <I> Flux<I> first(Iterable<? extends Publisher<? extends I>> sources) {\n-\t\treturn onAssembly(new FluxFirstEmitting<>(sources));\n+\t\treturn onAssembly(new FluxFirst<>(sources));\n+\t}\n+\n+\t/**\n+\t * Pick the first {@link Publisher} to emit any value and replay all signals\n+\t * from that {@link Publisher}, effectively behaving like the\n+\t * fastest of these competing sources.\n+\t *\n+\t * <p>\n+\t * // TODO replace the img\n+\t *\n+\t * @param sources The competing source publishers\n+\t * @param <I> The type of values in both source and output sequences\n+\t *\n+\t * @return a new {@link Flux} behaving like the fastest of its sources\n+\t */\n+\t@SafeVarargs\n+\tpublic static <I> Flux<I> firstValues(Publisher<? extends I>... sources) {\n+\t\treturn onAssembly(new FluxFirstValues<>(sources));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzA5MzUwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MzoyMVrOHOeSew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MzoyMVrOHOeSew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzODM2Mw==", "bodyText": "same as in flux, do some amount of macro-fusion", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484938363", "createdAt": "2020-09-08T13:53:21Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -355,6 +355,15 @@\n \t\treturn onAssembly(new MonoFirst<>(monos));\n \t}\n \n+\t@SafeVarargs\n+\tpublic static <T> Mono<T> firstValue(Mono<? extends T>... monos) {\n+\t\treturn onAssembly(new MonoFirstValue<>(monos));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzA5NDMzOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MzozM1rOHOeTAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MzozM1rOHOeTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzODQ5Ng==", "bodyText": "same as in Flux, remove the instance method", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484938496", "createdAt": "2020-09-08T13:53:33Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -3082,6 +3091,17 @@ public T block(Duration timeout) {\n \t\treturn first(this, other);\n \t}\n \n+\tpublic final Mono<T> orValue(Mono<? extends T> other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzA5NjYwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1NDowMlrOHOeUbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1NDowMlrOHOeUbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzODg2MA==", "bodyText": "formatting unrelated change", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r484938860", "createdAt": "2020-09-08T13:54:02Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -3259,8 +3279,7 @@ public T block(Duration timeout) {\n \t * @see Flux#onErrorResume\n \t */\n \tpublic final Mono<T> onErrorResume(Function<? super Throwable, ? extends Mono<? extends\n-\t\t\tT>> fallback) {\n-\t\treturn onAssembly(new MonoOnErrorResume<>(this, fallback));\n+\t\t\tT>> fallback) {\t\treturn onAssembly(new MonoOnErrorResume<>(this, fallback));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "963ecc147e7a3e112d8474d373a3746011694253"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mjg4MDg2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoxMToyNlrOHP7h0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjoxMToyNlrOHP7h0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ2NjAwMA==", "bodyText": "this sounds really weird to me (\"valued\" as an adjective, not verb)\nWhat about race/fastest/other suggested names from the issue?", "url": "https://github.com/reactor/reactor-core/pull/2363#discussion_r486466000", "createdAt": "2020-09-10T16:11:26Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -942,7 +941,66 @@\n \t * @return a new {@link Flux} behaving like the fastest of its sources\n \t */\n \tpublic static <I> Flux<I> first(Iterable<? extends Publisher<? extends I>> sources) {\n-\t\treturn onAssembly(new FluxFirstEmitting<>(sources));\n+\t\treturn onAssembly(new FluxFirstSignalling<>(sources));\n+\t}\n+\n+\t/**\n+\t * Pick the first {@link Publisher} to emit any value and replay all values\n+\t * from that {@link Publisher}, effectively behaving like the source that first\n+\t * emits an {@link Subscriber#onNext(Object) onNext}.\n+\t *\n+\t * <p>\n+\t * // TODO replace the img\n+\t * <p>\n+\t * Valued sources always \"win\" over an empty source (one that only emits onComplete)\n+\t * or a failing source (one that only emits onError).\n+\t * Note that like in {@link #first(Iterable)}, an infinite source can be problematic\n+\t * if no other source emits onNext.\n+\t *\n+\t * @param sources An {@link Iterable} of the competing source publishers\n+\t * @param <I> The type of values in both source and output sequences\n+\t *\n+\t * @return a new {@link Flux} behaving like the fastest of its sources\n+\t */\n+\tpublic static <I> Flux<I> firstValued(Iterable<? extends Publisher<? extends I>> sources) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56d86f5312f1c8fef003e304dc56a9875df32a8"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 956, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}