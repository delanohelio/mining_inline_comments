{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNDQ4NTQ0", "number": 2466, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToyNjowMFrOEztgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToyNjowMFrOEztgmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjU4NDU4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/QueueSubscriptionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToyNjowMFrOHrHE0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToyNjowMFrOHrHE0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk2NjczNw==", "bodyText": "Missing a CR. Will fix and force push a rebased version", "url": "https://github.com/reactor/reactor-core/pull/2466#discussion_r514966737", "createdAt": "2020-10-30T09:26:00Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/QueueSubscriptionTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core;\n+\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import reactor.core.publisher.Operators;\n+import reactor.test.AssertionsUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatExceptionOfType;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+class QueueSubscriptionTest {\n+\n+\t@Test\n+\tvoid assertJShouldProperlyFormatQueueSubscription() {\n+\t\t//on purpose, doesn't set any particular representation for QueueSubscriptions\n+\t\tFuseable.QueueSubscription<?> queueSubscription = new Fuseable.QueueSubscription<Object>() {\n+\t\t\t@Override\n+\t\t\tpublic int requestFusion(int requestedMode) {\n+\t\t\t\treturn 0;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic Object poll() {\n+\t\t\t\treturn null;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic int size() {\n+\t\t\t\treturn 0;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic boolean isEmpty() {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void clear() {\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void request(long n) {\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void cancel() {\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic String toString() {\n+\t\t\t\treturn \"ThisIsNotAQueue\";\n+\t\t\t}\n+\t\t};\n+\n+\t\tassertThatExceptionOfType(AssertionError.class)\n+\t\t\t\t.isThrownBy(() -> {\n+\t\t\t\t\tassertThat(queueSubscription).isNull();\n+\t\t\t\t})\n+\t\t.withMessage(\"\\n\" + \"Expecting:\\n\" + \" <ThisIsNotAQueue>\\n\" + \"to be equal to:\\n\" + \" <null>\\n\" + \"but was not.\");\n+\t}\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0cf0fb6d6da6f6401262f7f81c0e2955162ff9b"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 824, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}