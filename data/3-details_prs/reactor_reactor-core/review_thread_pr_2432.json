{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNTg5NTgw", "number": 2432, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoyMDo1NVrOEsEbMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoyMDo1NVrOEsEbMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NjQ1Mjk4OnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/processors.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoyMDo1NVrOHfL0Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxNDoyMDo1NVrOHfL0Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjQ2MTUxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             users have until 3.5 to surface situations where that isn't the case, while falling back to using the deprecated APIs\n          \n          \n            \n             Users have time until 3.5 to surface situations where that isn't the case, while falling back to using the deprecated APIs", "url": "https://github.com/reactor/reactor-core/pull/2432#discussion_r502461519", "createdAt": "2020-10-09T14:20:55Z", "author": {"login": "bsideup"}, "path": "docs/asciidoc/processors.adoc", "diffHunk": "@@ -15,12 +15,13 @@ Sinks are usually a better alternative.\n In Reactor a sink is a class that allows safe manual triggering of signals. It can either\n be associated to a subscription (from inside an operator) or completely standalone.\n \n-Since `3.4.0`, an effort has been started to hide concrete processor implementations and\n-advertise the standalone sink pattern first and foremost:\n+Since `3.4.0`, sinks become the first class citizen and `Processor` are being phased out entirely:\n \n- - concrete processor implementations are deprecated and slated for removal in 3.5.0\n+ - both abstract and concrete `FluxProcessor` and `MonoProcessor` are deprecated and slated for removal in 3.5.0\n  - sinks which are not produced by an operator are constructed through factory methods in the `Sinks` class.\n- - processors can still be obtained through the `FluxProcessor.fromSink` and `MonoProcessor.fromSink` factories\n+ - we expect all processor usages to be replaceable with either an existing operator or a new sink from `Sinks`.\n+ users have until 3.5 to surface situations where that isn't the case, while falling back to using the deprecated APIs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54562ac4362aeb897a2c7c3e17ff1daec34b8ac9"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 804, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}