{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NTkyMDc4", "number": 2216, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMTo1N1rOEICfdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMTo1N1rOEICfdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODY0ODg3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNjoxMTo1N1rOGnwkGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxMTo1MjozM1rOGoO0Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzMyMA==", "bodyText": "@ericbottard  @simonbasle\nisn't it better to use Flux.error(Supplier) version?\nas it always creates Exception which captures stacktrace ?", "url": "https://github.com/reactor/reactor-core/pull/2216#discussion_r444343320", "createdAt": "2020-06-23T16:11:57Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -3416,23 +3417,16 @@ public T block(Duration timeout) {\n \t * as long as the companion {@link Publisher} produces an onNext signal and the maximum number of repeats isn't exceeded.\n \t */\n \tpublic final Mono<T> repeatWhenEmpty(int maxRepeat, Function<Flux<Long>, ? extends Publisher<?>> repeatFactory) {\n-\t\treturn Mono.defer(() -> {\n-\t\t\tFlux<Long> iterations;\n-\n-\t\t\tif(maxRepeat == Integer.MAX_VALUE) {\n-\t\t\t\titerations = Flux.fromStream(LongStream.range(0, Long.MAX_VALUE).boxed());\n+\t\treturn Mono.defer(() -> this.repeatWhen(o -> {\n+\t\t\tif (maxRepeat == Integer.MAX_VALUE) {\n+\t\t\t\treturn repeatFactory.apply(o.index().map(Tuple2::getT1));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\titerations = Flux\n-\t\t\t\t\t.range(0, maxRepeat)\n-\t\t\t\t\t.map(Integer::longValue)\n-\t\t\t\t\t.concatWith(Flux.error(new IllegalStateException(\"Exceeded maximum number of repeats\"), true));\n+\t\t\t\treturn repeatFactory.apply(o.index().map(Tuple2::getT1)\n+\t\t\t\t\t\t.take(maxRepeat)\n+\t\t\t\t\t\t.concatWith(Flux.error(new IllegalStateException(\"Exceeded maximum number of repeats\"), true)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a5f5b920aec6a55b7887e252feb5aa112e4392"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDcxNjIxMw==", "bodyText": "this could be an improvement to the existing code yeah, nothing to do with the bug addressed by this PR though. do you want to submit a PR @robotmrv ?", "url": "https://github.com/reactor/reactor-core/pull/2216#discussion_r444716213", "createdAt": "2020-06-24T08:03:34Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -3416,23 +3417,16 @@ public T block(Duration timeout) {\n \t * as long as the companion {@link Publisher} produces an onNext signal and the maximum number of repeats isn't exceeded.\n \t */\n \tpublic final Mono<T> repeatWhenEmpty(int maxRepeat, Function<Flux<Long>, ? extends Publisher<?>> repeatFactory) {\n-\t\treturn Mono.defer(() -> {\n-\t\t\tFlux<Long> iterations;\n-\n-\t\t\tif(maxRepeat == Integer.MAX_VALUE) {\n-\t\t\t\titerations = Flux.fromStream(LongStream.range(0, Long.MAX_VALUE).boxed());\n+\t\treturn Mono.defer(() -> this.repeatWhen(o -> {\n+\t\t\tif (maxRepeat == Integer.MAX_VALUE) {\n+\t\t\t\treturn repeatFactory.apply(o.index().map(Tuple2::getT1));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\titerations = Flux\n-\t\t\t\t\t.range(0, maxRepeat)\n-\t\t\t\t\t.map(Integer::longValue)\n-\t\t\t\t\t.concatWith(Flux.error(new IllegalStateException(\"Exceeded maximum number of repeats\"), true));\n+\t\t\t\treturn repeatFactory.apply(o.index().map(Tuple2::getT1)\n+\t\t\t\t\t\t.take(maxRepeat)\n+\t\t\t\t\t\t.concatWith(Flux.error(new IllegalStateException(\"Exceeded maximum number of repeats\"), true)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzMyMA=="}, "originalCommit": {"oid": "f6a5f5b920aec6a55b7887e252feb5aa112e4392"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDgzODkzMA==", "bodyText": "@simonbasle\ncreated PR #2221", "url": "https://github.com/reactor/reactor-core/pull/2216#discussion_r444838930", "createdAt": "2020-06-24T11:52:33Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Mono.java", "diffHunk": "@@ -3416,23 +3417,16 @@ public T block(Duration timeout) {\n \t * as long as the companion {@link Publisher} produces an onNext signal and the maximum number of repeats isn't exceeded.\n \t */\n \tpublic final Mono<T> repeatWhenEmpty(int maxRepeat, Function<Flux<Long>, ? extends Publisher<?>> repeatFactory) {\n-\t\treturn Mono.defer(() -> {\n-\t\t\tFlux<Long> iterations;\n-\n-\t\t\tif(maxRepeat == Integer.MAX_VALUE) {\n-\t\t\t\titerations = Flux.fromStream(LongStream.range(0, Long.MAX_VALUE).boxed());\n+\t\treturn Mono.defer(() -> this.repeatWhen(o -> {\n+\t\t\tif (maxRepeat == Integer.MAX_VALUE) {\n+\t\t\t\treturn repeatFactory.apply(o.index().map(Tuple2::getT1));\n \t\t\t}\n \t\t\telse {\n-\t\t\t\titerations = Flux\n-\t\t\t\t\t.range(0, maxRepeat)\n-\t\t\t\t\t.map(Integer::longValue)\n-\t\t\t\t\t.concatWith(Flux.error(new IllegalStateException(\"Exceeded maximum number of repeats\"), true));\n+\t\t\t\treturn repeatFactory.apply(o.index().map(Tuple2::getT1)\n+\t\t\t\t\t\t.take(maxRepeat)\n+\t\t\t\t\t\t.concatWith(Flux.error(new IllegalStateException(\"Exceeded maximum number of repeats\"), true)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM0MzMyMA=="}, "originalCommit": {"oid": "f6a5f5b920aec6a55b7887e252feb5aa112e4392"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 878, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}