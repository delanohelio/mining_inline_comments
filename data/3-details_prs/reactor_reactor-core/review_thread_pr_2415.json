{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NDMzMjk1", "number": 2415, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoyNDo1NFrOEquj4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMTo1OFrOEquxwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjM4NDk2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoyNDo1NFrOHdGPcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDo0NDo1OVrOHd2_5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3MzAxMA==", "bodyText": "isn't it a behaviour change of the test?", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500273010", "createdAt": "2020-10-06T13:24:54Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "diffHunk": "@@ -906,7 +907,7 @@ public void tryEmitNextWithNoSubscriberFailsOnlyIfNoCapacity() {\n \n \t\tStepVerifier.create(emitterProcessor)\n \t\t            .expectNext(1)\n-\t\t            .then(emitterProcessor::emitComplete)\n+\t\t            .then(emitterProcessor::tryEmitComplete)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d28c1178069b96553f5b0eb814006bee640352f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg4MDEwMw==", "bodyText": "not really, since emitComplete doesn't do anything in particular", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500880103", "createdAt": "2020-10-07T09:46:06Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "diffHunk": "@@ -906,7 +907,7 @@ public void tryEmitNextWithNoSubscriberFailsOnlyIfNoCapacity() {\n \n \t\tStepVerifier.create(emitterProcessor)\n \t\t            .expectNext(1)\n-\t\t            .then(emitterProcessor::emitComplete)\n+\t\t            .then(emitterProcessor::tryEmitComplete)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3MzAxMA=="}, "originalCommit": {"oid": "8d28c1178069b96553f5b0eb814006bee640352f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA3MTg0Nw==", "bodyText": "changed in latest commit", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r501071847", "createdAt": "2020-10-07T14:44:59Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/EmitterProcessorTest.java", "diffHunk": "@@ -906,7 +907,7 @@ public void tryEmitNextWithNoSubscriberFailsOnlyIfNoCapacity() {\n \n \t\tStepVerifier.create(emitterProcessor)\n \t\t            .expectNext(1)\n-\t\t            .then(emitterProcessor::emitComplete)\n+\t\t            .then(emitterProcessor::tryEmitComplete)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3MzAxMA=="}, "originalCommit": {"oid": "8d28c1178069b96553f5b0eb814006bee640352f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQwNzIwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoyOToyOVrOHdGdIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoyOToyOVrOHdGdIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3NjUxMw==", "bodyText": "behaviour change?", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500276513", "createdAt": "2020-10-06T13:29:29Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "diffHunk": "@@ -721,25 +722,25 @@ public void normalWhileDoesntMatch() {\n \t\tStepVerifier.create(windowWhile.flatMap(Flux::materialize))\n \t\t            .expectSubscription()\n \t\t            .expectNoEvent(Duration.ofMillis(10))\n-\t\t            .then(() -> sp1.emitNext(1))\n+\t\t            .then(() -> sp1.emitNext(1, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(2))\n+\t\t            .then(() -> sp1.emitNext(2, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(3))\n+\t\t            .then(() -> sp1.emitNext(3, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(4))\n+\t\t            .then(() -> sp1.emitNext(4, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n \t\t            .expectNoEvent(Duration.ofMillis(10))\n-\t\t            .then(() -> sp1.emitNext(1))\n+\t\t            .then(() -> sp1.emitNext(1, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(2))\n+\t\t            .then(() -> sp1.emitNext(2, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(3))\n+\t\t            .then(() -> sp1.emitNext(3, FAIL_FAST))\n \t\t            .expectNext(Signal.complete())\n-\t\t            .then(() -> sp1.emitNext(4))\n+\t\t            .then(() -> sp1.emitNext(4, FAIL_FAST))\n \t\t            .expectNext(Signal.complete()) //closing window opened by 3\n \t\t            .expectNoEvent(Duration.ofMillis(10))\n-\t\t            .then(sp1::emitComplete)\n+\t\t            .then(sp1::tryEmitComplete)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d28c1178069b96553f5b0eb814006bee640352f"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQwODU4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoyOTo0N1rOHdGd_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzoyOTo0N1rOHdGd_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3NjczNA==", "bodyText": "behaviour change?", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500276734", "createdAt": "2020-10-06T13:29:47Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxWindowPredicateTest.java", "diffHunk": "@@ -683,28 +684,28 @@ public void normalWhileDoesntInitiallyMatch() {\n \t\tStepVerifier.create(windowWhile.flatMap(Flux::materialize))\n \t\t\t\t\t.expectSubscription()\n \t\t\t\t\t.expectNoEvent(Duration.ofMillis(10))\n-\t\t\t\t\t.then(() -> sp1.emitNext(1)) //closes initial, open 2nd\n+\t\t\t\t\t.then(() -> sp1.emitNext(1, FAIL_FAST)) //closes initial, open 2nd\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(2)) //closes second, open 3rd\n+\t\t\t\t\t.then(() -> sp1.emitNext(2, FAIL_FAST)) //closes second, open 3rd\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(3)) //emits 3\n+\t\t\t\t\t.then(() -> sp1.emitNext(3, FAIL_FAST)) //emits 3\n \t\t\t\t\t.expectNext(Signal.next(3))\n \t\t\t\t\t.expectNoEvent(Duration.ofMillis(10))\n-\t\t\t\t\t.then(() -> sp1.emitNext(4)) //closes 3rd, open 4th\n+\t\t\t\t\t.then(() -> sp1.emitNext(4, FAIL_FAST)) //closes 3rd, open 4th\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(5)) //closes 4th, open 5th\n+\t\t\t\t\t.then(() -> sp1.emitNext(5, FAIL_FAST)) //closes 4th, open 5th\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(6)) //emits 6\n+\t\t\t\t\t.then(() -> sp1.emitNext(6, FAIL_FAST)) //emits 6\n \t\t\t\t\t.expectNext(Signal.next(6))\n \t\t\t\t\t.expectNoEvent(Duration.ofMillis(10))\n-\t\t\t\t\t.then(() -> sp1.emitNext(7)) //closes 5th, open 6th\n+\t\t\t\t\t.then(() -> sp1.emitNext(7, FAIL_FAST)) //closes 5th, open 6th\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(8)) //closes 6th, open 7th\n+\t\t\t\t\t.then(() -> sp1.emitNext(8, FAIL_FAST)) //closes 6th, open 7th\n \t\t\t\t\t.expectNext(Signal.complete())\n-\t\t\t\t\t.then(() -> sp1.emitNext(9)) //emits 9\n+\t\t\t\t\t.then(() -> sp1.emitNext(9, FAIL_FAST)) //emits 9\n \t\t\t\t\t.expectNext(Signal.next(9))\n \t\t\t\t\t.expectNoEvent(Duration.ofMillis(10))\n-\t\t\t\t\t.then(sp1::emitComplete) // completion triggers completion of the last window (7th)\n+\t\t\t\t\t.then(sp1::tryEmitComplete) // completion triggers completion of the last window (7th)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d28c1178069b96553f5b0eb814006bee640352f"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQxNTQ2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/SerializedManySinkTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMTowNVrOHdGiNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMTowNVrOHdGiNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3NzgxNQ==", "bodyText": "behaviour change?", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500277815", "createdAt": "2020-10-06T13:31:05Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SerializedManySinkTest.java", "diffHunk": "@@ -52,7 +52,7 @@ public void shouldNotThrowFromTryEmitNext() {\n \t\t\t\t\t            .as(\"emission\")\n \t\t\t\t\t            .isEqualTo(Emission.FAIL_OVERFLOW);\n \t\t            })\n-\t\t            .then(sink::emitComplete)\n+\t\t            .then(sink::tryEmitComplete)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d28c1178069b96553f5b0eb814006bee640352f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQxODU0OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMTozOFrOHdGkNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMTozOFrOHdGkNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODMyNw==", "bodyText": "ditto", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500278327", "createdAt": "2020-10-06T13:31:38Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -284,7 +285,7 @@ public void shouldNotThrowFromTryEmitNext() {\n \t\t\t\t\t            .as(\"emission\")\n \t\t\t\t\t            .isEqualTo(Sinks.Emission.FAIL_OVERFLOW);\n \t\t            })\n-\t\t            .then(processor::emitComplete)\n+\t\t            .then(processor::tryEmitComplete)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d28c1178069b96553f5b0eb814006bee640352f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQxOTUwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMTo0OFrOHdGkwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMTo0OFrOHdGkwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODQ2NA==", "bodyText": "ditto", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500278464", "createdAt": "2020-10-06T13:31:48Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -307,7 +308,7 @@ public void tryEmitNextWithNoSubscriberAndBoundedQueueFailsZeroSubscriber() {\n \n \t\tStepVerifier.create(unicastProcessor)\n \t\t            .expectNext(1)\n-\t\t            .then(unicastProcessor::emitComplete)\n+\t\t            .then(unicastProcessor::tryEmitComplete)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d28c1178069b96553f5b0eb814006bee640352f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMjQyMDQ4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMTo1OFrOHdGlTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMzozMTo1OFrOHdGlTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI3ODYwNA==", "bodyText": "ditto", "url": "https://github.com/reactor/reactor-core/pull/2415#discussion_r500278604", "createdAt": "2020-10-06T13:31:58Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -333,13 +334,13 @@ public void emitNextWithNoSubscriberAndBoundedQueueIgnoresValueAndKeepsSinkOpen(\n \t\t//fill the buffer\n \t\tunicastProcessor.tryEmitNext(1);\n \t\t//this \"overflows\" but keeps the sink open. since there's no subscriber, there's no Context so no real discarding\n-\t\tunicastProcessor.emitNext(2);\n+\t\tunicastProcessor.emitNext(2, FAIL_FAST);\n \n \t\t//let's verify we get the buffer's content\n \t\tStepVerifier.create(unicastProcessor)\n \t\t            .expectNext(1) //from the buffer\n \t\t            .expectNoEvent(Duration.ofMillis(500))\n-\t\t            .then(unicastProcessor::emitComplete)\n+\t\t            .then(unicastProcessor::tryEmitComplete)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d28c1178069b96553f5b0eb814006bee640352f"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 790, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}