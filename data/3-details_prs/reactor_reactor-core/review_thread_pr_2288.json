{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MjM4MDA3", "number": 2288, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1OTo1NVrOER0DYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowMzo1OVrOER0Iaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE0MDgxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1OTo1NVrOG2uacQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMjo1OTo1NVrOG2uacQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNjcyMQ==", "bodyText": "the reactor-tools mention is outdated and should be removed", "url": "https://github.com/reactor/reactor-core/pull/2288#discussion_r460036721", "createdAt": "2020-07-24T12:59:55Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2019-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import reactor.core.CorePublisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.FluxContextStart.ContextStartSubscriber;\n+import reactor.util.context.Context;\n+\n+/**\n+ * This {@link Function} wrapper is used by reactor-tools to implement the context loss detection.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9895cec2e37566e34a2b0b1bd397571223689e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE0ODk2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowMjoxOVrOG2ufKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowNTozM1rOG2ulUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzkyOQ==", "bodyText": "NB: while reviewing the implementation and trying to apply a similar pattern for the BiFunction, I found the andThen a bit harder to follow vs explicit composition by splitting in multiple steps with intermediate variables (that would probably be optimized away by the compiler anyway?)", "url": "https://github.com/reactor/reactor-core/pull/2288#discussion_r460037929", "createdAt": "2020-07-24T13:02:19Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2019-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import reactor.core.CorePublisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.FluxContextStart.ContextStartSubscriber;\n+import reactor.util.context.Context;\n+\n+/**\n+ * This {@link Function} wrapper is used by reactor-tools to implement the context loss detection.\n+ *\n+ */\n+class ContextTrackingFunctionWrapper<T, V> implements Function<CorePublisher<T>, CorePublisher<V>> {\n+\n+\tstatic final String CONTEXT_MARKER_PREFIX = \"reactor.core.context.marker.\";\n+\n+\tfinal Function<? super Publisher<T>, ? extends Publisher<V>> transformer;\n+\n+\tContextTrackingFunctionWrapper(Function<? super Publisher<T>, ? extends Publisher<V>> transformer) {\n+\t\tthis.transformer = transformer;\n+\t}\n+\n+\t@Override\n+\tpublic CorePublisher<V> apply(CorePublisher<T> self) {\n+\t\tString key = CONTEXT_MARKER_PREFIX + System.identityHashCode(self);\n+\n+\t\tPublisher<V> newSource = Operators.<T, T>liftPublisher((p, actual) -> {\n+\t\t\tContext ctx = actual.currentContext();\n+\n+\t\t\tif (!ctx.hasKey(key)) {\n+\t\t\t\tthrow new IllegalStateException(\"Context loss after applying \" + transformer);\n+\t\t\t}\n+\n+\t\t\tContext newContext = ctx.delete(key);\n+\t\t\treturn new ContextStartSubscriber<>(actual, newContext);\n+\t\t}).andThen(transformer).apply(self);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c9895cec2e37566e34a2b0b1bd397571223689e"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzOTUwNA==", "bodyText": "so what do you think about splitting into more explicit steps?", "url": "https://github.com/reactor/reactor-core/pull/2288#discussion_r460039504", "createdAt": "2020-07-24T13:05:33Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright (c) 2019-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import reactor.core.CorePublisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.FluxContextStart.ContextStartSubscriber;\n+import reactor.util.context.Context;\n+\n+/**\n+ * This {@link Function} wrapper is used by reactor-tools to implement the context loss detection.\n+ *\n+ */\n+class ContextTrackingFunctionWrapper<T, V> implements Function<CorePublisher<T>, CorePublisher<V>> {\n+\n+\tstatic final String CONTEXT_MARKER_PREFIX = \"reactor.core.context.marker.\";\n+\n+\tfinal Function<? super Publisher<T>, ? extends Publisher<V>> transformer;\n+\n+\tContextTrackingFunctionWrapper(Function<? super Publisher<T>, ? extends Publisher<V>> transformer) {\n+\t\tthis.transformer = transformer;\n+\t}\n+\n+\t@Override\n+\tpublic CorePublisher<V> apply(CorePublisher<T> self) {\n+\t\tString key = CONTEXT_MARKER_PREFIX + System.identityHashCode(self);\n+\n+\t\tPublisher<V> newSource = Operators.<T, T>liftPublisher((p, actual) -> {\n+\t\t\tContext ctx = actual.currentContext();\n+\n+\t\t\tif (!ctx.hasKey(key)) {\n+\t\t\t\tthrow new IllegalStateException(\"Context loss after applying \" + transformer);\n+\t\t\t}\n+\n+\t\t\tContext newContext = ctx.delete(key);\n+\t\t\treturn new ContextStartSubscriber<>(actual, newContext);\n+\t\t}).andThen(transformer).apply(self);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzkyOQ=="}, "originalCommit": {"oid": "5c9895cec2e37566e34a2b0b1bd397571223689e"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE1MzcxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowMzo1OVrOG2uiNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowMzo1OVrOG2uiNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzODcwOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/reactor/reactor-core/pull/2288#discussion_r460038708", "createdAt": "2020-07-24T13:03:59Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/ContextTrackingFunctionWrapper.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) 2019-Present Pivotal Software Inc, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import reactor.core.CorePublisher;\n+import reactor.core.CoreSubscriber;\n+import reactor.core.publisher.FluxContextStart.ContextStartSubscriber;\n+import reactor.util.context.Context;\n+\n+/**\n+ * This {@link Function} wrapper is used by reactor-tools to implement the context loss detection.\n+ *\n+ */\n+class ContextTrackingFunctionWrapper<T, V> implements Function<CorePublisher<T>, CorePublisher<V>> {\n+\n+\tstatic final String CONTEXT_MARKER_PREFIX = \"reactor.core.context.marker.\";\n+\n+\tfinal Function<? super Publisher<T>, ? extends Publisher<V>> transformer;\n+\n+\tfinal String marker;\n+\n+\tContextTrackingFunctionWrapper(Function<? super Publisher<T>, ? extends Publisher<V>> transformer) {\n+\t\tthis(transformer, transformer.toString());\n+\t}\n+\n+\tContextTrackingFunctionWrapper(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2bf494e4e747e73bcb008348d9093989bd7cde1"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 906, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}