{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODU5MTMw", "number": 2029, "title": "fix #1937 Account for requests made to upstream in FluxBufferPredicate", "bodyText": "This commit adds additional request accounting to FluxBufferPredicate,\nallowing it to keep track of when there is remaining upstream request\nand when there is not. In turn, this allows the \"just add to buffer\"\ncase to perform an additional request(1) ONLY if necessary (to further\nfill the current buffer).\nsupersedes #2027 cc @UgiR @robotmrv", "createdAt": "2020-02-04T14:12:11Z", "url": "https://github.com/reactor/reactor-core/pull/2029", "merged": true, "mergeCommit": {"oid": "621f88d964496cf08e92db850e5abbad3780100b"}, "closed": true, "closedAt": "2020-02-17T19:12:40Z", "author": {"login": "simonbasle"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBEXlLgFqTM1MzEzMTc4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFQJrEgFqTM1OTg2NTUwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMTMxNzg4", "url": "https://github.com/reactor/reactor-core/pull/2029#pullrequestreview-353131788", "createdAt": "2020-02-04T16:45:23Z", "commit": {"oid": "931fac02054b9d605113e583951285a0cf8564b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0NToyM1rOFlbXcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNjo0NToyM1rOFlbXcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc5MDAwMg==", "bodyText": "two times requestedBuffers ?", "url": "https://github.com/reactor/reactor-core/pull/2029#discussion_r374790002", "createdAt": "2020-02-04T16:45:23Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxBufferPredicate.java", "diffHunk": "@@ -144,7 +151,8 @@ public void request(long n) {\n \t\t\t\t\t// here we request everything from the source. switching to\n \t\t\t\t\t// fastpath will avoid unnecessary request(1) during filling\n \t\t\t\t\tfastpath = true;\n-\t\t\t\t\trequested = Long.MAX_VALUE;\n+\t\t\t\t\trequestedBuffers = Long.MAX_VALUE;\n+\t\t\t\t\trequestedBuffers = Long.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "931fac02054b9d605113e583951285a0cf8564b6"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjEzMzI3", "url": "https://github.com/reactor/reactor-core/pull/2029#pullrequestreview-353213327", "createdAt": "2020-02-04T18:45:22Z", "commit": {"oid": "5fbb1670cd7538510c9c338c2a5784d2d121f1c2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODo0NToyM1rOFlfRWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxODo0NToyM1rOFlfRWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg1Mzk3OA==", "bodyText": "should not it be added by Operators#addCap() ?", "url": "https://github.com/reactor/reactor-core/pull/2029#discussion_r374853978", "createdAt": "2020-02-04T18:45:23Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxBufferPredicate.java", "diffHunk": "@@ -156,11 +164,11 @@ public void request(long n) {\n \t\t\t\t\t// we'll continue requesting one by one)\n \t\t\t\t\tif (!DrainUtils.postCompleteRequest(n,\n \t\t\t\t\t\t\tactual,\n-\t\t\t\t\t\t\tthis,\n-\t\t\t\t\t\t\tREQUESTED,\n+\t\t\t\t\t\t\tthis, REQUESTED_BUFFERS,\n \t\t\t\t\t\t\tthis,\n \t\t\t\t\t\t\tthis)) {\n-\t\t\t\t\t\ts.request(1);\n+\t\t\t\t\t\tREQUESTED_FROM_SOURCE.addAndGet(this, n);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fbb1670cd7538510c9c338c2a5784d2d121f1c2"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MDAwOTgz", "url": "https://github.com/reactor/reactor-core/pull/2029#pullrequestreview-354000983", "createdAt": "2020-02-05T19:58:45Z", "commit": {"oid": "c799f2837ce2194677611201d7e35983c560ddb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTo1ODo0NVrOFmFSXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTo1ODo0NVrOFmFSXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ3NjgyOA==", "bodyText": "it will take a lot of time to go down to zero, but anyway why to decrement for a fast path?", "url": "https://github.com/reactor/reactor-core/pull/2029#discussion_r375476828", "createdAt": "2020-02-05T19:58:45Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxBufferPredicate.java", "diffHunk": "@@ -205,25 +213,31 @@ public boolean tryOnNext(T t) {\n \t\t\t\treturn true;\n \t\t\t}\n \n-\t\t\tboolean requestMore;\n \t\t\tif (mode == Mode.UNTIL && match) {\n \t\t\t\tb.add(t);\n-\t\t\t\trequestMore = onNextNewBuffer();\n+\t\t\t\tonNextNewBuffer();\n \t\t\t}\n \t\t\telse if (mode == Mode.UNTIL_CUT_BEFORE && match) {\n-\t\t\t\trequestMore = onNextNewBuffer();\n+\t\t\t\tonNextNewBuffer();\n \t\t\t\tb = buffer;\n \t\t\t\tb.add(t);\n \t\t\t}\n \t\t\telse if (mode == Mode.WHILE && !match) {\n-\t\t\t\trequestMore = onNextNewBuffer();\n+\t\t\t\tonNextNewBuffer();\n \t\t\t}\n \t\t\telse {\n \t\t\t\tb.add(t);\n-\t\t\t\treturn !(!fastpath && requested != 0);\n \t\t\t}\n \n-\t\t\treturn !requestMore;\n+\t\t\tboolean isNotExpectingFromSource = REQUESTED_FROM_SOURCE.decrementAndGet(this) == 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c799f2837ce2194677611201d7e35983c560ddb8"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ee7910e14b2a5aa80562320593eff67ba15ecfb", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/5ee7910e14b2a5aa80562320593eff67ba15ecfb", "committedDate": "2020-02-07T09:21:21Z", "message": "fix #1937 Account for requests made to upstream in FluxBufferPredicate\n\nThis commit adds additional request accounting to FluxBufferPredicate,\nallowing it to keep track of when there is remaining upstream request\nand when there is not. In turn, this allows the \"just add to buffer\"\ncase to perform an additional `request(1)` ONLY if necessary (to further\nfill the current buffer)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b01ae17c8e28d6fe7ab87eec194d3c0728ada6fb", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/b01ae17c8e28d6fe7ab87eec194d3c0728ada6fb", "committedDate": "2020-02-06T16:39:29Z", "message": "Optimize fast path a bit: avoid useless atomic decrement"}, "afterCommit": {"oid": "5ee7910e14b2a5aa80562320593eff67ba15ecfb", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/5ee7910e14b2a5aa80562320593eff67ba15ecfb", "committedDate": "2020-02-07T09:21:21Z", "message": "fix #1937 Account for requests made to upstream in FluxBufferPredicate\n\nThis commit adds additional request accounting to FluxBufferPredicate,\nallowing it to keep track of when there is remaining upstream request\nand when there is not. In turn, this allows the \"just add to buffer\"\ncase to perform an additional `request(1)` ONLY if necessary (to further\nfill the current buffer)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDM5MjYy", "url": "https://github.com/reactor/reactor-core/pull/2029#pullrequestreview-355039262", "createdAt": "2020-02-07T09:48:28Z", "commit": {"oid": "5ee7910e14b2a5aa80562320593eff67ba15ecfb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo0ODoyOFrOFm3mrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwOTo0ODoyOFrOFm3mrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMwMTIzMQ==", "bodyText": "@simonbasle I have one question about that you said before\n#2027 (comment)\n\na Subscriber is responsible for ensuring the upstream requests it makes are not done in parallel (rule 2.7) so that line MUST NOT be executed at the same time\n\nas far as I understand s.request() could be invoked from BufferPredicateSubscriber#request() and from BufferPredicateSubscriber#onNext() and they could be invoked by different Threads.\nHow does rule 2.7 is satisfied here or it is not applicable here?", "url": "https://github.com/reactor/reactor-core/pull/2029#discussion_r376301231", "createdAt": "2020-02-07T09:48:28Z", "author": {"login": "robotmrv"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxBufferPredicate.java", "diffHunk": "@@ -156,11 +164,11 @@ public void request(long n) {\n \t\t\t\t\t// we'll continue requesting one by one)\n \t\t\t\t\tif (!DrainUtils.postCompleteRequest(n,\n \t\t\t\t\t\t\tactual,\n-\t\t\t\t\t\t\tthis,\n-\t\t\t\t\t\t\tREQUESTED,\n+\t\t\t\t\t\t\tthis, REQUESTED_BUFFERS,\n \t\t\t\t\t\t\tthis,\n \t\t\t\t\t\t\tthis)) {\n-\t\t\t\t\t\ts.request(1);\n+\t\t\t\t\t\tOperators.addCap(REQUESTED_FROM_SOURCE, this, n);\n+\t\t\t\t\t\ts.request(n);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ee7910e14b2a5aa80562320593eff67ba15ecfb"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd9ed6a4b1e00a2a66422bb423bc75e005271948", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/cd9ed6a4b1e00a2a66422bb423bc75e005271948", "committedDate": "2020-02-07T14:27:02Z", "message": "Add tests to ensure no overflow when request and onNext race"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODY1NTA4", "url": "https://github.com/reactor/reactor-core/pull/2029#pullrequestreview-359865508", "createdAt": "2020-02-17T16:44:45Z", "commit": {"oid": "cd9ed6a4b1e00a2a66422bb423bc75e005271948"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2900, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}