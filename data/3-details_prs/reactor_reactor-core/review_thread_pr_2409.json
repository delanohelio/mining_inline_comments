{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTUzOTE4", "number": 2409, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyNDoyMFrOEopQmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo1MDo1N1rOEo9KKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU0NDg4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyNDoyMFrOHZ2vEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyNDoyMFrOHZ2vEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3MzIzMw==", "bodyText": "the license header is missing (was also missing in VoidProcessor.java... oops!)", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496873233", "createdAt": "2020-09-29T16:24:20Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "diffHunk": "@@ -1,28 +1,24 @@\n package reactor.core.publisher;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "108957158cb3d5cf16cf177a26ec8e2b38969ddc"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU0Njk5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyNDozOVrOHZ2wSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyNDozOVrOHZ2wSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3MzU0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.\n          \n          \n            \n             * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496873546", "createdAt": "2020-09-29T16:24:39Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "108957158cb3d5cf16cf177a26ec8e2b38969ddc"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU2MDQ3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyNjozNFrOHZ24Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyNjozNFrOHZ24Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NTU1OA==", "bodyText": "love it! \ud83d\udcaf", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496875558", "createdAt": "2020-09-29T16:26:34Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "diffHunk": "@@ -1,28 +1,24 @@\n package reactor.core.publisher;\n \n-import java.time.Duration;\n import java.util.Objects;\n-import java.util.concurrent.CancellationException;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n import java.util.stream.Stream;\n \n import org.reactivestreams.Subscription;\n \n import reactor.core.CoreSubscriber;\n-import reactor.core.Exceptions;\n import reactor.core.Scannable;\n import reactor.core.publisher.Sinks.Emission;\n-import reactor.util.annotation.Nullable;\n import reactor.util.context.Context;\n \n-final class VoidProcessor<T> extends MonoProcessor<T> implements Sinks.One<T> {\n+final class SinkEmptyMulticast<T> extends Mono<T> implements Sinks.Empty<T>, ContextHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "108957158cb3d5cf16cf177a26ec8e2b38969ddc"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDU2ODgyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjoyODozMVrOHZ29hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjo0Mjo1N1rOHZ3jEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NjkzMw==", "bodyText": "does RUN_STYLE make any sense here, actually?", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496876933", "createdAt": "2020-09-29T16:28:31Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "diffHunk": "@@ -317,11 +177,20 @@ public void subscribe(final CoreSubscriber<? super T> actual) {\n \t\treturn Stream.of(subscribers);\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.TERMINATED) return subscribers == TERMINATED;\n+\t\tif (key == Attr.ERROR) return error;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "108957158cb3d5cf16cf177a26ec8e2b38969ddc"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4NjU0NQ==", "bodyText": "indeed, removed in latest commit", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r496886545", "createdAt": "2020-09-29T16:42:57Z", "author": {"login": "aneveu"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java", "diffHunk": "@@ -317,11 +177,20 @@ public void subscribe(final CoreSubscriber<? super T> actual) {\n \t\treturn Stream.of(subscribers);\n \t}\n \n+\t@Override\n+\tpublic Object scanUnsafe(Attr key) {\n+\t\tif (key == Attr.TERMINATED) return subscribers == TERMINATED;\n+\t\tif (key == Attr.ERROR) return error;\n+\t\tif (key == Attr.RUN_STYLE) return Attr.RunStyle.SYNC;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NjkzMw=="}, "originalCommit": {"oid": "108957158cb3d5cf16cf177a26ec8e2b38969ddc"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMzgwNTIwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwOTo1MDo1N1rOHaV7Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMjo1NTowM1rOHacI4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw==", "bodyText": "why not StepVerifier?", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497384243", "createdAt": "2020-09-30T09:50:57Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Scannable;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static reactor.core.Scannable.Attr.RUN_STYLE;\n+import static reactor.core.Scannable.Attr.RunStyle.SYNC;\n+\n+class SinkEmptyMulticastTest {\n+\n+\t@Test\n+\tvoid currentSubscriberCount() {\n+\t\tSinks.Empty<Integer> sink = new SinkEmptyMulticast<>();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isZero();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isOne();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isEqualTo(2);\n+\t}\n+\n+\t@Test\n+\tvoid currentSubscriberCountReflectsCancellation() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\t\tStepVerifier.create(mp)\n+\t\t\t\t.thenCancel()\n+\t\t\t\t.verify();\n+\n+\t\tassertThat(mp.currentSubscriberCount()).isEqualTo(0);\n+\t}\n+\n+\t@Test\n+\tvoid blockReturnsNullOnTryEmitEmpty() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\n+\t\tSchedulers.parallel().schedule(() -> mp.tryEmitEmpty(), 50L, TimeUnit.MILLISECONDS);\n+\t\tassertThat(mp.block(Duration.ofSeconds(1))).isNull();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c5abcc44cb132a749a6e76f324e7f2ec2eb608e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5Mjg3OA==", "bodyText": "this is testing that the behavior of block() is consistent, especially since the processor-specific implementation was removed in the commit.", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497392878", "createdAt": "2020-09-30T10:05:12Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Scannable;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static reactor.core.Scannable.Attr.RUN_STYLE;\n+import static reactor.core.Scannable.Attr.RunStyle.SYNC;\n+\n+class SinkEmptyMulticastTest {\n+\n+\t@Test\n+\tvoid currentSubscriberCount() {\n+\t\tSinks.Empty<Integer> sink = new SinkEmptyMulticast<>();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isZero();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isOne();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isEqualTo(2);\n+\t}\n+\n+\t@Test\n+\tvoid currentSubscriberCountReflectsCancellation() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\t\tStepVerifier.create(mp)\n+\t\t\t\t.thenCancel()\n+\t\t\t\t.verify();\n+\n+\t\tassertThat(mp.currentSubscriberCount()).isEqualTo(0);\n+\t}\n+\n+\t@Test\n+\tvoid blockReturnsNullOnTryEmitEmpty() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\n+\t\tSchedulers.parallel().schedule(() -> mp.tryEmitEmpty(), 50L, TimeUnit.MILLISECONDS);\n+\t\tassertThat(mp.block(Duration.ofSeconds(1))).isNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, "originalCommit": {"oid": "8c5abcc44cb132a749a6e76f324e7f2ec2eb608e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM5ODg0MQ==", "bodyText": "perhaps it should be a dedicated test then? Not a big deal but I was first confused to see block() used given that it is an empty processor that should not emit anything, and only then I noticed isNull(), so it is a bit counterintuitive when you read the test :)", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497398841", "createdAt": "2020-09-30T10:16:13Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Scannable;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static reactor.core.Scannable.Attr.RUN_STYLE;\n+import static reactor.core.Scannable.Attr.RunStyle.SYNC;\n+\n+class SinkEmptyMulticastTest {\n+\n+\t@Test\n+\tvoid currentSubscriberCount() {\n+\t\tSinks.Empty<Integer> sink = new SinkEmptyMulticast<>();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isZero();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isOne();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isEqualTo(2);\n+\t}\n+\n+\t@Test\n+\tvoid currentSubscriberCountReflectsCancellation() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\t\tStepVerifier.create(mp)\n+\t\t\t\t.thenCancel()\n+\t\t\t\t.verify();\n+\n+\t\tassertThat(mp.currentSubscriberCount()).isEqualTo(0);\n+\t}\n+\n+\t@Test\n+\tvoid blockReturnsNullOnTryEmitEmpty() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\n+\t\tSchedulers.parallel().schedule(() -> mp.tryEmitEmpty(), 50L, TimeUnit.MILLISECONDS);\n+\t\tassertThat(mp.block(Duration.ofSeconds(1))).isNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, "originalCommit": {"oid": "8c5abcc44cb132a749a6e76f324e7f2ec2eb608e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxMTkxMw==", "bodyText": "test is named blockReturnsNullOnTryEmitEmpty... \ud83d\ude15", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497411913", "createdAt": "2020-09-30T10:40:38Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Scannable;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static reactor.core.Scannable.Attr.RUN_STYLE;\n+import static reactor.core.Scannable.Attr.RunStyle.SYNC;\n+\n+class SinkEmptyMulticastTest {\n+\n+\t@Test\n+\tvoid currentSubscriberCount() {\n+\t\tSinks.Empty<Integer> sink = new SinkEmptyMulticast<>();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isZero();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isOne();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isEqualTo(2);\n+\t}\n+\n+\t@Test\n+\tvoid currentSubscriberCountReflectsCancellation() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\t\tStepVerifier.create(mp)\n+\t\t\t\t.thenCancel()\n+\t\t\t\t.verify();\n+\n+\t\tassertThat(mp.currentSubscriberCount()).isEqualTo(0);\n+\t}\n+\n+\t@Test\n+\tvoid blockReturnsNullOnTryEmitEmpty() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\n+\t\tSchedulers.parallel().schedule(() -> mp.tryEmitEmpty(), 50L, TimeUnit.MILLISECONDS);\n+\t\tassertThat(mp.block(Duration.ofSeconds(1))).isNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, "originalCommit": {"oid": "8c5abcc44cb132a749a6e76f324e7f2ec2eb608e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxNjI0Mw==", "bodyText": "ooops, sorry, I missed that! Although then we miss tests for \"normal\" subscribe on asMono() :)", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497416243", "createdAt": "2020-09-30T10:49:22Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Scannable;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static reactor.core.Scannable.Attr.RUN_STYLE;\n+import static reactor.core.Scannable.Attr.RunStyle.SYNC;\n+\n+class SinkEmptyMulticastTest {\n+\n+\t@Test\n+\tvoid currentSubscriberCount() {\n+\t\tSinks.Empty<Integer> sink = new SinkEmptyMulticast<>();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isZero();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isOne();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isEqualTo(2);\n+\t}\n+\n+\t@Test\n+\tvoid currentSubscriberCountReflectsCancellation() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\t\tStepVerifier.create(mp)\n+\t\t\t\t.thenCancel()\n+\t\t\t\t.verify();\n+\n+\t\tassertThat(mp.currentSubscriberCount()).isEqualTo(0);\n+\t}\n+\n+\t@Test\n+\tvoid blockReturnsNullOnTryEmitEmpty() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\n+\t\tSchedulers.parallel().schedule(() -> mp.tryEmitEmpty(), 50L, TimeUnit.MILLISECONDS);\n+\t\tassertThat(mp.block(Duration.ofSeconds(1))).isNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, "originalCommit": {"oid": "8c5abcc44cb132a749a6e76f324e7f2ec2eb608e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ1NDE2Nw==", "bodyText": "ah, yeah we tried to improve the test coverage but that fell through I guess", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497454167", "createdAt": "2020-09-30T12:02:59Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Scannable;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static reactor.core.Scannable.Attr.RUN_STYLE;\n+import static reactor.core.Scannable.Attr.RunStyle.SYNC;\n+\n+class SinkEmptyMulticastTest {\n+\n+\t@Test\n+\tvoid currentSubscriberCount() {\n+\t\tSinks.Empty<Integer> sink = new SinkEmptyMulticast<>();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isZero();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isOne();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isEqualTo(2);\n+\t}\n+\n+\t@Test\n+\tvoid currentSubscriberCountReflectsCancellation() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\t\tStepVerifier.create(mp)\n+\t\t\t\t.thenCancel()\n+\t\t\t\t.verify();\n+\n+\t\tassertThat(mp.currentSubscriberCount()).isEqualTo(0);\n+\t}\n+\n+\t@Test\n+\tvoid blockReturnsNullOnTryEmitEmpty() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\n+\t\tSchedulers.parallel().schedule(() -> mp.tryEmitEmpty(), 50L, TimeUnit.MILLISECONDS);\n+\t\tassertThat(mp.block(Duration.ofSeconds(1))).isNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, "originalCommit": {"oid": "8c5abcc44cb132a749a6e76f324e7f2ec2eb608e"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQ4NjA0OA==", "bodyText": "test added :)", "url": "https://github.com/reactor/reactor-core/pull/2409#discussion_r497486048", "createdAt": "2020-09-30T12:55:03Z", "author": {"login": "aneveu"}, "path": "reactor-core/src/test/java/reactor/core/publisher/SinkEmptyMulticastTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import java.time.Duration;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Subscriber;\n+\n+import reactor.core.CoreSubscriber;\n+import reactor.core.Scannable;\n+import reactor.core.scheduler.Schedulers;\n+import reactor.test.StepVerifier;\n+\n+import static org.assertj.core.api.Assertions.*;\n+import static reactor.core.Scannable.Attr.RUN_STYLE;\n+import static reactor.core.Scannable.Attr.RunStyle.SYNC;\n+\n+class SinkEmptyMulticastTest {\n+\n+\t@Test\n+\tvoid currentSubscriberCount() {\n+\t\tSinks.Empty<Integer> sink = new SinkEmptyMulticast<>();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isZero();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isOne();\n+\n+\t\tsink.asMono().subscribe();\n+\n+\t\tassertThat(sink.currentSubscriberCount()).isEqualTo(2);\n+\t}\n+\n+\t@Test\n+\tvoid currentSubscriberCountReflectsCancellation() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\t\tStepVerifier.create(mp)\n+\t\t\t\t.thenCancel()\n+\t\t\t\t.verify();\n+\n+\t\tassertThat(mp.currentSubscriberCount()).isEqualTo(0);\n+\t}\n+\n+\t@Test\n+\tvoid blockReturnsNullOnTryEmitEmpty() {\n+\t\tSinkEmptyMulticast<Void> mp = new SinkEmptyMulticast<>();\n+\n+\t\tSchedulers.parallel().schedule(() -> mp.tryEmitEmpty(), 50L, TimeUnit.MILLISECONDS);\n+\t\tassertThat(mp.block(Duration.ofSeconds(1))).isNull();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzM4NDI0Mw=="}, "originalCommit": {"oid": "8c5abcc44cb132a749a6e76f324e7f2ec2eb608e"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 780, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}