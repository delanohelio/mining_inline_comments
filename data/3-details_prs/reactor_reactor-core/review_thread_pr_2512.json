{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4MTcwMDgx", "number": 2512, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDoyMToxOFrOE9wIcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDoyMToxOFrOE9wIcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTg3MTg0OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/ReactorTestExecutionListener.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQyMDoyMToxOFrOH6mrzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QwOTo0NToxNVrOH63h8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxMzI2Mg==", "bodyText": "Seems a bit blunt to use a tag and custom logic in this class. Why not @After or @AfterAll in LoggersTest only?", "url": "https://github.com/reactor/reactor-core/pull/2512#discussion_r531213262", "createdAt": "2020-11-26T20:21:18Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/ReactorTestExecutionListener.java", "diffHunk": "@@ -61,11 +63,19 @@ private static void resetHooksAndSchedulers() {\n \t@Override\n \tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n \t\tresetHooksAndSchedulers();\n+\t\tif (testIdentifier.getTags().contains(TestTag.create(\"changesLoggerFactory\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9268a0447f9450238e71b5d0147c9b12455ac198"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ0MDk3Ng==", "bodyText": "centralize the logic of setting up the logger factory in the TestExecutionListener only", "url": "https://github.com/reactor/reactor-core/pull/2512#discussion_r531440976", "createdAt": "2020-11-27T08:13:21Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/ReactorTestExecutionListener.java", "diffHunk": "@@ -61,11 +63,19 @@ private static void resetHooksAndSchedulers() {\n \t@Override\n \tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n \t\tresetHooksAndSchedulers();\n+\t\tif (testIdentifier.getTags().contains(TestTag.create(\"changesLoggerFactory\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxMzI2Mg=="}, "originalCommit": {"oid": "9268a0447f9450238e71b5d0147c9b12455ac198"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ1NjYwNA==", "bodyText": "Could also just call LoggerUtils.useCurrentLoggersWithCapture(); once more at the end of LoggerUtilsTest.disposeOnlyUninstallsItelf(), seems way more simple and understandable. wdyt?", "url": "https://github.com/reactor/reactor-core/pull/2512#discussion_r531456604", "createdAt": "2020-11-27T08:45:14Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/ReactorTestExecutionListener.java", "diffHunk": "@@ -61,11 +63,19 @@ private static void resetHooksAndSchedulers() {\n \t@Override\n \tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n \t\tresetHooksAndSchedulers();\n+\t\tif (testIdentifier.getTags().contains(TestTag.create(\"changesLoggerFactory\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxMzI2Mg=="}, "originalCommit": {"oid": "9268a0447f9450238e71b5d0147c9b12455ac198"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ3NDEwNw==", "bodyText": "is one really better than the other? note that right now if we were to do the reset in an @AfterAll, it would first have to reset the logger to default one (since the current logger could be eg. jdkLogger), then reinstall capturing logger on top of it.", "url": "https://github.com/reactor/reactor-core/pull/2512#discussion_r531474107", "createdAt": "2020-11-27T09:17:51Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/ReactorTestExecutionListener.java", "diffHunk": "@@ -61,11 +63,19 @@ private static void resetHooksAndSchedulers() {\n \t@Override\n \tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n \t\tresetHooksAndSchedulers();\n+\t\tif (testIdentifier.getTags().contains(TestTag.create(\"changesLoggerFactory\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxMzI2Mg=="}, "originalCommit": {"oid": "9268a0447f9450238e71b5d0147c9b12455ac198"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4MjYxMg==", "bodyText": "pushed a commit to see the diff. if approved I'll rework the PR's history and do the merge.", "url": "https://github.com/reactor/reactor-core/pull/2512#discussion_r531482612", "createdAt": "2020-11-27T09:33:33Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/ReactorTestExecutionListener.java", "diffHunk": "@@ -61,11 +63,19 @@ private static void resetHooksAndSchedulers() {\n \t@Override\n \tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n \t\tresetHooksAndSchedulers();\n+\t\tif (testIdentifier.getTags().contains(TestTag.create(\"changesLoggerFactory\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxMzI2Mg=="}, "originalCommit": {"oid": "9268a0447f9450238e71b5d0147c9b12455ac198"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ4OTI2Ng==", "bodyText": "I went and did the rebase in order to get 4 meaningful commits", "url": "https://github.com/reactor/reactor-core/pull/2512#discussion_r531489266", "createdAt": "2020-11-27T09:45:15Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/ReactorTestExecutionListener.java", "diffHunk": "@@ -61,11 +63,19 @@ private static void resetHooksAndSchedulers() {\n \t@Override\n \tpublic void executionFinished(TestIdentifier testIdentifier, TestExecutionResult testExecutionResult) {\n \t\tresetHooksAndSchedulers();\n+\t\tif (testIdentifier.getTags().contains(TestTag.create(\"changesLoggerFactory\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTIxMzI2Mg=="}, "originalCommit": {"oid": "9268a0447f9450238e71b5d0147c9b12455ac198"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 857, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}