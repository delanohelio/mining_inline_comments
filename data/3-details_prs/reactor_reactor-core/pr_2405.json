{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MjI1MDMw", "number": 2405, "title": "See #2377 Add `emitXxx(EmitFailureHandler)` Sinks API", "bodyText": "See #2377", "createdAt": "2020-09-28T15:21:51Z", "url": "https://github.com/reactor/reactor-core/pull/2405", "merged": true, "mergeCommit": {"oid": "18fc5a634edc7d25c665ceda4c8fe5e043110c3c"}, "closed": true, "closedAt": "2020-10-05T13:01:15Z", "author": {"login": "bsideup"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNVMN0AH2gAyNDk0MjI1MDMwOjQ1ODMwZWMwMGQ1ODNkMWMxZTlhYzlhYjgzNzM2YjdjMjMzMjIxZmM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPjVx9AFqTUwMjAyNjQ4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45830ec00d583d1c1e9ac9ab83736b7c233221fc", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/45830ec00d583d1c1e9ac9ab83736b7c233221fc", "committedDate": "2020-09-28T15:19:36Z", "message": "[WIP] add `EmitStrategy`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2575168e999419ac635b2eda6fc5fb78fd13ee23", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/2575168e999419ac635b2eda6fc5fb78fd13ee23", "committedDate": "2020-09-28T16:03:25Z", "message": "cover One/Empty"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MjU3MTc2", "url": "https://github.com/reactor/reactor-core/pull/2405#pullrequestreview-498257176", "createdAt": "2020-09-29T08:59:46Z", "commit": {"oid": "2575168e999419ac635b2eda6fc5fb78fd13ee23"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODo1OTo0NlrOHZjSDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwODo1OTo0NlrOHZjSDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1NDUxMA==", "bodyText": "I guess there's no real reason for VoidProcessor to implement One rather than Empty, other than the fact that it was originally based on existing MonoProcessor... Follow-up issue maybe?", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496554510", "createdAt": "2020-09-29T08:59:46Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/VoidProcessor.java", "diffHunk": "@@ -16,7 +16,7 @@\n import reactor.util.annotation.Nullable;\n import reactor.util.context.Context;\n \n-final class VoidProcessor<T> extends MonoProcessor<T> implements Sinks.One<T> {\n+final class VoidProcessor<T> extends MonoProcessor<T> implements InternalOneSink<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2575168e999419ac635b2eda6fc5fb78fd13ee23"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c208b50bd5ba3c475097ac90ec0a964802b15065", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/c208b50bd5ba3c475097ac90ec0a964802b15065", "committedDate": "2020-09-29T09:29:39Z", "message": "remove the public modifier"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MjYxOTM3", "url": "https://github.com/reactor/reactor-core/pull/2405#pullrequestreview-498261937", "createdAt": "2020-09-29T09:05:14Z", "commit": {"oid": "2575168e999419ac635b2eda6fc5fb78fd13ee23"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTowNToxNVrOHZjgVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTozMDozNVrOHZkhuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1ODE2Ng==", "bodyText": "shouldn't it use the strategy? (or at least a specific strategy)", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496558166", "createdAt": "2020-09-29T09:05:15Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import reactor.core.Exceptions;\n+\n+interface InternalManySink<T> extends Sinks.Many<T>, ContextHolder {\n+\n+\t@Override\n+\tdefault void emitNext(T value, Sinks.EmitStrategy strategy) {\n+\t\tfor (;;) {\n+\t\t\tSinks.Emission emission = tryEmitNext(value);\n+\t\t\tif (emission.hasSucceeded()) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tboolean shouldRetry = strategy.onEmissionFailure(emission);\n+\t\t\tif (shouldRetry) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tswitch (emission) {\n+\t\t\t\tcase FAIL_ZERO_SUBSCRIBER:\n+\t\t\t\t\t//we want to \"discard\" without rendering the sink terminated.\n+\t\t\t\t\t// effectively NO-OP cause there's no subscriber, so no context :(\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_OVERFLOW:\n+\t\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\t\t//the emitError will onErrorDropped if already terminated\n+\t\t\t\t\temitError(Exceptions.failWithOverflow(\"Backpressure overflow during Sinks.Many#emitNext\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2575168e999419ac635b2eda6fc5fb78fd13ee23"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU1OTQ2OA==", "bodyText": "I suspect most users will be really surprised by the throw, considering that's something we go out of our way to avoid in reactor... so that possibility should at least be documented in the javadoc... since we have a EmissionException, I'd use that (so that it can be caught specifically).", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496559468", "createdAt": "2020-09-29T09:07:15Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/InternalManySink.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.publisher;\n+\n+import reactor.core.Exceptions;\n+\n+interface InternalManySink<T> extends Sinks.Many<T>, ContextHolder {\n+\n+\t@Override\n+\tdefault void emitNext(T value, Sinks.EmitStrategy strategy) {\n+\t\tfor (;;) {\n+\t\t\tSinks.Emission emission = tryEmitNext(value);\n+\t\t\tif (emission.hasSucceeded()) {\n+\t\t\t\treturn;\n+\t\t\t}\n+\n+\t\t\tboolean shouldRetry = strategy.onEmissionFailure(emission);\n+\t\t\tif (shouldRetry) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\n+\t\t\tswitch (emission) {\n+\t\t\t\tcase FAIL_ZERO_SUBSCRIBER:\n+\t\t\t\t\t//we want to \"discard\" without rendering the sink terminated.\n+\t\t\t\t\t// effectively NO-OP cause there's no subscriber, so no context :(\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_OVERFLOW:\n+\t\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\t\t//the emitError will onErrorDropped if already terminated\n+\t\t\t\t\temitError(Exceptions.failWithOverflow(\"Backpressure overflow during Sinks.Many#emitNext\"));\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_CANCELLED:\n+\t\t\t\t\tOperators.onDiscard(value, currentContext());\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_TERMINATED:\n+\t\t\t\t\tOperators.onNextDropped(value, currentContext());\n+\t\t\t\t\treturn;\n+\t\t\t\tcase FAIL_NON_SERIALIZED:\n+\t\t\t\t\tthrow new IllegalStateException(\"Non-serialized access\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2575168e999419ac635b2eda6fc5fb78fd13ee23"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU3NDkwNA==", "bodyText": "one risk with the combination of default implementation at interface level + use of a wrapper for serialization of calls is that even if the underlying delegate has a specific emitNext implem, the wrapper will revert it to the default behavior.\nit leads to a situation where the emitXxx methods are part of the interface API but are not supposed to be overridden, right?\nat the same time, we cannot enforce an implementation through the use of an abstract class rather than an interface, because our concrete implementations already must extend Flux or Mono \ud83d\ude22\nthat's a drawback I was trying to solve by giving more responsabilities to the strategy, so that the custom behavior would live in the strategy rather than the sink (and thus wrappers could reproduce the default behavior). I don't see that sort of composability here.", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496574904", "createdAt": "2020-09-29T09:30:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/SinksSpecs.java", "diffHunk": "@@ -29,7 +29,7 @@\n \n }\n \n-final class SerializedManySink<T> implements Many<T>, Scannable {\n+final class SerializedManySink<T> implements InternalManySink<T>, Scannable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2575168e999419ac635b2eda6fc5fb78fd13ee23"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c97d6a7ec1c1979373256c5e7bae56156c061dec", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/c97d6a7ec1c1979373256c5e7bae56156c061dec", "committedDate": "2020-09-29T09:36:54Z", "message": "Use `EmissionException`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MjkwMjk3", "url": "https://github.com/reactor/reactor-core/pull/2405#pullrequestreview-498290297", "createdAt": "2020-09-29T09:39:03Z", "commit": {"oid": "c97d6a7ec1c1979373256c5e7bae56156c061dec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTozOTowNFrOHZk4Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwOTozOTowNFrOHZk4Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjU4MDYzMA==", "bodyText": "actually, the message is not a bad idea either. don't remember if the EmissionException has such a constructor but it would make sense to have one", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r496580630", "createdAt": "2020-09-29T09:39:04Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/InternalEmptySink.java", "diffHunk": "@@ -67,11 +69,9 @@ default void emitError(Throwable error, Sinks.EmitStrategy strategy) {\n \t\t\t\t\tOperators.onErrorDropped(error, currentContext());\n \t\t\t\t\treturn;\n \t\t\t\tcase FAIL_NON_SERIALIZED:\n-\t\t\t\t\tthrow new IllegalStateException(\n-\t\t\t\t\t\t\t\"Spec. Rule 1.3 - onSubscribe, onNext, onError and onComplete signaled to a Subscriber MUST be signaled serially.\"\n-\t\t\t\t\t);\n+\t\t\t\t\tthrow new EmissionException(emission);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c97d6a7ec1c1979373256c5e7bae56156c061dec"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3b884b456aac0e00f1b7aa7b9cfcaecdb8535e", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/3a3b884b456aac0e00f1b7aa7b9cfcaecdb8535e", "committedDate": "2020-09-29T15:49:25Z", "message": "Rename to `EmitFailureHandler`, add `SignalType`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bda61968e4d032f84b11a432425d44553939f88", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/8bda61968e4d032f84b11a432425d44553939f88", "committedDate": "2020-09-30T15:20:22Z", "message": "javadoc, tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48d8d8df0c69121f9b7a727424667636f3cf34b0", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/48d8d8df0c69121f9b7a727424667636f3cf34b0", "committedDate": "2020-09-30T15:50:50Z", "message": "Merge branch 'master' into emit_strategies\n\n# Conflicts:\n#\treactor-core/src/main/java/reactor/core/publisher/DirectProcessor.java\n#\treactor-core/src/main/java/reactor/core/publisher/SinkEmptyMulticast.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95157d8b1241f321d953ac2ce2e1bb6ae3a047d1", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/95157d8b1241f321d953ac2ce2e1bb6ae3a047d1", "committedDate": "2020-09-30T15:59:04Z", "message": "merge with master"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwMTcyMjQw", "url": "https://github.com/reactor/reactor-core/pull/2405#pullrequestreview-500172240", "createdAt": "2020-10-01T09:35:27Z", "commit": {"oid": "95157d8b1241f321d953ac2ce2e1bb6ae3a047d1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/0957b8655545e467de6d62843f7d1619d122b4bc", "committedDate": "2020-10-01T12:34:56Z", "message": "add a custom message to `EmissionException`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMjYyODM2", "url": "https://github.com/reactor/reactor-core/pull/2405#pullrequestreview-501262836", "createdAt": "2020-10-02T16:04:28Z", "commit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjowNDoyOFrOHbzOvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxNjoxNTo0MFrOHbzlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxMjk1Nw==", "bodyText": "we need either to make it consistent with the above constructor or open a separate PR to swap the parameters of the above constructor, wdyt? (the later would be breaking between RC1 and RC2, but probably a more meaningful order)", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498912957", "createdAt": "2020-10-02T16:04:28Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -167,15 +167,19 @@ public void orThrowWithCause(Throwable cause) {\n \t\tfinal Emission reason;\n \n \t\tpublic EmissionException(Emission reason) {\n-\t\t\tsuper(\"Sink emission failed with \" + reason);\n-\t\t\tthis.reason = reason;\n+\t\t\tthis(reason, \"Sink emission failed with \" + reason);\n \t\t}\n \n \t\tpublic EmissionException(Throwable cause, Emission reason) {\n \t\t\tsuper(\"Sink emission failed with \" + reason, cause);\n \t\t\tthis.reason = reason;\n \t\t}\n \n+\t\tpublic EmissionException(Emission reason, String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNjUwOQ==", "bodyText": "I'd cover more ground here: give examples, state that this isn't a Predicate because side effects like waiting is allowed...", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498916509", "createdAt": "2020-10-02T16:11:22Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -186,6 +190,28 @@ public Emission getReason() {\n \t\t}\n \t}\n \n+\t/**\n+\t * A handler for any non-successful emission result from operations\n+\t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n+\t * that allows retrying or failing the operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxNzcxMA==", "bodyText": "change beginning of sentence: \"will not attempt at instruct to retry\", add , at the end of the line, replace trigger below with triggering.", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498917710", "createdAt": "2020-10-02T16:13:48Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -186,6 +190,28 @@ public Emission getReason() {\n \t\t}\n \t}\n \n+\t/**\n+\t * A handler for any non-successful emission result from operations\n+\t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n+\t * that allows retrying or failing the operation.\n+\t */\n+\tpublic interface EmitFailureHandler {\n+\n+\t\t/**\n+\t\t * A pre-made handler that will not attempt at retry any failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODM5OQ==", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitNext (see #2405 (comment))\nalso, big red warning that the method can throw an EmissionException (see #2405 (comment))", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918399", "createdAt": "2020-10-02T16:15:08Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -605,7 +631,11 @@ public Emission getReason() {\n \t\t *\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitNext(T t);\n+\t\tdefault void emitNext(T t) {\n+\t\t\temitNext(t, EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitNext(T t, EmitFailureHandler failureHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODQ1NA==", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitComplete (see #2405 (comment))", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918454", "createdAt": "2020-10-02T16:15:14Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -622,7 +652,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitComplete()} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitComplete();\n+\t\tdefault void emitComplete() {\n+\t\t\temitComplete(EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitComplete(EmitFailureHandler failureHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODUxMQ==", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitError (see #2405 (comment))", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918511", "createdAt": "2020-10-02T16:15:20Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -641,7 +675,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitError(Throwable)} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitError(Throwable error);\n+\t\tdefault void emitError(Throwable error) {\n+\t\t\temitError(error, EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitError(Throwable error, EmitFailureHandler failureHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODYxNQ==", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitEmpty (see #2405 (comment))", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918615", "createdAt": "2020-10-02T16:15:31Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -710,7 +748,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitEmpty()} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitEmpty();\n+\t\tdefault void emitEmpty() {\n+\t\t\temitEmpty(EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitEmpty(EmitFailureHandler failureHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODY2Mw==", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitError (see #2405 (comment))", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918663", "createdAt": "2020-10-02T16:15:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -729,7 +771,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitError(Throwable)} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitError(Throwable error);\n+\t\tdefault void emitError(Throwable error) {\n+\t\t\temitError(error, EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitError(Throwable error, EmitFailureHandler failureHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODkxODcyMQ==", "bodyText": "missing javadoc. insist on the fact that this should rely on tryEmitValue (see #2405 (comment))\nalso, big red warning that the method can throw an EmissionException (see #2405 (comment))", "url": "https://github.com/reactor/reactor-core/pull/2405#discussion_r498918721", "createdAt": "2020-10-02T16:15:40Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -802,7 +848,11 @@ public Emission getReason() {\n \t\t * @deprecated to be removed shortly after 3.4.0-RC1. Use {@link #tryEmitValue(Object)} and handle the result.\n \t\t */\n \t\t@Deprecated\n-\t\tvoid emitValue(@Nullable T value);\n+\t\tdefault void emitValue(@Nullable T value) {\n+\t\t\temitValue(value, EmitFailureHandler.FAIL_FAST);\n+\t\t}\n+\n+\t\tvoid emitValue(@Nullable T value, EmitFailureHandler failureHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0957b8655545e467de6d62843f7d1619d122b4bc"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60f04e155eec4c9f4061371cb4ee0c4d42017cb9", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/60f04e155eec4c9f4061371cb4ee0c4d42017cb9", "committedDate": "2020-10-05T11:06:45Z", "message": "Merge branch 'master' into emit_strategies\n\n# Conflicts:\n#\treactor-core/src/jcstress/java/reactor/core/publisher/SerializedManySinkStressTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "853cf7b0b664f64290d889d44b04e65ba6bfe45e", "author": {"user": {"login": "bsideup", "name": "Sergei Egorov"}}, "url": "https://github.com/reactor/reactor-core/commit/853cf7b0b664f64290d889d44b04e65ba6bfe45e", "committedDate": "2020-10-05T12:50:36Z", "message": "Add javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMDI2NDg4", "url": "https://github.com/reactor/reactor-core/pull/2405#pullrequestreview-502026488", "createdAt": "2020-10-05T12:56:34Z", "commit": {"oid": "853cf7b0b664f64290d889d44b04e65ba6bfe45e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2881, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}