{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NzUzNTg3", "number": 2357, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDowNjozMFrOEg8x0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTozNDoyN1rOEhTdSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTg1NjgyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDowNjozMFrOHOAtIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxMTo0M1rOHOA22w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1MzY2NA==", "bodyText": "shouldn't we check subscribers == EMPTY even before attempting to lazily create a queue? Otherwise, it still returns OK if the queue has the capacity but there are no subscribers", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484453664", "createdAt": "2020-09-07T14:06:30Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java", "diffHunk": "@@ -310,7 +310,7 @@ public Emission tryEmitNext(T t) {\n \t\t}\n \n \t\tif (!q.offer(t)) {\n-\t\t\treturn Emission.FAIL_OVERFLOW;\n+\t\t\treturn subscribers == EMPTY ? Emission.FAIL_ZERO_SUBSCRIBER : Emission.FAIL_OVERFLOW;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NjE1NQ==", "bodyText": "One of the advertised features of the EmitterProcessor is the capacity to buffer a (few?) elements into that queue before failing with overflow, including when trying to emit before anybody's listening. If the queue has the capacity but there are no listeners, the first listener will get the early emission from the queue, so this is intended.", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484456155", "createdAt": "2020-09-07T14:11:43Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java", "diffHunk": "@@ -310,7 +310,7 @@ public Emission tryEmitNext(T t) {\n \t\t}\n \n \t\tif (!q.offer(t)) {\n-\t\t\treturn Emission.FAIL_OVERFLOW;\n+\t\t\treturn subscribers == EMPTY ? Emission.FAIL_ZERO_SUBSCRIBER : Emission.FAIL_OVERFLOW;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1MzY2NA=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTg2MDkyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDowNzo1MFrOHOAvmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoyNjoyMVrOHOBVJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NDI5Ng==", "bodyText": "Have you considered naming it hasSubscribers?", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484454296", "createdAt": "2020-09-07T14:07:50Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -497,6 +502,8 @@ public Emission getReason() {\n \t */\n \tpublic interface Many<T> {\n \n+\t\tboolean hasSubscriber();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NTIwNA==", "bodyText": "actually, since there's no direct need for it in this PR it should probably be debated in a separate issue \ud83e\udd14", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484455204", "createdAt": "2020-09-07T14:09:47Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -497,6 +502,8 @@ public Emission getReason() {\n \t */\n \tpublic interface Many<T> {\n \n+\t\tboolean hasSubscriber();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NDI5Ng=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MzkwOQ==", "bodyText": "Sounds good! Less is better :)", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484463909", "createdAt": "2020-09-07T14:26:21Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -497,6 +502,8 @@ public Emission getReason() {\n \t */\n \tpublic interface Many<T> {\n \n+\t\tboolean hasSubscriber();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NDI5Ng=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTg2NTIxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDowOToyNFrOHOAyUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzoyMzowMlrOHOFSiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NDk5Mg==", "bodyText": "to avoid double CASing, we can/should replace it with do { read + switch + cas } while (casFails)", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484454992", "createdAt": "2020-09-07T14:09:24Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -67,6 +70,18 @@\n \tpublic void subscribe(CoreSubscriber<? super T> actual) {\n \t\tObjects.requireNonNull(actual, \"subscribe\");\n \n+\t\t//detect pre-subscribe termination\n+\t\tif (STATE.compareAndSet(this, State.TERMINATED_BEFORE_SUBSCRIPTION, State.TERMINATED)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyODc3Nw==", "bodyText": "done, let me know if that's what you had in mind", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484528777", "createdAt": "2020-09-07T17:23:02Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -67,6 +70,18 @@\n \tpublic void subscribe(CoreSubscriber<? super T> actual) {\n \t\tObjects.requireNonNull(actual, \"subscribe\");\n \n+\t\t//detect pre-subscribe termination\n+\t\tif (STATE.compareAndSet(this, State.TERMINATED_BEFORE_SUBSCRIPTION, State.TERMINATED)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NDk5Mg=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTg2ODk2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxMDozMVrOHOA0kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNToyMjo0OFrOHOiarw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NTU2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\telse return tryEmitError(t);\n          \n          \n            \n            \t\t\t\telse {\n          \n          \n            \n            \t\t\t\t\treturn tryEmitError(t);\n          \n          \n            \n            \t\t\t\t}", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484455568", "createdAt": "2020-09-07T14:10:31Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -153,16 +169,24 @@ public void emitError(Throwable error) {\n \t@Override\n \tpublic Emission tryEmitError(Throwable t) {\n \t\tObjects.requireNonNull(t, \"t\");\n-\n-\t\tswitch (state) {\n+\t\tswitch (this.state) {\n \t\t\tcase INITIAL:\n-\t\t\t\t// TODO different Emission?\n-\t\t\t\treturn Emission.OK;\n+\t\t\t\tif (STATE.compareAndSet(this, State.INITIAL, State.TERMINATED_BEFORE_SUBSCRIPTION)) {\n+\t\t\t\t\tthis.error = t;\n+\t\t\t\t\treturn Emission.OK;\n+\t\t\t\t}\n+\t\t\t\telse return tryEmitError(t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzOTM3Ng==", "bodyText": "Not resolved.", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484839376", "createdAt": "2020-09-08T11:16:29Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -153,16 +169,24 @@ public void emitError(Throwable error) {\n \t@Override\n \tpublic Emission tryEmitError(Throwable t) {\n \t\tObjects.requireNonNull(t, \"t\");\n-\n-\t\tswitch (state) {\n+\t\tswitch (this.state) {\n \t\t\tcase INITIAL:\n-\t\t\t\t// TODO different Emission?\n-\t\t\t\treturn Emission.OK;\n+\t\t\t\tif (STATE.compareAndSet(this, State.INITIAL, State.TERMINATED_BEFORE_SUBSCRIPTION)) {\n+\t\t\t\t\tthis.error = t;\n+\t\t\t\t\treturn Emission.OK;\n+\t\t\t\t}\n+\t\t\t\telse return tryEmitError(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NTU2OA=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwNTk5OQ==", "bodyText": "done in eca5e18", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r485005999", "createdAt": "2020-09-08T15:22:48Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -153,16 +169,24 @@ public void emitError(Throwable error) {\n \t@Override\n \tpublic Emission tryEmitError(Throwable t) {\n \t\tObjects.requireNonNull(t, \"t\");\n-\n-\t\tswitch (state) {\n+\t\tswitch (this.state) {\n \t\t\tcase INITIAL:\n-\t\t\t\t// TODO different Emission?\n-\t\t\t\treturn Emission.OK;\n+\t\t\t\tif (STATE.compareAndSet(this, State.INITIAL, State.TERMINATED_BEFORE_SUBSCRIPTION)) {\n+\t\t\t\t\tthis.error = t;\n+\t\t\t\t\treturn Emission.OK;\n+\t\t\t\t}\n+\t\t\t\telse return tryEmitError(t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NTU2OA=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTg2OTk1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxMDo0OFrOHOA1IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxMDo0OFrOHOA1IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NTcxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\telse return tryEmitComplete(); // recurse\n          \n          \n            \n            \t\t\t\telse {\n          \n          \n            \n            \t\t\t\t\treturn tryEmitComplete(); // recurse\n          \n          \n            \n            \t\t\t\t}", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484455713", "createdAt": "2020-09-07T14:10:48Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -182,18 +206,29 @@ public void emitComplete() {\n \tpublic Emission tryEmitComplete() {\n \t\tswitch (state) {\n \t\t\tcase INITIAL:\n-\t\t\t\t// TODO different Emission?\n-\t\t\t\treturn Emission.OK;\n+\t\t\t\tif (STATE.compareAndSet(this, State.INITIAL, State.TERMINATED_BEFORE_SUBSCRIPTION)) {\n+\t\t\t\t\treturn Emission.OK;\n+\t\t\t\t}\n+\t\t\t\telse return tryEmitComplete(); //recurse\n \t\t\tcase SUBSCRIBED:\n-\t\t\t\tactual.onComplete();\n-\t\t\t\tactual = null;\n-\t\t\t\treturn Emission.OK;\n+\t\t\t\tif (STATE.compareAndSet(this, State.SUBSCRIBED, State.TERMINATED)) {\n+\t\t\t\t\tactual.onComplete();\n+\t\t\t\t\tactual = null;\n+\t\t\t\t\treturn Emission.OK;\n+\t\t\t\t}\n+\t\t\t\telse return tryEmitComplete(); // recurse", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTg4Mjg1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDoxNDozMFrOHOA8mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjo0MTo1MFrOHOa_0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NzYyNg==", "bodyText": "IMO this is wrong and should return FAIL_ZERO_SUBSCRIBER", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484457626", "createdAt": "2020-09-07T14:14:30Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -279,4 +279,50 @@ public void shouldSignalErrorOnOverflow() {\n \t\t            .then(() -> processor.emitNext(\"boom\"))\n \t\t            .verifyErrorMatches(Exceptions::isOverflow);\n \t}\n+\n+\t@Test\n+\tpublic void tryEmitNextWithNoSubscriberAndBoundedQueueFailsZeroSubscriber() {\n+\t\tUnicastProcessor<Integer> unicastProcessor = UnicastProcessor.create(Queues.<Integer>one().get());\n+\n+\t\tassertThat(unicastProcessor.tryEmitNext(1)).isEqualTo(Sinks.Emission.OK);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2MDQyNw==", "bodyText": "the fact that UnicastProcessor allows to pre-emit (a few) elements before the actual subscription occurs is IMHO a cornerstone of it working so well as the plumbing for widowing operators. I fear doing what you suggest would open the door to all sorts of issues in windowing operators, at least.", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484460427", "createdAt": "2020-09-07T14:19:38Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -279,4 +279,50 @@ public void shouldSignalErrorOnOverflow() {\n \t\t            .then(() -> processor.emitNext(\"boom\"))\n \t\t            .verifyErrorMatches(Exceptions::isOverflow);\n \t}\n+\n+\t@Test\n+\tpublic void tryEmitNextWithNoSubscriberAndBoundedQueueFailsZeroSubscriber() {\n+\t\tUnicastProcessor<Integer> unicastProcessor = UnicastProcessor.create(Queues.<Integer>one().get());\n+\n+\t\tassertThat(unicastProcessor.tryEmitNext(1)).isEqualTo(Sinks.Emission.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NzYyNg=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ2NDU0MA==", "bodyText": "if so, the second emission should fail with OVERFLOW and not \"zero subscribers\" because the sink/processor isn't subscriber-dependent", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484464540", "createdAt": "2020-09-07T14:27:33Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -279,4 +279,50 @@ public void shouldSignalErrorOnOverflow() {\n \t\t            .then(() -> processor.emitNext(\"boom\"))\n \t\t            .verifyErrorMatches(Exceptions::isOverflow);\n \t}\n+\n+\t@Test\n+\tpublic void tryEmitNextWithNoSubscriberAndBoundedQueueFailsZeroSubscriber() {\n+\t\tUnicastProcessor<Integer> unicastProcessor = UnicastProcessor.create(Queues.<Integer>one().get());\n+\n+\t\tassertThat(unicastProcessor.tryEmitNext(1)).isEqualTo(Sinks.Emission.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NzYyNg=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyNjQ3Mg==", "bodyText": "why? the whole point of adding this failed state is to indicate undeliverable emission (as opposed to deliverable-in-case-of-later-subscription). there are still 0 subscribers when the second tryEmitNext occurs, but that one cannot be buffered for the benefit of a deferred subscriptions, so we return FAIL_ZERO_SUBSCRIBER (to distinguish from \"there's a subscriber but it hasn't requested enough\").\n\t\t/**\n\t\t * Has failed to emit the signal because the sink has never been subscribed to [AND]\n         * has no capacity to buffer the signal.\n\t\t */\n\t\tFAIL_ZERO_SUBSCRIBER;\n(I should change the above wording to say has currently no subscriber maybe rather than `has never been subscribed)", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484526472", "createdAt": "2020-09-07T17:12:44Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -279,4 +279,50 @@ public void shouldSignalErrorOnOverflow() {\n \t\t            .then(() -> processor.emitNext(\"boom\"))\n \t\t            .verifyErrorMatches(Exceptions::isOverflow);\n \t}\n+\n+\t@Test\n+\tpublic void tryEmitNextWithNoSubscriberAndBoundedQueueFailsZeroSubscriber() {\n+\t\tUnicastProcessor<Integer> unicastProcessor = UnicastProcessor.create(Queues.<Integer>one().get());\n+\n+\t\tassertThat(unicastProcessor.tryEmitNext(1)).isEqualTo(Sinks.Emission.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NzYyNg=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg4NDQzMw==", "bodyText": "IMO the failure's cause is the overflow. The fact that it overflows when there are no subscribers is an implementation detail. Getting FAIL_ZERO_SUBSCRIBER after OK is super weird and IMO counterintuitive \ud83d\ude05", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484884433", "createdAt": "2020-09-08T12:41:50Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/publisher/UnicastProcessorTest.java", "diffHunk": "@@ -279,4 +279,50 @@ public void shouldSignalErrorOnOverflow() {\n \t\t            .then(() -> processor.emitNext(\"boom\"))\n \t\t            .verifyErrorMatches(Exceptions::isOverflow);\n \t}\n+\n+\t@Test\n+\tpublic void tryEmitNextWithNoSubscriberAndBoundedQueueFailsZeroSubscriber() {\n+\t\tUnicastProcessor<Integer> unicastProcessor = UnicastProcessor.create(Queues.<Integer>one().get());\n+\n+\t\tassertThat(unicastProcessor.tryEmitNext(1)).isEqualTo(Sinks.Emission.OK);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ1NzYyNg=="}, "originalCommit": {"oid": "42fbc64dc912c3a5027e25ada55b1952127789d3"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjQ0OTY3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMToxNjowN1rOHOYO_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNToyMjoyOFrOHOiZyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzOTE2NQ==", "bodyText": "why not put it into switch's cases?\nSimilar to \n  \n    \n      reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxConcatMapNoPrefetch.java\n    \n    \n        Lines 275 to 286\n      in\n      56e5c0d\n    \n    \n    \n    \n\n        \n          \n           case LAST_ACTIVE: \n        \n\n        \n          \n           \tif (!STATE.compareAndSet(this, previousState, State.TERMINATED)) { \n        \n\n        \n          \n           \t\tcontinue; \n        \n\n        \n          \n           \t} \n        \n\n        \n          \n            \n        \n\n        \n          \n           \tThrowable ex = error; \n        \n\n        \n          \n           \tif (ex != null) { \n        \n\n        \n          \n           \t\tactual.onError(ex); \n        \n\n        \n          \n           \t\treturn; \n        \n\n        \n          \n           \t} \n        \n\n        \n          \n           \tactual.onComplete(); \n        \n\n        \n          \n           \treturn; \n        \n    \n  \n\n\n\ntry CAS\ncontinue if fails\ndo the action otherwise", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r484839165", "createdAt": "2020-09-08T11:16:07Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -67,13 +70,38 @@\n \tpublic void subscribe(CoreSubscriber<? super T> actual) {\n \t\tObjects.requireNonNull(actual, \"subscribe\");\n \n-\t\tif (!STATE.compareAndSet(this, State.INITIAL, State.SUBSCRIBED)) {\n+\t\tboolean casFails;\n+\t\tState s;\n+\t\tdo {\n+\t\t\ts = state;\n+\t\t\tswitch(s) {\n+\t\t\t\tcase TERMINATED_BEFORE_SUBSCRIPTION:\n+\t\t\t\t\tcasFails = !STATE.compareAndSet(this, s, State.TERMINATED);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase INITIAL:\n+\t\t\t\t\tcasFails = !STATE.compareAndSet(this, s, State.SUBSCRIBED);\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tcasFails = false;\n+\t\t\t}\n+\t\t} while (casFails);\n+\n+\t\tif (s == State.TERMINATED_BEFORE_SUBSCRIPTION) {\n+\t\t\t//detected pre-subscribe termination\n+\t\t\tif (this.error != null) {\n+\t\t\t\tOperators.error(actual, this.error);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tOperators.complete(actual);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd9c1c71a9ab06ca5c1ba828aeba334cc27ed92"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAwNTc2OA==", "bodyText": "see 80278ec", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r485005768", "createdAt": "2020-09-08T15:22:28Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -67,13 +70,38 @@\n \tpublic void subscribe(CoreSubscriber<? super T> actual) {\n \t\tObjects.requireNonNull(actual, \"subscribe\");\n \n-\t\tif (!STATE.compareAndSet(this, State.INITIAL, State.SUBSCRIBED)) {\n+\t\tboolean casFails;\n+\t\tState s;\n+\t\tdo {\n+\t\t\ts = state;\n+\t\t\tswitch(s) {\n+\t\t\t\tcase TERMINATED_BEFORE_SUBSCRIPTION:\n+\t\t\t\t\tcasFails = !STATE.compareAndSet(this, s, State.TERMINATED);\n+\t\t\t\t\tbreak;\n+\t\t\t\tcase INITIAL:\n+\t\t\t\t\tcasFails = !STATE.compareAndSet(this, s, State.SUBSCRIBED);\n+\t\t\t\t\tbreak;\n+\t\t\t\tdefault:\n+\t\t\t\t\tcasFails = false;\n+\t\t\t}\n+\t\t} while (casFails);\n+\n+\t\tif (s == State.TERMINATED_BEFORE_SUBSCRIPTION) {\n+\t\t\t//detected pre-subscribe termination\n+\t\t\tif (this.error != null) {\n+\t\t\t\tOperators.error(actual, this.error);\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tOperators.complete(actual);\n+\t\t\t}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzOTE2NQ=="}, "originalCommit": {"oid": "0fd9c1c71a9ab06ca5c1ba828aeba334cc27ed92"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzU2ODMzOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTozMzoyNlrOHOi3xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTozMzoyNlrOHOi3xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxMzQ0NA==", "bodyText": "nit: Could use a similar style as in \n  \n    \n      reactor-core/reactor-core/src/main/java/reactor/core/publisher/FluxConcatMapNoPrefetch.java\n    \n    \n         Line 226\n      in\n      56e5c0d\n    \n    \n    \n    \n\n        \n          \n           for (State previousState = this.state; ; previousState = this.state) {", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r485013444", "createdAt": "2020-09-08T15:33:26Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -67,13 +70,34 @@\n \tpublic void subscribe(CoreSubscriber<? super T> actual) {\n \t\tObjects.requireNonNull(actual, \"subscribe\");\n \n-\t\tif (!STATE.compareAndSet(this, State.INITIAL, State.SUBSCRIBED)) {\n-\t\t\tOperators.reportThrowInSubscribe(actual, new IllegalStateException(\"Unicast Sinks.Many allows only a single Subscriber\"));\n-\t\t\treturn;\n+\t\tState s;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca5e189f5e9d0cc914af9fb193b06096b64038d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzU3MjU3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTozNDoyN1rOHOi6ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTozNDoyN1rOHOi6ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAxNDE1NA==", "bodyText": "consider extracting this.state into a variable and using it here in place of State.INITIAL to avoid future copy/paste errors", "url": "https://github.com/reactor/reactor-core/pull/2357#discussion_r485014154", "createdAt": "2020-09-08T15:34:27Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/UnicastManySinkNoBackpressure.java", "diffHunk": "@@ -153,16 +178,26 @@ public void emitError(Throwable error) {\n \t@Override\n \tpublic Emission tryEmitError(Throwable t) {\n \t\tObjects.requireNonNull(t, \"t\");\n-\n-\t\tswitch (state) {\n+\t\tswitch (this.state) {\n \t\t\tcase INITIAL:\n-\t\t\t\t// TODO different Emission?\n-\t\t\t\treturn Emission.OK;\n+\t\t\t\tif (STATE.compareAndSet(this, State.INITIAL, State.TERMINATED_BEFORE_SUBSCRIPTION)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eca5e189f5e9d0cc914af9fb193b06096b64038d"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 950, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}