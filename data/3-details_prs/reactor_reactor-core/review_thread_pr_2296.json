{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwNjQwNDk4", "number": 2296, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo0NDowMVrOEV3DMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyNzoxMFrOEWIICA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzU3NDg5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo0NDowMVrOG82w1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDoxOTowMVrOG9btjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2NDk4MQ==", "bodyText": "Could we add a TODO and open an issue to not forget about this?", "url": "https://github.com/reactor/reactor-core/pull/2296#discussion_r466464981", "createdAt": "2020-08-06T14:44:01Z", "author": {"login": "aneveu"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6737,7 +6737,8 @@ public int getPrefetch() {\n \t * @return a new {@link Mono}\n \t */\n \tpublic final Mono<T> publishNext() {\n-\t\treturn Mono.onAssembly(new MonoProcessor<>(this));\n+\t\t//Should add a ConnectableMono to align with #publish()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be77bbe2d0dffa426f704b89965c669c53cc76a0"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA3MDM1MA==", "bodyText": "I think it will be hard to repurpose this method for a ConnectableMono if we introduce one. Since we now have shareNext(), I'd say that we deprecate this method entirely. Later on, if we introduce Mono.publish() returning a ConnectableMono, we can advise people to use Flux.next().publish() instead. wdyt @smaldini ?", "url": "https://github.com/reactor/reactor-core/pull/2296#discussion_r467070350", "createdAt": "2020-08-07T14:19:01Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6737,7 +6737,8 @@ public int getPrefetch() {\n \t * @return a new {@link Mono}\n \t */\n \tpublic final Mono<T> publishNext() {\n-\t\treturn Mono.onAssembly(new MonoProcessor<>(this));\n+\t\t//Should add a ConnectableMono to align with #publish()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2NDk4MQ=="}, "originalCommit": {"oid": "be77bbe2d0dffa426f704b89965c669c53cc76a0"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjM3MDk0OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkOneMonoProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyNjozOFrOG9RL1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyNjozOFrOG9RL1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5Nzg3OA==", "bodyText": "Sink instead of Upstream into the error message", "url": "https://github.com/reactor/reactor-core/pull/2296#discussion_r466897878", "createdAt": "2020-08-07T08:26:38Z", "author": {"login": "aneveu"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkOneMonoProcessor.java", "diffHunk": "@@ -28,37 +28,38 @@\n /**\n  * @author Stephane Maldini\n  */\n-final class DelegateSinkMonoProcessor<IN> extends AbstractMonoProcessor<IN> {\n+final class DelegateSinkOneMonoProcessor<IN> extends MonoProcessor<IN> {\n \n \tfinal Mono<IN>      downstream;\n-\tfinal Sinks.One<IN> upstream;\n+\tfinal Sinks.One<IN> sink;\n \n-\tDelegateSinkMonoProcessor(Mono<IN> downstream, Sinks.One<IN> upstream) {\n-\t\tthis.downstream = Objects.requireNonNull(downstream, \"Downstream must not be null\");\n-\t\tthis.upstream = Objects.requireNonNull(upstream, \"Upstream must not be null\");\n+\tDelegateSinkOneMonoProcessor(Sinks.One<IN> sink) {\n+\t\tthis.sink = Objects.requireNonNull(sink, \"Upstream must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6367b06c672c7fe04d78d42c98cbc0e81a8c1327"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjM3MjU2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyNzoxMFrOG9RM0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODoyNzoxMFrOG9RM0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg5ODEzMA==", "bodyText": "Sink instead of Upstream into the error message", "url": "https://github.com/reactor/reactor-core/pull/2296#discussion_r466898130", "createdAt": "2020-08-07T08:27:10Z", "author": {"login": "aneveu"}, "path": "reactor-core/src/main/java/reactor/core/publisher/DelegateSinkFluxProcessor.java", "diffHunk": "@@ -32,10 +32,9 @@\n \tfinal Flux<IN>       flux;\n \tfinal Sinks.Many<IN> sink;\n \n-\tDelegateSinkFluxProcessor(Flux<IN> flux,\n-\t\t\t\t\t\t\t  Sinks.Many<IN> sink) {\n-\t\tthis.flux = Objects.requireNonNull(flux, \"Downstream must not be null\");\n+\tDelegateSinkFluxProcessor(Sinks.Many<IN> sink) {\n \t\tthis.sink = Objects.requireNonNull(sink, \"Upstream must not be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6367b06c672c7fe04d78d42c98cbc0e81a8c1327"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 909, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}