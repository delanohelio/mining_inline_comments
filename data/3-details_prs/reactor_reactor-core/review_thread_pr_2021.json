{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDAzNjc2", "number": 2021, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToyNjozNVrODaNiKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzoxNjoxNFrODb6NGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODExMzA2OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToyNjozNVrOFhCULA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToyNjozNVrOFhCULA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NTI2MA==", "bodyText": "magical constant used in a few places, let's extract :)", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r370185260", "createdAt": "2020-01-23T15:26:35Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -89,11 +91,11 @@ public void subscribe(CoreSubscriber<? super R> actual) {\n \t\t\t}\n \n \t\t\tIterator<? extends R> it;\n-\n+\t\t\tboolean knownToBeFinite;\n \t\t\ttry {\n \t\t\t\tIterable<? extends R> iter = mapper.apply(v);\n-\n \t\t\t\tit = iter.iterator();\n+\t\t\t\tknownToBeFinite = iter.spliterator().getExactSizeIfKnown() != -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceac4252f343d2607a34fc66fef6e2e5d5a8baa8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODExNzEwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToyNzozMFrOFhCWnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToyMTowMVrOFhXvcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NTg4Nw==", "bodyText": "this block seems to be repeated 9 times, wdyt about extracting it into a method?", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r370185887", "createdAt": "2020-01-23T15:27:30Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -367,15 +378,21 @@ void drainAsync() {\n \t\t\t\t\twhile (e != r) {\n \t\t\t\t\t\tif (cancelled) {\n \t\t\t\t\t\t\tcurrent = null;\n-\t\t\t\t\t\t\tOperators.onDiscardQueueWithClear(q, ctx, null);\n+\t\t\t\t\t\t\tcurrentKnownToBeFinite = false; //reset explicitly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceac4252f343d2607a34fc66fef6e2e5d5a8baa8"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNjMwNg==", "bodyText": "Maybe not the whole block, but the current = null; currentKnownToBeFinite = false; part: it is very important these two are reset together, and the code is short enough that it can be inlined. I'll extract that instead (19 duplicates).", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r370536306", "createdAt": "2020-01-24T09:21:01Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -367,15 +378,21 @@ void drainAsync() {\n \t\t\t\t\twhile (e != r) {\n \t\t\t\t\t\tif (cancelled) {\n \t\t\t\t\t\t\tcurrent = null;\n-\t\t\t\t\t\t\tOperators.onDiscardQueueWithClear(q, ctx, null);\n+\t\t\t\t\t\t\tcurrentKnownToBeFinite = false; //reset explicitly", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE4NTg4Nw=="}, "originalCommit": {"oid": "ceac4252f343d2607a34fc66fef6e2e5d5a8baa8"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDYzODAzOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMDo0OToxOVrOFh-gjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToxMToxOFrOFh_E0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3MTQ2OA==", "bodyText": "FYI I was looking at the sources of java.util.Spliterator and trying to find the -1 constant there.\ngetExactSizeIfKnown() is defined as:\n    default long getExactSizeIfKnown() {\n        return (characteristics() & SIZED) == 0 ? -1L : estimateSize();\n    }\nwhich means that we could also do (iter.spliterator().characteristics() & Spliterator.SIZED) == 0 instead of calling getExactSizeIfKnown() which also matches what we're actually checking. WDYT?", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r371171468", "createdAt": "2020-01-27T10:49:19Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -89,11 +90,11 @@ public void subscribe(CoreSubscriber<? super R> actual) {\n \t\t\t}\n \n \t\t\tIterator<? extends R> it;\n-\n+\t\t\tboolean knownToBeFinite;\n \t\t\ttry {\n \t\t\t\tIterable<? extends R> iter = mapper.apply(v);\n-\n \t\t\t\tit = iter.iterator();\n+\t\t\t\tknownToBeFinite = iter.spliterator().getExactSizeIfKnown() != FluxIterable.SPLITERATOR_UNSIZED;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88992af734ddbee9b874dc1ed442216edb7e1cda"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4MDc1NQ==", "bodyText": "yeah that is still expressive enough and less computational-intensive", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r371180755", "createdAt": "2020-01-27T11:11:18Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -89,11 +90,11 @@ public void subscribe(CoreSubscriber<? super R> actual) {\n \t\t\t}\n \n \t\t\tIterator<? extends R> it;\n-\n+\t\t\tboolean knownToBeFinite;\n \t\t\ttry {\n \t\t\t\tIterable<? extends R> iter = mapper.apply(v);\n-\n \t\t\t\tit = iter.iterator();\n+\t\t\t\tknownToBeFinite = iter.spliterator().getExactSizeIfKnown() != FluxIterable.SPLITERATOR_UNSIZED;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE3MTQ2OA=="}, "originalCommit": {"oid": "88992af734ddbee9b874dc1ed442216edb7e1cda"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTY5OTIyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1Mjo0NFrOFjoYxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMTo1Mjo0NFrOFjoYxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkwNjE4Mw==", "bodyText": "Couldn't we check first if Iterable is a  Collection as an optimization to avoid the Spliterator instance creation? It could be encapsulated in an utility method since this is done quite a few times.", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r372906183", "createdAt": "2020-01-30T11:52:44Z", "author": {"login": "rstoyanchev"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -89,11 +91,11 @@ public void subscribe(CoreSubscriber<? super R> actual) {\n \t\t\t}\n \n \t\t\tIterator<? extends R> it;\n-\n+\t\t\tboolean knownToBeFinite;\n \t\t\ttry {\n \t\t\t\tIterable<? extends R> iter = mapper.apply(v);\n-\n \t\t\t\tit = iter.iterator();\n+\t\t\t\tknownToBeFinite = iter.spliterator().hasCharacteristics(Spliterator.SIZED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1505277b88197bc1f4dfe23fb6dbc13273099086"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTc0MjgwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjowODoyM1rOFjoyrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMjowODoyM1rOFjoyrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkxMjgxNA==", "bodyText": "Maybe resetCurrent() reads better. Clear sounds a lot like clearing content, as in aCollection, which is also implemented here.", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r372912814", "createdAt": "2020-01-30T12:08:23Z", "author": {"login": "rstoyanchev"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -275,18 +279,27 @@ public void cancel() {\n \t\t\t\ts.cancel();\n \n \t\t\t\tif (WIP.getAndIncrement(this) == 0) {\n-\t\t\t\t\tOperators.onDiscardQueueWithClear(queue, actual.currentContext(), null);\n+\t\t\t\t\tContext context = actual.currentContext();\n+\t\t\t\t\tOperators.onDiscardQueueWithClear(queue, context, null);\n+\t\t\t\t\tOperators.onDiscardMultiple(current, currentKnownToBeFinite, context);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \n+\t\t//should be kept small and final to favor inlining\n+\t\tfinal void clearIterator() {\n+\t\t\tcurrent = null;\n+\t\t\tcurrentKnownToBeFinite = false;\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1505277b88197bc1f4dfe23fb6dbc13273099086"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTg5NzkyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxIterable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzowOToyNFrOFjqRyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzo1NzoyMlrOFkyL8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkzNzE2Mw==", "bodyText": "I noticed onCloseWithDropError in both subscriptions don't call onDiscardMultiple. Perhaps there is a reason, but it looks like the iterator may have more items (e.g. in poll() if an item is null).", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r372937163", "createdAt": "2020-01-30T13:09:24Z", "author": {"login": "rstoyanchev"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxIterable.java", "diffHunk": "@@ -19,16 +19,20 @@\n import java.util.Collection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1505277b88197bc1f4dfe23fb6dbc13273099086"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDExNTMxMw==", "bodyText": "a QueueSubscription must only return null to poll() if the subscription is empty/done. some cases of calling onCloseWithDropErrors are not suitable for attempting a drain of the iterator, for instance if hasNext() throws... Should we attempt to drain in the case the iterator returns a null value though? I'd argue this is an illegal state so the user should find the root cause of the null first and foremost, after which the discarding will be correctly done.", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r374115313", "createdAt": "2020-02-03T13:57:22Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxIterable.java", "diffHunk": "@@ -19,16 +19,20 @@\n import java.util.Collection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkzNzE2Mw=="}, "originalCommit": {"oid": "1505277b88197bc1f4dfe23fb6dbc13273099086"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTkxNTMyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzoxNTozMVrOFjqcWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNDoxMDoxOFrOFkylvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkzOTg2Nw==", "bodyText": "Isn't this initialization redundant? It will be updated before its used.", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r372939867", "createdAt": "2020-01-30T13:15:31Z", "author": {"login": "rstoyanchev"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -658,6 +697,7 @@ public boolean isEmpty() {\n \t\t@Nullable\n \t\tpublic R poll() {\n \t\t\tIterator<? extends R> it = current;\n+\t\t\tboolean itFinite = currentKnownToBeFinite;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1505277b88197bc1f4dfe23fb6dbc13273099086"}, "originalPosition": 360}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDEyMTkxOQ==", "bodyText": "indeed, fixed", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r374121919", "createdAt": "2020-02-03T14:10:18Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -658,6 +697,7 @@ public boolean isEmpty() {\n \t\t@Nullable\n \t\tpublic R poll() {\n \t\t\tIterator<? extends R> it = current;\n+\t\t\tboolean itFinite = currentKnownToBeFinite;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjkzOTg2Nw=="}, "originalCommit": {"oid": "1505277b88197bc1f4dfe23fb6dbc13273099086"}, "originalPosition": 360}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNTkxNzcwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzoxNjoxNFrOFjqdwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxMzoxNjoxNFrOFjqdwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk0MDIyNA==", "bodyText": "Likewise setting this here seems redundant since itFinite will be set again before its used.", "url": "https://github.com/reactor/reactor-core/pull/2021#discussion_r372940224", "createdAt": "2020-01-30T13:16:14Z", "author": {"login": "rstoyanchev"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxFlattenIterable.java", "diffHunk": "@@ -679,16 +721,18 @@ public R poll() {\n \t\t\t\t\t\tcontinue;\n \t\t\t\t\t}\n \t\t\t\t\tcurrent = it;\n+\t\t\t\t\tcurrentKnownToBeFinite = itFinite;\n \t\t\t\t}\n \t\t\t\telse if (!it.hasNext()) {\n \t\t\t\t\tit = null;\n+\t\t\t\t\titFinite = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1505277b88197bc1f4dfe23fb6dbc13273099086"}, "originalPosition": 386}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 984, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}