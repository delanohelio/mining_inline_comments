{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMzE3NTY1", "number": 2302, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MDowNVrOEVZhpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDozODo1NFrOEVcWFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODczNzY2OnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/metrics.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MDowNVrOG8IM1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MDowNVrOG8IM1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMjEwMg==", "bodyText": "I'd turn this sentence around, indicating that using a name can be considered mandatory when using custom tags, since it would otherwise result in a different set of tags between two default-named sequences. then add the sentence about prometheus requiring exact same set of tags.", "url": "https://github.com/reactor/reactor-core/pull/2302#discussion_r465702102", "createdAt": "2020-08-05T12:50:05Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/metrics.adoc", "diffHunk": "@@ -125,5 +126,6 @@ listenToEvents()\n ----\n <1> Set a custom tag \"source\" to value \"kafka\".\n <2> All reported metrics will have `source=kafka` tag assigned in addition to the common tags described above.\n-\n ====\n+\n+Be careful when using `Flux#name` and `Flux#tag` operators together: some monitoring systems like Prometheus require to have the exact same set of tags for each metric with the same name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c94e67992edabc5facacbded4a1926290bd1891"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODczODg1OnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/metrics.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MDoyMlrOG8INiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MDoyMlrOG8INiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMjI4MQ==", "bodyText": "I'd also annotate the name line above", "url": "https://github.com/reactor/reactor-core/pull/2302#discussion_r465702281", "createdAt": "2020-08-05T12:50:22Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/metrics.adoc", "diffHunk": "@@ -115,8 +116,8 @@ Users are allowed to add custom tags to their reactive chains:\n [source,java]\n ----\n listenToEvents()\n-    .tag(\"source\", \"kafka\") <1>\n     .name(\"events\")\n+    .tag(\"source\", \"kafka\") <1>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c94e67992edabc5facacbded4a1926290bd1891"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODc0MjU1OnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/metrics.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MToyMVrOG8IP3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MToyMVrOG8IP3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMjg3Nw==", "bodyText": "since we only have one now, I'd eliminate the table entirely and inline the description of the tag in the sentence. Also list the two possible values, Flux and Mono.", "url": "https://github.com/reactor/reactor-core/pull/2302#discussion_r465702877", "createdAt": "2020-08-05T12:51:21Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/metrics.adoc", "diffHunk": "@@ -96,16 +97,16 @@ Interested in \"events per second\" metric? Measure the rate of `reactor.onNext.de\n \n Want to be alerted when the listener throws an error? `reactor.flow.duration` with `status=error` tag is your friend.\n \n+Please note that when giving a name to a sequence, this sequence could not be aggregated with others anymore. As a compromise if you want to identify your sequence but still make it possible to aggregate with other views, you can use a <<Custom tags>> for the name by calling `(tag(\"flow\", \"events\"))` for example.\n+\n === Common tags\n \n-Every metric will have the following tags in common:\n+Every metric will have the following tag in common:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c94e67992edabc5facacbded4a1926290bd1891"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODc0NzYzOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MjozNVrOG8IS9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MjozNVrOG8IS9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwMzY2OA==", "bodyText": "Suggestion: add The name serves as a prefix in the reported metrics names. before that sentence", "url": "https://github.com/reactor/reactor-core/pull/2302#discussion_r465703668", "createdAt": "2020-08-05T12:52:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6001,12 +6001,16 @@ public int getPrefetch() {\n \t * {@link #name(String) name} (and optionally {@link #tag(String, String) tag}) the\n \t * sequence.\n \t * <p>\n+\t * In case no name has been provided, the default name \"reactor\" will be applied.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c94e67992edabc5facacbded4a1926290bd1891"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODc1MDA4OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MzoxMlrOG8IUdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1MzoxMlrOG8IUdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwNDA1NQ==", "bodyText": "don't reference micrometer classes in the javadoc. this can be turned into this name will be used as a prefix for metrics names (or meters instead of metrics)", "url": "https://github.com/reactor/reactor-core/pull/2302#discussion_r465704055", "createdAt": "2020-08-05T12:53:12Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -6022,9 +6026,16 @@ public int getPrefetch() {\n \t/**\n \t * Give a name to this sequence, which can be retrieved using {@link Scannable#name()}\n \t * as long as this is the first reachable {@link Scannable#parents()}.\n+\t * <p>\n+\t * If {@link #metrics()} operator is called later in the chain, this name will be used for\n+\t * {@link io.micrometer.core.instrument.Meter}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c94e67992edabc5facacbded4a1926290bd1891"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODc1NTU1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1NDozNVrOG8IXzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMjo1NDozNVrOG8IXzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcwNDkxMQ==", "bodyText": "don't link to micrometer classes in javadoc", "url": "https://github.com/reactor/reactor-core/pull/2302#discussion_r465704911", "createdAt": "2020-08-05T12:54:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Flux.java", "diffHunk": "@@ -8289,10 +8300,17 @@ public final void subscribe(Subscriber<? super T> actual) {\n \t * all tags throughout the publisher chain by using {@link Scannable#tags()} (as\n \t * traversed\n \t * by {@link Scannable#parents()}).\n+\t * <p>\n+\t * Note that some monitoring systems like Prometheus require to have the exact same set of\n+\t * tags for each {@link io.micrometer.core.instrument.Meter} bearing the same name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c94e67992edabc5facacbded4a1926290bd1891"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODc4OTY3OnYy", "diffSide": "LEFT", "path": "reactor-core/src/withMicrometerTest/java/reactor/core/publisher/MonoMetricsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzowMzoxMVrOG8IsTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMzowMzoxMVrOG8IsTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTcxMDE1OA==", "bodyText": "I'd still try to keep both of these tests, validating that a Mono.just and a Mono.error both have the same default set of tags. Just remove the .name (or make it the same). Same in the flux test.", "url": "https://github.com/reactor/reactor-core/pull/2302#discussion_r465710158", "createdAt": "2020-08-05T13:03:11Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/withMicrometerTest/java/reactor/core/publisher/MonoMetricsTest.java", "diffHunk": "@@ -373,48 +363,20 @@ public void noRequestTrackingEvenForNamedSequence() {\n \t\tMono<Integer> source = Mono.just(10)\n \t\t                           .name(\"foo\")\n \t\t                           .hide();\n-\t\tnew MonoMetrics<>(source, registry)\n-\t\t\t\t.block();\n \n-\t\tDistributionSummary meter = registry.find(METER_REQUESTED)\n+\t\tnew MonoMetrics<>(source, registry).block();\n+\n+\t\tDistributionSummary meter = registry.find(\"foo\" + METER_REQUESTED)\n \t\t                                    .summary();\n \n \t\tassertThat(meter).as(\"global find\").isNull();\n \n-\t\tmeter = registry.find(METER_REQUESTED)\n-\t\t                .tag(TAG_SEQUENCE_NAME, \"foo\")\n+\t\tmeter = registry.find(\"foo\" + METER_REQUESTED)\n \t\t                .summary();\n \n \t\tassertThat(meter).as(\"tagged find\").isNull();\n \t}\n \n-\t//see https://github.com/reactor/reactor-core/issues/1425", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c94e67992edabc5facacbded4a1926290bd1891"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTE5OTU2OnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/metrics.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDozODo1NFrOG8Mtlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNDozODo1NFrOG8Mtlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTc3NjAyMw==", "bodyText": "I wonder if, given the size of this section, it couldn't be merged with the Custom Tags section below.", "url": "https://github.com/reactor/reactor-core/pull/2302#discussion_r465776023", "createdAt": "2020-08-05T14:38:54Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/metrics.adoc", "diffHunk": "@@ -96,17 +97,11 @@ Interested in \"events per second\" metric? Measure the rate of `reactor.onNext.de\n \n Want to be alerted when the listener throws an error? `reactor.flow.duration` with `status=error` tag is your friend.\n \n-=== Common tags\n-\n-Every metric will have the following tags in common:\n-[width=\"100%\",options=\"header\"]\n-|=======\n-| tag name | description | example\n+Please note that when giving a name to a sequence, this sequence could not be aggregated with others anymore. As a compromise if you want to identify your sequence but still make it possible to aggregate with other views, you can use a <<Custom tags>> for the name by calling `(tag(\"flow\", \"events\"))` for example.\n \n-| type | Publisher's type | \"Mono\"\n+=== Common tag", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "709dc931d7501da3a38993cdc32c7e768fef1876"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 911, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}