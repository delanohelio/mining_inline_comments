{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDk3MDA0", "number": 2144, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzowODoxOVrOD5ZPIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowNTo0MVrOD5ch5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTA4ODk3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMzowODoxOVrOGQohMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowMDo1NVrOGQtqBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5NDI1OQ==", "bodyText": "FYI you can achieve the same with less code by submitting FutureTask (will re-throw from .get)", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420094259", "createdAt": "2020-05-05T13:08:19Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.scheduler;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.Test;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+public class BoundedElasticSchedulerBlockhoundTest {\n+\n+\t//see https://github.com/reactor/reactor-core/issues/2143\n+\t@Test\n+\tpublic void shouldNotReportBlockingCallWithZoneIdUsage() throws Throwable {\n+\t\tAtomicReference<Throwable> errorRef = new AtomicReference<>(null);\n+\t\tCountDownLatch latch = new CountDownLatch(1);\n+\t\tSchedulers.single().schedule(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ef3c89db99e9a5ed5102f25f71080d614a5a19"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE3ODQzOQ==", "bodyText": "good thing you made me rewrite the test, because I initially had it in the existing ReactorBlockHoundIntegrationTest class, which installs BlockHound, but I omitted that install part when splitting it out in its own testcase... so the test was a false positive!\nfixed that and swithed to FutureTask", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420178439", "createdAt": "2020-05-05T15:00:55Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.scheduler;\n+\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.Test;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+public class BoundedElasticSchedulerBlockhoundTest {\n+\n+\t//see https://github.com/reactor/reactor-core/issues/2143\n+\t@Test\n+\tpublic void shouldNotReportBlockingCallWithZoneIdUsage() throws Throwable {\n+\t\tAtomicReference<Throwable> errorRef = new AtomicReference<>(null);\n+\t\tCountDownLatch latch = new CountDownLatch(1);\n+\t\tSchedulers.single().schedule(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA5NDI1OQ=="}, "originalCommit": {"oid": "f3ef3c89db99e9a5ed5102f25f71080d614a5a19"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTYyNDE1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowNDo0M1rOGQt1Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNToyNjoxOVrOGQuzug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MTI3NA==", "bodyText": "BlockHound.install() would be fine here", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420181274", "createdAt": "2020-05-05T15:04:43Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.scheduler;\n+\n+import java.util.concurrent.FutureTask;\n+\n+import org.junit.Test;\n+\n+import reactor.blockhound.BlockHound;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+public class BoundedElasticSchedulerBlockhoundTest {\n+\n+\tstatic {\n+\t\t// Use the builder to load only our integration to avoid false positives\n+\t\tBlockHound.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a703e483e81d63c5fcd3541957618dc8d952ea80"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4OTExMQ==", "bodyText": "it would be at odds with ReactorBlockHoundIntegrationTest's own usage of the Builder, wouldn't it?", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420189111", "createdAt": "2020-05-05T15:15:11Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.scheduler;\n+\n+import java.util.concurrent.FutureTask;\n+\n+import org.junit.Test;\n+\n+import reactor.blockhound.BlockHound;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+public class BoundedElasticSchedulerBlockhoundTest {\n+\n+\tstatic {\n+\t\t// Use the builder to load only our integration to avoid false positives\n+\t\tBlockHound.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MTI3NA=="}, "originalCommit": {"oid": "a703e483e81d63c5fcd3541957618dc8d952ea80"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE5NzMwNg==", "bodyText": "you can (and should) configure it to isolate test runs by setting forkEvery = maxParallelForks = 1 on blockHoundTest task, similar to how we do it in BlockHound:\nhttps://github.com/reactor/BlockHound/blob/b9c60096113bba2448fe00d90eff791de14495a2/example/build.gradle#L17", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420197306", "createdAt": "2020-05-05T15:26:19Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.scheduler;\n+\n+import java.util.concurrent.FutureTask;\n+\n+import org.junit.Test;\n+\n+import reactor.blockhound.BlockHound;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+public class BoundedElasticSchedulerBlockhoundTest {\n+\n+\tstatic {\n+\t\t// Use the builder to load only our integration to avoid false positives\n+\t\tBlockHound.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MTI3NA=="}, "originalCommit": {"oid": "a703e483e81d63c5fcd3541957618dc8d952ea80"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNTYyODUyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowNTo0MVrOGQt34g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTowNTo0MVrOGQt34g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDE4MTk4Ng==", "bodyText": "If you change it to FutureTask<Disposable>, it will be a one liner :)", "url": "https://github.com/reactor/reactor-core/pull/2144#discussion_r420181986", "createdAt": "2020-05-05T15:05:41Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/blockHoundTest/java/reactor/core/scheduler/BoundedElasticSchedulerBlockhoundTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.core.scheduler;\n+\n+import java.util.concurrent.FutureTask;\n+\n+import org.junit.Test;\n+\n+import reactor.blockhound.BlockHound;\n+import reactor.core.Disposable;\n+import reactor.core.Disposables;\n+\n+/**\n+ * @author Simon Basl\u00e9\n+ */\n+public class BoundedElasticSchedulerBlockhoundTest {\n+\n+\tstatic {\n+\t\t// Use the builder to load only our integration to avoid false positives\n+\t\tBlockHound.builder()\n+\t\t          .with(new ReactorBlockHoundIntegration())\n+\t\t          .install();\n+\t}\n+\n+\t//see https://github.com/reactor/reactor-core/issues/2143\n+\t@Test\n+\tpublic void shouldNotReportBlockingCallWithZoneIdUsage() throws Throwable {\n+\t\tFutureTask<Void> testTask = new FutureTask<>(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a703e483e81d63c5fcd3541957618dc8d952ea80"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1046, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}