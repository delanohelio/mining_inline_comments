{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MTE5NTgz", "number": 2283, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozNzoyOFrOERDIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxNTowM1rOERXmDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzEyNjQ2OnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/advancedFeatures.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzozNzoyOFrOG1ixRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNjoxNzozNVrOG1p6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5NzM4Mg==", "bodyText": "just leaving a comment to make this TODO a part of the review :)", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r458797382", "createdAt": "2020-07-22T13:37:28Z", "author": {"login": "bsideup"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -833,6 +842,8 @@ using a `Context`.\n We first look back at our simple example from the introduction in a bit more detail, as\n the following example shows:\n \n+//TODO change the examples", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56c2ef9bc5a4c6b28ed8c27df99958e8b86b10"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODkxNDQxMA==", "bodyText": "done updated", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r458914410", "createdAt": "2020-07-22T16:17:35Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -833,6 +842,8 @@ using a `Context`.\n We first look back at our simple example from the introduction in a bit more detail, as\n the following example shows:\n \n+//TODO change the examples", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5NzM4Mg=="}, "originalCommit": {"oid": "4b56c2ef9bc5a4c6b28ed8c27df99958e8b86b10"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzE0MDAwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/context/Context.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo0MDozOFrOG1i5zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNToyOTozNVrOG1n29w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5OTU2NQ==", "bodyText": "Perhaps we should not add such method. One can still do the empty().putAll() trick, but adding the method would help with the following wrong pattern that we should discourage:\nMono.deferWithContext(ctx -> {\n    Context.fromReadOnly(ctx).put(\"I have\", \"no idea what I am doing\");\n    return Mono.just(\"foo\");\n});", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r458799565", "createdAt": "2020-07-22T13:40:38Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/util/context/Context.java", "diffHunk": "@@ -191,32 +190,21 @@ static Context of(Map<?, ?> map) {\n \t}\n \n \t/**\n-\t * Resolve a value given a key that exists within the {@link Context}, or throw\n-\t * a {@link NoSuchElementException} if the key is not present.\n+\t * Create a {@link Context} out of a {@link ContextView}, enabling write API on top of\n+\t * the read-only view. If the {@link ContextView} is already a {@link Context}, return\n+\t * the same instance.\n \t *\n-\t * @param key a lookup key to resolve the value within the context\n-\t * @param <T> an unchecked casted generic for fluent typing convenience\n-\t *\n-\t * @return the value resolved for this key (throws if key not found)\n-\t * @throws NoSuchElementException when the given key is not present\n-\t * @see #getOrDefault(Object, Object)\n-\t * @see #getOrEmpty(Object)\n-\t * @see #hasKey(Object)\n+\t * @param contextView the {@link ContextView} to convert (or cast) to {@link Context}\n+\t * @return the converted {@link Context} for further modifications\n \t */\n-\t<T> T get(Object key);\n+\tstatic Context fromReadOnly(ContextView contextView) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56c2ef9bc5a4c6b28ed8c27df99958e8b86b10"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwNjUzNA==", "bodyText": "having the casting trick helps avoiding a bit of junk. I don't think fromReadOnly is misleading compared to plain exposition of full Context API (which guides you towards shooting yourself in the foot).\nmaybe I should rename it to fromView(ContextView) ? or even copyView? (even though for a ContextView that is also a Context, this is not strictly true).", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r458806534", "createdAt": "2020-07-22T13:50:11Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/context/Context.java", "diffHunk": "@@ -191,32 +190,21 @@ static Context of(Map<?, ?> map) {\n \t}\n \n \t/**\n-\t * Resolve a value given a key that exists within the {@link Context}, or throw\n-\t * a {@link NoSuchElementException} if the key is not present.\n+\t * Create a {@link Context} out of a {@link ContextView}, enabling write API on top of\n+\t * the read-only view. If the {@link ContextView} is already a {@link Context}, return\n+\t * the same instance.\n \t *\n-\t * @param key a lookup key to resolve the value within the context\n-\t * @param <T> an unchecked casted generic for fluent typing convenience\n-\t *\n-\t * @return the value resolved for this key (throws if key not found)\n-\t * @throws NoSuchElementException when the given key is not present\n-\t * @see #getOrDefault(Object, Object)\n-\t * @see #getOrEmpty(Object)\n-\t * @see #hasKey(Object)\n+\t * @param contextView the {@link ContextView} to convert (or cast) to {@link Context}\n+\t * @return the converted {@link Context} for further modifications\n \t */\n-\t<T> T get(Object key);\n+\tstatic Context fromReadOnly(ContextView contextView) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5OTU2NQ=="}, "originalCommit": {"oid": "4b56c2ef9bc5a4c6b28ed8c27df99958e8b86b10"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMTQ1NA==", "bodyText": "WDYT about... Context.of(ContextView)? We have these factory methods already, and it would hint that a new context is created", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r458831454", "createdAt": "2020-07-22T14:23:51Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/util/context/Context.java", "diffHunk": "@@ -191,32 +190,21 @@ static Context of(Map<?, ?> map) {\n \t}\n \n \t/**\n-\t * Resolve a value given a key that exists within the {@link Context}, or throw\n-\t * a {@link NoSuchElementException} if the key is not present.\n+\t * Create a {@link Context} out of a {@link ContextView}, enabling write API on top of\n+\t * the read-only view. If the {@link ContextView} is already a {@link Context}, return\n+\t * the same instance.\n \t *\n-\t * @param key a lookup key to resolve the value within the context\n-\t * @param <T> an unchecked casted generic for fluent typing convenience\n-\t *\n-\t * @return the value resolved for this key (throws if key not found)\n-\t * @throws NoSuchElementException when the given key is not present\n-\t * @see #getOrDefault(Object, Object)\n-\t * @see #getOrEmpty(Object)\n-\t * @see #hasKey(Object)\n+\t * @param contextView the {@link ContextView} to convert (or cast) to {@link Context}\n+\t * @return the converted {@link Context} for further modifications\n \t */\n-\t<T> T get(Object key);\n+\tstatic Context fromReadOnly(ContextView contextView) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5OTU2NQ=="}, "originalCommit": {"oid": "4b56c2ef9bc5a4c6b28ed8c27df99958e8b86b10"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODg4MDc1OQ==", "bodyText": "yeah I was using of in my initial local work but somehow felt less explicit. that said, indeed all of methods are obviously about creating new contexts so that could work.", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r458880759", "createdAt": "2020-07-22T15:29:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/context/Context.java", "diffHunk": "@@ -191,32 +190,21 @@ static Context of(Map<?, ?> map) {\n \t}\n \n \t/**\n-\t * Resolve a value given a key that exists within the {@link Context}, or throw\n-\t * a {@link NoSuchElementException} if the key is not present.\n+\t * Create a {@link Context} out of a {@link ContextView}, enabling write API on top of\n+\t * the read-only view. If the {@link ContextView} is already a {@link Context}, return\n+\t * the same instance.\n \t *\n-\t * @param key a lookup key to resolve the value within the context\n-\t * @param <T> an unchecked casted generic for fluent typing convenience\n-\t *\n-\t * @return the value resolved for this key (throws if key not found)\n-\t * @throws NoSuchElementException when the given key is not present\n-\t * @see #getOrDefault(Object, Object)\n-\t * @see #getOrEmpty(Object)\n-\t * @see #hasKey(Object)\n+\t * @param contextView the {@link ContextView} to convert (or cast) to {@link Context}\n+\t * @return the converted {@link Context} for further modifications\n \t */\n-\t<T> T get(Object key);\n+\tstatic Context fromReadOnly(ContextView contextView) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODc5OTU2NQ=="}, "originalCommit": {"oid": "4b56c2ef9bc5a4c6b28ed8c27df99958e8b86b10"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzE0NTQ1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/context/Context.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo0MTo0NVrOG1i9Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo0MTo0NVrOG1i9Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMDM4Nw==", "bodyText": "I believe this belongs to ContextView", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r458800387", "createdAt": "2020-07-22T13:41:45Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/util/context/Context.java", "diffHunk": "@@ -243,36 +223,26 @@ static Context of(Map<?, ?> map) {\n \t\treturn get(key);\n \t}\n \n-\t/**\n-\t * Resolve a value given a key within the {@link Context}.\n-\t *\n-\t * @param key a lookup key to resolve the value within the context\n-\t *\n-\t * @return an {@link Optional} of the value for that key.\n-\t */\n+\t@Override\n \tdefault <T> Optional<T> getOrEmpty(Object key){\n \t\tif(hasKey(key)) {\n \t\t\treturn Optional.of(get(key));\n \t\t}\n \t\treturn Optional.empty();\n \t}\n \n-\t/**\n-\t * Return true if a particular key resolves to a value within the {@link Context}.\n-\t *\n-\t * @param key a lookup key to test for\n-\t *\n-\t * @return true if this context contains the given key\n-\t */\n-\tboolean hasKey(Object key);\n+\t@Override\n+\tdefault boolean isEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56c2ef9bc5a4c6b28ed8c27df99958e8b86b10"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MzE0NjYwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/context/Context.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo0MjowMlrOG1i9tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMzo0MjowMlrOG1i9tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgwMDU2NQ==", "bodyText": "What's the reason to keep this method here and not move it to ContextView?", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r458800565", "createdAt": "2020-07-22T13:42:02Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/util/context/Context.java", "diffHunk": "@@ -243,36 +223,26 @@ static Context of(Map<?, ?> map) {\n \t\treturn get(key);\n \t}\n \n-\t/**\n-\t * Resolve a value given a key within the {@link Context}.\n-\t *\n-\t * @param key a lookup key to resolve the value within the context\n-\t *\n-\t * @return an {@link Optional} of the value for that key.\n-\t */\n+\t@Override\n \tdefault <T> Optional<T> getOrEmpty(Object key){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b56c2ef9bc5a4c6b28ed8c27df99958e8b86b10"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjMxMjgzOnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/advancedFeatures.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoyODo1NFrOG2A7Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDowMDoxOVrOG2D72w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MTQzNQ==", "bodyText": "I think this recommendation makes very little sense, since the same can be done with:\n.flatMap(it -> Mono.deferWithContext(ctx -> doSomething(it, ctx)));\n(not to mention even more optimal transformWithContext", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459291435", "createdAt": "2020-07-23T08:28:54Z", "author": {"login": "bsideup"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -815,15 +817,24 @@ completely different instance, although it is really not recommended (doing so m\n impact third-party libraries that depend on the `Context`).\n \n [[context.read]]\n-=== Reading a `Context`\n+=== Reading a `Context`, through the `ContextView`\n \n-Once you haved populated a `Context`, you can retrieve that data.\n+Once you have populated a `Context`, you may want to peek into it at runtime.\n Most of the time, the responsibility of putting information into the `Context`\n is on the end user's side, while exploiting that information is on the third-party library's side,\n as such libraries are usually upstream of the client code.\n \n-The tool for reading data from the context is the static `Mono.subscriberContext()`\n-method.\n+The read oriented operators allow to obtain data from the `Context` in a chain of operators by exposing\n+its `ContextView`:\n+\n+ - to access the context from a source-like operator, use `deferWithContext` factory method\n+ - to access the context from data signals, use `doOnEach` and `Signal#getContext()`\n+ - alternatively, when dealing with an inner sequence (like inside a `flatMap`), the `ContextView`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM0MDc2Mw==", "bodyText": "I think we have to mention something for users that were accustomed to Mono.subscriberContext() in order to smooth migration, but I can mention the possibility it opens up to perform meaningful async calls within the deferWC.", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459340763", "createdAt": "2020-07-23T10:00:19Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -815,15 +817,24 @@ completely different instance, although it is really not recommended (doing so m\n impact third-party libraries that depend on the `Context`).\n \n [[context.read]]\n-=== Reading a `Context`\n+=== Reading a `Context`, through the `ContextView`\n \n-Once you haved populated a `Context`, you can retrieve that data.\n+Once you have populated a `Context`, you may want to peek into it at runtime.\n Most of the time, the responsibility of putting information into the `Context`\n is on the end user's side, while exploiting that information is on the third-party library's side,\n as such libraries are usually upstream of the client code.\n \n-The tool for reading data from the context is the static `Mono.subscriberContext()`\n-method.\n+The read oriented operators allow to obtain data from the `Context` in a chain of operators by exposing\n+its `ContextView`:\n+\n+ - to access the context from a source-like operator, use `deferWithContext` factory method\n+ - to access the context from data signals, use `doOnEach` and `Signal#getContext()`\n+ - alternatively, when dealing with an inner sequence (like inside a `flatMap`), the `ContextView`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MTQzNQ=="}, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjMxNDg3OnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/advancedFeatures.adoc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODoyOToyM1rOG2A8XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo0OTowM1rOG2FYOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MTc0MA==", "bodyText": "so we're not deprecating Signal#getContext?", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459291740", "createdAt": "2020-07-23T08:29:23Z", "author": {"login": "bsideup"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -815,15 +817,24 @@ completely different instance, although it is really not recommended (doing so m\n impact third-party libraries that depend on the `Context`).\n \n [[context.read]]\n-=== Reading a `Context`\n+=== Reading a `Context`, through the `ContextView`\n \n-Once you haved populated a `Context`, you can retrieve that data.\n+Once you have populated a `Context`, you may want to peek into it at runtime.\n Most of the time, the responsibility of putting information into the `Context`\n is on the end user's side, while exploiting that information is on the third-party library's side,\n as such libraries are usually upstream of the client code.\n \n-The tool for reading data from the context is the static `Mono.subscriberContext()`\n-method.\n+The read oriented operators allow to obtain data from the `Context` in a chain of operators by exposing\n+its `ContextView`:\n+\n+ - to access the context from a source-like operator, use `deferWithContext` factory method\n+ - to access the context from data signals, use `doOnEach` and `Signal#getContext()`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMzOTQ3Nw==", "bodyText": "without transformWithContext, we have to advertise something. But actually, expect the follow up PR that introduces transformWithContext to remove that part.", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459339477", "createdAt": "2020-07-23T09:57:56Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -815,15 +817,24 @@ completely different instance, although it is really not recommended (doing so m\n impact third-party libraries that depend on the `Context`).\n \n [[context.read]]\n-=== Reading a `Context`\n+=== Reading a `Context`, through the `ContextView`\n \n-Once you haved populated a `Context`, you can retrieve that data.\n+Once you have populated a `Context`, you may want to peek into it at runtime.\n Most of the time, the responsibility of putting information into the `Context`\n is on the end user's side, while exploiting that information is on the third-party library's side,\n as such libraries are usually upstream of the client code.\n \n-The tool for reading data from the context is the static `Mono.subscriberContext()`\n-method.\n+The read oriented operators allow to obtain data from the `Context` in a chain of operators by exposing\n+its `ContextView`:\n+\n+ - to access the context from a source-like operator, use `deferWithContext` factory method\n+ - to access the context from data signals, use `doOnEach` and `Signal#getContext()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MTc0MA=="}, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2NDQxMA==", "bodyText": "we're not deprecating Signal.getContext but we'll stop advertising it in the reference guide", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459364410", "createdAt": "2020-07-23T10:49:03Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -815,15 +817,24 @@ completely different instance, although it is really not recommended (doing so m\n impact third-party libraries that depend on the `Context`).\n \n [[context.read]]\n-=== Reading a `Context`\n+=== Reading a `Context`, through the `ContextView`\n \n-Once you haved populated a `Context`, you can retrieve that data.\n+Once you have populated a `Context`, you may want to peek into it at runtime.\n Most of the time, the responsibility of putting information into the `Context`\n is on the end user's side, while exploiting that information is on the third-party library's side,\n as such libraries are usually upstream of the client code.\n \n-The tool for reading data from the context is the static `Mono.subscriberContext()`\n-method.\n+The read oriented operators allow to obtain data from the `Context` in a chain of operators by exposing\n+its `ContextView`:\n+\n+ - to access the context from a source-like operator, use `deferWithContext` factory method\n+ - to access the context from data signals, use `doOnEach` and `Signal#getContext()`", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MTc0MA=="}, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjMyMDM0OnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/advancedFeatures.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODozMDo1MVrOG2A_pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDowMTowMVrOG2D9aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MjU4Mw==", "bodyText": "Since this section is \"simple Context examples\", I'd suggest to use more... errr... \"modern\" way of accessing Context :D\nThis example can at least be rewritten as:\n.flatMap(s -> Mono.deferWithContext(ctx -> Mono.just(s + \" \" + ctx.get(key))));", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459292583", "createdAt": "2020-07-23T08:30:51Z", "author": {"login": "bsideup"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -838,8 +849,8 @@ the following example shows:\n ----\n String key = \"message\";\n Mono<String> r = Mono.just(\"Hello\")\n-                .flatMap( s -> Mono.subscriberContext() //<2>\n-                                   .map( ctx -> s + \" \" + ctx.get(key))) //<3>\n+                .flatMap( s -> Mono.deferWithContext(Mono::just) //<2>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM0MTE2MQ==", "bodyText": "ok", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459341161", "createdAt": "2020-07-23T10:01:01Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -838,8 +849,8 @@ the following example shows:\n ----\n String key = \"message\";\n Mono<String> r = Mono.just(\"Hello\")\n-                .flatMap( s -> Mono.subscriberContext() //<2>\n-                                   .map( ctx -> s + \" \" + ctx.get(key))) //<3>\n+                .flatMap( s -> Mono.deferWithContext(Mono::just) //<2>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5MjU4Mw=="}, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjMyMTQ5OnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/advancedFeatures.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwODozMToxMlrOG2BAZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDowMTo0MFrOG2D-vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5Mjc3Mw==", "bodyText": "same as previous comment about deferWithContext(Mono::just)", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459292773", "createdAt": "2020-07-23T08:31:12Z", "author": {"login": "bsideup"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -870,8 +881,8 @@ the following example:\n String key = \"message\";\n Mono<String> r = Mono.just(\"Hello\")\n                      .subscriberContext(ctx -> ctx.put(key, \"World\")) //<1>\n-                     .flatMap( s -> Mono.subscriberContext()\n-                                        .map( ctx -> s + \" \" + ctx.getOrDefault(key, \"Stranger\")));  //<2>\n+                     .flatMap( s -> Mono.deferWithContext(Mono::just)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM0MTUwMA==", "bodyText": "ok", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459341500", "createdAt": "2020-07-23T10:01:40Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -870,8 +881,8 @@ the following example:\n String key = \"message\";\n Mono<String> r = Mono.just(\"Hello\")\n                      .subscriberContext(ctx -> ctx.put(key, \"World\")) //<1>\n-                     .flatMap( s -> Mono.subscriberContext()\n-                                        .map( ctx -> s + \" \" + ctx.getOrDefault(key, \"Stranger\")));  //<2>\n+                     .flatMap( s -> Mono.deferWithContext(Mono::just)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI5Mjc3Mw=="}, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjQ3ODIwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/context/ContextView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOToxNTowM1rOG2Ceig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMDo0OToxNlrOG2FYrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNjg3NA==", "bodyText": "nit: could use some auto-formatting of methods' implementations", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459316874", "createdAt": "2020-07-23T09:15:03Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/util/context/ContextView.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.util.context;\n+\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import reactor.util.annotation.Nullable;\n+\n+/**\n+ * A read-only view of a collection of key/value pairs that is propagated between components\n+ * such as operators via the context protocol. Contexts are ideal to transport orthogonal\n+ * information such as tracing or security tokens.\n+ * <p>\n+ * {@link Context} is an immutable variant of the same key/value pairs structure which exposes\n+ * a write API that returns new instances on each write.\n+ *\n+ * @author Simon Basl\u00e9\n+ */\n+public interface ContextView {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTM2NDUyNg==", "bodyText": "done", "url": "https://github.com/reactor/reactor-core/pull/2283#discussion_r459364526", "createdAt": "2020-07-23T10:49:16Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/context/ContextView.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright (c) 2011-Present VMware Inc. or its affiliates, All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *        https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package reactor.util.context;\n+\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+import reactor.util.annotation.Nullable;\n+\n+/**\n+ * A read-only view of a collection of key/value pairs that is propagated between components\n+ * such as operators via the context protocol. Contexts are ideal to transport orthogonal\n+ * information such as tracing or security tokens.\n+ * <p>\n+ * {@link Context} is an immutable variant of the same key/value pairs structure which exposes\n+ * a write API that returns new instances on each write.\n+ *\n+ * @author Simon Basl\u00e9\n+ */\n+public interface ContextView {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxNjg3NA=="}, "originalCommit": {"oid": "94c0b644629dc23bafb0ec6a64222774f08ac094"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 899, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}