{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwNjQ3MTE4", "number": 2434, "title": "fix #2433 Polish Sinks javadoc warnings", "bodyText": "", "createdAt": "2020-10-09T14:56:04Z", "url": "https://github.com/reactor/reactor-core/pull/2434", "merged": true, "mergeCommit": {"oid": "677e8c0d3ee08209feb225ef412645d87c3c9ad5"}, "closed": true, "closedAt": "2020-10-12T08:01:51Z", "author": {"login": "aneveu"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQ3ej7gBqjM4NjA1NjkwNDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRvLn_gFqTUwNjM3MzYyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0c888c0bacff44414e4c6ccc2d70269d8668215d", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/0c888c0bacff44414e4c6ccc2d70269d8668215d", "committedDate": "2020-10-09T10:11:33Z", "message": "fix javadoc warnings"}, "afterCommit": {"oid": "e75078058fb0fea387b098bd22c5203fc7a0d2f7", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/e75078058fb0fea387b098bd22c5203fc7a0d2f7", "committedDate": "2020-10-09T14:58:03Z", "message": "fix javadoc warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "feeddd5f196931422649963522917dd404641822", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/feeddd5f196931422649963522917dd404641822", "committedDate": "2020-10-09T15:51:55Z", "message": "fix javadoc warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9be94ddfa287177ea4bc69bc930693c2078bbc0", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/a9be94ddfa287177ea4bc69bc930693c2078bbc0", "committedDate": "2020-10-09T15:54:37Z", "message": "fix javadoc warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "committedDate": "2020-10-09T16:35:42Z", "message": "remove javadoc warnings from Sinks"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2591e21461c5b053772440379dd043ac83319f8", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/e2591e21461c5b053772440379dd043ac83319f8", "committedDate": "2020-10-09T15:18:28Z", "message": "remove javadoc warnings from Sinks"}, "afterCommit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "author": {"user": null}, "url": "https://github.com/reactor/reactor-core/commit/9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151", "committedDate": "2020-10-09T16:35:42Z", "message": "remove javadoc warnings from Sinks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODg5NDc3", "url": "https://github.com/reactor/reactor-core/pull/2434#pullrequestreview-505889477", "createdAt": "2020-10-09T18:07:02Z", "commit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODowNzowMlrOHfT45Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxODoxMDoyOVrOHfT_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5Mzc2NQ==", "bodyText": "that javadoc is actually misleading. should be This processor was blocking and #onNext(Object)", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r502593765", "createdAt": "2020-10-09T18:07:02Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/EmitterProcessor.java", "diffHunk": "@@ -54,8 +54,9 @@\n  * @author Stephane Maldini\n  * @deprecated To be removed in 3.5. Prefer clear cut usage of {@link Sinks} through\n  * variations of {@link Sinks.MulticastSpec#onBackpressureBuffer() Sinks.many().multicast().onBackpressureBuffer()}.\n- * This processor is blocking on {@link EmitterProcessor#emitNext(T)}. This behaviour can be implemented\n- * with the {@link Sinks} API by calling {@link Sinks#many()#tryEmitNext(T)} and retrying, e.g.:\n+ * This processor is blocking on {@link EmitterProcessor#tryEmitNext(Object)}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5NDk2Mg==", "bodyText": "could be put back on two or even one line (too many line returns below)", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r502594962", "createdAt": "2020-10-09T18:09:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -268,7 +268,9 @@ public EmitResult getReason() {\n \t\t/**\n \t\t * A {@link Sinks.One} that works like a conceptual promise: it can be completed\n \t\t * with or without a value at any time, but only once. This completion is replayed to late subscribers.\n-\t\t * Calling {@link One#emitValue(Object)} (or {@link One#tryEmitValue(Object)}) is enough and will\n+\t\t * Calling {@link One#emitValue(Object, Sinks.EmitFailureHandler)} (or", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjU5NTQ2NA==", "bodyText": "too many line returns", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r502595464", "createdAt": "2020-10-09T18:10:29Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/RetryBackoffSpec.java", "diffHunk": "@@ -371,12 +371,15 @@ public RetryBackoffSpec doAfterRetryAsync(\n \t * Set the generator for the {@link Exception} to be propagated when the maximum amount of retries\n \t * is exhausted. By default, throws an {@link Exceptions#retryExhausted(String, Throwable)} with the\n \t * message reflecting the total attempt index, transient attempt index and maximum retry count.\n-\t * The cause of the last {@link RetrySignal} is also added as the exception's cause.\n+\t * The cause of the last {@link reactor.util.retry.Retry.RetrySignal} is also added", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MzY4NzE4", "url": "https://github.com/reactor/reactor-core/pull/2434#pullrequestreview-506368718", "createdAt": "2020-10-12T07:45:25Z", "commit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0NToyNVrOHfyujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0NToyNVrOHfyujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5OTAyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t * Calling {@link One#emitValue(Object, Sinks.EmitFailureHandler)} (or\n          \n          \n            \n            \t\t * {@link One#tryEmitValue(Object)})\n          \n          \n            \n            \t\t * is enough and will\n          \n          \n            \n            \t\t * implicitly produce a {@link Subscriber#onComplete()} signal as well.\n          \n          \n            \n            \t\t * Calling {@link One#emitValue(Object, Sinks.EmitFailureHandler)} (or\n          \n          \n            \n            \t\t * {@link One#tryEmitValue(Object)}) is enough and will implicitly produce\n          \n          \n            \n            \t\t * a {@link Subscriber#onComplete()} signal as well.", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r503099023", "createdAt": "2020-10-12T07:45:25Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -268,7 +268,9 @@ public EmitResult getReason() {\n \t\t/**\n \t\t * A {@link Sinks.One} that works like a conceptual promise: it can be completed\n \t\t * with or without a value at any time, but only once. This completion is replayed to late subscribers.\n-\t\t * Calling {@link One#emitValue(Object)} (or {@link One#tryEmitValue(Object)}) is enough and will\n+\t\t * Calling {@link One#emitValue(Object, Sinks.EmitFailureHandler)} (or\n+\t\t * {@link One#tryEmitValue(Object)})\n+\t\t * is enough and will\n \t\t * implicitly produce a {@link Subscriber#onComplete()} signal as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MzY5MjU4", "url": "https://github.com/reactor/reactor-core/pull/2434#pullrequestreview-506369258", "createdAt": "2020-10-12T07:46:12Z", "commit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0NjoxMlrOHfywPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwNzo0NjoxMlrOHfywPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzA5OTQ1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * The cause of the last {@link reactor.util.retry.Retry.RetrySignal} is also added\n          \n          \n            \n            \t * as\n          \n          \n            \n            \t * the exception's cause.\n          \n          \n            \n            \t * The cause of the last {@link reactor.util.retry.Retry.RetrySignal} is also added\n          \n          \n            \n            \t * as the exception's cause.", "url": "https://github.com/reactor/reactor-core/pull/2434#discussion_r503099454", "createdAt": "2020-10-12T07:46:12Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/RetryBackoffSpec.java", "diffHunk": "@@ -371,12 +371,15 @@ public RetryBackoffSpec doAfterRetryAsync(\n \t * Set the generator for the {@link Exception} to be propagated when the maximum amount of retries\n \t * is exhausted. By default, throws an {@link Exceptions#retryExhausted(String, Throwable)} with the\n \t * message reflecting the total attempt index, transient attempt index and maximum retry count.\n-\t * The cause of the last {@link RetrySignal} is also added as the exception's cause.\n+\t * The cause of the last {@link reactor.util.retry.Retry.RetrySignal} is also added\n+\t * as\n+\t * the exception's cause.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ae2d4d11fbb6c99dc7eaa045a4a7335588e9151"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a018a7d341bfd5f88d6ed3f659941def3a4809fa", "author": {"user": {"login": "simonbasle", "name": "Simon Basl\u00e9"}}, "url": "https://github.com/reactor/reactor-core/commit/a018a7d341bfd5f88d6ed3f659941def3a4809fa", "committedDate": "2020-10-12T07:47:54Z", "message": "Apply minor formatting and rephrasing polish"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2MzczNjIx", "url": "https://github.com/reactor/reactor-core/pull/2434#pullrequestreview-506373621", "createdAt": "2020-10-12T07:52:11Z", "commit": {"oid": "a018a7d341bfd5f88d6ed3f659941def3a4809fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2656, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}