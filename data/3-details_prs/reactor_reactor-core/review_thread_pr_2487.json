{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjQxNjQ3", "number": 2487, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyMjoyMVrOE57HgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1Njo0OVrOE7guiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTcyODY1OnYy", "diffSide": "RIGHT", "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyMjoyMVrOH0rkFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo0MzoxN1rOH0scCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMTc0OQ==", "bodyText": "shouldn't it check for emitTerminalSignalIfAny() here too?", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525001749", "createdAt": "2020-11-17T09:22:21Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -226,6 +221,76 @@ void onComplete() {\n \t\t\tparent.remove(this);\n \t\t\tactual.onComplete();\n \t\t}\n+\n+\t\tprivate void drain(long n) {\n+\t\t\tint i = index;\n+\t\t\tint emitted = 0;\n+\t\t\tfor ( ; ; ) {\n+\t\t\t\tif (cancelled) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t\twhile (i != parent.values.size()) {\n+\t\t\t\t\tif (emitted == n && !parent.violations.contains(REQUEST_OVERFLOW)) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tT t = parent.values.get(i);\n+\t\t\t\t\tif (t == null && !parent.violations.contains(ALLOW_NULL)) {\n+\t\t\t\t\t\tactual.onError(new NullPointerException(\"The \" + i + \"th element was null\"));\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (this.onNext(t)) {\n+\t\t\t\t\t\temitted++;\n+\t\t\t\t\t}\n+\t\t\t\t\ti++;\n+\t\t\t\t\tif (cancelled) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tn = requested;\n+\t\t\t\tif (emitted > n) {\n+\t\t\t\t\tassert parent.violations.contains(Violation.REQUEST_OVERFLOW);\n+\t\t\t\t\tparent.hasOverflown = true;\n+\t\t\t\t\treturn;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxNjA3Mg==", "bodyText": "It could indeed. That branch is the very exceptional case I thought, leaving the publisher in a \"bad state\" state, but it could go the extra mile and also emit terminal signals (which should be also protected against)", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525016072", "createdAt": "2020-11-17T09:43:17Z", "author": {"login": "ericbottard"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -226,6 +221,76 @@ void onComplete() {\n \t\t\tparent.remove(this);\n \t\t\tactual.onComplete();\n \t\t}\n+\n+\t\tprivate void drain(long n) {\n+\t\t\tint i = index;\n+\t\t\tint emitted = 0;\n+\t\t\tfor ( ; ; ) {\n+\t\t\t\tif (cancelled) {\n+\t\t\t\t\treturn;\n+\t\t\t\t}\n+\n+\t\t\t\twhile (i != parent.values.size()) {\n+\t\t\t\t\tif (emitted == n && !parent.violations.contains(REQUEST_OVERFLOW)) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n+\t\t\t\t\tT t = parent.values.get(i);\n+\t\t\t\t\tif (t == null && !parent.violations.contains(ALLOW_NULL)) {\n+\t\t\t\t\t\tactual.onError(new NullPointerException(\"The \" + i + \"th element was null\"));\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (this.onNext(t)) {\n+\t\t\t\t\t\temitted++;\n+\t\t\t\t\t}\n+\t\t\t\t\ti++;\n+\t\t\t\t\tif (cancelled) {\n+\t\t\t\t\t\treturn;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\n+\t\t\t\tn = requested;\n+\t\t\t\tif (emitted > n) {\n+\t\t\t\t\tassert parent.violations.contains(Violation.REQUEST_OVERFLOW);\n+\t\t\t\t\tparent.hasOverflown = true;\n+\t\t\t\t\treturn;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMTc0OQ=="}, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTczOTgwOnYy", "diffSide": "RIGHT", "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyNDo1OVrOH0rq8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTo1MDowMlrOH0suKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMzUwNg==", "bodyText": "wouldn't it be possible for the drain to have no parameter, computing the n from its latest requested state?", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525003506", "createdAt": "2020-11-17T09:24:59Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -338,23 +403,29 @@ public boolean wasRequested() {\n \n \t@Override\n \tpublic ColdTestPublisher<T> assertRequestOverflow() {\n-\t\t//the cold publisher cannot really overflow requests, as it immediately throws\n-\t\tthrow new AssertionError(\"Expected some request overflow\");\n+\t\tif (!hasOverflown) {\n+\t\t\tthrow new AssertionError(\"Expected some request overflow\");\n+\t\t}\n+\t\treturn this;\n \t}\n \n \t@Override\n \tpublic ColdTestPublisher<T> assertNoRequestOverflow() {\n-\t\t//the cold publisher cannot really overflow requests, as it immediately throws\n+\t\tif (hasOverflown) {\n+\t\t\tthrow new AssertionError(\"Unexpected request overflow\");\n+\t\t}\n \t\treturn this;\n \t}\n \n \t@Override\n \tpublic ColdTestPublisher<T> next(@Nullable T t) {\n-\t\tObjects.requireNonNull(t, \"emitted values must be non-null\");\n+\t\tif (!violations.contains(ALLOW_NULL)) {\n+\t\t\tObjects.requireNonNull(t, \"emitted values must be non-null\");\n+\t\t}\n \n \t\tvalues.add(t);\n \t\tfor (ColdTestPublisherSubscription<T> s : subscribers) {\n-\t\t\ts.onNext(t);\n+\t\t\ts.drain(s.requested);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxOTg5OQ==", "bodyText": "I've always been puzzled by that myself everywhere we see this construct, but I guess for the case where it is called from request(n) we can't, can we?\n\t\tpublic void request(long n) {\n\t\t\tif (Operators.validate(n)) {\n\t\t\t\tif (Operators.addCap(REQUESTED, this, n) == 0) {\n\t\t\t\t\tparent.wasRequested = true;\n\t\t\t\t\tdrain(n);\n\t\t\t\t}\n\t\t\t}\n\t\t}", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525019899", "createdAt": "2020-11-17T09:48:57Z", "author": {"login": "ericbottard"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -338,23 +403,29 @@ public boolean wasRequested() {\n \n \t@Override\n \tpublic ColdTestPublisher<T> assertRequestOverflow() {\n-\t\t//the cold publisher cannot really overflow requests, as it immediately throws\n-\t\tthrow new AssertionError(\"Expected some request overflow\");\n+\t\tif (!hasOverflown) {\n+\t\t\tthrow new AssertionError(\"Expected some request overflow\");\n+\t\t}\n+\t\treturn this;\n \t}\n \n \t@Override\n \tpublic ColdTestPublisher<T> assertNoRequestOverflow() {\n-\t\t//the cold publisher cannot really overflow requests, as it immediately throws\n+\t\tif (hasOverflown) {\n+\t\t\tthrow new AssertionError(\"Unexpected request overflow\");\n+\t\t}\n \t\treturn this;\n \t}\n \n \t@Override\n \tpublic ColdTestPublisher<T> next(@Nullable T t) {\n-\t\tObjects.requireNonNull(t, \"emitted values must be non-null\");\n+\t\tif (!violations.contains(ALLOW_NULL)) {\n+\t\t\tObjects.requireNonNull(t, \"emitted values must be non-null\");\n+\t\t}\n \n \t\tvalues.add(t);\n \t\tfor (ColdTestPublisherSubscription<T> s : subscribers) {\n-\t\t\ts.onNext(t);\n+\t\t\ts.drain(s.requested);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMzUwNg=="}, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAyMDcxNQ==", "bodyText": "Actually, we can, since it is only called if total request now equals n. Hmmm \ud83e\udd14", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525020715", "createdAt": "2020-11-17T09:50:02Z", "author": {"login": "ericbottard"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -338,23 +403,29 @@ public boolean wasRequested() {\n \n \t@Override\n \tpublic ColdTestPublisher<T> assertRequestOverflow() {\n-\t\t//the cold publisher cannot really overflow requests, as it immediately throws\n-\t\tthrow new AssertionError(\"Expected some request overflow\");\n+\t\tif (!hasOverflown) {\n+\t\t\tthrow new AssertionError(\"Expected some request overflow\");\n+\t\t}\n+\t\treturn this;\n \t}\n \n \t@Override\n \tpublic ColdTestPublisher<T> assertNoRequestOverflow() {\n-\t\t//the cold publisher cannot really overflow requests, as it immediately throws\n+\t\tif (hasOverflown) {\n+\t\t\tthrow new AssertionError(\"Unexpected request overflow\");\n+\t\t}\n \t\treturn this;\n \t}\n \n \t@Override\n \tpublic ColdTestPublisher<T> next(@Nullable T t) {\n-\t\tObjects.requireNonNull(t, \"emitted values must be non-null\");\n+\t\tif (!violations.contains(ALLOW_NULL)) {\n+\t\t\tObjects.requireNonNull(t, \"emitted values must be non-null\");\n+\t\t}\n \n \t\tvalues.add(t);\n \t\tfor (ColdTestPublisherSubscription<T> s : subscribers) {\n-\t\t\ts.onNext(t);\n+\t\t\ts.drain(s.requested);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwMzUwNg=="}, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTc1MzYzOnYy", "diffSide": "RIGHT", "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyODowMVrOH0rzTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyODowMVrOH0rzTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNTY0NQ==", "bodyText": "drain has to be guarded by a WIP in order to avoid parallel drains (since there is no restriction on which thread calls next from the TestPublisher API vs request from the Subscription API)", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525005645", "createdAt": "2020-11-17T09:28:01Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -226,6 +221,76 @@ void onComplete() {\n \t\t\tparent.remove(this);\n \t\t\tactual.onComplete();\n \t\t}\n+\n+\t\tprivate void drain(long n) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTc1OTA5OnYy", "diffSide": "RIGHT", "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOToyOToyMVrOH0r21g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMToyNTowMVrOH0wZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjU1MA==", "bodyText": "it only caches if boolean errorOnOverflow is false", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525006550", "createdAt": "2020-11-17T09:29:21Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.\n \t *\n \t * @param <T> the type of the publisher\n \t * @return the new {@link TestPublisher}\n \t */\n \tpublic static <T> TestPublisher<T> createCold() {\n-\t\treturn new ColdTestPublisher<>();\n+\t\treturn new ColdTestPublisher<>(false, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.\n+\t * <p>\n+\t * The returned publisher will emit an overflow error if there is not enough request from subscribers.\n+\t *\n+\t * @param <T> the type of the publisher\n+\t * @return the new {@link TestPublisher}\n+\t */\n+\tpublic static <T> TestPublisher<T> createColdNonBuffering() {\n+\t\treturn new ColdTestPublisher<>(true, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxNzE0OA==", "bodyText": "No, it accumulates values and replays them to new subscribers in all cases. The boolean flag only drives what happens when there is more (total) request than values in the values buffer: wait for more request, or error().", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525017148", "createdAt": "2020-11-17T09:44:48Z", "author": {"login": "ericbottard"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.\n \t *\n \t * @param <T> the type of the publisher\n \t * @return the new {@link TestPublisher}\n \t */\n \tpublic static <T> TestPublisher<T> createCold() {\n-\t\treturn new ColdTestPublisher<>();\n+\t\treturn new ColdTestPublisher<>(false, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.\n+\t * <p>\n+\t * The returned publisher will emit an overflow error if there is not enough request from subscribers.\n+\t *\n+\t * @param <T> the type of the publisher\n+\t * @return the new {@link TestPublisher}\n+\t */\n+\tpublic static <T> TestPublisher<T> createColdNonBuffering() {\n+\t\treturn new ColdTestPublisher<>(true, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjU1MA=="}, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4MDg4Nw==", "bodyText": "ok then I'd rephrase the second paragraph in createCold and createColdNonBuffering above, then. Will comment there.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525080887", "createdAt": "2020-11-17T11:25:01Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.\n \t *\n \t * @param <T> the type of the publisher\n \t * @return the new {@link TestPublisher}\n \t */\n \tpublic static <T> TestPublisher<T> createCold() {\n-\t\treturn new ColdTestPublisher<>();\n+\t\treturn new ColdTestPublisher<>(false, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.\n+\t * <p>\n+\t * The returned publisher will emit an overflow error if there is not enough request from subscribers.\n+\t *\n+\t * @param <T> the type of the publisher\n+\t * @return the new {@link TestPublisher}\n+\t */\n+\tpublic static <T> TestPublisher<T> createColdNonBuffering() {\n+\t\treturn new ColdTestPublisher<>(true, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwNjU1MA=="}, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MTc3Mjg1OnYy", "diffSide": "RIGHT", "path": "reactor-test/src/test/java/reactor/test/publisher/ColdTestPublisherTests.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QwOTozMjoyNFrOH0r_Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMTowMjowN1rOH4IgwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwODczNQ==", "bodyText": "If that test is made that way because the StepVerifier complains that it's under-requesting when adding an expectNext(\"bar\"), that under-requesting check can be disabled using StepVerifierOptions (namely, StepVerifierOptions#checkUnderRequesting(false)).", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525008735", "createdAt": "2020-11-17T09:32:24Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/test/java/reactor/test/publisher/ColdTestPublisherTests.java", "diffHunk": "@@ -111,6 +124,21 @@ public void coldDisallowsOverflow() {\n \t\tpublisher.assertNoRequestOverflow();\n \t}\n \n+\t@Test\n+\tpublic void misbehavingAllowsOverflow() {\n+\t\tTestPublisher<String> publisher = TestPublisher.createColdNonCompliant(false, TestPublisher.Violation.REQUEST_OVERFLOW);\n+\n+\t\tassertThatExceptionOfType(AssertionError.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxODE5MQ==", "bodyText": "I'm not sure I get what you mean by \"made that way\" (do you mean using assertThatExceptionOfType().isThrownBy() (ie direct exception)?).\nThat test was copied and adapted from the DefaultTestPublisher IIRC.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525018191", "createdAt": "2020-11-17T09:46:27Z", "author": {"login": "ericbottard"}, "path": "reactor-test/src/test/java/reactor/test/publisher/ColdTestPublisherTests.java", "diffHunk": "@@ -111,6 +124,21 @@ public void coldDisallowsOverflow() {\n \t\tpublisher.assertNoRequestOverflow();\n \t}\n \n+\t@Test\n+\tpublic void misbehavingAllowsOverflow() {\n+\t\tTestPublisher<String> publisher = TestPublisher.createColdNonCompliant(false, TestPublisher.Violation.REQUEST_OVERFLOW);\n+\n+\t\tassertThatExceptionOfType(AssertionError.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwODczNQ=="}, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYyMTc2MQ==", "bodyText": "after looking at the test again, it appears it is fine, nevermind", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r528621761", "createdAt": "2020-11-23T11:02:07Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/test/java/reactor/test/publisher/ColdTestPublisherTests.java", "diffHunk": "@@ -111,6 +124,21 @@ public void coldDisallowsOverflow() {\n \t\tpublisher.assertNoRequestOverflow();\n \t}\n \n+\t@Test\n+\tpublic void misbehavingAllowsOverflow() {\n+\t\tTestPublisher<String> publisher = TestPublisher.createColdNonCompliant(false, TestPublisher.Violation.REQUEST_OVERFLOW);\n+\n+\t\tassertThatExceptionOfType(AssertionError.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAwODczNQ=="}, "originalCommit": {"oid": "c3b7017b8cc7f08a894c9b8a36963c964eaffa99"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjI2NzA3OnYy", "diffSide": "RIGHT", "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTozMzo0OFrOH0wsSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjo0MToxN1rOH3XWoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NTc2OA==", "bodyText": "Let's use buffers instead of caches. Also, rephrase the and replays... part to something more along the lines of:\n\nand tracks how many elements have been seen by each subscriber in order to correctly replay the buffer to each subscriber, with backpressure.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525085768", "createdAt": "2020-11-17T11:33:48Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxNjM1Mg==", "bodyText": "fixed in polish: javadoc, formatting and null detection 84d0afe", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r527816352", "createdAt": "2020-11-20T16:41:17Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NTc2OA=="}, "originalCommit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjI2OTk4OnYy", "diffSide": "RIGHT", "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTozNDozNFrOH0wuFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTozNDozNFrOH0wuFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4NjIyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * The returned publisher will buffer values if there is not enough request from subscribers.\n          \n          \n            \n            \t * The publisher honors backpressure, holding off emitting newest items\n          \n          \n            \n            \t * from the buffer if the subscriber doesn't have enough request.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525086229", "createdAt": "2020-11-17T11:34:34Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjI4Njc5OnYy", "diffSide": "RIGHT", "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTozOToyNVrOH0w4Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTozOToyNVrOH0w4Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4ODg2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n          \n          \n            \n            \t * all subscribers upon subscription.\n          \n          \n            \n            \t * <p>\n          \n          \n            \n            \t * The returned publisher will emit an overflow error if there is not enough request from subscribers.\n          \n          \n            \n            \t * subscribers. It buffers the {@link #next(Object)} events and tracks how many\n          \n          \n            \n            \t * elements have been seen by each subscriber in order to correctly replay the\n          \n          \n            \n            \t * buffer.\n          \n          \n            \n            \t * <p>\n          \n          \n            \n            \t * The returned publisher will emit an overflow error if a new subscriber's\n          \n          \n            \n            \t * first request is lower than the current buffer size, or if a new element\n          \n          \n            \n            \t * is pushed to a registered subscriber that has zero pending demand.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525088867", "createdAt": "2020-11-17T11:39:25Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.\n \t *\n \t * @param <T> the type of the publisher\n \t * @return the new {@link TestPublisher}\n \t */\n \tpublic static <T> TestPublisher<T> createCold() {\n-\t\treturn new ColdTestPublisher<>();\n+\t\treturn new ColdTestPublisher<>(false, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.\n+\t * <p>\n+\t * The returned publisher will emit an overflow error if there is not enough request from subscribers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjI5MzAxOnYy", "diffSide": "RIGHT", "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0MDo1M1rOH0w79Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMTo0MDo1M1rOH0w79Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTA4OTc4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n          \n          \n            \n            \t * all subscribers upon subscription.\n          \n          \n            \n            \t * subscribers. It buffers the {@link #next(Object)} events and tracks how many\n          \n          \n            \n            \t * elements have been seen by each subscriber in order to correctly replay the\n          \n          \n            \n            \t * buffer.", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r525089781", "createdAt": "2020-11-17T11:40:53Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/TestPublisher.java", "diffHunk": "@@ -72,13 +75,43 @@\n \t * subscribers. It caches the {@link #next(Object)} events and replays them to\n \t * all subscribers upon subscription.\n \t * <p>\n-\t * Note that this type of {@link Publisher} isn't\n+\t * The returned publisher will buffer values if there is not enough request from subscribers.\n \t *\n \t * @param <T> the type of the publisher\n \t * @return the new {@link TestPublisher}\n \t */\n \tpublic static <T> TestPublisher<T> createCold() {\n-\t\treturn new ColdTestPublisher<>();\n+\t\treturn new ColdTestPublisher<>(false, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.\n+\t * <p>\n+\t * The returned publisher will emit an overflow error if there is not enough request from subscribers.\n+\t *\n+\t * @param <T> the type of the publisher\n+\t * @return the new {@link TestPublisher}\n+\t */\n+\tpublic static <T> TestPublisher<T> createColdNonBuffering() {\n+\t\treturn new ColdTestPublisher<>(true, EnumSet.noneOf(Violation.class));\n+\t}\n+\n+\t/**\n+\t * Create a cold {@link TestPublisher}, which can be subscribed to by multiple\n+\t * subscribers. It caches the {@link #next(Object)} events and replays them to\n+\t * all subscribers upon subscription.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc0585c3a52f64d5607db7ace79c88b604c97145"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODM3NjQwOnYy", "diffSide": "RIGHT", "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1Njo0OVrOH3MzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTo1Njo0OVrOH3MzRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY0MzQ2MQ==", "bodyText": "you need to perform that check atomically in the decrementAndGet at the end of the loop, rather than here, otherwise it defeats the purpose:\n\nthread A wins the guard and goes into the loop\nthread B looses and exits\nthread A does a first loop, decrements\nthread A does a second loop, corresponding to thread B's event\nthread A decrements to 0\nthread C enters drain and wins the guard (swapping from 0 to 1)\nthread A reads WIP and sees 1\n\ud83d\udc1b both A and C enter the loop and clash", "url": "https://github.com/reactor/reactor-core/pull/2487#discussion_r527643461", "createdAt": "2020-11-20T11:56:49Z", "author": {"login": "simonbasle"}, "path": "reactor-test/src/main/java/reactor/test/publisher/ColdTestPublisher.java", "diffHunk": "@@ -226,6 +226,95 @@ void onComplete() {\n \t\t\tparent.remove(this);\n \t\t\tactual.onComplete();\n \t\t}\n+\n+\t\tprivate void drain() {\n+\t\t\tif (WIP.getAndIncrement(this) == 0) {\n+\t\t\t\twhile (WIP.get(this) > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fd7dedc22e4096bc6aaca64542127af1eacef17"}, "originalPosition": 182}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 840, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}