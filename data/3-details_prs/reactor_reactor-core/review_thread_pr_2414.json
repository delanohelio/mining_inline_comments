{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4Mzc4NjQz", "number": 2414, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODo1ODo0M1rOEqohRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNzo0MlrOErEcIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTM5NTI0OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODo1ODo0M1rOHc8r8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODo1ODo0M1rOHc8r8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDExNjQ2NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Other than instructing to retry, the handler are allowed to have side effects\n          \n          \n            \n            \t * Other than instructing to retry, the handlers are allowed to have side effects", "url": "https://github.com/reactor/reactor-core/pull/2414#discussion_r500116465", "createdAt": "2020-10-06T08:58:43Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -191,9 +198,13 @@ public Emission getReason() {\n \t}\n \n \t/**\n-\t * A handler for any non-successful emission result from operations\n-\t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n-\t * that allows retrying or failing the operation.\n+\t * A handler supporting the emit API (eg. {@link Many#emitNext(Object, EmitFailureHandler)}),\n+\t * checking non-successful emission results from underlying {@link Many#tryEmitNext(Object) tryEmit}\n+\t * API calls to decide whether or not such calls should be retried.\n+\t * Other than instructing to retry, the handler are allowed to have side effects", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4f3245c9bf69162e91431a1c2fc71b1d0270139"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMTM5NzkxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODo1OTozMFrOHc8tvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQwODo1OTozMFrOHc8tvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDExNjkyNw==", "bodyText": "not 100% sure about this one, but:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * like parking the current thread for longer retry loops. They don't however influence the\n          \n          \n            \n            \t * like parking the current thread for longer retry loops. They don't, however, influence the", "url": "https://github.com/reactor/reactor-core/pull/2414#discussion_r500116927", "createdAt": "2020-10-06T08:59:30Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/core/publisher/Sinks.java", "diffHunk": "@@ -191,9 +198,13 @@ public Emission getReason() {\n \t}\n \n \t/**\n-\t * A handler for any non-successful emission result from operations\n-\t * such as {@link Many#emitNext(Object, EmitFailureHandler)}\n-\t * that allows retrying or failing the operation.\n+\t * A handler supporting the emit API (eg. {@link Many#emitNext(Object, EmitFailureHandler)}),\n+\t * checking non-successful emission results from underlying {@link Many#tryEmitNext(Object) tryEmit}\n+\t * API calls to decide whether or not such calls should be retried.\n+\t * Other than instructing to retry, the handler are allowed to have side effects\n+\t * like parking the current thread for longer retry loops. They don't however influence the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4f3245c9bf69162e91431a1c2fc71b1d0270139"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTk2OTYwOnYy", "diffSide": "RIGHT", "path": "docs/asciidoc/advancedFeatures.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODoyNzo0MlrOHdoO9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToyOTo1M1rOHdqrtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTk0Mg==", "bodyText": "I would have inverted those two lines as orThrow is used after the comment and though one may not really understand where does it comes from", "url": "https://github.com/reactor/reactor-core/pull/2414#discussion_r500829942", "createdAt": "2020-10-07T08:27:42Z", "author": {"login": "aneveu"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -193,21 +193,21 @@ Compare the first example to the second example, shown in the following code:\n ====\n [source,java]\n ----\n-Sink<String> hotSource = Sinks.many().multicast().onBackpressureError();\n+Sinks.Many<String> hotSource = Sinks.many().unsafe().multicast().directBestEffort();\n \n Flux<String> hotFlux = hotSource.asFlux().map(String::toUpperCase);\n \n-\n hotFlux.subscribe(d -> System.out.println(\"Subscriber 1 to Hot Source: \"+d));\n \n-hotSource.next(\"blue\")\n-         .next(\"green\");\n+hotSource.emitNext(\"blue\", FAIL_FAST);\n+//note: orThrow is an alternative to emitNext+Sinks.EmitFailureHandler.FAIL_FAST above, suitable for tests\n+hotSource.tryEmitNext(\"green\").orThrow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab517e7d7312eaf630b7dd8ef72f04487bf94d78"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg3MDA2OQ==", "bodyText": "I updated to use a callout. found a bad callout in an unrelated asciidoc file and fixed it as a separate commit, so I rebased the PR into 2 commits FYI", "url": "https://github.com/reactor/reactor-core/pull/2414#discussion_r500870069", "createdAt": "2020-10-07T09:29:53Z", "author": {"login": "simonbasle"}, "path": "docs/asciidoc/advancedFeatures.adoc", "diffHunk": "@@ -193,21 +193,21 @@ Compare the first example to the second example, shown in the following code:\n ====\n [source,java]\n ----\n-Sink<String> hotSource = Sinks.many().multicast().onBackpressureError();\n+Sinks.Many<String> hotSource = Sinks.many().unsafe().multicast().directBestEffort();\n \n Flux<String> hotFlux = hotSource.asFlux().map(String::toUpperCase);\n \n-\n hotFlux.subscribe(d -> System.out.println(\"Subscriber 1 to Hot Source: \"+d));\n \n-hotSource.next(\"blue\")\n-         .next(\"green\");\n+hotSource.emitNext(\"blue\", FAIL_FAST);\n+//note: orThrow is an alternative to emitNext+Sinks.EmitFailureHandler.FAIL_FAST above, suitable for tests\n+hotSource.tryEmitNext(\"green\").orThrow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgyOTk0Mg=="}, "originalCommit": {"oid": "ab517e7d7312eaf630b7dd8ef72f04487bf94d78"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 788, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}