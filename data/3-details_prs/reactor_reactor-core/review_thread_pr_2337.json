{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzY4NTY1", "number": 2337, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyMTowNlrOEagKtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowOToxNFrOEf5bHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjI1NDYyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyMTowNlrOHD-Q5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoyNzozOFrOHIS9dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNzkxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic ContextView retryContext() {return retryContext;}\n          \n          \n            \n            \tpublic ContextView retryContext() {\n          \n          \n            \n            \t\treturn retryContext;\n          \n          \n            \n            \t}", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r473927911", "createdAt": "2020-08-20T12:21:06Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -60,6 +68,10 @@\n \t */\n \tpublic abstract Publisher<?> generateCompanion(Flux<RetrySignal> retrySignals);\n \n+\n+\tpublic ContextView retryContext() {return retryContext;}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea4e330bcb7e47a61a9e90ca5436c8bed9d38d65"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyODUxMg==", "bodyText": "Could you also please clarify retryContextView() vs retryContext()?", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r473928512", "createdAt": "2020-08-20T12:22:12Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -60,6 +68,10 @@\n \t */\n \tpublic abstract Publisher<?> generateCompanion(Flux<RetrySignal> retrySignals);\n \n+\n+\tpublic ContextView retryContext() {return retryContext;}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNzkxMQ=="}, "originalCommit": {"oid": "ea4e330bcb7e47a61a9e90ca5436c8bed9d38d65"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ2MTMwMg==", "bodyText": "I added a comment on Retry.retryContext().\nWe could also decide to rename RetrySignal.retryContextView() -> RetrySignal.retryContext(), let me know what you think.", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r478461302", "createdAt": "2020-08-27T14:27:38Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -60,6 +68,10 @@\n \t */\n \tpublic abstract Publisher<?> generateCompanion(Flux<RetrySignal> retrySignals);\n \n+\n+\tpublic ContextView retryContext() {return retryContext;}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNzkxMQ=="}, "originalCommit": {"oid": "ea4e330bcb7e47a61a9e90ca5436c8bed9d38d65"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzYyOTg0OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTo1ODoxM1rOHKu-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMjoxMTowOVrOHMjqYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzM4MA==", "bodyText": "the same test should probably be added with a Retry.backoff (ie. using a RetryBackoffSpec instead of a RetrySpec) for good measure.", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r481017380", "createdAt": "2020-09-01T09:58:13Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -577,13 +577,43 @@ public void inners() {\n \t\tSinks.Many<Retry.RetrySignal> signaller = Sinks.many().multicast().onBackpressureError();\n \t\tFlux<Integer> when = Flux.empty();\n \t\tFluxRetryWhen.RetryWhenMainSubscriber<Integer> main = new FluxRetryWhen\n-\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when);\n+\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when, Context.empty());\n \n \t\tList<Scannable> inners = main.inners().collect(Collectors.toList());\n \n \t\tassertThat(inners).containsExactly((Scannable) signaller, main.otherArbiter);\n \t}\n \n+\t@Test\n+\tpublic void retryContextExposedOnRetrySignal() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA4NDA4Mg==", "bodyText": "One could argue that's not the spirit of the test: given the discussion above below\u2b07\ufe0f about the fact that the context is borne by Retry, this works by design.\nAdding a test about backoff would only test that the context is correctly copied over when builder methods are used (but then this is a different kind of test, with many combinations that we don't have for other fields either).\nWDYT?", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482084082", "createdAt": "2020-09-02T13:50:10Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -577,13 +577,43 @@ public void inners() {\n \t\tSinks.Many<Retry.RetrySignal> signaller = Sinks.many().multicast().onBackpressureError();\n \t\tFlux<Integer> when = Flux.empty();\n \t\tFluxRetryWhen.RetryWhenMainSubscriber<Integer> main = new FluxRetryWhen\n-\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when);\n+\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when, Context.empty());\n \n \t\tList<Scannable> inners = main.inners().collect(Collectors.toList());\n \n \t\tassertThat(inners).containsExactly((Scannable) signaller, main.otherArbiter);\n \t}\n \n+\t@Test\n+\tpublic void retryContextExposedOnRetrySignal() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzM4MA=="}, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyODE0Mg==", "bodyText": "ok, maybe not duplicating the full test. I would maybe just test both constructors to ensure the retry context is passed to super ctor in both flavors of specs, wdyt?", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482828142", "createdAt": "2020-09-03T09:10:47Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -577,13 +577,43 @@ public void inners() {\n \t\tSinks.Many<Retry.RetrySignal> signaller = Sinks.many().multicast().onBackpressureError();\n \t\tFlux<Integer> when = Flux.empty();\n \t\tFluxRetryWhen.RetryWhenMainSubscriber<Integer> main = new FluxRetryWhen\n-\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when);\n+\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when, Context.empty());\n \n \t\tList<Scannable> inners = main.inners().collect(Collectors.toList());\n \n \t\tassertThat(inners).containsExactly((Scannable) signaller, main.otherArbiter);\n \t}\n \n+\t@Test\n+\tpublic void retryContextExposedOnRetrySignal() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzM4MA=="}, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkwNTI0NQ==", "bodyText": "Have a look at ff3aed1 and let me know what you think", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482905245", "createdAt": "2020-09-03T11:25:52Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -577,13 +577,43 @@ public void inners() {\n \t\tSinks.Many<Retry.RetrySignal> signaller = Sinks.many().multicast().onBackpressureError();\n \t\tFlux<Integer> when = Flux.empty();\n \t\tFluxRetryWhen.RetryWhenMainSubscriber<Integer> main = new FluxRetryWhen\n-\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when);\n+\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when, Context.empty());\n \n \t\tList<Scannable> inners = main.inners().collect(Collectors.toList());\n \n \t\tassertThat(inners).containsExactly((Scannable) signaller, main.otherArbiter);\n \t}\n \n+\t@Test\n+\tpublic void retryContextExposedOnRetrySignal() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzM4MA=="}, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyOTI1MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482929250", "createdAt": "2020-09-03T12:11:09Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -577,13 +577,43 @@ public void inners() {\n \t\tSinks.Many<Retry.RetrySignal> signaller = Sinks.many().multicast().onBackpressureError();\n \t\tFlux<Integer> when = Flux.empty();\n \t\tFluxRetryWhen.RetryWhenMainSubscriber<Integer> main = new FluxRetryWhen\n-\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when);\n+\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when, Context.empty());\n \n \t\tList<Scannable> inners = main.inners().collect(Collectors.toList());\n \n \t\tassertThat(inners).containsExactly((Scannable) signaller, main.otherArbiter);\n \t}\n \n+\t@Test\n+\tpublic void retryContextExposedOnRetrySignal() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzM4MA=="}, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzY0NTYxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDowMjo0N1rOHKvHzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODo1OTozMVrOHMdBBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxOTg1NA==", "bodyText": "I was wondering if we should add retryContext directly to Retry like that. Alternatively we could isolate the feature to RetrySpec and RetryBackoffSpec, injecting the ContextView into the ImmutableRetrySignal they expose to the companion publisher they create (since it is already a .copy())...\nThat said, the idea of the feature leaks into RetrySignal interface anyway, so it could be argued that it must be enforced at Retry level.\nAt a minimum, Retry no-arg constructor should be maintained though. This adding of a protected ctor introduces a breaking change that we can avoid.", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r481019854", "createdAt": "2020-09-01T10:02:47Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -47,6 +49,12 @@\n  */\n public abstract class Retry {\n \n+\tprivate final ContextView retryContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2MjM5OA==", "bodyText": "I was wondering if we should add retryContext directly to Retry like that. Alternatively we could isolate the feature to RetrySpec and RetryBackoffSpec, injecting the ContextView into the ImmutableRetrySignal they expose to the companion publisher they create (since it is already a .copy())...\n\nWe had that questioning with @aneveu but the issue is this: Retry exists so that users can bring their own, and the framework only knows about Retry when it creates RetrySignals, so the context has to belong to Retry (and RetrySignal).\n\nAt a minimum, Retry no-arg constructor should be maintained though. This adding of a protected ctor introduces a breaking change that we can avoid.\n\nwill do", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482062398", "createdAt": "2020-09-02T13:20:11Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -47,6 +49,12 @@\n  */\n public abstract class Retry {\n \n+\tprivate final ContextView retryContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxOTg1NA=="}, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA2Mzg0OQ==", "bodyText": "This adding of a protected ctor introduces a breaking change that we can avoid.\n\nBTW, wondering why japicmp did not detect that...", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482063849", "createdAt": "2020-09-02T13:22:19Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -47,6 +49,12 @@\n  */\n public abstract class Retry {\n \n+\tprivate final ContextView retryContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxOTg1NA=="}, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3ODMxNA==", "bodyText": "Oh, but we have Retry on branch 3.3.x but not in 3.3.0.RELEASE, that is why...", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482078314", "createdAt": "2020-09-02T13:42:28Z", "author": {"login": "ericbottard"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -47,6 +49,12 @@\n  */\n public abstract class Retry {\n \n+\tprivate final ContextView retryContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxOTg1NA=="}, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyMDM1Ng==", "bodyText": "Oh, but we have Retry on branch 3.3.x but not in 3.3.0.RELEASE, that is why...\n\nAh damn!\n\nThe framework only knows about Retry when it creates RetrySignals, so the context has to belong to Retry (and RetrySignal).\n\nYeah I saw that... RetryContext is a bit different from all the other spec parameters, in the sense that it affects the RetrySignal, so yeah it must mean it has to live in Retry directly.", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482820356", "createdAt": "2020-09-03T08:59:31Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -47,6 +49,12 @@\n  */\n public abstract class Retry {\n \n+\tprivate final ContextView retryContext;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxOTg1NA=="}, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzc3OTM3OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/retry/ImmutableRetrySignal.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDozNDozNVrOHKwZuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDozNDozNVrOHKwZuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MDgyNA==", "bodyText": "format: missing newline", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r481040824", "createdAt": "2020-09-01T10:34:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/ImmutableRetrySignal.java", "diffHunk": "@@ -27,12 +30,18 @@\n \tfinal long      failureTotalIndex;\n \tfinal long      failureSubsequentIndex;\n \tfinal Throwable failure;\n+\tfinal ContextView retryContext;\n \n \tImmutableRetrySignal(long failureTotalIndex, long failureSubsequentIndex,\n \t\t\tThrowable failure) {\n+\t\tthis(failureTotalIndex, failureSubsequentIndex, failure, Context.empty());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNzc4MDIyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/core/publisher/FluxRetryWhen.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDozNDo1M1rOHKwaOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDozNDo1M1rOHKwaOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MDk1NA==", "bodyText": "nitpick format: unnecessary newline", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r481040954", "createdAt": "2020-09-01T10:34:53Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxRetryWhen.java", "diffHunk": "@@ -113,12 +114,15 @@ public Object scanUnsafe(Attr key) {\n \t\t\n \t\tRetryWhenMainSubscriber(CoreSubscriber<? super T> actual,\n \t\t\t\tSinks.Many<Retry.RetrySignal> signaller,\n-\t\t\t\tCorePublisher<? extends T> source) {\n+\t\t\t\tCorePublisher<? extends T> source,\n+\t\t\t\tContextView retryContext) {\n \t\t\tsuper(actual);\n \t\t\tthis.signaller = signaller;\n \t\t\tthis.source = source;\n \t\t\tthis.otherArbiter = new Operators.DeferredSubscription();\n \t\t\tthis.context = actual.currentContext();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODgxMjUwOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowNjo1M1rOHMdTSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowNjo1M1rOHMdTSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNTAzMw==", "bodyText": "I'm still unsure about that one. should it be retryContextView()? or even simpler, context()? (as Retry implementors are less likely to implement stuff that is unrelated to retries, unlike eg. RetrySignal). In the end, I think I like the simplicity of retryContext() though...", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482825033", "createdAt": "2020-09-03T09:06:53Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -60,6 +72,16 @@\n \t */\n \tpublic abstract Publisher<?> generateCompanion(Flux<RetrySignal> retrySignals);\n \n+\t/**\n+\t * Return the user provided context that was set at construction time.\n+\t *\n+\t * @return the user provided context that will be accessible via {@link RetrySignal#retryContextView()}.\n+\t */\n+\tpublic ContextView retryContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821114aa1c19cef4a054a44b15bfce9098ec54c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODgxNjcxOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowNzo1NVrOHMdV-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowNzo1NVrOHMdV-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNTcyMQ==", "bodyText": "I would say \"reset/rollbacked or otherwise mutated before or after a retry\"", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482825721", "createdAt": "2020-09-03T09:07:55Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -92,6 +114,16 @@\n \t\t */\n \t\tThrowable failure();\n \n+\t\t/**\n+\t\t * Return a read-only view of the user provided context, which may be used to store\n+\t\t * objects to be reset/rollbacked before a retry.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821114aa1c19cef4a054a44b15bfce9098ec54c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODgyMTQyOnYy", "diffSide": "RIGHT", "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowOToxNFrOHMdY_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowOToxNFrOHMdY_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNjQ5Mw==", "bodyText": "I agree on using ContextView suffix, as this is the part of the API that will be most visible to users and thus further clarifies that this is read only.", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482826493", "createdAt": "2020-09-03T09:09:14Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -92,6 +114,16 @@\n \t\t */\n \t\tThrowable failure();\n \n+\t\t/**\n+\t\t * Return a read-only view of the user provided context, which may be used to store\n+\t\t * objects to be reset/rollbacked before a retry.\n+\t\t *\n+\t\t * @return a read-only view of a user provided context.\n+\t\t */\n+\t\tdefault ContextView retryContextView() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821114aa1c19cef4a054a44b15bfce9098ec54c"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 936, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}