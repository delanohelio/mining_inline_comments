{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NDUyMzg2", "number": 2045, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozNzozNVrODffuyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjozOTozOVrODfneoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzUyMzI5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozNzozNVrOFpOzmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozNzozNVrOFpOzmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3ODUyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t1, 2, r -> new Thread(r,\"raceActiveDeferredDirectDispose\"), 3);\n          \n          \n            \n            \t\t\t\t1, 2, r -> new Thread(r, \"raceActiveDeferredDirectDispose\"), 3);", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378778520", "createdAt": "2020-02-13T10:37:35Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -680,6 +681,47 @@ public void defaultBoundedElasticConfigurationIsConsistentWithJavadoc() {\n \t\t\t\t.isEqualTo(Schedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE);\n \t}\n \n+\t@Test\n+\tpublic void raceActiveWorkerDisposeAndDeferredDirectDispose() {\n+\t\tBoundedElasticScheduler boundedElasticScheduler = new BoundedElasticScheduler(\n+\t\t\t\t1, 2, r -> new Thread(r,\"raceActiveDeferredDirectDispose\"), 3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb434f73abb6cd8a10170775a745a0b24c13475"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzUyNjY5OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDozODozOFrOFpO1tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjoxODowNFrOFpaPGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTA2Mw==", "bodyText": "schedule always happens before the race starts due to the method ref on dispose. Is it intentionally?", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378779063", "createdAt": "2020-02-13T10:38:38Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -680,6 +681,47 @@ public void defaultBoundedElasticConfigurationIsConsistentWithJavadoc() {\n \t\t\t\t.isEqualTo(Schedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE);\n \t}\n \n+\t@Test\n+\tpublic void raceActiveWorkerDisposeAndDeferredDirectDispose() {\n+\t\tBoundedElasticScheduler boundedElasticScheduler = new BoundedElasticScheduler(\n+\t\t\t\t1, 2, r -> new Thread(r,\"raceActiveDeferredDirectDispose\"), 3);\n+\n+\t\tBoundedElasticScheduler.ActiveWorker activeWorker =\n+\t\t\t\t(BoundedElasticScheduler.ActiveWorker) boundedElasticScheduler.createWorker();\n+\n+\t\tint maxRounds = 1_000_000;\n+\t\tAtomicInteger incrementWon = new AtomicInteger();\n+\t\tAtomicInteger rejected = new AtomicInteger();\n+\t\tint rounds = 0;\n+\t\twhile(rounds++ < maxRounds) {\n+\t\t\ttry {\n+\t\t\t\tif (rounds % 10 == 0) { //from time to time reverse the race\n+\t\t\t\t\tRaceTestUtils.race(\n+\t\t\t\t\t\t\tactiveWorker::dispose,\n+\t\t\t\t\t\t\tboundedElasticScheduler.schedule(incrementWon::incrementAndGet)::dispose", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb434f73abb6cd8a10170775a745a0b24c13475"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk2NTc4NQ==", "bodyText": "good catch, that was at first glance not that bad but in fact we'd better wrap it in a Runnable. updated!", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378965785", "createdAt": "2020-02-13T16:18:04Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -680,6 +681,47 @@ public void defaultBoundedElasticConfigurationIsConsistentWithJavadoc() {\n \t\t\t\t.isEqualTo(Schedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE);\n \t}\n \n+\t@Test\n+\tpublic void raceActiveWorkerDisposeAndDeferredDirectDispose() {\n+\t\tBoundedElasticScheduler boundedElasticScheduler = new BoundedElasticScheduler(\n+\t\t\t\t1, 2, r -> new Thread(r,\"raceActiveDeferredDirectDispose\"), 3);\n+\n+\t\tBoundedElasticScheduler.ActiveWorker activeWorker =\n+\t\t\t\t(BoundedElasticScheduler.ActiveWorker) boundedElasticScheduler.createWorker();\n+\n+\t\tint maxRounds = 1_000_000;\n+\t\tAtomicInteger incrementWon = new AtomicInteger();\n+\t\tAtomicInteger rejected = new AtomicInteger();\n+\t\tint rounds = 0;\n+\t\twhile(rounds++ < maxRounds) {\n+\t\t\ttry {\n+\t\t\t\tif (rounds % 10 == 0) { //from time to time reverse the race\n+\t\t\t\t\tRaceTestUtils.race(\n+\t\t\t\t\t\t\tactiveWorker::dispose,\n+\t\t\t\t\t\t\tboundedElasticScheduler.schedule(incrementWon::incrementAndGet)::dispose", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc3OTA2Mw=="}, "originalCommit": {"oid": "1fb434f73abb6cd8a10170775a745a0b24c13475"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDc5MjY1OnYy", "diffSide": "RIGHT", "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjozOTozOVrOFpbFCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNjo1NDoyOVrOFpbphQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3OTU5NA==", "bodyText": "Missing lambda too", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378979594", "createdAt": "2020-02-13T16:39:39Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -680,6 +681,47 @@ public void defaultBoundedElasticConfigurationIsConsistentWithJavadoc() {\n \t\t\t\t.isEqualTo(Schedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE);\n \t}\n \n+\t@Test\n+\tpublic void raceActiveWorkerDisposeAndDeferredDirectDispose() {\n+\t\tBoundedElasticScheduler boundedElasticScheduler = new BoundedElasticScheduler(\n+\t\t\t\t1, 2, r -> new Thread(r, \"raceActiveDeferredDirectDispose\"), 3);\n+\n+\t\tBoundedElasticScheduler.ActiveWorker activeWorker =\n+\t\t\t\t(BoundedElasticScheduler.ActiveWorker) boundedElasticScheduler.createWorker();\n+\n+\t\tint maxRounds = 1_000_000;\n+\t\tAtomicInteger incrementWon = new AtomicInteger();\n+\t\tAtomicInteger rejected = new AtomicInteger();\n+\t\tint rounds = 0;\n+\t\twhile(rounds++ < maxRounds) {\n+\t\t\ttry {\n+\t\t\t\tif (rounds % 10 == 0) { //from time to time reverse the race\n+\t\t\t\t\tRaceTestUtils.race(\n+\t\t\t\t\t\t\tactiveWorker::dispose,\n+\t\t\t\t\t\t\t() -> boundedElasticScheduler.schedule(incrementWon::incrementAndGet).dispose()\n+\t\t\t\t\t);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tRaceTestUtils.race(\n+\t\t\t\t\t\t\tboundedElasticScheduler.schedule(incrementWon::incrementAndGet)::dispose,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3484b889fdac8cc79b7984a89dc186f2a3886b17"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk4ODkzMw==", "bodyText": "\ud83e\udd26\u200d\u2642 fixing...", "url": "https://github.com/reactor/reactor-core/pull/2045#discussion_r378988933", "createdAt": "2020-02-13T16:54:29Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/scheduler/BoundedElasticSchedulerTest.java", "diffHunk": "@@ -680,6 +681,47 @@ public void defaultBoundedElasticConfigurationIsConsistentWithJavadoc() {\n \t\t\t\t.isEqualTo(Schedulers.DEFAULT_BOUNDED_ELASTIC_QUEUESIZE);\n \t}\n \n+\t@Test\n+\tpublic void raceActiveWorkerDisposeAndDeferredDirectDispose() {\n+\t\tBoundedElasticScheduler boundedElasticScheduler = new BoundedElasticScheduler(\n+\t\t\t\t1, 2, r -> new Thread(r, \"raceActiveDeferredDirectDispose\"), 3);\n+\n+\t\tBoundedElasticScheduler.ActiveWorker activeWorker =\n+\t\t\t\t(BoundedElasticScheduler.ActiveWorker) boundedElasticScheduler.createWorker();\n+\n+\t\tint maxRounds = 1_000_000;\n+\t\tAtomicInteger incrementWon = new AtomicInteger();\n+\t\tAtomicInteger rejected = new AtomicInteger();\n+\t\tint rounds = 0;\n+\t\twhile(rounds++ < maxRounds) {\n+\t\t\ttry {\n+\t\t\t\tif (rounds % 10 == 0) { //from time to time reverse the race\n+\t\t\t\t\tRaceTestUtils.race(\n+\t\t\t\t\t\t\tactiveWorker::dispose,\n+\t\t\t\t\t\t\t() -> boundedElasticScheduler.schedule(incrementWon::incrementAndGet).dispose()\n+\t\t\t\t\t);\n+\t\t\t\t}\n+\t\t\t\telse {\n+\t\t\t\t\tRaceTestUtils.race(\n+\t\t\t\t\t\t\tboundedElasticScheduler.schedule(incrementWon::incrementAndGet)::dispose,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk3OTU5NA=="}, "originalCommit": {"oid": "3484b889fdac8cc79b7984a89dc186f2a3886b17"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 998, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}