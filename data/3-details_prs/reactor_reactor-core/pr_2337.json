{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzY4NTY1", "number": 2337, "title": "fix #2312 add user provided state to Retry", "bodyText": "", "createdAt": "2020-08-20T08:59:24Z", "url": "https://github.com/reactor/reactor-core/pull/2337", "merged": true, "mergeCommit": {"oid": "bd8db8ab07f263cf2c61abd9b7102df7ac383f11"}, "closed": true, "closedAt": "2020-09-07T09:48:49Z", "author": {"login": "ericbottard"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAvQx1AFqTQ3MTUzOTE4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdGf1DPgBqjM3MzYzMTc0MDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTM5MTg4", "url": "https://github.com/reactor/reactor-core/pull/2337#pullrequestreview-471539188", "createdAt": "2020-08-20T12:21:06Z", "commit": {"oid": "ea4e330bcb7e47a61a9e90ca5436c8bed9d38d65"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyMTowNlrOHD-Q5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjoyMTowNlrOHD-Q5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyNzkxMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tpublic ContextView retryContext() {return retryContext;}\n          \n          \n            \n            \tpublic ContextView retryContext() {\n          \n          \n            \n            \t\treturn retryContext;\n          \n          \n            \n            \t}", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r473927911", "createdAt": "2020-08-20T12:21:06Z", "author": {"login": "bsideup"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -60,6 +68,10 @@\n \t */\n \tpublic abstract Publisher<?> generateCompanion(Flux<RetrySignal> retrySignals);\n \n+\n+\tpublic ContextView retryContext() {return retryContext;}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea4e330bcb7e47a61a9e90ca5436c8bed9d38d65"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTgyNDE2", "url": "https://github.com/reactor/reactor-core/pull/2337#pullrequestreview-479582416", "createdAt": "2020-09-01T09:58:13Z", "commit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwOTo1ODoxM1rOHKu-JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMDozNDo1M1rOHKwaOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzM4MA==", "bodyText": "the same test should probably be added with a Retry.backoff (ie. using a RetryBackoffSpec instead of a RetrySpec) for good measure.", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r481017380", "createdAt": "2020-09-01T09:58:13Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -577,13 +577,43 @@ public void inners() {\n \t\tSinks.Many<Retry.RetrySignal> signaller = Sinks.many().multicast().onBackpressureError();\n \t\tFlux<Integer> when = Flux.empty();\n \t\tFluxRetryWhen.RetryWhenMainSubscriber<Integer> main = new FluxRetryWhen\n-\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when);\n+\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when, Context.empty());\n \n \t\tList<Scannable> inners = main.inners().collect(Collectors.toList());\n \n \t\tassertThat(inners).containsExactly((Scannable) signaller, main.otherArbiter);\n \t}\n \n+\t@Test\n+\tpublic void retryContextExposedOnRetrySignal() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxOTg1NA==", "bodyText": "I was wondering if we should add retryContext directly to Retry like that. Alternatively we could isolate the feature to RetrySpec and RetryBackoffSpec, injecting the ContextView into the ImmutableRetrySignal they expose to the companion publisher they create (since it is already a .copy())...\nThat said, the idea of the feature leaks into RetrySignal interface anyway, so it could be argued that it must be enforced at Retry level.\nAt a minimum, Retry no-arg constructor should be maintained though. This adding of a protected ctor introduces a breaking change that we can avoid.", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r481019854", "createdAt": "2020-09-01T10:02:47Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -47,6 +49,12 @@\n  */\n public abstract class Retry {\n \n+\tprivate final ContextView retryContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MDgyNA==", "bodyText": "format: missing newline", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r481040824", "createdAt": "2020-09-01T10:34:35Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/ImmutableRetrySignal.java", "diffHunk": "@@ -27,12 +30,18 @@\n \tfinal long      failureTotalIndex;\n \tfinal long      failureSubsequentIndex;\n \tfinal Throwable failure;\n+\tfinal ContextView retryContext;\n \n \tImmutableRetrySignal(long failureTotalIndex, long failureSubsequentIndex,\n \t\t\tThrowable failure) {\n+\t\tthis(failureTotalIndex, failureSubsequentIndex, failure, Context.empty());\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA0MDk1NA==", "bodyText": "nitpick format: unnecessary newline", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r481040954", "createdAt": "2020-09-01T10:34:53Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/core/publisher/FluxRetryWhen.java", "diffHunk": "@@ -113,12 +114,15 @@ public Object scanUnsafe(Attr key) {\n \t\t\n \t\tRetryWhenMainSubscriber(CoreSubscriber<? super T> actual,\n \t\t\t\tSinks.Many<Retry.RetrySignal> signaller,\n-\t\t\t\tCorePublisher<? extends T> source) {\n+\t\t\t\tCorePublisher<? extends T> source,\n+\t\t\t\tContextView retryContext) {\n \t\t\tsuper(actual);\n \t\t\tthis.signaller = signaller;\n \t\t\tthis.source = source;\n \t\t\tthis.otherArbiter = new Operators.DeferredSubscription();\n \t\t\tthis.context = actual.currentContext();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9", "committedDate": "2020-08-27T14:25:42Z", "message": "Address review comments."}, "afterCommit": {"oid": "4821114aa1c19cef4a054a44b15bfce9098ec54c", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/4821114aa1c19cef4a054a44b15bfce9098ec54c", "committedDate": "2020-09-02T13:51:49Z", "message": "Review: fix formatting issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNjQzMzYw", "url": "https://github.com/reactor/reactor-core/pull/2337#pullrequestreview-481643360", "createdAt": "2020-09-03T09:06:53Z", "commit": {"oid": "4821114aa1c19cef4a054a44b15bfce9098ec54c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOTowNjo1M1rOHMdTSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToxMDo0N1rOHMdfbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNTAzMw==", "bodyText": "I'm still unsure about that one. should it be retryContextView()? or even simpler, context()? (as Retry implementors are less likely to implement stuff that is unrelated to retries, unlike eg. RetrySignal). In the end, I think I like the simplicity of retryContext() though...", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482825033", "createdAt": "2020-09-03T09:06:53Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -60,6 +72,16 @@\n \t */\n \tpublic abstract Publisher<?> generateCompanion(Flux<RetrySignal> retrySignals);\n \n+\t/**\n+\t * Return the user provided context that was set at construction time.\n+\t *\n+\t * @return the user provided context that will be accessible via {@link RetrySignal#retryContextView()}.\n+\t */\n+\tpublic ContextView retryContext() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821114aa1c19cef4a054a44b15bfce9098ec54c"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNTcyMQ==", "bodyText": "I would say \"reset/rollbacked or otherwise mutated before or after a retry\"", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482825721", "createdAt": "2020-09-03T09:07:55Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -92,6 +114,16 @@\n \t\t */\n \t\tThrowable failure();\n \n+\t\t/**\n+\t\t * Return a read-only view of the user provided context, which may be used to store\n+\t\t * objects to be reset/rollbacked before a retry.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821114aa1c19cef4a054a44b15bfce9098ec54c"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyNjQ5Mw==", "bodyText": "I agree on using ContextView suffix, as this is the part of the API that will be most visible to users and thus further clarifies that this is read only.", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482826493", "createdAt": "2020-09-03T09:09:14Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/main/java/reactor/util/retry/Retry.java", "diffHunk": "@@ -92,6 +114,16 @@\n \t\t */\n \t\tThrowable failure();\n \n+\t\t/**\n+\t\t * Return a read-only view of the user provided context, which may be used to store\n+\t\t * objects to be reset/rollbacked before a retry.\n+\t\t *\n+\t\t * @return a read-only view of a user provided context.\n+\t\t */\n+\t\tdefault ContextView retryContextView() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4821114aa1c19cef4a054a44b15bfce9098ec54c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyODE0Mg==", "bodyText": "ok, maybe not duplicating the full test. I would maybe just test both constructors to ensure the retry context is passed to super ctor in both flavors of specs, wdyt?", "url": "https://github.com/reactor/reactor-core/pull/2337#discussion_r482828142", "createdAt": "2020-09-03T09:10:47Z", "author": {"login": "simonbasle"}, "path": "reactor-core/src/test/java/reactor/core/publisher/FluxRetryWhenTest.java", "diffHunk": "@@ -577,13 +577,43 @@ public void inners() {\n \t\tSinks.Many<Retry.RetrySignal> signaller = Sinks.many().multicast().onBackpressureError();\n \t\tFlux<Integer> when = Flux.empty();\n \t\tFluxRetryWhen.RetryWhenMainSubscriber<Integer> main = new FluxRetryWhen\n-\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when);\n+\t\t\t\t.RetryWhenMainSubscriber<>(actual, signaller, when, Context.empty());\n \n \t\tList<Scannable> inners = main.inners().collect(Collectors.toList());\n \n \t\tassertThat(inners).containsExactly((Scannable) signaller, main.otherArbiter);\n \t}\n \n+\t@Test\n+\tpublic void retryContextExposedOnRetrySignal() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAxNzM4MA=="}, "originalCommit": {"oid": "1c95e2f52f1dafa85bce9327a1e70c6213fe2ac9"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNzc0MTU3", "url": "https://github.com/reactor/reactor-core/pull/2337#pullrequestreview-481774157", "createdAt": "2020-09-03T12:10:30Z", "commit": {"oid": "ff3aed1a2627d46b1f94ac625187c9462ebbbe55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd8db8ab07f263cf2c61abd9b7102df7ac383f11", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/bd8db8ab07f263cf2c61abd9b7102df7ac383f11", "committedDate": "2020-09-07T09:45:15Z", "message": "fix #2312 add user provided state to Retry\n\nCo-authored-by: Audrey Neveu <aneveu@pivotal.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ff3aed1a2627d46b1f94ac625187c9462ebbbe55", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/ff3aed1a2627d46b1f94ac625187c9462ebbbe55", "committedDate": "2020-09-03T11:24:43Z", "message": "Address review comments"}, "afterCommit": {"oid": "bd8db8ab07f263cf2c61abd9b7102df7ac383f11", "author": {"user": {"login": "ericbottard", "name": "Eric Bottard"}}, "url": "https://github.com/reactor/reactor-core/commit/bd8db8ab07f263cf2c61abd9b7102df7ac383f11", "committedDate": "2020-09-07T09:45:15Z", "message": "fix #2312 add user provided state to Retry\n\nCo-authored-by: Audrey Neveu <aneveu@pivotal.io>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2837, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}