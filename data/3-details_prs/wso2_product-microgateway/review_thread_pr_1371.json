{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mzk0Mjg4", "number": 1371, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo1Mjo1OVrOEWFnWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowMDozMVrOEWFtEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTk2MTIwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo1Mjo1OVrOG9NX2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo1Mjo1OVrOG9NX2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNTQxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            if (authenticationResult) {\n          \n          \n            \n                        } else if (authenticationResult) {", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466835416", "createdAt": "2020-08-07T05:52:59Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "diffHunk": "@@ -91,76 +93,102 @@ public type KeyValidationHandler object {\n         string authHeaderName = getAuthorizationHeader(invocationContext);\n         APIConfiguration? apiConfig = apiConfigAnnotationMap[<string>invocationContext.attributes[http:SERVICE_NAME]];\n         boolean|auth:Error authenticationResult = false;\n-        authenticationResult = self.introspectProvider.authenticate(credential);\n-        if (authenticationResult is auth:Error) {\n-            return prepareAuthenticationError(\"Failed to authenticate with introspect auth provider.\", authenticationResult);\n-        } else if (!authenticationResult) {\n-            setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n-            return authenticationResult;\n+        if (self.isLegacyKM) {\n+            // In legacy mode, use the KeyValidation service for token validation.\n+            // This is used when API-M versions < 3.2 are being used to support backward compatibility\n+            authenticationResult = self.oauth2KeyValidationProvider.authenticate(credential);\n+            if (authenticationResult is auth:Error) {\n+                return prepareAuthenticationError(\"Failed to authenticate with key validation service.\", authenticationResult);\n+            } else {\n+                if (authenticationResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTk3MTIyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo1ODowOFrOG9NdsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxMDoyMTowMVrOG9Um2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNjkxMw==", "bodyText": "Here don't we need below else block similar to introspect flow?\n} else if (!authenticationResult) {\n    setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n    return authenticationResult;\n}", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466836913", "createdAt": "2020-08-07T05:58:08Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "diffHunk": "@@ -91,76 +93,102 @@ public type KeyValidationHandler object {\n         string authHeaderName = getAuthorizationHeader(invocationContext);\n         APIConfiguration? apiConfig = apiConfigAnnotationMap[<string>invocationContext.attributes[http:SERVICE_NAME]];\n         boolean|auth:Error authenticationResult = false;\n-        authenticationResult = self.introspectProvider.authenticate(credential);\n-        if (authenticationResult is auth:Error) {\n-            return prepareAuthenticationError(\"Failed to authenticate with introspect auth provider.\", authenticationResult);\n-        } else if (!authenticationResult) {\n-            setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n-            return authenticationResult;\n+        if (self.isLegacyKM) {\n+            // In legacy mode, use the KeyValidation service for token validation.\n+            // This is used when API-M versions < 3.2 are being used to support backward compatibility\n+            authenticationResult = self.oauth2KeyValidationProvider.authenticate(credential);\n+            if (authenticationResult is auth:Error) {\n+                return prepareAuthenticationError(\"Failed to authenticate with key validation service.\", authenticationResult);\n+            } else {\n+                if (authenticationResult) {\n+                    boolean tokenGenStatus = generateAndSetBackendJwtHeader(credential,\n+                                                                                        req,\n+                                                                                        self.enabledJWTGenerator,\n+                                                                                        self.classLoaded,\n+                                                                                        self.skewTime,\n+                                                                                        self.enabledCaching,\n+                                                                                        self.issuer,\n+                                                                                        self.remoteUserClaimRetrievalEnabled,\n+                                                                                        false);\n+                    if (!tokenGenStatus) {\n+                        printError(KEY_AUTHN_FILTER, \"Error while adding the Backend JWT header\");\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njk1Mzk0Nw==", "bodyText": "e85834c", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466953947", "createdAt": "2020-08-07T10:21:01Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "diffHunk": "@@ -91,76 +93,102 @@ public type KeyValidationHandler object {\n         string authHeaderName = getAuthorizationHeader(invocationContext);\n         APIConfiguration? apiConfig = apiConfigAnnotationMap[<string>invocationContext.attributes[http:SERVICE_NAME]];\n         boolean|auth:Error authenticationResult = false;\n-        authenticationResult = self.introspectProvider.authenticate(credential);\n-        if (authenticationResult is auth:Error) {\n-            return prepareAuthenticationError(\"Failed to authenticate with introspect auth provider.\", authenticationResult);\n-        } else if (!authenticationResult) {\n-            setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n-            return authenticationResult;\n+        if (self.isLegacyKM) {\n+            // In legacy mode, use the KeyValidation service for token validation.\n+            // This is used when API-M versions < 3.2 are being used to support backward compatibility\n+            authenticationResult = self.oauth2KeyValidationProvider.authenticate(credential);\n+            if (authenticationResult is auth:Error) {\n+                return prepareAuthenticationError(\"Failed to authenticate with key validation service.\", authenticationResult);\n+            } else {\n+                if (authenticationResult) {\n+                    boolean tokenGenStatus = generateAndSetBackendJwtHeader(credential,\n+                                                                                        req,\n+                                                                                        self.enabledJWTGenerator,\n+                                                                                        self.classLoaded,\n+                                                                                        self.skewTime,\n+                                                                                        self.enabledCaching,\n+                                                                                        self.issuer,\n+                                                                                        self.remoteUserClaimRetrievalEnabled,\n+                                                                                        false);\n+                    if (!tokenGenStatus) {\n+                        printError(KEY_AUTHN_FILTER, \"Error while adding the Backend JWT header\");\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNjkxMw=="}, "originalCommit": {"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTk3NTg1OnYy", "diffSide": "RIGHT", "path": "distribution/resources/conf/default-micro-gw.conf.template", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowMDozMVrOG9Nghg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowMDozMVrOG9Nghg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNzYzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              # When Microgateway is used with older APIM versions for subscription validation by using KeyValidation service.\n          \n          \n            \n              # When Microgateway is used with older APIM versions with subscription validation, enable legacy KeyValidation service.", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466837638", "createdAt": "2020-08-07T06:00:31Z", "author": {"login": "praminda"}, "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -52,6 +52,8 @@\n   serverUrl = \"https://localhost:9443\"\n   # The token endpoint context of the Key Manager server\n   tokenContext = \"oauth2\"\n+  # When Microgateway is used with older APIM versions for subscription validation by using KeyValidation service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1113, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}