{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NTE3MTg1", "number": 920, "title": "Fix #919 - support standard introspection", "bodyText": "Purpose\nSupport for validating opaque oauth2 tokens using the standard introspection.\nIssues\nFixes #919\nAutomation tests\n\nUnit tests added: Yes/No\nIntegration tests added: Yes/No\n\nTested environments\n\nNot Tested\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-01-06T12:09:49Z", "url": "https://github.com/wso2/product-microgateway/pull/920", "merged": true, "mergeCommit": {"oid": "2411fd7a2653f84d6e9417c9a5a60302e46465a0"}, "closed": true, "closedAt": "2020-01-09T08:56:39Z", "author": {"login": "Rajith90"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb3rAZfgH2gAyMzU5NTE3MTg1OjA0ZmFhNDFmNTI1OGI4NjUzMTIzMDI4NmNjODBlNjc0MzQyZDNlYWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4mELvgH2gAyMzU5NTE3MTg1OmZlNjQ1NTI2OGNhMWIwNDFmYTVlOWFiNzA4YjZhY2MzOTM3MDdkOWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "04faa41f5258b86531230286cc80e674342d3eac", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/04faa41f5258b86531230286cc80e674342d3eac", "committedDate": "2020-01-06T12:07:07Z", "message": "Fix #919 - support standard introspection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8474df64855b9ea2ca619483cff3a2975b37fd46", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/8474df64855b9ea2ca619483cff3a2975b37fd46", "committedDate": "2020-01-06T12:14:54Z", "message": "Update branch"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5MDIwNjIy", "url": "https://github.com/wso2/product-microgateway/pull/920#pullrequestreview-339020622", "createdAt": "2020-01-07T04:00:13Z", "commit": {"oid": "8474df64855b9ea2ca619483cff3a2975b37fd46"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDowMDoxM1rOFavXVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwNDoyNDo1OFrOFavk4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4MzMxNg==", "bodyText": "introspectURL is going to be the result of 157 anyway. Result of 156 is not used. Mistake?", "url": "https://github.com/wso2/product-microgateway/pull/920#discussion_r363583316", "createdAt": "2020-01-07T04:00:13Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "diffHunk": "@@ -112,29 +114,58 @@ public function getAuthHandlers() returns http:InboundAuthHandler[] {\n         jwtAuthHandler = new JWTAuthHandler(jwtAuthProvider);\n     }\n \n-\n     // Initializes the key validation handler\n-    KeyValidationServerConfig keyValidationServerConfig = {\n-        url: getConfigValue(KM_CONF_INSTANCE_ID, KM_SERVER_URL, \"https://localhost:9443\"),\n-        clientConfig:\n-        {\n-            cache: {enabled: false},\n-            secureSocket: {\n-                trustStore: {\n-                    path: getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH,\n-                    \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"),\n-                    password: getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\")\n-                },\n-                verifyHostname: getConfigBooleanValue(HTTP_CLIENTS_INSTANCE_ID, ENABLE_HOSTNAME_VERIFICATION, true)\n-            }\n+    http:ClientSecureSocket secureSocket = {\n+        trustStore: {\n+            path: getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH,\n+            \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"),\n+            password: getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\")\n+        },\n+        verifyHostname: getConfigBooleanValue(HTTP_CLIENTS_INSTANCE_ID, ENABLE_HOSTNAME_VERIFICATION, true)\n+    };\n+    http:OutboundAuthConfig? auth = ();\n+    if (getConfigBooleanValue(KM_CONF_SECURITY_BASIC_INSTANCE_ID, ENABLED, true)) {\n+        auth:OutboundBasicAuthProvider basicAuthOutboundProvider = new({\n+            username: getConfigValue(KM_CONF_SECURITY_BASIC_INSTANCE_ID, USERNAME, \"admin\"),\n+            password: getConfigValue(KM_CONF_SECURITY_BASIC_INSTANCE_ID, PASSWORD, \"admin\")\n+        });\n+        http:BasicAuthHandler basicAuthOutboundHandler = new(basicAuthOutboundProvider);\n+        auth = {authHandler: basicAuthOutboundHandler};\n+    } else if (getConfigBooleanValue(KM_CONF_SECURITY_OAUTH2_INSTANCE_ID, ENABLED, false)) {\n+        oauth2:OutboundOAuth2Provider|error oauth2Provider = getOauth2OutboundProvider();\n+        if (oauth2Provider is oauth2:OutboundOAuth2Provider) {\n+            http:BearerAuthHandler bearerAuthOutboundHandler = new(oauth2Provider);\n+            auth = {authHandler: bearerAuthOutboundHandler};\n+        } else {\n+            printFullError(KEY_GW_LISTNER, oauth2Provider);\n         }\n+    } else {\n+        printWarn(KEY_GW_LISTNER, \"Key validation service security confogurations not enabled.\");\n+    }\n+    http:ClientConfiguration clientConfig = {\n+        auth: auth,\n+        cache: {enabled: false},\n+        secureSocket: secureSocket\n     };\n-    OAuth2KeyValidationProvider oauth2KeyValidationProvider = new (keyValidationServerConfig);\n+    oauth2:IntrospectionServerConfig  keyValidationConfig = {\n+        url: getConfigValue(KM_CONF_INSTANCE_ID, KM_SERVER_URL, \"https://localhost:9443\"),\n+        clientConfig: clientConfig\n+    };\n+    string introspectURL = getConfigValue(KM_CONF_INSTANCE_ID, KM_SERVER_URL, \"https://localhost:9443\");\n+    string keymanagerContext = getConfigValue(KM_CONF_INSTANCE_ID, KM_TOKEN_CONTEXT, \"oauth2\");\n+    introspectURL = (introspectURL.endsWith(PATH_SEPERATOR)) ? introspectURL + keymanagerContext : introspectURL + PATH_SEPERATOR + keymanagerContext;\n+    introspectURL = (introspectURL.endsWith(PATH_SEPERATOR)) ? introspectURL + INTROSPECT_CONTEXT : introspectURL + PATH_SEPERATOR + INTROSPECT_CONTEXT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8474df64855b9ea2ca619483cff3a2975b37fd46"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4NjY3NQ==", "bodyText": "else statement is not required. return http:NO_BEARER; will do the job.", "url": "https://github.com/wso2/product-microgateway/pull/920#discussion_r363586675", "createdAt": "2020-01-07T04:24:06Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "diffHunk": "@@ -187,3 +218,104 @@ function initiateKeyManagerConfigurations() {\n     keyManagerConf.credentials = credentials;\n     getGatewayConfInstance().setKeyManagerConf(keyManagerConf);\n }\n+\n+function getOauth2OutboundProvider() returns oauth2:OutboundOAuth2Provider|error {\n+    oauth2:OutboundOAuth2Provider oauth2Provider = new();\n+    http:ClientConfiguration clientConfig  = {\n+        secureSocket : {\n+            trustStore: {\n+                path: getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH,\n+                \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"),\n+                password: getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\")\n+            },\n+            verifyHostname: getConfigBooleanValue(HTTP_CLIENTS_INSTANCE_ID, ENABLE_HOSTNAME_VERIFICATION, true)\n+        }\n+    };\n+    if (getConfigBooleanValue(KM_CONF_SECURITY_OAUTH2_REFRESH_INSTANCE_ID, ENABLED, false)) {\n+        if (getConfigBooleanValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, ENABLED, false)) {\n+            oauth2Provider = new({\n+                tokenUrl: getConfigValue(KM_CONF_SECURITY_OAUTH2_INSTANCE_ID, TOKEN_URL, \"\"),\n+                username: getConfigValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, USERNAME, \"\"),\n+                password: getConfigValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, PASSWORD, \"\"),\n+                clientId: getConfigValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, CLIENT_ID, \"\"),\n+                clientSecret: getConfigValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, CLIENT_SECRET, \"\"),\n+                scopes: readScpoesAsArray(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, SCOPES),\n+                credentialBearer: getCredentialBearer(),\n+                refreshConfig: {\n+                    refreshUrl: getConfigValue(KM_CONF_SECURITY_OAUTH2_REFRESH_INSTANCE_ID, REFRESH_URL, \"\"),\n+                    scopes: readScpoesAsArray(KM_CONF_SECURITY_OAUTH2_REFRESH_INSTANCE_ID, SCOPES),\n+                    clientConfig: clientConfig\n+                },\n+                clientConfig: clientConfig\n+            });\n+        } else if (getConfigBooleanValue(KM_CONF_SECURITY_OAUTH2_DIRECT_INSTANCE_ID, ENABLED, false)) {\n+            oauth2Provider = new({\n+                accessToken: getConfigValue(KM_CONF_SECURITY_OAUTH2_DIRECT_INSTANCE_ID, ACCESS_TOKEN, \"\"),\n+                credentialBearer: getCredentialBearer(),\n+                refreshConfig: {\n+                    refreshUrl: getConfigValue(KM_CONF_SECURITY_OAUTH2_REFRESH_INSTANCE_ID, REFRESH_URL, \"\"),\n+                    refreshToken: getConfigValue(KM_CONF_SECURITY_OAUTH2_REFRESH_INSTANCE_ID, REFRESH_TOKEN, \"\"),\n+                    clientId: getConfigValue(KM_CONF_SECURITY_OAUTH2_REFRESH_INSTANCE_ID, CLIENT_ID, \"\"),\n+                    clientSecret: getConfigValue(KM_CONF_SECURITY_OAUTH2_REFRESH_INSTANCE_ID, CLIENT_SECRET, \"\"),\n+                    scopes: readScpoesAsArray(KM_CONF_SECURITY_OAUTH2_REFRESH_INSTANCE_ID, SCOPES),\n+                    credentialBearer: getCredentialBearer(),\n+                    clientConfig: clientConfig\n+                }\n+            });\n+        } else {\n+            error err = error(\"Key manager OAuth2 security enabled, but no secirity configurations provided\");\n+            return err;\n+        }\n+    } else {\n+        if (getConfigBooleanValue(KM_CONF_SECURITY_OAUTH2_CLIENT_CREDENTIAL_INSTANCE_ID, ENABLED, false)) {\n+            oauth2Provider = new({\n+                tokenUrl: getConfigValue(KM_CONF_SECURITY_OAUTH2_INSTANCE_ID, TOKEN_URL, \"\"),\n+                clientId: getConfigValue(KM_CONF_SECURITY_OAUTH2_CLIENT_CREDENTIAL_INSTANCE_ID, CLIENT_ID, \"\"),\n+                clientSecret: getConfigValue(KM_CONF_SECURITY_OAUTH2_CLIENT_CREDENTIAL_INSTANCE_ID, CLIENT_SECRET, \"\"),\n+                scopes: readScpoesAsArray(KM_CONF_SECURITY_OAUTH2_CLIENT_CREDENTIAL_INSTANCE_ID, SCOPES),\n+                credentialBearer: getCredentialBearer(),\n+                clientConfig: clientConfig\n+            });\n+        } else if (getConfigBooleanValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, ENABLED, false)) {\n+            oauth2Provider = new({\n+                tokenUrl: getConfigValue(KM_CONF_SECURITY_OAUTH2_INSTANCE_ID, TOKEN_URL, \"\"),\n+                username: getConfigValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, USERNAME, \"\"),\n+                password: getConfigValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, PASSWORD, \"\"),\n+                clientId: getConfigValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, CLIENT_ID, \"\"),\n+                clientSecret: getConfigValue(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, CLIENT_SECRET, \"\"),\n+                scopes: readScpoesAsArray(KM_CONF_SECURITY_OAUTH2_PASSWORD_INSTANCE_ID, SCOPES),\n+                credentialBearer: getCredentialBearer(),\n+                clientConfig: clientConfig\n+            });\n+        } else if (getConfigBooleanValue(KM_CONF_SECURITY_OAUTH2_DIRECT_INSTANCE_ID, ENABLED, false)) {\n+            oauth2Provider = new({\n+                accessToken: getConfigValue(KM_CONF_SECURITY_OAUTH2_DIRECT_INSTANCE_ID, ACCESS_TOKEN, \"\"),\n+                credentialBearer: getCredentialBearer()\n+            });\n+        } else {\n+            error err = error(\"Key manager OAuth2 security enabled, but no secirity configurations provided\");\n+            return err;\n+        }\n+    }\n+    return oauth2Provider;\n+}\n+\n+function readScpoesAsArray(string instanceId, string key) returns string[] {\n+    string scopes = getConfigValue(instanceId, key, \"\");\n+    string[] scopesArray = [];\n+    if (scopes.length() > 0) {\n+        scopesArray = split(scopes.trim(), \",\");\n+    }\n+    return scopesArray;\n+}\n+\n+function getCredentialBearer() returns http:CredentialBearer {\n+    string crednetailBearerString= getConfigValue(KM_CONF_SECURITY_OAUTH2_INSTANCE_ID, CREDENTIAL_BEARER, http:AUTH_HEADER_BEARER);\n+    if (stringutils:equalsIgnoreCase(crednetailBearerString, http:AUTH_HEADER_BEARER)) {\n+        return http:AUTH_HEADER_BEARER;\n+    } else if (stringutils:equalsIgnoreCase(crednetailBearerString, http:POST_BODY_BEARER)) {\n+        return http:POST_BODY_BEARER;\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8474df64855b9ea2ca619483cff3a2975b37fd46"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzU4Njc4Nw==", "bodyText": "Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/920#discussion_r363586787", "createdAt": "2020-01-07T04:24:58Z", "author": {"login": "praminda"}, "path": "distribution/resources/conf/micro-gw.conf", "diffHunk": "@@ -14,10 +14,40 @@ removeAuthHeaderFromOutMessage=true\n \n [keyManager]\n serverUrl=\"https://localhost:9443\"\n-username=\"admin\"\n-password=\"admin\"\n tokenContext=\"oauth2\"\n timestampSkew=5000\n+external=false\n+  [keymanager.security.basic]\n+    enabled= true\n+    username=\"admin\"\n+    password=\"admin\"\n+  [keymanager.security.oauth2]\n+    enabled = false\n+    credentialBearer = \"AUTH_HEADER_BEARER\"\n+    tokenUrl = \"\"\n+    [keymanager.security.oauth2.clientCredential]\n+      enabled = false\n+      clientId = \"\"\n+      clientSecret = \"\"\n+      scopes = \"\"\n+    [keymanager.security.oauth2.password]\n+      enabled = false\n+      clientId = \"\"\n+      clientSecret = \"\"\n+      scopes = \"\"\n+      username= \"\"\n+      password = \"\"\n+    [keymanager.security.oauth2.directToken]\n+      enabled = false\n+      accessToken = \"\"\n+    [keymanager.security.oauth2.refresh]\n+      enabled = false\n+      refreshUrl = \"\"\n+      scopes = \"\"\n+      refreshToken = \"\"\n+      clientId = \"\"\n+      clientSecret = \"\"\n+\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8474df64855b9ea2ca619483cff3a2975b37fd46"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "177b09f81ae1ea3ad15d20e9d7c3b6bb7d179311", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/177b09f81ae1ea3ad15d20e9d7c3b6bb7d179311", "committedDate": "2020-01-09T07:40:48Z", "message": "Fix casting issue in introspect feature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQwMzU2NjYx", "url": "https://github.com/wso2/product-microgateway/pull/920#pullrequestreview-340356661", "createdAt": "2020-01-09T08:36:13Z", "commit": {"oid": "177b09f81ae1ea3ad15d20e9d7c3b6bb7d179311"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe6455268ca1b041fa5e9ab708b6acc393707d9b", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/fe6455268ca1b041fa5e9ab708b6acc393707d9b", "committedDate": "2020-01-09T08:55:39Z", "message": "update the branch with master"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1213, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}