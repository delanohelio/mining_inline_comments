{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDg0MTkw", "number": 1352, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozMToyOFrOERs3PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDo1NToxNFrOFWHoEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2OTk2Mjg1OnYy", "diffSide": "RIGHT", "path": "samples/sample-jwt-generator/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozMToyOFrOG2jjkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozMToyOFrOG2jjkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1ODgzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            </project>\n          \n          \n            \n            </project>", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r459858835", "createdAt": "2020-07-24T05:31:28Z", "author": {"login": "praminda"}, "path": "samples/sample-jwt-generator/pom.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>org.example</groupId>\n+    <artifactId>sample-jwt-generator</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.am.microgw</groupId>\n+            <artifactId>mgw-jwt-generator</artifactId>\n+            <version>3.2.0</version>\n+        </dependency>\n+    </dependencies>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd8c6af2130f795d14940c95324d87006c738338"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NTc1NDYwOnYy", "diffSide": "RIGHT", "path": "samples/sample-jwt-generator/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwODoxMzo0MlrOIQJMgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwMzoyNjoxMVrOIhRgCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5ODc4NA==", "bodyText": "Shall we add the year here?", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r553798784", "createdAt": "2021-01-08T08:13:42Z", "author": {"login": "Meruja"}, "path": "samples/sample-jwt-generator/pom.xml", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc2MDY1MA==", "bodyText": "Added with 45bcd34", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r571760650", "createdAt": "2021-02-08T03:26:11Z", "author": {"login": "HeshanSudarshana"}, "path": "samples/sample-jwt-generator/pom.xml", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5ODc4NA=="}, "originalCommit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NzM3ODQyOnYy", "diffSide": "RIGHT", "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDo1NTowMFrOIe8Yaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwMzoyNjoyMFrOIhRgMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzQ4Mw==", "bodyText": "Please format the code", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r569317483", "createdAt": "2021-02-03T10:55:00Z", "author": {"login": "tgtshanika"}, "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package sample.jwt.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class SampleJWTGenerator extends AbstractMGWJWTGenerator {\n+    public SampleJWTGenerator(String dialectURI,\n+                                String signatureAlgorithm,\n+                                String keyStorePath,\n+                                String keyStorePassword,\n+                                String certificateAlias,\n+                                String privateKeyAlias,\n+                                int jwtExpiryTime,\n+                                String[] restrictedClaims,\n+                                boolean cacheEnabled,\n+                                int cacheExpiry,\n+                                String tokenIssuer,\n+                                String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc2MDY4OA==", "bodyText": "Fixed with 45bcd34", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r571760688", "createdAt": "2021-02-08T03:26:20Z", "author": {"login": "HeshanSudarshana"}, "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package sample.jwt.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class SampleJWTGenerator extends AbstractMGWJWTGenerator {\n+    public SampleJWTGenerator(String dialectURI,\n+                                String signatureAlgorithm,\n+                                String keyStorePath,\n+                                String keyStorePassword,\n+                                String certificateAlias,\n+                                String privateKeyAlias,\n+                                int jwtExpiryTime,\n+                                String[] restrictedClaims,\n+                                boolean cacheEnabled,\n+                                int cacheExpiry,\n+                                String tokenIssuer,\n+                                String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzQ4Mw=="}, "originalCommit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NzM3OTM2OnYy", "diffSide": "RIGHT", "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDo1NToxNFrOIe8ZAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wOFQwMzoyNjoyN1rOIhRgSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzYzNA==", "bodyText": "formatting issue", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r569317634", "createdAt": "2021-02-03T10:55:14Z", "author": {"login": "tgtshanika"}, "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package sample.jwt.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class SampleJWTGenerator extends AbstractMGWJWTGenerator {\n+    public SampleJWTGenerator(String dialectURI,\n+                                String signatureAlgorithm,\n+                                String keyStorePath,\n+                                String keyStorePassword,\n+                                String certificateAlias,\n+                                String privateKeyAlias,\n+                                int jwtExpiryTime,\n+                                String[] restrictedClaims,\n+                                boolean cacheEnabled,\n+                                int cacheExpiry,\n+                                String tokenIssuer,\n+                                String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {\n+                Map<String, Object> customClaims = (Map<String, Object>) jwtInfo.get(key);\n+                for (String subKey: customClaims.keySet()) {\n+                    if (!restrictedClaims.contains(subKey)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTc2MDcxMw==", "bodyText": "Fixed with 45bcd34", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r571760713", "createdAt": "2021-02-08T03:26:27Z", "author": {"login": "HeshanSudarshana"}, "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package sample.jwt.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class SampleJWTGenerator extends AbstractMGWJWTGenerator {\n+    public SampleJWTGenerator(String dialectURI,\n+                                String signatureAlgorithm,\n+                                String keyStorePath,\n+                                String keyStorePassword,\n+                                String certificateAlias,\n+                                String privateKeyAlias,\n+                                int jwtExpiryTime,\n+                                String[] restrictedClaims,\n+                                boolean cacheEnabled,\n+                                int cacheExpiry,\n+                                String tokenIssuer,\n+                                String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {\n+                Map<String, Object> customClaims = (Map<String, Object>) jwtInfo.get(key);\n+                for (String subKey: customClaims.keySet()) {\n+                    if (!restrictedClaims.contains(subKey)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzYzNA=="}, "originalCommit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1105, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}