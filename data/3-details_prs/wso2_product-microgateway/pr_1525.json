{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNDY3MTI1", "number": 1525, "title": "Production Sandbox Endpoints and Upstream TLS configurations", "bodyText": "Purpose\n\nSupport Production-Sandbox Endpoints\nBackend TLS certificates (including mutual TLS)\nCompatibility with API controller 4.0.0-m2\n\nIssues\n\nFixes #1496\nFixes #1495\nAutomation tests\n\nUnit tests added: Yes\nIntegration tests added: Yes\n\nTested environments\n\nMacOS Mojave\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-12-18T10:54:23Z", "url": "https://github.com/wso2/product-microgateway/pull/1525", "merged": true, "mergeCommit": {"oid": "e85ccc2465ab3dbc1d95b91464b5dfb6a19e5ba1"}, "closed": true, "closedAt": "2021-01-08T04:18:54Z", "author": {"login": "VirajSalaka"}, "timelineItems": {"totalCount": 63, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgEHO-AH2gAyNTQyNDY3MTI1OjU2MjQ1YzZjYTJmOGNhZjlhNmZiZjFhZjcyYzZiMTgxM2RlNmRmMWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABduA3jlAFqTU2Mzk5MzEyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "56245c6ca2f8caf9a6fbf1af72c6b1813de6df1d", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/56245c6ca2f8caf9a6fbf1af72c6b1813de6df1d", "committedDate": "2020-11-25T20:10:20Z", "message": "basic adapter implementation done"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1de6549f72e44414bc688f34f65288d18787246", "author": {"user": {"login": "AmaliMatharaarachchi", "name": "Amali Matharaarachchi"}}, "url": "https://github.com/wso2/product-microgateway/commit/a1de6549f72e44414bc688f34f65288d18787246", "committedDate": "2020-11-30T16:53:57Z", "message": "Init analytics filter and update ext_authz filter to v3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0842dbaf65bafa8ae2ab99458d79bcd451fda87a", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/0842dbaf65bafa8ae2ab99458d79bcd451fda87a", "committedDate": "2020-11-30T18:34:04Z", "message": "Implement adapter implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f364aa3e661b88e12fcf9b98ebdafa8f1fbd12e", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/6f364aa3e661b88e12fcf9b98ebdafa8f1fbd12e", "committedDate": "2020-12-01T14:41:45Z", "message": "temp-commit: Completed functionality but not working due to ext-authz injected headers are not utiliized at the router"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb25459fcfb22b6b9bed10d079c4714f7bb9016", "author": {"user": {"login": "AmaliMatharaarachchi", "name": "Amali Matharaarachchi"}}, "url": "https://github.com/wso2/product-microgateway/commit/deb25459fcfb22b6b9bed10d079c4714f7bb9016", "committedDate": "2020-12-02T06:21:34Z", "message": "Add analytics filter to envoy config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e526270c446b90297895b84133501da86f3cfbbc", "author": {"user": {"login": "AmaliMatharaarachchi", "name": "Amali Matharaarachchi"}}, "url": "https://github.com/wso2/product-microgateway/commit/e526270c446b90297895b84133501da86f3cfbbc", "committedDate": "2020-12-02T07:50:21Z", "message": "Fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a7dc9918abf308635a409425013cba1981c3fe4", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/9a7dc9918abf308635a409425013cba1981c3fe4", "committedDate": "2020-12-02T08:17:16Z", "message": "disable route cache to make the injected cluster-header http header from ext-authz filter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7ab55c86d24d9c80de881ff9280ae464488fc9c", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/b7ab55c86d24d9c80de881ff9280ae464488fc9c", "committedDate": "2020-12-04T19:23:49Z", "message": "add clear route cache to the listener configuration for production-sandbox endpoint scenario"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "125bdb922f22958a6555c313f4488732748ebc7f", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/125bdb922f22958a6555c313f4488732748ebc7f", "committedDate": "2020-12-04T19:28:40Z", "message": "bug fix: all the request context's headers are added to the response from enforcer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0de937ba26bbdee4e8374bc12a850b40f62573e8", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/0de937ba26bbdee4e8374bc12a850b40f62573e8", "committedDate": "2020-12-06T13:25:26Z", "message": "fix existing test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54f1609b9d7dc49636794f31fe7bcf569d3e4833", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/54f1609b9d7dc49636794f31fe7bcf569d3e4833", "committedDate": "2020-12-06T19:41:25Z", "message": "Add unit tests for route creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "148925e15594bd1fd8d9708660b1fc66ead53ee7", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/148925e15594bd1fd8d9708660b1fc66ead53ee7", "committedDate": "2020-12-07T03:17:04Z", "message": "Merge branch 'amali-pr-2' into envoy-sand-2-route-cache-disable-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff61d662a80a7ae554c6c11ec3c67865b90fa04f", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/ff61d662a80a7ae554c6c11ec3c67865b90fa04f", "committedDate": "2020-12-07T03:22:52Z", "message": "remove unused properties from route-cluster creation method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f86227a006e9d8827fb2dad6144fcff28eadb4c0", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/f86227a006e9d8827fb2dad6144fcff28eadb4c0", "committedDate": "2020-12-07T04:05:47Z", "message": "Sandbox endpoint cluster unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93e8166145f0478d92533a3f6b5d1a6dd6b10697", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/93e8166145f0478d92533a3f6b5d1a6dd6b10697", "committedDate": "2020-12-07T04:55:03Z", "message": "Add unit tests for extAuthz Context generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981575227c5235b146453baae8d24ea1c890d612", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/981575227c5235b146453baae8d24ea1c890d612", "committedDate": "2020-12-07T05:46:11Z", "message": "unit tests for production/sandbox endpoints in api level and resource level"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1156f967f3edf248753780baac766f79d8190662", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/1156f967f3edf248753780baac766f79d8190662", "committedDate": "2020-12-07T08:29:04Z", "message": "bug fix: RoutesConfiguration is not accepted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b002c599befc2ade66113e815052024f4f38daea", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/b002c599befc2ade66113e815052024f4f38daea", "committedDate": "2020-12-08T17:22:37Z", "message": "temp commit: Configuration change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "670a126f5586d774079ad3ded90d0288145f6a08", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/670a126f5586d774079ad3ded90d0288145f6a08", "committedDate": "2020-12-08T18:12:13Z", "message": "read endpoint certs from a file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0934647af5824211c20576e238b207d1181ae171", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/0934647af5824211c20576e238b207d1181ae171", "committedDate": "2020-12-10T03:20:19Z", "message": "change the certs,key location to router rather than adapter: fix existing test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66ded9273f68b23c4282540025478a5bed821e25", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/66ded9273f68b23c4282540025478a5bed821e25", "committedDate": "2020-12-10T09:02:46Z", "message": "add unit tests for upstream tls context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5143abf50e5bddaeb25048b19dd0a916baf9ba6e", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/5143abf50e5bddaeb25048b19dd0a916baf9ba6e", "committedDate": "2020-12-14T05:09:48Z", "message": "Merge branch 'chashika-pr' into backendTLS-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a3bfa3109383ed47376b16c1d7e567eb9a1b219", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/1a3bfa3109383ed47376b16c1d7e567eb9a1b219", "committedDate": "2020-12-14T09:15:29Z", "message": "bug fix: router listener cert is not set"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18a712df8136712d52424691756d6217a89dacca", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/18a712df8136712d52424691756d6217a89dacca", "committedDate": "2020-12-14T17:44:20Z", "message": "bug fix: move the certs from keystore to truststore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9cb92383c42db4503923a846008b1a1a83e5912", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/d9cb92383c42db4503923a846008b1a1a83e5912", "committedDate": "2020-12-16T12:09:57Z", "message": "implement integration tests for backend tls scenario"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95b8441bf2e5608fb976fcca0b1d071c871661e2", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/95b8441bf2e5608fb976fcca0b1d071c871661e2", "committedDate": "2020-12-17T03:40:06Z", "message": "make microgateway compatible with apictl m2 related changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d59e966ebc5bd7064efa42287e23c8ff92dee38", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/7d59e966ebc5bd7064efa42287e23c8ff92dee38", "committedDate": "2020-12-17T05:02:25Z", "message": "Revert \"Add analytics filter to envoy config\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5179c13ee58726acc4b0f5a80a2973be14012d17", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/5179c13ee58726acc4b0f5a80a2973be14012d17", "committedDate": "2020-12-17T08:54:58Z", "message": "update the adapter rest api basepath and path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f11a8d3fb3ce42137cb4debdc8fef00f0a209733", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/f11a8d3fb3ce42137cb4debdc8fef00f0a209733", "committedDate": "2020-12-17T19:56:53Z", "message": "temp fix: keytype is not populated when self contained token is used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82b2fd1f8e6192b1210979295a46a58a36110a57", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/82b2fd1f8e6192b1210979295a46a58a36110a57", "committedDate": "2020-12-17T19:57:32Z", "message": "temp fix: external auth failure response's http status code is incorrect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a70ff87d8700648ca4894846dc3477c7d5d5b442", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/a70ff87d8700648ca4894846dc3477c7d5d5b442", "committedDate": "2020-12-17T19:59:38Z", "message": "integration tests for production-sandbox endpoints"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d2d9716fb7de60a0aafa6bf7c92e6cb295cfaa9", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/1d2d9716fb7de60a0aafa6bf7c92e6cb295cfaa9", "committedDate": "2020-12-18T04:12:46Z", "message": "bug fix: when production endpoints does not available and sandbox endpoint has a basepath, request fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19cc886c5c2c3bffcbd5be31cbe1481cb768b771", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/19cc886c5c2c3bffcbd5be31cbe1481cb768b771", "committedDate": "2020-12-18T05:59:20Z", "message": "remove unnecessary todo statements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/71ab8d74e1eafe168bcc80899b931405ad98eabe", "committedDate": "2020-12-18T10:46:38Z", "message": "Merge branch 'envoy-gw' into backendTLS-2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1Mzk3NzAw", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555397700", "createdAt": "2020-12-18T11:08:48Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowODo0OFrOIIesSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTowODo0OFrOIIesSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2MjM3Nw==", "bodyText": "Check if this works with windows platform.", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545762377", "createdAt": "2020-12-18T11:08:48Z", "author": {"login": "VirajSalaka"}, "path": "adapter/pkg/api/file_read_utils.go", "diffHunk": "@@ -44,35 +57,34 @@ func ApplyAPIProject(payload []byte) error {\n \n \t// TODO: (VirajSalaka) this won't support for distributed openAPI definition\n \tfor _, file := range zipReader.File {\n-\t\tif strings.HasSuffix(file.Name, \"Meta-information/swagger.yaml\") {\n+\t\tif strings.HasSuffix(file.Name, openAPIDir+string(os.PathSeparator)+openAPIFilename) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDAxMDc3", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555401077", "createdAt": "2020-12-18T11:13:50Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMToxMzo1MFrOIIe27Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMToxMzo1MFrOIIe27Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc2NTEwMQ==", "bodyText": "Validate the content with a regex", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545765101", "createdAt": "2020-12-18T11:13:50Z", "author": {"login": "VirajSalaka"}, "path": "adapter/pkg/api/file_read_utils.go", "diffHunk": "@@ -44,35 +57,34 @@ func ApplyAPIProject(payload []byte) error {\n \n \t// TODO: (VirajSalaka) this won't support for distributed openAPI definition\n \tfor _, file := range zipReader.File {\n-\t\tif strings.HasSuffix(file.Name, \"Meta-information/swagger.yaml\") {\n+\t\tif strings.HasSuffix(file.Name, openAPIDir+string(os.PathSeparator)+openAPIFilename) {\n \t\t\tloggers.LoggerAPI.Debugf(\"openAPI file : %v\", file.Name)\n \t\t\tunzippedFileBytes, err := readZipFile(file)\n \t\t\tif err != nil {\n \t\t\t\tloggers.LoggerAPI.Errorf(\"Error occured while reading the openapi file. %v\", err.Error())\n \t\t\t\tcontinue\n \t\t\t}\n-\t\t\tapiJsn, conversionErr := utills.ToJSON(unzippedFileBytes)\n+\t\t\tapiJsn, conversionErr = utills.ToJSON(unzippedFileBytes)\n \t\t\tif conversionErr != nil {\n \t\t\t\tloggers.LoggerAPI.Errorf(\"Error converting api file to json: %v\", err.Error())\n \t\t\t\treturn conversionErr\n \t\t\t}\n-\t\t\txds.UpdateEnvoy(apiJsn)\n+\t\t} else if strings.Contains(file.Name, endpointCertDir+string(os.PathSeparator)) &&\n+\t\t\t(strings.HasSuffix(file.Name, crtExtension) || strings.HasSuffix(file.Name, pemExtension)) {\n+\t\t\t//TODO: (VirajSalaka) Validate the content of cert files", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDA3MjU4", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555407258", "createdAt": "2020-12-18T11:24:20Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMToyNDoyMFrOIIfKKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMToyNDoyMFrOIIfKKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc3MDAyNA==", "bodyText": "Add the readme on how to generate this auto generated codes", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545770024", "createdAt": "2020-12-18T11:24:20Z", "author": {"login": "VirajSalaka"}, "path": "adapter/pkg/api/restserver/config_restapi.go", "diffHunk": "@@ -75,14 +75,15 @@ func configureAPI(api *operations.RestapiAPI) http.Handler {\n \t\treturn &p, nil\n \t}\n \n-\tapi.APIIndividualPostImportAPIHandler = api_individual.PostImportAPIHandlerFunc(func(params api_individual.PostImportAPIParams, principal *models.Principal) middleware.Responder {\n+\tapi.APIIndividualPostApisHandler = api_individual.PostApisHandlerFunc(func(params api_individual.PostApisParams,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDIyMTg2", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555422186", "createdAt": "2020-12-18T11:49:03Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTo0OTowM1rOIIf3qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTo0OTowM1rOIIf3qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4MTY3NQ==", "bodyText": "within Ext authz, do path rewrite", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545781675", "createdAt": "2020-12-18T11:49:03Z", "author": {"login": "VirajSalaka"}, "path": "adapter/pkg/oasparser/envoyconf/routesWithClusters.go", "diffHunk": "@@ -48,117 +49,138 @@ import (\n //\n // First set of routes, clusters, addresses represents the production endpoints related\n // configurations. Next set represents the sandbox endpoints related configurations.\n-func CreateRoutesWithClusters(mgwSwagger model.MgwSwagger) (routesP []*routev3.Route,\n-\tclustersP []*clusterv3.Cluster, addressesP []*corev3.Address,\n-\troutesS []*routev3.Route, clustersS []*clusterv3.Cluster, addressesS []*corev3.Address) {\n+func CreateRoutesWithClusters(mgwSwagger model.MgwSwagger, upstreamCerts []byte) (routesP []*routev3.Route,\n+\tclustersP []*clusterv3.Cluster, addressesP []*corev3.Address) {\n \tvar (\n-\t\troutesProd              []*routev3.Route\n-\t\tclustersProd            []*clusterv3.Cluster\n-\t\tendpointProd            []model.Endpoint\n+\t\troutesProd []*routev3.Route\n+\t\tclusters   []*clusterv3.Cluster\n+\t\tendpoints  []*corev3.Address\n+\n \t\tapiLevelEndpointProd    []model.Endpoint\n \t\tapilevelClusterProd     *clusterv3.Cluster\n \t\tapiLevelClusterNameProd string\n-\t\tendpointsProd           []*corev3.Address\n \n-\t\troutesSand              []*routev3.Route\n-\t\tclustersSand            []*clusterv3.Cluster\n-\t\tendpointSand            []model.Endpoint\n \t\tapiLevelEndpointSand    []model.Endpoint\n \t\tapilevelClusterSand     *clusterv3.Cluster\n \t\tapiLevelClusterNameSand string\n-\t\tendpointsSand           []*corev3.Address\n \t)\n-\t// check API level sandbox endpoints availble\n-\tif len(mgwSwagger.GetSandEndpoints()) > 0 {\n-\t\tapiLevelEndpointSand = mgwSwagger.GetSandEndpoints()\n-\t\tapilevelAddressSand := createAddress(apiLevelEndpointSand[0].Host, apiLevelEndpointSand[0].Port)\n-\t\tapiLevelClusterNameSand = strings.TrimSpace(sandClustersConfigNamePrefix +\n-\t\t\tstrings.Replace(mgwSwagger.GetTitle(), \" \", \"\", -1) + mgwSwagger.GetVersion())\n-\t\tapilevelClusterSand = createCluster(apilevelAddressSand, apiLevelClusterNameSand, apiLevelEndpointSand[0].URLType)\n-\t\tclustersSand = append(clustersSand, apilevelClusterSand)\n-\t\tendpointsSand = append(endpointsSand, apilevelAddressSand)\n-\t}\n+\t// To keep track of API Level production endpoint basePath\n+\tapiEndpointBasePath := \"\"\n+\n+\tapiTitle := mgwSwagger.GetTitle()\n+\tapiVersion := mgwSwagger.GetVersion()\n+\tapiBasePath := mgwSwagger.GetXWso2Basepath()\n \n \t// check API level production endpoints available\n \tif len(mgwSwagger.GetProdEndpoints()) > 0 {\n \t\tapiLevelEndpointProd = mgwSwagger.GetProdEndpoints()\n \t\tapilevelAddressP := createAddress(apiLevelEndpointProd[0].Host, apiLevelEndpointProd[0].Port)\n \t\tapiLevelClusterNameProd = strings.TrimSpace(prodClustersConfigNamePrefix +\n \t\t\tstrings.Replace(mgwSwagger.GetTitle(), \" \", \"\", -1) + mgwSwagger.GetVersion())\n-\t\tapilevelClusterProd = createCluster(apilevelAddressP, apiLevelClusterNameProd, apiLevelEndpointProd[0].URLType)\n-\t\tclustersProd = append(clustersProd, apilevelClusterProd)\n-\t\tendpointsProd = append(endpointsProd, apilevelAddressP)\n+\t\tapilevelClusterProd = createCluster(apilevelAddressP, apiLevelClusterNameProd, apiLevelEndpointProd[0].URLType,\n+\t\t\tupstreamCerts)\n+\t\tclusters = append(clusters, apilevelClusterProd)\n+\t\tendpoints = append(endpoints, apilevelAddressP)\n+\t\tapiEndpointBasePath = apiLevelEndpointProd[0].Basepath\n \n \t} else {\n \t\tlogger.LoggerOasparser.Warn(\"API level Producton endpoints are not defined\")\n \t}\n-\tfor _, resource := range mgwSwagger.GetResources() {\n-\t\tapiTitle := mgwSwagger.GetTitle()\n-\t\tapiVersion := mgwSwagger.GetVersion()\n-\t\tapiBasePath := mgwSwagger.GetXWso2Basepath()\n \n-\t\t// resource level check sandbox endpoints\n-\t\tif len(resource.GetSandEndpoints()) > 0 {\n-\t\t\tendpointSand = resource.GetSandEndpoints()\n-\t\t\taddressSand := createAddress(endpointSand[0].Host, endpointSand[0].Port)\n-\t\t\t// TODO: (VirajSalaka) 0 is hardcoded as only one endpoint is supported at the moment\n-\t\t\tclusterNameSand := strings.TrimSpace(apiLevelClusterNameSand + \"_\" + strings.Replace(resource.GetID(), \" \", \"\", -1) +\n-\t\t\t\t\"0\")\n-\t\t\tclusterSand := createCluster(addressSand, clusterNameSand, endpointSand[0].URLType)\n-\t\t\tclustersSand = append(clustersSand, clusterSand)\n-\t\t\tclusterRefSand := clusterSand.GetName()\n-\n-\t\t\t// sandbox endpoints\n-\t\t\trouteS := createRoute(apiTitle, apiBasePath, apiVersion, endpointSand[0], resource, clusterRefSand)\n-\t\t\troutesSand = append(routesSand, routeS)\n-\t\t\tendpointsSand = append(endpointsSand, addressSand)\n-\n-\t\t\t// API level check\n-\t\t} else if len(mgwSwagger.GetSandEndpoints()) > 0 {\n-\t\t\tendpointSand = apiLevelEndpointSand\n-\t\t\tclusterRefSand := apilevelClusterSand.GetName()\n+\t// check API level sandbox endpoints availble\n+\tif len(mgwSwagger.GetSandEndpoints()) > 0 {\n+\t\tapiLevelEndpointSand = mgwSwagger.GetSandEndpoints()\n+\t\tif apiEndpointBasePath != apiLevelEndpointSand[0].Basepath && len(apiLevelEndpointProd) > 0 {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDI4ODg0", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555428884", "createdAt": "2020-12-18T11:59:41Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTo1OTo0MVrOIIgMFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMTo1OTo0MVrOIIgMFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4NjkwMA==", "bodyText": "Check against unavailable cipher suites.", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545786900", "createdAt": "2020-12-18T11:59:41Z", "author": {"login": "VirajSalaka"}, "path": "resources/conf/config.toml", "diffHunk": "@@ -15,6 +15,16 @@ listenerTLSEnabled = true\n listenerCertPath = \"/home/wso2/security/localhost.pem\"\n listenerKeyPath = \"/home/wso2/security/localhost.key\"\n \n+[envoy.upstream]\n+[envoy.upstream.tls]\n+minimumProtocolVersion = \"TLS1_2\"\n+maximumProtocolVersion = \"TLS1_2\"\n+ciphers = \"ECDHE-ECDSA-AES128-GCM-SHA256, ECDHE-RSA-AES128-GCM-SHA256, ECDHE-ECDSA-AES128-SHA, ECDHE-RSA-AES128-SHA, AES128-GCM-SHA256, AES128-SHA, ECDHE-ECDSA-AES256-GCM-SHA384, ECDHE-RSA-AES256-GCM-SHA384, ECDHE-ECDSA-AES256-SHA, ECDHE-RSA-AES256-SHA, AES256-GCM-SHA384, AES256-SHA\"  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDI5NzQ0", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555429744", "createdAt": "2020-12-18T12:00:55Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjowMDo1NVrOIIgOWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjowMDo1NVrOIIgOWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4NzQ4Mw==", "bodyText": "Check with security team to change to 1.1", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545787483", "createdAt": "2020-12-18T12:00:55Z", "author": {"login": "VirajSalaka"}, "path": "resources/conf/config.toml", "diffHunk": "@@ -15,6 +15,16 @@ listenerTLSEnabled = true\n listenerCertPath = \"/home/wso2/security/localhost.pem\"\n listenerKeyPath = \"/home/wso2/security/localhost.key\"\n \n+[envoy.upstream]\n+[envoy.upstream.tls]\n+minimumProtocolVersion = \"TLS1_2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDMyMTI2", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555432126", "createdAt": "2020-12-18T12:04:50Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjowNDo1MVrOIIgVKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjowNDo1MVrOIIgVKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc4OTIyNw==", "bodyText": "Remove comments", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545789227", "createdAt": "2020-12-18T12:04:51Z", "author": {"login": "VirajSalaka"}, "path": "adapter/pkg/oasparser/envoyconf/routesWithClusters.go", "diffHunk": "@@ -258,26 +333,33 @@ func createRoute(title string, xWso2Basepath string, version string, endpoint mo\n \t\tHeaders: []*routev3.HeaderMatcher{&headerMatcherArray},\n \t}\n \n-\thostRewriteSpecifier := &routev3.RouteAction_HostRewriteLiteral{\n-\t\tHostRewriteLiteral: endpoint.Host,\n+\thostRewriteSpecifier := &routev3.RouteAction_AutoHostRewrite{\n+\t\tAutoHostRewrite: &wrapperspb.BoolValue{\n+\t\t\tValue: true,\n+\t\t},\n \t}\n+\t// var headerBasedClusterSpecifier *routev3.RouteAction_ClusterHeader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 333}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDMzOTIx", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555433921", "createdAt": "2020-12-18T12:08:07Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjowODowN1rOIIgbAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjowODowN1rOIIgbAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5MDcyMA==", "bodyText": "Simplify the boolean logic", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545790720", "createdAt": "2020-12-18T12:08:07Z", "author": {"login": "VirajSalaka"}, "path": "adapter/pkg/oasparser/envoyconf/routesWithClusters.go", "diffHunk": "@@ -309,19 +391,38 @@ func createRoute(title string, xWso2Basepath string, version string, endpoint mo\n \t\t\t\t\t\t},\n \t\t\t\t\t\tRegex: xWso2Basepath,\n \t\t\t\t\t},\n-\t\t\t\t\tSubstitution: endpoint.Basepath,\n+\t\t\t\t\tSubstitution: endpointBasepath,\n \t\t\t\t},\n-\t\t\t\tClusterSpecifier: clusterSpecifier,\n \t\t\t},\n \t\t}\n \t} else {\n \t\taction = &routev3.Route_Route{\n \t\t\tRoute: &routev3.RouteAction{\n \t\t\t\tHostRewriteSpecifier: hostRewriteSpecifier,\n-\t\t\t\tClusterSpecifier:     clusterSpecifier,\n \t\t\t},\n \t\t}\n \t}\n+\n+\t//TODO: (VirajSalaka) Introduce a separate function\n+\tif !(prodClusterName == \"\" || sandClusterName == \"\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 396}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDM0NzU5", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555434759", "createdAt": "2020-12-18T12:09:36Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjowOTozNlrOIIgdvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjowOTozNlrOIIgdvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5MTQyMQ==", "bodyText": "Make this mg instead of mgw", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545791421", "createdAt": "2020-12-18T12:09:36Z", "author": {"login": "VirajSalaka"}, "path": "adapter/resources/adminAPI.yaml", "diffHunk": "@@ -14,15 +14,15 @@\n         name: \"Apache 2.0\"\n         url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n     host: \"apis.wso2.com\"\n-    basePath: \"/mgw/1.0\"\n+    basePath: \"/api/mgw/adapter/0.1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDM0OTk2", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555434996", "createdAt": "2020-12-18T12:10:00Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoxMDowMFrOIIgeaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoxMDowMFrOIIgeaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5MTU5Mg==", "bodyText": "new line", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545791592", "createdAt": "2020-12-18T12:10:00Z", "author": {"login": "VirajSalaka"}, "path": "adapter/test-resources/envoycodegen/certs/testcrt.crt", "diffHunk": "@@ -0,0 +1,44 @@\n+-----BEGIN CERTIFICATE-----\n+MIIH0zCCBbugAwIBAgIIXsO3pkN/pOAwDQYJKoZIhvcNAQEFBQAwQjESMBAGA1UE\n+AwwJQUNDVlJBSVoxMRAwDgYDVQQLDAdQS0lBQ0NWMQ0wCwYDVQQKDARBQ0NWMQsw\n+CQYDVQQGEwJFUzAeFw0xMTA1MDUwOTM3MzdaFw0zMDEyMzEwOTM3MzdaMEIxEjAQ\n+BgNVBAMMCUFDQ1ZSQUlaMTEQMA4GA1UECwwHUEtJQUNDVjENMAsGA1UECgwEQUND\n+VjELMAkGA1UEBhMCRVMwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQCb\n+qau/YUqXry+XZpp0X9DZlv3P4uRm7x8fRzPCRKPfmt4ftVTdFXxpNRFvu8gMjmoY\n+HtiP2Ra8EEg2XPBjs5BaXCQ316PWywlxufEBcoSwfdtNgM3802/J+Nq2DoLSRYWo\n+G2ioPej0RGy9ocLLA76MPhMAhN9KSMDjIgro6TenGEyxCQ0jVn8ETdkXhBilyNpA\n+lHPrzg5XPAOBOp0KoVdDaaxXbXmQeOW1tDvYvEyNKKGno6e6Ak4l0Squ7a4DIrhr\n+IA8wKFSVf+DuzgpmndFALW4ir50awQUZ0m/A8p/4e7MCQvtQqR0tkw8jq8bBD5L/\n+0KIV9VMJcRz/RROE5iZe+OCIHAr8Fraocwa48GOEAqDGWuzndN9wrqODJerWx5eH\n+k6fGioozl2A3ED6XPm4pFdahD9GILBKfb6qkxkLrQaLjlUPTAYVtjrs78yM2x/47\n+4KElB0iryYl0/wiPgL/AlmXz7uxLaL2diMMxs0Dx6M/2OLuc5NF/1OVYm3z61PMO\n+m3WR5LpSLhl+0fXNWhn8ugb2+1KoS5kE3fj5tItQo05iifCHJPqDQsGH+tUtKSpa\n+cXpkatcnYGMN285J9Y0fkIkyF/hzQ7jSWpOGYdbhdQrqeWZ2iE9x6wQl1gpaepPl\n+uUsXQA+xtrn13k/c4LOsOxFwYIRKQ26ZIMApcQrAZQIDAQABo4ICyzCCAscwfQYI\n+KwYBBQUHAQEEcTBvMEwGCCsGAQUFBzAChkBodHRwOi8vd3d3LmFjY3YuZXMvZmls\n+ZWFkbWluL0FyY2hpdm9zL2NlcnRpZmljYWRvcy9yYWl6YWNjdjEuY3J0MB8GCCsG\n+AQUFBzABhhNodHRwOi8vb2NzcC5hY2N2LmVzMB0GA1UdDgQWBBTSh7Tj3zcnk1X2\n+VuqB5TbMjB4/vTAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNKHtOPfNyeT\n+VfZW6oHlNsyMHj+9MIIBcwYDVR0gBIIBajCCAWYwggFiBgRVHSAAMIIBWDCCASIG\n+CCsGAQUFBwICMIIBFB6CARAAQQB1AHQAbwByAGkAZABhAGQAIABkAGUAIABDAGUA\n+cgB0AGkAZgBpAGMAYQBjAGkA8wBuACAAUgBhAO0AegAgAGQAZQAgAGwAYQAgAEEA\n+QwBDAFYAIAAoAEEAZwBlAG4AYwBpAGEAIABkAGUAIABUAGUAYwBuAG8AbABvAGcA\n+7QBhACAAeQAgAEMAZQByAHQAaQBmAGkAYwBhAGMAaQDzAG4AIABFAGwAZQBjAHQA\n+cgDzAG4AaQBjAGEALAAgAEMASQBGACAAUQA0ADYAMAAxADEANQA2AEUAKQAuACAA\n+QwBQAFMAIABlAG4AIABoAHQAdABwADoALwAvAHcAdwB3AC4AYQBjAGMAdgAuAGUA\n+czAwBggrBgEFBQcCARYkaHR0cDovL3d3dy5hY2N2LmVzL2xlZ2lzbGFjaW9uX2Mu\n+aHRtMFUGA1UdHwROMEwwSqBIoEaGRGh0dHA6Ly93d3cuYWNjdi5lcy9maWxlYWRt\n+aW4vQXJjaGl2b3MvY2VydGlmaWNhZG9zL3JhaXphY2N2MV9kZXIuY3JsMA4GA1Ud\n+DwEB/wQEAwIBBjAXBgNVHREEEDAOgQxhY2N2QGFjY3YuZXMwDQYJKoZIhvcNAQEF\n+BQADggIBAJcxAp/n/UNnSEQU5CmH7UwoZtCPNdpNYbdKl02125DgBS4OxnnQ8pdp\n+D70ER9m+27Up2pvZrqmZ1dM8MJP1jaGo/AaNRPTKFpV8M9xii6g3+CfYCS0b78gU\n+JyCpZET/LtZ1qmxNYEAZSUNUY9rizLpm5U9EelvZaoErQNV/+QEnWCzI7UiRfD+m\n+AM/EKXMRNt6GGT6d7hmKG9Ww7Y49nCrADdg9ZuM8Db3VlFzi4qc1GwQA9j9ajepD\n+vV+JHanBsMyZ4k0ACtrJJ1vnE5Bc5PUzolVt3OAJTS+xJlsndQAJxGJ3KQhfnlms\n+tn6tn1QwIgPBHnFk/vk4CpYY3QIUrCPLBhwepH2NDd4nQeit2hW3sCPdK6jT2iWH\n+7ehVRE2I9DZ+hJp4rPcOVkkO1jMl1oRQQmwgEh0q1b688nCBpHBgvgW1m54ERL5h\n+I6zppSSMEYCUWqKiuUnSwdzRp+0xESyeGabu4VXhwOrPDYTkF7eifKXeVSUG7szA\n+h1xA2syVP1XgNce4hL60Xc16gwFy7ofmXx2utYXGJt/mwZrpHgJHnyqobalbz+xF\n+d3+YJ5oyXSrjhO7FmGYvliAd3djDJ9ew+f7Zfc3Qn48LFFhRny+Lwzgt3uiP1o2H\n+pPVWQxaZLPSkVrQ0uGE3ycJYgBugl6H8WY3pEfbRD0tVNEYqi4Y7\n+-----END CERTIFICATE-----", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDQwNjIx", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555440621", "createdAt": "2020-12-18T12:19:54Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoxOTo1NFrOIIgvwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoxOTo1NFrOIIgvwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5NjAzNA==", "bodyText": "Constants", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545796034", "createdAt": "2020-12-18T12:19:54Z", "author": {"login": "VirajSalaka"}, "path": "enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java", "diffHunk": "@@ -46,15 +49,65 @@ public boolean handleRequest(RequestContext requestContext) {\n                 if (authenticator.canAuthenticate(requestContext)) {\n                     AuthenticationContext authenticate = authenticator.authenticate(requestContext);\n                     if (authenticate.isAuthenticated()) {\n+                        updateClusterHeaderAndCheckEnv(requestContext, authenticate);\n                         return true;\n                     }\n                 }\n             }\n         } catch (APISecurityException e) {\n-            requestContext.getProperties().put(\"code\", e.getErrorCode());\n+            //TODO: (VirajSalaka) provide the error code properly based on exception (401, 403, 429 etc)\n+            requestContext.getProperties().put(\"code\", \"401\");\n             requestContext.getProperties().put(\"error_code\", e.getErrorCode());\n             requestContext.getProperties().put(\"error_description\", e.getMessage());\n         }\n         return false;\n     }\n+\n+    /**\n+     * Update the cluster header based on the keyType and authenticate the token against its respective endpoint\n+     * environment.\n+     * \n+     * @param requestContext request Context \n+     * @param authContext authentication context\n+     * @throws APISecurityException if the environment and \n+     */\n+    private void updateClusterHeaderAndCheckEnv(RequestContext requestContext, AuthenticationContext authContext)\n+            throws APISecurityException {\n+\n+        String keyType = authContext.getKeyType();\n+        if (StringUtils.isEmpty(authContext.getKeyType())) {\n+            keyType = \"PRODUCTION\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDQxNzY0", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555441764", "createdAt": "2020-12-18T12:21:58Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoyMTo1OFrOIIgzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoyMTo1OFrOIIgzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5Njk1OA==", "bodyText": "Remove the redundant isEmpty check", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545796958", "createdAt": "2020-12-18T12:21:58Z", "author": {"login": "VirajSalaka"}, "path": "enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java", "diffHunk": "@@ -46,15 +49,65 @@ public boolean handleRequest(RequestContext requestContext) {\n                 if (authenticator.canAuthenticate(requestContext)) {\n                     AuthenticationContext authenticate = authenticator.authenticate(requestContext);\n                     if (authenticate.isAuthenticated()) {\n+                        updateClusterHeaderAndCheckEnv(requestContext, authenticate);\n                         return true;\n                     }\n                 }\n             }\n         } catch (APISecurityException e) {\n-            requestContext.getProperties().put(\"code\", e.getErrorCode());\n+            //TODO: (VirajSalaka) provide the error code properly based on exception (401, 403, 429 etc)\n+            requestContext.getProperties().put(\"code\", \"401\");\n             requestContext.getProperties().put(\"error_code\", e.getErrorCode());\n             requestContext.getProperties().put(\"error_description\", e.getMessage());\n         }\n         return false;\n     }\n+\n+    /**\n+     * Update the cluster header based on the keyType and authenticate the token against its respective endpoint\n+     * environment.\n+     * \n+     * @param requestContext request Context \n+     * @param authContext authentication context\n+     * @throws APISecurityException if the environment and \n+     */\n+    private void updateClusterHeaderAndCheckEnv(RequestContext requestContext, AuthenticationContext authContext)\n+            throws APISecurityException {\n+\n+        String keyType = authContext.getKeyType();\n+        if (StringUtils.isEmpty(authContext.getKeyType())) {\n+            keyType = \"PRODUCTION\";\n+        } \n+\n+        // Header needs to be set only if the relevant cluster is available for the resource and the key type is\n+        // matched.\n+        if (requestContext.isClusterHeaderEnabled()) {\n+            if (keyType.equalsIgnoreCase(\"PRODUCTION\") &&\n+                    !StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n+                requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n+                        requestContext.getProdClusterHeader());\n+            } else if (keyType.equalsIgnoreCase(\"SANDBOX\") &&\n+                    !StringUtils.isEmpty(requestContext.getSandClusterHeader())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDQyODIz", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555442823", "createdAt": "2020-12-18T12:23:48Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoyMzo0OFrOIIg2cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoyMzo0OFrOIIg2cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTc5Nzc0Nw==", "bodyText": "Error message should be as same as the one presents in API Manager", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545797747", "createdAt": "2020-12-18T12:23:48Z", "author": {"login": "VirajSalaka"}, "path": "enforcer/src/main/java/org/wso2/micro/gateway/enforcer/security/AuthFilter.java", "diffHunk": "@@ -46,15 +49,65 @@ public boolean handleRequest(RequestContext requestContext) {\n                 if (authenticator.canAuthenticate(requestContext)) {\n                     AuthenticationContext authenticate = authenticator.authenticate(requestContext);\n                     if (authenticate.isAuthenticated()) {\n+                        updateClusterHeaderAndCheckEnv(requestContext, authenticate);\n                         return true;\n                     }\n                 }\n             }\n         } catch (APISecurityException e) {\n-            requestContext.getProperties().put(\"code\", e.getErrorCode());\n+            //TODO: (VirajSalaka) provide the error code properly based on exception (401, 403, 429 etc)\n+            requestContext.getProperties().put(\"code\", \"401\");\n             requestContext.getProperties().put(\"error_code\", e.getErrorCode());\n             requestContext.getProperties().put(\"error_description\", e.getMessage());\n         }\n         return false;\n     }\n+\n+    /**\n+     * Update the cluster header based on the keyType and authenticate the token against its respective endpoint\n+     * environment.\n+     * \n+     * @param requestContext request Context \n+     * @param authContext authentication context\n+     * @throws APISecurityException if the environment and \n+     */\n+    private void updateClusterHeaderAndCheckEnv(RequestContext requestContext, AuthenticationContext authContext)\n+            throws APISecurityException {\n+\n+        String keyType = authContext.getKeyType();\n+        if (StringUtils.isEmpty(authContext.getKeyType())) {\n+            keyType = \"PRODUCTION\";\n+        } \n+\n+        // Header needs to be set only if the relevant cluster is available for the resource and the key type is\n+        // matched.\n+        if (requestContext.isClusterHeaderEnabled()) {\n+            if (keyType.equalsIgnoreCase(\"PRODUCTION\") &&\n+                    !StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n+                requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n+                        requestContext.getProdClusterHeader());\n+            } else if (keyType.equalsIgnoreCase(\"SANDBOX\") &&\n+                    !StringUtils.isEmpty(requestContext.getSandClusterHeader())) {\n+                requestContext.addResponseHeaders(AdapterConstants.CLUSTER_HEADER,\n+                        requestContext.getSandClusterHeader());\n+            } else {\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,\n+                        \"Invalid Token to access production/sandbox environment.\");\n+            }\n+        } else {\n+            // Even if the header flag is false, it is required to check if the relevant resource has a defined cluster\n+            // based on environment. \n+            // If not it should provide authentication error.\n+            // Always at least one of the cluster header values should be set.\n+            if (keyType.equalsIgnoreCase(\"PRODUCTION\")\n+                    && StringUtils.isEmpty(requestContext.getProdClusterHeader())) {\n+                throw new APISecurityException(APISecurityConstants.API_AUTH_INVALID_CREDENTIALS,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDQ1ODkz", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555445893", "createdAt": "2020-12-18T12:29:08Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoyOTowOFrOIIhAww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjoyOTowOFrOIIhAww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwMDM4Nw==", "bodyText": "change the file name to mg.key", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545800387", "createdAt": "2020-12-18T12:29:08Z", "author": {"login": "VirajSalaka"}, "path": "resources/router/security/localhost.pem", "diffHunk": "@@ -0,0 +1,21 @@\n+-----BEGIN CERTIFICATE-----\n+MIIDhTCCAm2gAwIBAgIJAJrwNDwLlCFQMA0GCSqGSIb3DQEBCwUAMGQxCzAJBgNV", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDQ4MDA4", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555448008", "createdAt": "2020-12-18T12:32:50Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjozMjo1MVrOIIhHUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMjozMjo1MVrOIIhHUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgwMjA2NQ==", "bodyText": "check if an argument could be passed and start tls, mtls backends only for the required test cases.", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545802065", "createdAt": "2020-12-18T12:32:51Z", "author": {"login": "VirajSalaka"}, "path": "test/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java", "diffHunk": "@@ -32,35 +43,68 @@\n     private static final Logger logger = Logger.getLogger(MockBackEndServer.class.getName());\n     private HttpServer httpServer;\n     private String backEndServerUrl;\n-    private static int backEndServerPort;\n+    private int backEndServerPort;\n     private static boolean retryDone = false;\n-\n-\n+    private boolean secured = false;\n+    private boolean mtlsEnabled = false;\n \n     public static void main(String[] args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NDcyMjM5", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-555472239", "createdAt": "2020-12-18T13:11:19Z", "commit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzoxMToyMFrOIIiS8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxMzoxMToyMFrOIIiS8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTgyMTQyNg==", "bodyText": "SAN validation based on verifyHostName\nGateway Types (Prod-sand, prod only, sand only)\nUnsecure https communication.", "url": "https://github.com/wso2/product-microgateway/pull/1525#discussion_r545821426", "createdAt": "2020-12-18T13:11:20Z", "author": {"login": "VirajSalaka"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/endpoints/ProductionSandboxTestCase.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.endpoints;\n+\n+import com.github.dockerjava.zerodep.shaded.org.apache.hc.core5.http.HttpStatus;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+import org.wso2am.micro.gw.tests.common.BaseTestCase;\n+import org.wso2am.micro.gw.tests.common.model.API;\n+import org.wso2am.micro.gw.tests.common.model.ApplicationDTO;\n+import org.wso2am.micro.gw.tests.util.ApiDeployment;\n+import org.wso2am.micro.gw.tests.util.ApiProjectGenerator;\n+import org.wso2am.micro.gw.tests.util.HttpResponse;\n+import org.wso2am.micro.gw.tests.util.HttpsClientRequest;\n+import org.wso2am.micro.gw.tests.util.TestConstant;\n+import org.wso2am.micro.gw.mockbackend.ResponseConstants;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public class ProductionSandboxTestCase extends BaseTestCase {\n+    protected String jwtTokenProd;\n+    protected String jwtTokenSand;\n+\n+    @BeforeClass(description = \"initialise the setup\")\n+    void start() throws Exception {\n+        super.startMGW();\n+\n+        //deploy the api\n+        //api yaml file should put to the resources/apis/openApis folder\n+        String prodSandApiZipfile = ApiProjectGenerator.createApictlProjZip(\n+                \"prod-sand/prodSandOpenAPI.yaml\");\n+        String prodOnlyApiZipfile = ApiProjectGenerator.createApictlProjZip(\n+                \"prod-sand/prodOpenAPI.yaml\");\n+        String sandOnlyApiZipfile = ApiProjectGenerator.createApictlProjZip(\n+                \"prod-sand/sandOpenAPI.yaml\");\n+        ApiDeployment.deployAPI(prodSandApiZipfile);\n+        ApiDeployment.deployAPI(prodOnlyApiZipfile);\n+        ApiDeployment.deployAPI(sandOnlyApiZipfile);\n+\n+        //TODO: (VirajSalaka) change the token\n+        //generate JWT token from APIM\n+        API api = new API();\n+        api.setName(\"PetStoreAPI\");\n+        api.setContext(\"petstore/v1\");\n+        api.setProdEndpoint(getMockServiceURLHttp(\"/echo/prod\"));\n+        api.setVersion(\"1.0.0\");\n+        api.setProvider(\"admin\");\n+\n+        //Define application info\n+        ApplicationDTO application = new ApplicationDTO();\n+        application.setName(\"jwtApp\");\n+        application.setTier(\"Unlimited\");\n+        application.setId((int) (Math.random() * 1000));\n+\n+        jwtTokenProd = getJWT(api, application, \"Unlimited\", TestConstant.KEY_TYPE_PRODUCTION, 3600);\n+        jwtTokenSand = getJWT(api, application, \"Unlimited\", TestConstant.KEY_TYPE_SANDBOX, 3600);\n+    }\n+\n+    @Test(description = \"Invoke Production and Sandbox endpoint when both endpoints provided\")\n+    public void invokeProdSandEndpoints() throws Exception {\n+        Map<String, String> prodHeaders = new HashMap<String, String>();\n+        prodHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenProd);\n+        HttpResponse prodResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/pet/findByStatus\") , prodHeaders);\n+\n+        Assert.assertNotNull(prodResponse);\n+        Assert.assertEquals(prodResponse.getResponseCode(), HttpStatus.SC_OK,\"Response code mismatched\");\n+        Assert.assertEquals(prodResponse.getData(), ResponseConstants.RESPONSE_BODY,\n+                \"Response message mismatch.\");\n+\n+        Map<String, String> sandHeaders = new HashMap<String, String>();\n+        sandHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenSand);\n+        HttpResponse sandResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/pet/findByStatus\"), sandHeaders);\n+\n+        Assert.assertNotNull(sandResponse);\n+        Assert.assertEquals(sandResponse.getResponseCode(), HttpStatus.SC_OK,\"Response code mismatched\");\n+        Assert.assertEquals(sandResponse.getData(), ResponseConstants.API_SANDBOX_RESPONSE,\n+                \"Response message mismatch.\");\n+    }\n+\n+    @Test(description = \"Invoke Sandbox endpoint when sandbox endpoints provided alone\")\n+    public void invokeSandboxEndpointOnly() throws Exception {\n+        Map<String, String> sandHeaders = new HashMap<String, String>();\n+        sandHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenSand);\n+        HttpResponse sandResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/sand/pet/findByStatus\") , sandHeaders);\n+\n+        Assert.assertNotNull(sandResponse, \"Sandbox endpoint response should not be null\");\n+        Assert.assertEquals(sandResponse.getResponseCode(), HttpStatus.SC_OK,\"Response code mismatched\");\n+        Assert.assertEquals(sandResponse.getData(), ResponseConstants.API_SANDBOX_RESPONSE,\n+                \"Response message mismatch.\");\n+\n+        Map<String, String> prodHeaders = new HashMap<String, String>();\n+        prodHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenProd);\n+        HttpResponse prodResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/sand/pet/findByStatus\") , prodHeaders);\n+\n+        Assert.assertNotNull(prodResponse, \"Production endoint response should not be null\");\n+        Assert.assertEquals(prodResponse.getResponseCode(), HttpStatus.SC_UNAUTHORIZED,\"Response code mismatched\");\n+    }\n+\n+    @Test(description = \"Invoke Production endpoint when production endpoints provided alone\")\n+    public void invokeProdEndpointOnly() throws Exception {\n+        Map<String, String> headers = new HashMap<String, String>();\n+        headers.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenProd);\n+        HttpResponse response = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/prod/pet/findByStatus\") , headers);\n+\n+        Assert.assertNotNull(response, \"Production endpoint response should not be null\");\n+        Assert.assertEquals(response.getResponseCode(), HttpStatus.SC_OK,\"Response code mismatched\");\n+        Assert.assertEquals(response.getData(), ResponseConstants.RESPONSE_BODY,\n+                \"Response message mismatch.\");\n+\n+        Map<String, String> sandHeaders = new HashMap<String, String>();\n+        sandHeaders.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Bearer \" + jwtTokenSand);\n+        HttpResponse sandResponse = HttpsClientRequest.doGet(getServiceURLHttps(\n+                \"/v2/prod/pet/findByStatus\"), sandHeaders);\n+\n+        Assert.assertNotNull(sandResponse, \"Sandbox endoint response should not be null\");\n+        Assert.assertEquals(sandResponse.getResponseCode(), HttpStatus.SC_UNAUTHORIZED,\"Response code mismatched\");\n+    }\n+\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71ab8d74e1eafe168bcc80899b931405ad98eabe"}, "originalPosition": 143}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "342713069cbd72aa063300e9e3220425dc4262a5", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/342713069cbd72aa063300e9e3220425dc4262a5", "committedDate": "2021-01-04T07:44:00Z", "message": "validate certificate file content via BEGIN Certificate and End Certificate strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1442ebc609d8cae72391d928268f8ae1e9fd183", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/f1442ebc609d8cae72391d928268f8ae1e9fd183", "committedDate": "2021-01-04T09:05:56Z", "message": "Rest API Generation Guide"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ccd375c928646a871c20c086e1f43f984028d6f", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/5ccd375c928646a871c20c086e1f43f984028d6f", "committedDate": "2021-01-05T04:55:09Z", "message": "Add verify hostname feature"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4c0595ae454ec89caaf825f56270c2bae29e4c8", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/a4c0595ae454ec89caaf825f56270c2bae29e4c8", "committedDate": "2021-01-06T05:02:28Z", "message": "fix error message for production/sandbox endpoints being unavailable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "452e70df3c574001865304cc59dcf25ad30a79e9", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/452e70df3c574001865304cc59dcf25ad30a79e9", "committedDate": "2021-01-06T05:18:22Z", "message": "Reduce the minimum tls version to 1.1 and refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea0fb028303ed596ba97d346872706aed1fb410e", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/ea0fb028303ed596ba97d346872706aed1fb410e", "committedDate": "2021-01-06T05:27:13Z", "message": "refactor file name router certificate and private key"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa0f6674a8e4097018eeb0810dd73ae1a7ef5b90", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/fa0f6674a8e4097018eeb0810dd73ae1a7ef5b90", "committedDate": "2021-01-06T07:37:37Z", "message": "integration tests: tls, mtls enabled backends will started only for the tls test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c571daa34be2a80e114c4f9633517a3ac5b45d32", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/c571daa34be2a80e114c4f9633517a3ac5b45d32", "committedDate": "2021-01-06T14:13:23Z", "message": "disable ssl verification for upstream connections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ff77d619517df6df377c7fff06b2ba3bb0acf3b", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/1ff77d619517df6df377c7fff06b2ba3bb0acf3b", "committedDate": "2021-01-08T02:47:36Z", "message": "Merge branch 'envoy-gw' into backendTLS-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bc5a35e2dc7d91079205d039e7db0298543a2c2", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/4bc5a35e2dc7d91079205d039e7db0298543a2c2", "committedDate": "2021-01-08T03:16:41Z", "message": "comment out a test case, due to intermittent failure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc4597e0ad6c65d0282963e44caa53d14905b49b", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/cc4597e0ad6c65d0282963e44caa53d14905b49b", "committedDate": "2021-01-08T03:19:06Z", "message": "add todo statement"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTgxMjMz", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-563981233", "createdAt": "2021-01-08T03:29:50Z", "commit": {"oid": "cc4597e0ad6c65d0282963e44caa53d14905b49b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzOTkzMTI2", "url": "https://github.com/wso2/product-microgateway/pull/1525#pullrequestreview-563993126", "createdAt": "2021-01-08T04:18:26Z", "commit": {"oid": "cc4597e0ad6c65d0282963e44caa53d14905b49b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1035, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}