{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNTk1NzUy", "number": 1511, "title": "[Envoy-Mgw] Add Integration tests", "bodyText": "Purpose\n\nAs $subject, this will add the integration setup for the envoy-gw setup.\n\n\nUsed TestNG for writing test cases.\n\n\nUsed Testcontainers for setup a dockerize environment\n\n\nHow to use it\nIf you want to deploy an API,\n\n\nYou need to put the API yaml file in /test-integration/src/test/resources/apis/openApis/ folder and then you can get the apictl project zip file using the following function.\nString apiZipfile = createApictlProjZip(\"mockApi.yaml\");\n\n\nThen deploy your API to the mgw using the following function.\nApiDeployment.deployAPI(apiZipfile);\n\n\nWhen writing the test cases,\n\nUse the following format to write the test cases,\n\n\nWhen providing different conf.toml files,\n\n\nYou can initiate the setup as follows(after you extend the BaseTest class),\nsuper.startMGW(confFilePath);\n\n\nIf you want to add the mock backend services\n\nYou can add to the mock-backend-server module which is inside the test-integration.\n\nIssues\n\nFixes #1509\nFixes #1510\nFixes #1449\nAutomation tests\n\nUnit tests added: No\nIntegration tests added: Yes\n\nTested environments\n\nNot Tested\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-12-01T21:48:49Z", "url": "https://github.com/wso2/product-microgateway/pull/1511", "merged": true, "mergeCommit": {"oid": "dca1a522a903b45b7ec8945f9d11ef4c1dd5ae64"}, "closed": true, "closedAt": "2020-12-14T15:36:22Z", "author": {"login": "chashikajw"}, "timelineItems": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiAvlTAH2gAyNTMwNTk1NzUyOjc5Nzc2ZDRkZWMxNzFmMjI0NDJiNzM1YmM5ZThkZGE0YzkwNWQ1MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2YztigFqTU4MTk5OTEyMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "79776d4dec171f22442b735bc9e8dda4c905d525", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/79776d4dec171f22442b735bc9e8dda4c905d525", "committedDate": "2020-12-01T21:22:38Z", "message": "add basic intergation setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31160e52c63cda746ff93aade3e78d8bf2edf94f", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/31160e52c63cda746ff93aade3e78d8bf2edf94f", "committedDate": "2020-12-01T21:22:38Z", "message": "remove unwanted plugins and format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "013233f80ef59c735d6a211f55bc6c81e1797154", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/013233f80ef59c735d6a211f55bc6c81e1797154", "committedDate": "2020-12-01T21:22:38Z", "message": "setup testcontainers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca729c26d942d079a4788bb88409f06d113a707", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/8ca729c26d942d079a4788bb88409f06d113a707", "committedDate": "2020-12-01T21:22:38Z", "message": "add api applications subsription DTOs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdf665803d4e09307971534fc1056ea1865f9778", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/cdf665803d4e09307971534fc1056ea1865f9778", "committedDate": "2020-12-01T21:22:38Z", "message": "add licence header to  DTOs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e807da0baf8674bc6e8e7c29a9c97f3b12a83f1d", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/e807da0baf8674bc6e8e7c29a9c97f3b12a83f1d", "committedDate": "2020-12-01T21:22:38Z", "message": "implement mock backend"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e10b10131e5531ce98bb4a1cac22435be44c3650", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/e10b10131e5531ce98bb4a1cac22435be44c3650", "committedDate": "2020-12-01T21:22:38Z", "message": "add util funtions for https and https and token generation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c16a68ed7f7f588ed8e5706d6ffa6b7d0a6f437", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/1c16a68ed7f7f588ed8e5706d6ffa6b7d0a6f437", "committedDate": "2020-12-01T21:22:38Z", "message": "implement mgw server initialisation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b8ab4bb2a777afab0b5ddbbd763151c779c0255", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/9b8ab4bb2a777afab0b5ddbbd763151c779c0255", "committedDate": "2020-12-01T21:22:38Z", "message": "implement jwt test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59d224e7e83e96e51ecce0595dafd842ffd6c0c0", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/59d224e7e83e96e51ecce0595dafd842ffd6c0c0", "committedDate": "2020-12-01T21:22:38Z", "message": "add resources and structured pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "716c9abb23f586db81f6c7f1c233073ac432660c", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/716c9abb23f586db81f6c7f1c233073ac432660c", "committedDate": "2020-12-01T21:22:38Z", "message": "change test cases to testng"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3d04bf4ee6bbb11a3f37dd24fa0a88e295ed36a", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/b3d04bf4ee6bbb11a3f37dd24fa0a88e295ed36a", "committedDate": "2020-12-01T21:22:38Z", "message": "create mock backend as docker image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6b407c11b28a8975535c4f93cabd935aeb4556", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/4f6b407c11b28a8975535c4f93cabd935aeb4556", "committedDate": "2020-12-01T21:22:38Z", "message": "add intialissation setup with seperate configs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f714231f112a3ec28d96f89cf02275768e26f763", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/f714231f112a3ec28d96f89cf02275768e26f763", "committedDate": "2020-12-01T21:22:38Z", "message": "add apictlproject creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e518ea3abeb76c9575fd99b72ffbf411338c607e", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/e518ea3abeb76c9575fd99b72ffbf411338c607e", "committedDate": "2020-12-01T21:22:38Z", "message": "add backend service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d42eabfacc9866f27164f3988821610bb0442b0", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/8d42eabfacc9866f27164f3988821610bb0442b0", "committedDate": "2020-12-01T21:22:38Z", "message": "set apictlproject structure creation setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9e4975d10084cca5456f90478e90d8106653240", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/c9e4975d10084cca5456f90478e90d8106653240", "committedDate": "2020-12-02T14:04:31Z", "message": "document the classes and funtions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/ddde43f9fa266a20c0502964aec058a79624278b", "committedDate": "2020-12-03T06:57:17Z", "message": "optimize the mockbackend docker image build and runtime"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb5223d62f2ce1636cc6b60e3119f1ed59603915", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/cb5223d62f2ce1636cc6b60e3119f1ed59603915", "committedDate": "2020-12-03T06:55:35Z", "message": "optimize the mockbackend docker image build and runtime"}, "afterCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/ddde43f9fa266a20c0502964aec058a79624278b", "committedDate": "2020-12-03T06:57:17Z", "message": "optimize the mockbackend docker image build and runtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg1NzYz", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544685763", "createdAt": "2020-12-04T06:25:54Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyNTo1NFrOH_CoAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyNTo1NFrOH_CoAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NTM0Nw==", "bodyText": "Lets use the alpine images", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535865347", "createdAt": "2020-12-04T06:25:54Z", "author": {"login": "Rajith90"}, "path": "test-integration/mock-backend-server/Dockerfile", "diffHunk": "@@ -0,0 +1,29 @@\n+# --------------------------------------------------------------------\n+# Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# -----------------------------------------------------------------------\n+\n+#FROM adoptopenjdk/maven-openjdk8\n+FROM adoptopenjdk:11.0.8_10-jre-hotspot-bionic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg2NDQ1", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544686445", "createdAt": "2020-12-04T06:27:41Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyNzo0MVrOH_Cqsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyNzo0MVrOH_Cqsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NjAzNA==", "bodyText": "Lets use the argument to get the jar name", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535866034", "createdAt": "2020-12-04T06:27:41Z", "author": {"login": "Rajith90"}, "path": "test-integration/mock-backend-server/Dockerfile", "diffHunk": "@@ -0,0 +1,29 @@\n+# --------------------------------------------------------------------\n+# Copyright (c) 2020, WSO2 Inc. (http://wso2.com) All Rights Reserved.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+# -----------------------------------------------------------------------\n+\n+#FROM adoptopenjdk/maven-openjdk8\n+FROM adoptopenjdk:11.0.8_10-jre-hotspot-bionic\n+\n+#COPY src /home/app/src\n+#COPY pom.xml /home/app", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg2OTkw", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544686990", "createdAt": "2020-12-04T06:29:09Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyOTowOVrOH_Csrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyOTowOVrOH_Csrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NjU0Mg==", "bodyText": "Lets move versions to the parent pom", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535866542", "createdAt": "2020-12-04T06:29:09Z", "author": {"login": "Rajith90"}, "path": "test-integration/mock-backend-server/pom.xml", "diffHunk": "@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <version>4.0.0-m2-SNAPSHOT</version>\n+    <modelVersion>4.0.0</modelVersion>\n+    <groupId>org.wso2.am.microgw</groupId>\n+    <artifactId>mock-backend-server</artifactId>\n+    <name>Micro Gateway - Mock-Backend-Server</name>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>8</source>\n+                    <target>8</target>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <!-- Build an executable JAR -->\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-jar-plugin</artifactId>\n+                <version>3.1.0</version>\n+                <configuration>\n+                    <archive>\n+                        <manifest>\n+                            <addClasspath>true</addClasspath>\n+                            <classpathPrefix>lib/</classpathPrefix>\n+                            <mainClass>org.wso2am.micro.gw.mockbackend.MockBackEndServer</mainClass>\n+                        </manifest>\n+                    </archive>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-war-plugin</artifactId>\n+                <version>2.2</version>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-compiler-plugin</artifactId>\n+            <version>3.8.1</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg3MjAy", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544687202", "createdAt": "2020-12-04T06:29:42Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyOTo0MlrOH_CtjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjoyOTo0MlrOH_CtjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2Njc2NQ==", "bodyText": "Lets remove the static imports", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535866765", "createdAt": "2020-12-04T06:29:42Z", "author": {"login": "Rajith90"}, "path": "test-integration/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.mockbackend;\n+\n+\n+import com.sun.net.httpserver.HttpServer;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.output.ByteArrayOutputStream;\n+import org.json.JSONObject;\n+\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+\n+import static org.wso2am.micro.gw.mockbackend.Constants.CONTENT_TYPE;\n+import static org.wso2am.micro.gw.mockbackend.Constants.CONTENT_TYPE_APPLICATION_JSON;\n+import static org.wso2am.micro.gw.mockbackend.Constants.MOCK_BACKEND_SERVER_PORT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg3NjIx", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544687621", "createdAt": "2020-12-04T06:30:55Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMDo1NlrOH_CvNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMDo1NlrOH_CvNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NzE5MA==", "bodyText": "package name convention seems different", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535867190", "createdAt": "2020-12-04T06:30:56Z", "author": {"login": "Rajith90"}, "path": "test-integration/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.mockbackend;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg3OTk2", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544687996", "createdAt": "2020-12-04T06:31:56Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMTo1NlrOH_Cwsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMTo1NlrOH_Cwsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NzU3MA==", "bodyText": "Lets use the logger", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535867570", "createdAt": "2020-12-04T06:31:56Z", "author": {"login": "Rajith90"}, "path": "test-integration/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.mockbackend;\n+\n+\n+import com.sun.net.httpserver.HttpServer;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.output.ByteArrayOutputStream;\n+import org.json.JSONObject;\n+\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+\n+import static org.wso2am.micro.gw.mockbackend.Constants.CONTENT_TYPE;\n+import static org.wso2am.micro.gw.mockbackend.Constants.CONTENT_TYPE_APPLICATION_JSON;\n+import static org.wso2am.micro.gw.mockbackend.Constants.MOCK_BACKEND_SERVER_PORT;\n+\n+/**\n+ * Mock HTTP server for testing Open API tests.\n+ */\n+public class MockBackEndServer extends Thread {\n+\n+    //private static final Logger log = LoggerFactory.getLogger(MockBackEndServer.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg4MjEz", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544688213", "createdAt": "2020-12-04T06:32:34Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMjozNFrOH_CxmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMjozNFrOH_CxmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2NzgwMA==", "bodyText": "Formatting issues", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535867800", "createdAt": "2020-12-04T06:32:34Z", "author": {"login": "Rajith90"}, "path": "test-integration/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java", "diffHunk": "@@ -0,0 +1,451 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.mockbackend;\n+\n+\n+import com.sun.net.httpserver.HttpServer;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.io.output.ByteArrayOutputStream;\n+import org.json.JSONObject;\n+\n+import java.io.InputStream;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+\n+import static org.wso2am.micro.gw.mockbackend.Constants.CONTENT_TYPE;\n+import static org.wso2am.micro.gw.mockbackend.Constants.CONTENT_TYPE_APPLICATION_JSON;\n+import static org.wso2am.micro.gw.mockbackend.Constants.MOCK_BACKEND_SERVER_PORT;\n+\n+/**\n+ * Mock HTTP server for testing Open API tests.\n+ */\n+public class MockBackEndServer extends Thread {\n+\n+    //private static final Logger log = LoggerFactory.getLogger(MockBackEndServer.class);\n+    private HttpServer httpServer;\n+    private String backEndServerUrl;\n+    private static int backEndServerPort;\n+    private static boolean retryDone = false;\n+\n+\n+\n+    public static void main(String[] args) {\n+        //backend port\n+        backEndServerPort = MOCK_BACKEND_SERVER_PORT;\n+        MockBackEndServer mockBackEndServer = new MockBackEndServer(backEndServerPort);\n+        mockBackEndServer.start();\n+\n+    }\n+\n+    public MockBackEndServer(int port) {\n+\n+        backEndServerPort = port;\n+    }\n+\n+    public void run() {\n+\n+        if (backEndServerPort < 0) {\n+            throw new RuntimeException(\"Server port is not defined\");\n+        }\n+        try {\n+            httpServer = HttpServer.create(new InetSocketAddress(backEndServerPort), 0);\n+            String context = \"/v2\";\n+            httpServer.createContext(context + \"/pet/findByStatus\", exchange -> {\n+\n+                byte[] response = ResponseConstants.responseBody.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/pet/\", exchange -> {\n+\n+                byte[] response = ResponseConstants.getPetResponse.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/pet/findByTags\", exchange -> {\n+\n+                byte[] response = ResponseConstants.petByIdResponse.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/store/inventory\", exchange -> {\n+\n+                byte[] response = ResponseConstants.storeInventoryResponse.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/pet/3\", exchange -> {\n+\n+                byte[] response = ResponseConstants.RESPONSE_VALID_JWT_TRANSFORMER.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/store/order/1\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46aGVsbG8=\"))\n+                {\n+                    response = ResponseConstants.storeInventoryResponse.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHENTICATION_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_UNAUTHORIZED, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/user/john\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46aGVsbG8=\"))\n+                {\n+                    response = ResponseConstants.userResponse.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHZ_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_FORBIDDEN, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            String base = \"/v1\";\n+            httpServer.createContext(base + \"/pet/findByStatus\", exchange -> {\n+\n+                byte[] response = ResponseConstants.responseBodyV1.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(base + \"/pet/findByStatusNew\", exchange -> {\n+                byte[] response = \"{\\\"error\\\":true}\".getBytes();\n+                if(exchange.getRequestURI().getQuery().contains(\"value1=foo&value2=bar\")) {\n+                    response = ResponseConstants.responseBodyV1.getBytes();\n+                }\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(base + \"/pet/findByTags\", exchange -> {\n+\n+                byte[] response = ResponseConstants.petByIdResponseV1.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(base + \"/pet/2\", exchange -> {\n+\n+                byte[] response = ResponseConstants.getPetResponse.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(base + \"/pet/\", exchange -> {\n+\n+                byte[] response = ResponseConstants.getPetResponse.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            //to test endpoints with security\n+            String contextWithSecurity2 = \"/v2Basic\";\n+            httpServer.createContext(contextWithSecurity2 + \"/pet/findByStatus\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46YWRtaW4=\"))\n+                {\n+                    response = ResponseConstants.responseBody.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHENTICATION_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_UNAUTHORIZED, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextWithSecurity2 + \"/pet/\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46YWRtaW4=\"))\n+                {\n+                    response = ResponseConstants.petByIdResponse.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHENTICATION_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_UNAUTHORIZED, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextWithSecurity2 + \"/pet/findByTags\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46YWRtaW4=\"))\n+                {\n+                    response = ResponseConstants.petByIdResponse.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHENTICATION_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_UNAUTHORIZED, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextWithSecurity2 + \"/store/inventory\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46YWRtaW4=\"))\n+                {\n+                    response = ResponseConstants.storeInventoryResponse.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHENTICATION_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_UNAUTHORIZED, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            String contextWithSecurity1 = \"/v1Basic\";\n+            httpServer.createContext(contextWithSecurity1 + \"/pet/findByStatus\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46YWRtaW4=\"))\n+                {\n+                    response = ResponseConstants.responseBodyV1.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHENTICATION_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_UNAUTHORIZED, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextWithSecurity1 + \"/pet/findByTags\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46YWRtaW4=\"))\n+                {\n+                    response = ResponseConstants.petByIdResponseV1.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHENTICATION_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_UNAUTHORIZED, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(base + \"/store/inventory\", exchange -> {\n+\n+                byte[] response = ResponseConstants.storeInventoryResponse.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            String contextV3 = \"/v3\";\n+            httpServer.createContext(contextV3 + \"/pet/findByStatus\", exchange -> {\n+\n+                byte[] response = ResponseConstants.responseBodyV1.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextV3 + \"/store/order\", exchange -> {\n+\n+                int length;\n+                ByteArrayOutputStream os = new ByteArrayOutputStream();\n+\n+                InputStream is =  exchange.getRequestBody();\n+                byte[] buffer = new byte[1024];\n+                while ((length = is.read(buffer)) != -1 ) {\n+                    os.write(buffer, 0, length);\n+                }\n+                byte [] response  = os.toByteArray();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK,response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextV3 + \"/pet/\", exchange -> {\n+\n+                InputStream is =  exchange.getRequestBody();\n+                byte [] response = IOUtils.toByteArray(is);\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextV3 + \"/timeout\", exchange -> {\n+                try {\n+                    Thread.sleep(5000);\n+                } catch (InterruptedException e) {\n+                    //log.error(\"Error while invoking timeout back end\", e);\n+                }\n+                byte[] response = ResponseConstants.responseBodyV1.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextV3 + \"/retry\", exchange -> {\n+                if (!retryDone) {\n+                    byte[] response = ResponseConstants.responseBodyV1.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_GATEWAY_TIMEOUT, 0);\n+                    exchange.getResponseBody().write(response);\n+                    exchange.close();\n+                    retryDone = true;\n+                }\n+                byte[] response = ResponseConstants.responseBodyV1.getBytes();\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                retryDone = false;\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextV3 + \"/circuitBreaker\", exchange -> {\n+                if (exchange.getRequestURI().getQuery() != null && exchange.getRequestURI().getQuery()\n+                        .contains(\"cb=true\")) {\n+                    byte[] response = ResponseConstants.ERROR_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_INTERNAL_ERROR, 0);\n+                    exchange.getResponseBody().write(response);\n+                    exchange.close();\n+                } else {\n+                    byte[] response = ResponseConstants.responseBodyV1.getBytes();\n+                    exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                            CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                    exchange.getResponseBody().write(response);\n+                    exchange.close();\n+                }\n+            });\n+            // to test jwt generator\n+            String contextV4 = \"/v4\";\n+            httpServer.createContext(contextV4 + \"/jwtheader\", exchange -> {\n+                byte[] response;\n+                if (exchange.getRequestHeaders().containsKey(\"X-JWT-Assertion\")) {\n+                    response = ResponseConstants.VALID_JWT_RESPONSE.getBytes();\n+                } else {\n+                    response = ResponseConstants.INVALID_JWT_RESPONSE.getBytes();\n+                }\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(contextV4 + \"/jwttoken\", exchange -> {\n+                byte[] response;\n+                if (exchange.getRequestHeaders().containsKey(\"X-JWT-Assertion\")) {\n+                    JSONObject responseJSON = new JSONObject();\n+                    responseJSON.put(\"token\", exchange.getRequestHeaders().get(\"X-JWT-Assertion\").toString());\n+                    response = responseJSON.toString().getBytes();\n+                } else {\n+                    response = ResponseConstants.INVALID_JWT_RESPONSE.getBytes();\n+                }\n+                exchange.getResponseHeaders().set(CONTENT_TYPE,\n+                        CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.start();\n+            backEndServerUrl = \"http://localhost:\" + backEndServerPort;\n+        } catch (Exception e) {\n+            //log.error(\"Error occurred while setting up mock server\", e);\n+        }\n+    }\n+\n+    public void stopIt() {\n+\n+        httpServer.stop(0);\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 446}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg4NDgz", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544688483", "createdAt": "2020-12-04T06:33:20Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMzoyMFrOH_CynA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozMzoyMFrOH_CynA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2ODA2MA==", "bodyText": "Lets remove this trust store", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535868060", "createdAt": "2020-12-04T06:33:20Z", "author": {"login": "Rajith90"}, "path": "test-integration/pom.xml", "diffHunk": "@@ -0,0 +1,164 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.wso2.am.microgw</groupId>\n+        <artifactId>micro-gateway-parent</artifactId>\n+        <version>4.0.0-m2-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>test</artifactId>\n+    <name>Micro Gateway - Test-Integration</name>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.0</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <javax.net.ssl.trustStore>${basedir}/resources/ballerinaTruststore.p12</javax.net.ssl.trustStore>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg4Nzk0", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544688794", "createdAt": "2020-12-04T06:34:10Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNDoxMFrOH_CzxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNDoxMFrOH_CzxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2ODM1Ng==", "bodyText": "Used twice", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535868356", "createdAt": "2020-12-04T06:34:10Z", "author": {"login": "Rajith90"}, "path": "test-integration/pom.xml", "diffHunk": "@@ -0,0 +1,164 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.wso2.am.microgw</groupId>\n+        <artifactId>micro-gateway-parent</artifactId>\n+        <version>4.0.0-m2-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>test</artifactId>\n+    <name>Micro Gateway - Test-Integration</name>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.0</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <javax.net.ssl.trustStore>${basedir}/resources/ballerinaTruststore.p12</javax.net.ssl.trustStore>\n+                    </systemPropertyVariables>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>extract-packs</id>\n+                        <phase>generate-resources</phase>\n+                        <configuration>\n+                            <target>\n+                                <unzip src=\"${basedir}/../distribution/target/wso2am-micro-gw-${project.version}.zip\" dest=\"${basedir}/../test-integration/target/micro-gwtmp\" />\n+                            </target>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-failsafe-plugin</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg5Mjk3", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544689297", "createdAt": "2020-12-04T06:35:31Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNTozMlrOH_C1nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNTozMlrOH_C1nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2ODgzMQ==", "bodyText": "Re check the usage of the plugin", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535868831", "createdAt": "2020-12-04T06:35:32Z", "author": {"login": "Rajith90"}, "path": "test-integration/pom.xml", "diffHunk": "@@ -0,0 +1,164 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.wso2.am.microgw</groupId>\n+        <artifactId>micro-gateway-parent</artifactId>\n+        <version>4.0.0-m2-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>test</artifactId>\n+    <name>Micro Gateway - Test-Integration</name>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.0</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <javax.net.ssl.trustStore>${basedir}/resources/ballerinaTruststore.p12</javax.net.ssl.trustStore>\n+                    </systemPropertyVariables>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>extract-packs</id>\n+                        <phase>generate-resources</phase>\n+                        <configuration>\n+                            <target>\n+                                <unzip src=\"${basedir}/../distribution/target/wso2am-micro-gw-${project.version}.zip\" dest=\"${basedir}/../test-integration/target/micro-gwtmp\" />\n+                            </target>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.2</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.eclipse.jetty</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg5NDE3", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544689417", "createdAt": "2020-12-04T06:35:50Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNTo1MFrOH_C2Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNTo1MFrOH_C2Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2ODk2Mw==", "bodyText": "Lets move versions to parent pom", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535868963", "createdAt": "2020-12-04T06:35:50Z", "author": {"login": "Rajith90"}, "path": "test-integration/pom.xml", "diffHunk": "@@ -0,0 +1,164 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.wso2.am.microgw</groupId>\n+        <artifactId>micro-gateway-parent</artifactId>\n+        <version>4.0.0-m2-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>test</artifactId>\n+    <name>Micro Gateway - Test-Integration</name>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.0</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <javax.net.ssl.trustStore>${basedir}/resources/ballerinaTruststore.p12</javax.net.ssl.trustStore>\n+                    </systemPropertyVariables>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>extract-packs</id>\n+                        <phase>generate-resources</phase>\n+                        <configuration>\n+                            <target>\n+                                <unzip src=\"${basedir}/../distribution/target/wso2am-micro-gw-${project.version}.zip\" dest=\"${basedir}/../test-integration/target/micro-gwtmp\" />\n+                            </target>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.2</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.eclipse.jetty</groupId>\n+                <artifactId>jetty-maven-plugin</artifactId>\n+                <version>9.4.34.v20201102</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>8</source>\n+                    <target>8</target>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+        <resources>\n+            <resource>\n+                <directory>src/main/resources</directory>\n+                <filtering>true</filtering>\n+            </resource>\n+        </resources>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>testcontainers</artifactId>\n+            <version>1.15.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njg5ODIw", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544689820", "createdAt": "2020-12-04T06:36:52Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNjo1MlrOH_C3uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozNjo1MlrOH_C3uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg2OTM2OQ==", "bodyText": "Lets move the properties to the root pom", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535869369", "createdAt": "2020-12-04T06:36:52Z", "author": {"login": "Rajith90"}, "path": "test-integration/pom.xml", "diffHunk": "@@ -0,0 +1,164 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <groupId>org.wso2.am.microgw</groupId>\n+        <artifactId>micro-gateway-parent</artifactId>\n+        <version>4.0.0-m2-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <artifactId>test</artifactId>\n+    <name>Micro Gateway - Test-Integration</name>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.0</version>\n+                <configuration>\n+                    <systemPropertyVariables>\n+                        <javax.net.ssl.trustStore>${basedir}/resources/ballerinaTruststore.p12</javax.net.ssl.trustStore>\n+                    </systemPropertyVariables>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-antrun-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>extract-packs</id>\n+                        <phase>generate-resources</phase>\n+                        <configuration>\n+                            <target>\n+                                <unzip src=\"${basedir}/../distribution/target/wso2am-micro-gw-${project.version}.zip\" dest=\"${basedir}/../test-integration/target/micro-gwtmp\" />\n+                            </target>\n+                        </configuration>\n+                        <goals>\n+                            <goal>run</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <version>2.22.2</version>\n+                <configuration>\n+                    <suiteXmlFiles>\n+                        <suiteXmlFile>src/test/resources/testng.xml</suiteXmlFile>\n+                    </suiteXmlFiles>\n+                </configuration>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.eclipse.jetty</groupId>\n+                <artifactId>jetty-maven-plugin</artifactId>\n+                <version>9.4.34.v20201102</version>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <configuration>\n+                    <source>8</source>\n+                    <target>8</target>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+        <resources>\n+            <resource>\n+                <directory>src/main/resources</directory>\n+                <filtering>true</filtering>\n+            </resource>\n+        </resources>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.testcontainers</groupId>\n+            <artifactId>testcontainers</artifactId>\n+            <version>1.15.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-api</artifactId>\n+            <version>${log4j.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-core</artifactId>\n+            <version>${log4j.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-simple</artifactId>\n+            <version>${slf4j.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.netty</groupId>\n+            <artifactId>netty-transport</artifactId>\n+            <version>${io.netty.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.netty</groupId>\n+            <artifactId>netty-codec-http</artifactId>\n+            <version>${io.netty.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.netty</groupId>\n+            <artifactId>netty-codec-http2</artifactId>\n+            <version>${io.netty.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.netty</groupId>\n+            <artifactId>netty-handler</artifactId>\n+            <version>${io.netty.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.json</groupId>\n+            <artifactId>json</artifactId>\n+            <version>${org.json.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>3.9</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.6</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.google.code.gson</groupId>\n+            <artifactId>gson</artifactId>\n+            <version>2.3.1</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.testng</groupId>\n+            <artifactId>testng</artifactId>\n+            <version>${testng.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <properties>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 156}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NjkwNDc5", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544690479", "createdAt": "2020-12-04T06:38:33Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozODozM1rOH_C6MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjozODozM1rOH_C6MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg3MDAwMA==", "bodyText": "Lets use proper comments", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535870000", "createdAt": "2020-12-04T06:38:33Z", "author": {"login": "Rajith90"}, "path": "test-integration/src/test/java/org/wso2am/micro/gw/tests/context/MgwServerInstance.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.context;\n+\n+import com.github.dockerjava.zerodep.shaded.org.apache.hc.core5.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.DockerComposeContainer;\n+import org.wso2am.micro.gw.tests.mockbackend.MockBackendServer;\n+import org.wso2am.micro.gw.tests.util.HttpClientRequest;\n+import org.wso2am.micro.gw.tests.util.HttpResponse;\n+import org.wso2am.micro.gw.tests.util.Utils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.wso2am.micro.gw.tests.common.BaseTestCase.getMockServiceURLHttp;\n+\n+/**\n+ * Mgw server instance class.\n+ */\n+public class MgwServerInstance implements MgwServer {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MgwServerInstance.class);\n+    private DockerComposeContainer environment;\n+\n+\n+    /**\n+     * initialize a docker environment using docker compose.\n+     *\n+     * @throws IOException\n+     * @throws MicroGWTestException\n+     */\n+    public MgwServerInstance() throws IOException, MicroGWTestException {\n+        createTmpMgwSetup();\n+        File targetClassesDir = new File(MgwServerInstance.class.getProtectionDomain().getCodeSource().\n+                getLocation().getPath());\n+        String mgwServerPath = targetClassesDir.getParentFile().toString() + File.separator + \"server-tmp\";\n+\n+        String dockerCompsePath = mgwServerPath+  File.separator + \"docker-compose.yaml\";\n+        MockBackendServer.addMockBackendServiceToDockerCompose(dockerCompsePath);\n+        environment = new DockerComposeContainer(new File(dockerCompsePath))\n+                .withLocalCompose(true);\n+\n+    }\n+\n+    /**\n+     * initialize a docker environment using docker compose.\n+     *\n+     * @param confPath external conf.toml path\n+     *\n+     * @throws IOException\n+     * @throws MicroGWTestException\n+     */\n+    public MgwServerInstance(String confPath) throws IOException, MicroGWTestException {\n+        createTmpMgwSetup();\n+        File targetClassesDir = new File(MgwServerInstance.class.getProtectionDomain().getCodeSource().\n+                getLocation().getPath());\n+        String mgwServerPath = targetClassesDir.getParentFile().toString() + File.separator + \"server-tmp\";\n+        Utils.copyFile(confPath, mgwServerPath  +  File.separator + \"resources\"  +  File.separator +\n+                \"conf\" +  File.separator + \"config.toml\");\n+\n+        String dockerCompsePath = mgwServerPath+  File.separator + \"docker-compose.yaml\";\n+        MockBackendServer.addMockBackendServiceToDockerCompose(dockerCompsePath);\n+        environment = new DockerComposeContainer(new File(dockerCompsePath))\n+                .withLocalCompose(true);\n+\n+    }\n+\n+    @Override\n+    public void startMGW() throws IOException, InterruptedException {\n+        try {\n+            environment.start();\n+        } catch (Exception e) {\n+            log.error(\"Error occurs when docker-compose up\");\n+        }\n+\n+        waitTillBackendIsAvailable();\n+\n+    }\n+\n+    @Override\n+    public void stopMGW() {\n+        environment.stop();\n+    }\n+\n+    /**\n+     * create a temporal mgw setup.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 108}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0NjkzNjky", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544693692", "createdAt": "2020-12-04T06:47:04Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjo0NzowNFrOH_DGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjo0NzowNFrOH_DGrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg3MzE5OQ==", "bodyText": "remove static imports", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535873199", "createdAt": "2020-12-04T06:47:04Z", "author": {"login": "chashikajw"}, "path": "test-integration/src/test/java/org/wso2am/micro/gw/tests/jwtValidator/JwtTestCase.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.jwtValidator;\n+\n+import com.github.dockerjava.zerodep.shaded.org.apache.hc.core5.http.HttpStatus;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeSuite;\n+import org.testng.annotations.Test;\n+import org.wso2am.micro.gw.tests.common.BaseTestCase;\n+import org.wso2am.micro.gw.tests.common.model.API;\n+import org.wso2am.micro.gw.tests.common.model.ApplicationDTO;\n+import org.wso2am.micro.gw.tests.util.*;\n+\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import static org.wso2am.micro.gw.tests.util.ApiProjectGenerator.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0Njk1NTU4", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-544695558", "createdAt": "2020-12-04T06:51:51Z", "commit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjo1MTo1MVrOH_DNmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwNjo1Njo0MFrOH_DVIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg3NDk2OA==", "bodyText": "throw the exception", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535874968", "createdAt": "2020-12-04T06:51:51Z", "author": {"login": "chashikajw"}, "path": "test-integration/src/test/java/org/wso2am/micro/gw/tests/mockbackend/MockBackendServer.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.mockbackend;\n+\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.images.builder.ImageFromDockerfile;\n+import org.wso2am.micro.gw.tests.context.MicroGWTestException;\n+import org.wso2am.micro.gw.tests.util.Utils;\n+import org.wso2am.micro.gw.tests.util.TestConstant;\n+\n+import java.io.*;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.rnorth.visibleassertions.VisibleAssertions.pass;\n+\n+/**\n+ * Mock backend server class.\n+ *\n+ */\n+public class MockBackendServer {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MockBackendServer.class);\n+\n+    /**\n+     * Generate the Mock backend server docker image.\n+     *\n+     */\n+    public static void generateMockBackendServerDockerImage() {\n+\n+        try {\n+            ImageFromDockerfile image = new ImageFromDockerfile(TestConstant.MOCK_BACKEND_DOCKER_IMAGE, false)\n+                    .withFileFromPath(\".\", Paths.get(getMockBackendModuleRootPath()));\n+            verifyImage(image);\n+        } catch (Exception e) {\n+            log.error(\"Error occurs when creating \" + TestConstant.MOCK_BACKEND_DOCKER_IMAGE+ \"docker image\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTg3Njg5OA==", "bodyText": "check without a token (get the difference of response code)", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r535876898", "createdAt": "2020-12-04T06:56:40Z", "author": {"login": "chashikajw"}, "path": "test-integration/src/test/java/org/wso2am/micro/gw/tests/util/ApiDeployment.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.util;\n+\n+import com.github.dockerjava.zerodep.shaded.org.apache.hc.core5.http.HttpStatus;\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import org.junit.Assert;\n+\n+import java.io.File;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static org.wso2am.micro.gw.tests.common.BaseTestCase.getImportAPIServiceURLHttps;\n+\n+/**\n+ * Api deployment class for the mgw.\n+ *\n+ */\n+public class ApiDeployment {\n+\n+    /**\n+     * Get Mock backend server module root path.\n+     *\n+     * @param apiZipFilePath  path for the apictl project zip file\n+     *\n+     * @throws Exception\n+     */\n+    public static void deployAPI(String apiZipFilePath) throws Exception {\n+\n+        // Set header\n+        Map<String, String> headers = new HashMap<String,String>();\n+        headers.put(HttpHeaderNames.AUTHORIZATION.toString(), \"Basic YWRtaW46YWRtaW4=\");\n+        HttpsPostMultipart multipart = new HttpsPostMultipart(getImportAPIServiceURLHttps(\n+                TestConstant.ADAPTER_IMPORT_API_RESOURCE) , headers);\n+        multipart.addFilePart(\"file\", new File(apiZipFilePath));\n+        HttpResponse response = multipart.getResponse();\n+\n+        // todo (currently no way to test the availability of the api routes, so wait 5 seconds)\n+        TimeUnit.SECONDS.sleep(5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddde43f9fa266a20c0502964aec058a79624278b"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee03466e7304d4b68a1c39906fb6a12affb17948", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/ee03466e7304d4b68a1c39906fb6a12affb17948", "committedDate": "2020-12-04T16:27:16Z", "message": "format the code and change the way of docker image creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/49905cdaf2edc09fee5be67f1182faafaf3d2bdd", "committedDate": "2020-12-04T20:30:50Z", "message": "restructure test module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDg4MTk5", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-551488199", "createdAt": "2020-12-14T15:36:08Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTgzMDk1", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-573983095", "createdAt": "2021-01-22T06:32:26Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjozMjoyNlrOIYXHHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjozMjoyNlrOIYXHHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQxNTM4OA==", "bodyText": "Shall we remove the extra lines in this file, if the file is not auto-generate?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r562415388", "createdAt": "2021-01-22T06:32:26Z", "author": {"login": "Meruja"}, "path": "test/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.mockbackend;\n+\n+import com.sun.net.httpserver.HttpServer;\n+import java.util.logging.Level;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Mock HTTP server for testing Open API tests.\n+ */\n+public class MockBackEndServer extends Thread {\n+\n+    private static final Logger logger = Logger.getLogger(MockBackEndServer.class.getName());\n+    private HttpServer httpServer;\n+    private String backEndServerUrl;\n+    private static int backEndServerPort;\n+    private static boolean retryDone = false;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTg0OTIz", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-573984923", "createdAt": "2021-01-22T06:37:10Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjozNzoxMFrOIYXNOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjozNzoxMFrOIYXNOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQxNjk1Mw==", "bodyText": "Shall we move open brace/{ to line 109?\nAd check line 128 as well.", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r562416953", "createdAt": "2021-01-22T06:37:10Z", "author": {"login": "Meruja"}, "path": "test/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.mockbackend;\n+\n+import com.sun.net.httpserver.HttpServer;\n+import java.util.logging.Level;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Mock HTTP server for testing Open API tests.\n+ */\n+public class MockBackEndServer extends Thread {\n+\n+    private static final Logger logger = Logger.getLogger(MockBackEndServer.class.getName());\n+    private HttpServer httpServer;\n+    private String backEndServerUrl;\n+    private static int backEndServerPort;\n+    private static boolean retryDone = false;\n+\n+\n+\n+    public static void main(String[] args) {\n+        //backend port\n+        backEndServerPort = Constants.MOCK_BACKEND_SERVER_PORT;\n+        MockBackEndServer mockBackEndServer = new MockBackEndServer(backEndServerPort);\n+        mockBackEndServer.start();\n+\n+    }\n+\n+    public MockBackEndServer(int port) {\n+\n+        backEndServerPort = port;\n+    }\n+\n+    public void run() {\n+\n+        if (backEndServerPort < 0) {\n+            throw new RuntimeException(\"Server port is not defined\");\n+        }\n+        try {\n+            httpServer = HttpServer.create(new InetSocketAddress(backEndServerPort), 0);\n+            String context = \"/v2\";\n+            httpServer.createContext(context + \"/pet/findByStatus\", exchange -> {\n+\n+                byte[] response = ResponseConstants.responseBody.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/pet/\", exchange -> {\n+\n+                byte[] response = ResponseConstants.getPetResponse.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/pet/findByTags\", exchange -> {\n+\n+                byte[] response = ResponseConstants.petByIdResponse.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/store/inventory\", exchange -> {\n+\n+                byte[] response = ResponseConstants.storeInventoryResponse.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/pet/3\", exchange -> {\n+\n+                byte[] response = ResponseConstants.RESPONSE_VALID_JWT_TRANSFORMER.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/store/order/1\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46aGVsbG8=\"))\n+                {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTg1NDA4", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-573985408", "createdAt": "2021-01-22T06:38:28Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjozODoyOFrOIYXPKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjozODoyOFrOIYXPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQxNzQ1MQ==", "bodyText": "Remove the extra line.", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r562417451", "createdAt": "2021-01-22T06:38:28Z", "author": {"login": "Meruja"}, "path": "test/mock-backend-server/src/main/java/org.wso2am.micro.gw.mockbackend/MockBackEndServer.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.mockbackend;\n+\n+import com.sun.net.httpserver.HttpServer;\n+import java.util.logging.Level;\n+import java.net.HttpURLConnection;\n+import java.net.InetSocketAddress;\n+import java.util.logging.Logger;\n+\n+/**\n+ * Mock HTTP server for testing Open API tests.\n+ */\n+public class MockBackEndServer extends Thread {\n+\n+    private static final Logger logger = Logger.getLogger(MockBackEndServer.class.getName());\n+    private HttpServer httpServer;\n+    private String backEndServerUrl;\n+    private static int backEndServerPort;\n+    private static boolean retryDone = false;\n+\n+\n+\n+    public static void main(String[] args) {\n+        //backend port\n+        backEndServerPort = Constants.MOCK_BACKEND_SERVER_PORT;\n+        MockBackEndServer mockBackEndServer = new MockBackEndServer(backEndServerPort);\n+        mockBackEndServer.start();\n+\n+    }\n+\n+    public MockBackEndServer(int port) {\n+\n+        backEndServerPort = port;\n+    }\n+\n+    public void run() {\n+\n+        if (backEndServerPort < 0) {\n+            throw new RuntimeException(\"Server port is not defined\");\n+        }\n+        try {\n+            httpServer = HttpServer.create(new InetSocketAddress(backEndServerPort), 0);\n+            String context = \"/v2\";\n+            httpServer.createContext(context + \"/pet/findByStatus\", exchange -> {\n+\n+                byte[] response = ResponseConstants.responseBody.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/pet/\", exchange -> {\n+\n+                byte[] response = ResponseConstants.getPetResponse.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/pet/findByTags\", exchange -> {\n+\n+                byte[] response = ResponseConstants.petByIdResponse.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/store/inventory\", exchange -> {\n+\n+                byte[] response = ResponseConstants.storeInventoryResponse.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/pet/3\", exchange -> {\n+\n+                byte[] response = ResponseConstants.RESPONSE_VALID_JWT_TRANSFORMER.getBytes();\n+                exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                        Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/store/order/1\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46aGVsbG8=\"))\n+                {\n+                    response = ResponseConstants.storeInventoryResponse.getBytes();\n+                    exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                            Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHENTICATION_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                            Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_UNAUTHORIZED, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+            httpServer.createContext(context + \"/user/john\", exchange -> {\n+                byte[] response;\n+                if(exchange.getRequestHeaders().containsKey(\"Authorization\") &&\n+                        exchange.getRequestHeaders().get(\"Authorization\").toString().contains(\"Basic YWRtaW46aGVsbG8=\"))\n+                {\n+                    response = ResponseConstants.userResponse.getBytes();\n+                    exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                            Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_OK, response.length);\n+                } else {\n+                    response = ResponseConstants.AUTHZ_FAILURE_RESPONSE.getBytes();\n+                    exchange.getResponseHeaders().set(Constants.CONTENT_TYPE,\n+                            Constants.CONTENT_TYPE_APPLICATION_JSON);\n+                    exchange.sendResponseHeaders(HttpURLConnection.HTTP_FORBIDDEN, response.length);\n+                }\n+                exchange.getResponseBody().write(response);\n+                exchange.close();\n+            });\n+\n+            httpServer.start();\n+            backEndServerUrl = \"http://localhost:\" + backEndServerPort;\n+        } catch (Exception ex) {\n+            logger.log(Level.SEVERE, \"Error occurred while setting up mock server\", ex);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 147}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTg2MTU1", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-573986155", "createdAt": "2021-01-22T06:40:29Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo0MDoyOVrOIYXRsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo0MDoyOVrOIYXRsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQxODA5OQ==", "bodyText": "Shall we add a new line at the eof?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r562418099", "createdAt": "2021-01-22T06:40:29Z", "author": {"login": "Meruja"}, "path": "test/pom.xml", "diffHunk": "@@ -0,0 +1,39 @@\n+<!--\n+  ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ WSO2 Inc. licenses this file to you under the Apache License,\n+  ~ Version 2.0 (the \"License\"); you may not use this file except\n+  ~ in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~    http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>micro-gateway-parent</artifactId>\n+        <groupId>org.wso2.am.microgw</groupId>\n+        <version>4.0.0-m2-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <modelVersion>4.0.0</modelVersion>\n+    <packaging>pom</packaging>\n+    <artifactId>micro-gateway-tests</artifactId>\n+    <name>Micro Gateway - Test-Parent</name>\n+\n+    <modules>\n+        <module>mock-backend-server</module>\n+        <module>test-integration</module>\n+    </modules>\n+\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTg2ODE4", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-573986818", "createdAt": "2021-01-22T06:42:15Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo0MjoxNlrOIYXTwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo0MjoxNlrOIYXTwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQxODYyNA==", "bodyText": "Shall we add a line at the eof?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r562418624", "createdAt": "2021-01-22T06:42:16Z", "author": {"login": "Meruja"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/common/model/SubscriptionPolicy.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.common.model;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Subscription policy model\n+ */\n+public class SubscriptionPolicy {\n+    private String policyId = UUID.randomUUID().toString();\n+    private String policyName;\n+    private String displayName;\n+    private String description;\n+    private boolean isDeployed = true;\n+    private int rateLimitCount = 0;\n+    private String rateLimitTimeUnit = null;\n+    private List<String> customAttributes;\n+    boolean stopOnQuotaReach = true;\n+    private String billingPlan = \"FREE\";\n+    private DefaultLimit defaultLimit = new DefaultLimit();\n+\n+    public String getPolicyId() {\n+        return policyId;\n+    }\n+\n+    public void setPolicyId(String policyId) {\n+        this.policyId = policyId;\n+    }\n+\n+    public String getPolicyName() {\n+        return policyName;\n+    }\n+\n+    public void setPolicyName(String policyName) {\n+        this.policyName = policyName;\n+    }\n+\n+    public String getDisplayName() {\n+        return displayName;\n+    }\n+\n+    public void setDisplayName(String displayName) {\n+        this.displayName = displayName;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(String description) {\n+        this.description = description;\n+    }\n+\n+    public boolean isDeployed() {\n+        return isDeployed;\n+    }\n+\n+    public void setDeployed(boolean deployed) {\n+        isDeployed = deployed;\n+    }\n+\n+    public int getRateLimitCount() {\n+        return rateLimitCount;\n+    }\n+\n+    public void setRateLimitCount(int rateLimitCount) {\n+        this.rateLimitCount = rateLimitCount;\n+    }\n+\n+    public String getRateLimitTimeUnit() {\n+        return rateLimitTimeUnit;\n+    }\n+\n+    public void setRateLimitTimeUnit(String rateLimitTimeUnit) {\n+        this.rateLimitTimeUnit = rateLimitTimeUnit;\n+    }\n+\n+    public List<String> getCustomAttributes() {\n+        return customAttributes;\n+    }\n+\n+    public void setCustomAttributes(List<String> customAttributes) {\n+        this.customAttributes = customAttributes;\n+    }\n+\n+    public boolean isStopOnQuotaReach() {\n+        return stopOnQuotaReach;\n+    }\n+\n+    public void setStopOnQuotaReach(boolean stopOnQuotaReach) {\n+        this.stopOnQuotaReach = stopOnQuotaReach;\n+    }\n+\n+    public String getBillingPlan() {\n+        return billingPlan;\n+    }\n+\n+    public void setBillingPlan(String billingPlan) {\n+        this.billingPlan = billingPlan;\n+    }\n+\n+    public String getType() {\n+        return this.defaultLimit.getType();\n+    }\n+\n+    public void setType(String type) {\n+        this.defaultLimit.setType(type);\n+    }\n+\n+    public String getTimeUnit() {\n+        return this.defaultLimit.getTimeUnit();\n+    }\n+\n+    public void setTimeUnit(String timeUnit) {\n+        this.defaultLimit.setTimeUnit(timeUnit);\n+    }\n+\n+    public int getUnitTime() {\n+        return this.defaultLimit.getUnitTime();\n+    }\n+\n+    public void setUnitTime(int unitTime) {\n+        this.defaultLimit.setUnitTime(unitTime);\n+    }\n+\n+    public int getRequestCount() {\n+        return this.defaultLimit.getRequestCount();\n+    }\n+\n+    public void setRequestCount(int requestCount) {\n+        this.defaultLimit.setRequestCount(requestCount);\n+        ;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTg3MTU0", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-573987154", "createdAt": "2021-01-22T06:43:08Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo0MzowOFrOIYXU3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo0MzowOFrOIYXU3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQxODkxMQ==", "bodyText": "Formatting issue: Add a space between mgwServerPath and +", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r562418911", "createdAt": "2021-01-22T06:43:08Z", "author": {"login": "Meruja"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/context/MgwServerInstance.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.context;\n+\n+import com.github.dockerjava.zerodep.shaded.org.apache.hc.core5.http.HttpStatus;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.DockerComposeContainer;\n+import org.wso2am.micro.gw.tests.common.BaseTestCase;\n+import org.wso2am.micro.gw.tests.mockbackend.MockBackendServer;\n+import org.wso2am.micro.gw.tests.util.HttpClientRequest;\n+import org.wso2am.micro.gw.tests.util.HttpResponse;\n+import org.wso2am.micro.gw.tests.util.Utils;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Mgw server instance class.\n+ */\n+public class MgwServerInstance implements MgwServer {\n+\n+    private static final Logger log = LoggerFactory.getLogger(MgwServerInstance.class);\n+    private DockerComposeContainer environment;\n+\n+\n+    /**\n+     * initialize a docker environment using docker compose.\n+     *\n+     * @throws IOException\n+     * @throws MicroGWTestException\n+     */\n+    public MgwServerInstance() throws IOException, MicroGWTestException {\n+        createTmpMgwSetup();\n+        File targetClassesDir = new File(MgwServerInstance.class.getProtectionDomain().getCodeSource().\n+                getLocation().getPath());\n+        String mgwServerPath = targetClassesDir.getParentFile().toString() + File.separator + \"server-tmp\";\n+\n+        String dockerCompsePath = mgwServerPath+  File.separator + \"docker-compose.yaml\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTg4NTA0", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-573988504", "createdAt": "2021-01-22T06:46:42Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo0Njo0MlrOIYXZeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo0Njo0MlrOIYXZeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQyMDA4OA==", "bodyText": "Shall we merge these lines 76 and 77?\nFiles.write(output, lines, charset, StandardOpenOption.CREATE,  StandardOpenOption.APPEND);", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r562420088", "createdAt": "2021-01-22T06:46:42Z", "author": {"login": "Meruja"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/mockbackend/MockBackendServer.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.mockbackend;\n+\n+\n+import org.wso2am.micro.gw.tests.context.MicroGWTestException;\n+import org.wso2am.micro.gw.tests.util.Utils;\n+import java.io.*;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+/**\n+ * Mock backend server class.\n+ *\n+ */\n+public class MockBackendServer {\n+\n+    /**\n+     * Get Mock backend server module root path.\n+     *\n+     * @param dockerComposePath  path for the mgw setup docker-compose file\n+     *\n+     * @throws IOException\n+     * @throws MicroGWTestException\n+     */\n+    public static void addMockBackendServiceToDockerCompose(String dockerComposePath) throws IOException,\n+            MicroGWTestException {\n+\n+        File targetClassesDir = new File(MockBackendServer.class.getProtectionDomain().getCodeSource().\n+                getLocation().getPath());\n+        String targetDir = targetClassesDir.getParentFile().toString();\n+        String backendService = MockBackendServer.class.getClassLoader()\n+                .getResource(\"backend-service.yaml\").getPath();\n+\n+        // Input files\n+        List<Path> inputs = Arrays.asList(\n+                Paths.get(dockerComposePath),\n+                Paths.get(backendService)\n+        );\n+\n+        // Output file\n+        String tmpDockerCompose = targetDir +  File.separator  + System.currentTimeMillis() + \".yaml\";\n+        File fileTmp = new File(tmpDockerCompose);\n+        fileTmp.createNewFile();\n+        Path output = Paths.get(tmpDockerCompose);\n+\n+\n+        // Charset for read and write\n+        Charset charset = StandardCharsets.UTF_8;\n+\n+        // Join files (lines)\n+        for (Path path : inputs) {\n+            List<String> lines = Files.readAllLines(path, charset);\n+            Files.write(output, lines, charset, StandardOpenOption.CREATE,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTg5Nzk0", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-573989794", "createdAt": "2021-01-22T06:50:02Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo1MDowMlrOIYXeIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo1MDowMlrOIYXeIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQyMTI4Mw==", "bodyText": "Shall we import only the necessary classes?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r562421283", "createdAt": "2021-01-22T06:50:02Z", "author": {"login": "Meruja"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/util/HttpClientRequest.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.util;\n+\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTkxNDUy", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-573991452", "createdAt": "2021-01-22T06:54:05Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo1NDowNVrOIYXjPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQwNjo1NDowNVrOIYXjPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjQyMjU5MQ==", "bodyText": "Shall we rephrase is as 'Cannot close the socket with is used to check the server status'?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r562422591", "createdAt": "2021-01-22T06:54:05Z", "author": {"login": "Meruja"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/util/Utils.java", "diffHunk": "@@ -0,0 +1,347 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.util;\n+\n+import io.netty.handler.codec.http.HttpHeaderNames;\n+import org.apache.commons.io.FileUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testng.Assert;\n+import org.wso2am.micro.gw.tests.context.MicroGWTestException;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.Socket;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipInputStream;\n+\n+/**\n+ * Utility class for test integration common functions.\n+ */\n+public class Utils {\n+\n+    private static final Logger log = LoggerFactory.getLogger(Utils.class);\n+\n+    /**\n+     * Wait for port to open until given timeout period.\n+     *\n+     * @param port    The port that needs to be checked\n+     * @param timeout The timeout waiting for the port to open\n+     * @param verbose if verbose is set to true,\n+     * @throws RuntimeException if the port is not opened within the timeout\n+     */\n+    public static void waitForPort(int port, long timeout, boolean verbose, String hostName)\n+            throws RuntimeException {\n+        long startTime = System.currentTimeMillis();\n+        boolean isPortOpen = false;\n+        while (!isPortOpen && (System.currentTimeMillis() - startTime) < timeout) {\n+            Socket socket = null;\n+            try {\n+                InetAddress address = InetAddress.getByName(hostName);\n+                socket = new Socket(address, port);\n+                isPortOpen = socket.isConnected();\n+                if (isPortOpen) {\n+                    if (verbose) {\n+                        log.info(\"Successfully connected to the server on port \" + port);\n+                    }\n+                    return;\n+                }\n+            } catch (IOException e) {\n+                if (verbose) {\n+                    log.info(\"Waiting until server starts on port \" + port);\n+                }\n+                try {\n+                    Thread.sleep(1000);\n+                } catch (InterruptedException ignored) {\n+                }\n+            } finally {\n+                try {\n+                    if ((socket != null) && (socket.isConnected())) {\n+                        socket.close();\n+                    }\n+                } catch (IOException e) {\n+                    log.error(\"Can not close the socket with is used to check the server status \", e);\n+                }\n+            }\n+        }\n+        throw new RuntimeException(\"Port \" + port + \" is not open\");\n+    }\n+\n+    /**\n+     * wait until port is closed within given timeout value in mills.\n+     *\n+     * @param port    - port number\n+     * @param timeout - mat time to wait\n+     */\n+    public static void waitForPortToClosed(int port, int timeout) {\n+        long time = System.currentTimeMillis() + timeout;\n+        boolean portOpen = Utils.isPortOpen(port);\n+        while (portOpen && System.currentTimeMillis() < time) {\n+            // wait until server shutdown is completed\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException ignored) {\n+                //ignore\n+            }\n+            portOpen = Utils.isPortOpen(port);\n+        }\n+        if (portOpen) {\n+            throw new RuntimeException(\"Port not closed properly when stopping server\");\n+        }\n+    }\n+\n+    /**\n+     * Check whether given port is in use or not.\n+     *\n+     * @param port - port number\n+     * @throws MicroGWTestException if port is already in use\n+     */\n+    public static void checkPortAvailability(int port) throws MicroGWTestException {\n+\n+        //check whether http port is already occupied\n+        if (isPortOpen(port)) {\n+            throw new MicroGWTestException(\"Unable to start carbon server on port \" +\n+                    (port) + \" : Port already in use\");\n+        }\n+    }\n+\n+    /**\n+     * Check whether the provided port is open.\n+     *\n+     * @param port The port that needs to be checked\n+     * @return true if the <code>port</code> is open & false otherwise\n+     */\n+    public static boolean isPortOpen(int port) {\n+        Socket socket = null;\n+        boolean isPortOpen = false;\n+        try {\n+            InetAddress address = InetAddress.getLocalHost();\n+            socket = new Socket(address, port);\n+            isPortOpen = socket.isConnected();\n+            if (isPortOpen) {\n+                log.info(\"Successfully connected to the server on port \" + port);\n+            }\n+        } catch (IOException e) {\n+            log.info(\"Port \" + port + \" is closed and available for use\");\n+            isPortOpen = false;\n+        } finally {\n+            try {\n+                if ((socket != null) && (socket.isConnected())) {\n+                    socket.close();\n+                }\n+            } catch (IOException e) {\n+                log.error(\"Can not close the socket with is used to check the server status \", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxOTk3MDM3", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-581997037", "createdAt": "2021-02-03T04:36:53Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDozNjo1NFrOIewrdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDozNjo1NFrOIewrdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEyNTc0OQ==", "bodyText": "Shall we add the Javadoc for return type as well?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r569125749", "createdAt": "2021-02-03T04:36:54Z", "author": {"login": "Chamindu36"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/common/BaseTestCase.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.common;\n+\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.wso2am.micro.gw.tests.common.model.API;\n+import org.wso2am.micro.gw.tests.common.model.ApplicationDTO;\n+import org.wso2am.micro.gw.tests.common.model.SubscribedApiDTO;\n+import org.wso2am.micro.gw.tests.context.MgwServerInstance;\n+import org.wso2am.micro.gw.tests.context.MicroGWTestException;\n+import org.wso2am.micro.gw.tests.util.*;\n+\n+import java.io.IOException;\n+import java.net.MalformedURLException;\n+import java.net.URL;\n+import java.util.Arrays;\n+\n+/**\n+ * Base test class for mgw test cases.\n+ */\n+public class BaseTestCase {\n+\n+    protected MgwServerInstance microGWServer;\n+\n+    /**\n+     * start the mgw docker environment and mock backend.\n+     *\n+     * @throws MicroGWTestException\n+     * @throws IOException\n+     */\n+    public void startMGW() throws MicroGWTestException, IOException, InterruptedException {\n+        microGWServer = new MgwServerInstance();\n+        microGWServer.startMGW();\n+    }\n+\n+    /**\n+     * start the mgw docker environment and mock backend.\n+     *\n+     * @param confPath       external conf.toml file location\n+     *\n+     * @throws MicroGWTestException\n+     * @throws IOException\n+     */\n+    public void startMGW(String confPath) throws MicroGWTestException, IOException, InterruptedException {\n+        microGWServer = new MgwServerInstance(confPath);\n+        microGWServer.startMGW();\n+    }\n+\n+    /**\n+     * stop the mgw docker environment.\n+     */\n+    public void stopMGW() {\n+        microGWServer.stopMGW();\n+\n+    }\n+\n+    public static String getImportAPIServiceURLHttps(String servicePath) throws MalformedURLException {\n+        return new URL(new URL(\"https://localhost:\" + TestConstant.ADAPTER_IMPORT_API_PORT), servicePath)\n+                .toString();\n+    }\n+\n+    public static String getServiceURLHttps(String servicePath) throws MalformedURLException {\n+        return new URL(new URL(\"https://localhost:\" + TestConstant.GATEWAY_LISTENER_HTTPS_PORT), servicePath)\n+                .toString();\n+    }\n+\n+    public static String getMockServiceURLHttp(String servicePath) throws MalformedURLException {\n+        return new URL(new URL(\"http://localhost:\" + TestConstant.MOCK_SERVER_PORT), servicePath).toString();\n+    }\n+\n+    /**\n+     * get a jwt token.\n+     *\n+     * @param api                 api\n+     * @param applicationDTO      application dto\n+     * @param tier                tier\n+     * @param keyType             keytype\n+     * @param validityPeriod      validityPeriod\n+     *\n+     * @throws Exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxOTk3Mzg1", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-581997385", "createdAt": "2021-02-03T04:37:54Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDozNzo1NFrOIewszw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDozNzo1NFrOIewszw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEyNjA5NQ==", "bodyText": "Shall we add a new line at the EOF?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r569126095", "createdAt": "2021-02-03T04:37:54Z", "author": {"login": "Chamindu36"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/common/model/ApplicationDTO.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.common.model;\n+\n+import java.io.Serializable;\n+\n+/**\n+ * Application model\n+ */\n+public class ApplicationDTO implements Serializable {\n+\n+    private int id;\n+    private String name;\n+    private String tier;\n+\n+    public int getId() {\n+        return id;\n+    }\n+\n+    public void setId(int id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public String getTier() {\n+        return tier;\n+    }\n+\n+    public void setTier(String tier) {\n+        this.tier = tier;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxOTk4MTg0", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-581998184", "createdAt": "2021-02-03T04:40:21Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDo0MDoyMlrOIewvpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDo0MDoyMlrOIewvpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEyNjgyMw==", "bodyText": "Shall we remove the extra line here?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r569126823", "createdAt": "2021-02-03T04:40:22Z", "author": {"login": "Chamindu36"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/mockbackend/MockBackendServer.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.mockbackend;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxOTk4NDcx", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-581998471", "createdAt": "2021-02-03T04:41:17Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDo0MToxN1rOIewwnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDo0MToxN1rOIewwnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEyNzA2OA==", "bodyText": "Shall we remove this wild card import here?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r569127068", "createdAt": "2021-02-03T04:41:17Z", "author": {"login": "Chamindu36"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/util/HttpPostMultipart.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.util;\n+\n+import javax.net.ssl.*;\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxOTk4ODk3", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-581998897", "createdAt": "2021-02-03T04:42:33Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDo0MjozM1rOIewx4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDo0MjozM1rOIewx4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEyNzM5NA==", "bodyText": "Shall we add the java docs for return type here?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r569127394", "createdAt": "2021-02-03T04:42:33Z", "author": {"login": "Chamindu36"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/util/HttpsPostMultipart.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.util;\n+\n+import javax.net.ssl.*;\n+import java.io.*;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+import static org.wso2am.micro.gw.tests.util.TestConstant.LINE;\n+\n+/**\n+ * This class can be used to send https post multipart request.\n+ */\n+public class HttpsPostMultipart {\n+    private final String boundary;\n+    private HttpsURLConnection conn;\n+    private OutputStream outputStream;\n+    private PrintWriter writer;\n+\n+    /**\n+     * This constructor initializes a new HTTP POST request with content type\n+     * is set to multipart/form-data\n+     *\n+     * @param requestURL\n+     * @param headers\n+     * @throws IOException\n+     */\n+    public HttpsPostMultipart(String requestURL, Map<String, String> headers) throws IOException {\n+\n+        HttpsClientRequest.setSSlSystemProperties();\n+\n+        boundary = UUID.randomUUID().toString();\n+        URL url = new URL(requestURL);\n+        conn = (HttpsURLConnection) url.openConnection();\n+\n+        conn.setUseCaches(false);\n+        conn.setDoOutput(true);    // indicates POST method\n+        conn.setDoInput(true);\n+        conn.setReadTimeout(30000);\n+        conn.setConnectTimeout(15000);\n+        conn.setDoInput(true);\n+\n+        conn.setAllowUserInteraction(false);\n+        conn.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n+        if (headers != null && headers.size() > 0) {\n+            Iterator<String> it = headers.keySet().iterator();\n+            while (it.hasNext()) {\n+                String key = it.next();\n+                String value = headers.get(key);\n+                conn.setRequestProperty(key, value);\n+            }\n+        }\n+        outputStream = conn.getOutputStream();\n+        writer = new PrintWriter(new OutputStreamWriter(outputStream,TestConstant.CHARSET_NAME), true);\n+    }\n+\n+\n+    /**\n+     * Adds a form field to the request\n+     *\n+     * @param name  field name\n+     * @param value field value\n+     */\n+    public void addFormField(String name, String value) {\n+        writer.append(\"--\" + boundary).append(LINE);\n+        writer.append(\"Content-Disposition: form-data; name=\\\"\" + name + \"\\\"\").append(LINE);\n+        writer.append(\"Content-Type: text/plain; charset=\" + TestConstant.CHARSET_NAME).append(LINE);\n+        writer.append(LINE);\n+        writer.append(value).append(LINE);\n+        writer.flush();\n+    }\n+\n+    /**\n+     * Adds a upload file section to the request\n+     *\n+     * @param fieldName\n+     * @param uploadFile\n+     * @throws IOException\n+     */\n+    public void addFilePart(String fieldName, File uploadFile)\n+            throws IOException {\n+        String fileName = uploadFile.getName();\n+        writer.append(\"--\" + boundary).append(LINE);\n+        writer.append(\"Content-Disposition: form-data; name=\\\"\" + fieldName + \"\\\"; filename=\\\"\" + fileName + \"\\\"\").append(LINE);\n+        writer.append(\"Content-Type: \" + URLConnection.guessContentTypeFromName(fileName)).append(LINE);\n+        writer.append(\"Content-Transfer-Encoding: binary\").append(LINE);\n+        writer.append(LINE);\n+        writer.flush();\n+\n+        FileInputStream inputStream = new FileInputStream(uploadFile);\n+        byte[] buffer = new byte[4096];\n+        int bytesRead = -1;\n+        while ((bytesRead = inputStream.read(buffer)) != -1) {\n+            outputStream.write(buffer, 0, bytesRead);\n+        }\n+        outputStream.flush();\n+        inputStream.close();\n+        writer.append(LINE);\n+        writer.flush();\n+    }\n+\n+    /**\n+     * Completes the request and receives response from the server.\n+     *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxOTk5MTIw", "url": "https://github.com/wso2/product-microgateway/pull/1511#pullrequestreview-581999120", "createdAt": "2021-02-03T04:43:21Z", "commit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDo0MzoyMVrOIewyhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QwNDo0MzoyMVrOIewyhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTEyNzU1Nw==", "bodyText": "Shall we remove the wildcard imports here?", "url": "https://github.com/wso2/product-microgateway/pull/1511#discussion_r569127557", "createdAt": "2021-02-03T04:43:21Z", "author": {"login": "Chamindu36"}, "path": "test/test-integration/src/test/java/org/wso2am/micro/gw/tests/util/ZipDir.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2am.micro.gw.tests.util;\n+\n+import java.io.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49905cdaf2edc09fee5be67f1182faafaf3d2bdd"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1023, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}