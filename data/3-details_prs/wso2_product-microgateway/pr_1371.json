{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0Mzk0Mjg4", "number": 1371, "title": "Enable kay validation service ", "bodyText": "Purpose\nThis PR enables key validation service back in MGW 3.2.0\nIssues\n\nFixes #1370\nAutomation tests\n\nUnit tests added: Yes/No\nIntegration tests added: Yes/No\n\nTested environments\n\nNot Tested\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-08-07T05:15:31Z", "url": "https://github.com/wso2/product-microgateway/pull/1371", "merged": true, "mergeCommit": {"oid": "aa48a5a7ac988416dc1360f8f72e1a99c38d3cde"}, "closed": true, "closedAt": "2020-08-07T14:59:41Z", "author": {"login": "menakaj"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8dfM-ABqjM2MzE3ODg3NDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8lPdtgH2gAyNDY0Mzk0Mjg4OjYyMmMzYTViNjY2ZTE5ZjVhZTFiZjUxZTRjYmNjMTYyOTNjZDQwMDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c4f32bda175282f81ae6437f508ab2c17a63a14", "author": {"user": {"login": "menakaj", "name": "Menaka Jayawardena"}}, "url": "https://github.com/wso2/product-microgateway/commit/9c4f32bda175282f81ae6437f508ab2c17a63a14", "committedDate": "2020-08-07T05:13:45Z", "message": "Change the legacy mode config name."}, "afterCommit": {"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa", "author": {"user": {"login": "menakaj", "name": "Menaka Jayawardena"}}, "url": "https://github.com/wso2/product-microgateway/commit/c63188857c3bf3ca024cf7df34c39146246d4efa", "committedDate": "2020-08-07T05:22:37Z", "message": "Change the legacy mode config name."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDUwNTM3", "url": "https://github.com/wso2/product-microgateway/pull/1371#pullrequestreview-463050537", "createdAt": "2020-08-07T05:52:59Z", "commit": {"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo1Mjo1OVrOG9NX2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNjowMDozMVrOG9Nghg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNTQxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        } else {\n          \n          \n            \n                            if (authenticationResult) {\n          \n          \n            \n                        } else if (authenticationResult) {", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466835416", "createdAt": "2020-08-07T05:52:59Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "diffHunk": "@@ -91,76 +93,102 @@ public type KeyValidationHandler object {\n         string authHeaderName = getAuthorizationHeader(invocationContext);\n         APIConfiguration? apiConfig = apiConfigAnnotationMap[<string>invocationContext.attributes[http:SERVICE_NAME]];\n         boolean|auth:Error authenticationResult = false;\n-        authenticationResult = self.introspectProvider.authenticate(credential);\n-        if (authenticationResult is auth:Error) {\n-            return prepareAuthenticationError(\"Failed to authenticate with introspect auth provider.\", authenticationResult);\n-        } else if (!authenticationResult) {\n-            setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n-            return authenticationResult;\n+        if (self.isLegacyKM) {\n+            // In legacy mode, use the KeyValidation service for token validation.\n+            // This is used when API-M versions < 3.2 are being used to support backward compatibility\n+            authenticationResult = self.oauth2KeyValidationProvider.authenticate(credential);\n+            if (authenticationResult is auth:Error) {\n+                return prepareAuthenticationError(\"Failed to authenticate with key validation service.\", authenticationResult);\n+            } else {\n+                if (authenticationResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNjkxMw==", "bodyText": "Here don't we need below else block similar to introspect flow?\n} else if (!authenticationResult) {\n    setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n    return authenticationResult;\n}", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466836913", "createdAt": "2020-08-07T05:58:08Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "diffHunk": "@@ -91,76 +93,102 @@ public type KeyValidationHandler object {\n         string authHeaderName = getAuthorizationHeader(invocationContext);\n         APIConfiguration? apiConfig = apiConfigAnnotationMap[<string>invocationContext.attributes[http:SERVICE_NAME]];\n         boolean|auth:Error authenticationResult = false;\n-        authenticationResult = self.introspectProvider.authenticate(credential);\n-        if (authenticationResult is auth:Error) {\n-            return prepareAuthenticationError(\"Failed to authenticate with introspect auth provider.\", authenticationResult);\n-        } else if (!authenticationResult) {\n-            setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n-            return authenticationResult;\n+        if (self.isLegacyKM) {\n+            // In legacy mode, use the KeyValidation service for token validation.\n+            // This is used when API-M versions < 3.2 are being used to support backward compatibility\n+            authenticationResult = self.oauth2KeyValidationProvider.authenticate(credential);\n+            if (authenticationResult is auth:Error) {\n+                return prepareAuthenticationError(\"Failed to authenticate with key validation service.\", authenticationResult);\n+            } else {\n+                if (authenticationResult) {\n+                    boolean tokenGenStatus = generateAndSetBackendJwtHeader(credential,\n+                                                                                        req,\n+                                                                                        self.enabledJWTGenerator,\n+                                                                                        self.classLoaded,\n+                                                                                        self.skewTime,\n+                                                                                        self.enabledCaching,\n+                                                                                        self.issuer,\n+                                                                                        self.remoteUserClaimRetrievalEnabled,\n+                                                                                        false);\n+                    if (!tokenGenStatus) {\n+                        printError(KEY_AUTHN_FILTER, \"Error while adding the Backend JWT header\");\n+                    }\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNzYzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              # When Microgateway is used with older APIM versions for subscription validation by using KeyValidation service.\n          \n          \n            \n              # When Microgateway is used with older APIM versions with subscription validation, enable legacy KeyValidation service.", "url": "https://github.com/wso2/product-microgateway/pull/1371#discussion_r466837638", "createdAt": "2020-08-07T06:00:31Z", "author": {"login": "praminda"}, "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -52,6 +52,8 @@\n   serverUrl = \"https://localhost:9443\"\n   # The token endpoint context of the Key Manager server\n   tokenContext = \"oauth2\"\n+  # When Microgateway is used with older APIM versions for subscription validation by using KeyValidation service.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c63188857c3bf3ca024cf7df34c39146246d4efa"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8157171ffab1f0eb936c10a294aafea0e487bf5", "author": {"user": {"login": "menakaj", "name": "Menaka Jayawardena"}}, "url": "https://github.com/wso2/product-microgateway/commit/a8157171ffab1f0eb936c10a294aafea0e487bf5", "committedDate": "2020-08-07T10:20:23Z", "message": "Re-enable the key validation service to use with older apim versions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9f43b68b15b99e3d13d42ace8dd2ce10e290fe5", "author": {"user": {"login": "menakaj", "name": "Menaka Jayawardena"}}, "url": "https://github.com/wso2/product-microgateway/commit/b9f43b68b15b99e3d13d42ace8dd2ce10e290fe5", "committedDate": "2020-08-07T10:20:23Z", "message": "Add new config to template file."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca65300b565ca7250dc07c6a93b60c1090fcaf2", "author": {"user": {"login": "menakaj", "name": "Menaka Jayawardena"}}, "url": "https://github.com/wso2/product-microgateway/commit/dca65300b565ca7250dc07c6a93b60c1090fcaf2", "committedDate": "2020-08-07T10:20:23Z", "message": "Change the legacy mode config name."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e85834c616c88178149f469c504eab32bc3200f2", "author": {"user": {"login": "menakaj", "name": "Menaka Jayawardena"}}, "url": "https://github.com/wso2/product-microgateway/commit/e85834c616c88178149f469c504eab32bc3200f2", "committedDate": "2020-08-07T10:20:23Z", "message": "Add authentication failure case to the key validation flow."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70e78dc875c2cdd767a1f2343e78a6f4152e0a04", "author": {"user": {"login": "menakaj", "name": "Menaka Jayawardena"}}, "url": "https://github.com/wso2/product-microgateway/commit/70e78dc875c2cdd767a1f2343e78a6f4152e0a04", "committedDate": "2020-08-07T06:08:10Z", "message": "Reword the key template comment\n\nCo-authored-by: Praminda <pramindabj@gmail.com>"}, "afterCommit": {"oid": "e85834c616c88178149f469c504eab32bc3200f2", "author": {"user": {"login": "menakaj", "name": "Menaka Jayawardena"}}, "url": "https://github.com/wso2/product-microgateway/commit/e85834c616c88178149f469c504eab32bc3200f2", "committedDate": "2020-08-07T10:20:23Z", "message": "Add authentication failure case to the key validation flow."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzQ3Nzg5", "url": "https://github.com/wso2/product-microgateway/pull/1371#pullrequestreview-463347789", "createdAt": "2020-08-07T14:14:55Z", "commit": {"oid": "e85834c616c88178149f469c504eab32bc3200f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "622c3a5b666e19f5ae1bf51e4cbcc16293cd4005", "author": {"user": {"login": "menakaj", "name": "Menaka Jayawardena"}}, "url": "https://github.com/wso2/product-microgateway/commit/622c3a5b666e19f5ae1bf51e4cbcc16293cd4005", "committedDate": "2020-08-07T14:24:55Z", "message": "Fix key validations conditions logic."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 947, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}