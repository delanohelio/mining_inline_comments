{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzc1MDc5", "number": 1049, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyMzo0NlrODje5mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyMzo0NlrODje5mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTMzMDE2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/jwt_auth_handler.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyMzo0N1rOFvUJ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxNDoyMzo0N1rOFvUJ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTE1NzU4OQ==", "bodyText": "Don't read the config per request. Store this in a variable and read.", "url": "https://github.com/wso2/product-microgateway/pull/1049#discussion_r385157589", "createdAt": "2020-02-27T14:23:47Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/jwt_auth_handler.bal", "diffHunk": "@@ -62,9 +63,23 @@ public type JWTAuthHandler object {\n         string credential = headerValue.substring(6, headerValue.length()).trim();\n         var authenticationResult = self.jwtAuthProvider.authenticate(credential);\n         if (authenticationResult is boolean) {\n+            setBackendJwtHeader(credential, req);\n             return authenticationResult;\n         } else {\n             return prepareAuthenticationError(\"Failed to authenticate with jwt bearer auth handler.\", authenticationResult);\n         }\n     }\n };\n+\n+public function setBackendJwtHeader(string credential, http:Request req) {\n+    (jwt:JwtPayload | error) payload = getDecodedJWTPayload(credential);\n+    if (payload is jwt:JwtPayload) {\n+        map<json>? customClaims = payload?.customClaims;\n+        // validate backend jwt claim and set it to jwt header\n+        if (customClaims is map<json> && customClaims.hasKey(BACKEND_JWT)) {\n+            printDebug(KEY_JWT_AUTH_PROVIDER, \"Set backend jwt header.\");\n+            string jwtheaderName = getConfigValue(JWT_CONFIG_INSTANCE_ID, JWT_HEADER, DEFAULT_JWT_HEADER_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "974e52e93c1a82375617be55c32681a091a39920"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1305, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}