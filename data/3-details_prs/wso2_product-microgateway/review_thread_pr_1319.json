{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3NDQ0Mjg0", "number": 1319, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxMDoyMDo0OFrOENlTHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTowNzoyNVrOEOougQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjc4MDQ2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxMDoyMDo0OFrOGwTFGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoyMzoyMlrOGwifTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI5NzQzMw==", "bodyText": "Lets not make this exact match. Starting from 3.2.0 version should be the condition", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r453297433", "createdAt": "2020-07-12T10:20:48Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "diffHunk": "@@ -21,19 +21,30 @@ public function getFaultMetaData(FaultDTO dto) returns string {\n     return dto.metaClientType;\n }\n \n-public function getFaultPayloadData(FaultDTO dto) returns string {\n-    return dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n+public function getFaultPayloadData(FaultDTO dto, string amAnalyticsVersion) returns string {\n+    printDebug(KEY_ANALYTICS_FILTER, \"Generating fault data payload for \" + amAnalyticsVersion);\n+    string payloadData = dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n     dto.resourcePath + OBJ + dto.method + OBJ + dto.apiCreator + OBJ + dto.userName + OBJ + dto.userTenantDomain + OBJ +\n     dto.apiCreatorTenantDomain + OBJ + dto.hostName + OBJ + dto.applicationId + OBJ +\n-    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ + dto.faultTime.toString();\n+    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ +\n+    dto.faultTime.toString();\n+\n+    if (amAnalyticsVersion == \"3.1.0\") {\n+        payloadData = payloadData + OBJ + dto.properties;\n+    }\n+    if (amAnalyticsVersion == \"3.2.0\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd4965de40af88524f47f5f579bffb01e67d27b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0OTkwMg==", "bodyText": "Fixed with 83140f7", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r453549902", "createdAt": "2020-07-13T10:23:22Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "diffHunk": "@@ -21,19 +21,30 @@ public function getFaultMetaData(FaultDTO dto) returns string {\n     return dto.metaClientType;\n }\n \n-public function getFaultPayloadData(FaultDTO dto) returns string {\n-    return dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n+public function getFaultPayloadData(FaultDTO dto, string amAnalyticsVersion) returns string {\n+    printDebug(KEY_ANALYTICS_FILTER, \"Generating fault data payload for \" + amAnalyticsVersion);\n+    string payloadData = dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n     dto.resourcePath + OBJ + dto.method + OBJ + dto.apiCreator + OBJ + dto.userName + OBJ + dto.userTenantDomain + OBJ +\n     dto.apiCreatorTenantDomain + OBJ + dto.hostName + OBJ + dto.applicationId + OBJ +\n-    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ + dto.faultTime.toString();\n+    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ +\n+    dto.faultTime.toString();\n+\n+    if (amAnalyticsVersion == \"3.1.0\") {\n+        payloadData = payloadData + OBJ + dto.properties;\n+    }\n+    if (amAnalyticsVersion == \"3.2.0\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI5NzQzMw=="}, "originalCommit": {"oid": "7dd4965de40af88524f47f5f579bffb01e67d27b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNjc4MDY0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxMDoyMTowM1rOGwTFMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoyMzoxNlrOGwifHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI5NzQ1Nw==", "bodyText": "Lets not make this exact match. Upto 3.1.0 should be the condition", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r453297457", "createdAt": "2020-07-12T10:21:03Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "diffHunk": "@@ -21,19 +21,30 @@ public function getFaultMetaData(FaultDTO dto) returns string {\n     return dto.metaClientType;\n }\n \n-public function getFaultPayloadData(FaultDTO dto) returns string {\n-    return dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n+public function getFaultPayloadData(FaultDTO dto, string amAnalyticsVersion) returns string {\n+    printDebug(KEY_ANALYTICS_FILTER, \"Generating fault data payload for \" + amAnalyticsVersion);\n+    string payloadData = dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n     dto.resourcePath + OBJ + dto.method + OBJ + dto.apiCreator + OBJ + dto.userName + OBJ + dto.userTenantDomain + OBJ +\n     dto.apiCreatorTenantDomain + OBJ + dto.hostName + OBJ + dto.applicationId + OBJ +\n-    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ + dto.faultTime.toString();\n+    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ +\n+    dto.faultTime.toString();\n+\n+    if (amAnalyticsVersion == \"3.1.0\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7dd4965de40af88524f47f5f579bffb01e67d27b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0OTg1Mw==", "bodyText": "Fixed with 83140f7", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r453549853", "createdAt": "2020-07-13T10:23:16Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "diffHunk": "@@ -21,19 +21,30 @@ public function getFaultMetaData(FaultDTO dto) returns string {\n     return dto.metaClientType;\n }\n \n-public function getFaultPayloadData(FaultDTO dto) returns string {\n-    return dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n+public function getFaultPayloadData(FaultDTO dto, string amAnalyticsVersion) returns string {\n+    printDebug(KEY_ANALYTICS_FILTER, \"Generating fault data payload for \" + amAnalyticsVersion);\n+    string payloadData = dto.consumerKey + OBJ + dto.apiName + OBJ + dto.apiVersion + OBJ + dto.apiContext + OBJ +\n     dto.resourcePath + OBJ + dto.method + OBJ + dto.apiCreator + OBJ + dto.userName + OBJ + dto.userTenantDomain + OBJ +\n     dto.apiCreatorTenantDomain + OBJ + dto.hostName + OBJ + dto.applicationId + OBJ +\n-    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ + dto.faultTime.toString();\n+    dto.applicationName + OBJ + dto.protocol + OBJ + dto.errorCode.toString() + OBJ + dto.errorMessage + OBJ +\n+    dto.faultTime.toString();\n+\n+    if (amAnalyticsVersion == \"3.1.0\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzI5NzQ1Nw=="}, "originalCommit": {"oid": "7dd4965de40af88524f47f5f579bffb01e67d27b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzMzMTExOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/dtos/analytics_dtos.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODo0ODowN1rOGx0fwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDo0Mzo0MFrOGx4iHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5MzUwNA==", "bodyText": "Populate from invocation context", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454893504", "createdAt": "2020-07-15T08:48:07Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/dtos/analytics_dtos.bal", "diffHunk": "@@ -51,6 +51,7 @@ public type RequestResponseExecutionDTO record {\n     string label = \"\";\n     string correlationId = \"\";\n     boolean cacheHit = false;\n+    string properties = \"null\"; //New 3.1.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c76ca0323eb40c6f928bfb095e380b824ce81bd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTY0Nw==", "bodyText": "Fixed with b2e75f7", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454959647", "createdAt": "2020-07-15T10:43:40Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/dtos/analytics_dtos.bal", "diffHunk": "@@ -51,6 +51,7 @@ public type RequestResponseExecutionDTO record {\n     string label = \"\";\n     string correlationId = \"\";\n     boolean cacheHit = false;\n+    string properties = \"null\"; //New 3.1.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5MzUwNA=="}, "originalCommit": {"oid": "6c76ca0323eb40c6f928bfb095e380b824ce81bd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzM0NTQwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwODo1MTo1OVrOGx0o0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDo0Mzo0NlrOGx4iUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5NTgyNw==", "bodyText": "Use 3.2.0 as default, max version", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454895827", "createdAt": "2020-07-15T08:51:59Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -1114,3 +1114,30 @@ public function buildBasicAuthHeader(string username, string password) returns s\n \n     return BASIC_PREFIX_WITH_SPACE + headerValue;\n }\n+\n+# Get the supported analytics stream version for the configured value.\n+#\n+# + return - Returns the supported analytics version.\n+# True if the version1 is greater than version2, false otherwise.\n+public function getAnalyticsVertion() returns string {\n+    string amAnalyticsVersion = getConfigValue(OLD_FILE_UPLOAD_ANALYTICS, APIM_ANALYTICS_VERSION, DEFAULT_AM_ANALYTICS_VERSION);\n+    string analyticsVersion = replaceAll(amAnalyticsVersion, \"\\\\.\", \"\");\n+    string supportedVersion = DEFAULT_AM_ANALYTICS_VERSION;\n+    // 3.0.0 or 3.1.0 case use the 3.0.0 stream.\n+    if (amAnalyticsVersion == DEFAULT_AM_ANALYTICS_VERSION || amAnalyticsVersion == \"3.1.0\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c76ca0323eb40c6f928bfb095e380b824ce81bd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk1OTY5OA==", "bodyText": "Fixed with b2e75f7", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454959698", "createdAt": "2020-07-15T10:43:46Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -1114,3 +1114,30 @@ public function buildBasicAuthHeader(string username, string password) returns s\n \n     return BASIC_PREFIX_WITH_SPACE + headerValue;\n }\n+\n+# Get the supported analytics stream version for the configured value.\n+#\n+# + return - Returns the supported analytics version.\n+# True if the version1 is greater than version2, false otherwise.\n+public function getAnalyticsVertion() returns string {\n+    string amAnalyticsVersion = getConfigValue(OLD_FILE_UPLOAD_ANALYTICS, APIM_ANALYTICS_VERSION, DEFAULT_AM_ANALYTICS_VERSION);\n+    string analyticsVersion = replaceAll(amAnalyticsVersion, \"\\\\.\", \"\");\n+    string supportedVersion = DEFAULT_AM_ANALYTICS_VERSION;\n+    // 3.0.0 or 3.1.0 case use the 3.0.0 stream.\n+    if (amAnalyticsVersion == DEFAULT_AM_ANALYTICS_VERSION || amAnalyticsVersion == \"3.1.0\") {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDg5NTgyNw=="}, "originalCommit": {"oid": "6c76ca0323eb40c6f928bfb095e380b824ce81bd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzgwMjkxOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMDo1OTozMVrOGx5BZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowNzozMlrOGx7FIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2NzY1NQ==", "bodyText": "Do we need !== or !=", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454967655", "createdAt": "2020-07-15T10:59:31Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "diffHunk": "@@ -21,19 +21,34 @@ public function getFaultMetaData(FaultDTO dto) returns string {\n     return dto.metaClientType;\n }\n \n-public function getFaultPayloadData(FaultDTO dto) returns string {\n+public function getFaultPayloadData(FaultDTO dto, string amAnalyticsVersion) returns string {\n+    printDebug(KEY_ANALYTICS_FILTER, \"Generating fault data payload for \" + amAnalyticsVersion);\n+    string resourceTemplate = OBJ;\n+    string applicationOwner = OBJ;\n+    string properties = \"\";\n+    // If am analytics version is 3.2.0, append api resource template and application owner\n+    if (amAnalyticsVersion == DEFAULT_AM_ANALYTICS_VERSION) {\n+        resourceTemplate = resourceTemplate + dto.apiResourceTemplate + OBJ;\n+        applicationOwner = applicationOwner + dto.applicationOwner + OBJ;\n+    }\n+    // If analytics version is 3.1.0, append properties.\n+    if (amAnalyticsVersion !== DEFAULT_AM_ANALYTICS_VERSION_300) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTM3Ng==", "bodyText": "It is !=.\nFixed in b694c69", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001376", "createdAt": "2020-07-15T12:07:32Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/faults_util.bal", "diffHunk": "@@ -21,19 +21,34 @@ public function getFaultMetaData(FaultDTO dto) returns string {\n     return dto.metaClientType;\n }\n \n-public function getFaultPayloadData(FaultDTO dto) returns string {\n+public function getFaultPayloadData(FaultDTO dto, string amAnalyticsVersion) returns string {\n+    printDebug(KEY_ANALYTICS_FILTER, \"Generating fault data payload for \" + amAnalyticsVersion);\n+    string resourceTemplate = OBJ;\n+    string applicationOwner = OBJ;\n+    string properties = \"\";\n+    // If am analytics version is 3.2.0, append api resource template and application owner\n+    if (amAnalyticsVersion == DEFAULT_AM_ANALYTICS_VERSION) {\n+        resourceTemplate = resourceTemplate + dto.apiResourceTemplate + OBJ;\n+        applicationOwner = applicationOwner + dto.applicationOwner + OBJ;\n+    }\n+    // If analytics version is 3.1.0, append properties.\n+    if (amAnalyticsVersion !== DEFAULT_AM_ANALYTICS_VERSION_300) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2NzY1NQ=="}, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzgwNzY0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTowMTowMFrOGx5ETQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowNzoxM1rOGx7EeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2ODM5Nw==", "bodyText": "Lets remove empty line", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454968397", "createdAt": "2020-07-15T11:01:00Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal", "diffHunk": "@@ -149,29 +153,59 @@ public function generateRequestResponseExecutionDataEvent(http:Response response\n         requestResponseExecutionDTO.apiResourceTemplate = httpResourceConfig.path;\n     }\n     //request method\n-    requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n-    int initTime = <int>context.attributes[REQUEST_TIME];\n-    int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n-    int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n-    requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n-    requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n-    requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    if (context.attributes[API_METHOD_PROPERTY] is string) {\n+        requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n+    }\n+    \n+    if (context.attributes[REQUEST_TIME] is int && invocationContext.attributes[TS_RESPONSE_IN] is int && invocationContext.attributes[TS_REQUEST_OUT] is int) {\n+        int initTime = <int>context.attributes[REQUEST_TIME];\n+        int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n+        int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n+        requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n+        requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n+        requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    }\n+    \n     //dummy values for protocol and destination for now\n-    requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n-    requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    if (context.attributes[PROTOCOL_PROPERTY] is string) {\n+        requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n+    }\n+    if (invocationContext.attributes[DESTINATION] is string) {\n+        requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    }\n \n     //Set data which were set to context in the Request path\n-    requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n-    requestResponseExecutionDTO.apiCreatorTenantDomain = <string>context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY];\n-    requestResponseExecutionDTO.apiTier = <string>context.attributes[API_TIER_PROPERTY];\n-    requestResponseExecutionDTO.throttledOut = <boolean>context.attributes[CONTINUE_ON_TROTTLE_PROPERTY];\n-    requestResponseExecutionDTO.userAgent = <string>context.attributes[USER_AGENT_PROPERTY];\n-    requestResponseExecutionDTO.userIp = <string>context.attributes[USER_IP_PROPERTY];\n-    requestResponseExecutionDTO.requestTimestamp = <int>context.attributes[REQUEST_TIME_PROPERTY];\n+    if (context.attributes[APPLICATION_OWNER_PROPERTY] is string) {\n+        requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n+    }\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTIwOA==", "bodyText": "Fixed in b694c69", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001208", "createdAt": "2020-07-15T12:07:13Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal", "diffHunk": "@@ -149,29 +153,59 @@ public function generateRequestResponseExecutionDataEvent(http:Response response\n         requestResponseExecutionDTO.apiResourceTemplate = httpResourceConfig.path;\n     }\n     //request method\n-    requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n-    int initTime = <int>context.attributes[REQUEST_TIME];\n-    int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n-    int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n-    requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n-    requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n-    requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    if (context.attributes[API_METHOD_PROPERTY] is string) {\n+        requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n+    }\n+    \n+    if (context.attributes[REQUEST_TIME] is int && invocationContext.attributes[TS_RESPONSE_IN] is int && invocationContext.attributes[TS_REQUEST_OUT] is int) {\n+        int initTime = <int>context.attributes[REQUEST_TIME];\n+        int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n+        int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n+        requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n+        requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n+        requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    }\n+    \n     //dummy values for protocol and destination for now\n-    requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n-    requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    if (context.attributes[PROTOCOL_PROPERTY] is string) {\n+        requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n+    }\n+    if (invocationContext.attributes[DESTINATION] is string) {\n+        requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    }\n \n     //Set data which were set to context in the Request path\n-    requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n-    requestResponseExecutionDTO.apiCreatorTenantDomain = <string>context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY];\n-    requestResponseExecutionDTO.apiTier = <string>context.attributes[API_TIER_PROPERTY];\n-    requestResponseExecutionDTO.throttledOut = <boolean>context.attributes[CONTINUE_ON_TROTTLE_PROPERTY];\n-    requestResponseExecutionDTO.userAgent = <string>context.attributes[USER_AGENT_PROPERTY];\n-    requestResponseExecutionDTO.userIp = <string>context.attributes[USER_IP_PROPERTY];\n-    requestResponseExecutionDTO.requestTimestamp = <int>context.attributes[REQUEST_TIME_PROPERTY];\n+    if (context.attributes[APPLICATION_OWNER_PROPERTY] is string) {\n+        requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n+    }\n+    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2ODM5Nw=="}, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzgwODEwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTowMTowOFrOGx5Ejg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowNzowOFrOGx7ETg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2ODQ2Mg==", "bodyText": "Lets remove empty line", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454968462", "createdAt": "2020-07-15T11:01:08Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal", "diffHunk": "@@ -149,29 +153,59 @@ public function generateRequestResponseExecutionDataEvent(http:Response response\n         requestResponseExecutionDTO.apiResourceTemplate = httpResourceConfig.path;\n     }\n     //request method\n-    requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n-    int initTime = <int>context.attributes[REQUEST_TIME];\n-    int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n-    int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n-    requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n-    requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n-    requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    if (context.attributes[API_METHOD_PROPERTY] is string) {\n+        requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n+    }\n+    \n+    if (context.attributes[REQUEST_TIME] is int && invocationContext.attributes[TS_RESPONSE_IN] is int && invocationContext.attributes[TS_REQUEST_OUT] is int) {\n+        int initTime = <int>context.attributes[REQUEST_TIME];\n+        int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n+        int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n+        requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n+        requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n+        requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    }\n+    \n     //dummy values for protocol and destination for now\n-    requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n-    requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    if (context.attributes[PROTOCOL_PROPERTY] is string) {\n+        requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n+    }\n+    if (invocationContext.attributes[DESTINATION] is string) {\n+        requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    }\n \n     //Set data which were set to context in the Request path\n-    requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n-    requestResponseExecutionDTO.apiCreatorTenantDomain = <string>context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY];\n-    requestResponseExecutionDTO.apiTier = <string>context.attributes[API_TIER_PROPERTY];\n-    requestResponseExecutionDTO.throttledOut = <boolean>context.attributes[CONTINUE_ON_TROTTLE_PROPERTY];\n-    requestResponseExecutionDTO.userAgent = <string>context.attributes[USER_AGENT_PROPERTY];\n-    requestResponseExecutionDTO.userIp = <string>context.attributes[USER_IP_PROPERTY];\n-    requestResponseExecutionDTO.requestTimestamp = <int>context.attributes[REQUEST_TIME_PROPERTY];\n+    if (context.attributes[APPLICATION_OWNER_PROPERTY] is string) {\n+        requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n+    }\n+    \n+    if (context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY] is string) {\n+        requestResponseExecutionDTO.apiCreatorTenantDomain = <string>context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY];\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTE2Ng==", "bodyText": "Fixed in b694c69", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001166", "createdAt": "2020-07-15T12:07:08Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/responsetime_util.bal", "diffHunk": "@@ -149,29 +153,59 @@ public function generateRequestResponseExecutionDataEvent(http:Response response\n         requestResponseExecutionDTO.apiResourceTemplate = httpResourceConfig.path;\n     }\n     //request method\n-    requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n-    int initTime = <int>context.attributes[REQUEST_TIME];\n-    int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n-    int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n-    requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n-    requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n-    requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    if (context.attributes[API_METHOD_PROPERTY] is string) {\n+        requestResponseExecutionDTO.apiMethod = <string>context.attributes[API_METHOD_PROPERTY];\n+    }\n+    \n+    if (context.attributes[REQUEST_TIME] is int && invocationContext.attributes[TS_RESPONSE_IN] is int && invocationContext.attributes[TS_REQUEST_OUT] is int) {\n+        int initTime = <int>context.attributes[REQUEST_TIME];\n+        int timeRequestOut = <int>invocationContext.attributes[TS_REQUEST_OUT];\n+        int timeResponseIn = <int>invocationContext.attributes[TS_RESPONSE_IN];\n+        requestResponseExecutionDTO.serviceTime = timeRequestOut - initTime;\n+        requestResponseExecutionDTO.backendTime = timeResponseIn - timeRequestOut;\n+        requestResponseExecutionDTO.responseTime = timeResponseIn - initTime;\n+    }\n+    \n     //dummy values for protocol and destination for now\n-    requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n-    requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    if (context.attributes[PROTOCOL_PROPERTY] is string) {\n+        requestResponseExecutionDTO.protocol = <string>context.attributes[PROTOCOL_PROPERTY];\n+    }\n+    if (invocationContext.attributes[DESTINATION] is string) {\n+        requestResponseExecutionDTO.destination = <string>invocationContext.attributes[DESTINATION];\n+    }\n \n     //Set data which were set to context in the Request path\n-    requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n-    requestResponseExecutionDTO.apiCreatorTenantDomain = <string>context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY];\n-    requestResponseExecutionDTO.apiTier = <string>context.attributes[API_TIER_PROPERTY];\n-    requestResponseExecutionDTO.throttledOut = <boolean>context.attributes[CONTINUE_ON_TROTTLE_PROPERTY];\n-    requestResponseExecutionDTO.userAgent = <string>context.attributes[USER_AGENT_PROPERTY];\n-    requestResponseExecutionDTO.userIp = <string>context.attributes[USER_IP_PROPERTY];\n-    requestResponseExecutionDTO.requestTimestamp = <int>context.attributes[REQUEST_TIME_PROPERTY];\n+    if (context.attributes[APPLICATION_OWNER_PROPERTY] is string) {\n+        requestResponseExecutionDTO.applicationOwner = <string>context.attributes[APPLICATION_OWNER_PROPERTY];\n+    }\n+    \n+    if (context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY] is string) {\n+        requestResponseExecutionDTO.apiCreatorTenantDomain = <string>context.attributes[API_CREATOR_TENANT_DOMAIN_PROPERTY];\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2ODQ2Mg=="}, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzgxMTU3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTowMjoxM1rOGx5GuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowNjo1OVrOGx7EFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2OTAxNw==", "bodyText": "Shall we use some name like \"ADDITIONAL_ANALYTICS_PROPS\"", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454969017", "createdAt": "2020-07-15T11:02:13Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "diffHunk": "@@ -122,6 +122,7 @@ public const string USER_IP_PROPERTY = \"userIp\";\n public const string REQUEST_TIME_PROPERTY = \"requestTimestamp\";\n public const string GATEWAY_TYPE_PROPERTY = \"gatewayType\";\n public const string GATEWAY_TYPE = \"MICRO\";\n+public const string ADDITIONAL_PROPS = \"ADDITIONAL_PROPS\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTEwOA==", "bodyText": "Fixed in b694c69", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001108", "createdAt": "2020-07-15T12:06:59Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "diffHunk": "@@ -122,6 +122,7 @@ public const string USER_IP_PROPERTY = \"userIp\";\n public const string REQUEST_TIME_PROPERTY = \"requestTimestamp\";\n public const string GATEWAY_TYPE_PROPERTY = \"gatewayType\";\n public const string GATEWAY_TYPE = \"MICRO\";\n+public const string ADDITIONAL_PROPS = \"ADDITIONAL_PROPS\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk2OTAxNw=="}, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzgyMDQwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTowNTowMlrOGx5MNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowNjo1M1rOGx7D5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDQyMg==", "bodyText": "Let's not call getAnalyticsVertion() method for each request . Save it in a global variable during startup and reuse it", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454970422", "createdAt": "2020-07-15T11:05:02Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -20,19 +20,23 @@ import ballerina/runtime;\n public type AnalyticsRequestFilter object {\n \n     public function filterRequest(http:Caller caller, http:Request request, http:FilterContext context) returns boolean {\n+        string amAnalyticsVersion = getAnalyticsVertion();\n+        printDebug(KEY_ANALYTICS_FILTER, \"Analytics Version \" + amAnalyticsVersion);\n         if (context.attributes.hasKey(SKIP_ALL_FILTERS) && <boolean>context.attributes[SKIP_ALL_FILTERS]) {\n             printDebug(KEY_ANALYTICS_FILTER, \"Skip all filter annotation set in the service. Skip the filter\");\n             return true;\n         }\n         //Filter only if analytics is enabled.\n         if (isAnalyticsEnabled || isGrpcAnalyticsEnabled) {\n             context.attributes[PROTOCOL_PROPERTY] = caller.protocol;\n-            doFilterRequest(request, context);\n+            doFilterRequest(request, context, amAnalyticsVersion);\n         }\n         return true;\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n+        string amAnalyticsVersion = getAnalyticsVertion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTA2MA==", "bodyText": "Fixed in b694c69", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001060", "createdAt": "2020-07-15T12:06:53Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -20,19 +20,23 @@ import ballerina/runtime;\n public type AnalyticsRequestFilter object {\n \n     public function filterRequest(http:Caller caller, http:Request request, http:FilterContext context) returns boolean {\n+        string amAnalyticsVersion = getAnalyticsVertion();\n+        printDebug(KEY_ANALYTICS_FILTER, \"Analytics Version \" + amAnalyticsVersion);\n         if (context.attributes.hasKey(SKIP_ALL_FILTERS) && <boolean>context.attributes[SKIP_ALL_FILTERS]) {\n             printDebug(KEY_ANALYTICS_FILTER, \"Skip all filter annotation set in the service. Skip the filter\");\n             return true;\n         }\n         //Filter only if analytics is enabled.\n         if (isAnalyticsEnabled || isGrpcAnalyticsEnabled) {\n             context.attributes[PROTOCOL_PROPERTY] = caller.protocol;\n-            doFilterRequest(request, context);\n+            doFilterRequest(request, context, amAnalyticsVersion);\n         }\n         return true;\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n+        string amAnalyticsVersion = getAnalyticsVertion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDQyMg=="}, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzgyMjgyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTowNTo0NFrOGx5NrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowNjo0N1rOGx7DvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDc5Nw==", "bodyText": "Let's not call getAnalyticsVertion() method for each request . Save it in a global variable during startup and reuse it", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454970797", "createdAt": "2020-07-15T11:05:44Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -20,19 +20,23 @@ import ballerina/runtime;\n public type AnalyticsRequestFilter object {\n \n     public function filterRequest(http:Caller caller, http:Request request, http:FilterContext context) returns boolean {\n+        string amAnalyticsVersion = getAnalyticsVertion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMTAyMA==", "bodyText": "Fixed in b694c69", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455001020", "createdAt": "2020-07-15T12:06:47Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -20,19 +20,23 @@ import ballerina/runtime;\n public type AnalyticsRequestFilter object {\n \n     public function filterRequest(http:Caller caller, http:Request request, http:FilterContext context) returns boolean {\n+        string amAnalyticsVersion = getAnalyticsVertion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MDc5Nw=="}, "originalCommit": {"oid": "b2e75f7250069ff2c58351c09277ece331ac9425"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNzgyNzg1OnYy", "diffSide": "RIGHT", "path": "distribution/resources/conf/default-micro-gw.conf.template", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMTowNzoyNVrOGx5Q2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxMjowNjozM1rOGx7DUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MTYxMQ==", "bodyText": "Lets use this as stream version, because in APIm analytics 3.3.0 also might have the 3.2.0 streams if there are no changes", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r454971611", "createdAt": "2020-07-15T11:07:25Z", "author": {"login": "Rajith90"}, "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -165,6 +165,8 @@\n \n # Analytics configurations\n [analytics]\n+  # The configured API Manager analytics version\n+  version = \"3.2.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57aeb746a4a51ed215a0f91e28f04bedbb8444c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTAwMDkxNQ==", "bodyText": "Fixed in 4c69077", "url": "https://github.com/wso2/product-microgateway/pull/1319#discussion_r455000915", "createdAt": "2020-07-15T12:06:33Z", "author": {"login": "menakaj"}, "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -165,6 +165,8 @@\n \n # Analytics configurations\n [analytics]\n+  # The configured API Manager analytics version\n+  version = \"3.2.0\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDk3MTYxMQ=="}, "originalCommit": {"oid": "57aeb746a4a51ed215a0f91e28f04bedbb8444c9"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1257, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}