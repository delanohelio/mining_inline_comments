{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NTI4ODI2", "number": 1260, "title": "Add Unit test structure for Envoy mgw oasparser package ", "bodyText": "Purpose\n\nThis will add a unite test for oasparser package in envoy mgw.\nCase 1:\nSituations where you can unit test everything just from the external (Usual scenario)\n\nSo for package xyz, put your test files in package xyz_test (same folder).\nTest file name should be file_test.\n\nCase 2:\nSituations where you cannot unit test everything just from the external( having private variables,struct inside the package). So when you really need to test package internals.\n\nUse the same package as the code under test (e.g. xyz)\nName your test file with the _internal_test.go suffix (so xyz_internal_test.go) to make it explicit and clear that you know these tests are more brittle.\n\nTest resources\nIf your test cases require test resources such as swagger files, apis, create a separate directory called testdata inside the same directory and include the resources.\nTest cases\n\n\nAll the test cases should start with the Prefix Test and after the Test next word first letter should be a capital letter and the parameter should be t *testing.T.\nEx: TestGetresources (t *testing.T)\n\n\nUse a test struct if u have more test cases\nEx:  type somethingTestItem struct { input   string expectedResult  string message string } \n\n\nEx:  Full test case\nfunc TestSomething(t *testing.T) {\n\ttype somethingTestItem struct {\n\t\tinput string\n\t\tresult string\n\t\tmessage string\n\t}\n\tdataItems := []SomethingTestItem {\n\t\t{\n\t\t\tinput: \"input data\",\n\t\t\tresult: \"Expected result\"\n\t\t\tmessage: \"case 1\",  \n\t\t},\n\t\t\n\t}\n\tfor _, item := range dataItems{\n\t\tactual := getHostandBasepathandPort(item.input)\n\n\t\tassert.Equal(t, item.result, actual , item.message)\n\t}\n}\n\nIssues\n\nFixes #1257\nFixes #1255\nAutomation tests\n\nUnit tests added: Yes/No\nIntegration tests added: Yes/No\n\nTested environments\n\nNot Tested\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-06-02T11:38:40Z", "url": "https://github.com/wso2/product-microgateway/pull/1260", "merged": true, "mergeCommit": {"oid": "e0a1e8c46cf3254c20424b76778576c5db895cf9"}, "closed": true, "closedAt": "2020-06-17T19:02:58Z", "author": {"login": "chashikajw"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnTK30AH2gAyNDI2NTI4ODI2OjhjODhhMmRlYjdlMjhhNjg1YjM2NmI4MmM4YTJhOGYxN2I3YTk1ZWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd0xeRxgFqTU3ODkzMDUzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8c88a2deb7e28a685b366b82c8a2a8f17b7a95ec", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/8c88a2deb7e28a685b366b82c8a2a8f17b7a95ec", "committedDate": "2020-06-02T11:29:12Z", "message": "bug fix open api3 vendor extenstion reading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e27f3ed97bed59b3d99d5f3e7d0a0e09f00853", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/b0e27f3ed97bed59b3d99d5f3e7d0a0e09f00853", "committedDate": "2020-06-02T11:29:12Z", "message": "add unit test for oasparser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dabe7a77f74fc2375f11a623b7746c09670c2978", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/dabe7a77f74fc2375f11a623b7746c09670c2978", "committedDate": "2020-06-02T11:29:12Z", "message": "modify testcase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3859237d4896fc92390fe67acc97ed78b2bec008", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/3859237d4896fc92390fe67acc97ed78b2bec008", "committedDate": "2020-06-02T11:29:12Z", "message": "add license to the file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84234247174e44841cc884c60940cf4a97bb0e6b", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/84234247174e44841cc884c60940cf4a97bb0e6b", "committedDate": "2020-06-02T11:29:12Z", "message": "add new line at end of the file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d933f73de10026dbab0cfbbf0944c66d577bb763", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/d933f73de10026dbab0cfbbf0944c66d577bb763", "committedDate": "2020-06-02T11:29:12Z", "message": "add new line at end of the file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "417df1eb19e6cb114d990dbc0cca3873bff4595d", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/417df1eb19e6cb114d990dbc0cca3873bff4595d", "committedDate": "2020-06-02T11:29:12Z", "message": "remove unused struct"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzQ5Mjg5", "url": "https://github.com/wso2/product-microgateway/pull/1260#pullrequestreview-426749289", "createdAt": "2020-06-09T02:35:51Z", "commit": {"oid": "417df1eb19e6cb114d990dbc0cca3873bff4595d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d75db189e887355658c36886768a93634283253d", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/d75db189e887355658c36886768a93634283253d", "committedDate": "2020-06-10T10:39:15Z", "message": "add a seperate package for unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjYxMDgz", "url": "https://github.com/wso2/product-microgateway/pull/1260#pullrequestreview-432661083", "createdAt": "2020-06-17T18:22:24Z", "commit": {"oid": "d75db189e887355658c36886768a93634283253d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24df04047a262d6feda48645b759ad1f953562d5", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/24df04047a262d6feda48645b759ad1f953562d5", "committedDate": "2020-06-17T18:51:03Z", "message": "format the swagger contents"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2589049e46729a16296213f3e904b64eebe5f3e", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/b2589049e46729a16296213f3e904b64eebe5f3e", "committedDate": "2020-06-17T19:01:11Z", "message": "format the swagger contents"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjY3NzI4", "url": "https://github.com/wso2/product-microgateway/pull/1260#pullrequestreview-432667728", "createdAt": "2020-06-17T18:31:45Z", "commit": {"oid": "d75db189e887355658c36886768a93634283253d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozMTo0NVrOGlSEiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxODozMTo0NVrOGlSEiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTc0NjU2OQ==", "bodyText": "Reduce the spacing", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r441746569", "createdAt": "2020-06-17T18:31:45Z", "author": {"login": "menakaj"}, "path": "internal/pkg/oasparser/utills/openApiUtills_test.go", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package utills_test\n+\n+import (\n+\t\"github.com/stretchr/testify/assert\"\n+\t\"github.com/wso2/micro-gw/internal/pkg/oasparser/utills\"\n+\t\"testing\"\n+)\n+\n+func TestFindSwaggerVersion(t *testing.T) {\n+\n+\ttype findSwaggerVersionTestItem struct {\n+\t\tinputSwagger   string\n+\t\tresult  string\n+\t\tmessage string\n+\t}\n+\n+\tdataItems := []findSwaggerVersionTestItem {\n+\t\t{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d75db189e887355658c36886768a93634283253d"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4OTI5MzY5", "url": "https://github.com/wso2/product-microgateway/pull/1260#pullrequestreview-578929369", "createdAt": "2021-01-29T04:15:18Z", "commit": {"oid": "b2589049e46729a16296213f3e904b64eebe5f3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwNDoxNToxOFrOIcUnYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwNDoxNToxOFrOIcUnYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU2ODgwMg==", "bodyText": "If the commented out line is not needed, please remove the empty else block", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r566568802", "createdAt": "2021-01-29T04:15:18Z", "author": {"login": "chathuranga95"}, "path": "internal/pkg/oasparser/models/apiDefinition/openApi.go", "diffHunk": "@@ -34,72 +35,71 @@ func (swagger *MgwSwagger) SetInfoOpenApi(swagger3 openapi3.Swagger) {\n \t\tswagger.title = swagger3.Info.Title\n \t\tswagger.version = swagger3.Info.Version\n \t}\n-\tswagger.vendorExtensible = swagger3.Extensions\n-\tswagger.resources = SetResourcesOpenApi3(swagger3)\n+\n+\tswagger.vendorExtensible = converExtensibletoReadableFormat(swagger3.ExtensionProps)\n+\tswagger.resources = SetResourcesOpenApi(swagger3)\n \n \tif IsServerUrlIsAvailable(swagger3) {\n \t\tfor i, _ := range swagger3.Servers {\n \t\t\tendpoint := getHostandBasepathandPort(swagger3.Servers[i].URL)\n-\t\t\tswagger.productionUrls = append(swagger.productionUrls,endpoint)\n+\t\t\tswagger.productionUrls = append(swagger.productionUrls, endpoint)\n \t\t}\n-\n \t}\n }\n \n func setOperationOpenApi(path string, pathtype string, operation *openapi3.Operation) Resource {\n \tvar resource Resource\n-\tresource = Resource{\n-\t\tpath: path,\n-\t\tpathtype:   pathtype,\n-\t\tiD:      operation.OperationID,\n-\t\tsummary: operation.Summary,\n-\t\t//Schemes: operation.,\n-\t\ttags: operation.Tags,\n-\t\t//Security: operation.Security.,\n-\t\tvendorExtensible: operation.Extensions}\n+\tif operation != nil {\n+\t\tresource = Resource{\n+\t\t\tpath:     path,\n+\t\t\tpathtype: pathtype,\n+\t\t\tiD:       operation.OperationID,\n+\t\t\tsummary:  operation.Summary,\n+\t\t\tdescription: operation.Description,\n+\t\t\t//Schemes: operation.,\n+\t\t\t//tags: operation.Tags,\n+\t\t\t//Security: operation.Security.,\n+\t\t\tvendorExtensible: converExtensibletoReadableFormat(operation.ExtensionProps)}\n+\t}\n \treturn resource\n }\n \n-\n-func SetResourcesOpenApi3(openApi openapi3.Swagger) []Resource {\n+func SetResourcesOpenApi(openApi openapi3.Swagger) []Resource {\n \tvar resources []Resource\n-\n-\tfor path, pathItem := range openApi.Paths {\n-\t\tvar resource Resource\n-\t\tif pathItem.Get != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"get\", pathItem.Get)\n-\t\t} else if pathItem.Post != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"post\", pathItem.Post)\n-\t\t} else if pathItem.Put != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"put\", pathItem.Put)\n-\t\t} else if pathItem.Delete != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"delete\", pathItem.Delete)\n-\t\t} else if pathItem.Head != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"head\", pathItem.Head)\n-\t\t} else if pathItem.Patch != nil {\n-\t\t\tresource = setOperationOpenApi(path, \"patch\", pathItem.Patch)\n-\t\t} else {\n-\t\t\t//resource = setOperation(contxt,\"get\",pathItem.Get)\n+\tif openApi.Paths != nil {\n+\t\tfor path, pathItem := range openApi.Paths {\n+\t\t\tvar resource Resource\n+\t\t\tif pathItem.Get != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"get\", pathItem.Get)\n+\t\t\t} else if pathItem.Post != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"post\", pathItem.Post)\n+\t\t\t} else if pathItem.Put != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"put\", pathItem.Put)\n+\t\t\t} else if pathItem.Delete != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"delete\", pathItem.Delete)\n+\t\t\t} else if pathItem.Head != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"head\", pathItem.Head)\n+\t\t\t} else if pathItem.Patch != nil {\n+\t\t\t\tresource = setOperationOpenApi(path, \"patch\", pathItem.Patch)\n+\t\t\t} else {\n+\t\t\t\t//resource = setOperation(contxt,\"get\",pathItem.Get)\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2589049e46729a16296213f3e904b64eebe5f3e"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4OTI5ODg2", "url": "https://github.com/wso2/product-microgateway/pull/1260#pullrequestreview-578929886", "createdAt": "2021-01-29T04:17:17Z", "commit": {"oid": "b2589049e46729a16296213f3e904b64eebe5f3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwNDoxNzoxOFrOIcUpaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwNDoxNzoxOFrOIcUpaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU2OTMyMw==", "bodyText": "If the commented out line is not needed, please remove the empty else block.\nFix same in other applicable places as well.", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r566569323", "createdAt": "2021-01-29T04:17:18Z", "author": {"login": "chathuranga95"}, "path": "internal/pkg/oasparser/models/apiDefinition/swagger.go", "diffHunk": "@@ -35,45 +35,51 @@ func (swagger *MgwSwagger) SetInfoSwagger(swagger2 spec.Swagger) {\n \n \tif swagger2.Host != \"\" {\n \t\tendpoint := getHostandBasepathandPort(swagger2.Host + swagger2.BasePath)\n-\t\tswagger.productionUrls = append(swagger.productionUrls,endpoint)\n+\t\tswagger.productionUrls = append(swagger.productionUrls, endpoint)\n \t}\n }\n \n func SetResourcesSwagger(swagger2 spec.Swagger) []Resource {\n \tvar resources []Resource\n-\tfor path, _ := range swagger2.Paths.Paths {\n-\t\tvar pathItem = swagger2.Paths.Paths[path].PathItemProps\n-\t\tvar resource Resource\n-\t\tif pathItem.Get != nil {\n-\t\t\tresource = setOperationSwagger(path, \"get\", pathItem.Get)\n-\t\t} else if pathItem.Post != nil {\n-\t\t\tresource = setOperationSwagger(path, \"post\", pathItem.Post)\n-\t\t} else if pathItem.Put != nil {\n-\t\t\tresource = setOperationSwagger(path, \"put\", pathItem.Put)\n-\t\t} else if pathItem.Delete != nil {\n-\t\t\tresource = setOperationSwagger(path, \"delete\", pathItem.Delete)\n-\t\t} else if pathItem.Head != nil {\n-\t\t\tresource = setOperationSwagger(path, \"head\", pathItem.Head)\n-\t\t} else if pathItem.Patch != nil {\n-\t\t\tresource = setOperationSwagger(path, \"patch\", pathItem.Patch)\n-\t\t} else {\n-\t\t\t//resource = setOperation(contxt,\"get\",pathItem.Get)\n+\tif swagger2.Paths != nil {\n+\t\tfor path, _ := range swagger2.Paths.Paths {\n+\t\t\tvar pathItem = swagger2.Paths.Paths[path].PathItemProps\n+\t\t\tvar resource Resource\n+\t\t\tif pathItem.Get != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"get\", pathItem.Get)\n+\t\t\t} else if pathItem.Post != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"post\", pathItem.Post)\n+\t\t\t} else if pathItem.Put != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"put\", pathItem.Put)\n+\t\t\t} else if pathItem.Delete != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"delete\", pathItem.Delete)\n+\t\t\t} else if pathItem.Head != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"head\", pathItem.Head)\n+\t\t\t} else if pathItem.Patch != nil {\n+\t\t\t\tresource = setOperationSwagger(path, \"patch\", pathItem.Patch)\n+\t\t\t} else {\n+\t\t\t\t//resource = setOperation(contxt,\"get\",pathItem.Get)\n+\t\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2589049e46729a16296213f3e904b64eebe5f3e"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc4OTMwNTMy", "url": "https://github.com/wso2/product-microgateway/pull/1260#pullrequestreview-578930532", "createdAt": "2021-01-29T04:19:42Z", "commit": {"oid": "b2589049e46729a16296213f3e904b64eebe5f3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwNDoxOTo0M1rOIcUr-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yOVQwNDoxOTo0M1rOIcUr-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2NjU2OTk3OA==", "bodyText": "Empty if block.", "url": "https://github.com/wso2/product-microgateway/pull/1260#discussion_r566569978", "createdAt": "2021-01-29T04:19:43Z", "author": {"login": "chathuranga95"}, "path": "internal/pkg/oasparser/swaggerOperator/swaggerOperator.go", "diffHunk": "@@ -32,65 +32,73 @@ func GenerateMgwSwagger(location string) ([]apiDefinition.MgwSwagger, error) {\n \n \tfiles, err := ioutil.ReadDir(location)\n \tif err != nil {\n-\t\tlog.Fatal(\"Error reading\",location,\"directory:\", err)\n+\t\tlog.Fatal(\"Error reading\", location, \"directory:\", err)\n \t}\n \n \tfor _, f := range files {\n-\t\tvar mgwSwagger apiDefinition.MgwSwagger\n+\n \t\topenApif, err := os.Open(location + f.Name())\n \n \t\t// if we os.Open returns an error then handle it\n \t\tif err != nil {\n \t\t\tlog.Fatal(\"Error opening a api yaml file:\", err)\n \t\t}\n \t\t//fmt.Println(\"Successfully Opened open api file\",f.Name())\n-\t\tlog.Println(\"Successfully Opened open api file\",f.Name())\n+\t\tlog.Println(\"Successfully Opened open api file\", f.Name())\n \n \t\t// defer the closing of our jsonFile so that we can parse it later on\n \t\tdefer openApif.Close()\n \n \t\t// read our opened jsonFile as a byte array.\n \t\tjsn, _ := ioutil.ReadAll(openApif)\n \n-\t\tapiJsn, err := utills.ToJSON(jsn)\n-\t\tif err != nil {\n-\t\t\t//log.Fatal(\"Error converting api file to json:\", err)\n+\t\tmgwSwagger := GetMgwSwagger(jsn)\n+\t\tmgwSwaggers = append(mgwSwaggers, mgwSwagger)\n \n-\t\t}\n+\t}\n+\treturn mgwSwaggers, err\n+}\n+\n+func GetMgwSwagger(apiContent []byte) apiDefinition.MgwSwagger {\n+\tvar mgwSwagger apiDefinition.MgwSwagger\n \n-\t\tswaggerVerison, err := utills.FindSwaggerVersion(apiJsn)\n+\tapiJsn, err := utills.ToJSON(apiContent)\n+\tif err != nil {\n+\t\t//log.Fatal(\"Error converting api file to json:\", err)\n+\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2589049e46729a16296213f3e904b64eebe5f3e"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1104, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}