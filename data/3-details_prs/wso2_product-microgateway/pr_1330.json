{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5NTgzMTk5", "number": 1330, "title": "Backend JWT generation compatible with OAuth2 flow and API Manager non selfcontained JWT Token", "bodyText": "Purpose\nWith this PR the following improvements are added.\n\nThe backend JWT is generated in the OAuth2 flow as well as the backend JWT flow\nIf the user needs to retrieve user claims from a remote endpoint, there is a separate interface provided for that.\n\nIssues\nFixes #1196\nAutomation tests\n\nUnit tests added: No\nIntegration tests added: No\n\nTested environments\n\nMacOS Mojave\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-07-15T16:08:15Z", "url": "https://github.com/wso2/product-microgateway/pull/1330", "merged": true, "mergeCommit": {"oid": "bb5c73bee1fcccbcffd5706a168fc01d642d1c0b"}, "closed": true, "closedAt": "2020-07-16T15:40:23Z", "author": {"login": "VirajSalaka"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc1NrEygH2gAyNDQ5NTgzMTk5OjlmMjVjOGUyMjUzMGExZDEwZWNmNGQzYTA3ODcwNzQwYWI0MTZiMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1gCeYAFqTQ0OTg5OTU4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9f25c8e22530a1d10ecf4d3a07870740ab416b06", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/9f25c8e22530a1d10ecf4d3a07870740ab416b06", "committedDate": "2020-07-15T16:59:53Z", "message": "Backend JWT generation compatible for OAuth2 and 3.2.0 API Manger JWT Token"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "052b4f92cfec73baad272008ac89899a0fb37364", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/052b4f92cfec73baad272008ac89899a0fb37364", "committedDate": "2020-07-15T15:52:42Z", "message": "Backend JWT generation compatible for OAuth2 and 3.2.0 API Manger JWT Token"}, "afterCommit": {"oid": "9f25c8e22530a1d10ecf4d3a07870740ab416b06", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/9f25c8e22530a1d10ecf4d3a07870740ab416b06", "committedDate": "2020-07-15T16:59:53Z", "message": "Backend JWT generation compatible for OAuth2 and 3.2.0 API Manger JWT Token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62ff7ad8499cd04fb67368a547da5396764f33b9", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/62ff7ad8499cd04fb67368a547da5396764f33b9", "committedDate": "2020-07-16T04:16:47Z", "message": "refactor code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDk2NjA2", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449496606", "createdAt": "2020-07-16T04:21:20Z", "commit": {"oid": "62ff7ad8499cd04fb67368a547da5396764f33b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNDoyMToyMVrOGyZllw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNDoyMToyMVrOGyZllw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUwMTIwNw==", "bodyText": "Move the class loading to jwtgenerator class loading location", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455501207", "createdAt": "2020-07-16T04:21:21Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-cli/src/main/resources/templates/main.mustache", "diffHunk": "@@ -29,6 +29,7 @@ public function main() {\n     gateway:initThrottleDataPublisher();\n     gateway:initGlobalThrottleDataPublisher();\n     gateway:startObservabilityListener();\n+    gateway:loadClaimRetrieverImpl();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ff7ad8499cd04fb67368a547da5396764f33b9"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDk3NzU4", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449497758", "createdAt": "2020-07-16T04:25:37Z", "commit": {"oid": "62ff7ad8499cd04fb67368a547da5396764f33b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNDoyNTozN1rOGyZprQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNDoyNTozN1rOGyZprQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUwMjI1Mw==", "bodyText": "No need to check if map is empty, to provide user the capability to add additional properties to the existing apim credentials", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455502253", "createdAt": "2020-07-16T04:25:37Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/jwt_generator/claim_retriever.bal", "diffHunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/jwt;\n+import ballerina/runtime;\n+\n+boolean claimRetrieveEnabled = true;\n+\n+# To retrieve claims via the user specific claim retrieve implementation.\n+# \n+# + userInfo - Authentication Context of the user, which is provided as input to the claim retriever Implementation\n+# + return - ClaimListDTO if there are any claims added from the user specific implementation\n+function retrieveClaims (UserAuthContextDTO? userInfo) returns @tainted RetrievedUserClaimsListDTO ? {\n+    //if claim retrieve variable is disabled, there is no need to run through the method.\n+    if (!claimRetrieveEnabled) {\n+        return;\n+    }\n+    if (userInfo is UserAuthContextDTO) {\n+        printDebug (CLAIM_RETRIEVER, \"User Auth Context information provided to the claim retrieval implementation : \" +\n+                    userInfo.toString());\n+        RetrievedUserClaimsListDTO? | error claimListDTO = trap retrieveClaimsFromImpl(userInfo);\n+        if (claimListDTO is RetrievedUserClaimsListDTO ) {\n+            printDebug (CLAIM_RETRIEVER, \"Claims List received from the claim retrieval implementation : \" +\n+                        claimListDTO.toString());\n+            return claimListDTO;\n+        } else if (claimListDTO is ()) {\n+            printDebug(CLAIM_RETRIEVER , \"No user claims are received from the claim retrieval implementation\");\n+        } else {\n+            printError(CLAIM_RETRIEVER , \"Error while retrieving user claims from the claim retrieval implementation\",\n+                claimListDTO);\n+        }\n+    }\n+}\n+\n+# To do the class loading operation for the user specific claim retriever implementation.\n+public function loadClaimRetrieverImpl() {\n+    \n+    //todo: bring a configuration if required\n+    if (!isConfigAvailable(JWT_GENERATOR__CLAIM_RETRIEVAL_INSTANCE_ID, JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION)) {\n+        printDebug(CLAIM_RETRIEVER, \"Claim Retrieval related class loading is disabled as the implementation is not provided.\" +  \n+                    \"Hence claim retrieval is disabled\");\n+        claimRetrieveEnabled = false;            \n+        return;\n+    }\n+\n+    string claimRetrieverImplClassName = getConfigValue(JWT_GENERATOR__CLAIM_RETRIEVAL_INSTANCE_ID,\n+                                                        JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION,\n+                                                        DEFAULT_JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION);\n+    map<any> claimRetrieverConfig = getConfigMapValue(JWT_GENERATOR_CLAIM_RETRIEVAL_CONFIGURATION);\n+\n+    if (claimRetrieverConfig.length() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ff7ad8499cd04fb67368a547da5396764f33b9"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NDk4Njg4", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449498688", "createdAt": "2020-07-16T04:29:06Z", "commit": {"oid": "62ff7ad8499cd04fb67368a547da5396764f33b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNDoyOTowNlrOGyZs2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNDoyOTowNlrOGyZs2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUwMzA2NQ==", "bodyText": "Remove this, as it is unused", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455503065", "createdAt": "2020-07-16T04:29:06Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/micro_gw_conf_defaults.bal", "diffHunk": "@@ -186,5 +190,13 @@ public const int DEFAULT_JWT_GENERATOR_TOKEN_EXPIRY = 900000;\n public const string DEFAULT_JWT_GENERATOR_TOKEN_ISSUER = \"wso2.org/products/am\";\n public const string DEFAULT_JWT_GENERATOR_IMPLEMENTATION = \"org.wso2.micro.gateway.jwt.generator.MGWJWTGeneratorImpl\";\n public const boolean DEFAULT_JWT_GENERATOR_TOKEN_CACHE_ENABLED = true;\n+public const string DEFAULT_JWT_GENERATOR_USERNAME = \"admin\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ff7ad8499cd04fb67368a547da5396764f33b9"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTA0MTE4", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449504118", "createdAt": "2020-07-16T04:48:14Z", "commit": {"oid": "62ff7ad8499cd04fb67368a547da5396764f33b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNDo0ODoxNFrOGyZ_Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNDo0ODoxNFrOGyZ_Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUwNzc5OA==", "bodyText": "Move this method as we dont need this unless the backend jwt generation is enabled.", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455507798", "createdAt": "2020-07-16T04:48:14Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "diffHunk": "@@ -95,14 +96,37 @@ public type KeyValidationHandler object {\n                    [authenticationContext, isAllowed] =\n                      validateSubscriptionFromDataStores(credential, clientId, apiName, apiVersion,\n                      self.validateSubscriptions);\n-                    authenticationContext.username = principal?.username ?: USER_NAME_UNKNOWN;\n-                    invocationContext.attributes[AUTHENTICATION_CONTEXT] = authenticationContext;\n-                    invocationContext.attributes[KEY_TYPE_ATTR] = authenticationContext.keyType;\n+                   authenticationContext.username = principal?.username ?: USER_NAME_UNKNOWN;\n+                   invocationContext.attributes[AUTHENTICATION_CONTEXT] = authenticationContext;\n+                   invocationContext.attributes[KEY_TYPE_ATTR] = authenticationContext.keyType;\n+                   if (isAllowed) {\n+                       map<string> apiDetails = createAPIDetailsMap(invocationContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62ff7ad8499cd04fb67368a547da5396764f33b9"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/bc83f918471d1e8365eca5bfb7c08f6cb951ea7c", "committedDate": "2020-07-16T05:22:24Z", "message": "bug fix - oauth2 backend jwt token cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTE3NTIz", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449517523", "createdAt": "2020-07-16T05:31:35Z", "commit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozMTozNVrOGyasHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozMTozNVrOGyasHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxOTI2MA==", "bodyText": "Avoid redundant code", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455519260", "createdAt": "2020-07-16T05:31:35Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/token_introspection_handler.bal", "diffHunk": "@@ -95,14 +96,38 @@ public type KeyValidationHandler object {\n                    [authenticationContext, isAllowed] =\n                      validateSubscriptionFromDataStores(credential, clientId, apiName, apiVersion,\n                      self.validateSubscriptions);\n-                    authenticationContext.username = principal?.username ?: USER_NAME_UNKNOWN;\n-                    invocationContext.attributes[AUTHENTICATION_CONTEXT] = authenticationContext;\n-                    invocationContext.attributes[KEY_TYPE_ATTR] = authenticationContext.keyType;\n+                   authenticationContext.username = principal?.username ?: USER_NAME_UNKNOWN;\n+                   invocationContext.attributes[AUTHENTICATION_CONTEXT] = authenticationContext;\n+                   invocationContext.attributes[KEY_TYPE_ATTR] = authenticationContext.keyType;\n+                   if (isAllowed) {\n+                       boolean enabledJWTGenerator = getConfigBooleanValue(JWT_GENERATOR_ID,\n+                                                                            JWT_GENERATOR_ENABLED,\n+                                                                            DEFAULT_JWT_GENERATOR_ENABLED);\n+                       if (enabledJWTGenerator) {\n+                           string cacheKey = credential + apiName + apiVersion;\n+                           boolean tokenGenStatus = setJWTHeaderForOauth2(req, authenticationContext, cacheKey);\n+                           if (!tokenGenStatus) {\n+                               printError(KEY_AUTHN_FILTER, \"Error while adding the Backend JWT header\");\n+                           }\n+                       }\n+                   }\n                    return isAllowed;    \n                 } else { // Otherwise return the introspection response.\n                     authenticationContext.username = principal?.username ?: USER_NAME_UNKNOWN;\n                     invocationContext.attributes[AUTHENTICATION_CONTEXT] = authenticationContext;\n                     invocationContext.attributes[KEY_TYPE_ATTR] = authenticationContext.keyType;\n+                    if (authenticationResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTE3NjY5", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449517669", "createdAt": "2020-07-16T05:32:00Z", "commit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozMjowMFrOGyaslw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozMjowMFrOGyaslw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUxOTM4Mw==", "bodyText": "Move this to jwt auth handler.", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455519383", "createdAt": "2020-07-16T05:32:00Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/jwt_generator/jwt_gen_util.bal", "diffHunk": "@@ -0,0 +1,204 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/runtime;\n+import ballerina/jwt;\n+import ballerina/http;\n+\n+# Refactoring method for setting JWT header\n+#\n+# + payload - The payload of the authentication token\n+# + req - The `Request` instance.\n+# + cacheKey - key for the jwt generator cache\n+# + enabledCaching - jwt generator caching enabled\n+# + apiDetails - extracted api details for the current api\n+# + remoteUserClaimRetrievalEnabled - true if remoteUserClaimRetrieval is enabled\n+# + return - Returns `true` if the token generation and setting the header completed successfully\n+# or the `AuthenticationError` in case of an error.\n+public function setJWTHeader(jwt:JwtPayload payload,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTE4NjMw", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449518630", "createdAt": "2020-07-16T05:34:48Z", "commit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozNDo0OFrOGyavpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozNDo0OFrOGyavpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyMDE2Nw==", "bodyText": "rename both method and dto to : userClamimRetrieverContext", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455520167", "createdAt": "2020-07-16T05:34:48Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/jwt_generator/claim_retriever.bal", "diffHunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/jwt;\n+import ballerina/runtime;\n+\n+boolean claimRetrieveEnabled = true;\n+\n+# To retrieve claims via the user specific claim retrieve implementation.\n+# \n+# + userInfo - Authentication Context of the user, which is provided as input to the claim retriever Implementation\n+# + return - ClaimListDTO if there are any claims added from the user specific implementation\n+function retrieveClaims (UserAuthContextDTO? userInfo) returns @tainted RetrievedUserClaimsListDTO ? {\n+    //if claim retrieve variable is disabled, there is no need to run through the method.\n+    if (!claimRetrieveEnabled) {\n+        return;\n+    }\n+    if (userInfo is UserAuthContextDTO) {\n+        printDebug (CLAIM_RETRIEVER, \"User Auth Context information provided to the claim retrieval implementation : \" +\n+                    userInfo.toString());\n+        RetrievedUserClaimsListDTO? | error claimListDTO = trap retrieveClaimsFromImpl(userInfo);\n+        if (claimListDTO is RetrievedUserClaimsListDTO ) {\n+            printDebug (CLAIM_RETRIEVER, \"Claims List received from the claim retrieval implementation : \" +\n+                        claimListDTO.toString());\n+            return claimListDTO;\n+        } else if (claimListDTO is ()) {\n+            printDebug(CLAIM_RETRIEVER , \"No user claims are received from the claim retrieval implementation\");\n+        } else {\n+            printError(CLAIM_RETRIEVER , \"Error while retrieving user claims from the claim retrieval implementation\",\n+                claimListDTO);\n+        }\n+    }\n+}\n+\n+# To do the class loading operation for the user specific claim retriever implementation.\n+public function loadClaimRetrieverImpl() {\n+    \n+    //todo: bring a configuration if required\n+    if (!isConfigAvailable(JWT_GENERATOR__CLAIM_RETRIEVAL_INSTANCE_ID, JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION)) {\n+        printDebug(CLAIM_RETRIEVER, \"Claim Retrieval related class loading is disabled as the implementation is not provided.\" +  \n+                    \"Hence claim retrieval is disabled\");\n+        claimRetrieveEnabled = false;            \n+        return;\n+    }\n+\n+    string claimRetrieverImplClassName = getConfigValue(JWT_GENERATOR__CLAIM_RETRIEVAL_INSTANCE_ID,\n+                                                        JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION,\n+                                                        DEFAULT_JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION);\n+    map<any> claimRetrieverConfig = getConfigMapValue(JWT_GENERATOR_CLAIM_RETRIEVAL_CONFIGURATION);\n+\n+    if (claimRetrieverConfig.length() == 0) {\n+        string username = getConfigValue(APIM_CREDENTIALS_INSTANCE_ID, APIM_CREDENTIALS_USERNAME,\n+                            DEFAULT_APIM_CREDENTIALS_USERNAME);\n+        string password = getConfigValue(APIM_CREDENTIALS_INSTANCE_ID, APIM_CREDENTIALS_PASSWORD,\n+                            DEFAULT_APIM_CREDENTIALS_PASSWORD);\n+        string keyManagerURL = getConfigValue(KM_CONF_INSTANCE_ID, KM_SERVER_URL, DEFAULT_KM_SERVER_URL);\n+        claimRetrieverConfig[APIM_CREDENTIALS_USERNAME] = username;\n+        claimRetrieverConfig[APIM_CREDENTIALS_PASSWORD] = password;\n+        claimRetrieverConfig[KM_SERVER_URL] = keyManagerURL;\n+    }\n+\n+    boolean claimRetrieveClassLoaded =\n+                        loadClaimRetrieverClass(claimRetrieverImplClassName, claimRetrieverConfig);\n+    if (claimRetrieveClassLoaded) {\n+        printDebug(CLAIM_RETRIEVER, \"JWT Claim Retriever Classloading is successful.\");\n+    } else {\n+        printError(CLAIM_RETRIEVER, \"Claim Retriever classloading is failed. Hence claim retrieval process is disabled\");\n+        //If the classloading is failed, the configuration is set to disabled.\n+        claimRetrieveEnabled = false;\n+    }\n+}\n+\n+# Populate the DTO required for the claim retrieval implementation from authContext and principal component.\n+# \n+# + authContext - Authentication Context\n+# + principal - Principal component\n+# + return - populated UserAuthContextDTO\n+function generateAuthContextInfoFromPrincipal(AuthenticationContext authContext, runtime:Principal principal)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTE4OTMy", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449518932", "createdAt": "2020-07-16T05:35:37Z", "commit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozNTozN1rOGyaw0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTozNTozN1rOGyaw0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyMDQ2Nw==", "bodyText": "opaque", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455520467", "createdAt": "2020-07-16T05:35:37Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/jwt_generator/claim_retriever.bal", "diffHunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/jwt;\n+import ballerina/runtime;\n+\n+boolean claimRetrieveEnabled = true;\n+\n+# To retrieve claims via the user specific claim retrieve implementation.\n+# \n+# + userInfo - Authentication Context of the user, which is provided as input to the claim retriever Implementation\n+# + return - ClaimListDTO if there are any claims added from the user specific implementation\n+function retrieveClaims (UserAuthContextDTO? userInfo) returns @tainted RetrievedUserClaimsListDTO ? {\n+    //if claim retrieve variable is disabled, there is no need to run through the method.\n+    if (!claimRetrieveEnabled) {\n+        return;\n+    }\n+    if (userInfo is UserAuthContextDTO) {\n+        printDebug (CLAIM_RETRIEVER, \"User Auth Context information provided to the claim retrieval implementation : \" +\n+                    userInfo.toString());\n+        RetrievedUserClaimsListDTO? | error claimListDTO = trap retrieveClaimsFromImpl(userInfo);\n+        if (claimListDTO is RetrievedUserClaimsListDTO ) {\n+            printDebug (CLAIM_RETRIEVER, \"Claims List received from the claim retrieval implementation : \" +\n+                        claimListDTO.toString());\n+            return claimListDTO;\n+        } else if (claimListDTO is ()) {\n+            printDebug(CLAIM_RETRIEVER , \"No user claims are received from the claim retrieval implementation\");\n+        } else {\n+            printError(CLAIM_RETRIEVER , \"Error while retrieving user claims from the claim retrieval implementation\",\n+                claimListDTO);\n+        }\n+    }\n+}\n+\n+# To do the class loading operation for the user specific claim retriever implementation.\n+public function loadClaimRetrieverImpl() {\n+    \n+    //todo: bring a configuration if required\n+    if (!isConfigAvailable(JWT_GENERATOR__CLAIM_RETRIEVAL_INSTANCE_ID, JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION)) {\n+        printDebug(CLAIM_RETRIEVER, \"Claim Retrieval related class loading is disabled as the implementation is not provided.\" +  \n+                    \"Hence claim retrieval is disabled\");\n+        claimRetrieveEnabled = false;            \n+        return;\n+    }\n+\n+    string claimRetrieverImplClassName = getConfigValue(JWT_GENERATOR__CLAIM_RETRIEVAL_INSTANCE_ID,\n+                                                        JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION,\n+                                                        DEFAULT_JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION);\n+    map<any> claimRetrieverConfig = getConfigMapValue(JWT_GENERATOR_CLAIM_RETRIEVAL_CONFIGURATION);\n+\n+    if (claimRetrieverConfig.length() == 0) {\n+        string username = getConfigValue(APIM_CREDENTIALS_INSTANCE_ID, APIM_CREDENTIALS_USERNAME,\n+                            DEFAULT_APIM_CREDENTIALS_USERNAME);\n+        string password = getConfigValue(APIM_CREDENTIALS_INSTANCE_ID, APIM_CREDENTIALS_PASSWORD,\n+                            DEFAULT_APIM_CREDENTIALS_PASSWORD);\n+        string keyManagerURL = getConfigValue(KM_CONF_INSTANCE_ID, KM_SERVER_URL, DEFAULT_KM_SERVER_URL);\n+        claimRetrieverConfig[APIM_CREDENTIALS_USERNAME] = username;\n+        claimRetrieverConfig[APIM_CREDENTIALS_PASSWORD] = password;\n+        claimRetrieverConfig[KM_SERVER_URL] = keyManagerURL;\n+    }\n+\n+    boolean claimRetrieveClassLoaded =\n+                        loadClaimRetrieverClass(claimRetrieverImplClassName, claimRetrieverConfig);\n+    if (claimRetrieveClassLoaded) {\n+        printDebug(CLAIM_RETRIEVER, \"JWT Claim Retriever Classloading is successful.\");\n+    } else {\n+        printError(CLAIM_RETRIEVER, \"Claim Retriever classloading is failed. Hence claim retrieval process is disabled\");\n+        //If the classloading is failed, the configuration is set to disabled.\n+        claimRetrieveEnabled = false;\n+    }\n+}\n+\n+# Populate the DTO required for the claim retrieval implementation from authContext and principal component.\n+# \n+# + authContext - Authentication Context\n+# + principal - Principal component\n+# + return - populated UserAuthContextDTO\n+function generateAuthContextInfoFromPrincipal(AuthenticationContext authContext, runtime:Principal principal)\n+        returns UserAuthContextDTO {\n+    UserAuthContextDTO userAuthContextDTO = {};\n+    userAuthContextDTO.username = principal?.username ?: UNKNOWN_VALUE;\n+    userAuthContextDTO.token_type = \"oauth2\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTIwMjk5", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449520299", "createdAt": "2020-07-16T05:40:05Z", "commit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTo0MDowNVrOGya1Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTo0MDowNVrOGya1Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyMTYzOQ==", "bodyText": "avoid config reading inside methods.", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455521639", "createdAt": "2020-07-16T05:40:05Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/jwt_generator/claim_retriever.bal", "diffHunk": "@@ -0,0 +1,136 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/jwt;\n+import ballerina/runtime;\n+\n+boolean claimRetrieveEnabled = true;\n+\n+# To retrieve claims via the user specific claim retrieve implementation.\n+# \n+# + userInfo - Authentication Context of the user, which is provided as input to the claim retriever Implementation\n+# + return - ClaimListDTO if there are any claims added from the user specific implementation\n+function retrieveClaims (UserAuthContextDTO? userInfo) returns @tainted RetrievedUserClaimsListDTO ? {\n+    //if claim retrieve variable is disabled, there is no need to run through the method.\n+    if (!claimRetrieveEnabled) {\n+        return;\n+    }\n+    if (userInfo is UserAuthContextDTO) {\n+        printDebug (CLAIM_RETRIEVER, \"User Auth Context information provided to the claim retrieval implementation : \" +\n+                    userInfo.toString());\n+        RetrievedUserClaimsListDTO? | error claimListDTO = trap retrieveClaimsFromImpl(userInfo);\n+        if (claimListDTO is RetrievedUserClaimsListDTO ) {\n+            printDebug (CLAIM_RETRIEVER, \"Claims List received from the claim retrieval implementation : \" +\n+                        claimListDTO.toString());\n+            return claimListDTO;\n+        } else if (claimListDTO is ()) {\n+            printDebug(CLAIM_RETRIEVER , \"No user claims are received from the claim retrieval implementation\");\n+        } else {\n+            printError(CLAIM_RETRIEVER , \"Error while retrieving user claims from the claim retrieval implementation\",\n+                claimListDTO);\n+        }\n+    }\n+}\n+\n+# To do the class loading operation for the user specific claim retriever implementation.\n+public function loadClaimRetrieverImpl() {\n+    \n+    //todo: bring a configuration if required\n+    if (!isConfigAvailable(JWT_GENERATOR__CLAIM_RETRIEVAL_INSTANCE_ID, JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION)) {\n+        printDebug(CLAIM_RETRIEVER, \"Claim Retrieval related class loading is disabled as the implementation is not provided.\" +  \n+                    \"Hence claim retrieval is disabled\");\n+        claimRetrieveEnabled = false;            \n+        return;\n+    }\n+\n+    string claimRetrieverImplClassName = getConfigValue(JWT_GENERATOR__CLAIM_RETRIEVAL_INSTANCE_ID,\n+                                                        JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION,\n+                                                        DEFAULT_JWT_GENERATOR_CLAIM_RETRIEVAL_IMPLEMENTATION);\n+    map<any> claimRetrieverConfig = getConfigMapValue(JWT_GENERATOR_CLAIM_RETRIEVAL_CONFIGURATION);\n+\n+    if (claimRetrieverConfig.length() == 0) {\n+        string username = getConfigValue(APIM_CREDENTIALS_INSTANCE_ID, APIM_CREDENTIALS_USERNAME,\n+                            DEFAULT_APIM_CREDENTIALS_USERNAME);\n+        string password = getConfigValue(APIM_CREDENTIALS_INSTANCE_ID, APIM_CREDENTIALS_PASSWORD,\n+                            DEFAULT_APIM_CREDENTIALS_PASSWORD);\n+        string keyManagerURL = getConfigValue(KM_CONF_INSTANCE_ID, KM_SERVER_URL, DEFAULT_KM_SERVER_URL);\n+        claimRetrieverConfig[APIM_CREDENTIALS_USERNAME] = username;\n+        claimRetrieverConfig[APIM_CREDENTIALS_PASSWORD] = password;\n+        claimRetrieverConfig[KM_SERVER_URL] = keyManagerURL;\n+    }\n+\n+    boolean claimRetrieveClassLoaded =\n+                        loadClaimRetrieverClass(claimRetrieverImplClassName, claimRetrieverConfig);\n+    if (claimRetrieveClassLoaded) {\n+        printDebug(CLAIM_RETRIEVER, \"JWT Claim Retriever Classloading is successful.\");\n+    } else {\n+        printError(CLAIM_RETRIEVER, \"Claim Retriever classloading is failed. Hence claim retrieval process is disabled\");\n+        //If the classloading is failed, the configuration is set to disabled.\n+        claimRetrieveEnabled = false;\n+    }\n+}\n+\n+# Populate the DTO required for the claim retrieval implementation from authContext and principal component.\n+# \n+# + authContext - Authentication Context\n+# + principal - Principal component\n+# + return - populated UserAuthContextDTO\n+function generateAuthContextInfoFromPrincipal(AuthenticationContext authContext, runtime:Principal principal)\n+        returns UserAuthContextDTO {\n+    UserAuthContextDTO userAuthContextDTO = {};\n+    userAuthContextDTO.username = principal?.username ?: UNKNOWN_VALUE;\n+    userAuthContextDTO.token_type = \"oauth2\";\n+    userAuthContextDTO.issuer = getConfigValue(KM_CONF_INSTANCE_ID, KM_CONF_ISSUER, DEFAULT_KM_CONF_ISSUER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NTI1OTAx", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449525901", "createdAt": "2020-07-16T05:55:51Z", "commit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTo1NTo1MlrOGybH6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNTo1NTo1MlrOGybH6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTUyNjM3OA==", "bodyText": "state that bydefault this is not occupied", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455526378", "createdAt": "2020-07-16T05:55:52Z", "author": {"login": "VirajSalaka"}, "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -446,6 +454,12 @@\n   audience=[\"http://org.wso2.apimgt/gateway\"]\n   # JWT token generator implementation\n   generatorImpl=\"org.wso2.micro.gateway.jwt.generator.MGWJWTGeneratorImpl\"\n+  [jwtGeneratorConfig.claimRetrieval]\n+      //todo: add the sample implementation to retrieve claims from API Manager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc83f918471d1e8365eca5bfb7c08f6cb951ea7c"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d4ffae1d6bc16bba150d18fc8373f281bd6cd8a", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/9d4ffae1d6bc16bba150d18fc8373f281bd6cd8a", "committedDate": "2020-07-16T06:40:11Z", "message": "refactor code : move jwt generator related methods jwt handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef72eb408eb0e739ce7f2aac4d43f0e561ecb829", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/ef72eb408eb0e739ce7f2aac4d43f0e561ecb829", "committedDate": "2020-07-16T09:08:02Z", "message": "bug fix: jwt token cache is not used in the opaque token flow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e06fef81fe43fa70e764a4b3fb28c50cd30c5c9a", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/e06fef81fe43fa70e764a4b3fb28c50cd30c5c9a", "committedDate": "2020-07-16T09:45:33Z", "message": "add KM issuer read operation to the Token Introspection handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f3b06d42c2b07393d5499571e2914c9b5f28578", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/0f3b06d42c2b07393d5499571e2914c9b5f28578", "committedDate": "2020-07-16T10:32:58Z", "message": "refactor code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2609eccb10e14b140a9ea637c5587ba5acf3bdf7", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/2609eccb10e14b140a9ea637c5587ba5acf3bdf7", "committedDate": "2020-07-16T10:07:14Z", "message": "refactor code"}, "afterCommit": {"oid": "0f3b06d42c2b07393d5499571e2914c9b5f28578", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/0f3b06d42c2b07393d5499571e2914c9b5f28578", "committedDate": "2020-07-16T10:32:58Z", "message": "refactor code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5NzI1MTIz", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449725123", "createdAt": "2020-07-16T10:35:34Z", "commit": {"oid": "0f3b06d42c2b07393d5499571e2914c9b5f28578"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDozNTozNFrOGylI2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDozNTozNFrOGylI2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY5MDQ1Ng==", "bodyText": "Do we need this config at provider level. Can't we have it only in handler level", "url": "https://github.com/wso2/product-microgateway/pull/1330#discussion_r455690456", "createdAt": "2020-07-16T10:35:34Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -40,20 +41,23 @@ public type JwtAuthProvider object {\n     public string className;\n     public boolean classLoaded;\n     public APIGatewayCache gatewayCache = new;\n+    public boolean remoteUserClaimRetrievalEnabled = false;\n \n     # Provides authentication based on the provided JWT token.\n     #\n     # + jwtValidatorConfig - JWT validator configurations\n     # + subscriptionValEnabled - Validate subscription\n+    # + remoteUserClaimRetrievalEnabled - true if the remote user claim retrieval is required\n     public function __init(jwt:JwtValidatorConfig jwtValidatorConfig, boolean subscriptionValEnabled, string consumerKeyClaim,\n-        map<anydata>[] | error claims, string className, boolean classLoaded) {\n+        map<anydata>[] | error claims, string className, boolean classLoaded, boolean remoteUserClaimRetrievalEnabled) {\n         self.jwtValidatorConfig = jwtValidatorConfig;\n         self.inboundJwtAuthProvider = new (jwtValidatorConfig);\n         self.subscriptionValEnabled = subscriptionValEnabled;\n         self.consumerKeyClaim = consumerKeyClaim;\n         self.claims = claims;\n         self.className = className;\n         self.classLoaded = classLoaded;\n+        self.remoteUserClaimRetrievalEnabled = remoteUserClaimRetrievalEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f3b06d42c2b07393d5499571e2914c9b5f28578"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ5ODk5NTg0", "url": "https://github.com/wso2/product-microgateway/pull/1330#pullrequestreview-449899584", "createdAt": "2020-07-16T14:23:44Z", "commit": {"oid": "0f3b06d42c2b07393d5499571e2914c9b5f28578"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1123, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}