{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NzE0Mzc5", "number": 1416, "title": "Add changes for validating a JWT token.", "bodyText": "Purpose\nThis PR will add changes to validate a JWT token in java filter chain.\nIssues\n\nFixes #\nAutomation tests\n\nUnit tests added: Yes/No\nIntegration tests added: Yes/No\n\nTested environments\n\nNot Tested\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-09-19T11:30:03Z", "url": "https://github.com/wso2/product-microgateway/pull/1416", "merged": true, "mergeCommit": {"oid": "dd25e7be46bca65731330ab7bd1ceef81ccb973c"}, "closed": true, "closedAt": "2020-09-21T08:36:17Z", "author": {"login": "ShalkiWenushika"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKYYWoAH2gAyNDg5NzE0Mzc5OjU4YzI3MzhjNDg1N2MyM2RiNGUyMTc4OWFmMmNjYzJmYzk5NTcxYzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdK_OWJAFqTQ5MjM4MDY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "58c2738c4857c23db4e21789af2ccc2fc99571c4", "author": {"user": {"login": "ShalkiWenushika", "name": "Shalki Wenushika"}}, "url": "https://github.com/wso2/product-microgateway/commit/58c2738c4857c23db4e21789af2ccc2fc99571c4", "committedDate": "2020-09-19T11:20:48Z", "message": "Add changes for validating a JWT Token"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39ee12ca9c13f3a4723c6e0ba8a1842cb831aca6", "author": {"user": {"login": "ShalkiWenushika", "name": "Shalki Wenushika"}}, "url": "https://github.com/wso2/product-microgateway/commit/39ee12ca9c13f3a4723c6e0ba8a1842cb831aca6", "committedDate": "2020-09-19T11:24:08Z", "message": "Correct formatting change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMDAyNTQ1", "url": "https://github.com/wso2/product-microgateway/pull/1416#pullrequestreview-492002545", "createdAt": "2020-09-19T14:35:21Z", "commit": {"oid": "39ee12ca9c13f3a4723c6e0ba8a1842cb831aca6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNDozNToyMVrOHUsM7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNDozNToyMVrOHUsM7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ1Nzc3NA==", "bodyText": "Need to add a proper logging library", "url": "https://github.com/wso2/product-microgateway/pull/1416#discussion_r491457774", "createdAt": "2020-09-19T14:35:21Z", "author": {"login": "Rajith90"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.mgw.filterchain.JWTValidator;\n+\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.JWSVerifier;\n+import com.nimbusds.jose.crypto.RSASSAVerifier;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.interfaces.RSAPublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.text.ParseException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import com.nimbusds.jose.JOSEException;\n+import com.nimbusds.jose.JWSHeader;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTParser;\n+import com.nimbusds.jwt.SignedJWT;\n+\n+public class JWTValidator{\n+    //validate JWT token\n+    public static boolean validateToken () {\n+        boolean valid = false;\n+        HashMap<String, String> request = new HashMap<String, String>();\n+        request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n+        for (Map.Entry mapElement : request.entrySet()) {\n+            String key = (String) mapElement.getKey();\n+            if (key == JWTConstants.AUTHORIZATION) {\n+                valid = HandleJWT(request);\n+                break;\n+            }\n+        }\n+        return valid;\n+    }\n+    //handle JWT token\n+    public static boolean HandleJWT(HashMap<String, String> requestAttributes){\n+        String accessToken = requestAttributes.get(JWTConstants.AUTHORIZATION);\n+        String[] tokenContent = accessToken.split(\"\\\\.\");\n+\n+        if(tokenContent.length != 3){\n+            System.out.println(\"Invalid JWT token received, token must have 3 parts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39ee12ca9c13f3a4723c6e0ba8a1842cb831aca6"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMDAyNTg2", "url": "https://github.com/wso2/product-microgateway/pull/1416#pullrequestreview-492002586", "createdAt": "2020-09-19T14:36:00Z", "commit": {"oid": "39ee12ca9c13f3a4723c6e0ba8a1842cb831aca6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNDozNjowMFrOHUsN0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQxNDozNjowMFrOHUsN0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTQ1ODAwMA==", "bodyText": "Lets do this once, not at every request", "url": "https://github.com/wso2/product-microgateway/pull/1416#discussion_r491458000", "createdAt": "2020-09-19T14:36:00Z", "author": {"login": "Rajith90"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.mgw.filterchain.JWTValidator;\n+\n+import com.nimbusds.jose.JWSAlgorithm;\n+import com.nimbusds.jose.JWSVerifier;\n+import com.nimbusds.jose.crypto.RSASSAVerifier;\n+import java.io.BufferedReader;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.interfaces.RSAPublicKey;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.text.ParseException;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.Map;\n+import com.nimbusds.jose.JOSEException;\n+import com.nimbusds.jose.JWSHeader;\n+import com.nimbusds.jwt.JWTClaimsSet;\n+import com.nimbusds.jwt.JWTParser;\n+import com.nimbusds.jwt.SignedJWT;\n+\n+public class JWTValidator{\n+    //validate JWT token\n+    public static boolean validateToken () {\n+        boolean valid = false;\n+        HashMap<String, String> request = new HashMap<String, String>();\n+        request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n+        for (Map.Entry mapElement : request.entrySet()) {\n+            String key = (String) mapElement.getKey();\n+            if (key == JWTConstants.AUTHORIZATION) {\n+                valid = HandleJWT(request);\n+                break;\n+            }\n+        }\n+        return valid;\n+    }\n+    //handle JWT token\n+    public static boolean HandleJWT(HashMap<String, String> requestAttributes){\n+        String accessToken = requestAttributes.get(JWTConstants.AUTHORIZATION);\n+        String[] tokenContent = accessToken.split(\"\\\\.\");\n+\n+        if(tokenContent.length != 3){\n+            System.out.println(\"Invalid JWT token received, token must have 3 parts\");\n+        }\n+        String signedContent = tokenContent[0] + \".\" + tokenContent[1];\n+        //System.out.println(signedContent);\n+        boolean isVerified = validateSignature(accessToken, tokenContent[2]);\n+        if(isVerified){\n+            System.out.println(\"JWT Token is valid\");\n+        } else {\n+            System.out.println(\"JWT Token is not valid\");\n+        }\n+        return isVerified;\n+    }\n+\n+    // validate the signature\n+    public static boolean validateSignature(String jwtToken, String signature){\n+        System.out.println(\"Inside validateSignature\");\n+        JWSHeader header;\n+        JWTClaimsSet payload = null;\n+        SignedJWT parsedJWTToken;\n+        boolean isVerified = false;\n+        try{\n+            parsedJWTToken = (SignedJWT) JWTParser.parse(jwtToken);\n+            isVerified = verifyTokenSignature(parsedJWTToken);\n+        }catch (ParseException e) {\n+            System.out.println(\"Invalid JWT token. Failed to decode the token.\");\n+        }\n+        return isVerified;\n+    }\n+\n+    public static boolean verifyTokenSignature(SignedJWT parsedJWTToken) {\n+        RSAPublicKey publicKey = readPublicKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "39ee12ca9c13f3a4723c6e0ba8a1842cb831aca6"}, "originalPosition": 93}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d1c16d1ec37d0769b29beb64b4ed486b9553b3e", "author": {"user": {"login": "ShalkiWenushika", "name": "Shalki Wenushika"}}, "url": "https://github.com/wso2/product-microgateway/commit/9d1c16d1ec37d0769b29beb64b4ed486b9553b3e", "committedDate": "2020-09-20T06:46:34Z", "message": "Add changes to read public key only once"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyMzgwNjcw", "url": "https://github.com/wso2/product-microgateway/pull/1416#pullrequestreview-492380670", "createdAt": "2020-09-21T08:36:10Z", "commit": {"oid": "9d1c16d1ec37d0769b29beb64b4ed486b9553b3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 966, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}