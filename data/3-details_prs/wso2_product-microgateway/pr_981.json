{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNTI4NDE2", "number": 981, "title": "Restructure distribution for jballerina", "bodyText": "Purpose\n\nWith jballerina upgrade the need of ballerina runtime goes away. Therefore need of having a separate runtime component and its content changes. This PR will restructure the runtime distribution and the build process to generate the new ballerina artifacts.\nIssues\n\nFixes #943\nAutomation tests\n\nUnit tests added: No\nIntegration tests added: No\n\nTested environments\n\n\nMacOS Catalina\nWindows server 2016\n\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-02-11T08:29:12Z", "url": "https://github.com/wso2/product-microgateway/pull/981", "merged": true, "mergeCommit": {"oid": "be373002bf578e0b32e6f720393fd1cdcc4c9174"}, "closed": true, "closedAt": "2020-02-11T11:11:03Z", "author": {"login": "praminda"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7OBsfgH2gAyMzczNTI4NDE2OjVlOGZjMDU4MGI2N2M1M2Q1NDUwNzcxNjI2MTIyNTc2NGJhMGY5Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDOZRoAH2gAyMzczNTI4NDE2OmFmOTRhY2Y5ODVlY2E1NTdhMTc3Yjg0MzkwYTUwNDFiZGMyOWUwNTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5e8fc0580b67c53d54507716261225764ba0f967", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/5e8fc0580b67c53d54507716261225764ba0f967", "committedDate": "2020-01-17T12:36:59Z", "message": "remove unnecessary items from toolkit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "227ac0aff98b2f94ab6e2245e2675dcbbe2d347b", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/227ac0aff98b2f94ab6e2245e2675dcbbe2d347b", "committedDate": "2020-01-21T06:46:08Z", "message": "restructure the runtime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b33f36719fc4f04ef5ac861bd63ec58d7b56c3", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/24b33f36719fc4f04ef5ac861bd63ec58d7b56c3", "committedDate": "2020-01-21T06:46:49Z", "message": "Merge branch 'master' of https://github.com/wso2/product-microgateway into restructure-jbal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9724977d61d59bffe0ea4592c779ea35f2d7f28a", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/9724977d61d59bffe0ea4592c779ea35f2d7f28a", "committedDate": "2020-01-22T08:20:41Z", "message": "restructure the bash file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fad6e2eeedc5c12668982284cc65591f14523ae", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/4fad6e2eeedc5c12668982284cc65591f14523ae", "committedDate": "2020-01-22T08:25:57Z", "message": "comment out distributed throttling test case temporarily"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb0aa601bf5c672db1663d7f64d6b805858f377b", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/bb0aa601bf5c672db1663d7f64d6b805858f377b", "committedDate": "2020-01-27T05:14:07Z", "message": "Update distribution/src/main/assembly/gw_runtimes/gw_runtime_windows.xml\n\nCo-Authored-By: Praminda <pramindabj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20392f61730afad2cb450374c9de1f073c01367f", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/20392f61730afad2cb450374c9de1f073c01367f", "committedDate": "2020-01-27T05:14:15Z", "message": "Update distribution/src/main/assembly/gw_runtimes/gw_runtime_macos.xml\n\nCo-Authored-By: Praminda <pramindabj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90b827628e0eae96302b49b221e2c08178176f08", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/90b827628e0eae96302b49b221e2c08178176f08", "committedDate": "2020-01-27T05:14:22Z", "message": "Update distribution/src/main/assembly/gw_runtimes/gw_runtime.xml\n\nCo-Authored-By: Praminda <pramindabj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7130d3b246a3f08c204f26fb87add550b854f01", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/c7130d3b246a3f08c204f26fb87add550b854f01", "committedDate": "2020-01-27T05:15:17Z", "message": "Update distribution/src/main/assembly/gw_runtimes/gw_runtime_linux.xml\n\nCo-Authored-By: Praminda <pramindabj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62a6d2bf50f6c2e6cb98f570167282b4d47578fc", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/62a6d2bf50f6c2e6cb98f570167282b4d47578fc", "committedDate": "2020-01-27T05:16:41Z", "message": "Update distribution/resources/bin/gateway\n\nCo-Authored-By: Praminda <pramindabj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31bd87285d38d9ab4cfb35572272b9eb10e7f5b1", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/31bd87285d38d9ab4cfb35572272b9eb10e7f5b1", "committedDate": "2020-01-27T05:27:36Z", "message": "Update distribution/resources/bin/gateway\n\nCo-Authored-By: Praminda <pramindabj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97574fc3c6b0d8e9e01d91c2325b9d750afc6c7c", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/97574fc3c6b0d8e9e01d91c2325b9d750afc6c7c", "committedDate": "2020-01-27T05:27:58Z", "message": "Update distribution/resources/bin/gateway\n\nCo-Authored-By: Praminda <pramindabj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f10fb73078b9661fc291ea975e9f6702429a2f6b", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/f10fb73078b9661fc291ea975e9f6702429a2f6b", "committedDate": "2020-01-27T05:28:08Z", "message": "Update distribution/resources/bin/gateway\n\nCo-Authored-By: Praminda <pramindabj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "116f0fd4d3555cbdb80bb171f38b71587dc95692", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/116f0fd4d3555cbdb80bb171f38b71587dc95692", "committedDate": "2020-01-27T06:19:20Z", "message": "fix commented issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94a724d3ba8f79d677f4d2d3ec1e94125ec01db1", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/94a724d3ba8f79d677f4d2d3ec1e94125ec01db1", "committedDate": "2020-01-27T06:48:38Z", "message": "provide proper error message during stop command if no gateway is running"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee002a57923994065b743410db14e25ac065a88b", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/ee002a57923994065b743410db14e25ac065a88b", "committedDate": "2020-01-27T06:56:40Z", "message": "fix commented issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed2370fb0cb33239d6773165f0a54bfe9468b394", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/ed2370fb0cb33239d6773165f0a54bfe9468b394", "committedDate": "2020-01-27T08:00:58Z", "message": "remove factory path"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "590d7586857c69ae708328724d3cdbef8740521d", "author": {"user": {"login": "praminda", "name": "Praminda"}}, "url": "https://github.com/wso2/product-microgateway/commit/590d7586857c69ae708328724d3cdbef8740521d", "committedDate": "2020-01-27T09:16:23Z", "message": "Merge pull request #944 from VirajSalaka/restructure-jbal\n\nRestructure jballerina runtime and toolkit distribution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1f4a1687903533ecca7c7592af25f8b6c77bcf6", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/e1f4a1687903533ecca7c7592af25f8b6c77bcf6", "committedDate": "2020-01-28T05:38:23Z", "message": "Basic image is created"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bd358ab80e3d384adf83efd8174179679e2249e", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/8bd358ab80e3d384adf83efd8174179679e2249e", "committedDate": "2020-01-29T09:43:42Z", "message": "apim 2.6 configs and JAVA_OPTS gc variables"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b57e66fda054ad67bedd4f8a98706a67e52e76", "author": {"user": {"login": "praminda", "name": "Praminda"}}, "url": "https://github.com/wso2/product-microgateway/commit/d1b57e66fda054ad67bedd4f8a98706a67e52e76", "committedDate": "2020-01-31T10:39:41Z", "message": "script: Add missing build outputs\n\nImproves #687"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f944f20f6b95e9347611f7675f9a2821439521df", "author": {"user": {"login": "praminda", "name": "Praminda"}}, "url": "https://github.com/wso2/product-microgateway/commit/f944f20f6b95e9347611f7675f9a2821439521df", "committedDate": "2020-01-31T11:13:35Z", "message": "win: Fix windows batch scripts\n\nWindows batch scripts were not compatible with jballerina upgrade.\nRuntime batch script was rewritten to make it simple and improve\nreadability."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a55d5bcd2ef731214d55f39ac8d99e2c89b80003", "author": {"user": {"login": "praminda", "name": "Praminda"}}, "url": "https://github.com/wso2/product-microgateway/commit/a55d5bcd2ef731214d55f39ac8d99e2c89b80003", "committedDate": "2020-02-03T09:48:16Z", "message": "runtime: win: Pick extenal JAVA_HOME\n\nThis is done to make gateway script behavior similar to bash\nscript behavior. If external JAVA_HOME was detected and it is of\njava8 family, then script will pick that JAVA_HOME to start mgw"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b47d94cf8b9c7e6f960f23a702fb10bcb1779eaa", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/b47d94cf8b9c7e6f960f23a702fb10bcb1779eaa", "committedDate": "2020-02-03T18:26:09Z", "message": "complete docker image and provide CMD from gateway executable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2296833a8a90ea334fdcd778336a9f1e09572454", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/2296833a8a90ea334fdcd778336a9f1e09572454", "committedDate": "2020-02-03T18:27:14Z", "message": "change gateway executable such that the config file parameter can be overwritten"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "086db46dc4825052197c82a17ebeed1ebe3cd31a", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/086db46dc4825052197c82a17ebeed1ebe3cd31a", "committedDate": "2020-02-03T18:44:19Z", "message": "remove unnecessary statements from dockerfile:"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d66e916341d0a4c4db6703527ee3b8d5144ae2", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/e2d66e916341d0a4c4db6703527ee3b8d5144ae2", "committedDate": "2020-02-10T07:02:10Z", "message": "Merge pull request #962 from praminda/feature/runtime-init\n\nMake windows executable work with jballerina"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe1f68c2c9d1d39e961d2664256249498d69c5aa", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/fe1f68c2c9d1d39e961d2664256249498d69c5aa", "committedDate": "2020-02-10T17:22:00Z", "message": "fix commented issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72f748c54341916fd05b9f5ebf1ebb03250f2171", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/72f748c54341916fd05b9f5ebf1ebb03250f2171", "committedDate": "2020-02-10T17:44:27Z", "message": "Merge pull request #966 from VirajSalaka/fix-docker-restructure\n\nCreate docker base image for microgateway runtime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c34ba37f5a7e5d178946738b82d3f5c582ba6017", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/c34ba37f5a7e5d178946738b82d3f5c582ba6017", "committedDate": "2020-02-11T05:46:21Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a53138eaaa327611c5ffc90ddd46b2ebb37a0ae3", "author": {"user": {"login": "praminda", "name": "Praminda"}}, "url": "https://github.com/wso2/product-microgateway/commit/a53138eaaa327611c5ffc90ddd46b2ebb37a0ae3", "committedDate": "2020-02-11T08:21:58Z", "message": "Merge pull request #980 from VirajSalaka/master-restructure-merge\n\nResolve conflicts between master branch and the current branch."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDc5OTU5", "url": "https://github.com/wso2/product-microgateway/pull/981#pullrequestreview-356479959", "createdAt": "2020-02-11T08:37:59Z", "commit": {"oid": "a53138eaaa327611c5ffc90ddd46b2ebb37a0ae3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b", "author": {"user": {"login": "praminda", "name": "Praminda"}}, "url": "https://github.com/wso2/product-microgateway/commit/1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b", "committedDate": "2020-02-11T08:39:50Z", "message": "Merge branch 'master' into feature/runtime-init"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTAyMzkx", "url": "https://github.com/wso2/product-microgateway/pull/981#pullrequestreview-356502391", "createdAt": "2020-02-11T09:18:36Z", "commit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToxODozN1rOFoBqpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToxODozN1rOFoBqpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNDY2Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                -jar $args --api.usage.data.path=$GW_HOME/api-usage-data --b7a.http.accesslog.path=$GW_HOME/logs/access_logs --b7a.config.file=$MGW_CONF_DIR/micro-gw.conf 2>&1 | tee -a $GW_HOME/logs/microgateway.log\n          \n          \n            \n                -jar $args --api.usage.data.path=$GW_HOME/api-usage-data --b7a.config.file=$MGW_CONF_DIR/micro-gw.conf 2>&1 | tee -a $GW_HOME/logs/microgateway.log", "url": "https://github.com/wso2/product-microgateway/pull/981#discussion_r377514662", "createdAt": "2020-02-11T09:18:37Z", "author": {"login": "VirajSalaka"}, "path": "distribution/resources/bin/gateway", "diffHunk": "@@ -44,44 +44,161 @@ done\n PRGDIR=`dirname \"$PRG\"`\n \n # set BALLERINA_HOME\n-GWHOME=`cd \"$PRGDIR/..\" ; pwd`\n-export BALLERINA_HOME=$GWHOME'/runtime'\n-export JAVA_HOME=$GWHOME'/lib/jdk8u202-b08-jre'\n+GW_HOME=`cd \"$PRGDIR/..\" ; pwd`\n export MGW_VERSION=\"3.1.0\"\n-export GW_HOME=\"$GWHOME\"\n \n-if [ -e \"$GWHOME/bin/gateway.pid\" ]; then\n-  PID=`cat \"$GWHOME\"/bin/gateway.pid`\n+JAVA_PATH=$GW_HOME/lib/jdk8u202-b08-jre\n+if [ -d \"$JAVA_HOME\" ]; then\n+  echo \"JAVA_HOME is externally set: $JAVA_HOME\"\n+else\n+  JAVA_HOME=$JAVA_PATH\n fi\n \n-#To run the Java classes\n-java_cmd () {\n-  if [ -z \"$JAVACMD\" ] ; then\n-      if [ -n \"$JAVA_HOME\"  ] ; then\n-          if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n-              # IBM's JDK on AIX uses strange locations for the executables\n-              JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n-          else\n-              JAVACMD=\"$JAVA_HOME/bin/java\"\n-          fi\n-      else\n+BASE_DIR=$PWD\n+cygwin=false;\n+darwin=false;\n+os400=false;\n+mingw=false;\n+case \"`uname`\" in\n+CYGWIN*) cygwin=true;;\n+MINGW*) mingw=true;;\n+OS400*) os400=true;;\n+Darwin*) darwin=true\n+esac\n+\n+# For Cygwin, ensure paths are in UNIX format before anything is touched\n+if $cygwin; then\n+  [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n+fi\n+\n+# For OS400\n+if $os400; then\n+  # Set job priority to standard for interactive (interactive - 6) by using\n+  # the interactive priority - 6, the helper threads that respond to requests\n+  # will be running at the same priority as interactive jobs.\n+  COMMAND='chgjob job('$JOBNAME') runpty(6)'\n+  system $COMMAND\n+\n+  # Enable multi threading\n+  QIBM_MULTI_THREADED=Y\n+  export QIBM_MULTI_THREADED\n+fi\n+\n+# For Migwn, ensure paths are in UNIX format before anything is touched\n+if $mingw ; then\n+  [ -n \"$JAVA_HOME\" ] && JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\n+fi\n+\n+if [ -z \"$JAVACMD\" ] ; then\n+    if [ -n \"$JAVA_HOME\"  ] ; then\n+        if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n+            # IBM's JDK on AIX uses strange locations for the executables\n+            JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n+        else\n+            JAVACMD=\"$JAVA_HOME/bin/java\"\n+        fi\n+    else\n           JAVACMD=java\n+    fi\n+fi\n+\n+JDK_18=`$JAVACMD -version 2>&1 | grep \"1.8.\"`\n+if [ \"$JDK_18\" = \"\" ]; then\n+    echo \"Error: Microgateway is supported only on Java 1.8\"\n+    exit 1\n+fi\n+\n+# For Cygwin, switch paths to Windows format before running java\n+if $cygwin; then\n+    JAVACMD=`cygpath --absolute --windows \"$JAVACMD\"`\n+fi\n+\n+if [ ! -x \"$JAVACMD\" ] ; then\n+  echo \"Error: JAVA Package inside the microgateway runtime distribution is not working.\"\n+  exit 1\n+fi\n+\n+# As we use different directory to keep microgateway configuration for the docker image\n+if [ -z \"$MGW_CONF_DIR\" ] ; then\n+    MGW_CONF_DIR=\"$GW_HOME/conf\"\n+else\n+    if [ ! -d \"$MGW_CONF_DIR\" ] ; then\n+        echo \"Error: Provided Microgateway Config Directory: ${MGW_CONF_DIR} is not available\"\n+        exit 1\n+    fi\n+fi\n+\n+# Ballerina test/debug command\n+argsLength=$#\n+args=($@)\n+for (( i=0; i<argsLength; i++ )); do\n+  if [  \"${args[$i]}\" = \"test\" ]; then\n+    for (( j=0; j<argsLength; j++ )); do\n+      if [ \"${args[$j]}\" = \"--debug\" ]; then\n+        BAL_JAVA_DEBUG=${args[$j+1]}\n       fi\n+    done\n   fi\n+done\n \n+#BAL_JAVA_DEBUG=<port> needs to be set if it is required to remote debug the java implementation\n+if [ -n \"${BAL_JAVA_DEBUG+set}\" ]; then\n+    if [ -z \"$BAL_JAVA_DEBUG\" ]; then\n+        echo \"Please specify the debug port for debug parameter\"\n+        exit 1\n+    else\n+      if [ -n \"$JAVA_OPTS\" ]; then\n+        echo \"Warn: User specified JAVA_OPTS may interfere with BAL_JAVA_DEBUG\"\n+      fi\n+      # 'quiet=y' avoids breaking LSP protocol in debug mode\n+      JAVA_OPTS=\"$JAVA_OPTS -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=$BAL_JAVA_DEBUG,quiet=y\"\n+    fi\n+fi\n+\n+if [ -e \"$GW_HOME/bin/gateway.pid\" ]; then\n+  PID=`cat \"$GW_HOME\"/bin/gateway.pid`\n+fi\n+\n+#To run the Java classes required for the identification of observability\n+java_cmd_tools () {\n   METRIC_CLASSPATH=\"\"\n-      for j in \"$GWHOME\"/lib/gateway/*.jar\n+      for j in \"$GW_HOME\"/lib/gateway/*.jar\n       do\n           METRIC_CLASSPATH=\"$METRIC_CLASSPATH\":$j\n       done\n \n   $JAVACMD \\\n       -Xms256m -Xmx1024m \\\n       -XX:+HeapDumpOnOutOfMemoryError \\\n-      -XX:HeapDumpPath=\"$GWHOME/heap-dump.hprof\" \\\n+      -XX:HeapDumpPath=\"$GW_HOME/heap-dump.hprof\" \\\n       $JAVA_OPTS \\\n       -classpath \"$METRIC_CLASSPATH\" \\\n-      org.wso2.micro.gateway.tools.Main $1 | tee -a $GWHOME/logs/microgateway.log\n+      org.wso2.micro.gateway.tools.Main $1 | tee -a $GW_HOME/logs/microgateway.log\n+}\n+\n+java_cmd_gateway () {\n+  $JAVACMD \\\n+    -Xms${JAVA_XMS_VALUE} -Xmx$JAVA_XMX_VALUE \\\n+    -XX:+HeapDumpOnOutOfMemoryError \\\n+    -XX:HeapDumpPath=\"$GW_HOME/heap-dump.hprof\" \\\n+    $JAVA_OPTS \\\n+    -Dmgw-runtime.home=${GW_HOME} \\\n+    -Dballerina.home=${GW_HOME}/runtime \\\n+    -jar $args --api.usage.data.path=$GW_HOME/api-usage-data --b7a.http.accesslog.path=$GW_HOME/logs/access_logs --b7a.config.file=$MGW_CONF_DIR/micro-gw.conf 2>&1 | tee -a $GW_HOME/logs/microgateway.log\n+}\n+\n+java_cmd_gateway_background () {\n+  # using nohup sh to avoid erros in solaris OS.TODO\n+  nohup $SHELL <<EOF &\n+  $JAVACMD \\\n+    -Xms${JAVA_XMS_VALUE} -Xmx$JAVA_XMX_VALUE \\\n+    -XX:+HeapDumpOnOutOfMemoryError \\\n+    -XX:HeapDumpPath=\"$GW_HOME/heap-dump.hprof\" \\\n+    $JAVA_OPTS \\\n+    -Dmgw-runtime.home=${GW_HOME} \\\n+    -Dballerina.home=${GW_HOME}/runtime \\\n+    -jar $args --api.usage.data.path=$GW_HOME/api-usage-data --b7a.http.accesslog.path=$GW_HOME/logs/access_logs --b7a.config.file=$MGW_CONF_DIR/micro-gw.conf 2>&1 | tee -a $GW_HOME/logs/microgateway.log", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTAyODIy", "url": "https://github.com/wso2/product-microgateway/pull/981#pullrequestreview-356502822", "createdAt": "2020-02-11T09:19:20Z", "commit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToxOToyMFrOFoBsCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToxOToyMFrOFoBsCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNTAxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                -jar $args --api.usage.data.path=$GW_HOME/api-usage-data --b7a.http.accesslog.path=$GW_HOME/logs/access_logs --b7a.config.file=$MGW_CONF_DIR/micro-gw.conf 2>&1 | tee -a $GW_HOME/logs/microgateway.log\n          \n          \n            \n                -jar $args --api.usage.data.path=$GW_HOME/api-usage-data --b7a.config.file=$MGW_CONF_DIR/micro-gw.conf 2>&1 | tee -a $GW_HOME/logs/microgateway.log", "url": "https://github.com/wso2/product-microgateway/pull/981#discussion_r377515019", "createdAt": "2020-02-11T09:19:20Z", "author": {"login": "VirajSalaka"}, "path": "distribution/resources/bin/gateway", "diffHunk": "@@ -44,44 +44,161 @@ done\n PRGDIR=`dirname \"$PRG\"`\n \n # set BALLERINA_HOME\n-GWHOME=`cd \"$PRGDIR/..\" ; pwd`\n-export BALLERINA_HOME=$GWHOME'/runtime'\n-export JAVA_HOME=$GWHOME'/lib/jdk8u202-b08-jre'\n+GW_HOME=`cd \"$PRGDIR/..\" ; pwd`\n export MGW_VERSION=\"3.1.0\"\n-export GW_HOME=\"$GWHOME\"\n \n-if [ -e \"$GWHOME/bin/gateway.pid\" ]; then\n-  PID=`cat \"$GWHOME\"/bin/gateway.pid`\n+JAVA_PATH=$GW_HOME/lib/jdk8u202-b08-jre\n+if [ -d \"$JAVA_HOME\" ]; then\n+  echo \"JAVA_HOME is externally set: $JAVA_HOME\"\n+else\n+  JAVA_HOME=$JAVA_PATH\n fi\n \n-#To run the Java classes\n-java_cmd () {\n-  if [ -z \"$JAVACMD\" ] ; then\n-      if [ -n \"$JAVA_HOME\"  ] ; then\n-          if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n-              # IBM's JDK on AIX uses strange locations for the executables\n-              JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n-          else\n-              JAVACMD=\"$JAVA_HOME/bin/java\"\n-          fi\n-      else\n+BASE_DIR=$PWD\n+cygwin=false;\n+darwin=false;\n+os400=false;\n+mingw=false;\n+case \"`uname`\" in\n+CYGWIN*) cygwin=true;;\n+MINGW*) mingw=true;;\n+OS400*) os400=true;;\n+Darwin*) darwin=true\n+esac\n+\n+# For Cygwin, ensure paths are in UNIX format before anything is touched\n+if $cygwin; then\n+  [ -n \"$JAVA_HOME\" ] && JAVA_HOME=`cygpath --unix \"$JAVA_HOME\"`\n+fi\n+\n+# For OS400\n+if $os400; then\n+  # Set job priority to standard for interactive (interactive - 6) by using\n+  # the interactive priority - 6, the helper threads that respond to requests\n+  # will be running at the same priority as interactive jobs.\n+  COMMAND='chgjob job('$JOBNAME') runpty(6)'\n+  system $COMMAND\n+\n+  # Enable multi threading\n+  QIBM_MULTI_THREADED=Y\n+  export QIBM_MULTI_THREADED\n+fi\n+\n+# For Migwn, ensure paths are in UNIX format before anything is touched\n+if $mingw ; then\n+  [ -n \"$JAVA_HOME\" ] && JAVA_HOME=\"`(cd \"$JAVA_HOME\"; pwd)`\"\n+fi\n+\n+if [ -z \"$JAVACMD\" ] ; then\n+    if [ -n \"$JAVA_HOME\"  ] ; then\n+        if [ -x \"$JAVA_HOME/jre/sh/java\" ] ; then\n+            # IBM's JDK on AIX uses strange locations for the executables\n+            JAVACMD=\"$JAVA_HOME/jre/sh/java\"\n+        else\n+            JAVACMD=\"$JAVA_HOME/bin/java\"\n+        fi\n+    else\n           JAVACMD=java\n+    fi\n+fi\n+\n+JDK_18=`$JAVACMD -version 2>&1 | grep \"1.8.\"`\n+if [ \"$JDK_18\" = \"\" ]; then\n+    echo \"Error: Microgateway is supported only on Java 1.8\"\n+    exit 1\n+fi\n+\n+# For Cygwin, switch paths to Windows format before running java\n+if $cygwin; then\n+    JAVACMD=`cygpath --absolute --windows \"$JAVACMD\"`\n+fi\n+\n+if [ ! -x \"$JAVACMD\" ] ; then\n+  echo \"Error: JAVA Package inside the microgateway runtime distribution is not working.\"\n+  exit 1\n+fi\n+\n+# As we use different directory to keep microgateway configuration for the docker image\n+if [ -z \"$MGW_CONF_DIR\" ] ; then\n+    MGW_CONF_DIR=\"$GW_HOME/conf\"\n+else\n+    if [ ! -d \"$MGW_CONF_DIR\" ] ; then\n+        echo \"Error: Provided Microgateway Config Directory: ${MGW_CONF_DIR} is not available\"\n+        exit 1\n+    fi\n+fi\n+\n+# Ballerina test/debug command\n+argsLength=$#\n+args=($@)\n+for (( i=0; i<argsLength; i++ )); do\n+  if [  \"${args[$i]}\" = \"test\" ]; then\n+    for (( j=0; j<argsLength; j++ )); do\n+      if [ \"${args[$j]}\" = \"--debug\" ]; then\n+        BAL_JAVA_DEBUG=${args[$j+1]}\n       fi\n+    done\n   fi\n+done\n \n+#BAL_JAVA_DEBUG=<port> needs to be set if it is required to remote debug the java implementation\n+if [ -n \"${BAL_JAVA_DEBUG+set}\" ]; then\n+    if [ -z \"$BAL_JAVA_DEBUG\" ]; then\n+        echo \"Please specify the debug port for debug parameter\"\n+        exit 1\n+    else\n+      if [ -n \"$JAVA_OPTS\" ]; then\n+        echo \"Warn: User specified JAVA_OPTS may interfere with BAL_JAVA_DEBUG\"\n+      fi\n+      # 'quiet=y' avoids breaking LSP protocol in debug mode\n+      JAVA_OPTS=\"$JAVA_OPTS -Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=$BAL_JAVA_DEBUG,quiet=y\"\n+    fi\n+fi\n+\n+if [ -e \"$GW_HOME/bin/gateway.pid\" ]; then\n+  PID=`cat \"$GW_HOME\"/bin/gateway.pid`\n+fi\n+\n+#To run the Java classes required for the identification of observability\n+java_cmd_tools () {\n   METRIC_CLASSPATH=\"\"\n-      for j in \"$GWHOME\"/lib/gateway/*.jar\n+      for j in \"$GW_HOME\"/lib/gateway/*.jar\n       do\n           METRIC_CLASSPATH=\"$METRIC_CLASSPATH\":$j\n       done\n \n   $JAVACMD \\\n       -Xms256m -Xmx1024m \\\n       -XX:+HeapDumpOnOutOfMemoryError \\\n-      -XX:HeapDumpPath=\"$GWHOME/heap-dump.hprof\" \\\n+      -XX:HeapDumpPath=\"$GW_HOME/heap-dump.hprof\" \\\n       $JAVA_OPTS \\\n       -classpath \"$METRIC_CLASSPATH\" \\\n-      org.wso2.micro.gateway.tools.Main $1 | tee -a $GWHOME/logs/microgateway.log\n+      org.wso2.micro.gateway.tools.Main $1 | tee -a $GW_HOME/logs/microgateway.log\n+}\n+\n+java_cmd_gateway () {\n+  $JAVACMD \\\n+    -Xms${JAVA_XMS_VALUE} -Xmx$JAVA_XMX_VALUE \\\n+    -XX:+HeapDumpOnOutOfMemoryError \\\n+    -XX:HeapDumpPath=\"$GW_HOME/heap-dump.hprof\" \\\n+    $JAVA_OPTS \\\n+    -Dmgw-runtime.home=${GW_HOME} \\\n+    -Dballerina.home=${GW_HOME}/runtime \\\n+    -jar $args --api.usage.data.path=$GW_HOME/api-usage-data --b7a.http.accesslog.path=$GW_HOME/logs/access_logs --b7a.config.file=$MGW_CONF_DIR/micro-gw.conf 2>&1 | tee -a $GW_HOME/logs/microgateway.log", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTA0MjI2", "url": "https://github.com/wso2/product-microgateway/pull/981#pullrequestreview-356504226", "createdAt": "2020-02-11T09:21:49Z", "commit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMTo0OVrOFoBwYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMTo0OVrOFoBwYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNjEzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    \"%JAVA_HOME%\\bin\\java.exe\" %JAVA_ARGS% -Dmgw-runtime.home=%GW_HOME% -Dballerina.home=%GW_HOME%/runtime -jar \"%EXEC_FILE%\" %BAL_ARGS% --api.usage.data.path=%USAGE_DATA_PATH%  --b7a.http.accesslog.path=%ACCESS_LOG_PATH% --b7a.config.file=\"%GW_HOME%\\conf\\micro-gw.conf\" >> \"%GW_HOME%\\logs\\microgateway.log\" 2>&1\n          \n          \n            \n                    \"%JAVA_HOME%\\bin\\java.exe\" %JAVA_ARGS% -Dmgw-runtime.home=%GW_HOME% -Dballerina.home=%GW_HOME%/runtime -jar \"%EXEC_FILE%\" %BAL_ARGS% --api.usage.data.path=%USAGE_DATA_PATH% --b7a.config.file=\"%GW_HOME%\\conf\\micro-gw.conf\" >> \"%GW_HOME%\\logs\\microgateway.log\" 2>&1", "url": "https://github.com/wso2/product-microgateway/pull/981#discussion_r377516130", "createdAt": "2020-02-11T09:21:49Z", "author": {"login": "praminda"}, "path": "distribution/resources/bin/gateway.bat", "diffHunk": "@@ -17,151 +17,235 @@ REM  limitations under the License.\n REM ----------------------------------------------------------------------------\n REM Startup Script for Gateway Server\n REM\n-REM Environment Variable Prerequisites\n-REM\n-REM   BALLERINA_HOME      Home of Ballerina installation.\n-REM\n REM NOTE: Borrowed generously from Apache Tomcat startup scripts.\n REM -----------------------------------------------------------------------------\n setlocal EnableDelayedExpansion\n \n-if \"\"%1%\"\"==\"\"-v\"\" ( set verbose=T ) else ( set verbose=F )\n-if %verbose%==T ( echo Verbose mode enabled )\n+REM -----------------------------------------------------------------------------\n+REM --- START OF GLOBAL VARIABLES ---\n+REM -----------------------------------------------------------------------------\n \n REM Set Java Xms and Xmx values. The values specified here will set in gateway runtime.\n-SET JAVA_XMS_VALUE=\"256m\"\n-SET JAVA_XMX_VALUE=\"512m\"\n+SET JAVA_XMS_VALUE=256m\n+SET JAVA_XMX_VALUE=512m\n \n-REM Get the location of this(gateway.bat) file\n+REM Set global variables\n SET PRGDIR=%~dp0\n-SET GWHOME=%PRGDIR%..\n+SET GW_HOME=%PRGDIR%..\n SET MGW_VERSION=\"3.1.0\"\n-REM  set BALLERINA_HOME\n-set BALLERINA_HOME=%GWHOME%\\runtime\n-set JAVA_HOME=%GWHOME%\\lib\\jdk8u202-b08-jre\n-if %verbose%==T echo BALLERINA_HOME environment variable is set to %BALLERINA_HOME%\n-if %verbose%==T echo GWHOME environment variable is set to %GWHOME%\n-\n-REM Check if path to runtime executable is available\n-set last=\"\"\n-for %%a in (%*) do set last=%%a\n-if %last%==\"\" set isInvalidPath=T\n-if not exist %last% set isInvalidPath=T\n-if \"%isInvalidPath%\"==\"T\" (\n-\techo Path to executable balx file is invalid\n-    goto end\n+SET CONF_FILE=%GW_HOME%\\conf\\micro-gw.conf\n+SET CONF_OUT_FILE=%GW_HOME%\\.config\n+SET IS_METRICS_ENABLED=F\n+SET EXEC_FILE=\n+SET BAL_ARGS=\n+\n+REM If java_home is set and version is 1.8 in the running environment,\n+REM pick that as the java_home for MGW. If not set internal jre home\n+IF EXIST %JAVA_HOME% (\n+    SET JAVA_CMD=\"%JAVA_HOME%\\bin\\java.exe\"\n+    SET JAVA_VERSION=\n+    FOR /F \"tokens=* USEBACKQ\" %%F IN (`%JAVA_CMD% -fullversion 2^>^&1`) DO (\n+        SET JAVA_VERSION=%%F\n+    )\n+\n+    REM External java_home was detected, now check if it is java8\n+    ECHO \"%JAVA_VERSION%\"|find \"1.8.\" >NUL\n+    IF %ERRORLEVEL% NEQ 0 SET JAVA_HOME=%GW_HOME%\\lib\\jdk8u202-b08-jre\n+) ELSE SET JAVA_HOME=%GW_HOME%\\lib\\jdk8u202-b08-jre\n+\n+REM -----------------------------------------------------------------------------\n+REM --- END OF GLOBAL VARIABLES ---\n+REM -----------------------------------------------------------------------------\n+\n+REM -----------------------------------------------------------------------------\n+REM --- START OF MAIN PROGRAM LOGIC ---\n+REM -----------------------------------------------------------------------------\n+\n+CALL :checkJava\n+IF %ERRORLEVEL% NEQ 0 GOTO END\n+\n+CALL :validateExecutable %*\n+IF %ERRORLEVEL% NEQ 0 GOTO END\n+\n+SET EXEC_FILE=%~1\n+CALL :buildBalArgs %*\n+\n+CALL :runTools \"getConfig %CONF_FILE% %CONF_OUT_FILE%\"\n+\n+IF \"%b7a_observability_metrics_enabled%\"==\"true\" (\n+    SET IS_METRICS_ENABLED=T\n+) ELSE (\n+    CAll :isMetricsEnabled %*\n )\n \n-REM Extract ballerina runtime\n-if not exist %GW_HOME%\\runtime\\ (\n-    REM TODO: Evaluate the use of powershell `tee` here\n-    call \"%PRGDIR%\\tools.exe\"\n-    if ERRORLEVEL 0 (\n-        xcopy /y \"%GWHOME%\\lib\\gateway\\*.jar\" \"%GWHOME%\\runtime\\bre\\lib\\\" >nul\n+IF EXIST %CONF_OUT_FILE% (\n+    IF \"%IS_METRICS_ENABLED%\"==\"F\" (\n+        FOR /F \"delims=\" %%i IN (%CONF_OUT_FILE%) DO (\n+            IF %%i==true SET IS_METRICS_ENABLED=T\n+            REM Prevent falling into else block\n+            GOTO :enableAgent\n+        )\n     )\n+) ELSE (\n+    ECHO Error while reading observability configurations from the file\n+    GOTO :continueInit\n )\n \n-REM Needs to identify the ballerina arguments and the last argument which is the path of executable.\n-REM The path of executable should be provided as \\\"<path>\\\" to avoid ballerina when the path includes a space.\n-REM BAL_ARGS variable is used to store formatted string\n-set BAL_ARGS=\n-:formatAndValidateCmdArgs\n-    if \"%~1\"==\"-e\" (\n-        set \"BAL_ARGS=%BAL_ARGS% %1 %2=%3\"\n-        shift\n-        shift\n-        shift\n-        goto :formatAndValidateCmdArgs\n-    ) else (\n-        if \"%~2\"==\"\" (\n-            set \"BAL_ARGS=%BAL_ARGS% \\\"%~1\\\"\"\n-            goto :callBallerina\n-        ) else (\n-            if \"%~1\"==\"--debug\" (\n-                 set \"BAL_ARGS=%BAL_ARGS% %1 %2\"\n-                 shift\n-                 shift\n-                 goto :formatAndValidateCmdArgs\n-            ) else (\n-                 echo %*\n-                 echo \"Provided set of arguments are invalid.\"\n-                 goto end\n-            )\n+:enableAgent\n+    IF \"%IS_METRICS_ENABLED%\"==\"T\" (\n+        FOR /F \"skip=1 delims=\" %%i IN (%CONF_OUT_FILE%) DO (\n+            SET jmxPort=%%i\n+            GOTO :setJavaOpts\n         )\n+        :setJavaOpts\n+            SET JAVA_OPTS=\"-javaagent:%GW_HOME%\\lib\\gateway\\jmx_prometheus_javaagent-0.12.0.jar=%jmxPort%:%GW_HOME%\\conf\\Prometheus\\config.yml\"\n     )\n \n-REM Slurp the command line arguments. This loop allows for an unlimited number\n-REM of arguments (up to the command line limit, anyway).\n-:setupArgs\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Processing argument : `%1`\n-\tif \"\"%1\"\"==\"\"\"\" goto :formatAndValidateCmdArgs\n-\n-\tif \"\"%1\"\"==\"\"--debug\"\"    goto commandDebug\n-\tshift\n-goto setupArgs\n-\n-:commandDebug\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Running commandDebug\n-\n-\tshift\n-\tset DEBUG_PORT=%1\n-\tif \"%DEBUG_PORT%\"==\"\" goto noDebugPort\n-\techo Please start the remote debugging client to continue...\n-goto :formatAndValidateCmdArgs\n-\n-:noDebugPort\n-\techo Please specify the debug port after the ballerina debug option\n-goto end\n-\n-\n-:callBallerina\n-\tREM ---------- Run balx with ballerina ----------------\n-\tREM Change the windows style `\\` path separator to unix style `/path/to/file` for log file path\n-\tset \"separator=/\"\n-\tset log_path=\"%GWHOME%\\logs\\access_logs\"\n-\tcall set unix_style_path=%%log_path:\\=%separator%%%\n-\n-\tREM Do the same for analytics data file path\n-\tset usage_data_path=%GWHOME%\\api-usage-data\n-\tcall set usage_data_path=%%usage_data_path:\\=%separator%%%\n-\n-\tif %verbose%==T echo [%date% %time%] DEBUG: b7a.http.accesslog.path = \"%GWHOME%\\logs\\access_logs\"\n-\tif %verbose%==T echo [%date% %time%] DEBUG: configs = %unix_style_path%\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Starting micro gateway server...\n-\n-\tREM Check if powershell is available\n-\tWHERE powershell >nul 2>nul\n-\tIF %ERRORLEVEL% NEQ 0 (\n-\t\techo [%date% %time%] WARN: Can't find powershell in the system!\n-\t\techo [%date% %time%] WARN: STDERR and STDOUT will be piped to %GWHOME%\\logs\\microgateway.log\n-\t\tREM To append to existing logs used `>>` to redirect STDERR to STDOUT used `2>&1`\n-\t\t\"%GWHOME%\\runtime\\bin\\ballerina\" run -e api.usage.data.path=%usage_data_path%   --config \"%GWHOME%\\conf\\micro-gw.conf\" %BAL_ARGS% >> \"%GWHOME%\\logs\\microgateway.log\" 2>&1\n-\t) else (\n-\t\tREM Change Java heap Xmx and Xmx values\n-\t\tpowershell -Command \"(Get-Content \\\"%GWHOME%\\runtime\\bin\\ballerina.bat\\\") | Foreach-Object {$_ -replace 'Xms.*?m','Xms%JAVA_XMS_VALUE% '} | Foreach-Object {$_ -replace 'Xmx.*?m','Xmx%JAVA_XMX_VALUE% '} | Set-Content \\\"%GWHOME%\\runtime\\bin\\ballerina_1.bat\\\"\"\n-\t\tpowershell -Command \"Remove-Item \\\"%GWHOME%\\runtime\\bin\\ballerina.bat\\\"\"\n-\t\tpowershell -Command \"Rename-Item -path \\\"%GWHOME%\\runtime\\bin\\ballerina_1.bat\\\" -newName ballerina.bat\"\n-\t\tCD \"%GWHOME%\"\n-\t\tfor /f \"skip=3 tokens=2 delims=:\" %%A in ('powershell -command \"get-host\"') do (\n-\t\t\tset /a n=!n!+1\n-\t\t\tset c=%%A\n-\t\t\tif !n!==1 set PSVersion=!c!\n-\t\t)\n-\t\tset PSVersion=!PSVersion: =!\n-\t\tif %verbose%==T echo [%date% %time%] DEBUG: PowerShell version !PSVersion! detected!\n-\t\tset PSVersion=!PSVersion:~0,1!\n-\t\techo [%date% %time%] Starting Micro-Gateway\n-\t\tIF !PSVersion! LEQ 3 (\n-\t\t\techo [%date% %time%] Starting Micro-Gateway >>  .\\logs\\microgateway.log\n-\t\t\tcall powershell \".\\runtime\\bin\\ballerina run %BAL_ARGS% --api.usage.data.path=\\\"%usage_data_path%\\\" --b7a.config.file=\".\\conf\\micro-gw.conf\" | out-file -encoding ASCII -filepath .\\logs\\microgateway.log -Append\"\n-\t\t ) else (\n-\t\t\tREM For powershell version 4 or above , We can use `tee` command for output to both file stream and stdout (Ref: https://en.wikipedia.org/wiki/PowerShell#PowerShell_4.0)\n-\t\t\tcall powershell \".\\runtime\\bin\\ballerina run %BAL_ARGS% --api.usage.data.path=\\\"%usage_data_path%\\\" --b7a.config.file=\".\\conf\\micro-gw.conf\" | tee -Append .\\logs\\microgateway.log\"\n-\t\t)\n-\t)\n-:end\n-goto endlocal\n-\n-:endlocal\n+    DEL /Q /F %CONF_OUT_FILE%\n+\n+:continueInit\n+    REM Change the windows style `\\` path separator to unix style `/path/to/file` for log file path\n+    SET \"separator=/\"\n+    SET log_path=\"%GW_HOME%\\logs\\access_logs\"\n+    CALL SET ACCESS_LOG_PATH=%%log_path:\\=%separator%%%\n+\n+    REM Do the same for analytics data file path\n+    SET usage_path=%GW_HOME%\\api-usage-data\n+    CALL SET USAGE_DATA_PATH=%%usage_path:\\=%separator%%%\n+\n+    CALL :startGateway %*\n+\n+    GOTO END\n+\n+REM -----------------------------------------------------------------------------\n+REM --- END OF MAIN PROGRAM LOGIC ---\n+REM -----------------------------------------------------------------------------\n+\n+REM -----------------------------------------------------------------------------\n+REM --- START OF FUNCTION DEFINITION ---\n+REM -----------------------------------------------------------------------------\n+\n+REM Start the gateway using internal ballerina distribution as the runtime\n+:startGateway\n+    REM Check if powershell is available\n+    SET JAVA_ARGS=-Xms%JAVA_XMS_VALUE% -Xmx%JAVA_XMX_VALUE% -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=%GW_HOME%\\heap-dump.hprof\n+    WHERE POWERSHELL >NUL 2>NUl\n+\n+    IF %ERRORLEVEL% NEQ 0 (\n+        ECHO WARN: Can't find powershell in the system!\n+        ECHO WARN: STDERR and STDOUT will be piped to %GW_HOME%\\logs\\microgateway.log\n+        \"%JAVA_HOME%\\bin\\java.exe\" %JAVA_ARGS% -Dmgw-runtime.home=%GW_HOME% -Dballerina.home=%GW_HOME%/runtime -jar \"%EXEC_FILE%\" %BAL_ARGS% --api.usage.data.path=%USAGE_DATA_PATH%  --b7a.http.accesslog.path=%ACCESS_LOG_PATH% --b7a.config.file=\"%GW_HOME%\\conf\\micro-gw.conf\" >> \"%GW_HOME%\\logs\\microgateway.log\" 2>&1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "originalPosition": 250}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTA0ODA5", "url": "https://github.com/wso2/product-microgateway/pull/981#pullrequestreview-356504809", "createdAt": "2020-02-11T09:22:53Z", "commit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMjo1M1rOFoByLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMjo1M1rOFoByLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNjU5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CALL POWERSHELL \"%JAVA_HOME%\\bin\\java.exe %JAVA_ARGS% '-Dmgw-runtime.home=%GW_HOME%' '-Dballerina.home=%GW_HOME%/runtime' -jar '%EXEC_FILE%' %BAL_ARGS% --api.usage.data.path='%USAGE_DATA_PATH%'  --b7a.http.accesslog.path='%ACCESS_LOG_PATH%' --b7a.config.file='%GW_HOME%\\conf\\micro-gw.conf' | out-file -encoding Unicode -filepath '%GW_HOME%\\logs\\microgateway.log' -Append\"\n          \n          \n            \n                        CALL POWERSHELL \"%JAVA_HOME%\\bin\\java.exe %JAVA_ARGS% '-Dmgw-runtime.home=%GW_HOME%' '-Dballerina.home=%GW_HOME%/runtime' -jar '%EXEC_FILE%' %BAL_ARGS% --api.usage.data.path='%USAGE_DATA_PATH%' --b7a.config.file='%GW_HOME%\\conf\\micro-gw.conf' | out-file -encoding Unicode -filepath '%GW_HOME%\\logs\\microgateway.log' -Append\"", "url": "https://github.com/wso2/product-microgateway/pull/981#discussion_r377516591", "createdAt": "2020-02-11T09:22:53Z", "author": {"login": "praminda"}, "path": "distribution/resources/bin/gateway.bat", "diffHunk": "@@ -17,151 +17,235 @@ REM  limitations under the License.\n REM ----------------------------------------------------------------------------\n REM Startup Script for Gateway Server\n REM\n-REM Environment Variable Prerequisites\n-REM\n-REM   BALLERINA_HOME      Home of Ballerina installation.\n-REM\n REM NOTE: Borrowed generously from Apache Tomcat startup scripts.\n REM -----------------------------------------------------------------------------\n setlocal EnableDelayedExpansion\n \n-if \"\"%1%\"\"==\"\"-v\"\" ( set verbose=T ) else ( set verbose=F )\n-if %verbose%==T ( echo Verbose mode enabled )\n+REM -----------------------------------------------------------------------------\n+REM --- START OF GLOBAL VARIABLES ---\n+REM -----------------------------------------------------------------------------\n \n REM Set Java Xms and Xmx values. The values specified here will set in gateway runtime.\n-SET JAVA_XMS_VALUE=\"256m\"\n-SET JAVA_XMX_VALUE=\"512m\"\n+SET JAVA_XMS_VALUE=256m\n+SET JAVA_XMX_VALUE=512m\n \n-REM Get the location of this(gateway.bat) file\n+REM Set global variables\n SET PRGDIR=%~dp0\n-SET GWHOME=%PRGDIR%..\n+SET GW_HOME=%PRGDIR%..\n SET MGW_VERSION=\"3.1.0\"\n-REM  set BALLERINA_HOME\n-set BALLERINA_HOME=%GWHOME%\\runtime\n-set JAVA_HOME=%GWHOME%\\lib\\jdk8u202-b08-jre\n-if %verbose%==T echo BALLERINA_HOME environment variable is set to %BALLERINA_HOME%\n-if %verbose%==T echo GWHOME environment variable is set to %GWHOME%\n-\n-REM Check if path to runtime executable is available\n-set last=\"\"\n-for %%a in (%*) do set last=%%a\n-if %last%==\"\" set isInvalidPath=T\n-if not exist %last% set isInvalidPath=T\n-if \"%isInvalidPath%\"==\"T\" (\n-\techo Path to executable balx file is invalid\n-    goto end\n+SET CONF_FILE=%GW_HOME%\\conf\\micro-gw.conf\n+SET CONF_OUT_FILE=%GW_HOME%\\.config\n+SET IS_METRICS_ENABLED=F\n+SET EXEC_FILE=\n+SET BAL_ARGS=\n+\n+REM If java_home is set and version is 1.8 in the running environment,\n+REM pick that as the java_home for MGW. If not set internal jre home\n+IF EXIST %JAVA_HOME% (\n+    SET JAVA_CMD=\"%JAVA_HOME%\\bin\\java.exe\"\n+    SET JAVA_VERSION=\n+    FOR /F \"tokens=* USEBACKQ\" %%F IN (`%JAVA_CMD% -fullversion 2^>^&1`) DO (\n+        SET JAVA_VERSION=%%F\n+    )\n+\n+    REM External java_home was detected, now check if it is java8\n+    ECHO \"%JAVA_VERSION%\"|find \"1.8.\" >NUL\n+    IF %ERRORLEVEL% NEQ 0 SET JAVA_HOME=%GW_HOME%\\lib\\jdk8u202-b08-jre\n+) ELSE SET JAVA_HOME=%GW_HOME%\\lib\\jdk8u202-b08-jre\n+\n+REM -----------------------------------------------------------------------------\n+REM --- END OF GLOBAL VARIABLES ---\n+REM -----------------------------------------------------------------------------\n+\n+REM -----------------------------------------------------------------------------\n+REM --- START OF MAIN PROGRAM LOGIC ---\n+REM -----------------------------------------------------------------------------\n+\n+CALL :checkJava\n+IF %ERRORLEVEL% NEQ 0 GOTO END\n+\n+CALL :validateExecutable %*\n+IF %ERRORLEVEL% NEQ 0 GOTO END\n+\n+SET EXEC_FILE=%~1\n+CALL :buildBalArgs %*\n+\n+CALL :runTools \"getConfig %CONF_FILE% %CONF_OUT_FILE%\"\n+\n+IF \"%b7a_observability_metrics_enabled%\"==\"true\" (\n+    SET IS_METRICS_ENABLED=T\n+) ELSE (\n+    CAll :isMetricsEnabled %*\n )\n \n-REM Extract ballerina runtime\n-if not exist %GW_HOME%\\runtime\\ (\n-    REM TODO: Evaluate the use of powershell `tee` here\n-    call \"%PRGDIR%\\tools.exe\"\n-    if ERRORLEVEL 0 (\n-        xcopy /y \"%GWHOME%\\lib\\gateway\\*.jar\" \"%GWHOME%\\runtime\\bre\\lib\\\" >nul\n+IF EXIST %CONF_OUT_FILE% (\n+    IF \"%IS_METRICS_ENABLED%\"==\"F\" (\n+        FOR /F \"delims=\" %%i IN (%CONF_OUT_FILE%) DO (\n+            IF %%i==true SET IS_METRICS_ENABLED=T\n+            REM Prevent falling into else block\n+            GOTO :enableAgent\n+        )\n     )\n+) ELSE (\n+    ECHO Error while reading observability configurations from the file\n+    GOTO :continueInit\n )\n \n-REM Needs to identify the ballerina arguments and the last argument which is the path of executable.\n-REM The path of executable should be provided as \\\"<path>\\\" to avoid ballerina when the path includes a space.\n-REM BAL_ARGS variable is used to store formatted string\n-set BAL_ARGS=\n-:formatAndValidateCmdArgs\n-    if \"%~1\"==\"-e\" (\n-        set \"BAL_ARGS=%BAL_ARGS% %1 %2=%3\"\n-        shift\n-        shift\n-        shift\n-        goto :formatAndValidateCmdArgs\n-    ) else (\n-        if \"%~2\"==\"\" (\n-            set \"BAL_ARGS=%BAL_ARGS% \\\"%~1\\\"\"\n-            goto :callBallerina\n-        ) else (\n-            if \"%~1\"==\"--debug\" (\n-                 set \"BAL_ARGS=%BAL_ARGS% %1 %2\"\n-                 shift\n-                 shift\n-                 goto :formatAndValidateCmdArgs\n-            ) else (\n-                 echo %*\n-                 echo \"Provided set of arguments are invalid.\"\n-                 goto end\n-            )\n+:enableAgent\n+    IF \"%IS_METRICS_ENABLED%\"==\"T\" (\n+        FOR /F \"skip=1 delims=\" %%i IN (%CONF_OUT_FILE%) DO (\n+            SET jmxPort=%%i\n+            GOTO :setJavaOpts\n         )\n+        :setJavaOpts\n+            SET JAVA_OPTS=\"-javaagent:%GW_HOME%\\lib\\gateway\\jmx_prometheus_javaagent-0.12.0.jar=%jmxPort%:%GW_HOME%\\conf\\Prometheus\\config.yml\"\n     )\n \n-REM Slurp the command line arguments. This loop allows for an unlimited number\n-REM of arguments (up to the command line limit, anyway).\n-:setupArgs\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Processing argument : `%1`\n-\tif \"\"%1\"\"==\"\"\"\" goto :formatAndValidateCmdArgs\n-\n-\tif \"\"%1\"\"==\"\"--debug\"\"    goto commandDebug\n-\tshift\n-goto setupArgs\n-\n-:commandDebug\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Running commandDebug\n-\n-\tshift\n-\tset DEBUG_PORT=%1\n-\tif \"%DEBUG_PORT%\"==\"\" goto noDebugPort\n-\techo Please start the remote debugging client to continue...\n-goto :formatAndValidateCmdArgs\n-\n-:noDebugPort\n-\techo Please specify the debug port after the ballerina debug option\n-goto end\n-\n-\n-:callBallerina\n-\tREM ---------- Run balx with ballerina ----------------\n-\tREM Change the windows style `\\` path separator to unix style `/path/to/file` for log file path\n-\tset \"separator=/\"\n-\tset log_path=\"%GWHOME%\\logs\\access_logs\"\n-\tcall set unix_style_path=%%log_path:\\=%separator%%%\n-\n-\tREM Do the same for analytics data file path\n-\tset usage_data_path=%GWHOME%\\api-usage-data\n-\tcall set usage_data_path=%%usage_data_path:\\=%separator%%%\n-\n-\tif %verbose%==T echo [%date% %time%] DEBUG: b7a.http.accesslog.path = \"%GWHOME%\\logs\\access_logs\"\n-\tif %verbose%==T echo [%date% %time%] DEBUG: configs = %unix_style_path%\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Starting micro gateway server...\n-\n-\tREM Check if powershell is available\n-\tWHERE powershell >nul 2>nul\n-\tIF %ERRORLEVEL% NEQ 0 (\n-\t\techo [%date% %time%] WARN: Can't find powershell in the system!\n-\t\techo [%date% %time%] WARN: STDERR and STDOUT will be piped to %GWHOME%\\logs\\microgateway.log\n-\t\tREM To append to existing logs used `>>` to redirect STDERR to STDOUT used `2>&1`\n-\t\t\"%GWHOME%\\runtime\\bin\\ballerina\" run -e api.usage.data.path=%usage_data_path%   --config \"%GWHOME%\\conf\\micro-gw.conf\" %BAL_ARGS% >> \"%GWHOME%\\logs\\microgateway.log\" 2>&1\n-\t) else (\n-\t\tREM Change Java heap Xmx and Xmx values\n-\t\tpowershell -Command \"(Get-Content \\\"%GWHOME%\\runtime\\bin\\ballerina.bat\\\") | Foreach-Object {$_ -replace 'Xms.*?m','Xms%JAVA_XMS_VALUE% '} | Foreach-Object {$_ -replace 'Xmx.*?m','Xmx%JAVA_XMX_VALUE% '} | Set-Content \\\"%GWHOME%\\runtime\\bin\\ballerina_1.bat\\\"\"\n-\t\tpowershell -Command \"Remove-Item \\\"%GWHOME%\\runtime\\bin\\ballerina.bat\\\"\"\n-\t\tpowershell -Command \"Rename-Item -path \\\"%GWHOME%\\runtime\\bin\\ballerina_1.bat\\\" -newName ballerina.bat\"\n-\t\tCD \"%GWHOME%\"\n-\t\tfor /f \"skip=3 tokens=2 delims=:\" %%A in ('powershell -command \"get-host\"') do (\n-\t\t\tset /a n=!n!+1\n-\t\t\tset c=%%A\n-\t\t\tif !n!==1 set PSVersion=!c!\n-\t\t)\n-\t\tset PSVersion=!PSVersion: =!\n-\t\tif %verbose%==T echo [%date% %time%] DEBUG: PowerShell version !PSVersion! detected!\n-\t\tset PSVersion=!PSVersion:~0,1!\n-\t\techo [%date% %time%] Starting Micro-Gateway\n-\t\tIF !PSVersion! LEQ 3 (\n-\t\t\techo [%date% %time%] Starting Micro-Gateway >>  .\\logs\\microgateway.log\n-\t\t\tcall powershell \".\\runtime\\bin\\ballerina run %BAL_ARGS% --api.usage.data.path=\\\"%usage_data_path%\\\" --b7a.config.file=\".\\conf\\micro-gw.conf\" | out-file -encoding ASCII -filepath .\\logs\\microgateway.log -Append\"\n-\t\t ) else (\n-\t\t\tREM For powershell version 4 or above , We can use `tee` command for output to both file stream and stdout (Ref: https://en.wikipedia.org/wiki/PowerShell#PowerShell_4.0)\n-\t\t\tcall powershell \".\\runtime\\bin\\ballerina run %BAL_ARGS% --api.usage.data.path=\\\"%usage_data_path%\\\" --b7a.config.file=\".\\conf\\micro-gw.conf\" | tee -Append .\\logs\\microgateway.log\"\n-\t\t)\n-\t)\n-:end\n-goto endlocal\n-\n-:endlocal\n+    DEL /Q /F %CONF_OUT_FILE%\n+\n+:continueInit\n+    REM Change the windows style `\\` path separator to unix style `/path/to/file` for log file path\n+    SET \"separator=/\"\n+    SET log_path=\"%GW_HOME%\\logs\\access_logs\"\n+    CALL SET ACCESS_LOG_PATH=%%log_path:\\=%separator%%%\n+\n+    REM Do the same for analytics data file path\n+    SET usage_path=%GW_HOME%\\api-usage-data\n+    CALL SET USAGE_DATA_PATH=%%usage_path:\\=%separator%%%\n+\n+    CALL :startGateway %*\n+\n+    GOTO END\n+\n+REM -----------------------------------------------------------------------------\n+REM --- END OF MAIN PROGRAM LOGIC ---\n+REM -----------------------------------------------------------------------------\n+\n+REM -----------------------------------------------------------------------------\n+REM --- START OF FUNCTION DEFINITION ---\n+REM -----------------------------------------------------------------------------\n+\n+REM Start the gateway using internal ballerina distribution as the runtime\n+:startGateway\n+    REM Check if powershell is available\n+    SET JAVA_ARGS=-Xms%JAVA_XMS_VALUE% -Xmx%JAVA_XMX_VALUE% -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=%GW_HOME%\\heap-dump.hprof\n+    WHERE POWERSHELL >NUL 2>NUl\n+\n+    IF %ERRORLEVEL% NEQ 0 (\n+        ECHO WARN: Can't find powershell in the system!\n+        ECHO WARN: STDERR and STDOUT will be piped to %GW_HOME%\\logs\\microgateway.log\n+        \"%JAVA_HOME%\\bin\\java.exe\" %JAVA_ARGS% -Dmgw-runtime.home=%GW_HOME% -Dballerina.home=%GW_HOME%/runtime -jar \"%EXEC_FILE%\" %BAL_ARGS% --api.usage.data.path=%USAGE_DATA_PATH%  --b7a.http.accesslog.path=%ACCESS_LOG_PATH% --b7a.config.file=\"%GW_HOME%\\conf\\micro-gw.conf\" >> \"%GW_HOME%\\logs\\microgateway.log\" 2>&1\n+\n+        EXIT /B %ERRORLEVEL%\n+    ) ELSE (\n+        REM Get short path for java_home in case java_home was picked from a\n+        REM standard installation dir with space in the path ex: \"program files\"\n+        FOR %%I IN (\"%JAVA_HOME%\") DO SET JAVA_HOME=%%~sI\n+        FOR /f \"skip=3 tokens=2 delims=:\" %%A IN ('powershell -command \"get-host\"') DO (\n+            SET /a n=!n!+1\n+            SET c=%%A\n+            IF !n!==1 SET PSVersion=!c!\n+        )\n+        SET PSVersion=!PSVersion: =!\n+        SET PSVersion=!PSVersion:~0,1!\n+\n+        REM TODO: Possible solution for this complexity can be Add-Content Cmdlet. Do some RnD on it.\n+        IF !PSVersion! LEQ 3 (\n+            CALL POWERSHELL \"%JAVA_HOME%\\bin\\java.exe %JAVA_ARGS% '-Dmgw-runtime.home=%GW_HOME%' '-Dballerina.home=%GW_HOME%/runtime' -jar '%EXEC_FILE%' %BAL_ARGS% --api.usage.data.path='%USAGE_DATA_PATH%'  --b7a.http.accesslog.path='%ACCESS_LOG_PATH%' --b7a.config.file='%GW_HOME%\\conf\\micro-gw.conf' | out-file -encoding Unicode -filepath '%GW_HOME%\\logs\\microgateway.log' -Append\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "originalPosition": 267}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NTA1NDI1", "url": "https://github.com/wso2/product-microgateway/pull/981#pullrequestreview-356505425", "createdAt": "2020-02-11T09:23:55Z", "commit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMzo1NVrOFoB0Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMzo1NVrOFoB0Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNzA3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CALL POWERSHELL \"!JAVA_HOME!\\bin\\java.exe %JAVA_ARGS% '-Dmgw-runtime.home=%GW_HOME%' '-Dballerina.home=%GW_HOME%/runtime' -jar '%EXEC_FILE%' %BAL_ARGS% --api.usage.data.path='%USAGE_DATA_PATH%'  --b7a.http.accesslog.path='%ACCESS_LOG_PATH%' --b7a.config.file='%GW_HOME%\\conf\\micro-gw.conf' | tee -Append %GW_HOME%\\logs\\microgateway.log\"\n          \n          \n            \n                        CALL POWERSHELL \"!JAVA_HOME!\\bin\\java.exe %JAVA_ARGS% '-Dmgw-runtime.home=%GW_HOME%' '-Dballerina.home=%GW_HOME%/runtime' -jar '%EXEC_FILE%' %BAL_ARGS% --api.usage.data.path='%USAGE_DATA_PATH%' --b7a.config.file='%GW_HOME%\\conf\\micro-gw.conf' | tee -Append %GW_HOME%\\logs\\microgateway.log\"", "url": "https://github.com/wso2/product-microgateway/pull/981#discussion_r377517075", "createdAt": "2020-02-11T09:23:55Z", "author": {"login": "praminda"}, "path": "distribution/resources/bin/gateway.bat", "diffHunk": "@@ -17,151 +17,235 @@ REM  limitations under the License.\n REM ----------------------------------------------------------------------------\n REM Startup Script for Gateway Server\n REM\n-REM Environment Variable Prerequisites\n-REM\n-REM   BALLERINA_HOME      Home of Ballerina installation.\n-REM\n REM NOTE: Borrowed generously from Apache Tomcat startup scripts.\n REM -----------------------------------------------------------------------------\n setlocal EnableDelayedExpansion\n \n-if \"\"%1%\"\"==\"\"-v\"\" ( set verbose=T ) else ( set verbose=F )\n-if %verbose%==T ( echo Verbose mode enabled )\n+REM -----------------------------------------------------------------------------\n+REM --- START OF GLOBAL VARIABLES ---\n+REM -----------------------------------------------------------------------------\n \n REM Set Java Xms and Xmx values. The values specified here will set in gateway runtime.\n-SET JAVA_XMS_VALUE=\"256m\"\n-SET JAVA_XMX_VALUE=\"512m\"\n+SET JAVA_XMS_VALUE=256m\n+SET JAVA_XMX_VALUE=512m\n \n-REM Get the location of this(gateway.bat) file\n+REM Set global variables\n SET PRGDIR=%~dp0\n-SET GWHOME=%PRGDIR%..\n+SET GW_HOME=%PRGDIR%..\n SET MGW_VERSION=\"3.1.0\"\n-REM  set BALLERINA_HOME\n-set BALLERINA_HOME=%GWHOME%\\runtime\n-set JAVA_HOME=%GWHOME%\\lib\\jdk8u202-b08-jre\n-if %verbose%==T echo BALLERINA_HOME environment variable is set to %BALLERINA_HOME%\n-if %verbose%==T echo GWHOME environment variable is set to %GWHOME%\n-\n-REM Check if path to runtime executable is available\n-set last=\"\"\n-for %%a in (%*) do set last=%%a\n-if %last%==\"\" set isInvalidPath=T\n-if not exist %last% set isInvalidPath=T\n-if \"%isInvalidPath%\"==\"T\" (\n-\techo Path to executable balx file is invalid\n-    goto end\n+SET CONF_FILE=%GW_HOME%\\conf\\micro-gw.conf\n+SET CONF_OUT_FILE=%GW_HOME%\\.config\n+SET IS_METRICS_ENABLED=F\n+SET EXEC_FILE=\n+SET BAL_ARGS=\n+\n+REM If java_home is set and version is 1.8 in the running environment,\n+REM pick that as the java_home for MGW. If not set internal jre home\n+IF EXIST %JAVA_HOME% (\n+    SET JAVA_CMD=\"%JAVA_HOME%\\bin\\java.exe\"\n+    SET JAVA_VERSION=\n+    FOR /F \"tokens=* USEBACKQ\" %%F IN (`%JAVA_CMD% -fullversion 2^>^&1`) DO (\n+        SET JAVA_VERSION=%%F\n+    )\n+\n+    REM External java_home was detected, now check if it is java8\n+    ECHO \"%JAVA_VERSION%\"|find \"1.8.\" >NUL\n+    IF %ERRORLEVEL% NEQ 0 SET JAVA_HOME=%GW_HOME%\\lib\\jdk8u202-b08-jre\n+) ELSE SET JAVA_HOME=%GW_HOME%\\lib\\jdk8u202-b08-jre\n+\n+REM -----------------------------------------------------------------------------\n+REM --- END OF GLOBAL VARIABLES ---\n+REM -----------------------------------------------------------------------------\n+\n+REM -----------------------------------------------------------------------------\n+REM --- START OF MAIN PROGRAM LOGIC ---\n+REM -----------------------------------------------------------------------------\n+\n+CALL :checkJava\n+IF %ERRORLEVEL% NEQ 0 GOTO END\n+\n+CALL :validateExecutable %*\n+IF %ERRORLEVEL% NEQ 0 GOTO END\n+\n+SET EXEC_FILE=%~1\n+CALL :buildBalArgs %*\n+\n+CALL :runTools \"getConfig %CONF_FILE% %CONF_OUT_FILE%\"\n+\n+IF \"%b7a_observability_metrics_enabled%\"==\"true\" (\n+    SET IS_METRICS_ENABLED=T\n+) ELSE (\n+    CAll :isMetricsEnabled %*\n )\n \n-REM Extract ballerina runtime\n-if not exist %GW_HOME%\\runtime\\ (\n-    REM TODO: Evaluate the use of powershell `tee` here\n-    call \"%PRGDIR%\\tools.exe\"\n-    if ERRORLEVEL 0 (\n-        xcopy /y \"%GWHOME%\\lib\\gateway\\*.jar\" \"%GWHOME%\\runtime\\bre\\lib\\\" >nul\n+IF EXIST %CONF_OUT_FILE% (\n+    IF \"%IS_METRICS_ENABLED%\"==\"F\" (\n+        FOR /F \"delims=\" %%i IN (%CONF_OUT_FILE%) DO (\n+            IF %%i==true SET IS_METRICS_ENABLED=T\n+            REM Prevent falling into else block\n+            GOTO :enableAgent\n+        )\n     )\n+) ELSE (\n+    ECHO Error while reading observability configurations from the file\n+    GOTO :continueInit\n )\n \n-REM Needs to identify the ballerina arguments and the last argument which is the path of executable.\n-REM The path of executable should be provided as \\\"<path>\\\" to avoid ballerina when the path includes a space.\n-REM BAL_ARGS variable is used to store formatted string\n-set BAL_ARGS=\n-:formatAndValidateCmdArgs\n-    if \"%~1\"==\"-e\" (\n-        set \"BAL_ARGS=%BAL_ARGS% %1 %2=%3\"\n-        shift\n-        shift\n-        shift\n-        goto :formatAndValidateCmdArgs\n-    ) else (\n-        if \"%~2\"==\"\" (\n-            set \"BAL_ARGS=%BAL_ARGS% \\\"%~1\\\"\"\n-            goto :callBallerina\n-        ) else (\n-            if \"%~1\"==\"--debug\" (\n-                 set \"BAL_ARGS=%BAL_ARGS% %1 %2\"\n-                 shift\n-                 shift\n-                 goto :formatAndValidateCmdArgs\n-            ) else (\n-                 echo %*\n-                 echo \"Provided set of arguments are invalid.\"\n-                 goto end\n-            )\n+:enableAgent\n+    IF \"%IS_METRICS_ENABLED%\"==\"T\" (\n+        FOR /F \"skip=1 delims=\" %%i IN (%CONF_OUT_FILE%) DO (\n+            SET jmxPort=%%i\n+            GOTO :setJavaOpts\n         )\n+        :setJavaOpts\n+            SET JAVA_OPTS=\"-javaagent:%GW_HOME%\\lib\\gateway\\jmx_prometheus_javaagent-0.12.0.jar=%jmxPort%:%GW_HOME%\\conf\\Prometheus\\config.yml\"\n     )\n \n-REM Slurp the command line arguments. This loop allows for an unlimited number\n-REM of arguments (up to the command line limit, anyway).\n-:setupArgs\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Processing argument : `%1`\n-\tif \"\"%1\"\"==\"\"\"\" goto :formatAndValidateCmdArgs\n-\n-\tif \"\"%1\"\"==\"\"--debug\"\"    goto commandDebug\n-\tshift\n-goto setupArgs\n-\n-:commandDebug\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Running commandDebug\n-\n-\tshift\n-\tset DEBUG_PORT=%1\n-\tif \"%DEBUG_PORT%\"==\"\" goto noDebugPort\n-\techo Please start the remote debugging client to continue...\n-goto :formatAndValidateCmdArgs\n-\n-:noDebugPort\n-\techo Please specify the debug port after the ballerina debug option\n-goto end\n-\n-\n-:callBallerina\n-\tREM ---------- Run balx with ballerina ----------------\n-\tREM Change the windows style `\\` path separator to unix style `/path/to/file` for log file path\n-\tset \"separator=/\"\n-\tset log_path=\"%GWHOME%\\logs\\access_logs\"\n-\tcall set unix_style_path=%%log_path:\\=%separator%%%\n-\n-\tREM Do the same for analytics data file path\n-\tset usage_data_path=%GWHOME%\\api-usage-data\n-\tcall set usage_data_path=%%usage_data_path:\\=%separator%%%\n-\n-\tif %verbose%==T echo [%date% %time%] DEBUG: b7a.http.accesslog.path = \"%GWHOME%\\logs\\access_logs\"\n-\tif %verbose%==T echo [%date% %time%] DEBUG: configs = %unix_style_path%\n-\tif %verbose%==T echo [%date% %time%] DEBUG: Starting micro gateway server...\n-\n-\tREM Check if powershell is available\n-\tWHERE powershell >nul 2>nul\n-\tIF %ERRORLEVEL% NEQ 0 (\n-\t\techo [%date% %time%] WARN: Can't find powershell in the system!\n-\t\techo [%date% %time%] WARN: STDERR and STDOUT will be piped to %GWHOME%\\logs\\microgateway.log\n-\t\tREM To append to existing logs used `>>` to redirect STDERR to STDOUT used `2>&1`\n-\t\t\"%GWHOME%\\runtime\\bin\\ballerina\" run -e api.usage.data.path=%usage_data_path%   --config \"%GWHOME%\\conf\\micro-gw.conf\" %BAL_ARGS% >> \"%GWHOME%\\logs\\microgateway.log\" 2>&1\n-\t) else (\n-\t\tREM Change Java heap Xmx and Xmx values\n-\t\tpowershell -Command \"(Get-Content \\\"%GWHOME%\\runtime\\bin\\ballerina.bat\\\") | Foreach-Object {$_ -replace 'Xms.*?m','Xms%JAVA_XMS_VALUE% '} | Foreach-Object {$_ -replace 'Xmx.*?m','Xmx%JAVA_XMX_VALUE% '} | Set-Content \\\"%GWHOME%\\runtime\\bin\\ballerina_1.bat\\\"\"\n-\t\tpowershell -Command \"Remove-Item \\\"%GWHOME%\\runtime\\bin\\ballerina.bat\\\"\"\n-\t\tpowershell -Command \"Rename-Item -path \\\"%GWHOME%\\runtime\\bin\\ballerina_1.bat\\\" -newName ballerina.bat\"\n-\t\tCD \"%GWHOME%\"\n-\t\tfor /f \"skip=3 tokens=2 delims=:\" %%A in ('powershell -command \"get-host\"') do (\n-\t\t\tset /a n=!n!+1\n-\t\t\tset c=%%A\n-\t\t\tif !n!==1 set PSVersion=!c!\n-\t\t)\n-\t\tset PSVersion=!PSVersion: =!\n-\t\tif %verbose%==T echo [%date% %time%] DEBUG: PowerShell version !PSVersion! detected!\n-\t\tset PSVersion=!PSVersion:~0,1!\n-\t\techo [%date% %time%] Starting Micro-Gateway\n-\t\tIF !PSVersion! LEQ 3 (\n-\t\t\techo [%date% %time%] Starting Micro-Gateway >>  .\\logs\\microgateway.log\n-\t\t\tcall powershell \".\\runtime\\bin\\ballerina run %BAL_ARGS% --api.usage.data.path=\\\"%usage_data_path%\\\" --b7a.config.file=\".\\conf\\micro-gw.conf\" | out-file -encoding ASCII -filepath .\\logs\\microgateway.log -Append\"\n-\t\t ) else (\n-\t\t\tREM For powershell version 4 or above , We can use `tee` command for output to both file stream and stdout (Ref: https://en.wikipedia.org/wiki/PowerShell#PowerShell_4.0)\n-\t\t\tcall powershell \".\\runtime\\bin\\ballerina run %BAL_ARGS% --api.usage.data.path=\\\"%usage_data_path%\\\" --b7a.config.file=\".\\conf\\micro-gw.conf\" | tee -Append .\\logs\\microgateway.log\"\n-\t\t)\n-\t)\n-:end\n-goto endlocal\n-\n-:endlocal\n+    DEL /Q /F %CONF_OUT_FILE%\n+\n+:continueInit\n+    REM Change the windows style `\\` path separator to unix style `/path/to/file` for log file path\n+    SET \"separator=/\"\n+    SET log_path=\"%GW_HOME%\\logs\\access_logs\"\n+    CALL SET ACCESS_LOG_PATH=%%log_path:\\=%separator%%%\n+\n+    REM Do the same for analytics data file path\n+    SET usage_path=%GW_HOME%\\api-usage-data\n+    CALL SET USAGE_DATA_PATH=%%usage_path:\\=%separator%%%\n+\n+    CALL :startGateway %*\n+\n+    GOTO END\n+\n+REM -----------------------------------------------------------------------------\n+REM --- END OF MAIN PROGRAM LOGIC ---\n+REM -----------------------------------------------------------------------------\n+\n+REM -----------------------------------------------------------------------------\n+REM --- START OF FUNCTION DEFINITION ---\n+REM -----------------------------------------------------------------------------\n+\n+REM Start the gateway using internal ballerina distribution as the runtime\n+:startGateway\n+    REM Check if powershell is available\n+    SET JAVA_ARGS=-Xms%JAVA_XMS_VALUE% -Xmx%JAVA_XMX_VALUE% -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=%GW_HOME%\\heap-dump.hprof\n+    WHERE POWERSHELL >NUL 2>NUl\n+\n+    IF %ERRORLEVEL% NEQ 0 (\n+        ECHO WARN: Can't find powershell in the system!\n+        ECHO WARN: STDERR and STDOUT will be piped to %GW_HOME%\\logs\\microgateway.log\n+        \"%JAVA_HOME%\\bin\\java.exe\" %JAVA_ARGS% -Dmgw-runtime.home=%GW_HOME% -Dballerina.home=%GW_HOME%/runtime -jar \"%EXEC_FILE%\" %BAL_ARGS% --api.usage.data.path=%USAGE_DATA_PATH%  --b7a.http.accesslog.path=%ACCESS_LOG_PATH% --b7a.config.file=\"%GW_HOME%\\conf\\micro-gw.conf\" >> \"%GW_HOME%\\logs\\microgateway.log\" 2>&1\n+\n+        EXIT /B %ERRORLEVEL%\n+    ) ELSE (\n+        REM Get short path for java_home in case java_home was picked from a\n+        REM standard installation dir with space in the path ex: \"program files\"\n+        FOR %%I IN (\"%JAVA_HOME%\") DO SET JAVA_HOME=%%~sI\n+        FOR /f \"skip=3 tokens=2 delims=:\" %%A IN ('powershell -command \"get-host\"') DO (\n+            SET /a n=!n!+1\n+            SET c=%%A\n+            IF !n!==1 SET PSVersion=!c!\n+        )\n+        SET PSVersion=!PSVersion: =!\n+        SET PSVersion=!PSVersion:~0,1!\n+\n+        REM TODO: Possible solution for this complexity can be Add-Content Cmdlet. Do some RnD on it.\n+        IF !PSVersion! LEQ 3 (\n+            CALL POWERSHELL \"%JAVA_HOME%\\bin\\java.exe %JAVA_ARGS% '-Dmgw-runtime.home=%GW_HOME%' '-Dballerina.home=%GW_HOME%/runtime' -jar '%EXEC_FILE%' %BAL_ARGS% --api.usage.data.path='%USAGE_DATA_PATH%'  --b7a.http.accesslog.path='%ACCESS_LOG_PATH%' --b7a.config.file='%GW_HOME%\\conf\\micro-gw.conf' | out-file -encoding Unicode -filepath '%GW_HOME%\\logs\\microgateway.log' -Append\"\n+            EXIT /B %ERRORLEVEL%\n+        ) ELSE (\n+            REM For powershell version 4 or above , We can use `tee` command for output to both file stream and stdout (Ref: https://en.wikipedia.org/wiki/PowerShell#PowerShell_4.0)\n+            CALL POWERSHELL \"!JAVA_HOME!\\bin\\java.exe %JAVA_ARGS% '-Dmgw-runtime.home=%GW_HOME%' '-Dballerina.home=%GW_HOME%/runtime' -jar '%EXEC_FILE%' %BAL_ARGS% --api.usage.data.path='%USAGE_DATA_PATH%'  --b7a.http.accesslog.path='%ACCESS_LOG_PATH%' --b7a.config.file='%GW_HOME%\\conf\\micro-gw.conf' | tee -Append %GW_HOME%\\logs\\microgateway.log\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ffac9a1abd3a1064e5872c8c3be6ef56e5ec87b"}, "originalPosition": 271}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af94acf985eca557a177b84390a5041bdc29e059", "author": {"user": {"login": "praminda", "name": "Praminda"}}, "url": "https://github.com/wso2/product-microgateway/commit/af94acf985eca557a177b84390a5041bdc29e059", "committedDate": "2020-02-11T09:34:08Z", "message": "script: Remove access_logs param\r\n\r\nAccess log are not required to be enabled by default. \r\nUsers can add the param or pass env variable to enabled \r\nthis if required\n\nCo-Authored-By: VirajSalaka <viraj.14@cse.mrt.ac.lk>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1152, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}