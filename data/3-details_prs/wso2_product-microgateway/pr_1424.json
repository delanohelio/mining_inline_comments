{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTI5ODE4", "number": 1424, "title": "[envoy-gw] Intergrate jwt feature with gRPC server", "bodyText": "Purpose\n\nAs $subject, this will integrate jwt + cache feature with java gRPC server\nIssues\n\nFixes #1412\nAutomation tests\n\nUnit tests added: No\nIntegration tests added: No\n\nTested environments\n\nNot Tested\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-09-29T15:41:33Z", "url": "https://github.com/wso2/product-microgateway/pull/1424", "merged": true, "mergeCommit": {"oid": "f6a8c09fc9eed1a4334cf0e8fc45d8b0c103e25e"}, "closed": true, "closedAt": "2020-10-02T04:43:51Z", "author": {"login": "chashikajw"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNZPNAgH2gAyNDk0OTI5ODE4OmNlNTQwYjRlMTYxMWZmYTE4YjEwOWMxMjAxOTMxOTJkYjIwOGYyMzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdyqEy9AFqTU3NDMxMzQ4Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ce540b4e1611ffa18b109c120193192db208f233", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/ce540b4e1611ffa18b109c120193192db208f233", "committedDate": "2020-09-28T20:02:29Z", "message": "inergate jwt code with grpc server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d769320dd8792066e4be0ff784aefb34488caf4", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/4d769320dd8792066e4be0ff784aefb34488caf4", "committedDate": "2020-09-29T12:31:13Z", "message": "add dockerfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/ee38e758847971a3aadd5d01521288cec3937e46", "committedDate": "2020-09-29T14:23:05Z", "message": "optimize the code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODU3ODYy", "url": "https://github.com/wso2/product-microgateway/pull/1424#pullrequestreview-500857862", "createdAt": "2020-10-02T04:43:43Z", "commit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MzEyMzky", "url": "https://github.com/wso2/product-microgateway/pull/1424#pullrequestreview-574312392", "createdAt": "2021-01-22T14:33:29Z", "commit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozMzoyOVrOIYmtLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozMzoyOVrOIYmtLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MDg5Mw==", "bodyText": "Shall we remove the commented code lines?", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562670893", "createdAt": "2021-01-22T14:33:29Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -71,22 +76,32 @@ public String load(String s) throws Exception {\n \n                     });\n     //validate JWT token\n-    public static boolean validateToken () {\n+    public static CheckResponse validateToken (Map<String, String> headers) {\n         boolean valid = false;\n-        HashMap<String, String> request = new HashMap<String, String>();\n-        request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n-        for (Map.Entry mapElement : request.entrySet()) {\n-            String key = (String) mapElement.getKey();\n-            if (key == JWTConstants.AUTHORIZATION) {\n-                valid = HandleJWT(request);\n-                break;\n-            }\n+        CheckResponse response;\n+\n+        String token = headers.get(JWTConstants.AUTHORIZATION);\n+        //Map<String, String> request = new HashMap<String, String>();\n+        //request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MzEyNjk5", "url": "https://github.com/wso2/product-microgateway/pull/1424#pullrequestreview-574312699", "createdAt": "2021-01-22T14:33:50Z", "commit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozMzo1MFrOIYmuJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozMzo1MFrOIYmuJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTE0MA==", "bodyText": "Please remove the commented code line", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671140", "createdAt": "2021-01-22T14:33:50Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -71,22 +76,32 @@ public String load(String s) throws Exception {\n \n                     });\n     //validate JWT token\n-    public static boolean validateToken () {\n+    public static CheckResponse validateToken (Map<String, String> headers) {\n         boolean valid = false;\n-        HashMap<String, String> request = new HashMap<String, String>();\n-        request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n-        for (Map.Entry mapElement : request.entrySet()) {\n-            String key = (String) mapElement.getKey();\n-            if (key == JWTConstants.AUTHORIZATION) {\n-                valid = HandleJWT(request);\n-                break;\n-            }\n+        CheckResponse response;\n+\n+        String token = headers.get(JWTConstants.AUTHORIZATION);\n+        //Map<String, String> request = new HashMap<String, String>();\n+        //request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n+        valid = HandleJWT(token);\n+\n+        if(valid) {\n+            response = CheckResponse.newBuilder()\n+                    .setStatus(Status.newBuilder().setCode(Code.OK_VALUE).build())\n+                    .setOkResponse(OkHttpResponse.newBuilder().build())\n+                    .build();\n+        } else {\n+            response = CheckResponse.newBuilder()\n+                    .setStatus(Status.newBuilder().setCode(Code.UNAUTHENTICATED_VALUE).build())\n+                    .setDeniedResponse(DeniedHttpResponse.newBuilder().build())\n+                    .build();\n         }\n-        return valid;\n+\n+        return response;\n     }\n     //handle JWT token\n-    public static boolean HandleJWT(HashMap<String, String> requestAttributes){\n-        String accessToken = requestAttributes.get(JWTConstants.AUTHORIZATION);\n+    public static boolean HandleJWT(String accessToken){\n+        //String accessToken = requestAttributes.get(JWTConstants.AUTHORIZATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MzEzMTAz", "url": "https://github.com/wso2/product-microgateway/pull/1424#pullrequestreview-574313103", "createdAt": "2021-01-22T14:34:17Z", "commit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDoxN1rOIYmvSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDoxN1rOIYmvSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTQzMg==", "bodyText": "Please remove the commented code lines", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671432", "createdAt": "2021-01-22T14:34:17Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MzEzMjIx", "url": "https://github.com/wso2/product-microgateway/pull/1424#pullrequestreview-574313221", "createdAt": "2021-01-22T14:34:24Z", "commit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDoyNVrOIYmvlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDoyNVrOIYmvlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTUxMQ==", "bodyText": "Please remove the commented code line", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671511", "createdAt": "2021-01-22T14:34:25Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n \n-        System.out.println(request);\n \n         // use a builder to construct a new Protobuffer object\n         // jwt authentication should happens here\n         //Status status = Status.OK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MzEzMzgw", "url": "https://github.com/wso2/product-microgateway/pull/1424#pullrequestreview-574313380", "createdAt": "2021-01-22T14:34:35Z", "commit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDozNVrOIYmwCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDozNVrOIYmwCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTYyNA==", "bodyText": "Please remove the commented code lines", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671624", "createdAt": "2021-01-22T14:34:35Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n \n-        System.out.println(request);\n \n         // use a builder to construct a new Protobuffer object\n         // jwt authentication should happens here\n         //Status status = Status.OK;\n         CheckResponse response = CheckResponse.newBuilder()\n-                .setStatus(Status.newBuilder().build())\n+                .setStatus(Status.newBuilder().setCode(Code.OK_VALUE).build())\n                 .setOkResponse(OkHttpResponse.newBuilder().build())\n                 .build();\n \n+\n+        /*CheckResponse response1 = CheckResponse.newBuilder()\n+                .setStatus(Status.newBuilder().setCode(Code.UNAUTHENTICATED_VALUE).build())\n+                .setDeniedResponse(DeniedHttpResponse.newBuilder().build())\n+                .build(); */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0MzEzNDgz", "url": "https://github.com/wso2/product-microgateway/pull/1424#pullrequestreview-574313483", "createdAt": "2021-01-22T14:34:42Z", "commit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDo0MlrOIYmwTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDo0MlrOIYmwTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTY5NA==", "bodyText": "Please remove the commented code lines", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671694", "createdAt": "2021-01-22T14:34:42Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n \n-        System.out.println(request);\n \n         // use a builder to construct a new Protobuffer object\n         // jwt authentication should happens here\n         //Status status = Status.OK;\n         CheckResponse response = CheckResponse.newBuilder()\n-                .setStatus(Status.newBuilder().build())\n+                .setStatus(Status.newBuilder().setCode(Code.OK_VALUE).build())\n                 .setOkResponse(OkHttpResponse.newBuilder().build())\n                 .build();\n \n+\n+        /*CheckResponse response1 = CheckResponse.newBuilder()\n+                .setStatus(Status.newBuilder().setCode(Code.UNAUTHENTICATED_VALUE).build())\n+                .setDeniedResponse(DeniedHttpResponse.newBuilder().build())\n+                .build(); */\n+\n+        Map<String, String> headers = request.getAttributes().getRequest().getHttp().getHeadersMap();\n+\n+\n         // Use responseObserver to send a single response back\n-        responseObserver.onNext(response);\n+        CheckResponse response1 = JWTValidator.validateToken(headers);\n+        //System.out.println(\"this is response \"+ response1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 972, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}