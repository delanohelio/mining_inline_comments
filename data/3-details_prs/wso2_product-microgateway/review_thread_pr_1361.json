{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYwMzgzNTE2", "number": 1361, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTo1NDowMVrOEVrXDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTo1NDowMVrOEVrXDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMTY1OTY2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-tools/src/main/java/org/wso2/micro/gateway/tools/GetConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTo1NDowMVrOG8kSiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwNTo1NDowMVrOG8kSiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjE2MjMxNQ==", "bodyText": "Change name to populate???", "url": "https://github.com/wso2/product-microgateway/pull/1361#discussion_r466162315", "createdAt": "2020-08-06T05:54:01Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-tools/src/main/java/org/wso2/micro/gateway/tools/GetConfig.java", "diffHunk": "@@ -38,4 +42,129 @@ public void getConfigurations(String confFilePath, String fileWritePath) throws\n         }\n     }\n \n+    /**\n+     * Read configuration from program arguments, env variables and toml configuration file.\n+     * Then these configuration values will be put into a newline separated file for easier reading from the\n+     * scripts.\n+     * @param args program argument list.\n+     *             0th index should be the path to config file.\n+     *             1st index should be the path to output file.\n+     *             rest of the arguments can contain any arbitrary commandline configuration properties\n+     * @throws IOException When toml config file reading fails\n+     */\n+    public void getConfigurations(String[] args) throws IOException {\n+        String confFilePath = args [0];\n+        String fileWritePath = args [1];\n+        Map<String, String> configs = new HashMap<>();\n+\n+        getConfigsFromArgs(args, configs);\n+        if (!isComplete(configs)) {\n+            getConfigsFromEnv(configs);\n+        }\n+\n+        if (!isComplete(configs)) {\n+            getConfigsFromFile(confFilePath, configs);\n+        }\n+\n+        if (isComplete(configs)) {\n+            writeToFile(configs, fileWritePath);\n+        }\n+    }\n+\n+    private Map<String, String> getConfigsFromFile(String confFilePath, Map<String, String> currentConfigs) {\n+        File configFile = new File (confFilePath);\n+        Toml toml = new Toml();\n+        toml.read(configFile);\n+        Config config = toml.to(Config.class);\n+        String isMetricsEnabled;\n+        String jmxPort;\n+\n+        if (config.getB7a() != null && config.getB7a().getObservability() != null &&\n+                config.getB7a().getObservability().getMetrics() != null) {\n+            isMetricsEnabled = String.valueOf(config.getB7a().getObservability().getMetrics().isEnabled());\n+            jmxPort = String.valueOf(config.getB7a().getObservability().getMetrics().getPrometheus().getJmxPort());\n+            currentConfigs.putIfAbsent(CONF_METRICS_ENABLED, isMetricsEnabled);\n+            currentConfigs.putIfAbsent(CONF_JMX_PORT, jmxPort);\n+        }\n+\n+        return currentConfigs;\n+    }\n+\n+    private Map<String, String> getConfigsFromEnv(Map<String, String> currentConfigs) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093c48477d7a2c099e006ae51d1322370fd6b8ab"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1107, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}