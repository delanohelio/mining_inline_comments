{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0OTI5ODE4", "number": 1424, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozMzoyOVrOFR6njQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDo0MlrOFR6pmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MzMwNTA5OnYy", "diffSide": "RIGHT", "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozMzoyOVrOIYmtLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMToxNzoxM1rOIeL0SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MDg5Mw==", "bodyText": "Shall we remove the commented code lines?", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562670893", "createdAt": "2021-01-22T14:33:29Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -71,22 +76,32 @@ public String load(String s) throws Exception {\n \n                     });\n     //validate JWT token\n-    public static boolean validateToken () {\n+    public static CheckResponse validateToken (Map<String, String> headers) {\n         boolean valid = false;\n-        HashMap<String, String> request = new HashMap<String, String>();\n-        request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n-        for (Map.Entry mapElement : request.entrySet()) {\n-            String key = (String) mapElement.getKey();\n-            if (key == JWTConstants.AUTHORIZATION) {\n-                valid = HandleJWT(request);\n-                break;\n-            }\n+        CheckResponse response;\n+\n+        String token = headers.get(JWTConstants.AUTHORIZATION);\n+        //Map<String, String> request = new HashMap<String, String>();\n+        //request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyMTgwMA==", "bodyText": "This was removed", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r568521800", "createdAt": "2021-02-02T11:17:13Z", "author": {"login": "chashikajw"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -71,22 +76,32 @@ public String load(String s) throws Exception {\n \n                     });\n     //validate JWT token\n-    public static boolean validateToken () {\n+    public static CheckResponse validateToken (Map<String, String> headers) {\n         boolean valid = false;\n-        HashMap<String, String> request = new HashMap<String, String>();\n-        request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n-        for (Map.Entry mapElement : request.entrySet()) {\n-            String key = (String) mapElement.getKey();\n-            if (key == JWTConstants.AUTHORIZATION) {\n-                valid = HandleJWT(request);\n-                break;\n-            }\n+        CheckResponse response;\n+\n+        String token = headers.get(JWTConstants.AUTHORIZATION);\n+        //Map<String, String> request = new HashMap<String, String>();\n+        //request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MDg5Mw=="}, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MzMwNjg1OnYy", "diffSide": "RIGHT", "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozMzo1MFrOIYmuJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMToxNzoyN1rOIeL0wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTE0MA==", "bodyText": "Please remove the commented code line", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671140", "createdAt": "2021-01-22T14:33:50Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -71,22 +76,32 @@ public String load(String s) throws Exception {\n \n                     });\n     //validate JWT token\n-    public static boolean validateToken () {\n+    public static CheckResponse validateToken (Map<String, String> headers) {\n         boolean valid = false;\n-        HashMap<String, String> request = new HashMap<String, String>();\n-        request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n-        for (Map.Entry mapElement : request.entrySet()) {\n-            String key = (String) mapElement.getKey();\n-            if (key == JWTConstants.AUTHORIZATION) {\n-                valid = HandleJWT(request);\n-                break;\n-            }\n+        CheckResponse response;\n+\n+        String token = headers.get(JWTConstants.AUTHORIZATION);\n+        //Map<String, String> request = new HashMap<String, String>();\n+        //request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n+        valid = HandleJWT(token);\n+\n+        if(valid) {\n+            response = CheckResponse.newBuilder()\n+                    .setStatus(Status.newBuilder().setCode(Code.OK_VALUE).build())\n+                    .setOkResponse(OkHttpResponse.newBuilder().build())\n+                    .build();\n+        } else {\n+            response = CheckResponse.newBuilder()\n+                    .setStatus(Status.newBuilder().setCode(Code.UNAUTHENTICATED_VALUE).build())\n+                    .setDeniedResponse(DeniedHttpResponse.newBuilder().build())\n+                    .build();\n         }\n-        return valid;\n+\n+        return response;\n     }\n     //handle JWT token\n-    public static boolean HandleJWT(HashMap<String, String> requestAttributes){\n-        String accessToken = requestAttributes.get(JWTConstants.AUTHORIZATION);\n+    public static boolean HandleJWT(String accessToken){\n+        //String accessToken = requestAttributes.get(JWTConstants.AUTHORIZATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyMTkyMg==", "bodyText": "This was removed", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r568521922", "createdAt": "2021-02-02T11:17:27Z", "author": {"login": "chashikajw"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/JWTValidator/JWTValidator.java", "diffHunk": "@@ -71,22 +76,32 @@ public String load(String s) throws Exception {\n \n                     });\n     //validate JWT token\n-    public static boolean validateToken () {\n+    public static CheckResponse validateToken (Map<String, String> headers) {\n         boolean valid = false;\n-        HashMap<String, String> request = new HashMap<String, String>();\n-        request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n-        for (Map.Entry mapElement : request.entrySet()) {\n-            String key = (String) mapElement.getKey();\n-            if (key == JWTConstants.AUTHORIZATION) {\n-                valid = HandleJWT(request);\n-                break;\n-            }\n+        CheckResponse response;\n+\n+        String token = headers.get(JWTConstants.AUTHORIZATION);\n+        //Map<String, String> request = new HashMap<String, String>();\n+        //request.put(JWTConstants.AUTHORIZATION, JWTConstants.JWT_TOKEN);\n+        valid = HandleJWT(token);\n+\n+        if(valid) {\n+            response = CheckResponse.newBuilder()\n+                    .setStatus(Status.newBuilder().setCode(Code.OK_VALUE).build())\n+                    .setOkResponse(OkHttpResponse.newBuilder().build())\n+                    .build();\n+        } else {\n+            response = CheckResponse.newBuilder()\n+                    .setStatus(Status.newBuilder().setCode(Code.UNAUTHENTICATED_VALUE).build())\n+                    .setDeniedResponse(DeniedHttpResponse.newBuilder().build())\n+                    .build();\n         }\n-        return valid;\n+\n+        return response;\n     }\n     //handle JWT token\n-    public static boolean HandleJWT(HashMap<String, String> requestAttributes){\n-        String accessToken = requestAttributes.get(JWTConstants.AUTHORIZATION);\n+    public static boolean HandleJWT(String accessToken){\n+        //String accessToken = requestAttributes.get(JWTConstants.AUTHORIZATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTE0MA=="}, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MzMwODY2OnYy", "diffSide": "RIGHT", "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDoxN1rOIYmvSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMToxNzo0NFrOIeL1Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTQzMg==", "bodyText": "Please remove the commented code lines", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671432", "createdAt": "2021-01-22T14:34:17Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyMjA4Mw==", "bodyText": "This was removed", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r568522083", "createdAt": "2021-02-02T11:17:44Z", "author": {"login": "chashikajw"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTQzMg=="}, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MzMwOTE0OnYy", "diffSide": "RIGHT", "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDoyNVrOIYmvlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMToxNzo1N1rOIeL1_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTUxMQ==", "bodyText": "Please remove the commented code line", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671511", "createdAt": "2021-01-22T14:34:25Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n \n-        System.out.println(request);\n \n         // use a builder to construct a new Protobuffer object\n         // jwt authentication should happens here\n         //Status status = Status.OK;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyMjIzOQ==", "bodyText": "This was removed", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r568522239", "createdAt": "2021-02-02T11:17:57Z", "author": {"login": "chashikajw"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n \n-        System.out.println(request);\n \n         // use a builder to construct a new Protobuffer object\n         // jwt authentication should happens here\n         //Status status = Status.OK;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTUxMQ=="}, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MzMwOTg4OnYy", "diffSide": "RIGHT", "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDozNVrOIYmwCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDozNVrOIYmwCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTYyNA==", "bodyText": "Please remove the commented code lines", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671624", "createdAt": "2021-01-22T14:34:35Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n \n-        System.out.println(request);\n \n         // use a builder to construct a new Protobuffer object\n         // jwt authentication should happens here\n         //Status status = Status.OK;\n         CheckResponse response = CheckResponse.newBuilder()\n-                .setStatus(Status.newBuilder().build())\n+                .setStatus(Status.newBuilder().setCode(Code.OK_VALUE).build())\n                 .setOkResponse(OkHttpResponse.newBuilder().build())\n                 .build();\n \n+\n+        /*CheckResponse response1 = CheckResponse.newBuilder()\n+                .setStatus(Status.newBuilder().setCode(Code.UNAUTHENTICATED_VALUE).build())\n+                .setDeniedResponse(DeniedHttpResponse.newBuilder().build())\n+                .build(); */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU0MzMxMDM1OnYy", "diffSide": "RIGHT", "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0yMlQxNDozNDo0MlrOIYmwTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMToxODoxMVrOIeL2hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTY5NA==", "bodyText": "Please remove the commented code lines", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r562671694", "createdAt": "2021-01-22T14:34:42Z", "author": {"login": "npamudika"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n \n-        System.out.println(request);\n \n         // use a builder to construct a new Protobuffer object\n         // jwt authentication should happens here\n         //Status status = Status.OK;\n         CheckResponse response = CheckResponse.newBuilder()\n-                .setStatus(Status.newBuilder().build())\n+                .setStatus(Status.newBuilder().setCode(Code.OK_VALUE).build())\n                 .setOkResponse(OkHttpResponse.newBuilder().build())\n                 .build();\n \n+\n+        /*CheckResponse response1 = CheckResponse.newBuilder()\n+                .setStatus(Status.newBuilder().setCode(Code.UNAUTHENTICATED_VALUE).build())\n+                .setDeniedResponse(DeniedHttpResponse.newBuilder().build())\n+                .build(); */\n+\n+        Map<String, String> headers = request.getAttributes().getRequest().getHttp().getHeadersMap();\n+\n+\n         // Use responseObserver to send a single response back\n-        responseObserver.onNext(response);\n+        CheckResponse response1 = JWTValidator.validateToken(headers);\n+        //System.out.println(\"this is response \"+ response1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUyMjM3NQ==", "bodyText": "This was removed", "url": "https://github.com/wso2/product-microgateway/pull/1424#discussion_r568522375", "createdAt": "2021-02-02T11:18:11Z", "author": {"login": "chashikajw"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -18,32 +18,46 @@\n \n package org.wso2.mgw.filterchain.gRPC.server;\n \n+import com.google.rpc.Code;\n import com.google.rpc.Status;\n-import io.envoyproxy.envoy.service.auth.v2.AuthorizationGrpc;\n-import io.envoyproxy.envoy.service.auth.v2.CheckRequest;\n-import io.envoyproxy.envoy.service.auth.v2.CheckResponse;\n-import io.envoyproxy.envoy.service.auth.v2.OkHttpResponse;\n+import io.envoyproxy.envoy.service.auth.v2.*;\n import io.grpc.stub.StreamObserver;\n+import org.wso2.mgw.filterchain.JWTValidator.JWTValidator;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class ExtAuthService extends AuthorizationGrpc.AuthorizationImplBase {\n \n     @Override\n     public void check (CheckRequest request, StreamObserver<CheckResponse> responseObserver) {\n \n-        System.out.println(\"++++++++++hit+++++++++++++++\");\n+        //System.out.println(\"++++++++++hit+++++++++++++++\");\n+\n+        //System.out.println(request.getAttributes().getRequest().getHttp());\n \n-        System.out.println(request);\n \n         // use a builder to construct a new Protobuffer object\n         // jwt authentication should happens here\n         //Status status = Status.OK;\n         CheckResponse response = CheckResponse.newBuilder()\n-                .setStatus(Status.newBuilder().build())\n+                .setStatus(Status.newBuilder().setCode(Code.OK_VALUE).build())\n                 .setOkResponse(OkHttpResponse.newBuilder().build())\n                 .build();\n \n+\n+        /*CheckResponse response1 = CheckResponse.newBuilder()\n+                .setStatus(Status.newBuilder().setCode(Code.UNAUTHENTICATED_VALUE).build())\n+                .setDeniedResponse(DeniedHttpResponse.newBuilder().build())\n+                .build(); */\n+\n+        Map<String, String> headers = request.getAttributes().getRequest().getHttp().getHeadersMap();\n+\n+\n         // Use responseObserver to send a single response back\n-        responseObserver.onNext(response);\n+        CheckResponse response1 = JWTValidator.validateToken(headers);\n+        //System.out.println(\"this is response \"+ response1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MjY3MTY5NA=="}, "originalCommit": {"oid": "ee38e758847971a3aadd5d01521288cec3937e46"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1135, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}