{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDg0MTkw", "number": 1352, "title": "Add sample JWT generator project", "bodyText": "Purpose\nAdding a sample JWT generator project to the samples folder. This sample project is to be used to refer in the documentation of backend JWT generation.\nIssues\nTask\nAutomation tests\n\nUnit tests added: No\nIntegration tests added: No\n\nTested environments\nUbuntu 20.04\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-07-24T05:29:07Z", "url": "https://github.com/wso2/product-microgateway/pull/1352", "merged": true, "mergeCommit": {"oid": "b9b58bbd9f93cde68b7e4e2130de992ebd4aa5e9"}, "closed": true, "closedAt": "2020-07-27T05:13:33Z", "author": {"login": "HeshanSudarshana"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc37C-fAH2gAyNDU2MDg0MTkwOmRkOGM2YWYyMTMwZjc5NWQxNDk0MGM5NTMyNGQ4NzAwNmM3MzgzMzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2eILlAFqTU4MjIzODM5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd8c6af2130f795d14940c95324d87006c738338", "author": {"user": {"login": "HeshanSudarshana", "name": "Heshan Sudarshana"}}, "url": "https://github.com/wso2/product-microgateway/commit/dd8c6af2130f795d14940c95324d87006c738338", "committedDate": "2020-07-24T02:59:34Z", "message": "Add sample jwt generator project"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjQyMDQ3", "url": "https://github.com/wso2/product-microgateway/pull/1352#pullrequestreview-454642047", "createdAt": "2020-07-24T05:31:28Z", "commit": {"oid": "dd8c6af2130f795d14940c95324d87006c738338"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozMToyOFrOG2jjkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNTozMToyOFrOG2jjkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTg1ODgzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            </project>\n          \n          \n            \n            </project>", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r459858835", "createdAt": "2020-07-24T05:31:28Z", "author": {"login": "praminda"}, "path": "samples/sample-jwt-generator/pom.xml", "diffHunk": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>org.example</groupId>\n+    <artifactId>sample-jwt-generator</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.wso2.am.microgw</groupId>\n+            <artifactId>mgw-jwt-generator</artifactId>\n+            <version>3.2.0</version>\n+        </dependency>\n+    </dependencies>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd8c6af2130f795d14940c95324d87006c738338"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f16b80169881856eb1adcf6e372aec839e22417", "author": {"user": {"login": "HeshanSudarshana", "name": "Heshan Sudarshana"}}, "url": "https://github.com/wso2/product-microgateway/commit/6f16b80169881856eb1adcf6e372aec839e22417", "committedDate": "2020-07-27T02:59:52Z", "message": "Update samples/sample-jwt-generator/pom.xml\n\nCo-authored-by: Praminda <pramindabj@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b646739ebf5ed7a559b9f295fdacf2713e33900a", "author": {"user": {"login": "HeshanSudarshana", "name": "Heshan Sudarshana"}}, "url": "https://github.com/wso2/product-microgateway/commit/b646739ebf5ed7a559b9f295fdacf2713e33900a", "committedDate": "2020-07-27T04:31:09Z", "message": "Add license headers to files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03", "author": {"user": {"login": "HeshanSudarshana", "name": "Heshan Sudarshana"}}, "url": "https://github.com/wso2/product-microgateway/commit/2b347de5c774edc556e069c88902055a7c1e7f03", "committedDate": "2020-07-27T04:33:03Z", "message": "Merge branch 'backend-jwt' of https://github.com/HeshanSudarshana/product-microgateway into backend-jwt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NDc1MzQ2", "url": "https://github.com/wso2/product-microgateway/pull/1352#pullrequestreview-455475346", "createdAt": "2020-07-27T05:12:54Z", "commit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MDcxMDI0", "url": "https://github.com/wso2/product-microgateway/pull/1352#pullrequestreview-564071024", "createdAt": "2021-01-08T08:13:42Z", "commit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwODoxMzo0MlrOIQJMgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwODoxMzo0MlrOIQJMgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzc5ODc4NA==", "bodyText": "Shall we add the year here?", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r553798784", "createdAt": "2021-01-08T08:13:42Z", "author": {"login": "Meruja"}, "path": "samples/sample-jwt-generator/pom.xml", "diffHunk": "@@ -0,0 +1,35 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyMjM4MTg0", "url": "https://github.com/wso2/product-microgateway/pull/1352#pullrequestreview-582238184", "createdAt": "2021-02-03T10:54:59Z", "commit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDo1NTowMFrOIe8Yaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDo1NTowMFrOIe8Yaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzQ4Mw==", "bodyText": "Please format the code", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r569317483", "createdAt": "2021-02-03T10:55:00Z", "author": {"login": "tgtshanika"}, "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package sample.jwt.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class SampleJWTGenerator extends AbstractMGWJWTGenerator {\n+    public SampleJWTGenerator(String dialectURI,\n+                                String signatureAlgorithm,\n+                                String keyStorePath,\n+                                String keyStorePassword,\n+                                String certificateAlias,\n+                                String privateKeyAlias,\n+                                int jwtExpiryTime,\n+                                String[] restrictedClaims,\n+                                boolean cacheEnabled,\n+                                int cacheExpiry,\n+                                String tokenIssuer,\n+                                String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgyMjM4Mzkx", "url": "https://github.com/wso2/product-microgateway/pull/1352#pullrequestreview-582238391", "createdAt": "2021-02-03T10:55:14Z", "commit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDo1NToxNFrOIe8ZAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxMDo1NToxNFrOIe8ZAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTMxNzYzNA==", "bodyText": "formatting issue", "url": "https://github.com/wso2/product-microgateway/pull/1352#discussion_r569317634", "createdAt": "2021-02-03T10:55:14Z", "author": {"login": "tgtshanika"}, "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleJWTGenerator.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package sample.jwt.generator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+public class SampleJWTGenerator extends AbstractMGWJWTGenerator {\n+    public SampleJWTGenerator(String dialectURI,\n+                                String signatureAlgorithm,\n+                                String keyStorePath,\n+                                String keyStorePassword,\n+                                String certificateAlias,\n+                                String privateKeyAlias,\n+                                int jwtExpiryTime,\n+                                String[] restrictedClaims,\n+                                boolean cacheEnabled,\n+                                int cacheExpiry,\n+                                String tokenIssuer,\n+                                String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {\n+                Map<String, Object> customClaims = (Map<String, Object>) jwtInfo.get(key);\n+                for (String subKey: customClaims.keySet()) {\n+                    if (!restrictedClaims.contains(subKey)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b347de5c774edc556e069c88902055a7c1e7f03"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 939, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}