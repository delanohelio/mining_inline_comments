{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MDcyOTIz", "number": 1405, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNTowNjo1MlrOEdecDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNTowNjo1MlrOEdecDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzQyODYxOnYy", "diffSide": "RIGHT", "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleClaimRetriever.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNTowNjo1MlrOHIpn-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwNTowNjo1MlrOHIpn-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgzMjYzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        URL url = new URL(userInfoEndpoint);\n          \n          \n            \n                        // Using `java.net.*` libs here to keep the simplicity and avoid the need of third party libs.\n          \n          \n            \n                        // You can any third party http libs to do the same differently if you prefer\n          \n          \n            \n                        URL url = new URL(userInfoEndpoint);", "url": "https://github.com/wso2/product-microgateway/pull/1405#discussion_r478832635", "createdAt": "2020-08-28T05:06:52Z", "author": {"login": "praminda"}, "path": "samples/sample-jwt-generator/src/main/java/sample/jwt/generator/SampleClaimRetriever.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.jwt.generator;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.Logger;\n+\n+import java.io.BufferedReader;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.URL;\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyManagementException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.net.ssl.HttpsURLConnection;\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocketFactory;\n+import javax.net.ssl.TrustManagerFactory;\n+\n+/**\n+ * Class to retrieve user claims from Key Manager component of the API Manager.\n+ */\n+public class SampleClaimRetriever extends AbstractMGWClaimRetriever {\n+    private static final Logger logger = LogManager.getLogger(AbstractMGWJWTGenerator.class);\n+    private SSLSocketFactory sslSocketFactory;\n+    private String username;\n+    private String password;\n+    private String serverUrl;\n+\n+    public SampleClaimRetriever(String trustStorePath, String trustStoreLocation,\n+                                 Map<String, String> configurationMap) {\n+        super(trustStorePath, trustStoreLocation, configurationMap);\n+        //the following properties are populated by default\n+        this.username = configurationMap.get(\"username\");\n+        this.password = configurationMap.get(\"password\");\n+        this.serverUrl = configurationMap.get(\"serverUrl\");\n+        sslSocketFactory = createSSLSocketFactory();\n+    }\n+\n+    @Override\n+    public List<ClaimDTO> retrieveClaims(Map<String, Object> authContext) {\n+        try {\n+            HttpsURLConnection urlConn = null;\n+            String userInfoEndpoint = serverUrl + \"/keymanager-operations/user-info/claims/generate\";\n+            URL url = new URL(userInfoEndpoint);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d4188f4dfc9577307ceb4a0f6dc46f2139a9b0b"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1123, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}