{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNDY2NTc5", "number": 934, "reviewThreads": {"totalCount": 57, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxNzowNFrODYZf4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODowMzoxNVrODaaJ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTEwMTc4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxNzowNFrOFePAPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxNzowNFrOFePAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NzQyMg==", "bodyText": "Instead of log:printDebug use printDebug(..).", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367247422", "createdAt": "2020-01-16T06:17:04Z", "author": {"login": "hasuniea"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,184 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        log:printDebug(\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if(gRPCConnection == false){\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else{\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+                var stop = gRPCConnectTimer.stop();\n+                if (stop is error) {\n+                    log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                    return;\n+                }\n+                taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+//registers server message listner (AnalyticsSendServiceMessageListener)\n+public function initGRPCService(){\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \"\n+                                           + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        log:printDebug(\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+//ping MessageSend\n+public function pingMessage(AnalyticsStreamMessage message){\n+    log:printDebug(\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printDebug(\"Error from Connector: \" + connErr.reason() + \" - \"\n+                                       + <string> connErr.detail()[\"message\"]);\n+            \n+        } else {\n+            log:printDebug(\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+//publishes data to relevant stream\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    log:printDebug(\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \"\n+                                       + <string> connErr.detail()[\"message\"]);\n+           \n+        } else {\n+            log:printDebug(\"gRPC analytics data published successfully: \");\n+        }\n+}\n+\n+//server message listner\n+service AnalyticsSendServiceMessageListener = service {\n+\n+    resource function onMessage(string message) {\n+    }\n+\n+    resource function onError(error err) {\n+        log:printDebug(\"On error method in gRPC listner.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTEwMjg4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxNzo1MVrOFePA5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxNzo1MVrOFePA5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NzU4OQ==", "bodyText": "I think it's better to put method level comments.", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367247589", "createdAt": "2020-01-16T06:17:51Z", "author": {"login": "hasuniea"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,184 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        log:printDebug(\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if(gRPCConnection == false){\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else{\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+                var stop = gRPCConnectTimer.stop();\n+                if (stop is error) {\n+                    log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                    return;\n+                }\n+                taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+//registers server message listner (AnalyticsSendServiceMessageListener)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTEwMzc0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxODoyMVrOFePBfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxODoyMVrOFePBfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0Nzc0MA==", "bodyText": "Please remove the new line.", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367247740", "createdAt": "2020-01-16T06:18:21Z", "author": {"login": "hasuniea"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,184 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        log:printDebug(\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if(gRPCConnection == false){\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else{\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+                var stop = gRPCConnectTimer.stop();\n+                if (stop is error) {\n+                    log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                    return;\n+                }\n+                taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+//registers server message listner (AnalyticsSendServiceMessageListener)\n+public function initGRPCService(){\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \"\n+                                           + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        log:printDebug(\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+//ping MessageSend\n+public function pingMessage(AnalyticsStreamMessage message){\n+    log:printDebug(\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printDebug(\"Error from Connector: \" + connErr.reason() + \" - \"\n+                                       + <string> connErr.detail()[\"message\"]);\n+            ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTEwNDk4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxODo1OVrOFePCHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxODo1OVrOFePCHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0NzkwMg==", "bodyText": "Please remove extra new line lines.", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367247902", "createdAt": "2020-01-16T06:18:59Z", "author": {"login": "hasuniea"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -122,3 +162,170 @@ function doFilterAll(http:Response response, http:FilterContext context) {\n         doFilterFault(context, resp);\n     }\n }\n+\n+//creates response stream gRPC Analytics message\n+public function createResponseMessage(RequestResponseExecutionDTO requestResponseExecutionDTO) returns AnalyticsStreamMessage {\n+    log:printDebug( \"createResponse stream method called.\");\n+    AnalyticsStreamMessage responseAnalyticsMessage = {\n+     messageStreamName: \"InComingRequestStream\",\n+     meta_clientType : <string>requestResponseExecutionDTO.metaClientType ,\n+     applicationConsumerKey : <string>requestResponseExecutionDTO.applicationConsumerKey ,\n+     applicationName : <string>requestResponseExecutionDTO.applicationName ,\n+     applicationId : <string>requestResponseExecutionDTO.applicationId ,\n+     applicationOwner : <string>requestResponseExecutionDTO.applicationOwner ,\n+     apiContext : <string>requestResponseExecutionDTO.apiContext ,\n+     apiName : <string> requestResponseExecutionDTO.apiName ,\n+     apiVersion : <string>requestResponseExecutionDTO.apiVersion ,\n+     apiResourcePath : <string>requestResponseExecutionDTO.apiResourcePath ,\n+     apiResourceTemplate : <string>requestResponseExecutionDTO.apiResourceTemplate ,\n+     apiMethod : <string>requestResponseExecutionDTO.apiMethod ,\n+     apiCreator : <string>requestResponseExecutionDTO.apiCreator ,\n+     apiCreatorTenantDomain : <string>requestResponseExecutionDTO.apiCreatorTenantDomain ,\n+     apiTier : <string>requestResponseExecutionDTO.apiTier ,\n+     apiHostname : <string>requestResponseExecutionDTO.apiHostname ,\n+     username : <string>requestResponseExecutionDTO.userName ,\n+     userTenantDomain : <string>requestResponseExecutionDTO.userTenantDomain ,\n+     userIp : <string>requestResponseExecutionDTO.userIp ,\n+     userAgent : <string>requestResponseExecutionDTO.userAgent ,\n+     requestTimestamp : requestResponseExecutionDTO.requestTimestamp ,\n+     throttledOut : requestResponseExecutionDTO.throttledOut ,\n+     responseTime :requestResponseExecutionDTO.responseTime ,\n+     serviceTime : requestResponseExecutionDTO.serviceTime ,\n+     backendTime : requestResponseExecutionDTO.backendTime ,\n+     responseCacheHit : requestResponseExecutionDTO.responseCacheHit ,\n+     responseSize : requestResponseExecutionDTO.responseSize ,\n+     protocol : requestResponseExecutionDTO.protocol ,\n+     responseCode  : requestResponseExecutionDTO.responseCode ,\n+     destination : requestResponseExecutionDTO.destination ,\n+     securityLatency  : requestResponseExecutionDTO.executionTime.securityLatency ,\n+     throttlingLatency  : requestResponseExecutionDTO.executionTime.throttlingLatency , \n+     requestMedLat : requestResponseExecutionDTO.executionTime.requestMediationLatency ,\n+     responseMedLat : requestResponseExecutionDTO.executionTime.responseMediationLatency , \n+     backendLatency : requestResponseExecutionDTO.executionTime.backEndLatency , \n+     otherLatency : requestResponseExecutionDTO.executionTime.otherLatency , \n+     gatewayType : <string>requestResponseExecutionDTO.gatewayType , \n+     label  : <string>requestResponseExecutionDTO.label,\n+\n+     subscriber : \"\",\n+     throttledOutReason : \"\",\n+     throttledOutTimestamp : 0,\n+     hostname : \"\",\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+\n+    return responseAnalyticsMessage;\n+}\n+\n+//creates throttle stream gRPC Analytics message\n+public function createThrottleMessage(ThrottleAnalyticsEventDTO throttleAnalyticsEventDTO) returns AnalyticsStreamMessage{\n+    log:printDebug( \"createThrottleMessage method called\");\n+    AnalyticsStreamMessage throttleAnalyticsMessage = {\n+     messageStreamName: \"ThrottledOutStream\",\n+     meta_clientType : throttleAnalyticsEventDTO.metaClientType,\n+     applicationConsumerKey : \"\",\n+     applicationName : throttleAnalyticsEventDTO.applicationName,\n+     applicationId : throttleAnalyticsEventDTO.applicationId,\n+     applicationOwner : \"\",\n+     apiContext : throttleAnalyticsEventDTO.apiContext,\n+     apiName : throttleAnalyticsEventDTO.apiName,\n+     apiVersion : throttleAnalyticsEventDTO.apiVersion,\n+     apiResourcePath : \"\",\n+     apiResourceTemplate : \"\",\n+     apiMethod : \"\",\n+     apiCreator : throttleAnalyticsEventDTO.apiCreator,\n+     apiCreatorTenantDomain : throttleAnalyticsEventDTO.apiCreatorTenantDomain,\n+     apiTier : \"\",\n+     apiHostname : \"\",\n+     username : throttleAnalyticsEventDTO.userName,\n+     userTenantDomain : throttleAnalyticsEventDTO.userTenantDomain,\n+     userIp : \"\",\n+     userAgent : \"\",\n+     requestTimestamp : 0,\n+     throttledOut : false,\n+     responseTime :0,\n+     serviceTime : 0,\n+     backendTime : 0,\n+     responseCacheHit : false,\n+     responseSize : 0,\n+     protocol : \"\",\n+     responseCode  : 0,\n+     destination : \"\",\n+     securityLatency  : 0,\n+     throttlingLatency  : 0,\n+     requestMedLat : 0 ,\n+     responseMedLat : 0,\n+     backendLatency : 0 ,\n+     otherLatency : 0,\n+     gatewayType : throttleAnalyticsEventDTO.gatewayType,\n+     label  : \"\",\n+\n+     subscriber : throttleAnalyticsEventDTO.subscriber,\n+     throttledOutReason : throttleAnalyticsEventDTO.throttledOutReason,\n+     throttledOutTimestamp : throttleAnalyticsEventDTO.throttledTime,\n+     hostname : throttleAnalyticsEventDTO.hostname,\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+    return throttleAnalyticsMessage;\n+}\n+\n+\n+//creates fault stream gRPC Analytics message\n+public function createFaultMessage(FaultDTO faultDTO)returns AnalyticsStreamMessage{\n+    log:printDebug( \"createFaultMessage method called.\");\n+    int errorCodeValue = faultDTO.errorCode;\n+    AnalyticsStreamMessage faultAnalyticsMessage = {\n+     messageStreamName: \"FaultStream\",\n+     meta_clientType : faultDTO. metaClientType,\n+     applicationConsumerKey : faultDTO.consumerKey,\n+     applicationName : faultDTO.applicationName,\n+     applicationId : faultDTO.applicationId,\n+     applicationOwner : \"\",\n+     apiContext : faultDTO.apiContext,\n+     apiName : faultDTO.apiName,\n+     apiVersion : faultDTO.apiVersion,\n+     apiResourcePath : faultDTO.resourcePath,\n+     apiResourceTemplate : \"\",\n+     apiMethod : faultDTO.method,\n+     apiCreator : faultDTO.apiCreator,\n+     apiCreatorTenantDomain : faultDTO.apiCreatorTenantDomain,\n+     apiTier : \"\",\n+     apiHostname : \"\",\n+     username : faultDTO.userName,\n+     userTenantDomain : faultDTO.userTenantDomain,\n+     userIp : \"\",\n+     userAgent : \"\",\n+     requestTimestamp : faultDTO.faultTime,\n+     throttledOut : false,\n+     responseTime :0,\n+     serviceTime : 0,\n+     backendTime : 0,\n+     responseCacheHit : false,\n+     responseSize : 0,\n+     protocol : faultDTO.protocol,\n+     responseCode  : 0,\n+     destination : \"\",\n+     securityLatency  : 0,\n+     throttlingLatency  : 0,\n+     requestMedLat : 0 ,\n+     responseMedLat : 0,\n+     backendLatency : 0 ,\n+     otherLatency : 0,\n+     gatewayType : \"\",\n+     label  : \"\",\n+\n+     subscriber : \"\",\n+     throttledOutReason : \"\",\n+     throttledOutTimestamp : 0,\n+     hostname : faultDTO.hostName,\n+ \n+    errorCode : errorCodeValue.toString(),\n+    errorMessage : faultDTO.errorMessage\n+    };\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a"}, "originalPosition": 303}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTEwNjIzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxOTo0MVrOFePC0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoxOTo0MVrOFePC0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0ODA4Mg==", "bodyText": "Please correct the formatting issues in the whole file", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367248082", "createdAt": "2020-01-16T06:19:41Z", "author": {"login": "hasuniea"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -79,11 +94,23 @@ function doFilterRequest(http:Request request, http:FilterContext context) {\n }\n \n function doFilterFault(http:FilterContext context, string errorMessage) {\n-    FaultDTO | error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n-    if (faultDTO is FaultDTO) {\n-        EventDTO | error eventDTO = trap getEventFromFaultData(faultDTO);\n-        if (eventDTO is EventDTO) {\n-            eventStream.publish(eventDTO);\n+    FaultDTO|error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n+    if(faultDTO is FaultDTO) {\n+        log:printDebug( \"doFilterFalut method called. Client type : \" + faultDTO. metaClientType + \" applicationName :\"+faultDTO.applicationName);\n+        if(isgRPCAnalyticsEnabled != false ){\n+            //fault stream gRPC Analytics\n+            log:printDebug(\"gRPC fault stream message creating --->\");\n+            AnalyticsStreamMessage message = createFaultMessage(faultDTO);\n+                future<()> publishedGRPCFaultStream = start dataToAnalytics(message);\n+            return;\n+        }\n+        EventDTO|error eventDTO = trap getEventFromFaultData(faultDTO);\n+        if(eventDTO is EventDTO) {\n+            if(isAnalyticsEnabled != false){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTEwNzEzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoyMDoxNlrOFePDYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoyMDoxNlrOFePDYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0ODIyNg==", "bodyText": "Please correct the formatting issue.", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367248226", "createdAt": "2020-01-16T06:20:16Z", "author": {"login": "hasuniea"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -79,11 +94,23 @@ function doFilterRequest(http:Request request, http:FilterContext context) {\n }\n \n function doFilterFault(http:FilterContext context, string errorMessage) {\n-    FaultDTO | error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n-    if (faultDTO is FaultDTO) {\n-        EventDTO | error eventDTO = trap getEventFromFaultData(faultDTO);\n-        if (eventDTO is EventDTO) {\n-            eventStream.publish(eventDTO);\n+    FaultDTO|error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n+    if(faultDTO is FaultDTO) {\n+        log:printDebug( \"doFilterFalut method called. Client type : \" + faultDTO. metaClientType + \" applicationName :\"+faultDTO.applicationName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTEwOTEwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoyMTozNFrOFePEkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoyMTozNFrOFePEkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0ODUyOA==", "bodyText": "Please correct formatting issue", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367248528", "createdAt": "2020-01-16T06:21:34Z", "author": {"login": "hasuniea"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +35,29 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        log:printDebug(\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n-                    if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n-                        if (eventDTO is EventDTO) {\n-                            eventStream.publish(eventDTO);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    if(throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTExMDAwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoyMjowNVrOFePFFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoyMjowNVrOFePFFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0ODY2MA==", "bodyText": "Please format the whole file.", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367248660", "createdAt": "2020-01-16T06:22:05Z", "author": {"login": "hasuniea"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +35,29 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        log:printDebug(\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n-                    if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n-                        if (eventDTO is EventDTO) {\n-                            eventStream.publish(eventDTO);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    if(throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n+                        if(isgRPCAnalyticsEnabled != false){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTExMzk3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoyNDozOFrOFePHXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNjoyNDozOFrOFePHXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzI0OTI0Nw==", "bodyText": "Correct the formatting issues in this file as well.", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367249247", "createdAt": "2020-01-16T06:24:38Z", "author": {"login": "hasuniea"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal", "diffHunk": "@@ -131,9 +142,28 @@ function getAnalyticsEnableConfig() {\n     rotatingTime = <int>vals[ROTATING_TIME];\n     uploadingUrl = <string>vals[UPLOADING_EP];\n     configsRead = true;\n+    log:printDebug(\"File upload analytics uploading URL : \"+ uploadingUrl);\n     printDebug(KEY_UTILS, \"Analytics configuration values read\");\n }\n \n+function initializegRPCAnalytics(){\n+    printDebug(KEY_UTILS, \"gRPC Analytics configuration values read\");\n+    map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+    isgRPCAnalyticsEnabled = <boolean>gRPCConfigs[ENABLE];\n+    endpointURL = <string>gRPCConfigs[GRPC_ENDPOINT_URL];\n+    gRPCReconnectTime = <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+\n+    log:printDebug( \"gRPC endpoint URL : \" + endpointURL);\n+    log:printDebug( \"gRPC keyStore file : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"));\n+    log:printDebug( \"gRPC keyStore password  : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\"));\n+    log:printDebug( \"gRPC trustStore file : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"));\n+    log:printDebug( \"gRPC tustStore password  : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\"));\n+    log:printDebug( \"gRPC retry time  : \" + gRPCReconnectTime.toString());\n+\n+    if(isgRPCAnalyticsEnabled == true){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f7a97a3e9ac4c686a2b0cd91d93c7390346646a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU3MzY3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/.factorypath", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0NDo1MVrOFeTbug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0NDo1MVrOFeTbug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMxOTk5NA==", "bodyText": "Please remove all .factorypath from the PR", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367319994", "createdAt": "2020-01-16T09:44:51Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/.factorypath", "diffHunk": "@@ -0,0 +1,231 @@\n+<factorypath>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU3NTIyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/.factorypath", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0NToyM1rOFeTcoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0NToyM1rOFeTcoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMDIyNQ==", "bodyText": "Please uncommit the file", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367320225", "createdAt": "2020-01-16T09:45:23Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/.factorypath", "diffHunk": "@@ -0,0 +1,158 @@\n+<factorypath>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU3Njk2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0NTo1OFrOFeTdrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxNDoyMzo1MFrOFfK8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMDQ5NQ==", "bodyText": "@VirajSalaka Can you please have a look at the proto file?", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367320495", "createdAt": "2020-01-16T09:45:58Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "diffHunk": "@@ -0,0 +1,61 @@\n+syntax = \"proto3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyOTQzOQ==", "bodyText": "looks good.", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368229439", "createdAt": "2020-01-18T14:23:50Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "diffHunk": "@@ -0,0 +1,61 @@\n+syntax = \"proto3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMDQ5NQ=="}, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU3NzcxOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0NjoxNFrOFeTeIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0NjoxNFrOFeTeIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMDYwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367320608", "createdAt": "2020-01-16T09:46:14Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "diffHunk": "@@ -0,0 +1,61 @@\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+\n+option java_package = \"org.wso2.analytics.mgw.grpc.service\";\n+\n+import \"google/protobuf/empty.proto\";\n+\n+message AnalyticsStreamMessage {\n+    string messageStreamName = 1;\n+    string meta_clientType = 2;\n+    string applicationConsumerKey = 3;\n+    string applicationName = 4;\n+    string applicationId = 5;\n+    string applicationOwner = 6;\n+    string apiContext = 7;\n+    string apiName = 8;\n+    string apiVersion = 9;\n+    string apiResourcePath = 10;\n+    string apiResourceTemplate = 11;\n+    string apiMethod = 12;\n+    string apiCreator = 13;\n+    string apiCreatorTenantDomain = 14;\n+    string apiTier = 15;\n+    string apiHostname = 16;\n+    string username = 17;\n+    string userTenantDomain = 18;\n+    string userIp = 19;\n+    string userAgent = 20;\n+    int64 requestTimestamp  = 21;\n+    bool throttledOut = 22;\n+    int64 responseTime = 23;\n+    int64 serviceTime  = 24;\n+    int64 backendTime = 25;\n+    bool responseCacheHit = 26;\n+    int64 responseSize = 27;\n+    string protocol = 28;\n+    int32 responseCode = 29;\n+    string destination = 30;\n+    int64 securityLatency = 31;\n+    int64 throttlingLatency = 32;\n+    int64 requestMedLat = 33;\n+    int64 responseMedLat = 34;\n+    int64 backendLatency = 35;\n+    int64 otherLatency = 36;\n+    string gatewayType = 37;\n+    string label = 38;\n+\n+    string subscriber = 39;\n+    string throttledOutReason = 40;\n+    int64 throttledOutTimestamp = 41;\n+    string hostname = 42;\n+ \n+    string errorCode = 43;\n+    string errorMessage = 44;\n+}\n+\n+\n+service AnalyticsSendService {\n+    rpc sendAnalytics(stream AnalyticsStreamMessage) returns(google.protobuf.Empty);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU4NTAzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0ODozNFrOFeTiig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo0ODozNFrOFeTiig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMTczOA==", "bodyText": "Is this entire block formatted correctly? I think leading ' ' (space) can be removed\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             public const string ZIP_EXTENSION = \".zip\";\n          \n          \n            \n            public const string ZIP_EXTENSION = \".zip\";", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367321738", "createdAt": "2020-01-16T09:48:34Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "diffHunk": "@@ -122,33 +122,38 @@ public const string ENABLE = \"enable\";\n public const string REQUIRE = \"require\";\n \n //Analytics filter related constants\n-public const string ZIP_EXTENSION = \".zip\";\n-public const string UPLOADING_URL = \"uploadingUrl\";\n-public const string API_USAGE_FILE = \"api-usage-data.dat\";\n-public const string TIME_INTERVAL = \"timeInterval\";\n-public const string FILE_NAME = \"FileName\";\n-public const string ACCEPT = \"Accept\";\n-public const string ANALYTICS = \"analytics\";\n-public const string UPLOADING_TIME_SPAN = \"uploadingTimeSpanInMillis\";\n-public const string ROTATING_TIME = \"rotatingPeriod\";\n-public const string UPLOADING_EP = \"uploadingEndpoint\";\n-public const string REQUEST_TIME = \"REQUEST_TIME\";\n-public const string DATACENTER_ID = \"datacenterId\";\n-public const string THROTTLE_LATENCY = \"THROTTLE_LATENCY\";\n-public const string SECURITY_LATENCY_AUTHN = \"SECURITY_LATENCY_AUTHN\";\n-public const string SECURITY_LATENCY_AUTHZ = \"SECURITY_LATENCY_AUTHZ\";\n-public const string SECURITY_LATENCY_AUTHZ_RESPONSE = \"SECURITY_LATENCY_AUTHZ_RESPONSE\";\n-public const string SECURITY_LATENCY_SUBS = \"SECURITY_LATENCY_SUBS\";\n-public const string SECURITY_LATENCY_VALIDATION = \"SECURITY_LATENCY_VALIDATION\";\n-public const string METHOD = \"METHOD\";\n-public const string TS_REQUEST_OUT = \"timeStampRequestOut\";\n-public const string TS_RESPONSE_IN = \"timeStampResponseIn\";\n-public const string API_USAGE_PATH = \"api.usage.data.path\";\n-public const string API_USAGE_DIR = \"api-usage-data\";\n-public const string FILE_UPLOAD_TASK = \"taskUploadFiles\";\n-public const string INITIAL_DELAY = \"initialDelayInMillis\";\n-public const string DESTINATION = \"destination\";\n+ public const string ZIP_EXTENSION = \".zip\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU5MjMyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MDo0OVrOFeTm_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MDo0OVrOFeTm_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMjg3OA==", "bodyText": "This object definition is not formatted properly. Please check the indentation.", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367322878", "createdAt": "2020-01-16T09:50:49Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -122,3 +157,167 @@ function doFilterAll(http:Response response, http:FilterContext context) {\n         doFilterFault(context, resp);\n     }\n }\n+\n+//creates response stream gRPC Analytics message\n+public function createResponseMessage(RequestResponseExecutionDTO requestResponseExecutionDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createResponse stream method called.\");\n+    AnalyticsStreamMessage responseAnalyticsMessage = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU5MzY1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MToxMlrOFeTnwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MToxMlrOFeTnwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzA3Mw==", "bodyText": "Same here, Please check the indentation", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323073", "createdAt": "2020-01-16T09:51:12Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -122,3 +157,167 @@ function doFilterAll(http:Response response, http:FilterContext context) {\n         doFilterFault(context, resp);\n     }\n }\n+\n+//creates response stream gRPC Analytics message\n+public function createResponseMessage(RequestResponseExecutionDTO requestResponseExecutionDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createResponse stream method called.\");\n+    AnalyticsStreamMessage responseAnalyticsMessage = {\n+     messageStreamName: \"InComingRequestStream\",\n+     meta_clientType : <string>requestResponseExecutionDTO.metaClientType ,\n+     applicationConsumerKey : <string>requestResponseExecutionDTO.applicationConsumerKey ,\n+     applicationName : <string>requestResponseExecutionDTO.applicationName ,\n+     applicationId : <string>requestResponseExecutionDTO.applicationId ,\n+     applicationOwner : <string>requestResponseExecutionDTO.applicationOwner ,\n+     apiContext : <string>requestResponseExecutionDTO.apiContext ,\n+     apiName : <string> requestResponseExecutionDTO.apiName ,\n+     apiVersion : <string>requestResponseExecutionDTO.apiVersion ,\n+     apiResourcePath : <string>requestResponseExecutionDTO.apiResourcePath ,\n+     apiResourceTemplate : <string>requestResponseExecutionDTO.apiResourceTemplate ,\n+     apiMethod : <string>requestResponseExecutionDTO.apiMethod ,\n+     apiCreator : <string>requestResponseExecutionDTO.apiCreator ,\n+     apiCreatorTenantDomain : <string>requestResponseExecutionDTO.apiCreatorTenantDomain ,\n+     apiTier : <string>requestResponseExecutionDTO.apiTier ,\n+     apiHostname : <string>requestResponseExecutionDTO.apiHostname ,\n+     username : <string>requestResponseExecutionDTO.userName ,\n+     userTenantDomain : <string>requestResponseExecutionDTO.userTenantDomain ,\n+     userIp : <string>requestResponseExecutionDTO.userIp ,\n+     userAgent : <string>requestResponseExecutionDTO.userAgent ,\n+     requestTimestamp : requestResponseExecutionDTO.requestTimestamp ,\n+     throttledOut : requestResponseExecutionDTO.throttledOut ,\n+     responseTime :requestResponseExecutionDTO.responseTime ,\n+     serviceTime : requestResponseExecutionDTO.serviceTime ,\n+     backendTime : requestResponseExecutionDTO.backendTime ,\n+     responseCacheHit : requestResponseExecutionDTO.responseCacheHit ,\n+     responseSize : requestResponseExecutionDTO.responseSize ,\n+     protocol : requestResponseExecutionDTO.protocol ,\n+     responseCode  : requestResponseExecutionDTO.responseCode ,\n+     destination : requestResponseExecutionDTO.destination ,\n+     securityLatency  : requestResponseExecutionDTO.executionTime.securityLatency ,\n+     throttlingLatency  : requestResponseExecutionDTO.executionTime.throttlingLatency , \n+     requestMedLat : requestResponseExecutionDTO.executionTime.requestMediationLatency ,\n+     responseMedLat : requestResponseExecutionDTO.executionTime.responseMediationLatency , \n+     backendLatency : requestResponseExecutionDTO.executionTime.backEndLatency , \n+     otherLatency : requestResponseExecutionDTO.executionTime.otherLatency , \n+     gatewayType : <string>requestResponseExecutionDTO.gatewayType , \n+     label  : <string>requestResponseExecutionDTO.label,\n+\n+     subscriber : \"\",\n+     throttledOutReason : \"\",\n+     throttledOutTimestamp : 0,\n+     hostname : \"\",\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+    return responseAnalyticsMessage;\n+}\n+\n+//creates throttle stream gRPC Analytics message\n+public function createThrottleMessage(ThrottleAnalyticsEventDTO throttleAnalyticsEventDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createThrottleMessage method called\");\n+    AnalyticsStreamMessage throttleAnalyticsMessage = {\n+     messageStreamName: \"ThrottledOutStream\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU5NDI0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MToyNVrOFeToMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MToyNVrOFeToMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzE4Nw==", "bodyText": "Please check the indentation", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323187", "createdAt": "2020-01-16T09:51:25Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -122,3 +157,167 @@ function doFilterAll(http:Response response, http:FilterContext context) {\n         doFilterFault(context, resp);\n     }\n }\n+\n+//creates response stream gRPC Analytics message\n+public function createResponseMessage(RequestResponseExecutionDTO requestResponseExecutionDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createResponse stream method called.\");\n+    AnalyticsStreamMessage responseAnalyticsMessage = {\n+     messageStreamName: \"InComingRequestStream\",\n+     meta_clientType : <string>requestResponseExecutionDTO.metaClientType ,\n+     applicationConsumerKey : <string>requestResponseExecutionDTO.applicationConsumerKey ,\n+     applicationName : <string>requestResponseExecutionDTO.applicationName ,\n+     applicationId : <string>requestResponseExecutionDTO.applicationId ,\n+     applicationOwner : <string>requestResponseExecutionDTO.applicationOwner ,\n+     apiContext : <string>requestResponseExecutionDTO.apiContext ,\n+     apiName : <string> requestResponseExecutionDTO.apiName ,\n+     apiVersion : <string>requestResponseExecutionDTO.apiVersion ,\n+     apiResourcePath : <string>requestResponseExecutionDTO.apiResourcePath ,\n+     apiResourceTemplate : <string>requestResponseExecutionDTO.apiResourceTemplate ,\n+     apiMethod : <string>requestResponseExecutionDTO.apiMethod ,\n+     apiCreator : <string>requestResponseExecutionDTO.apiCreator ,\n+     apiCreatorTenantDomain : <string>requestResponseExecutionDTO.apiCreatorTenantDomain ,\n+     apiTier : <string>requestResponseExecutionDTO.apiTier ,\n+     apiHostname : <string>requestResponseExecutionDTO.apiHostname ,\n+     username : <string>requestResponseExecutionDTO.userName ,\n+     userTenantDomain : <string>requestResponseExecutionDTO.userTenantDomain ,\n+     userIp : <string>requestResponseExecutionDTO.userIp ,\n+     userAgent : <string>requestResponseExecutionDTO.userAgent ,\n+     requestTimestamp : requestResponseExecutionDTO.requestTimestamp ,\n+     throttledOut : requestResponseExecutionDTO.throttledOut ,\n+     responseTime :requestResponseExecutionDTO.responseTime ,\n+     serviceTime : requestResponseExecutionDTO.serviceTime ,\n+     backendTime : requestResponseExecutionDTO.backendTime ,\n+     responseCacheHit : requestResponseExecutionDTO.responseCacheHit ,\n+     responseSize : requestResponseExecutionDTO.responseSize ,\n+     protocol : requestResponseExecutionDTO.protocol ,\n+     responseCode  : requestResponseExecutionDTO.responseCode ,\n+     destination : requestResponseExecutionDTO.destination ,\n+     securityLatency  : requestResponseExecutionDTO.executionTime.securityLatency ,\n+     throttlingLatency  : requestResponseExecutionDTO.executionTime.throttlingLatency , \n+     requestMedLat : requestResponseExecutionDTO.executionTime.requestMediationLatency ,\n+     responseMedLat : requestResponseExecutionDTO.executionTime.responseMediationLatency , \n+     backendLatency : requestResponseExecutionDTO.executionTime.backEndLatency , \n+     otherLatency : requestResponseExecutionDTO.executionTime.otherLatency , \n+     gatewayType : <string>requestResponseExecutionDTO.gatewayType , \n+     label  : <string>requestResponseExecutionDTO.label,\n+\n+     subscriber : \"\",\n+     throttledOutReason : \"\",\n+     throttledOutTimestamp : 0,\n+     hostname : \"\",\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+    return responseAnalyticsMessage;\n+}\n+\n+//creates throttle stream gRPC Analytics message\n+public function createThrottleMessage(ThrottleAnalyticsEventDTO throttleAnalyticsEventDTO) returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createThrottleMessage method called\");\n+    AnalyticsStreamMessage throttleAnalyticsMessage = {\n+     messageStreamName: \"ThrottledOutStream\",\n+     meta_clientType : throttleAnalyticsEventDTO.metaClientType,\n+     applicationConsumerKey : \"\",\n+     applicationName : throttleAnalyticsEventDTO.applicationName,\n+     applicationId : throttleAnalyticsEventDTO.applicationId,\n+     applicationOwner : \"\",\n+     apiContext : throttleAnalyticsEventDTO.apiContext,\n+     apiName : throttleAnalyticsEventDTO.apiName,\n+     apiVersion : throttleAnalyticsEventDTO.apiVersion,\n+     apiResourcePath : \"\",\n+     apiResourceTemplate : \"\",\n+     apiMethod : \"\",\n+     apiCreator : throttleAnalyticsEventDTO.apiCreator,\n+     apiCreatorTenantDomain : throttleAnalyticsEventDTO.apiCreatorTenantDomain,\n+     apiTier : \"\",\n+     apiHostname : \"\",\n+     username : throttleAnalyticsEventDTO.userName,\n+     userTenantDomain : throttleAnalyticsEventDTO.userTenantDomain,\n+     userIp : \"\",\n+     userAgent : \"\",\n+     requestTimestamp : 0,\n+     throttledOut : false,\n+     responseTime :0,\n+     serviceTime : 0,\n+     backendTime : 0,\n+     responseCacheHit : false,\n+     responseSize : 0,\n+     protocol : \"\",\n+     responseCode  : 0,\n+     destination : \"\",\n+     securityLatency  : 0,\n+     throttlingLatency  : 0,\n+     requestMedLat : 0 ,\n+     responseMedLat : 0,\n+     backendLatency : 0 ,\n+     otherLatency : 0,\n+     gatewayType : throttleAnalyticsEventDTO.gatewayType,\n+     label  : \"\",\n+\n+     subscriber : throttleAnalyticsEventDTO.subscriber,\n+     throttledOutReason : throttleAnalyticsEventDTO.throttledOutReason,\n+     throttledOutTimestamp : throttleAnalyticsEventDTO.throttledTime,\n+     hostname : throttleAnalyticsEventDTO.hostname,\n+ \n+    errorCode : \"\",\n+    errorMessage : \"\"\n+    };\n+    return throttleAnalyticsMessage;\n+}\n+\n+\n+//creates fault stream gRPC Analytics message\n+public function createFaultMessage(FaultDTO faultDTO)returns AnalyticsStreamMessage {\n+    printDebug(KEY_ANALYTICS_FILTER,\"createFaultMessage method called.\");\n+    int errorCodeValue = faultDTO.errorCode;\n+    AnalyticsStreamMessage faultAnalyticsMessage = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU5NjA1OnYy", "diffSide": "LEFT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/throttle_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MTo1NlrOFeTpOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MTo1NlrOFeTpOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzQ0OA==", "bodyText": "This empty line is required", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323448", "createdAt": "2020-01-16T09:51:56Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/throttle_filter.bal", "diffHunk": "@@ -16,7 +16,6 @@\n \n import ballerina/http;\n import ballerina/runtime;\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU5NzgxOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MjoyN1rOFeTqQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MjoyN1rOFeTqQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzcxMg==", "bodyText": "Remove unwanted comments", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323712", "createdAt": "2020-01-16T09:52:27Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTU5OTc4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MzowM1rOFeTrXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MzowM1rOFeTrXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyMzk5Nw==", "bodyText": "Renamed to,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            boolean gRPCConnection = false; //check gRPC connection\n          \n          \n            \n            boolean isGRPCConnection = false; //check gRPC connection", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367323997", "createdAt": "2020-01-16T09:53:03Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYwMDc3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MzoxOFrOFeTr6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1MzoxOFrOFeTr6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNDEzOQ==", "bodyText": "Rename to,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            boolean taskStarted = false;    //to check gRPC reconnect task\n          \n          \n            \n            boolean isTaskStarted = false;    //to check gRPC reconnect task", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367324139", "createdAt": "2020-01-16T09:53:18Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYwNTYzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NDo1NFrOFeTu_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NDo1NFrOFeTu_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNDkyNw==", "bodyText": "Should be\n- }\n- else {\n+ } else {", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367324927", "createdAt": "2020-01-16T09:54:54Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYwNjc4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NToxOVrOFeTvtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NToxOVrOFeTvtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNTEwOA==", "bodyText": "How about,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (gRPCConnection == false) {\n          \n          \n            \n                    if (!gRPCConnection) {", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367325108", "createdAt": "2020-01-16T09:55:19Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYwODMzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NTo0NlrOFeTwoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NTo0NlrOFeTwoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNTM0NA==", "bodyText": "Wrong indentation", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367325344", "createdAt": "2020-01-16T09:55:46Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYxNDYzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NzozNlrOFeT0Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1NzozNlrOFeT0Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjI4Mw==", "bodyText": "Move to a method level comment. (Document the public function with ballerina doc comments)", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367326283", "createdAt": "2020-01-16T09:57:36Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYxNjY1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1ODowOFrOFeT1hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1ODowOFrOFeT1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjU5OA==", "bodyText": "Missing Ballerina doc comments for public function", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367326598", "createdAt": "2020-01-16T09:58:08Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYxNzM3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1ODoyMlrOFeT1-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1ODoyMlrOFeT1-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjcxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367326715", "createdAt": "2020-01-16T09:58:22Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    //publishes data to relevant stream\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+           ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYxODA4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1ODozNFrOFeT2cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1ODozNFrOFeT2cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNjgzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367326832", "createdAt": "2020-01-16T09:58:34Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    //publishes data to relevant stream\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+           \n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data published successfully: \");\n+        }\n+}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYyMDE1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1OToyMVrOFeT33A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwOTo1OToyMVrOFeT33A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNzE5Ng==", "bodyText": "Correct the message in comment", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367327196", "createdAt": "2020-01-16T09:59:21Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    //publishes data to relevant stream\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+           \n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data published successfully: \");\n+        }\n+}\n+\n+\n+service AnalyticsSendServiceMessageListener = service {\n+    //server message listner\n+    resource function onMessage(string message) {\n+    }\n+\n+    resource function onError(error err) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"On error method in gRPC listner.\");\n+        gRPCConnection = false;\n+        //Triggers @ when startup when there is a gRPC connection error.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYyMjY3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowMDoxMVrOFeT5Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowMDoxMVrOFeT5Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyNzU4Ng==", "bodyText": "Please correct the indentation of this code block", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367327586", "createdAt": "2020-01-16T10:00:11Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+//gRPC endpoint for http connections\n+//AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"http://localhost:9806\"));\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+int reConnectTime =  <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+boolean taskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        taskStarted = true;\n+        if (gRPCConnection == false) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        }\n+        else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            taskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+            secureSocket: {\n+                 keyStore: {\n+                       path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+                       password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+                },\n+                trustStore: {\n+                    path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+                    password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+                },\n+                verifyHostname:false //to avoid SSL certificate validation error\n+            },\n+            timeoutInMillis : 2147483647\n+} );\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);\n+        return;\n+    } else {\n+        printDebug(KEY_ANALYTICS_FILTER,\"Initialized gRPC connection sucessfully.\");\n+        gRPCEp = gRPCres;\n+    }\n+}\n+\n+public function pingMessage(AnalyticsStreamMessage message){\n+    //ping Message used to check gRPC server availability\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC reconnect Ping Message executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"Completed Sending gRPC Analytics data: \");\n+            gRPCConnection = true;\n+        }\n+}\n+\n+\n+public function dataToAnalytics(AnalyticsStreamMessage message){\n+    //publishes data to relevant stream\n+    printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data publishing method executed.\");\n+    grpc:Error? connErr = gRPCEp->send(message);\n+        if (connErr is grpc:Error) {\n+            log:printInfo(\"Error from Connector: \" + connErr.reason() + \" - \" + <string> connErr.detail()[\"message\"]);\n+           \n+        } else {\n+            printDebug(KEY_ANALYTICS_FILTER,\"gRPC analytics data published successfully: \");\n+        }\n+}\n+\n+\n+service AnalyticsSendServiceMessageListener = service {\n+    //server message listner\n+    resource function onMessage(string message) {\n+    }\n+\n+    resource function onError(error err) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"On error method in gRPC listner.\");\n+        gRPCConnection = false;\n+        //Triggers @ when startup when there is a gRPC connection error.\n+        if (err.reason() == \"{ballerina/grpc}UnavailableError\" && gRPCConnection == false) {\n+            printDebug(KEY_ANALYTICS_FILTER,\"gRPC unavaliable error identified.\");\n+            log:printError(\"Error reported from server: \" + err.reason() + \" - \" + <string> err.detail()[\"message\"]);\n+            //starts gRPC reconnect task\n+            if (taskStarted == false) {\n+                var startResult = gRPCConnectTimer.start();\n+                if (startResult is error ) {\n+                    printDebug(KEY_ANALYTICS_FILTER,\"Starting the gRPC reconnect task is failed.\");\n+                    return;\n+                }   \n+            }\n+        }\n+    }\n+\n+    resource function onComplete() {\n+    }\n+};\n+\n+AnalyticsStreamMessage gRPCPingMessage = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYzMjAyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowMzowNFrOFeT_Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowMzowNFrOFeT_Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyOTA1NQ==", "bodyText": "All our bal files are named with _ naming. Rename the file with underscore naming. Also I think this name is not meaningful enough. Shall we rename? @Rajith90 @hasuniea @VirajSalaka WDYT?", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367329055", "createdAt": "2020-01-16T10:03:04Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/AnalyticsSendService.bal", "diffHunk": "@@ -0,0 +1,177 @@\n+import ballerina/grpc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTYzNDAzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/Analytics_pb.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowMzo0NVrOFeUAWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDowMzo0NVrOFeUAWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMyOTM3MA==", "bodyText": "Rename the file with more meaningful name. Also start with lowercase letter", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367329370", "createdAt": "2020-01-16T10:03:45Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/Analytics_pb.bal", "diffHunk": "@@ -0,0 +1,94 @@\n+import ballerina/grpc;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTY4NjUwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/Analytics_pb.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDoyMDo0MVrOFeUgvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDoyMDo0MVrOFeUgvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzNzY2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367337663", "createdAt": "2020-01-16T10:20:41Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpc_client/Analytics_pb.bal", "diffHunk": "@@ -0,0 +1,94 @@\n+import ballerina/grpc;\n+\n+public type AnalyticsSendServiceClient client object {\n+\n+    *grpc:AbstractClientEndpoint;\n+\n+    private grpc:Client? grpcClient = ();\n+\n+    public function __init(string url, grpc:ClientConfiguration? config = ()) {\n+        // initialize client endpoint.\n+        grpc:Client c = new(url, config);\n+        grpc:Error? result = c.initStub(self, \"non-blocking\", ROOT_DESCRIPTOR, getDescriptorMap());\n+        if (result is grpc:Error) {\n+            error err = result;\n+            panic err;\n+        } else {\n+            self.grpcClient = c;\n+        }\n+    }\n+\n+    public remote function sendAnalytics(service msgListener, grpc:Headers? headers = ()) returns (grpc:StreamingClient|grpc:Error) {\n+        if !(self.grpcClient is grpc:Client) {\n+            error err = error(\"UninitializedFieldsErrorType\", message = \"Field(s) are not initialized\");\n+            return grpc:prepareError(grpc:INTERNAL_ERROR, \"Field(s) are not initialized\", err);\n+        }\n+        grpc:Client tempGrpcClient = <grpc:Client> self.grpcClient;\n+        return tempGrpcClient->streamingExecute(\"AnalyticsSendService/sendAnalytics\", msgListener, headers);\n+    }\n+};\n+\n+public type Empty record {|\n+    \n+|};\n+\n+\n+public type AnalyticsStreamMessage record {|\n+    string messageStreamName = \"\";\n+    string meta_clientType = \"\";\n+    string applicationConsumerKey = \"\";\n+    string applicationName = \"\";\n+    string applicationId = \"\";\n+    string applicationOwner = \"\";\n+    string apiContext = \"\";\n+    string apiName = \"\";\n+    string apiVersion = \"\";\n+    string apiResourcePath = \"\";\n+    string apiResourceTemplate = \"\";\n+    string apiMethod = \"\";\n+    string apiCreator = \"\";\n+    string apiCreatorTenantDomain = \"\";\n+    string apiTier = \"\";\n+    string apiHostname = \"\";\n+    string username = \"\";\n+    string userTenantDomain = \"\";\n+    string userIp = \"\";\n+    string userAgent = \"\";\n+    int requestTimestamp = 0;\n+    boolean throttledOut = false;\n+    int responseTime = 0;\n+    int serviceTime = 0;\n+    int backendTime = 0;\n+    boolean responseCacheHit = false;\n+    int responseSize = 0;\n+    string protocol = \"\";\n+    int responseCode = 0;\n+    string destination = \"\";\n+    int securityLatency = 0;\n+    int throttlingLatency = 0;\n+    int requestMedLat = 0;\n+    int responseMedLat = 0;\n+    int backendLatency = 0;\n+    int otherLatency = 0;\n+    string gatewayType = \"\";\n+    string label = \"\";\n+    string subscriber = \"\";\n+    string throttledOutReason = \"\";\n+    int throttledOutTimestamp = 0;\n+    string hostname = \"\";\n+    string errorCode = \"\";\n+    string errorMessage = \"\";\n+    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2OTY5MDU2OnYy", "diffSide": "RIGHT", "path": "tests/.factorypath", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDoyMjowMFrOFeUjOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDoyMjowMFrOFeUjOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzMzODI5OQ==", "bodyText": "Please uncommit this file", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r367338299", "createdAt": "2020-01-16T10:22:00Z", "author": {"login": "praminda"}, "path": "tests/.factorypath", "diffHunk": "@@ -0,0 +1,220 @@\n+<factorypath>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb380e242d134b929c1931a0c75dcaf593bc6d69"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDEwODIzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0NzoyNFrOFf1q0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo0NzoyNFrOFf1q0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkyOTQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             public const string UPLOADING_URL = \"uploadingUrl\";\n          \n          \n            \n            public const string UPLOADING_URL = \"uploadingUrl\";\n          \n      \n    \n    \n  \n\nBetter to do it for all following lines", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368929489", "createdAt": "2020-01-21T10:47:24Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "diffHunk": "@@ -123,32 +123,38 @@ public const string REQUIRE = \"require\";\n \n //Analytics filter related constants\n public const string ZIP_EXTENSION = \".zip\";\n-public const string UPLOADING_URL = \"uploadingUrl\";\n-public const string API_USAGE_FILE = \"api-usage-data.dat\";\n-public const string TIME_INTERVAL = \"timeInterval\";\n-public const string FILE_NAME = \"FileName\";\n-public const string ACCEPT = \"Accept\";\n-public const string ANALYTICS = \"analytics\";\n-public const string UPLOADING_TIME_SPAN = \"uploadingTimeSpanInMillis\";\n-public const string ROTATING_TIME = \"rotatingPeriod\";\n-public const string UPLOADING_EP = \"uploadingEndpoint\";\n-public const string REQUEST_TIME = \"REQUEST_TIME\";\n-public const string DATACENTER_ID = \"datacenterId\";\n-public const string THROTTLE_LATENCY = \"THROTTLE_LATENCY\";\n-public const string SECURITY_LATENCY_AUTHN = \"SECURITY_LATENCY_AUTHN\";\n-public const string SECURITY_LATENCY_AUTHZ = \"SECURITY_LATENCY_AUTHZ\";\n-public const string SECURITY_LATENCY_AUTHZ_RESPONSE = \"SECURITY_LATENCY_AUTHZ_RESPONSE\";\n-public const string SECURITY_LATENCY_SUBS = \"SECURITY_LATENCY_SUBS\";\n-public const string SECURITY_LATENCY_VALIDATION = \"SECURITY_LATENCY_VALIDATION\";\n-public const string METHOD = \"METHOD\";\n-public const string TS_REQUEST_OUT = \"timeStampRequestOut\";\n-public const string TS_RESPONSE_IN = \"timeStampResponseIn\";\n-public const string API_USAGE_PATH = \"api.usage.data.path\";\n-public const string API_USAGE_DIR = \"api-usage-data\";\n-public const string FILE_UPLOAD_TASK = \"taskUploadFiles\";\n-public const string INITIAL_DELAY = \"initialDelayInMillis\";\n-public const string DESTINATION = \"destination\";\n+ public const string UPLOADING_URL = \"uploadingUrl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDExOTEyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1MDo0NFrOFf1xbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMzozNDozMVrOFgPuvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMTE4Mw==", "bodyText": "Better to add a new line EOF", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368931183", "createdAt": "2020-01-21T10:50:44Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "diffHunk": "@@ -0,0 +1,60 @@\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+\n+option java_package = \"org.wso2.analytics.mgw.grpc.service\";\n+\n+import \"google/protobuf/empty.proto\";\n+\n+message AnalyticsStreamMessage {\n+    string messageStreamName = 1;\n+    string meta_clientType = 2;\n+    string applicationConsumerKey = 3;\n+    string applicationName = 4;\n+    string applicationId = 5;\n+    string applicationOwner = 6;\n+    string apiContext = 7;\n+    string apiName = 8;\n+    string apiVersion = 9;\n+    string apiResourcePath = 10;\n+    string apiResourceTemplate = 11;\n+    string apiMethod = 12;\n+    string apiCreator = 13;\n+    string apiCreatorTenantDomain = 14;\n+    string apiTier = 15;\n+    string apiHostname = 16;\n+    string username = 17;\n+    string userTenantDomain = 18;\n+    string userIp = 19;\n+    string userAgent = 20;\n+    int64 requestTimestamp  = 21;\n+    bool throttledOut = 22;\n+    int64 responseTime = 23;\n+    int64 serviceTime  = 24;\n+    int64 backendTime = 25;\n+    bool responseCacheHit = 26;\n+    int64 responseSize = 27;\n+    string protocol = 28;\n+    int32 responseCode = 29;\n+    string destination = 30;\n+    int64 securityLatency = 31;\n+    int64 throttlingLatency = 32;\n+    int64 requestMedLat = 33;\n+    int64 responseMedLat = 34;\n+    int64 backendLatency = 35;\n+    int64 otherLatency = 36;\n+    string gatewayType = 37;\n+    string label = 38;\n+\n+    string subscriber = 39;\n+    string throttledOutReason = 40;\n+    int64 throttledOutTimestamp = 41;\n+    string hostname = 42;\n+ \n+    string errorCode = 43;\n+    string errorMessage = 44;\n+}\n+\n+service AnalyticsSendService {\n+    rpc sendAnalytics(stream AnalyticsStreamMessage) returns(google.protobuf.Empty);\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1NjQ3Ng==", "bodyText": "Changed according to below suggestion.\n#934 (comment)", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r369356476", "createdAt": "2020-01-22T03:34:31Z", "author": {"login": "slahirucd7"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/Analytics.proto", "diffHunk": "@@ -0,0 +1,60 @@\n+syntax = \"proto3\";\n+\n+option java_multiple_files = true;\n+\n+option java_package = \"org.wso2.analytics.mgw.grpc.service\";\n+\n+import \"google/protobuf/empty.proto\";\n+\n+message AnalyticsStreamMessage {\n+    string messageStreamName = 1;\n+    string meta_clientType = 2;\n+    string applicationConsumerKey = 3;\n+    string applicationName = 4;\n+    string applicationId = 5;\n+    string applicationOwner = 6;\n+    string apiContext = 7;\n+    string apiName = 8;\n+    string apiVersion = 9;\n+    string apiResourcePath = 10;\n+    string apiResourceTemplate = 11;\n+    string apiMethod = 12;\n+    string apiCreator = 13;\n+    string apiCreatorTenantDomain = 14;\n+    string apiTier = 15;\n+    string apiHostname = 16;\n+    string username = 17;\n+    string userTenantDomain = 18;\n+    string userIp = 19;\n+    string userAgent = 20;\n+    int64 requestTimestamp  = 21;\n+    bool throttledOut = 22;\n+    int64 responseTime = 23;\n+    int64 serviceTime  = 24;\n+    int64 backendTime = 25;\n+    bool responseCacheHit = 26;\n+    int64 responseSize = 27;\n+    string protocol = 28;\n+    int32 responseCode = 29;\n+    string destination = 30;\n+    int64 securityLatency = 31;\n+    int64 throttlingLatency = 32;\n+    int64 requestMedLat = 33;\n+    int64 responseMedLat = 34;\n+    int64 backendLatency = 35;\n+    int64 otherLatency = 36;\n+    string gatewayType = 37;\n+    string label = 38;\n+\n+    string subscriber = 39;\n+    string throttledOutReason = 40;\n+    int64 throttledOutTimestamp = 41;\n+    string hostname = 42;\n+ \n+    string errorCode = 43;\n+    string errorMessage = 44;\n+}\n+\n+service AnalyticsSendService {\n+    rpc sendAnalytics(stream AnalyticsStreamMessage) returns(google.protobuf.Empty);\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMTE4Mw=="}, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDEzMDM1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1NDowMVrOFf14GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1NDowMVrOFf14GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMjg4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (isgRPCAnalyticsEnabled != false) {\n          \n          \n            \n                                    if (isgRPCAnalyticsEnabled) {", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368932889", "createdAt": "2020-01-21T10:54:01Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled != false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDEzMTQ5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1NDoyNlrOFf142A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1NDoyNlrOFf142A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMzA4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        if (isAnalyticsEnabled != false) {\n          \n          \n            \n                                        if (isAnalyticsEnabled) {", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368933080", "createdAt": "2020-01-21T10:54:26Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled != false) {\n+                            // throttle stream gRPC Analytics\n+                            AnalyticsStreamMessage message = createThrottleMessage(throttleAnalyticsEventDTO);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");\n+                            future<()> publishedGRPCThrottleStream = start dataToAnalytics(message);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message published.\");\n+                        }\n+                        EventDTO|error eventDTO  = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n                         if (eventDTO is EventDTO) {\n-                            eventStream.publish(eventDTO);\n+                            if (isAnalyticsEnabled != false) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDEzNTM3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1NTo1MFrOFf17Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMDo1NTo1MFrOFf17Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzMzcxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (isgRPCAnalyticsEnabled != false ) {\n          \n          \n            \n                    if (isgRPCAnalyticsEnabled) {\n          \n      \n    \n    \n  \n\nPlease change in other places as well", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368933718", "createdAt": "2020-01-21T10:55:50Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -79,11 +90,22 @@ function doFilterRequest(http:Request request, http:FilterContext context) {\n }\n \n function doFilterFault(http:FilterContext context, string errorMessage) {\n-    FaultDTO | error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n+    FaultDTO|error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n     if (faultDTO is FaultDTO) {\n-        EventDTO | error eventDTO = trap getEventFromFaultData(faultDTO);\n+        printDebug(KEY_ANALYTICS_FILTER,\"doFilterFalut method called. Client type : \" + faultDTO. metaClientType + \" applicationName :\"+faultDTO.applicationName);\n+        if (isgRPCAnalyticsEnabled != false ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE2MjkyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNToxOFrOFf2Myg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNToxOFrOFf2Myg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzODE4Ng==", "bodyText": "use printWarn instead of log:printWarn", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368938186", "createdAt": "2020-01-21T11:05:18Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE2NTU0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNjowNVrOFf2OVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNjowNVrOFf2OVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzODU4MQ==", "bodyText": "use printInfo instead of log:printInfo", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368938581", "createdAt": "2020-01-21T11:06:05Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        } else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE2Njc4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNjozMFrOFf2PGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNjozMFrOFf2PGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzODc3OA==", "bodyText": "use printError instead of log:printError", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368938778", "createdAt": "2020-01-21T11:06:30Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        } else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE2ODY0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNzoxMFrOFf2QOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNzoxMFrOFf2QOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzOTA2NA==", "bodyText": "use printError instead log:printError", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368939064", "createdAt": "2020-01-21T11:07:10Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        } else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            isTaskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+    secureSocket: {\n+        keyStore: {\n+            path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+            password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+        },\n+        trustStore: {\n+            path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+            password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+        },\n+        verifyHostname:false //to avoid SSL certificate validation error\n+    },\n+    timeoutInMillis : 2147483647\n+} );\n+\n+# `initGRPCService` function binds gRPC streaming client endpoint with server message listner.\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE2OTg5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNzo0MlrOFf2RBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMTowNzo0MlrOFf2RBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODkzOTI2OA==", "bodyText": "use printError instead log:printError", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368939268", "createdAt": "2020-01-21T11:07:42Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/grpcAnalytics/gRPC_analytics_client.bal", "diffHunk": "@@ -0,0 +1,182 @@\n+import ballerina/grpc;\n+import ballerina/log;\n+import ballerina/task;\n+\n+grpc:StreamingClient gRPCEp = new grpc:StreamingClient();\n+boolean gRPCConnection = false; //check gRPC connection\n+int reConnectTime =  <int>getConfigIntValue(GRPC_ANALYTICS,gRPC_RetryTimeMilliseconds,6000);\n+boolean isTaskStarted = false;    //to check gRPC reconnect task\n+\n+task:Scheduler gRPCConnectTimer = new({\n+        intervalInMillis :  reConnectTime,\n+        initialDelayInMillis:0\n+});\n+\n+service connectGRPC = service {\n+    resource function onTrigger(){\n+        printDebug(KEY_ANALYTICS_FILTER,\"gRPC Reconnect Task Still Running.\");\n+        isTaskStarted = true;\n+        if (!gRPCConnection) {\n+            initGRPCService();\n+            log:printWarn(\"Connection will retry again in \"+ reConnectTime.toString() +\" milliseconds.\");\n+            pingMessage(gRPCPingMessage);\n+        } else {\n+            log:printInfo(\"Successfully connected to gRPC server.\");\n+            // terminates the timer if gRPPCConnection variable assigned as false\n+            var stop = gRPCConnectTimer.stop();\n+            if (stop is error) {\n+                log:printError(\"Stopping the gRPC reconnect task is failed.\");\n+                return;\n+            }\n+            isTaskStarted = false;\n+        }\n+    }\n+};\n+\n+//gRPC secured client endpoint configuraion  \n+AnalyticsSendServiceClient nonblockingGRPCAnalyticsClient = new(getConfigValue(GRPC_ANALYTICS, GRPC_ENDPOINT_URL, \"https://localhost:9806\"),\n+config = {\n+    secureSocket: {\n+        keyStore: {\n+            path : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"), \n+            password : getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\") \n+        },\n+        trustStore: {\n+            path : getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"), \n+            password :  getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\") \n+        },\n+        verifyHostname:false //to avoid SSL certificate validation error\n+    },\n+    timeoutInMillis : 2147483647\n+} );\n+\n+# `initGRPCService` function binds gRPC streaming client endpoint with server message listner.\n+\n+public function initGRPCService(){\n+    //registers server message listner (AnalyticsSendServiceMessageListener)\n+    var attachResult = gRPCConnectTimer.attach(connectGRPC);\n+     if (attachResult is error) {\n+        log:printError(\"Error attaching the gRPC reconnect service.\");\n+        return;\n+    }\n+    var gRPCres = nonblockingGRPCAnalyticsClient -> sendAnalytics(AnalyticsSendServiceMessageListener);\n+    if (gRPCres is grpc:Error) {\n+        log:printError(\"Error from Connector: \" + gRPCres.reason() + \" - \" + <string> gRPCres.detail()[\"message\"]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE4MTk4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToxMTo1MFrOFf2YWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToxMTo1MFrOFf2YWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MTE0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (isgRPCAnalyticsEnabled == true) {\n          \n          \n            \n                if (isgRPCAnalyticsEnabled) {", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368941145", "createdAt": "2020-01-21T11:11:50Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal", "diffHunk": "@@ -126,14 +132,31 @@ function populateFaultAnalyticsDTO(http:FilterContext context, string err) retur\n \n \n function getAnalyticsEnableConfig() {\n-    map<any> vals = getConfigMapValue(ANALYTICS);\n-    isAnalyticsEnabled = <boolean>vals[ENABLE];\n-    rotatingTime = <int>vals[ROTATING_TIME];\n-    uploadingUrl = <string>vals[UPLOADING_EP];\n+    isAnalyticsEnabled = <boolean>getConfigBooleanValue(FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_ENABLE,false); \n+    rotatingTime = <int>getConfigIntValue(FILE_UPLOAD_ANALYTICS,ROTATING_TIME,600000); \n+    uploadingUrl = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,UPLOADING_EP,\"https://localhost:9444/analytics/v1.0/usage/upload-file\");\n     configsRead = true;\n+    log:printDebug(\"File upload analytics uploading URL : \"+ uploadingUrl);\n     printDebug(KEY_UTILS, \"Analytics configuration values read\");\n }\n \n+function initializegRPCAnalytics() {\n+    printDebug(KEY_UTILS, \"gRPC Analytics configuration values read\");\n+    map<any> gRPCConfigs = getConfigMapValue(GRPC_ANALYTICS);\n+    isgRPCAnalyticsEnabled = <boolean>gRPCConfigs[ENABLE];\n+    endpointURL = <string>gRPCConfigs[GRPC_ENDPOINT_URL];\n+    gRPCReconnectTime = <int>gRPCConfigs[gRPC_RetryTimeMilliseconds];\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC endpoint URL : \" + endpointURL);\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC keyStore file : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"));\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC keyStore password  : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, LISTENER_CONF_KEY_STORE_PASSWORD, \"ballerina\"));\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC trustStore file : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, \"${ballerina.home}/bre/security/ballerinaTruststore.p12\"));\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC tustStore password  : \" + <string>getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, \"ballerina\"));\n+    printDebug(KEY_ANALYTICS_FILTER, \"gRPC retry time  : \" + gRPCReconnectTime.toString());\n+\n+    if (isgRPCAnalyticsEnabled == true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MDE4NDk2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToxMjo1OVrOFf2aPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxMToxMjo1OVrOFf2aPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODk0MTYyOQ==", "bodyText": "use printDebug instead log:printDebug", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r368941629", "createdAt": "2020-01-21T11:12:59Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/analytics_util.bal", "diffHunk": "@@ -126,14 +132,31 @@ function populateFaultAnalyticsDTO(http:FilterContext context, string err) retur\n \n \n function getAnalyticsEnableConfig() {\n-    map<any> vals = getConfigMapValue(ANALYTICS);\n-    isAnalyticsEnabled = <boolean>vals[ENABLE];\n-    rotatingTime = <int>vals[ROTATING_TIME];\n-    uploadingUrl = <string>vals[UPLOADING_EP];\n+    isAnalyticsEnabled = <boolean>getConfigBooleanValue(FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_ENABLE,false); \n+    rotatingTime = <int>getConfigIntValue(FILE_UPLOAD_ANALYTICS,ROTATING_TIME,600000); \n+    uploadingUrl = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,UPLOADING_EP,\"https://localhost:9444/analytics/v1.0/usage/upload-file\");\n     configsRead = true;\n+    log:printDebug(\"File upload analytics uploading URL : \"+ uploadingUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95461d5ebf88df27d1750dc93d049f3e7cff5"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQxNDYzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/upload_files_timer.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMTo1ODozN1rOFg7t-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMTo1ODozN1rOFg7t-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3NzE3OQ==", "bodyText": "Do we still need to read config values from the new file if isOldAnalyticsEnabled is true?", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370077179", "createdAt": "2020-01-23T11:58:37Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/upload_files_timer.bal", "diffHunk": "@@ -66,14 +66,24 @@ function searchFilesToUpload() returns (error?) {\n }\n \n function timerTask() {\n-    map<any> vals = getConfigMapValue(ANALYTICS);\n-    boolean uploadFiles = <boolean>vals[FILE_UPLOAD_TASK];\n-    analyticsUsername = <string>vals[USERNAME];\n-    analyticsPassword = <string>vals[PASSWORD];\n+    boolean uploadFiles = <boolean>getConfigBooleanValue(FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_TASK,true);\n+    analyticsUsername = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,USERNAME,\"admin\");\n+    analyticsPassword = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,PASSWORD,\"admin\");\n+    if (isOldAnalyticsEnalbed) {\n+        //enables config reads for older versions\n+        uploadFiles = <boolean>getConfigBooleanValue(OLD_FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_TASK,true);\n+        analyticsUsername = <string>getConfigValue(OLD_FILE_UPLOAD_ANALYTICS,USERNAME,\"admin\");\n+        analyticsPassword = <string>getConfigValue(OLD_FILE_UPLOAD_ANALYTICS,PASSWORD,\"admin\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQxNzU0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/upload_files_timer.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMTo1OTo1MVrOFg7v6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMTo1OTo1MVrOFg7v6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3NzY3Mg==", "bodyText": "Check spellings? Enabled", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370077672", "createdAt": "2020-01-23T11:59:51Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/analytics/upload_files_timer.bal", "diffHunk": "@@ -66,14 +66,24 @@ function searchFilesToUpload() returns (error?) {\n }\n \n function timerTask() {\n-    map<any> vals = getConfigMapValue(ANALYTICS);\n-    boolean uploadFiles = <boolean>vals[FILE_UPLOAD_TASK];\n-    analyticsUsername = <string>vals[USERNAME];\n-    analyticsPassword = <string>vals[PASSWORD];\n+    boolean uploadFiles = <boolean>getConfigBooleanValue(FILE_UPLOAD_ANALYTICS,FILE_UPLOAD_TASK,true);\n+    analyticsUsername = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,USERNAME,\"admin\");\n+    analyticsPassword = <string>getConfigValue(FILE_UPLOAD_ANALYTICS,PASSWORD,\"admin\");\n+    if (isOldAnalyticsEnalbed) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQyMzUwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjowMjozNFrOFg7zyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjowMjozNFrOFg7zyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA3ODY2NA==", "bodyText": "Formatting issue? need space in between", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370078664", "createdAt": "2020-01-23T12:02:34Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQzMzIwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjowNjoyMlrOFg75uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjowNjoyMlrOFg75uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4MDE4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");\n          \n          \n            \n                                        printDebug(KEY_ANALYTICS_FILTER, \"gRPC throttle stream message created.\");", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370080187", "createdAt": "2020-01-23T12:06:22Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled) {\n+                            // throttle stream gRPC Analytics\n+                            AnalyticsStreamMessage message = createThrottleMessage(throttleAnalyticsEventDTO);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQzODA5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjowODoyMVrOFg78nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjowODoyMVrOFg78nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4MDkyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    if (isgRPCAnalyticsEnabled) {\n          \n          \n            \n                                    if (isGrpcAnalyticsEnabled) {\n          \n      \n    \n    \n  \n\nShall we make it camel case and correct all places", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370080927", "createdAt": "2020-01-23T12:08:21Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQ3MzMwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyMDoyM1rOFg8QpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyMDoyM1rOFg8QpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjA1Mw==", "bodyText": "The variable name doesn't look correct. Shall we make it like dataPublishFuture or something similar", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370086053", "createdAt": "2020-01-23T12:20:23Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled) {\n+                            // throttle stream gRPC Analytics\n+                            AnalyticsStreamMessage message = createThrottleMessage(throttleAnalyticsEventDTO);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");\n+                            future<()> publishedGRPCThrottleStream = start dataToAnalytics(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQ3NDAyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyMDozNlrOFg8Q_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyMjowN1rOFg8TRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjE0Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message published.\");\n          \n          \n            \n                                        printDebug(KEY_ANALYTICS_FILTER, \"gRPC throttle stream message published.\");", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370086142", "createdAt": "2020-01-23T12:20:36Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled) {\n+                            // throttle stream gRPC Analytics\n+                            AnalyticsStreamMessage message = createThrottleMessage(throttleAnalyticsEventDTO);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");\n+                            future<()> publishedGRPCThrottleStream = start dataToAnalytics(message);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message published.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjcyNQ==", "bodyText": "check and correct all places", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370086725", "createdAt": "2020-01-23T12:22:07Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -34,16 +34,27 @@ public type AnalyticsRequestFilter object {\n     }\n \n     public function filterResponse(http:Response response, http:FilterContext context) returns boolean {\n-        if (isAnalyticsEnabled) {\n+        printDebug(KEY_ANALYTICS_FILTER,\"FilterResponse method in analytics_request_filter invoked.\");\n+        if (isAnalyticsEnabled || isgRPCAnalyticsEnabled) {\n             boolean filterFailed = <boolean>context.attributes[FILTER_FAILED];\n             if (context.attributes.hasKey(IS_THROTTLE_OUT)) {\n                 boolean isThrottleOut = <boolean>context.attributes[IS_THROTTLE_OUT];\n                 if (isThrottleOut) {\n-                    ThrottleAnalyticsEventDTO | error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n+                    ThrottleAnalyticsEventDTO|error throttleAnalyticsEventDTO = trap populateThrottleAnalyticsDTO(context);\n                     if (throttleAnalyticsEventDTO is ThrottleAnalyticsEventDTO) {\n-                        EventDTO | error eventDTO = trap getEventFromThrottleData(throttleAnalyticsEventDTO);\n+                        if (isgRPCAnalyticsEnabled) {\n+                            // throttle stream gRPC Analytics\n+                            AnalyticsStreamMessage message = createThrottleMessage(throttleAnalyticsEventDTO);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message created.\");\n+                            future<()> publishedGRPCThrottleStream = start dataToAnalytics(message);\n+                            printDebug(KEY_ANALYTICS_FILTER,\"gRPC throttle stream message published.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NjE0Mg=="}, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQ4MDYxOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyMzoxMFrOFg8U3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyMzoxMFrOFg8U3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4NzEzMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                printDebug(KEY_ANALYTICS_FILTER,\"doFilterRequestMehtod called\");\n          \n          \n            \n                printDebug(KEY_ANALYTICS_FILTER, \"doFilterRequest method called\");", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370087133", "createdAt": "2020-01-23T12:23:10Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -66,11 +77,11 @@ public type AnalyticsRequestFilter object {\n         }\n         return true;\n     }\n-\n };\n \n \n function doFilterRequest(http:Request request, http:FilterContext context) {\n+    printDebug(KEY_ANALYTICS_FILTER,\"doFilterRequestMehtod called\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzQ4NDU3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyNDo0NlrOFg8XQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMjoyNDo0NlrOFg8XQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDA4Nzc0Ng==", "bodyText": "check spelling in the message and correct formating issues", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370087746", "createdAt": "2020-01-23T12:24:46Z", "author": {"login": "daneshk"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/analytics_request_filter.bal", "diffHunk": "@@ -79,11 +90,22 @@ function doFilterRequest(http:Request request, http:FilterContext context) {\n }\n \n function doFilterFault(http:FilterContext context, string errorMessage) {\n-    FaultDTO | error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n+    FaultDTO|error faultDTO = trap populateFaultAnalyticsDTO(context, errorMessage);\n     if (faultDTO is FaultDTO) {\n-        EventDTO | error eventDTO = trap getEventFromFaultData(faultDTO);\n+        printDebug(KEY_ANALYTICS_FILTER,\"doFilterFalut method called. Client type : \" + faultDTO. metaClientType + \" applicationName :\"+faultDTO.applicationName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDE3ODAzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/endpoints/api_gateway_endpoint.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODowMTo0MFrOFhWGmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODowMTo0MFrOFhWGmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwOTQ2NQ==", "bodyText": "Please add default config values as in #947. Correct it in all occurrences.", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370509465", "createdAt": "2020-01-24T08:01:40Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/endpoints/api_gateway_endpoint.bal", "diffHunk": "@@ -32,7 +32,7 @@ getConfigValue(KM_CONF_INSTANCE_ID, KM_SERVER_URL, \"https://localhost:9443\"),\n });\n \n http:Client analyticsFileUploadEndpoint = new (\n-getConfigValue(ANALYTICS, UPLOADING_EP, \"https://localhost:9444/analytics/v1.0/usage/upload-file\"),\n+getConfigValue(FILE_UPLOAD_ANALYTICS, UPLOADING_EP, \"https://localhost:9444/analytics/v1.0/usage/upload-file\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDE4MDY4OnYy", "diffSide": "RIGHT", "path": "distribution/resources/conf/micro-gw.conf", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODowMzoxNVrOFhWILQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODowMzoxNVrOFhWILQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUwOTg2OQ==", "bodyText": "Add this config to micro-gw-default.cong and test/base.conf", "url": "https://github.com/wso2/product-microgateway/pull/934#discussion_r370509869", "createdAt": "2020-01-24T08:03:15Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "distribution/resources/conf/micro-gw.conf", "diffHunk": "@@ -65,14 +65,19 @@ tokenCacheCapacity=10000\n tokenCacheEvictionFactor=0.25\n \n [analytics]\n-enable=false\n-uploadingTimeSpanInMillis=600000\n-initialDelayInMillis=5000\n-uploadingEndpoint=\"https://localhost:9444/analytics/v1.0/usage/upload-file\"\n-rotatingPeriod=600000\n-taskUploadFiles=true\n-username=\"admin\"\n-password=\"admin\"\n+  [analytics.fileUpload]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "834ebe7f8ce7f3187b8eb9f8e990905af064c5f1"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1356, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}