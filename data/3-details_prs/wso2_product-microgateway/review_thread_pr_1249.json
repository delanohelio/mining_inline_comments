{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNjI1NDQ4", "number": 1249, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1NTo0NFrOEAw7Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyOTowNVrOEDypig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM3MDIyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/api_gateway_cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1NTo0NFrOGcPrfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1NTo0NFrOGcPrfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MDIwNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r432270207", "createdAt": "2020-05-29T05:55:44Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/api_gateway_cache.bal", "diffHunk": "@@ -27,6 +27,8 @@ cache:Cache gatewayKeyValidationCache = new (cacheExpiryTime, cacheSize, evictio\n cache:Cache invalidTokenCache = new (cacheExpiryTime, cacheSize, evictionFactor);\n cache:Cache jwtCache = new (cacheExpiryTime, cacheSize, evictionFactor);\n cache:Cache introspectCache = new (cacheExpiryTime, cacheSize, evictionFactor);\n+cache:Cache mutualSslCertificateCache = new (cacheExpiryTime, cacheSize, evictionFactor);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09070ea5379e7fdbca059c8c0360ae4a8f8d74"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM3MTA0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/api_gateway_cache.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1NjowNVrOGcPr-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1NjowNVrOGcPr-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MDMyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r432270329", "createdAt": "2020-05-29T05:56:05Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/api_gateway_cache.bal", "diffHunk": "@@ -27,6 +27,8 @@ cache:Cache gatewayKeyValidationCache = new (cacheExpiryTime, cacheSize, evictio\n cache:Cache invalidTokenCache = new (cacheExpiryTime, cacheSize, evictionFactor);\n cache:Cache jwtCache = new (cacheExpiryTime, cacheSize, evictionFactor);\n cache:Cache introspectCache = new (cacheExpiryTime, cacheSize, evictionFactor);\n+cache:Cache mutualSslCertificateCache = new (cacheExpiryTime, cacheSize, evictionFactor);\n+\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09070ea5379e7fdbca059c8c0360ae4a8f8d74"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM3NjYzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/native/mutualSSL.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1OTozNFrOGcPvnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1OTozNFrOGcPvnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTI2Mw==", "bodyText": "License header is missing", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r432271263", "createdAt": "2020-05-29T05:59:34Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/native/mutualSSL.bal", "diffHunk": "@@ -0,0 +1,47 @@\n+import ballerinax/java;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09070ea5379e7fdbca059c8c0360ae4a8f8d74"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM3ODY1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/LoadKeyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMDo0MFrOGcPw7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMDo0MFrOGcPw7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTU5OQ==", "bodyText": "License header?", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r432271599", "createdAt": "2020-05-29T06:00:40Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/LoadKeyStore.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.wso2.micro.gateway.core.mutualssl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09070ea5379e7fdbca059c8c0360ae4a8f8d74"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM3OTEyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/LoadKeyStore.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMDo1MFrOGcPxMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMDo1MFrOGcPxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTY2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Used to get the keystore path\n          \n          \n            \n                 * Used to get the keystore path.", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r432271666", "createdAt": "2020-05-29T06:00:50Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/LoadKeyStore.java", "diffHunk": "@@ -0,0 +1,42 @@\n+package org.wso2.micro.gateway.core.mutualssl;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.micro.gateway.core.Constants;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+\n+/**\n+ * This class is for load the keystore.\n+ */\n+public class LoadKeyStore {\n+    public static KeyStore trustStore;\n+    public static FileInputStream localTrustStoreStream;\n+    private static final Logger log = LoggerFactory.getLogger(\"ballerina\");\n+\n+    public static void loadKeyStore(String trustStorePath, String trustStorePassword) {\n+        try {\n+            localTrustStoreStream = new FileInputStream(getKeyStorePath(trustStorePath));\n+            trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+            trustStore.load(localTrustStoreStream, trustStorePassword.toCharArray());\n+\n+        } catch (NoSuchAlgorithmException | IOException | KeyStoreException | CertificateException e) {\n+            String msg = \"Error while loading the trustore\";\n+            log.error(msg, e);\n+        }\n+    }\n+\n+    /**\n+     * Used to get the keystore path", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09070ea5379e7fdbca059c8c0360ae4a8f8d74"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM3OTQyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/MutualsslWithLoadBalancerHeader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMTowMFrOGcPxZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMTowMFrOGcPxZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTcxOA==", "bodyText": "License header?", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r432271718", "createdAt": "2020-05-29T06:01:00Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/MutualsslWithLoadBalancerHeader.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.wso2.micro.gateway.core.mutualssl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09070ea5379e7fdbca059c8c0360ae4a8f8d74"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM4MDEwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/MutualsslWithLoadBalancerHeader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMToyNVrOGcPxxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMToyNVrOGcPxxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTgxNQ==", "bodyText": "Incomplete javadoc", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r432271815", "createdAt": "2020-05-29T06:01:25Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/MutualsslWithLoadBalancerHeader.java", "diffHunk": "@@ -0,0 +1,59 @@\n+package org.wso2.micro.gateway.core.mutualssl;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.URLDecoder;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateFactory;\n+\n+import javax.security.cert.CertificateEncodingException;\n+import javax.security.cert.CertificateException;\n+import javax.security.cert.X509Certificate;\n+\n+import static org.wso2.micro.gateway.core.Constants.BEGIN_CERTIFICATE_STRING;\n+import static org.wso2.micro.gateway.core.Constants.END_CERTIFICATE_STRING;\n+\n+/**\n+ * This class is responsible for get the alias from the certificate  in mutual SSL handshake\n+ * when the header send by the load balancer.\n+ */\n+public class MutualsslWithLoadBalancerHeader {\n+\n+    public static String getAliasAFromHeaderCert(String base64EncodedCertificate) throws  KeyStoreException,\n+            java.security.cert.CertificateException, CertificateException {\n+        base64EncodedCertificate = URLDecoder.decode(base64EncodedCertificate).\n+                replaceAll(BEGIN_CERTIFICATE_STRING, \"\")\n+                .replaceAll(END_CERTIFICATE_STRING, \"\");\n+        byte[] bytes = Base64.decodeBase64(base64EncodedCertificate);\n+        InputStream inputStream = new ByteArrayInputStream(bytes);\n+        X509Certificate x509Certificate = X509Certificate.getInstance(inputStream);\n+        if (getAliasFromTrustStore(x509Certificate, LoadKeyStore.trustStore) != null) {\n+            return getAliasFromTrustStore(x509Certificate, LoadKeyStore.trustStore);\n+        } else {\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     *  Used to get the certificate alias for a certificate exist in the trustore.\n+     *\n+     * @param certificate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09070ea5379e7fdbca059c8c0360ae4a8f8d74"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM4MDY2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/MutualsslWithoutLoadBalancerHeader.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMTozM1rOGcPyEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNjowMTozM1rOGcPyEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MTg4OA==", "bodyText": "License header?", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r432271888", "createdAt": "2020-05-29T06:01:33Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/MutualsslWithoutLoadBalancerHeader.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.wso2.micro.gateway.core.mutualssl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db09070ea5379e7fdbca059c8c0360ae4a8f8d74"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTMyNzQ3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/mutualSSL_handler.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoxOTowN1rOGgmDGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoxOTowN1rOGgmDGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMTAwMg==", "bodyText": "variable name aliasAFromHeaderCert , shouldn't it be aliasFromHeaderCert", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r436831002", "createdAt": "2020-06-08T16:19:07Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/mutualSSL_handler.bal", "diffHunk": "@@ -39,30 +56,107 @@ public type MutualSSLHandler object {\n     public function process(http:Request req) returns boolean | http:AuthenticationError {\n         string|error mutualSSLVerifyClient = getMutualSSL();\n         if (mutualSSLVerifyClient is string && stringutils:equalsIgnoreCase(MANDATORY, mutualSSLVerifyClient) \n-                && req.mutualSslHandshake[STATUS] != PASSED ) {\n+                && req.mutualSslHandshake[STATUS] != PASSED) {\n             if (req.mutualSslHandshake[STATUS] == FAILED) {\n                 printDebug(KEY_AUTHN_FILTER, \"MutualSSL handshake status: FAILED\");\n             }\n             // provided more generic error code to avoid security issues.\n             setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS); \n             return prepareAuthenticationError(\"Failed to authenticate with MutualSSL handler\");            \n         }\n-\n         if (req.mutualSslHandshake[STATUS] == PASSED) {\n-            printDebug(KEY_AUTHN_FILTER, \"MutualSSL handshake status: PASSED\");\n             runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-            doMTSLFilterRequest(req, invocationContext); \n+            if (mutualSSLVerifyClient is string && stringutils:equalsIgnoreCase(MANDATORY, mutualSSLVerifyClient)) {\n+                string apiVersion = invocationContext.attributes[API_VERSION_PROPERTY].toString();\n+                string apiName = invocationContext.attributes[API_NAME].toString();\n+                if (self.headerName != \"\" &&  req.hasHeader(self.headerName)) {\n+                    if (!self.isClientCertificateValidationEnabled) {\n+                        string headerValue = req.getHeader(self.headerName);\n+                        if (headerValue != \"\") {\n+                            var cacheKey = headerValue + apiName + apiVersion;\n+                            var isExistCertCache = self.gatewayCache.retrieveFromMutualSslCertificateCache(cacheKey);\n+                            if (isExistCertCache is boolean) {\n+                                if (!isExistCertCache) {\n+                                    printDebug(KEY_AUTHN_FILTER,\"Mutual SSL authentication failure. \" +\n+                                    \"API is not associated with the certificate\");\n+                                    setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n+                                    return false;\n+                                } else {\n+                                    printDebug(KEY_AUTHN_FILTER, \"MutualSSL handshake status: PASSED\");\n+                                    doMTSLFilterRequest(req, invocationContext);\n+                                    return true;\n+                                }\n+                            } else {\n+                                handle|error aliasAFromHeaderCert = getAliasAFromHeaderCert(headerValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab4771e0fa401eea8989320a8ee68bd88c2b5b9"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTM0NTkxOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/mutualSSL_handler.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoyMzoyOVrOGgmONA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoyMzoyOVrOGgmONA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzMzg0NA==", "bodyText": "Why do we expect cert to be always present in the cache. If it is not in the cache shouldn't we go and check the cert in the trust store", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r436833844", "createdAt": "2020-06-08T16:23:29Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/mutualSSL_handler.bal", "diffHunk": "@@ -39,30 +56,107 @@ public type MutualSSLHandler object {\n     public function process(http:Request req) returns boolean | http:AuthenticationError {\n         string|error mutualSSLVerifyClient = getMutualSSL();\n         if (mutualSSLVerifyClient is string && stringutils:equalsIgnoreCase(MANDATORY, mutualSSLVerifyClient) \n-                && req.mutualSslHandshake[STATUS] != PASSED ) {\n+                && req.mutualSslHandshake[STATUS] != PASSED) {\n             if (req.mutualSslHandshake[STATUS] == FAILED) {\n                 printDebug(KEY_AUTHN_FILTER, \"MutualSSL handshake status: FAILED\");\n             }\n             // provided more generic error code to avoid security issues.\n             setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS); \n             return prepareAuthenticationError(\"Failed to authenticate with MutualSSL handler\");            \n         }\n-\n         if (req.mutualSslHandshake[STATUS] == PASSED) {\n-            printDebug(KEY_AUTHN_FILTER, \"MutualSSL handshake status: PASSED\");\n             runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n-            doMTSLFilterRequest(req, invocationContext); \n+            if (mutualSSLVerifyClient is string && stringutils:equalsIgnoreCase(MANDATORY, mutualSSLVerifyClient)) {\n+                string apiVersion = invocationContext.attributes[API_VERSION_PROPERTY].toString();\n+                string apiName = invocationContext.attributes[API_NAME].toString();\n+                if (self.headerName != \"\" &&  req.hasHeader(self.headerName)) {\n+                    if (!self.isClientCertificateValidationEnabled) {\n+                        string headerValue = req.getHeader(self.headerName);\n+                        if (headerValue != \"\") {\n+                            var cacheKey = headerValue + apiName + apiVersion;\n+                            var isExistCertCache = self.gatewayCache.retrieveFromMutualSslCertificateCache(cacheKey);\n+                            if (isExistCertCache is boolean) {\n+                                if (!isExistCertCache) {\n+                                    printDebug(KEY_AUTHN_FILTER,\"Mutual SSL authentication failure. \" +\n+                                    \"API is not associated with the certificate\");\n+                                    setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n+                                    return false;\n+                                } else {\n+                                    printDebug(KEY_AUTHN_FILTER, \"MutualSSL handshake status: PASSED\");\n+                                    doMTSLFilterRequest(req, invocationContext);\n+                                    return true;\n+                                }\n+                            } else {\n+                                handle|error aliasAFromHeaderCert = getAliasAFromHeaderCert(headerValue);\n+                                if (aliasAFromHeaderCert is error) {\n+                                    setErrorMessageToInvocationContext(API_AUTH_GENERAL_ERROR);\n+                                    return prepareAuthenticationError(\"Unclassified Authentication Failure\");\n+                                }\n+                                if (aliasAFromHeaderCert is handle) {\n+                                    boolean isExistAlias = isExistApiAlias(apiVersion, apiName, aliasAFromHeaderCert.toString(),\n+                                    self.apiCertificateList);\n+                                    if (!isExistAlias || aliasAFromHeaderCert.toString() == \"\") {\n+                                        printDebug(KEY_AUTHN_FILTER, \"Mutual SSL authentication failure. API is not associated \" +\n+                                        \"with the certificate\");\n+                                        self.gatewayCache.addMutualSslCertificateCache(cacheKey, false);\n+                                        setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n+                                        return false;\n+                                    } else {\n+                                        printDebug(KEY_AUTHN_FILTER, \"MutualSSL handshake status: PASSED\");\n+                                        doMTSLFilterRequest(req, invocationContext);\n+                                        self.gatewayCache.addMutualSslCertificateCache(cacheKey, true);\n+                                        return true;\n+                                    }\n+                                }\n+\n+                            }\n+                        } else {\n+                            printDebug(KEY_AUTHN_FILTER, \"Header has empty value sent by the payload\");\n+                            setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n+                            return false;\n+                        }\n+                    }\n+                }\n+                string? cert = req.mutualSslHandshake[\"base64EncodedCert\"];\n+                var cacheKey = cert.toString() + apiName + apiVersion;\n+                var isExistCertCache = self.gatewayCache.retrieveFromMutualSslCertificateCache(cacheKey);\n+                if (isExistCertCache is boolean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab4771e0fa401eea8989320a8ee68bd88c2b5b9"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTM2NTk1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/MutualsslWithoutLoadBalancerHeader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjoyODozNFrOGgmaug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwODozMzowN1rOGg-evA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzNzA1MA==", "bodyText": "Do we need two classes. Can't we use the same MutualsslWithLoadBalancerHeader. It has the same method. We can have a common class name and use it", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r436837050", "createdAt": "2020-06-08T16:28:34Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/MutualsslWithoutLoadBalancerHeader.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.wso2.micro.gateway.core.mutualssl;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+\n+/**\n+ * This class is for getting the certificate alias for a certificate to validate against per API.\n+ */\n+public class MutualsslWithoutLoadBalancerHeader {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab4771e0fa401eea8989320a8ee68bd88c2b5b9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzIzMTI5Mg==", "bodyText": "Added common class", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r437231292", "createdAt": "2020-06-09T08:33:07Z", "author": {"login": "tharmini"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/MutualsslWithoutLoadBalancerHeader.java", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.wso2.micro.gateway.core.mutualssl;\n+\n+import java.io.ByteArrayInputStream;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.Base64;\n+\n+/**\n+ * This class is for getting the certificate alias for a certificate to validate against per API.\n+ */\n+public class MutualsslWithoutLoadBalancerHeader {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgzNzA1MA=="}, "originalCommit": {"oid": "3ab4771e0fa401eea8989320a8ee68bd88c2b5b9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMTQ0NDE3OnYy", "diffSide": "LEFT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo0ODo1MVrOGgnK3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjo1Nzo1MVrOGgnfsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0OTM3NQ==", "bodyText": "Isn't these values are used below", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r436849375", "createdAt": "2020-06-08T16:48:51Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -905,8 +912,6 @@ function readMultipleJWTIssuers() {\n     if (jwtIssuers is map<anydata>[] && jwtIssuers.length() > 0) {\n         initiateJwtMap();\n         printDebug(KEY_UTILS, \"Found new multiple JWT issuer configs\");\n-        string trustStorePath = getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, DEFAULT_TRUST_STORE_PATH);\n-        string trustStorePassword = getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, DEFAULT_TRUST_STORE_PASSWORD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ab4771e0fa401eea8989320a8ee68bd88c2b5b9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg1NDcwNw==", "bodyText": "I put this value above( calling for globally)", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r436854707", "createdAt": "2020-06-08T16:57:51Z", "author": {"login": "tharmini"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -905,8 +912,6 @@ function readMultipleJWTIssuers() {\n     if (jwtIssuers is map<anydata>[] && jwtIssuers.length() > 0) {\n         initiateJwtMap();\n         printDebug(KEY_UTILS, \"Found new multiple JWT issuer configs\");\n-        string trustStorePath = getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PATH, DEFAULT_TRUST_STORE_PATH);\n-        string trustStorePassword = getConfigValue(LISTENER_CONF_INSTANCE_ID, TRUST_STORE_PASSWORD, DEFAULT_TRUST_STORE_PASSWORD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg0OTM3NQ=="}, "originalCommit": {"oid": "3ab4771e0fa401eea8989320a8ee68bd88c2b5b9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDA5ODIwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/CheckMutualSSLCertificate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyNjowOFrOGhA2Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyNjowOFrOGhA2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3MDA4Nw==", "bodyText": "Lets not use static imports", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r437270087", "createdAt": "2020-06-09T09:26:08Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/CheckMutualSSLCertificate.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.wso2.micro.gateway.core.mutualssl;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.URLDecoder;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateFactory;\n+\n+import javax.security.cert.CertificateEncodingException;\n+import javax.security.cert.CertificateException;\n+import javax.security.cert.X509Certificate;\n+\n+import static org.wso2.micro.gateway.core.Constants.BEGIN_CERTIFICATE_STRING;\n+import static org.wso2.micro.gateway.core.Constants.END_CERTIFICATE_STRING;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f71c30df16196575b651a9b6460a12c8dd70160"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDEwNTcwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/CheckMutualSSLCertificate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyNzo1NFrOGhA63w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyNzo1NFrOGhA63w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3MTI2Mw==", "bodyText": "lets rename the method to getAliasFromHeaderCert removing the A", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r437271263", "createdAt": "2020-06-09T09:27:54Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/CheckMutualSSLCertificate.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.wso2.micro.gateway.core.mutualssl;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.URLDecoder;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateFactory;\n+\n+import javax.security.cert.CertificateEncodingException;\n+import javax.security.cert.CertificateException;\n+import javax.security.cert.X509Certificate;\n+\n+import static org.wso2.micro.gateway.core.Constants.BEGIN_CERTIFICATE_STRING;\n+import static org.wso2.micro.gateway.core.Constants.END_CERTIFICATE_STRING;\n+\n+/**\n+ * This class is responsible for get the alias from the certificate  in mutual SSL handshake,\n+ * when the header send by the load balancer.\n+ */\n+public class CheckMutualSSLCertificate {\n+\n+    public static String getAliasAFromHeaderCert(String base64EncodedCertificate) throws  KeyStoreException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f71c30df16196575b651a9b6460a12c8dd70160"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDExMDE4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/CheckMutualSSLCertificate.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyOTowNVrOGhA9xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwOToyOTowNVrOGhA9xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzI3MjAwNA==", "bodyText": "Lets rename this class as CertificateUtils", "url": "https://github.com/wso2/product-microgateway/pull/1249#discussion_r437272004", "createdAt": "2020-06-09T09:29:05Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mutualssl/CheckMutualSSLCertificate.java", "diffHunk": "@@ -0,0 +1,86 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.wso2.micro.gateway.core.mutualssl;\n+\n+import org.apache.commons.codec.binary.Base64;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.net.URLDecoder;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.cert.CertificateFactory;\n+\n+import javax.security.cert.CertificateEncodingException;\n+import javax.security.cert.CertificateException;\n+import javax.security.cert.X509Certificate;\n+\n+import static org.wso2.micro.gateway.core.Constants.BEGIN_CERTIFICATE_STRING;\n+import static org.wso2.micro.gateway.core.Constants.END_CERTIFICATE_STRING;\n+\n+/**\n+ * This class is responsible for get the alias from the certificate  in mutual SSL handshake,\n+ * when the header send by the load balancer.\n+ */\n+public class CheckMutualSSLCertificate {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f71c30df16196575b651a9b6460a12c8dd70160"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1233, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}