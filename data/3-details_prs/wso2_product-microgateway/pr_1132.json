{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTkyNDQw", "number": 1132, "title": "Bug fix: allow Basic Auth with custom auth header", "bodyText": "Purpose\nBug fix: Allow basic auth to work with custom auth header.\nAdd integration tests for basic auth scopes.  Related to #1103.\n\nAt the moment, the basic Auth security requirement is added along with the oauth2 security requirement with scopes. According to the current ballerina implementation (as mentioned in #1103), those scopes will be checked during the basic authentication as well. At the moment, there is no approach to add the scopes in basic auth scenario via basic Auth SecurityRequirement/SecurityScheme alone.\n\nIssues\n\nFixes #1043\nAutomation tests\n\nUnit tests added: No\nIntegration tests added: Yes\n\nTested environments\n\nMacOS Mojave\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-03-12T11:36:18Z", "url": "https://github.com/wso2/product-microgateway/pull/1132", "merged": true, "mergeCommit": {"oid": "2e742128336d9d2370dd50d24818a9c71375ea44"}, "closed": true, "closedAt": "2020-03-13T06:08:51Z", "author": {"login": "VirajSalaka"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcM5uQOgH2gAyMzg3MTkyNDQwOmQwNzc5MjM1ZmQ3OGI4YjY1YmQwMDA3MzlmYjk5ZDBkOTJjOTM0YjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcf0rVkAFqTQwODcwODQzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d0779235fd78b8b65bd000739fb99d0d92c934b6", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/d0779235fd78b8b65bd000739fb99d0d92c934b6", "committedDate": "2020-03-12T11:08:17Z", "message": "Implement basic auth handler to handle different auth headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1bdfd3152511fd13db7a00a458ed90fff1c0177", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/e1bdfd3152511fd13db7a00a458ed90fff1c0177", "committedDate": "2020-03-12T11:13:29Z", "message": "Implement test cases for basicAuth scopes and different auth header with basicAuth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8675cb008894edb084ac0e3011dda4a3cebb7452", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/8675cb008894edb084ac0e3011dda4a3cebb7452", "committedDate": "2020-03-12T11:28:20Z", "message": "Change existing 8PerMin policy to 15PerMin policy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b24922862ce4a1d2fba9a299a21a2f874e2ff38a", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/b24922862ce4a1d2fba9a299a21a2f874e2ff38a", "committedDate": "2020-03-12T11:37:57Z", "message": "Merge branch 'master' into basic-auth-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3830858e73e6cab0e409fdace737373fbd0e3e7f", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/3830858e73e6cab0e409fdace737373fbd0e3e7f", "committedDate": "2020-03-12T12:30:35Z", "message": "Merge branch 'master' into basic-auth-fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eba18f37937e30230bc4374f789115f7ff57e65", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/7eba18f37937e30230bc4374f789115f7ff57e65", "committedDate": "2020-03-12T12:48:58Z", "message": "resolve test failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/e49189a3ca6f2bfe5721512fbb41cd4c03e289a1", "committedDate": "2020-03-12T13:10:52Z", "message": "Basic auth header value is allowed to be in any case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNjg0MjY3", "url": "https://github.com/wso2/product-microgateway/pull/1132#pullrequestreview-373684267", "createdAt": "2020-03-12T15:55:58Z", "commit": {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NTo1OFrOF1kq_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NTo1OFrOF1kq_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxOTY3OA==", "bodyText": "Use the constant for the header", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r391719678", "createdAt": "2020-03-12T15:55:58Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = \"authorization\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczNjkxMzQ4", "url": "https://github.com/wso2/product-microgateway/pull/1132#pullrequestreview-373691348", "createdAt": "2020-03-12T16:03:57Z", "commit": {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowMzo1N1rOF1k_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowMzo1N1rOF1k_yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNTAwMw==", "bodyText": "There is a method to get authorization header from the service annotation.  Is that method setting the value to the context", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r391725003", "createdAt": "2020-03-12T16:03:57Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f2b131876a0349201092db9985824582f120fba", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/5f2b131876a0349201092db9985824582f120fba", "committedDate": "2020-03-13T04:56:41Z", "message": "fix commented issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f56b7fcef23ec648773909d8714e424b5654e919", "author": {"user": {"login": "VirajSalaka", "name": "Viraj Salaka"}}, "url": "https://github.com/wso2/product-microgateway/commit/f56b7fcef23ec648773909d8714e424b5654e919", "committedDate": "2020-03-13T04:59:10Z", "message": "Merge branch 'master' into basic-auth-fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MDY3NjY4", "url": "https://github.com/wso2/product-microgateway/pull/1132#pullrequestreview-374067668", "createdAt": "2020-03-13T06:08:14Z", "commit": {"oid": "f56b7fcef23ec648773909d8714e424b5654e919"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzA4MzM4", "url": "https://github.com/wso2/product-microgateway/pull/1132#pullrequestreview-408708338", "createdAt": "2020-05-10T05:58:55Z", "commit": {"oid": "f56b7fcef23ec648773909d8714e424b5654e919"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNTo1ODo1NVrOGTA6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNTo1ODo1NVrOGTA6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5MTA4Mg==", "bodyText": "It is better to remove extra lines", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r422591082", "createdAt": "2020-05-10T05:58:55Z", "author": {"login": "Shehanir"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56b7fcef23ec648773909d8714e424b5654e919"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzA4NDM0", "url": "https://github.com/wso2/product-microgateway/pull/1132#pullrequestreview-408708434", "createdAt": "2020-05-10T06:00:07Z", "commit": {"oid": "f56b7fcef23ec648773909d8714e424b5654e919"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNjowMDowOFrOGTA69A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNjowMDowOFrOGTA69A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5MTIyMA==", "bodyText": "Shall we keep an extra line at EOF", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r422591220", "createdAt": "2020-05-10T06:00:08Z", "author": {"login": "Shehanir"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = DEFAULT_AUTH_HEADER_NAME;\n+        }\n+        if (req.hasHeader(authHeader)) {\n+            string headerValue = req.getHeader(authHeader).toLowerAscii();\n+            string authScheme = (auth:AUTH_SCHEME_BASIC).toLowerAscii();\n+            if (headerValue.startsWith(authScheme)) {\n+                printDebug(KEY_AUTHN_FILTER, \"Request will be authenticated via basicAuth handler\");\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    # Authenticates the incoming request with the use of credentials passed as the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if authenticated successfully. Else, returns `false`\n+    # or the `AuthenticationError` in case of an error.\n+    public function process(http:Request req) returns @tainted boolean | http:AuthenticationError {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = DEFAULT_AUTH_HEADER_NAME;\n+        }\n+        string headerValue = req.getHeader(authHeader);\n+        string credential = headerValue.substring(5, headerValue.length()).trim();\n+        var authenticationResult = self.basicAuthProvider.authenticate(credential);\n+        if (authenticationResult is boolean) {\n+            return authenticationResult;\n+        } else {\n+            return prepareAuthenticationError(\"Failed to authenticate with basic auth handler.\", authenticationResult);\n+        }\n+    }\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56b7fcef23ec648773909d8714e424b5654e919"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1038, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}