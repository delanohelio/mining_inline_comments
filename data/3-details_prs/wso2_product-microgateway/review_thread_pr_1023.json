{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NzA2Mzgz", "number": 1023, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToxNjo0M1rODiNqxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToxNjo0M1rODiNqxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MjAyMTE2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToxNjo0M1rOFtV3_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNToxNjo0M1rOFtV3_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4ODYzOQ==", "bodyText": "Change order to mutualssl, jwts, opaque, basic, apikey", "url": "https://github.com/wso2/product-microgateway/pull/1023#discussion_r383088639", "createdAt": "2020-02-24T05:16:43Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "diffHunk": "@@ -107,26 +107,46 @@ public function initiateGatewayConfigurations(http:ListenerConfiguration config)\n     isConfigInitiated = true;\n }\n \n-public function getAuthHandlers() returns http:InboundAuthHandler[] {\n+public function getAuthHandlers(string[] appSecurity = [], boolean appSecurityOptional = false, boolean isMutualSSL = false) \n+        returns http:InboundAuthHandler[][] {\n     if (authHandlersMap.length() < 1) {\n         printDebug(KEY_GW_LISTNER, \"Initializing auth handlers\");\n         initAuthHandlers();\n     }\n-    return [authHandlersMap.get(MUTUAL_SSL_HANDLER), authHandlersMap.get(JWT_AUTH_HANDLER), authHandlersMap.get(KEY_VALIDATION_HANDLER),\n-        authHandlersMap.get(BASIC_AUTH_HANDLER), authHandlersMap.get(API_KEY_HANDLER)];\n-}\n-\n-public function getAPIAuthHandlers(boolean appSecurityOptional) returns http:InboundAuthHandler[][] {\n     if (appSecurityOptional) { \n-        return [getAuthHandlers()];\n+        if (isMutualSSL) {\n+            // add mutual ssl to the auth handlers\n+            appSecurity.push(AUTH_SCHEME_MUTUAL_SSL);\n+        }\n+        return [getHandlers(appSecurity)];\n     }\n-    if (authHandlersMap.length() < 1) {\n-        printDebug(KEY_GW_LISTNER, \"Initializing auth handlers\");\n-        initAuthHandlers();\n+    // if application security is mandatory, one of application handlers must pass. If mutual ssl enabled. it also should pass.\n+    // e.g. [mutualssl] && [jwt or basic or ...]\n+    if (isMutualSSL) {\n+        return [getHandlers([AUTH_SCHEME_MUTUAL_SSL]), getHandlers(appSecurity)];\n     }\n+    return [getHandlers(appSecurity)];\n+}\n \n-    return [[authHandlersMap.get(MUTUAL_SSL_HANDLER)], [authHandlersMap.get(JWT_AUTH_HANDLER), authHandlersMap.get(KEY_VALIDATION_HANDLER),\n-        authHandlersMap.get(BASIC_AUTH_HANDLER), authHandlersMap.get(API_KEY_HANDLER)]];\n+public function getHandlers(string[] appSecurity) returns http:InboundAuthHandler[] {\n+    http:InboundAuthHandler[] handlers = [];\n+    //enforce handler order mutualssl, opaque, basic, apikey, jwts", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b4ea2c674c472c1780f6c9e034d0a3f87918c99"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1295, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}