{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMwMjUwMTMw", "number": 1266, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDoxNjowMVrOEDtGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDoxNjoxN1rOEDtGbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzIwMDY5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-jwt-generator/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDoxNjowMVrOGg4KyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDoxNjowMVrOGg4KyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyNzg4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            </project>\n          \n          \n            \n            </project>", "url": "https://github.com/wso2/product-microgateway/pull/1266#discussion_r437127880", "createdAt": "2020-06-09T04:16:01Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-jwt-generator/pom.xml", "diffHunk": "@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>components</artifactId>\n+        <groupId>org.wso2.am.microgw</groupId>\n+        <version>3.1.1-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>mgw-jwt-generator</artifactId>\n+    <dependencies>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+            <version>${slf4j.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.commons</groupId>\n+            <artifactId>commons-lang3</artifactId>\n+            <version>${commons-lang3.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-logging</groupId>\n+            <artifactId>commons-logging</artifactId>\n+            <version>${commons-logging.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.nimbusds</groupId>\n+            <artifactId>nimbus-jose-jwt</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>net.minidev</groupId>\n+            <artifactId>json-smart</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>net.minidev</groupId>\n+            <artifactId>asm</artifactId>\n+        </dependency>\n+    </dependencies>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ad95af01030294fa8f00f59e79f6d37a89a300"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzIwMTEwOnYy", "diffSide": "RIGHT", "path": "tests/src/main/java/org/wso2/micro/gateway/tests/jwtgenerator/TestJWTGenerator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDoxNjoxN1rOGg4LAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDoxNjoxN1rOGg4LAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEyNzkzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            }\n          \n          \n            \n            }", "url": "https://github.com/wso2/product-microgateway/pull/1266#discussion_r437127937", "createdAt": "2020-06-09T04:16:17Z", "author": {"login": "Rajith90"}, "path": "tests/src/main/java/org/wso2/micro/gateway/tests/jwtgenerator/TestJWTGenerator.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ * WSO2 Inc. licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except\n+ * in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.wso2.micro.gateway.tests.jwtgenerator;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.wso2.micro.gateway.jwt.generator.AbstractMGWJWTGenerator;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.UUID;\n+\n+/**\n+ * This class is for default Jwt transformer.\n+ */\n+public class TestJWTGenerator extends AbstractMGWJWTGenerator {\n+    public TestJWTGenerator(String dialectURI,\n+                            String signatureAlgorithm,\n+                            String keyStorePath,\n+                            String keyStorePassword,\n+                            String certificateAlias,\n+                            String privateKeyAlias,\n+                            int jwtExpiryTime,\n+                            String[] restrictedClaims,\n+                            boolean cacheEnabled,\n+                            int cacheExpiry,\n+                            String tokenIssuer,\n+                            String[] tokenAudience) {\n+        super(dialectURI,\n+                signatureAlgorithm,\n+                keyStorePath,\n+                keyStorePassword,\n+                certificateAlias,\n+                privateKeyAlias,\n+                jwtExpiryTime,\n+                restrictedClaims,\n+                cacheEnabled,\n+                cacheExpiry,\n+                tokenIssuer,\n+                tokenAudience);\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateStandardClaims(Map<String, Object> jwtInfo) {\n+        long currentTime = System.currentTimeMillis();\n+        long expireIn = currentTime + getTTL();\n+        String dialect = this.getDialectURI();\n+        Map<String, Object> claims = new HashMap<>();\n+        HashMap<String, Object> customClaims = (HashMap<String, Object>) jwtInfo.get(\"customClaims\");\n+        claims.put(\"iss\", getTokenIssuer());\n+        if (getTokenAudience().length == 1) {\n+            claims.put(\"aud\", getTokenAudience()[0]);\n+        } else if (getTokenAudience().length != 0) {\n+            claims.put(\"aud\", arrayToJSONArray(getTokenAudience()));\n+        }\n+        claims.put(\"jti\", UUID.randomUUID().toString());\n+        claims.put(\"iat\", (int) (currentTime / 1000));\n+        claims.put(\"exp\", (int) (expireIn / 1000));\n+        if (StringUtils.isNotEmpty((CharSequence) jwtInfo.get(\"sub\"))) {\n+            claims.put(\"sub\", jwtInfo.get(\"sub\"));\n+            claims.put(dialect + \"/endUser\", jwtInfo.get(\"sub\"));\n+        }\n+        if (StringUtils.isNotEmpty((CharSequence) customClaims.get(\"scopes\"))) {\n+            claims.put(\"scopes\", (customClaims.get(\"scopes\")));\n+        }\n+        return claims;\n+    }\n+\n+    @Override\n+    public Map<String, Object> populateCustomClaims(Map<String, Object> jwtInfo, ArrayList<String> restrictedClaims) {\n+        Map<String, Object> claims = new HashMap<>();\n+        for (String key: jwtInfo.keySet()) {\n+            if (key.equals(\"customClaims\")) {\n+                Map<String, Object> customClaims = (Map<String, Object>) jwtInfo.get(key);\n+                for (String subKey: customClaims.keySet()) {\n+                    if (!restrictedClaims.contains(subKey)) {\n+                        claims.put(subKey, customClaims.get(subKey));\n+                    }\n+                }\n+            } else {\n+                if (!restrictedClaims.contains(key)) {\n+                    claims.put(key, jwtInfo.get(key));\n+                }\n+            }\n+        }\n+        return claims;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2ad95af01030294fa8f00f59e79f6d37a89a300"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1245, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}