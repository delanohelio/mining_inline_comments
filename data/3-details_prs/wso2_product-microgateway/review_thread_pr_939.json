{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MDIxNTY4", "number": 939, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyMDoxOVrODYvkOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyOToyMlrODYvsCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjcxNzM5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyMDoxOVrOFexnRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMjowMlrOFe0Hpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNDQ2OA==", "bodyText": "Lets log the error as well", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367814468", "createdAt": "2020-01-17T08:20:19Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NTUyNg==", "bodyText": "added via ca383ba\nBy the way, please consider that there are two lines; printError and printFullError.\nPlease comment if that needs to be changed.", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367855526", "createdAt": "2020-01-17T10:02:02Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNDQ2OA=="}, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjcxNzc5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyMDozN1rOFexniw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMjoxNVrOFe0H7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNDUzOQ==", "bodyText": "Lets log the error as well", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367814539", "createdAt": "2020-01-17T08:20:37Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;\n+    } else {\n+        jms:Session | error session = trap connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n+        if (session is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms session.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NTU5Nw==", "bodyText": "added via ca383ba", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367855597", "createdAt": "2020-01-17T10:02:15Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;\n+    } else {\n+        jms:Session | error session = trap connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n+        if (session is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms session.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNDUzOQ=="}, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjcxODcyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyMTowMFrOFexoFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMjoyMlrOFe0IHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNDY3Ng==", "bodyText": "Lets log the error as well", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367814676", "createdAt": "2020-01-17T08:21:00Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;\n+    } else {\n+        jms:Session | error session = trap connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n+        if (session is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms session.\");\n+            return session;\n+        } else {\n+        jms:Destination dest = check session->createTopic(\"throttleData\");\n+        jms:MessageConsumer | error subscriberEndpoint = trap session->createDurableSubscriber(dest, \"sub-1\");\n+        if (subscriberEndpoint is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms subscriber.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NTY0NQ==", "bodyText": "added via ca383ba", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367855645", "createdAt": "2020-01-17T10:02:22Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;\n+    } else {\n+        jms:Session | error session = trap connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n+        if (session is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms session.\");\n+            return session;\n+        } else {\n+        jms:Destination dest = check session->createTopic(\"throttleData\");\n+        jms:MessageConsumer | error subscriberEndpoint = trap session->createDurableSubscriber(dest, \"sub-1\");\n+        if (subscriberEndpoint is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms subscriber.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNDY3Ng=="}, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjcyMDM2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyMTo0OVrOFexpGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMjozM1rOFe0Icw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNDkzNw==", "bodyText": "Is it correct to log this as debug level rather than the error", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367814937", "createdAt": "2020-01-17T08:21:49Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;\n+    } else {\n+        jms:Session | error session = trap connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n+        if (session is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms session.\");\n+            return session;\n+        } else {\n+        jms:Destination dest = check session->createTopic(\"throttleData\");\n+        jms:MessageConsumer | error subscriberEndpoint = trap session->createDurableSubscriber(dest, \"sub-1\");\n+        if (subscriberEndpoint is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms subscriber.\");\n+        } else {\n+            var attachResult = subscriberEndpoint.__attach(messageServ);\n+            if (attachResult is error) {\n+                printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NTczMQ==", "bodyText": "added via ca383ba", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367855731", "createdAt": "2020-01-17T10:02:33Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;\n+    } else {\n+        jms:Session | error session = trap connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n+        if (session is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms session.\");\n+            return session;\n+        } else {\n+        jms:Destination dest = check session->createTopic(\"throttleData\");\n+        jms:MessageConsumer | error subscriberEndpoint = trap session->createDurableSubscriber(dest, \"sub-1\");\n+        if (subscriberEndpoint is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms subscriber.\");\n+        } else {\n+            var attachResult = subscriberEndpoint.__attach(messageServ);\n+            if (attachResult is error) {\n+                printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNDkzNw=="}, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjcyMDg1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyMjowNlrOFexpbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMjo0MVrOFe0IpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNTAyMg==", "bodyText": "Lets log the error as well", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367815022", "createdAt": "2020-01-17T08:22:06Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;\n+    } else {\n+        jms:Session | error session = trap connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n+        if (session is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms session.\");\n+            return session;\n+        } else {\n+        jms:Destination dest = check session->createTopic(\"throttleData\");\n+        jms:MessageConsumer | error subscriberEndpoint = trap session->createDurableSubscriber(dest, \"sub-1\");\n+        if (subscriberEndpoint is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms subscriber.\");\n+        } else {\n+            var attachResult = subscriberEndpoint.__attach(messageServ);\n+            if (attachResult is error) {\n+                printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n+                return attachResult;\n+            }\n+            var startResult = subscriberEndpoint.__start();\n+            if (startResult is error) {\n+                printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NTc4MQ==", "bodyText": "added via ca383ba", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367855781", "createdAt": "2020-01-17T10:02:41Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/services/throttle_event_listener.bal", "diffHunk": "@@ -70,25 +67,42 @@ service messageServ = service {\n # + return - jms:TopicSubscriber for global throttling event publishing\n public function startSubscriberService() returns @tainted jms:MessageConsumer | error {\n     // Initialize a JMS connection  with the provider.\n-    jms:Connection connection = check jms:createConnection({\n+    jms:Connection | error connection = trap jms:createConnection({\n         initialContextFactory: jmsConnectionInitialContextFactory,\n         providerUrl: jmsConnectionProviderUrl,\n         username: jmsConnectionUsername,\n         password: jmsConnectionPassword\n \n     });\n-    jms:Session session = check connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n-    jms:Destination dest = check session->createTopic(\"throttleData\");\n-    jms:MessageConsumer subscriberEndpoint = check session->createDurableSubscriber(dest, \"sub-1\");\n-    var attachResult = subscriberEndpoint.__attach(messageServ);\n-    if (attachResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n-    }\n-    var startResult = subscriberEndpoint.__start();\n-    if (startResult is error) {\n-        printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");\n+    if (connection is error) {\n+        printError(KEY_THROTTLE_UTIL, \"Error while creating the jms connection.\");\n+        return connection;\n+    } else {\n+        jms:Session | error session = trap connection->createSession({acknowledgementMode: \"AUTO_ACKNOWLEDGE\"});\n+        if (session is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms session.\");\n+            return session;\n+        } else {\n+        jms:Destination dest = check session->createTopic(\"throttleData\");\n+        jms:MessageConsumer | error subscriberEndpoint = trap session->createDurableSubscriber(dest, \"sub-1\");\n+        if (subscriberEndpoint is error) {\n+            printError(KEY_THROTTLE_UTIL, \"Error while creating the jms subscriber.\");\n+        } else {\n+            var attachResult = subscriberEndpoint.__attach(messageServ);\n+            if (attachResult is error) {\n+                printDebug(KEY_THROTTLE_UTIL, \"Message consumer hasn't been attached to the service.\");\n+                return attachResult;\n+            }\n+            var startResult = subscriberEndpoint.__start();\n+            if (startResult is error) {\n+                printDebug(KEY_THROTTLE_UTIL, \"Starting the task is failed.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNTAyMg=="}, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjcyNzYzOnYy", "diffSide": "RIGHT", "path": "distribution/resources/conf/Ballerina.toml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyNTozMVrOFextrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyNTozMVrOFextrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNjEwOQ==", "bodyText": "Lets change this as  MGW-TK_HOME", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367816109", "createdAt": "2020-01-17T08:25:31Z", "author": {"login": "Rajith90"}, "path": "distribution/resources/conf/Ballerina.toml", "diffHunk": "@@ -6,6 +6,20 @@ version= \"3.1.0\"\n [platform]\n target = \"java8\"\n \n+        [[platform.libraries]]\n+        module = \"jms\"\n+        path = \"${MICROGW_HOME}/lib/dependencies/andes-client-3.3.9.jar\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjcyODIwOnYy", "diffSide": "RIGHT", "path": "distribution/resources/conf/Ballerina.toml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyNTo0NlrOFexuCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyNTo0NlrOFexuCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNjIwMA==", "bodyText": "Lets change this as MGW-TK_HOME", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367816200", "createdAt": "2020-01-17T08:25:46Z", "author": {"login": "Rajith90"}, "path": "distribution/resources/conf/Ballerina.toml", "diffHunk": "@@ -6,6 +6,20 @@ version= \"3.1.0\"\n [platform]\n target = \"java8\"\n \n+        [[platform.libraries]]\n+        module = \"jms\"\n+        path = \"${MICROGW_HOME}/lib/dependencies/andes-client-3.3.9.jar\"\n+        artifactId = \"andes-client\"\n+        version = \"3.3.9\"\n+        groupId = \"org.wso2.andes.wso2\"\n+\n+        [[platform.libraries]]\n+        module = \"jms\"\n+        path = \"${MICROGW_HOME}/lib/dependencies/org.wso2.securevault-1.1.1.jar\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1946cf2d80f33d08487cf40e694bdd9741af51f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjczNzM3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/Ballerina.toml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwODoyOToyMlrOFexzew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxMDowMzoxMFrOFe0JZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNzU5NQ==", "bodyText": "Better to add new line at the EOF", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367817595", "createdAt": "2020-01-17T08:29:22Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -9,4 +9,4 @@ target = \"java8\"\n     path = \"../../../target/org.wso2.micro.gateway.core-3.1.0-SNAPSHOT.jar\"\n \n [dependencies]\n-\"wso2/jms\" = \"0.6.3\"\n\\ No newline at end of file\n+\"wso2/jms\" = \"0.7.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a4d023b0f82fbf50f54123478da837a6041eee5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzg1NTk3NQ==", "bodyText": "added via bf45068", "url": "https://github.com/wso2/product-microgateway/pull/939#discussion_r367855975", "createdAt": "2020-01-17T10:03:10Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/Ballerina.toml", "diffHunk": "@@ -9,4 +9,4 @@ target = \"java8\"\n     path = \"../../../target/org.wso2.micro.gateway.core-3.1.0-SNAPSHOT.jar\"\n \n [dependencies]\n-\"wso2/jms\" = \"0.6.3\"\n\\ No newline at end of file\n+\"wso2/jms\" = \"0.7.0\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzgxNzU5NQ=="}, "originalCommit": {"oid": "9a4d023b0f82fbf50f54123478da837a6041eee5"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1359, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}