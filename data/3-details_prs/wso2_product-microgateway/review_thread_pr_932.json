{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNTY1MDc4", "number": 932, "reviewThreads": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxMDozM1rODZI7Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNToyODoxMVrODdNyEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njg3MjY3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxMDozM1rOFfXdUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxMDozM1rOFfXdUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNDUxNQ==", "bodyText": "Missing License", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368434515", "createdAt": "2020-01-20T09:10:33Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java", "diffHunk": "@@ -0,0 +1,28 @@\n+package org.wso2.apimgt.gateway.cli.model.config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjkxMzI1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyMzozMVrOFfX1eQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyMzozMVrOFfX1eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MDY5Nw==", "bodyText": "I still have my doubts on why we need to pass a built json to mustache. We do this even now by creating the json structure from the mustache templates.\nSo you just pass the DTO to template and from the template you build the json by iterating the DTO properties.", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368440697", "createdAt": "2020-01-20T09:23:31Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "diffHunk": "@@ -89,8 +90,8 @@ public BallerinaOperation buildContext(Operation operation, ExtendedAPI api) thr\n         this.externalDocs = operation.getExternalDocs();\n         this.parameters = new ArrayList<>();\n         //to provide resource level security in dev-first approach\n-        this.basicAuth = OpenAPICodegenUtils.getMgwResourceBasicAuth(operation);\n-        this.authProviders = OpenAPICodegenUtils.setAuthProviders(this.basicAuth);\n+        this.apiKeys = new Gson().toJson(OpenAPICodegenUtils.generateAPIKeysFromSecurity(operation.getSecurity()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjkyMzYxOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyNjozN1rOFfX7pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyNjozN1rOFfX7pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MjI3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n          \n          \n            \n            \n          \n          \n            \n                @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368442279", "createdAt": "2020-01-20T09:26:37Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "diffHunk": "@@ -60,7 +60,8 @@\n     private String responseInterceptor;\n     private String apiRequestInterceptor;\n     private String apiResponseInterceptor;\n-    private BasicAuth basicAuth;\n+    @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NjkyNTE1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyNzowNlrOFfX8hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToyNzowNlrOFfX8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0MjUwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String apiKeys;\n          \n          \n            \n                private String apiKeys;", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368442502", "createdAt": "2020-01-20T09:27:06Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "diffHunk": "@@ -60,7 +60,8 @@\n     private String responseInterceptor;\n     private String apiRequestInterceptor;\n     private String apiResponseInterceptor;\n-    private BasicAuth basicAuth;\n+    @SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+    private String apiKeys;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njk1NTA4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTozNjoyMVrOFfYOng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTozNjoyMVrOFfYOng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0NzEzNA==", "bodyText": "This looks like an util method. Shall we move this method to a util class?\n// returns APIKey formatted json string of {@code securityRequirementList}\nprivate String setAPIKeySecuritySchemes(List<SecurityRequirement> securityRequirementList) {...}", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368447134", "createdAt": "2020-01-20T09:36:21Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaService.java", "diffHunk": "@@ -263,8 +267,11 @@ public void setBasepath(String basepath) {\n     }\n \n     private void setSecuritySchemas(String schemas) {\n-        BasicAuth basicAuth = OpenAPICodegenUtils.generateBasicAuthFromSecurity(schemas);\n-        authProviders = OpenAPICodegenUtils.setAuthProviders(basicAuth);\n+        authProviders = OpenAPICodegenUtils.getAuthProviders(schemas);\n+    }\n+\n+    private void setAPIKeySecuritySchemes(List<SecurityRequirement> securityRequirementList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njk2OTQ2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo0MToxN1rOFfYXWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOTo0MToxN1rOFfYXWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ0OTM2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368449369", "createdAt": "2020-01-20T09:41:17Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -774,35 +777,23 @@ public static String getMgwResourceScope(Operation operation) {\n     }\n \n     /**\n-     * When the security schema string is provided as a comma separated set of values\n-     * generate the corresponding schema string.\n+     * Provide api keys for a given security requirement list\n      *\n-     * @param schemas comma separated security security schema types (ex. basic,oauth2)\n-     * @return {@link BasicAuth} object\n+     * @param securityRequirementList {@link List<SecurityRequirement>} object\n+     * @return list of API Keys\n      */\n-    public static BasicAuth generateBasicAuthFromSecurity(String schemas) {\n-        BasicAuth basicAuth = new BasicAuth();\n-        boolean basic = false;\n-        boolean oauth2 = false;\n-        String[] schemasArray = schemas.trim().split(\"\\\\s*,\\\\s*\");\n-        for (String s : schemasArray) {\n-            if (s.equalsIgnoreCase(\"basic\")) {\n-                basic = true;\n-            } else if (s.equalsIgnoreCase(\"oauth2\")) {\n-                oauth2 = true;\n-            }\n-        }\n-        if (basic && oauth2) {\n-            basicAuth.setOptional(true);\n-            basicAuth.setRequired(false);\n-        } else if (basic) {\n-            basicAuth.setRequired(true);\n-            basicAuth.setOptional(false);\n-        } else if (oauth2) {\n-            basicAuth.setOptional(false);\n-            basicAuth.setRequired(false);\n+    public static List<APIKey> generateAPIKeysFromSecurity(List<SecurityRequirement> securityRequirementList) {\n+        List<APIKey> apiKeys = new ArrayList<>();\n+        if (securityRequirementList != null) {\n+            securityRequirementList.forEach(value -> value.forEach((k, v) -> {\n+                //check if the key is in apikey list\n+                if (apiKeySecuritySchemaMap.containsKey(k)) {\n+                    apiKeys.add((APIKey) apiKeySecuritySchemaMap.get(k));\n+                }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTI5MDA0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMzo1ODowNFrOFft5aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMzo1ODowNFrOFft5aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwMjE1Mg==", "bodyText": "IMO this will be more meaningful if we rename the method to generateAPIKey\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    var apikey = gateway:provideAPIKey(req);\n          \n          \n            \n                    var apikey = gateway:generateAPIKey(req);", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368802152", "createdAt": "2020-01-21T03:58:04Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "diffHunk": "@@ -138,7 +138,50 @@ service tokenService on tokenListenerEndpoint, apiSecureListener {\n         }\n         var result = caller->respond(forwardedResponse);\n         if (result is error) {\n-           log:printError(\"Error when responding during the token endpoint request\", err = result);\n+            log:printError(\"Error when responding during the token endpoint request\", err = result);\n+        }\n+    }\n+}\n+\n+@http:ServiceConfig {\n+    basePath:\"/apikey\",\n+    auth: {\n+        enabled: true,\n+        authHandlers: gateway:getBasicAuthHandler()\n+    } {{#corsConfiguration.corsConfigurationEnabled}},\n+    cors: {\n+         allowOrigins: [{{#corsConfiguration.accessControlAllowOrigins}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowOrigins}}],\n+         allowCredentials: {{corsConfiguration.accessControlAllowCredentials}},\n+         allowHeaders: [{{#corsConfiguration.accessControlAllowHeaders}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowHeaders}}],\n+         allowMethods: [{{#corsConfiguration.accessControlAllowMethods}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowMethods}}]\n+    }\n+    {{/corsConfiguration.corsConfigurationEnabled}}\n+}\n+@gateway:Filters {\n+    skipAll: true\n+}\n+service apiKeyService on apiSecureListener {\n+    @http:ResourceConfig {\n+        path: \"/*\",\n+        auth: {\n+            enabled: true,\n+            authHandlers: gateway:getBasicAuthHandler()\n+        }\n+    }\n+    resource function apiKeyResource(http:Caller caller, http:Request req) {\n+        var apikey = gateway:provideAPIKey(req);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTI5MTY5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMzo1OToyM1rOFft6Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwMzo1OToyM1rOFft6Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwMjM4Mw==", "bodyText": "Should be,\n- }\n+ } else {", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368802383", "createdAt": "2020-01-21T03:59:23Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "diffHunk": "@@ -138,7 +138,50 @@ service tokenService on tokenListenerEndpoint, apiSecureListener {\n         }\n         var result = caller->respond(forwardedResponse);\n         if (result is error) {\n-           log:printError(\"Error when responding during the token endpoint request\", err = result);\n+            log:printError(\"Error when responding during the token endpoint request\", err = result);\n+        }\n+    }\n+}\n+\n+@http:ServiceConfig {\n+    basePath:\"/apikey\",\n+    auth: {\n+        enabled: true,\n+        authHandlers: gateway:getBasicAuthHandler()\n+    } {{#corsConfiguration.corsConfigurationEnabled}},\n+    cors: {\n+         allowOrigins: [{{#corsConfiguration.accessControlAllowOrigins}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowOrigins}}],\n+         allowCredentials: {{corsConfiguration.accessControlAllowCredentials}},\n+         allowHeaders: [{{#corsConfiguration.accessControlAllowHeaders}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowHeaders}}],\n+         allowMethods: [{{#corsConfiguration.accessControlAllowMethods}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowMethods}}]\n+    }\n+    {{/corsConfiguration.corsConfigurationEnabled}}\n+}\n+@gateway:Filters {\n+    skipAll: true\n+}\n+service apiKeyService on apiSecureListener {\n+    @http:ResourceConfig {\n+        path: \"/*\",\n+        auth: {\n+            enabled: true,\n+            authHandlers: gateway:getBasicAuthHandler()\n+        }\n+    }\n+    resource function apiKeyResource(http:Caller caller, http:Request req) {\n+        var apikey = gateway:provideAPIKey(req);\n+        if (apikey is string) {\n+            error? result = caller->respond(apikey);\n+            if (result is error) {\n+                log:printError(\"Error when responding during the token endpoint request: \", err = result);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTI5MzcwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDowMTowN1rOFft7gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDowMTowN1rOFft7gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwMjY4OQ==", "bodyText": "Use MGW implementation of printError()", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368802689", "createdAt": "2020-01-21T04:01:07Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "diffHunk": "@@ -138,7 +138,50 @@ service tokenService on tokenListenerEndpoint, apiSecureListener {\n         }\n         var result = caller->respond(forwardedResponse);\n         if (result is error) {\n-           log:printError(\"Error when responding during the token endpoint request\", err = result);\n+            log:printError(\"Error when responding during the token endpoint request\", err = result);\n+        }\n+    }\n+}\n+\n+@http:ServiceConfig {\n+    basePath:\"/apikey\",\n+    auth: {\n+        enabled: true,\n+        authHandlers: gateway:getBasicAuthHandler()\n+    } {{#corsConfiguration.corsConfigurationEnabled}},\n+    cors: {\n+         allowOrigins: [{{#corsConfiguration.accessControlAllowOrigins}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowOrigins}}],\n+         allowCredentials: {{corsConfiguration.accessControlAllowCredentials}},\n+         allowHeaders: [{{#corsConfiguration.accessControlAllowHeaders}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowHeaders}}],\n+         allowMethods: [{{#corsConfiguration.accessControlAllowMethods}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowMethods}}]\n+    }\n+    {{/corsConfiguration.corsConfigurationEnabled}}\n+}\n+@gateway:Filters {\n+    skipAll: true\n+}\n+service apiKeyService on apiSecureListener {\n+    @http:ResourceConfig {\n+        path: \"/*\",\n+        auth: {\n+            enabled: true,\n+            authHandlers: gateway:getBasicAuthHandler()\n+        }\n+    }\n+    resource function apiKeyResource(http:Caller caller, http:Request req) {\n+        var apikey = gateway:provideAPIKey(req);\n+        if (apikey is string) {\n+            error? result = caller->respond(apikey);\n+            if (result is error) {\n+                log:printError(\"Error when responding during the token endpoint request: \", err = result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTI5NDA0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDowMTozMVrOFft7vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDowMTozMVrOFft7vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwMjc1MQ==", "bodyText": "Use MGW implementation of printError()", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368802751", "createdAt": "2020-01-21T04:01:31Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "diffHunk": "@@ -138,7 +138,50 @@ service tokenService on tokenListenerEndpoint, apiSecureListener {\n         }\n         var result = caller->respond(forwardedResponse);\n         if (result is error) {\n-           log:printError(\"Error when responding during the token endpoint request\", err = result);\n+            log:printError(\"Error when responding during the token endpoint request\", err = result);\n+        }\n+    }\n+}\n+\n+@http:ServiceConfig {\n+    basePath:\"/apikey\",\n+    auth: {\n+        enabled: true,\n+        authHandlers: gateway:getBasicAuthHandler()\n+    } {{#corsConfiguration.corsConfigurationEnabled}},\n+    cors: {\n+         allowOrigins: [{{#corsConfiguration.accessControlAllowOrigins}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowOrigins}}],\n+         allowCredentials: {{corsConfiguration.accessControlAllowCredentials}},\n+         allowHeaders: [{{#corsConfiguration.accessControlAllowHeaders}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowHeaders}}],\n+         allowMethods: [{{#corsConfiguration.accessControlAllowMethods}}\"{{.}}\"{{#unless @last}},{{/unless}}{{/corsConfiguration.accessControlAllowMethods}}]\n+    }\n+    {{/corsConfiguration.corsConfigurationEnabled}}\n+}\n+@gateway:Filters {\n+    skipAll: true\n+}\n+service apiKeyService on apiSecureListener {\n+    @http:ResourceConfig {\n+        path: \"/*\",\n+        auth: {\n+            enabled: true,\n+            authHandlers: gateway:getBasicAuthHandler()\n+        }\n+    }\n+    resource function apiKeyResource(http:Caller caller, http:Request req) {\n+        var apikey = gateway:provideAPIKey(req);\n+        if (apikey is string) {\n+            error? result = caller->respond(apikey);\n+            if (result is error) {\n+                log:printError(\"Error when responding during the token endpoint request: \", err = result);\n+            }\n+        }\n+        else {\n+            log:printError(\"Error while generating API Key token: \", err = apikey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTI5OTcwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDowNjo1NFrOFft_Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDowNjo1NFrOFft_Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwMzYwMw==", "bodyText": "How about,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \"Make sure your API invocation call is provided required credentials\";\n          \n          \n            \n            \"Make sure your API request provides required credentials\";", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368803603", "createdAt": "2020-01-21T04:06:54Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "diffHunk": "@@ -29,7 +29,7 @@ public const string API_AUTH_INVALID_CREDENTIALS_DESCRIPTION =\n public const int API_AUTH_MISSING_CREDENTIALS = 900902;\n public const string API_AUTH_MISSING_CREDENTIALS_MESSAGE = \"Missing Credentials\";\n public const string API_AUTH_MISSING_CREDENTIALS_DESCRIPTION =\n-\"Make sure your API invocation call has a header: \\\"Authorization: Bearer ACCESS_TOKEN\\\"\";\n+\"Make sure your API invocation call is provided required credentials\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTMwMDk1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDowODoxN1rOFft_2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDowODoxN1rOFft_2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwMzgwMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    errorDescription += DESCRIPTION_SEPARATOR + \"Make sure your API invocation call is provided required credentials\";\n          \n          \n            \n                    errorDescription += DESCRIPTION_SEPARATOR + API_AUTH_MISSING_CREDENTIALS_DESCRIPTION;", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368803803", "createdAt": "2020-01-21T04:08:17Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "diffHunk": "@@ -151,7 +151,7 @@ public function getFailureMessageDetailDescription(int errorCode, string errorMe\n         errorDescription += DESCRIPTION_SEPARATOR + API_AUTH_ACCESS_TOKEN_INACTIVE_DESCRIPTION;\n     } else if (API_AUTH_MISSING_CREDENTIALS == errorCode) {\n         string authHeaderName = getAuthorizationHeader(runtime:getInvocationContext());\n-        errorDescription += DESCRIPTION_SEPARATOR + \"Make sure your API invocation call has a header: \\\"\" + authHeaderName + \"\\\"\";\n+        errorDescription += DESCRIPTION_SEPARATOR + \"Make sure your API invocation call is provided required credentials\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTMwNTA3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDoxMjoxN1rOFfuCWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDoxMjoxN1rOFfuCWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwNDQ0MA==", "bodyText": "Shall we make KeyStorePath and KeyStorePassword generic constants? I mean having the API_KEY prefix make these constants unusable in other places/features.", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368804440", "createdAt": "2020-01-21T04:12:17Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/constants.bal", "diffHunk": "@@ -238,6 +244,16 @@ public const string TRUST_STORE_PATH = \"trustStorePath\";\n public const string TRUST_STORE_PASSWORD = \"trustStorePassword\";\n public const string VALIDATE_SUBSCRIPTION = \"validateSubscription\";\n \n+public const string API_KEY_INSTANCE_ID = \"apikey.tokenConfigs\";\n+public const string API_KEY_ISSUER_ENABLED = \"enabled\";\n+public const string API_KEY_VALIDATE_ALLOWED_APIS = \"validateAllowedAPIs\";\n+public const string API_KEY_ISSUER_TOKEN_CONFIG = \"apikey.issuer.tokenConfig\";\n+public const string API_KEY_ISSUER_KEY_STORE_PATH = \"keyStorePath\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTMwNjA5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/pre_authn_filter.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDoxMzo0MVrOFfuDDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNDoxMzo0MVrOFfuDDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgwNDYyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368804621", "createdAt": "2020-01-21T04:13:41Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/pre_authn_filter.bal", "diffHunk": "@@ -98,6 +100,35 @@ returns boolean {\n                 authHeader = authCookie;\n             }\n         }\n+    } else {\n+        //process apikey authentication\n+        if (authProvidersIds.indexOf(AUTH_SCHEME_API_KEY) != ()) {\n+            json[] apiKeys = getAPIKeys(context.getServiceName(), context.getResourceName());\n+            printDebug(KEY_PRE_AUTHN_FILTER, apiKeys.toString());\n+            if (apiKeys.length() > 0) {\n+                foreach json apiKey in apiKeys {\n+                    map<json> apiKeyMap = <map<json>>apiKey;\n+                    string inName = apiKeyMap[API_KEY_IN].toString();\n+                    string name = apiKeyMap[API_KEY_NAME].toString();\n+                    printDebug(KEY_PRE_AUTHN_FILTER, \"Detected apikey security in : \" + inName + \" name: \" + name);\n+                    if (stringutils:equalsIgnoreCase(HEADER, inName) && request.hasHeader(name)) {\n+                        printDebug(KEY_PRE_AUTHN_FILTER, \"Request has apikey header : \" + name);\n+                        isAPIKeyAuth = true;\n+                        setAPIKeyAuth(inName, name);\n+                        authHeader = AUTH_SCHEME_API_KEY;\n+                        break;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTM2NTYyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/pre_authn_filter.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNToxMDozNFrOFfum3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNToxMDozNFrOFfum3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxMzc5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368813791", "createdAt": "2020-01-21T05:10:34Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/pre_authn_filter.bal", "diffHunk": "@@ -98,6 +100,35 @@ returns boolean {\n                 authHeader = authCookie;\n             }\n         }\n+    } else {\n+        //process apikey authentication\n+        if (authProvidersIds.indexOf(AUTH_SCHEME_API_KEY) != ()) {\n+            json[] apiKeys = getAPIKeys(context.getServiceName(), context.getResourceName());\n+            printDebug(KEY_PRE_AUTHN_FILTER, apiKeys.toString());\n+            if (apiKeys.length() > 0) {\n+                foreach json apiKey in apiKeys {\n+                    map<json> apiKeyMap = <map<json>>apiKey;\n+                    string inName = apiKeyMap[API_KEY_IN].toString();\n+                    string name = apiKeyMap[API_KEY_NAME].toString();\n+                    printDebug(KEY_PRE_AUTHN_FILTER, \"Detected apikey security in : \" + inName + \" name: \" + name);\n+                    if (stringutils:equalsIgnoreCase(HEADER, inName) && request.hasHeader(name)) {\n+                        printDebug(KEY_PRE_AUTHN_FILTER, \"Request has apikey header : \" + name);\n+                        isAPIKeyAuth = true;\n+                        setAPIKeyAuth(inName, name);\n+                        authHeader = AUTH_SCHEME_API_KEY;\n+                        break;\n+\n+                    } else if (stringutils:equalsIgnoreCase(QUERY, inName) && request.getQueryParamValue(name) is string) {\n+                        printDebug(KEY_PRE_AUTHN_FILTER, \"Request has apikey query : \" + name);\n+                        isAPIKeyAuth = true;\n+                        setAPIKeyAuth(inName, name);\n+                        authHeader = AUTH_SCHEME_API_KEY;\n+                        break;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTM3OTY5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/subscription_filter.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNToyMzo0NFrOFfuvyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNToyMzo0NFrOFfuvyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxNjA3NQ==", "bodyText": "Shall we rename the variable to something that clearly say subscription validation enabled? subscriptionEnabled doesn't look like a meaningful name in MGW context\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                boolean subscriptionEnabled = getConfigBooleanValue(JWT_INSTANCE_ID, VALIDATE_SUBSCRIPTION, false);\n          \n          \n            \n                boolean subsValidationEnabled = getConfigBooleanValue(JWT_INSTANCE_ID, VALIDATE_SUBSCRIPTION, false);", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368816075", "createdAt": "2020-01-21T05:23:44Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/subscription_filter.bal", "diffHunk": "@@ -45,7 +41,10 @@ public type SubscriptionFilter object {\n };\n \n function doSubscriptionFilterRequest(http:Caller caller, http:Request request,\n-@tainted http:FilterContext filterContext, boolean subsciptionEnabled) returns boolean {\n+@tainted http:FilterContext filterContext) returns boolean {\n+    boolean subscriptionValidated = false;\n+    boolean subscriptionEnabled = getConfigBooleanValue(JWT_INSTANCE_ID, VALIDATE_SUBSCRIPTION, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTM5NDE5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTozNjoxOFrOFfu4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTozNjoxOFrOFfu4nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgxODMzMw==", "bodyText": "Year should be 2020 I think\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n            // Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368818333", "createdAt": "2020-01-21T05:36:18Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQxMjkzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTo1MTo0M1rOFfvEDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTo1MTo0M1rOFfvEDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMTI2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public jwt:InboundJwtAuthProvider inboundJwtAuthProviderforAPIKey;\n          \n          \n            \n                public jwt:InboundJwtAuthProvider authProvider;", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368821260", "createdAt": "2020-01-21T05:51:43Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/jwt;\n+\n+# Represents inbound api key auth provider.\n+#\n+# + apiKeyValidatorConfig - api key validator configurations\n+# + inboundJwtAuthProviderforAPIKey - Reference to b7a inbound auth provider\n+public type APIKeyProvider object {\n+    *auth:InboundAuthProvider;\n+\n+    public jwt:JwtValidatorConfig apiKeyValidatorConfig;\n+    public jwt:InboundJwtAuthProvider inboundJwtAuthProviderforAPIKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQxMzYyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTo1MjowN1rOFfvEaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNTo1MjowN1rOFfvEaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyMTM1NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public jwt:JwtValidatorConfig apiKeyValidatorConfig;\n          \n          \n            \n                public jwt:JwtValidatorConfig config;", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368821355", "createdAt": "2020-01-21T05:52:07Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/jwt;\n+\n+# Represents inbound api key auth provider.\n+#\n+# + apiKeyValidatorConfig - api key validator configurations\n+# + inboundJwtAuthProviderforAPIKey - Reference to b7a inbound auth provider\n+public type APIKeyProvider object {\n+    *auth:InboundAuthProvider;\n+\n+    public jwt:JwtValidatorConfig apiKeyValidatorConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQ0MTEzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoxMjoyNlrOFfvVaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoxMjoyNlrOFfvVaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNTcwNw==", "bodyText": "Shall we rename to something like isAuthenticated?", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368825707", "createdAt": "2020-01-21T06:12:26Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/jwt;\n+\n+# Represents inbound api key auth provider.\n+#\n+# + apiKeyValidatorConfig - api key validator configurations\n+# + inboundJwtAuthProviderforAPIKey - Reference to b7a inbound auth provider\n+public type APIKeyProvider object {\n+    *auth:InboundAuthProvider;\n+\n+    public jwt:JwtValidatorConfig apiKeyValidatorConfig;\n+    public jwt:InboundJwtAuthProvider inboundJwtAuthProviderforAPIKey;\n+\n+    # Provides authentication based on the provided api key token.\n+    #\n+    # + apiKeyValidatorConfig - api key validator configurations\n+    public function __init(jwt:JwtValidatorConfig apiKeyValidatorConfig) {\n+        self.apiKeyValidatorConfig = apiKeyValidatorConfig;\n+        self.inboundJwtAuthProviderforAPIKey = new (apiKeyValidatorConfig);\n+    }\n+\n+    public function authenticate(string credential) returns @tainted (boolean | auth:Error) {\n+        //Start a span attaching to the system span.\n+        int | error | () spanIdAuth = startSpan(API_KEY_PROVIDER_AUTHENTICATE);\n+        var handleVar = self.inboundJwtAuthProviderforAPIKey.authenticate(credential);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQ0Mjg5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoxMzo0NFrOFfvWdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoxMzo0NFrOFfvWdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNTk3Mg==", "bodyText": "Variable declaration can be moved down to,\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        boolean validated = false;\n          \n          \n            \n                        boolean validated = validateAPIKey(credential);", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368825972", "createdAt": "2020-01-21T06:13:44Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/jwt;\n+\n+# Represents inbound api key auth provider.\n+#\n+# + apiKeyValidatorConfig - api key validator configurations\n+# + inboundJwtAuthProviderforAPIKey - Reference to b7a inbound auth provider\n+public type APIKeyProvider object {\n+    *auth:InboundAuthProvider;\n+\n+    public jwt:JwtValidatorConfig apiKeyValidatorConfig;\n+    public jwt:InboundJwtAuthProvider inboundJwtAuthProviderforAPIKey;\n+\n+    # Provides authentication based on the provided api key token.\n+    #\n+    # + apiKeyValidatorConfig - api key validator configurations\n+    public function __init(jwt:JwtValidatorConfig apiKeyValidatorConfig) {\n+        self.apiKeyValidatorConfig = apiKeyValidatorConfig;\n+        self.inboundJwtAuthProviderforAPIKey = new (apiKeyValidatorConfig);\n+    }\n+\n+    public function authenticate(string credential) returns @tainted (boolean | auth:Error) {\n+        //Start a span attaching to the system span.\n+        int | error | () spanIdAuth = startSpan(API_KEY_PROVIDER_AUTHENTICATE);\n+        var handleVar = self.inboundJwtAuthProviderforAPIKey.authenticate(credential);\n+        //finishing span\n+        finishSpan(API_KEY_PROVIDER_AUTHENTICATE, spanIdAuth);\n+        if (handleVar is boolean) {\n+            boolean validated = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQ0ODk4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoxNzozOVrOFfvaAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoxNzozOVrOFfvaAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNjg4MQ==", "bodyText": "Can write this without else statement since all cases are returned inside if block.\n- } else {\n-     setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n-     return prepareError(\"Failed to authenticate with api key auth provider.\", handleVar);\n- }\n+ setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n+ return prepareError(\"Failed to authenticate with api key auth provider.\", handleVar);", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368826881", "createdAt": "2020-01-21T06:17:39Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/api_key_provider.bal", "diffHunk": "@@ -0,0 +1,60 @@\n+// Copyright (c) 2019 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/jwt;\n+\n+# Represents inbound api key auth provider.\n+#\n+# + apiKeyValidatorConfig - api key validator configurations\n+# + inboundJwtAuthProviderforAPIKey - Reference to b7a inbound auth provider\n+public type APIKeyProvider object {\n+    *auth:InboundAuthProvider;\n+\n+    public jwt:JwtValidatorConfig apiKeyValidatorConfig;\n+    public jwt:InboundJwtAuthProvider inboundJwtAuthProviderforAPIKey;\n+\n+    # Provides authentication based on the provided api key token.\n+    #\n+    # + apiKeyValidatorConfig - api key validator configurations\n+    public function __init(jwt:JwtValidatorConfig apiKeyValidatorConfig) {\n+        self.apiKeyValidatorConfig = apiKeyValidatorConfig;\n+        self.inboundJwtAuthProviderforAPIKey = new (apiKeyValidatorConfig);\n+    }\n+\n+    public function authenticate(string credential) returns @tainted (boolean | auth:Error) {\n+        //Start a span attaching to the system span.\n+        int | error | () spanIdAuth = startSpan(API_KEY_PROVIDER_AUTHENTICATE);\n+        var handleVar = self.inboundJwtAuthProviderforAPIKey.authenticate(credential);\n+        //finishing span\n+        finishSpan(API_KEY_PROVIDER_AUTHENTICATE, spanIdAuth);\n+        if (handleVar is boolean) {\n+            boolean validated = false;\n+            if (!handleVar) {\n+                setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n+                return false;\n+            }\n+            validated = validateAPIKey(credential);\n+            if (!validated) {\n+                setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n+            }\n+            return validated;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQ1NDIyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoyMToxMFrOFfvdJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoyMToxMFrOFfvdJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNzY4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                BasicAuthProvider configBasicAuthProvider = new (basicAuthConfig);\n          \n          \n            \n                BasicAuthProvider provider = new (basicAuthConfig);", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368827687", "createdAt": "2020-01-21T06:21:10Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "diffHunk": "@@ -219,10 +241,18 @@ function initiateKeyManagerConfigurations() {\n     getGatewayConfInstance().setKeyManagerConf(keyManagerConf);\n }\n \n-function getOauth2OutboundProvider() returns oauth2:OutboundOAuth2Provider|error {\n-    oauth2:OutboundOAuth2Provider oauth2Provider = new();\n-    http:ClientConfiguration clientConfig  = {\n-        secureSocket : {\n+public function getBasicAuthHandler() returns http:InboundAuthHandler[] {\n+    // Initializes the basic auth handler\n+    auth:BasicAuthConfig basicAuthConfig = {tableName: CONFIG_USER_SECTION};\n+    BasicAuthProvider configBasicAuthProvider = new (basicAuthConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQ1NDk5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoyMTo0MVrOFfvdnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoyMTo0MVrOFfvdnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyNzgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                auth:BasicAuthConfig basicAuthConfig = {tableName: CONFIG_USER_SECTION};\n          \n          \n            \n                auth:BasicAuthConfig config = {tableName: CONFIG_USER_SECTION};", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368827805", "createdAt": "2020-01-21T06:21:41Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "diffHunk": "@@ -219,10 +241,18 @@ function initiateKeyManagerConfigurations() {\n     getGatewayConfInstance().setKeyManagerConf(keyManagerConf);\n }\n \n-function getOauth2OutboundProvider() returns oauth2:OutboundOAuth2Provider|error {\n-    oauth2:OutboundOAuth2Provider oauth2Provider = new();\n-    http:ClientConfiguration clientConfig  = {\n-        secureSocket : {\n+public function getBasicAuthHandler() returns http:InboundAuthHandler[] {\n+    // Initializes the basic auth handler\n+    auth:BasicAuthConfig basicAuthConfig = {tableName: CONFIG_USER_SECTION};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3OTQ1NzUzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoyMzoxOFrOFfvfCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQwNjoyMzoxOFrOFfvfCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODgyODE2OA==", "bodyText": "These are local variables which clearly distinguish the identifier responsibility through identifier type. So no point in using long descriptive names\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                http:BasicAuthHandler basicAuthHandler = new (configBasicAuthProvider);\n          \n          \n            \n                http:BasicAuthHandler handler = new (configBasicAuthProvider);", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r368828168", "createdAt": "2020-01-21T06:23:18Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "diffHunk": "@@ -219,10 +241,18 @@ function initiateKeyManagerConfigurations() {\n     getGatewayConfInstance().setKeyManagerConf(keyManagerConf);\n }\n \n-function getOauth2OutboundProvider() returns oauth2:OutboundOAuth2Provider|error {\n-    oauth2:OutboundOAuth2Provider oauth2Provider = new();\n-    http:ClientConfiguration clientConfig  = {\n-        secureSocket : {\n+public function getBasicAuthHandler() returns http:InboundAuthHandler[] {\n+    // Initializes the basic auth handler\n+    auth:BasicAuthConfig basicAuthConfig = {tableName: CONFIG_USER_SECTION};\n+    BasicAuthProvider configBasicAuthProvider = new (basicAuthConfig);\n+    http:BasicAuthHandler basicAuthHandler = new (configBasicAuthProvider);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f151c236635f87eefea59362c47324d236e1eca2"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjUyMjAwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTo0MTo1MVrOFgzXqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNTo0MTo1MVrOFgzXqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk0MDM5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        log:printError(\"Error when responding during the token endpoint request\", err = result);\n          \n          \n            \n                        gateway:printError(gateway:TOKEN_SERVICE, \"Error when responding during the token endpoint request\", err = result);", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369940392", "createdAt": "2020-01-23T05:41:51Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "diffHunk": "@@ -138,7 +138,51 @@ service tokenService on tokenListenerEndpoint, apiSecureListener {\n         }\n         var result = caller->respond(forwardedResponse);\n         if (result is error) {\n-           log:printError(\"Error when responding during the token endpoint request\", err = result);\n+            log:printError(\"Error when responding during the token endpoint request\", err = result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjcxODY4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/api_key_handler.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzo1MTo1N1rOFg1Nsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzo1MTo1N1rOFg1Nsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MDYxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369970611", "createdAt": "2020-01-23T07:51:57Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/api_key_handler.bal", "diffHunk": "@@ -0,0 +1,85 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/stringutils;\n+\n+# Representation of the api key validating handler\n+#\n+# + apiKeyProvider - The reference to the jwt auth provider instance\n+public type APIKeyHandler object {\n+\n+    *http:InboundAuthHandler;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjcyMzA0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzo1NDowMlrOFg1QWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzo1NDowMlrOFg1QWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MTI5MA==", "bodyText": "Shall we update the PR with new default config constants in PR #948 ?", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369971290", "createdAt": "2020-01-23T07:54:02Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/listeners/api_gateway_listener.bal", "diffHunk": "@@ -114,6 +114,29 @@ public function getAuthHandlers() returns http:InboundAuthHandler[] {\n         jwtAuthHandler = new JWTAuthHandler(jwtAuthProvider);\n     }\n \n+    //Initializes apikey handler\n+    jwt:JwtValidatorConfig apiKeyValidatorConfig = {\n+        issuer: getConfigValue(API_KEY_INSTANCE_ID, ISSUER, \"https://localhost:9095/apikey\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjcyNTY0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzo1NToyMlrOFg1R8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwNzo1NToyMlrOFg1R8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MTY5Nw==", "bodyText": "Missing license header", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369971697", "createdAt": "2020-01-23T07:55:22Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/crypto;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjczNTU5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMDowMVrOFg1X4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMDowMVrOFg1X4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MzIxOQ==", "bodyText": "Shall we print more information in this message. Like what has been done so far, probably header was built and going to retrieve authned user. Also add few more debug logs in this file.\nEx: after adding basic attributes, after adding custom attributes (api info...)", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369973219", "createdAt": "2020-01-23T08:00:01Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/crypto;\n+import ballerina/http;\n+import ballerina/jwt;\n+import ballerina/lang.'int as ints;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+import ballerina/system;\n+import ballerina/time;\n+\n+# Provide self generated jwt as api key.\n+# + req - http request\n+# + return - Returns api key.\n+public function generateAPIKey(http:Request req) returns string | error {\n+    if (getConfigBooleanValue(API_KEY_ISSUER_TOKEN_CONFIG, API_KEY_ISSUER_ENABLED, false)) {\n+        crypto:KeyStore keyStore = {\n+            path: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PATH,\n+            \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"),\n+            password: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtKeyStoreConfig config = {\n+            keyStore: keyStore,\n+            keyAlias: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\"),\n+            keyPassword: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtHeader header = {};\n+        header.alg = jwt:RS256;\n+        header.typ = AUTH_SCHEME_JWT;\n+        header.kid = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\");\n+\n+        jwt:JwtPayload jwtPayload = {};\n+        //get authenticated user\n+        printDebug(API_KEY_UTIL, \"get authenticated user\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjczNzAyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMDozOVrOFg1YwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMDozOVrOFg1YwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MzQ0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            }\n          \n          \n            \n                            } else {", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369973440", "createdAt": "2020-01-23T08:00:39Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/crypto;\n+import ballerina/http;\n+import ballerina/jwt;\n+import ballerina/lang.'int as ints;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+import ballerina/system;\n+import ballerina/time;\n+\n+# Provide self generated jwt as api key.\n+# + req - http request\n+# + return - Returns api key.\n+public function generateAPIKey(http:Request req) returns string | error {\n+    if (getConfigBooleanValue(API_KEY_ISSUER_TOKEN_CONFIG, API_KEY_ISSUER_ENABLED, false)) {\n+        crypto:KeyStore keyStore = {\n+            path: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PATH,\n+            \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"),\n+            password: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtKeyStoreConfig config = {\n+            keyStore: keyStore,\n+            keyAlias: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\"),\n+            keyPassword: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtHeader header = {};\n+        header.alg = jwt:RS256;\n+        header.typ = AUTH_SCHEME_JWT;\n+        header.kid = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\");\n+\n+        jwt:JwtPayload jwtPayload = {};\n+        //get authenticated user\n+        printDebug(API_KEY_UTIL, \"get authenticated user\");\n+        runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+        AuthenticationContext authContext = <AuthenticationContext>invocationContext.attributes[AUTHENTICATION_CONTEXT];\n+        string username = authContext.username;\n+\n+        jwtPayload.sub = username;\n+        jwtPayload.iss = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, ISSUER, \"https://localhost:9443/oauth2/token\");\n+        jwtPayload.jti = system:uuid();\n+        jwtPayload.aud = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, AUDIENCE, \"http://org.wso2.apimgt/gateway\");\n+        int currentTime = time:currentTime().time / 1000;        //current time in seconds\n+        int expiryTime = getExpiryTime(req);\n+\n+        if (expiryTime > 0) {\n+            jwtPayload.exp = currentTime + expiryTime;\n+        }\n+\n+        jwtPayload.iat = currentTime;\n+        json[] apis = [];\n+        int counter = 1;\n+        while (true) {\n+            map<any> apiMap = getConfigMapValue(API_KEY_ISSUER_APIS + \".\" + counter.toString());\n+            counter = counter + 1;\n+            if (apiMap.keys().length() > 0) {\n+                string name = <string>apiMap.get(\"name\");\n+                if (!apiMap.hasKey(\"versions\") || stringutils:equalsIgnoreCase(\"*\", <string>apiMap.get(\"versions\"))) {\n+                    json api = {name: name, 'version: \"*\"};\n+                    apis.push(api);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjczNzQzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMDo0OFrOFg1Y_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMDo0OFrOFg1Y_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MzUwMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            else {", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369973500", "createdAt": "2020-01-23T08:00:48Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/crypto;\n+import ballerina/http;\n+import ballerina/jwt;\n+import ballerina/lang.'int as ints;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+import ballerina/system;\n+import ballerina/time;\n+\n+# Provide self generated jwt as api key.\n+# + req - http request\n+# + return - Returns api key.\n+public function generateAPIKey(http:Request req) returns string | error {\n+    if (getConfigBooleanValue(API_KEY_ISSUER_TOKEN_CONFIG, API_KEY_ISSUER_ENABLED, false)) {\n+        crypto:KeyStore keyStore = {\n+            path: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PATH,\n+            \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"),\n+            password: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtKeyStoreConfig config = {\n+            keyStore: keyStore,\n+            keyAlias: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\"),\n+            keyPassword: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtHeader header = {};\n+        header.alg = jwt:RS256;\n+        header.typ = AUTH_SCHEME_JWT;\n+        header.kid = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\");\n+\n+        jwt:JwtPayload jwtPayload = {};\n+        //get authenticated user\n+        printDebug(API_KEY_UTIL, \"get authenticated user\");\n+        runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+        AuthenticationContext authContext = <AuthenticationContext>invocationContext.attributes[AUTHENTICATION_CONTEXT];\n+        string username = authContext.username;\n+\n+        jwtPayload.sub = username;\n+        jwtPayload.iss = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, ISSUER, \"https://localhost:9443/oauth2/token\");\n+        jwtPayload.jti = system:uuid();\n+        jwtPayload.aud = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, AUDIENCE, \"http://org.wso2.apimgt/gateway\");\n+        int currentTime = time:currentTime().time / 1000;        //current time in seconds\n+        int expiryTime = getExpiryTime(req);\n+\n+        if (expiryTime > 0) {\n+            jwtPayload.exp = currentTime + expiryTime;\n+        }\n+\n+        jwtPayload.iat = currentTime;\n+        json[] apis = [];\n+        int counter = 1;\n+        while (true) {\n+            map<any> apiMap = getConfigMapValue(API_KEY_ISSUER_APIS + \".\" + counter.toString());\n+            counter = counter + 1;\n+            if (apiMap.keys().length() > 0) {\n+                string name = <string>apiMap.get(\"name\");\n+                if (!apiMap.hasKey(\"versions\") || stringutils:equalsIgnoreCase(\"*\", <string>apiMap.get(\"versions\"))) {\n+                    json api = {name: name, 'version: \"*\"};\n+                    apis.push(api);\n+                }\n+                else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjczNzc4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMTowMFrOFg1ZOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMTowMFrOFg1ZOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MzU2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        }\n          \n          \n            \n                        } else {", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369973561", "createdAt": "2020-01-23T08:01:00Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/crypto;\n+import ballerina/http;\n+import ballerina/jwt;\n+import ballerina/lang.'int as ints;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+import ballerina/system;\n+import ballerina/time;\n+\n+# Provide self generated jwt as api key.\n+# + req - http request\n+# + return - Returns api key.\n+public function generateAPIKey(http:Request req) returns string | error {\n+    if (getConfigBooleanValue(API_KEY_ISSUER_TOKEN_CONFIG, API_KEY_ISSUER_ENABLED, false)) {\n+        crypto:KeyStore keyStore = {\n+            path: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PATH,\n+            \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"),\n+            password: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtKeyStoreConfig config = {\n+            keyStore: keyStore,\n+            keyAlias: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\"),\n+            keyPassword: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtHeader header = {};\n+        header.alg = jwt:RS256;\n+        header.typ = AUTH_SCHEME_JWT;\n+        header.kid = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\");\n+\n+        jwt:JwtPayload jwtPayload = {};\n+        //get authenticated user\n+        printDebug(API_KEY_UTIL, \"get authenticated user\");\n+        runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+        AuthenticationContext authContext = <AuthenticationContext>invocationContext.attributes[AUTHENTICATION_CONTEXT];\n+        string username = authContext.username;\n+\n+        jwtPayload.sub = username;\n+        jwtPayload.iss = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, ISSUER, \"https://localhost:9443/oauth2/token\");\n+        jwtPayload.jti = system:uuid();\n+        jwtPayload.aud = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, AUDIENCE, \"http://org.wso2.apimgt/gateway\");\n+        int currentTime = time:currentTime().time / 1000;        //current time in seconds\n+        int expiryTime = getExpiryTime(req);\n+\n+        if (expiryTime > 0) {\n+            jwtPayload.exp = currentTime + expiryTime;\n+        }\n+\n+        jwtPayload.iat = currentTime;\n+        json[] apis = [];\n+        int counter = 1;\n+        while (true) {\n+            map<any> apiMap = getConfigMapValue(API_KEY_ISSUER_APIS + \".\" + counter.toString());\n+            counter = counter + 1;\n+            if (apiMap.keys().length() > 0) {\n+                string name = <string>apiMap.get(\"name\");\n+                if (!apiMap.hasKey(\"versions\") || stringutils:equalsIgnoreCase(\"*\", <string>apiMap.get(\"versions\"))) {\n+                    json api = {name: name, 'version: \"*\"};\n+                    apis.push(api);\n+                }\n+                else {\n+                    string allowedVersionsfromConfig = <string>apiMap.get(\"versions\");\n+                    string[] allowedVersionList = split(allowedVersionsfromConfig, \",\");\n+                    foreach string v in allowedVersionList {\n+                        json api = {name: name, 'version: v.trim()};\n+                        apis.push(api);\n+                    }\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjczODIyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMToxMVrOFg1Zdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODowMToxMVrOFg1Zdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3MzYyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        else {", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369973623", "createdAt": "2020-01-23T08:01:11Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/crypto;\n+import ballerina/http;\n+import ballerina/jwt;\n+import ballerina/lang.'int as ints;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+import ballerina/system;\n+import ballerina/time;\n+\n+# Provide self generated jwt as api key.\n+# + req - http request\n+# + return - Returns api key.\n+public function generateAPIKey(http:Request req) returns string | error {\n+    if (getConfigBooleanValue(API_KEY_ISSUER_TOKEN_CONFIG, API_KEY_ISSUER_ENABLED, false)) {\n+        crypto:KeyStore keyStore = {\n+            path: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PATH,\n+            \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"),\n+            password: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtKeyStoreConfig config = {\n+            keyStore: keyStore,\n+            keyAlias: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\"),\n+            keyPassword: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtHeader header = {};\n+        header.alg = jwt:RS256;\n+        header.typ = AUTH_SCHEME_JWT;\n+        header.kid = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\");\n+\n+        jwt:JwtPayload jwtPayload = {};\n+        //get authenticated user\n+        printDebug(API_KEY_UTIL, \"get authenticated user\");\n+        runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+        AuthenticationContext authContext = <AuthenticationContext>invocationContext.attributes[AUTHENTICATION_CONTEXT];\n+        string username = authContext.username;\n+\n+        jwtPayload.sub = username;\n+        jwtPayload.iss = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, ISSUER, \"https://localhost:9443/oauth2/token\");\n+        jwtPayload.jti = system:uuid();\n+        jwtPayload.aud = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, AUDIENCE, \"http://org.wso2.apimgt/gateway\");\n+        int currentTime = time:currentTime().time / 1000;        //current time in seconds\n+        int expiryTime = getExpiryTime(req);\n+\n+        if (expiryTime > 0) {\n+            jwtPayload.exp = currentTime + expiryTime;\n+        }\n+\n+        jwtPayload.iat = currentTime;\n+        json[] apis = [];\n+        int counter = 1;\n+        while (true) {\n+            map<any> apiMap = getConfigMapValue(API_KEY_ISSUER_APIS + \".\" + counter.toString());\n+            counter = counter + 1;\n+            if (apiMap.keys().length() > 0) {\n+                string name = <string>apiMap.get(\"name\");\n+                if (!apiMap.hasKey(\"versions\") || stringutils:equalsIgnoreCase(\"*\", <string>apiMap.get(\"versions\"))) {\n+                    json api = {name: name, 'version: \"*\"};\n+                    apis.push(api);\n+                }\n+                else {\n+                    string allowedVersionsfromConfig = <string>apiMap.get(\"versions\");\n+                    string[] allowedVersionList = split(allowedVersionsfromConfig, \",\");\n+                    foreach string v in allowedVersionList {\n+                        json api = {name: name, 'version: v.trim()};\n+                        apis.push(api);\n+                    }\n+                }\n+            }\n+            else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Njc1NTczOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODoxMDowMFrOFg1j2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwODoxMDowMFrOFg1j2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTk3NjI4Mw==", "bodyText": "Is this temp comment or explanation?", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r369976283", "createdAt": "2020-01-23T08:10:00Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/crypto;\n+import ballerina/http;\n+import ballerina/jwt;\n+import ballerina/lang.'int as ints;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+import ballerina/system;\n+import ballerina/time;\n+\n+# Provide self generated jwt as api key.\n+# + req - http request\n+# + return - Returns api key.\n+public function generateAPIKey(http:Request req) returns string | error {\n+    if (getConfigBooleanValue(API_KEY_ISSUER_TOKEN_CONFIG, API_KEY_ISSUER_ENABLED, false)) {\n+        crypto:KeyStore keyStore = {\n+            path: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PATH,\n+            \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"),\n+            password: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtKeyStoreConfig config = {\n+            keyStore: keyStore,\n+            keyAlias: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\"),\n+            keyPassword: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtHeader header = {};\n+        header.alg = jwt:RS256;\n+        header.typ = AUTH_SCHEME_JWT;\n+        header.kid = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\");\n+\n+        jwt:JwtPayload jwtPayload = {};\n+        //get authenticated user\n+        printDebug(API_KEY_UTIL, \"get authenticated user\");\n+        runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+        AuthenticationContext authContext = <AuthenticationContext>invocationContext.attributes[AUTHENTICATION_CONTEXT];\n+        string username = authContext.username;\n+\n+        jwtPayload.sub = username;\n+        jwtPayload.iss = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, ISSUER, \"https://localhost:9443/oauth2/token\");\n+        jwtPayload.jti = system:uuid();\n+        jwtPayload.aud = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, AUDIENCE, \"http://org.wso2.apimgt/gateway\");\n+        int currentTime = time:currentTime().time / 1000;        //current time in seconds\n+        int expiryTime = getExpiryTime(req);\n+\n+        if (expiryTime > 0) {\n+            jwtPayload.exp = currentTime + expiryTime;\n+        }\n+\n+        jwtPayload.iat = currentTime;\n+        json[] apis = [];\n+        int counter = 1;\n+        while (true) {\n+            map<any> apiMap = getConfigMapValue(API_KEY_ISSUER_APIS + \".\" + counter.toString());\n+            counter = counter + 1;\n+            if (apiMap.keys().length() > 0) {\n+                string name = <string>apiMap.get(\"name\");\n+                if (!apiMap.hasKey(\"versions\") || stringutils:equalsIgnoreCase(\"*\", <string>apiMap.get(\"versions\"))) {\n+                    json api = {name: name, 'version: \"*\"};\n+                    apis.push(api);\n+                }\n+                else {\n+                    string allowedVersionsfromConfig = <string>apiMap.get(\"versions\");\n+                    string[] allowedVersionList = split(allowedVersionsfromConfig, \",\");\n+                    foreach string v in allowedVersionList {\n+                        json api = {name: name, 'version: v.trim()};\n+                        apis.push(api);\n+                    }\n+                }\n+            }\n+            else {\n+                break;\n+            }\n+        }\n+        map<json> customClaims = {};\n+        json[] subscribedAPIs = apis;\n+        customClaims[ALLOWED_APIS] = subscribedAPIs;\n+        json keyType = PRODUCTION_KEY_TYPE;\n+        customClaims[KEY_TYPE] = keyType;\n+        jwtPayload.customClaims = customClaims;\n+\n+        printDebug(API_KEY_UTIL, \"API Key is being issued.. .\");\n+        string | error apiKey = jwt:issueJwt(header, jwtPayload, config);\n+        printDebug(API_KEY_UTIL, \"API Key issuing process completed\");\n+        return apiKey;\n+    }\n+    return \"Error: API Key issuer is disabled\";\n+}\n+\n+public function getExpiryTime(http:Request req) returns @tainted (int) {\n+    var payload = req.getJsonPayload();\n+    int expiryTime = getConfigIntValue(API_KEY_ISSUER_TOKEN_CONFIG, API_KEY_VALIDITY_TIME, -1);\n+    printDebug(API_KEY_UTIL, \"Validity Period in config: \" + expiryTime.toString());\n+\n+    //if payload > 0 and (payload < expirytime || expirytime < 0) from config  ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4Njk5MDY5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOTozNDoyMVrOFg3vtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOTozNDoyMVrOFg3vtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAxMjA4NA==", "bodyText": "Please start all logs with upper case letter to keep the consistency.", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r370012084", "createdAt": "2020-01-23T09:34:21Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/api_key_utils.bal", "diffHunk": "@@ -0,0 +1,174 @@\n+import ballerina/crypto;\n+import ballerina/http;\n+import ballerina/jwt;\n+import ballerina/lang.'int as ints;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+import ballerina/system;\n+import ballerina/time;\n+\n+# Provide self generated jwt as api key.\n+# + req - http request\n+# + return - Returns api key.\n+public function generateAPIKey(http:Request req) returns string | error {\n+    if (getConfigBooleanValue(API_KEY_ISSUER_TOKEN_CONFIG, API_KEY_ISSUER_ENABLED, false)) {\n+        crypto:KeyStore keyStore = {\n+            path: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PATH,\n+            \"${ballerina.home}/bre/security/ballerinaKeystore.p12\"),\n+            password: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtKeyStoreConfig config = {\n+            keyStore: keyStore,\n+            keyAlias: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\"),\n+            keyPassword: getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, KEY_STORE_PASSWORD, \"ballerina\")\n+        };\n+\n+        jwt:JwtHeader header = {};\n+        header.alg = jwt:RS256;\n+        header.typ = AUTH_SCHEME_JWT;\n+        header.kid = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, CERTIFICATE_ALIAS, \"ballerina\");\n+\n+        jwt:JwtPayload jwtPayload = {};\n+        //get authenticated user\n+        printDebug(API_KEY_UTIL, \"get authenticated user\");\n+        runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+        AuthenticationContext authContext = <AuthenticationContext>invocationContext.attributes[AUTHENTICATION_CONTEXT];\n+        string username = authContext.username;\n+\n+        jwtPayload.sub = username;\n+        jwtPayload.iss = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, ISSUER, \"https://localhost:9443/oauth2/token\");\n+        jwtPayload.jti = system:uuid();\n+        jwtPayload.aud = getConfigValue(API_KEY_ISSUER_TOKEN_CONFIG, AUDIENCE, \"http://org.wso2.apimgt/gateway\");\n+        int currentTime = time:currentTime().time / 1000;        //current time in seconds\n+        int expiryTime = getExpiryTime(req);\n+\n+        if (expiryTime > 0) {\n+            jwtPayload.exp = currentTime + expiryTime;\n+        }\n+\n+        jwtPayload.iat = currentTime;\n+        json[] apis = [];\n+        int counter = 1;\n+        while (true) {\n+            map<any> apiMap = getConfigMapValue(API_KEY_ISSUER_APIS + \".\" + counter.toString());\n+            counter = counter + 1;\n+            if (apiMap.keys().length() > 0) {\n+                string name = <string>apiMap.get(\"name\");\n+                if (!apiMap.hasKey(\"versions\") || stringutils:equalsIgnoreCase(\"*\", <string>apiMap.get(\"versions\"))) {\n+                    json api = {name: name, 'version: \"*\"};\n+                    apis.push(api);\n+                }\n+                else {\n+                    string allowedVersionsfromConfig = <string>apiMap.get(\"versions\");\n+                    string[] allowedVersionList = split(allowedVersionsfromConfig, \",\");\n+                    foreach string v in allowedVersionList {\n+                        json api = {name: name, 'version: v.trim()};\n+                        apis.push(api);\n+                    }\n+                }\n+            }\n+            else {\n+                break;\n+            }\n+        }\n+        map<json> customClaims = {};\n+        json[] subscribedAPIs = apis;\n+        customClaims[ALLOWED_APIS] = subscribedAPIs;\n+        json keyType = PRODUCTION_KEY_TYPE;\n+        customClaims[KEY_TYPE] = keyType;\n+        jwtPayload.customClaims = customClaims;\n+\n+        printDebug(API_KEY_UTIL, \"API Key is being issued.. .\");\n+        string | error apiKey = jwt:issueJwt(header, jwtPayload, config);\n+        printDebug(API_KEY_UTIL, \"API Key issuing process completed\");\n+        return apiKey;\n+    }\n+    return \"Error: API Key issuer is disabled\";\n+}\n+\n+public function getExpiryTime(http:Request req) returns @tainted (int) {\n+    var payload = req.getJsonPayload();\n+    int expiryTime = getConfigIntValue(API_KEY_ISSUER_TOKEN_CONFIG, API_KEY_VALIDITY_TIME, -1);\n+    printDebug(API_KEY_UTIL, \"Validity Period in config: \" + expiryTime.toString());\n+\n+    //if payload > 0 and (payload < expirytime || expirytime < 0) from config  \n+\n+    if (payload is json) {\n+        map<json> payloadMap = <map<json>>payload;\n+        if (payloadMap.hasKey(API_KEY_VALIDITY_TIME)) {\n+            var expiryTimefromPayload = ints:fromString(payloadMap[API_KEY_VALIDITY_TIME].toString());\n+            if (expiryTimefromPayload is int && expiryTimefromPayload > 0 && (expiryTime < 0 || expiryTime > expiryTimefromPayload)) {\n+                expiryTime = expiryTimefromPayload;\n+            }\n+        }\n+    }\n+    return expiryTime;\n+}\n+\n+# api key authorization\n+#\n+# + apiKeyToken - api key token string.\n+# + return - Returns boolean value.\n+public function validateAPIKey(string apiKeyToken) returns boolean {\n+    boolean validated = false;\n+    boolean validateAllowedAPIs = getConfigBooleanValue(API_KEY_INSTANCE_ID, API_KEY_VALIDATE_ALLOWED_APIS, false);\n+\n+    runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n+    runtime:AuthenticationContext? authContext = invocationContext?.authenticationContext;\n+    if (authContext is runtime:AuthenticationContext) {\n+        printDebug(API_KEY_UTIL, \"Set authContext scheme to \" + AUTH_SCHEME_API_KEY);\n+        authContext.scheme = AUTH_SCHEME_API_KEY;\n+    }\n+    //decode jwt\n+    [jwt:JwtHeader, jwt:JwtPayload] | jwt:Error decodedJWT = jwt:decodeJwt(apiKeyToken);\n+    if (decodedJWT is error) {\n+        printError(API_KEY_UTIL, \"Error while decoding the JWT token\");\n+        return false;\n+    }\n+    //get payload\n+    (jwt:JwtPayload | error) payload = getDecodedJWTPayload(apiKeyToken);\n+    if (payload is jwt:JwtPayload) {\n+        json subscribedAPIList = [];\n+        //get allowed apis\n+        map<json>? customClaims = payload?.customClaims;\n+        if (customClaims is map<json>) {\n+            if (customClaims.hasKey(SUBSCRIBED_APIS)) {\n+                printDebug(API_KEY_UTIL, \"subscribedAPIs claim found in the jwt\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NzA0OTMyOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/wso2/micro/gateway/tests/apikey/APIKeyTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOTo1MjoxMVrOFg4SSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwOTo1MjoxMVrOFg4SSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDAyMDkzOQ==", "bodyText": "Missing license", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r370020939", "createdAt": "2020-01-23T09:52:11Z", "author": {"login": "praminda"}, "path": "tests/src/test/java/org/wso2/micro/gateway/tests/apikey/APIKeyTestCase.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package org.wso2.micro.gateway.tests.apikey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59daeab349cc8a99f89084b26f6eb15a75442eec"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDI2MzkzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo0NDoyMFrOFh7Dbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowNDoyNlrOFm7Bww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExNDg2Mw==", "bodyText": "print the full error", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r371114863", "createdAt": "2020-01-27T08:44:20Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "diffHunk": "@@ -138,7 +138,51 @@ service tokenService on tokenListenerEndpoint, apiSecureListener {\n         }\n         var result = caller->respond(forwardedResponse);\n         if (result is error) {\n-           log:printError(\"Error when responding during the token endpoint request\", err = result);\n+            log:printError(\"Error when responding during the token endpoint request\", err = result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyMjAyNg==", "bodyText": "tokenServices.mustache file contains these log:printError lines in several places. It is better to refactor this file to use new printError() method instead of log:printError.  Shall we fix this with another PR?", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r371122026", "createdAt": "2020-01-27T09:02:17Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "diffHunk": "@@ -138,7 +138,51 @@ service tokenService on tokenListenerEndpoint, apiSecureListener {\n         }\n         var result = caller->respond(forwardedResponse);\n         if (result is error) {\n-           log:printError(\"Error when responding during the token endpoint request\", err = result);\n+            log:printError(\"Error when responding during the token endpoint request\", err = result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExNDg2Mw=="}, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzMxNQ==", "bodyText": "Fixed in #973", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r376357315", "createdAt": "2020-02-07T12:04:26Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-cli/src/main/resources/templates/tokenServices.mustache", "diffHunk": "@@ -138,7 +138,51 @@ service tokenService on tokenListenerEndpoint, apiSecureListener {\n         }\n         var result = caller->respond(forwardedResponse);\n         if (result is error) {\n-           log:printError(\"Error when responding during the token endpoint request\", err = result);\n+            log:printError(\"Error when responding during the token endpoint request\", err = result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExNDg2Mw=="}, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDMyMzAwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOTowNjoxOVrOFh7mBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOTo1MDozN1rOFh80pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyMzcxOA==", "bodyText": "Try to use the APIM message for the consistancy", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r371123718", "createdAt": "2020-01-27T09:06:19Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "diffHunk": "@@ -29,7 +29,7 @@ public const string API_AUTH_INVALID_CREDENTIALS_DESCRIPTION =\n public const int API_AUTH_MISSING_CREDENTIALS = 900902;\n public const string API_AUTH_MISSING_CREDENTIALS_MESSAGE = \"Missing Credentials\";\n public const string API_AUTH_MISSING_CREDENTIALS_DESCRIPTION =\n-\"Make sure your API invocation call has a header: \\\"Authorization: Bearer ACCESS_TOKEN\\\"\";\n+\"Make sure your API request provides required credentials\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0Mzg0NA==", "bodyText": "APIM message is \"Make sure your API invocation call has a header\". I believe this message is kind of invalid now.", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r371143844", "createdAt": "2020-01-27T09:50:37Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "diffHunk": "@@ -29,7 +29,7 @@ public const string API_AUTH_INVALID_CREDENTIALS_DESCRIPTION =\n public const int API_AUTH_MISSING_CREDENTIALS = 900902;\n public const string API_AUTH_MISSING_CREDENTIALS_MESSAGE = \"Missing Credentials\";\n public const string API_AUTH_MISSING_CREDENTIALS_DESCRIPTION =\n-\"Make sure your API invocation call has a header: \\\"Authorization: Bearer ACCESS_TOKEN\\\"\";\n+\"Make sure your API request provides required credentials\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyMzcxOA=="}, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDMyNDA4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOTowNjozOVrOFh7mpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOTo1MDo0MVrOFh80wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyMzg3Ng==", "bodyText": "Try to use the APIM message for the consistancy", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r371123876", "createdAt": "2020-01-27T09:06:39Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "diffHunk": "@@ -151,7 +151,7 @@ public function getFailureMessageDetailDescription(int errorCode, string errorMe\n         errorDescription += DESCRIPTION_SEPARATOR + API_AUTH_ACCESS_TOKEN_INACTIVE_DESCRIPTION;\n     } else if (API_AUTH_MISSING_CREDENTIALS == errorCode) {\n         string authHeaderName = getAuthorizationHeader(runtime:getInvocationContext());\n-        errorDescription += DESCRIPTION_SEPARATOR + \"Make sure your API invocation call has a header: \\\"\" + authHeaderName + \"\\\"\";\n+        errorDescription += DESCRIPTION_SEPARATOR + API_AUTH_MISSING_CREDENTIALS_DESCRIPTION ;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE0Mzg3NA==", "bodyText": "APIM message is \"Make sure your API invocation call has a header\". I believe this message is kind of invalid now.", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r371143874", "createdAt": "2020-01-27T09:50:41Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/constants/api_security_constants.bal", "diffHunk": "@@ -151,7 +151,7 @@ public function getFailureMessageDetailDescription(int errorCode, string errorMe\n         errorDescription += DESCRIPTION_SEPARATOR + API_AUTH_ACCESS_TOKEN_INACTIVE_DESCRIPTION;\n     } else if (API_AUTH_MISSING_CREDENTIALS == errorCode) {\n         string authHeaderName = getAuthorizationHeader(runtime:getInvocationContext());\n-        errorDescription += DESCRIPTION_SEPARATOR + \"Make sure your API invocation call has a header: \\\"\" + authHeaderName + \"\\\"\";\n+        errorDescription += DESCRIPTION_SEPARATOR + API_AUTH_MISSING_CREDENTIALS_DESCRIPTION ;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyMzg3Ng=="}, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDMzNTU0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/pre_authn_filter.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToxMDoyN1rOFh7tZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToxMDoyN1rOFh7tZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyNTYwNA==", "bodyText": "Lets not cast this. Lets try to use\nif(apiKey is map ) {\n}", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r371125604", "createdAt": "2020-01-27T09:10:27Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/pre_authn_filter.bal", "diffHunk": "@@ -98,6 +100,33 @@ returns boolean {\n                 authHeader = authCookie;\n             }\n         }\n+    } else {\n+        //process apikey authentication\n+        if (authProvidersIds.indexOf(AUTH_SCHEME_API_KEY) != ()) {\n+            json[] apiKeys = getAPIKeysforResource(context.getServiceName(), context.getResourceName());\n+            printDebug(KEY_PRE_AUTHN_FILTER, apiKeys.toString());\n+            if (apiKeys.length() > 0) {\n+                foreach json apiKey in apiKeys {\n+                    map<json> apiKeyMap = <map<json>>apiKey;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDM0NzY0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/api_key_handler.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwOToxNDoyOVrOFh70Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMToyNDowNFrOFh_b7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyNzM5NQ==", "bodyText": "Correct the comment", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r371127395", "createdAt": "2020-01-27T09:14:29Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/api_key_handler.bal", "diffHunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/stringutils;\n+\n+# Representation of the api key validating handler\n+#\n+# + apiKeyProvider - The reference to the jwt auth provider instance\n+public type APIKeyHandler object {\n+\n+    *http:InboundAuthHandler;\n+    public APIKeyProvider apiKeyProvider;\n+\n+    public function __init(APIKeyProvider apiKeyProvider) {\n+        self.apiKeyProvider = apiKeyProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Bearer Auth header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTE4NjY3MQ==", "bodyText": "Fixed in 80d6641", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r371186671", "createdAt": "2020-01-27T11:24:04Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/api_key_handler.bal", "diffHunk": "@@ -0,0 +1,84 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/http;\n+import ballerina/stringutils;\n+\n+# Representation of the api key validating handler\n+#\n+# + apiKeyProvider - The reference to the jwt auth provider instance\n+public type APIKeyHandler object {\n+\n+    *http:InboundAuthHandler;\n+    public APIKeyProvider apiKeyProvider;\n+\n+    public function __init(APIKeyProvider apiKeyProvider) {\n+        self.apiKeyProvider = apiKeyProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Bearer Auth header.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEyNzM5NQ=="}, "originalCommit": {"oid": "5a3a925d4ae74bf0e3649c5768bcebd093e09882"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTk5NzE5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjozODoyNlrOFlJalQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowMzo0MVrOFm7AyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NTg5Mw==", "bodyText": "can we use isEmpty() here?", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r374495893", "createdAt": "2020-02-04T06:38:26Z", "author": {"login": "ruks"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "diffHunk": "@@ -271,11 +274,10 @@ public void setApiResponseInterceptor(String responseInterceptor) {\n         }\n     }\n \n-    public void setBasicAuth(BasicAuth basicAuth) {\n-        //update the ResourceBasicAuth property only if there is no security scheme provided during instantiation\n-        if (this.basicAuth == null) {\n-            this.basicAuth = basicAuth;\n-            authProviders = OpenAPICodegenUtils.setAuthProviders(basicAuth);\n+    public void setSecuritySchemas(String schemas) {\n+        //update the Resource auth providers property only if there is no security scheme provided during instantiation\n+        if (this.authProviders.size() < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzA2NA==", "bodyText": "Fixed in #973", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r376357064", "createdAt": "2020-02-07T12:03:41Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaOperation.java", "diffHunk": "@@ -271,11 +274,10 @@ public void setApiResponseInterceptor(String responseInterceptor) {\n         }\n     }\n \n-    public void setBasicAuth(BasicAuth basicAuth) {\n-        //update the ResourceBasicAuth property only if there is no security scheme provided during instantiation\n-        if (this.basicAuth == null) {\n-            this.basicAuth = basicAuth;\n-            authProviders = OpenAPICodegenUtils.setAuthProviders(basicAuth);\n+    public void setSecuritySchemas(String schemas) {\n+        //update the Resource auth providers property only if there is no security scheme provided during instantiation\n+        if (this.authProviders.size() < 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NTg5Mw=="}, "originalCommit": {"oid": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNTk5ODc4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjozOToyNFrOFlJblA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowMzo1MlrOFm7BEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjE0OA==", "bodyText": "please use isEmpty()", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r374496148", "createdAt": "2020-02-04T06:39:24Z", "author": {"login": "ruks"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -953,15 +949,24 @@ private static boolean isResourceEpUnavailable(Operation operation) {\n         return false;\n     }\n \n-    public static List<String> setAuthProviders(BasicAuth basicAuth) {\n+    public static List<String> getAuthProviders(String schemas) {\n         List<String> authProviders = new ArrayList<>();\n-        if (basicAuth != null && basicAuth.isOptional()) {\n-            authProviders.add(APISecurity.basic.name());\n-            authProviders.add(APISecurity.oauth2.name());\n-            authProviders.add(APISecurity.jwt.name());\n-        } else if (basicAuth != null && basicAuth.isRequired()) {\n-            authProviders.add(APISecurity.basic.name());\n-        } else {\n+        boolean basic = false;\n+        boolean oauth2 = false;\n+        if (schemas != null) {\n+            String[] schemasArray = schemas.trim().split(\"\\\\s*,\\\\s*\");\n+            for (String s : schemasArray) {\n+                if (s.equalsIgnoreCase(APISecurity.basic.name())) {\n+                    authProviders.add(APISecurity.basic.name());\n+                } else if (s.equalsIgnoreCase(APISecurity.apikey.name())) {\n+                    authProviders.add(APISecurity.apikey.name());\n+                } else if (s.equalsIgnoreCase(APISecurity.oauth2.name())) {\n+                    authProviders.add(APISecurity.oauth2.name());\n+                    authProviders.add(APISecurity.jwt.name());\n+                }\n+            }\n+        }\n+        if (authProviders.size() < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzEzNw==", "bodyText": "Fixed in #973", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r376357137", "createdAt": "2020-02-07T12:03:52Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/utils/OpenAPICodegenUtils.java", "diffHunk": "@@ -953,15 +949,24 @@ private static boolean isResourceEpUnavailable(Operation operation) {\n         return false;\n     }\n \n-    public static List<String> setAuthProviders(BasicAuth basicAuth) {\n+    public static List<String> getAuthProviders(String schemas) {\n         List<String> authProviders = new ArrayList<>();\n-        if (basicAuth != null && basicAuth.isOptional()) {\n-            authProviders.add(APISecurity.basic.name());\n-            authProviders.add(APISecurity.oauth2.name());\n-            authProviders.add(APISecurity.jwt.name());\n-        } else if (basicAuth != null && basicAuth.isRequired()) {\n-            authProviders.add(APISecurity.basic.name());\n-        } else {\n+        boolean basic = false;\n+        boolean oauth2 = false;\n+        if (schemas != null) {\n+            String[] schemasArray = schemas.trim().split(\"\\\\s*,\\\\s*\");\n+            for (String s : schemasArray) {\n+                if (s.equalsIgnoreCase(APISecurity.basic.name())) {\n+                    authProviders.add(APISecurity.basic.name());\n+                } else if (s.equalsIgnoreCase(APISecurity.apikey.name())) {\n+                    authProviders.add(APISecurity.apikey.name());\n+                } else if (s.equalsIgnoreCase(APISecurity.oauth2.name())) {\n+                    authProviders.add(APISecurity.oauth2.name());\n+                    authProviders.add(APISecurity.jwt.name());\n+                }\n+            }\n+        }\n+        if (authProviders.size() < 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NjE0OA=="}, "originalCommit": {"oid": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjAwNDg4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwNjo0MzowNFrOFlJfLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDozMjoyMFrOFmWUjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NzA3MQ==", "bodyText": "better to explain what is 'in' here in comments or use a descriptive name.", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r374497071", "createdAt": "2020-02-04T06:43:04Z", "author": {"login": "ruks"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java", "diffHunk": "@@ -17,28 +17,29 @@\n  */\n package org.wso2.apimgt.gateway.cli.model.config;\n \n+import io.swagger.v3.oas.models.security.SecurityScheme.In;\n+\n /**\n- * Definition of basic authentication passed in to mustache\n+ * Definition of APIKey passed in to mustache\n  * templates.\n  */\n-public class BasicAuth {\n-\n-    private boolean isOptional;\n-    private boolean isRequired;\n+public class APIKey {\n+    private In in;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc1NTkxNg==", "bodyText": "It is the standard type \"In\" in swagger. io.swagger.v3.oas.models.security.SecurityScheme.In https://swagger.io/docs/specification/authentication/api-keys/", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r375755916", "createdAt": "2020-02-06T10:32:20Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/config/APIKey.java", "diffHunk": "@@ -17,28 +17,29 @@\n  */\n package org.wso2.apimgt.gateway.cli.model.config;\n \n+import io.swagger.v3.oas.models.security.SecurityScheme.In;\n+\n /**\n- * Definition of basic authentication passed in to mustache\n+ * Definition of APIKey passed in to mustache\n  * templates.\n  */\n-public class BasicAuth {\n-\n-    private boolean isOptional;\n-    private boolean isRequired;\n+public class APIKey {\n+    private In in;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDQ5NzA3MQ=="}, "originalCommit": {"oid": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTYxMTA2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/pre_authn_filter.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNToyODoxMVrOFlsLLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMjowNDowNVrOFm7BYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTM5MA==", "bodyText": "120 character limit exceeds.", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r375065390", "createdAt": "2020-02-05T05:28:11Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/pre_authn_filter.bal", "diffHunk": "@@ -98,6 +100,34 @@ returns boolean {\n                 authHeader = authCookie;\n             }\n         }\n+    } else {\n+        //process apikey authentication\n+        if (authProvidersIds.indexOf(AUTH_SCHEME_API_KEY) != ()) {\n+            json[] apiKeys = getAPIKeysforResource(context.getServiceName(), context.getResourceName());\n+            printDebug(KEY_PRE_AUTHN_FILTER, apiKeys.toString());\n+            if (apiKeys.length() > 0) {\n+                foreach json apiKey in apiKeys {\n+                    if (apiKey is  map<json>) {\n+                        string inName = apiKey[API_KEY_IN].toString();\n+                        string name = apiKey[API_KEY_NAME].toString();\n+                        printDebug(KEY_PRE_AUTHN_FILTER, \"Detected apikey security in : \" + inName + \" name: \" + name);\n+                        if (stringutils:equalsIgnoreCase(HEADER, inName) && request.hasHeader(name)) {\n+                            printDebug(KEY_PRE_AUTHN_FILTER, \"Request has apikey header : \" + name);\n+                            isAPIKeyAuth = true;\n+                            setAPIKeyAuth(inName, name);\n+                            authHeader = AUTH_SCHEME_API_KEY;\n+                            break;\n+                        } else if (stringutils:equalsIgnoreCase(QUERY, inName) && request.getQueryParamValue(name) is string) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM1NzIxNw==", "bodyText": "Fixed in #973", "url": "https://github.com/wso2/product-microgateway/pull/932#discussion_r376357217", "createdAt": "2020-02-07T12:04:05Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/filters/pre_authn_filter.bal", "diffHunk": "@@ -98,6 +100,34 @@ returns boolean {\n                 authHeader = authCookie;\n             }\n         }\n+    } else {\n+        //process apikey authentication\n+        if (authProvidersIds.indexOf(AUTH_SCHEME_API_KEY) != ()) {\n+            json[] apiKeys = getAPIKeysforResource(context.getServiceName(), context.getResourceName());\n+            printDebug(KEY_PRE_AUTHN_FILTER, apiKeys.toString());\n+            if (apiKeys.length() > 0) {\n+                foreach json apiKey in apiKeys {\n+                    if (apiKey is  map<json>) {\n+                        string inName = apiKey[API_KEY_IN].toString();\n+                        string name = apiKey[API_KEY_NAME].toString();\n+                        printDebug(KEY_PRE_AUTHN_FILTER, \"Detected apikey security in : \" + inName + \" name: \" + name);\n+                        if (stringutils:equalsIgnoreCase(HEADER, inName) && request.hasHeader(name)) {\n+                            printDebug(KEY_PRE_AUTHN_FILTER, \"Request has apikey header : \" + name);\n+                            isAPIKeyAuth = true;\n+                            setAPIKeyAuth(inName, name);\n+                            authHeader = AUTH_SCHEME_API_KEY;\n+                            break;\n+                        } else if (stringutils:equalsIgnoreCase(QUERY, inName) && request.getQueryParamValue(name) is string) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NTM5MA=="}, "originalCommit": {"oid": "49a919a7d998b9a3860ef14bfb312f9d6a724f1f"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1352, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}