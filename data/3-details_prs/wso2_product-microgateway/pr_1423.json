{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzODQ4MDAx", "number": 1423, "title": "[envoy-gw] Add Go ext auth gRPC server perf testing setup", "bodyText": "Purpose\n\nAs $subject, this will add the ext auth Go gRPC server perf testing setup with jwt validation implementation.\nIssues\n\nFixes #1422\nAutomation tests\n\nUnit tests added: Yes/No\nIntegration tests added: Yes/No\n\nTested environments\n\nNot Tested\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-09-28T03:45:41Z", "url": "https://github.com/wso2/product-microgateway/pull/1423", "merged": true, "mergeCommit": {"oid": "1a39c3d37a0c4d26b1beb9082846745c99b3aa99"}, "closed": true, "closedAt": "2020-10-02T04:56:47Z", "author": {"login": "chashikajw"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNMhOSAFqTQ5NzE4NzcwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd2JQPlAFqTU4MTIwMzcxOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MTg3NzAw", "url": "https://github.com/wso2/product-microgateway/pull/1423#pullrequestreview-497187700", "createdAt": "2020-09-28T05:02:58Z", "commit": {"oid": "734f3c99d31ca4b1cbcb2fddfd5bd1a8e6b3df08"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTowMjo1OFrOHYuiRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTowOToyNVrOHYunoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MDMwOA==", "bodyText": "read this only once. not for each request", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495690308", "createdAt": "2020-09-28T05:02:58Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "go-filter-chain/filters/jwt.go", "diffHunk": "@@ -0,0 +1,183 @@\n+package filters\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rsa\"\n+\t\"errors\"\n+\t\"github.com/dgrijalva/jwt-go\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\tenvoy_type \"github.com/envoyproxy/go-control-plane/envoy/type\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"github.com/patrickmn/go-cache\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"google.golang.org/genproto/googleapis/rpc/status\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+\n+\n+type TokenData struct {\n+\tmeta_clientType        string\n+\tapplicationConsumerKey string\n+\tapplicationName        string\n+\tapplicationId          string\n+\tapplicationOwner       string\n+\tapiCreator             string\n+\tapiCreatorTenantDomain string\n+\tapiTier                string\n+\tusername               string\n+\tuserTenantDomain       string\n+\tthrottledOut           bool\n+\tserviceTime            int64\n+\tauthorized             bool\n+}\n+\n+var (\n+\tUnknown = \"__unknown__\"\n+\tonce sync.Once\n+\tonce_1 sync.Once\n+\tcaCert []byte\n+\terr error\n+\tkey *rsa.PublicKey\n+\tjwtCache = cache.New(5*time.Minute, 10*time.Minute)\n+\tUnauthorizedError = errors.New(\"Invalid access token\")\n+\tjwtToken string\n+\tisCacheEnabled bool\n+)\n+\n+\n+\n+// handle JWT token\n+func HandleJWT(validateSubscription bool, publicCert []byte, token string) (bool, TokenData, error) {\n+\n+\taccessToken := token\n+\n+\ttokenContent := strings.Split(accessToken, \".\")\n+\tvar tokenData TokenData\n+\n+\tif len(tokenContent) != 3 {\n+\t\tlog.Errorf(\"Invalid JWT token received, token must have 3 parts\")\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\tsignedContent := tokenContent[0] + \".\" + tokenContent[1]\n+\terr := validateSignature(publicCert, signedContent, tokenContent[2])\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in validating the signature: %v\", err)\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\treturn true, tokenData, nil\n+}\n+\n+// validate the signature\n+func validateSignature(publicCert []byte, signedContent string, signature string) error {\n+\n+\tonce_1.Do(func() {\n+\t\tkey, err = jwt.ParseRSAPublicKeyFromPEM(publicCert)\n+\t\tlog.Info(\"read public key once\")\n+\t})\n+\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in parsing the public key: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\treturn jwt.SigningMethodRS256.Verify(signedContent, signature, key)\n+}\n+\n+//reading the secret\n+func ReadFile(fileName string) ([]byte, error) {\n+\n+\tsecretValue, err := ioutil.ReadFile(fileName)\n+\tif err != nil {\n+\t\tlog.Warnf(\"Error in reading the file %v: error - %v\", fileName, err)\n+\t}\n+\n+\treturn secretValue, err\n+}\n+\n+\n+func ValidateToken(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\tonce.Do(func() {\n+\t\tcaCert,_ = ReadFile(\"./artifacts/server.pem\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734f3c99d31ca4b1cbcb2fddfd5bd1a8e6b3df08"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MDU2Ng==", "bodyText": "Let's remove any logs/prints in the testing flow for now.", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495690566", "createdAt": "2020-09-28T05:04:10Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "go-filter-chain/filters/jwt.go", "diffHunk": "@@ -0,0 +1,183 @@\n+package filters\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rsa\"\n+\t\"errors\"\n+\t\"github.com/dgrijalva/jwt-go\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\tenvoy_type \"github.com/envoyproxy/go-control-plane/envoy/type\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"github.com/patrickmn/go-cache\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"google.golang.org/genproto/googleapis/rpc/status\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+\n+\n+type TokenData struct {\n+\tmeta_clientType        string\n+\tapplicationConsumerKey string\n+\tapplicationName        string\n+\tapplicationId          string\n+\tapplicationOwner       string\n+\tapiCreator             string\n+\tapiCreatorTenantDomain string\n+\tapiTier                string\n+\tusername               string\n+\tuserTenantDomain       string\n+\tthrottledOut           bool\n+\tserviceTime            int64\n+\tauthorized             bool\n+}\n+\n+var (\n+\tUnknown = \"__unknown__\"\n+\tonce sync.Once\n+\tonce_1 sync.Once\n+\tcaCert []byte\n+\terr error\n+\tkey *rsa.PublicKey\n+\tjwtCache = cache.New(5*time.Minute, 10*time.Minute)\n+\tUnauthorizedError = errors.New(\"Invalid access token\")\n+\tjwtToken string\n+\tisCacheEnabled bool\n+)\n+\n+\n+\n+// handle JWT token\n+func HandleJWT(validateSubscription bool, publicCert []byte, token string) (bool, TokenData, error) {\n+\n+\taccessToken := token\n+\n+\ttokenContent := strings.Split(accessToken, \".\")\n+\tvar tokenData TokenData\n+\n+\tif len(tokenContent) != 3 {\n+\t\tlog.Errorf(\"Invalid JWT token received, token must have 3 parts\")\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\tsignedContent := tokenContent[0] + \".\" + tokenContent[1]\n+\terr := validateSignature(publicCert, signedContent, tokenContent[2])\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in validating the signature: %v\", err)\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\treturn true, tokenData, nil\n+}\n+\n+// validate the signature\n+func validateSignature(publicCert []byte, signedContent string, signature string) error {\n+\n+\tonce_1.Do(func() {\n+\t\tkey, err = jwt.ParseRSAPublicKeyFromPEM(publicCert)\n+\t\tlog.Info(\"read public key once\")\n+\t})\n+\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in parsing the public key: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\treturn jwt.SigningMethodRS256.Verify(signedContent, signature, key)\n+}\n+\n+//reading the secret\n+func ReadFile(fileName string) ([]byte, error) {\n+\n+\tsecretValue, err := ioutil.ReadFile(fileName)\n+\tif err != nil {\n+\t\tlog.Warnf(\"Error in reading the file %v: error - %v\", fileName, err)\n+\t}\n+\n+\treturn secretValue, err\n+}\n+\n+\n+func ValidateToken(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\tonce.Do(func() {\n+\t\tcaCert,_ = ReadFile(\"./artifacts/server.pem\")\n+\t\tlog.Info(\"read server.pem file once\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734f3c99d31ca4b1cbcb2fddfd5bd1a8e6b3df08"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MTEzOA==", "bodyText": "read this only once. not for each request", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495691138", "createdAt": "2020-09-28T05:06:49Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "go-filter-chain/filters/jwt.go", "diffHunk": "@@ -0,0 +1,183 @@\n+package filters\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rsa\"\n+\t\"errors\"\n+\t\"github.com/dgrijalva/jwt-go\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\tenvoy_type \"github.com/envoyproxy/go-control-plane/envoy/type\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"github.com/patrickmn/go-cache\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"google.golang.org/genproto/googleapis/rpc/status\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+\n+\n+type TokenData struct {\n+\tmeta_clientType        string\n+\tapplicationConsumerKey string\n+\tapplicationName        string\n+\tapplicationId          string\n+\tapplicationOwner       string\n+\tapiCreator             string\n+\tapiCreatorTenantDomain string\n+\tapiTier                string\n+\tusername               string\n+\tuserTenantDomain       string\n+\tthrottledOut           bool\n+\tserviceTime            int64\n+\tauthorized             bool\n+}\n+\n+var (\n+\tUnknown = \"__unknown__\"\n+\tonce sync.Once\n+\tonce_1 sync.Once\n+\tcaCert []byte\n+\terr error\n+\tkey *rsa.PublicKey\n+\tjwtCache = cache.New(5*time.Minute, 10*time.Minute)\n+\tUnauthorizedError = errors.New(\"Invalid access token\")\n+\tjwtToken string\n+\tisCacheEnabled bool\n+)\n+\n+\n+\n+// handle JWT token\n+func HandleJWT(validateSubscription bool, publicCert []byte, token string) (bool, TokenData, error) {\n+\n+\taccessToken := token\n+\n+\ttokenContent := strings.Split(accessToken, \".\")\n+\tvar tokenData TokenData\n+\n+\tif len(tokenContent) != 3 {\n+\t\tlog.Errorf(\"Invalid JWT token received, token must have 3 parts\")\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\tsignedContent := tokenContent[0] + \".\" + tokenContent[1]\n+\terr := validateSignature(publicCert, signedContent, tokenContent[2])\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in validating the signature: %v\", err)\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\treturn true, tokenData, nil\n+}\n+\n+// validate the signature\n+func validateSignature(publicCert []byte, signedContent string, signature string) error {\n+\n+\tonce_1.Do(func() {\n+\t\tkey, err = jwt.ParseRSAPublicKeyFromPEM(publicCert)\n+\t\tlog.Info(\"read public key once\")\n+\t})\n+\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in parsing the public key: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\treturn jwt.SigningMethodRS256.Verify(signedContent, signature, key)\n+}\n+\n+//reading the secret\n+func ReadFile(fileName string) ([]byte, error) {\n+\n+\tsecretValue, err := ioutil.ReadFile(fileName)\n+\tif err != nil {\n+\t\tlog.Warnf(\"Error in reading the file %v: error - %v\", fileName, err)\n+\t}\n+\n+\treturn secretValue, err\n+}\n+\n+\n+func ValidateToken(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\tonce.Do(func() {\n+\t\tcaCert,_ = ReadFile(\"./artifacts/server.pem\")\n+\t\tlog.Info(\"read server.pem file once\")\n+\n+\t\tcacheEnvVar := os.Getenv(\"ENVOY_GW_CACHE_ENABLE\")\n+\t\tlog.Info(\"env variable\",cacheEnvVar )\n+\n+\t\tif cacheEnvVar != \"\" {\n+\t\t\tisCacheEnabled, err = strconv.ParseBool(cacheEnvVar)\n+\n+\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Error(\"Error reading cache env variable, err\")\n+\t\t\t\tisCacheEnabled = false\n+\t\t\t}\n+\n+\t\t} else {\n+\t\t\tisCacheEnabled = false\n+\t\t}\n+\t})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734f3c99d31ca4b1cbcb2fddfd5bd1a8e6b3df08"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTY5MTY4MQ==", "bodyText": "Do we need to run a for loop for this?", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r495691681", "createdAt": "2020-09-28T05:09:25Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "go-filter-chain/filters/jwt.go", "diffHunk": "@@ -0,0 +1,183 @@\n+package filters\n+\n+import (\n+\t\"context\"\n+\t\"crypto/rsa\"\n+\t\"errors\"\n+\t\"github.com/dgrijalva/jwt-go\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\tenvoy_type \"github.com/envoyproxy/go-control-plane/envoy/type\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"github.com/patrickmn/go-cache\"\n+\tlog \"github.com/sirupsen/logrus\"\n+\t\"google.golang.org/genproto/googleapis/rpc/status\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"strconv\"\n+\t\"strings\"\n+\t\"sync\"\n+\t\"time\"\n+)\n+\n+\n+\n+type TokenData struct {\n+\tmeta_clientType        string\n+\tapplicationConsumerKey string\n+\tapplicationName        string\n+\tapplicationId          string\n+\tapplicationOwner       string\n+\tapiCreator             string\n+\tapiCreatorTenantDomain string\n+\tapiTier                string\n+\tusername               string\n+\tuserTenantDomain       string\n+\tthrottledOut           bool\n+\tserviceTime            int64\n+\tauthorized             bool\n+}\n+\n+var (\n+\tUnknown = \"__unknown__\"\n+\tonce sync.Once\n+\tonce_1 sync.Once\n+\tcaCert []byte\n+\terr error\n+\tkey *rsa.PublicKey\n+\tjwtCache = cache.New(5*time.Minute, 10*time.Minute)\n+\tUnauthorizedError = errors.New(\"Invalid access token\")\n+\tjwtToken string\n+\tisCacheEnabled bool\n+)\n+\n+\n+\n+// handle JWT token\n+func HandleJWT(validateSubscription bool, publicCert []byte, token string) (bool, TokenData, error) {\n+\n+\taccessToken := token\n+\n+\ttokenContent := strings.Split(accessToken, \".\")\n+\tvar tokenData TokenData\n+\n+\tif len(tokenContent) != 3 {\n+\t\tlog.Errorf(\"Invalid JWT token received, token must have 3 parts\")\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\tsignedContent := tokenContent[0] + \".\" + tokenContent[1]\n+\terr := validateSignature(publicCert, signedContent, tokenContent[2])\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in validating the signature: %v\", err)\n+\t\treturn false, tokenData, UnauthorizedError\n+\t}\n+\n+\treturn true, tokenData, nil\n+}\n+\n+// validate the signature\n+func validateSignature(publicCert []byte, signedContent string, signature string) error {\n+\n+\tonce_1.Do(func() {\n+\t\tkey, err = jwt.ParseRSAPublicKeyFromPEM(publicCert)\n+\t\tlog.Info(\"read public key once\")\n+\t})\n+\n+\tif err != nil {\n+\t\tlog.Errorf(\"Error in parsing the public key: %v\", err)\n+\t\treturn err\n+\t}\n+\n+\treturn jwt.SigningMethodRS256.Verify(signedContent, signature, key)\n+}\n+\n+//reading the secret\n+func ReadFile(fileName string) ([]byte, error) {\n+\n+\tsecretValue, err := ioutil.ReadFile(fileName)\n+\tif err != nil {\n+\t\tlog.Warnf(\"Error in reading the file %v: error - %v\", fileName, err)\n+\t}\n+\n+\treturn secretValue, err\n+}\n+\n+\n+func ValidateToken(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\tonce.Do(func() {\n+\t\tcaCert,_ = ReadFile(\"./artifacts/server.pem\")\n+\t\tlog.Info(\"read server.pem file once\")\n+\n+\t\tcacheEnvVar := os.Getenv(\"ENVOY_GW_CACHE_ENABLE\")\n+\t\tlog.Info(\"env variable\",cacheEnvVar )\n+\n+\t\tif cacheEnvVar != \"\" {\n+\t\t\tisCacheEnabled, err = strconv.ParseBool(cacheEnvVar)\n+\n+\n+\t\t\tif err != nil {\n+\t\t\t\tlog.Error(\"Error reading cache env variable, err\")\n+\t\t\t\tisCacheEnabled = false\n+\t\t\t}\n+\n+\t\t} else {\n+\t\t\tisCacheEnabled = false\n+\t\t}\n+\t})\n+\n+\tauth := false\n+\tjwtToken := \"\"\n+\trequestAttributes := req.Attributes.Request.Http.Headers\n+\n+\tfor k := range requestAttributes {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "734f3c99d31ca4b1cbcb2fddfd5bd1a8e6b3df08"}, "originalPosition": 133}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66f9d004fb088d475972fda27200c0bf07865c04", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/66f9d004fb088d475972fda27200c0bf07865c04", "committedDate": "2020-09-28T05:25:50Z", "message": "add a break for for loop"}, "afterCommit": {"oid": "8e13ff341073a5a5856570685e6a54df41c9259a", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/8e13ff341073a5a5856570685e6a54df41c9259a", "committedDate": "2020-09-28T06:42:45Z", "message": "add a break for for loop"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e13ff341073a5a5856570685e6a54df41c9259a", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/8e13ff341073a5a5856570685e6a54df41c9259a", "committedDate": "2020-09-28T06:42:45Z", "message": "add a break for for loop"}, "afterCommit": {"oid": "93bf0121036143fc4c6e22100f06c36e59caeb39", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/93bf0121036143fc4c6e22100f06c36e59caeb39", "committedDate": "2020-09-28T06:44:47Z", "message": "add a break for for loop"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93bf0121036143fc4c6e22100f06c36e59caeb39", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/93bf0121036143fc4c6e22100f06c36e59caeb39", "committedDate": "2020-09-28T06:44:47Z", "message": "add a break for for loop"}, "afterCommit": {"oid": "66cae54ce18837d5a58fd428ad97159a3c7b838c", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/66cae54ce18837d5a58fd428ad97159a3c7b838c", "committedDate": "2020-09-28T06:47:22Z", "message": "add a break for for loop"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66cae54ce18837d5a58fd428ad97159a3c7b838c", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/66cae54ce18837d5a58fd428ad97159a3c7b838c", "committedDate": "2020-09-28T06:47:22Z", "message": "add a break for for loop"}, "afterCommit": {"oid": "a4b302483cec25685675f87bcca032343cd0e0f1", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/a4b302483cec25685675f87bcca032343cd0e0f1", "committedDate": "2020-09-28T06:51:12Z", "message": "add a break for for loop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3903e58f2a10fcfe80f3c60216fff6d30f8c1c55", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/3903e58f2a10fcfe80f3c60216fff6d30f8c1c55", "committedDate": "2020-09-28T14:50:28Z", "message": "add intial go filter chain testing setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5223e8321e999b52dd72a42c00e25c5d0aa2f567", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/5223e8321e999b52dd72a42c00e25c5d0aa2f567", "committedDate": "2020-09-28T14:50:28Z", "message": "add jwt cache imlpementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba3e47e5a864de084c1ea44e9e1b2ef8f13a7ef", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/aba3e47e5a864de084c1ea44e9e1b2ef8f13a7ef", "committedDate": "2020-09-28T14:50:28Z", "message": "document env variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eda91004fe4cd9992e6a8fc6743fa0968d9511cc", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/eda91004fe4cd9992e6a8fc6743fa0968d9511cc", "committedDate": "2020-09-28T14:50:28Z", "message": "add dockerfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "517f92c098cb39c96f168013a1830c71c37a7d6d", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/517f92c098cb39c96f168013a1830c71c37a7d6d", "committedDate": "2020-09-28T14:50:28Z", "message": "add a break for for loop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e32d479a525f9e4168c7132cdbd7c5193d5d6e53", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/e32d479a525f9e4168c7132cdbd7c5193d5d6e53", "committedDate": "2020-09-28T14:50:28Z", "message": "add readme file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc9111be3d3aa1a6518a815a5628701dc1d5d954", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/fc9111be3d3aa1a6518a815a5628701dc1d5d954", "committedDate": "2020-09-28T14:50:28Z", "message": "commnet the print sstateemt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7242c10f27bbccf1201b1a30b76e10f9b4e633d", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/b7242c10f27bbccf1201b1a30b76e10f9b4e633d", "committedDate": "2020-09-29T04:54:47Z", "message": "optimize the code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a44c76f81b4d5beb9624dc1012a242b4417c708", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/9a44c76f81b4d5beb9624dc1012a242b4417c708", "committedDate": "2020-09-28T07:02:54Z", "message": "add readme file"}, "afterCommit": {"oid": "b7242c10f27bbccf1201b1a30b76e10f9b4e633d", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/b7242c10f27bbccf1201b1a30b76e10f9b4e633d", "committedDate": "2020-09-29T04:54:47Z", "message": "optimize the code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5fc826a05b4acaab27feaf42f5e7e19ded3c963", "author": {"user": {"login": "chashikajw", "name": "Chashika Weerathunga"}}, "url": "https://github.com/wso2/product-microgateway/commit/b5fc826a05b4acaab27feaf42f5e7e19ded3c963", "committedDate": "2020-10-02T04:49:16Z", "message": "Merge branch 'envoy-gw' into go-filter-chain-testing-setup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODU5NjQ0", "url": "https://github.com/wso2/product-microgateway/pull/1423#pullrequestreview-500859644", "createdAt": "2020-10-02T04:52:24Z", "commit": {"oid": "b5fc826a05b4acaab27feaf42f5e7e19ded3c963"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMjAzNTQ1", "url": "https://github.com/wso2/product-microgateway/pull/1423#pullrequestreview-581203545", "createdAt": "2021-02-02T10:35:50Z", "commit": {"oid": "b5fc826a05b4acaab27feaf42f5e7e19ded3c963"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozNTo1MFrOIeKNsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozNTo1MFrOIeKNsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5NTUzNw==", "bodyText": "remove unnecessary commented code", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r568495537", "createdAt": "2021-02-02T10:35:50Z", "author": {"login": "fazlan-nazeem"}, "path": "go-filter-chain/main.go", "diffHunk": "@@ -0,0 +1,76 @@\n+package main\n+\n+import (\n+\t\"context\"\n+\t\"envoy-test-filter/filters\"\n+\t//filters \"envoy-test-filter/filters\"\n+\t\"fmt\"\n+\text_authz \"github.com/envoyproxy/go-control-plane/envoy/service/auth/v2\"\n+\t\"github.com/gogo/googleapis/google/rpc\"\n+\t\"google.golang.org/grpc\"\n+\t\"google.golang.org/grpc/reflection\"\n+\t\"log\"\n+\t\"net\"\n+\t\"os\"\n+\t\"os/signal\"\n+)\n+\n+type server struct {\n+\tmode string\n+}\n+\n+func main() {\n+\tc := make(chan os.Signal)\n+\tsignal.Notify(c, os.Interrupt)\n+\n+\tgo listen(\":8081\", &server{mode: \"GATEWAY\"})\n+\n+\t<-c\n+}\n+\n+func listen(address string, serverType *server) {\n+\tlis, err := net.Listen(\"tcp\", address)\n+\tif err != nil {\n+\t\tlog.Fatalf(\"failed to listen: %v\", err)\n+\t}\n+\ts := grpc.NewServer()\n+\text_authz.RegisterAuthorizationServer(s, serverType)\n+\treflection.Register(s)\n+\tfmt.Printf(\"Starting %q reciver on %q\\n\", serverType.mode, address)\n+\tif err := s.Serve(lis); err != nil {\n+\t\tlog.Fatalf(\"failed to serve: %v\", err)\n+\t}\n+}\n+\n+func (s *server) Check(ctx context.Context, req *ext_authz.CheckRequest) (*ext_authz.CheckResponse, error) {\n+\n+\t//fmt.Printf(\"======================================== %-24s ========================================\\n\", fmt.Sprintf(\"%s Start\", s.mode))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5fc826a05b4acaab27feaf42f5e7e19ded3c963"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTgxMjAzNzE5", "url": "https://github.com/wso2/product-microgateway/pull/1423#pullrequestreview-581203719", "createdAt": "2021-02-02T10:36:01Z", "commit": {"oid": "b5fc826a05b4acaab27feaf42f5e7e19ded3c963"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozNjowMlrOIeKOOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDozNjowMlrOIeKOOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODQ5NTY3Mg==", "bodyText": "remove commented code", "url": "https://github.com/wso2/product-microgateway/pull/1423#discussion_r568495672", "createdAt": "2021-02-02T10:36:02Z", "author": {"login": "fazlan-nazeem"}, "path": "java-filter-chain/src/main/java/org/wso2/mgw/filterchain/gRPC/server/ExtAuthService.java", "diffHunk": "@@ -34,7 +34,8 @@ public void check (CheckRequest request, StreamObserver<CheckResponse> responseO\n \n         //System.out.println(\"++++++++++hit+++++++++++++++\");\n \n-        //System.out.println(request.getAttributes().getRequest().getHttp());\n+\n+        //System.out.println(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5fc826a05b4acaab27feaf42f5e7e19ded3c963"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 970, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}