{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2ODk1OTg3", "number": 1180, "reviewThreads": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mjo0NFrODtfqew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToyMTowMlrOECAQew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMxMjkxOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-jwt-transformer/src/main/java/org/wso2/micro/gateway/jwttransformer/JWTTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mjo0NFrOF-8ynQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mjo0NFrOF-8ynQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MjAyOQ==", "bodyText": "Remove all unwanted new lines", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401552029", "createdAt": "2020-04-01T11:42:44Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-jwt-transformer/src/main/java/org/wso2/micro/gateway/jwttransformer/JWTTransformer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.jwttransformer;\n+\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+/**\n+ * Defines the interface for writing the  jwt tranformation.\n+ */\n+public interface JWTTransformer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMxMzU0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-jwt-transformer/src/main/java/org/wso2/micro/gateway/jwttransformer/DefaultJWTTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mjo1MlrOF-8y-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mjo1MlrOF-8y-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MjEyMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401552120", "createdAt": "2020-04-01T11:42:52Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-jwt-transformer/src/main/java/org/wso2/micro/gateway/jwttransformer/DefaultJWTTransformer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.wso2.micro.gateway.jwttransformer;\n+\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+/**\n+ * This file is for default Jwt transformer\n+ */\n+public class DefaultJWTTransformer implements JWTTransformer {\n+\n+    @Override\n+    public MapValue transformJWT(MapValue scopes) {\n+        String scope = \"\";\n+        MapValue scopesValue = scopes;\n+        int sizeOfScope = scopesValue.size();\n+        String name = scopesValue.get(\"scope\").getClass().getName();\n+        if (scopesValue.containsKey(\"scope\")) {\n+         if (scopesValue.get(\"scope\") instanceof ArrayValueImpl) {\n+             for (int i = 0; i < ((ArrayValueImpl) scopesValue.get(\"scope\")).size(); i++) {\n+                 scope +=  ((ArrayValueImpl) scopesValue.get(\"scope\")).getString(i) + \" \";\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMxNjMyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-jwt-transformer/src/main/java/org/wso2/micro/gateway/jwttransformer/DefaultJWTTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mzo1MFrOF-80vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mzo1MFrOF-80vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MjU3Mw==", "bodyText": "Javadoc must have a . at the end of first sentence. This is a checked by checkstyles\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This file is for default Jwt transformer\n          \n          \n            \n             * This file is for default Jwt transformer.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401552573", "createdAt": "2020-04-01T11:43:50Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-jwt-transformer/src/main/java/org/wso2/micro/gateway/jwttransformer/DefaultJWTTransformer.java", "diffHunk": "@@ -0,0 +1,45 @@\n+// Copyright (c) 2020 WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+package org.wso2.micro.gateway.jwttransformer;\n+\n+import org.ballerinalang.jvm.values.ArrayValueImpl;\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+/**\n+ * This file is for default Jwt transformer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMxNjc4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-jwt-transformer/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mzo1N1rOF-80_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0Mzo1N1rOF-80_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MjYzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            </project>\n          \n          \n            \n            </project>", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401552637", "createdAt": "2020-04-01T11:43:57Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-jwt-transformer/pom.xml", "diffHunk": "@@ -0,0 +1,60 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>components</artifactId>\n+        <groupId>org.wso2.am.microgw</groupId>\n+        <version>3.1.0-beta2-SNAPSHOT</version>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <artifactId>mgw-jwt-transformer</artifactId>\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.ballerinalang</groupId>\n+            <artifactId>ballerina-lang</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ballerinalang</groupId>\n+            <artifactId>ballerina-runtime</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ballerinalang</groupId>\n+            <artifactId>ballerina-http</artifactId>\n+            <version>${ballerina.platform.version}</version>\n+            <type>zip</type>\n+            <classifier>ballerina-binary-repo</classifier>\n+        </dependency>\n+        <dependency>\n+            <groupId>junit</groupId>\n+            <artifactId>junit</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+            <version>${slf4j.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ballerinalang</groupId>\n+            <artifactId>ballerina-mime</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ballerinalang</groupId>\n+            <artifactId>ballerina-http</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ballerinalang</groupId>\n+            <artifactId>ballerina-io</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.ballerinalang</groupId>\n+            <artifactId>ballerina-runtime-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.json</groupId>\n+            <artifactId>json</artifactId>\n+        </dependency>\n+    </dependencies>\n+\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMxNzg4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NDoxNlrOF-81pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NDoxNlrOF-81pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MjgwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401552805", "createdAt": "2020-04-01T11:44:16Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.mapping;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.micro.gateway.jwttransformer.JWTTransformer;\n+\n+\n+/**\n+ * This class Class to dynamically invoke the transformer\n+ */\n+public class MappingInvoker {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\"ballerina\");\n+    private  static JWTTransformer jwtTransformer;\n+\n+    public static String loadMappingClass(String className) {\n+        try {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMxOTc3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NDo1N1rOF-823A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NDo1N1rOF-823A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzExNg==", "bodyText": "Try block is not formatted properly. Check indentation.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401553116", "createdAt": "2020-04-01T11:44:57Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.mapping;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.micro.gateway.jwttransformer.JWTTransformer;\n+\n+\n+/**\n+ * This class Class to dynamically invoke the transformer\n+ */\n+public class MappingInvoker {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\"ballerina\");\n+    private  static JWTTransformer jwtTransformer;\n+\n+    public static String loadMappingClass(String className) {\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMyMDA4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NTowNVrOF-83Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NTowNVrOF-83Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzE3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * This class Class to dynamically invoke the transformer\n          \n          \n            \n             * This class Class to dynamically invoke the transformer.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401553171", "createdAt": "2020-04-01T11:45:05Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.mapping;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.micro.gateway.jwttransformer.JWTTransformer;\n+\n+\n+/**\n+ * This class Class to dynamically invoke the transformer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDMyMDkyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/native/jwt_mapping.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NToyMFrOF-83lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMTo0NToyMFrOF-83lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU1MzMwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n            // Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401553301", "createdAt": "2020-04-01T11:45:20Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/native/jwt_mapping.bal", "diffHunk": "@@ -0,0 +1,42 @@\n+// Copyright (c) 2019, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDgwMTA1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0OTo1MVrOF_Bj8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo0OTo1MVrOF_Bj8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzMDE5Mw==", "bodyText": "since you get the decoded payload here, shall we reuse it 74th line, without getting the token from the cache again.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401630193", "createdAt": "2020-04-01T13:49:51Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -53,14 +54,20 @@ public type JwtAuthProvider object {\n                 setErrorMessageToInvocationContext(API_AUTH_INVALID_CREDENTIALS);\n                 return handleVar;\n             }\n-\n             boolean isBlacklisted = false;\n             string? jti = \"\";\n             runtime:InvocationContext invocationContext = runtime:getInvocationContext();\n             runtime:AuthenticationContext? authContext = invocationContext?.authenticationContext;\n             if (authContext is runtime:AuthenticationContext) {\n                 string? jwtToken = authContext?.authToken;\n                 if (jwtToken is string) {\n+                    (jwt:JwtPayload | error) payload = getDecodedJWTPayload(jwtToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDgxMDY4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo1MjowMlrOF_BqFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMzo1MjowMlrOF_BqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTYzMTc2Ng==", "bodyText": "Why are we reading the jwt issuers again from config? Can we read custom claims in JWT handler creation time without reading the config again here?", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r401631766", "createdAt": "2020-04-01T13:52:02Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -141,3 +147,62 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext,jwt:JwtPayload payload) returns @tainted (auth:Error)? {\n+    string payloadissuer=payload[\"iss\"].toString();\n+    map<any>? customClaims = invocationContext[\"principal\"][\"claims\"];\n+    map<any>? invocationvalue = invocationContext;\n+    map<anydata>[] | error jwtIssuers = map<anydata>[].constructFrom(config:getAsArray(JWT_INSTANCE_ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c606e67a321b26094d797e20f9c0b589f5bea35b"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzk5NDE1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowODoxOVrOGF2rbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowODoxOVrOGF2rbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MTkxOQ==", "bodyText": "Formatting error... 120 characters exceeded", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408791919", "createdAt": "2020-04-15T12:08:19Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -17,31 +17,41 @@\n import ballerina/auth;\n import ballerina/jwt;\n import ballerina/runtime;\n-\n+import ballerina/stringutils;\n \n # Represents inbound JWT auth provider.\n #\n # + jwtValidatorConfig - JWT validator configurations\n # + inboundJwtAuthProvider - Reference to b7a inbound auth provider\n # + subscriptionValEnabled - Validate subscription\n+# + claims - JWT claim set\n+# + className - Transformation class Name\n+# + classLoaded - Class loaded or not\n+# + gatewayCache - the `APIGatewayCache instence`\n public type JwtAuthProvider object {\n     *auth:InboundAuthProvider;\n \n     public jwt:JwtValidatorConfig jwtValidatorConfig;\n     public jwt:InboundJwtAuthProvider inboundJwtAuthProvider;\n     public boolean subscriptionValEnabled;\n+    public map<anydata>[] | error claims;\n+    public string className;\n+    public boolean classLoaded;\n+    public APIGatewayCache gatewayCache = new;\n \n     # Provides authentication based on the provided JWT token.\n     #\n     # + jwtValidatorConfig - JWT validator configurations\n     # + subscriptionValEnabled - Validate subscription\n-    public function __init(jwt:JwtValidatorConfig jwtValidatorConfig, boolean subscriptionValEnabled) {\n+    public function __init(jwt:JwtValidatorConfig jwtValidatorConfig, boolean subscriptionValEnabled, map<anydata>[] | error claims, string className, boolean classLoaded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzk5NTc0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowODo0NFrOGF2sWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowODo0NFrOGF2sWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MjE1Mw==", "bodyText": "Formatting issue...", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408792153", "createdAt": "2020-04-15T12:08:44Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -67,6 +76,25 @@ public type JwtAuthProvider object {\n                     var cachedJwt = trap <jwt:CachedJwt>jwtCache.get(jwtToken);\n                     //finishing span\n                     finishSpan(JWT_CACHE, spanIdCache);\n+                    var isJwtTokenCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                    if (isJwtTokenCached is boolean) {\n+                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                     }\n+                    else {\n+                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                        (jwt:JwtPayload | error) payloadBody = getDecodedJWTPayload(jwtToken);\n+                        if (payloadBody is jwt:JwtPayload) {\n+                            string payloadIssuer = payloadBody[\"iss\"].toString();\n+                            if( self.jwtValidatorConfig[\"issuer\"] ==  payloadIssuer){\n+                                var result = doMappingContext(invocationContext, self.className, self.claims, self.classLoaded);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzk5ODQwOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowOToyNlrOGF2t0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxMDoyMlrOGF2v5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MjUzMA==", "bodyText": "Formatting issue... exceeding 120 character limit", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408792530", "createdAt": "2020-04-15T12:09:26Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +161,61 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className, map<anydata>[] | error claims, boolean classLoaded) returns @tainted (auth:Error)? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MzA2MQ==", "bodyText": "Fix in other places as well", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408793061", "createdAt": "2020-04-15T12:10:22Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +161,61 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className, map<anydata>[] | error claims, boolean classLoaded) returns @tainted (auth:Error)? {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MjUzMA=="}, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzk5OTMzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowOTo0NFrOGF2ubA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjowOTo0NFrOGF2ubA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MjY4NA==", "bodyText": "Remove extra line", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408792684", "createdAt": "2020-04-15T12:09:44Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +161,61 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className, map<anydata>[] | error claims, boolean classLoaded) returns @tainted (auth:Error)? {\n+    map<any>? customClaims = invocationContext[\"principal\"][\"claims\"];\n+    if (customClaims is map<any>) {\n+        if ( claims is map<anydata>[] && claims.length() > 0) {\n+            foreach map<anydata> claim in claims {\n+                string remoteClaim = claim[\"remoteClaim\"].toString();\n+                string localClaim = claim[\"localClaim\"].toString();\n+                if (customClaims is map<anydata>) {\n+                    if (customClaims.hasKey(remoteClaim) ) {\n+                        customClaims[localClaim] = customClaims[remoteClaim];\n+                        anydata removedElement = customClaims.remove(remoteClaim);\n+                    }\n+                 }\n+            }\n+        }\n+        if (className != \"\") {\n+            if(classLoaded){\n+                map<any>? customClaimsEdited = transformJWTValue(customClaims, className );\n+                if (customClaimsEdited is map<any>) {\n+                    customClaims = customClaimsEdited;\n+                }\n+             }\n+             else{\n+                return prepareError(\"Error while loading the jwttransformer class: \" + className);\n+             }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODAwNTA0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxMToxOVrOGF2x6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjoxMToxOVrOGF2x6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc5MzU3Ng==", "bodyText": "Formatting issue... exceeding the character limit.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408793576", "createdAt": "2020-04-15T12:11:19Z", "author": {"login": "menakaj"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/utils.bal", "diffHunk": "@@ -879,8 +880,18 @@ function readMultipleJWTIssuers() {\n                 },\n                 jwtCache: jwtCache\n             };\n-            JwtAuthProvider jwtAuthProvider \n-                = new (jwtValidatorConfig, getDefaultBooleanValue(jwtIssuer[VALIDATE_SUBSCRIPTION], DEFAULT_VALIDATE_SUBSCRIPTION));\n+            boolean classLoaded = false;\n+            string className = \"\";\n+            if(jwtIssuer.hasKey(\"claimMapperClassName\")){\n+               className = getDefaultStringValue(jwtIssuer[ISSUER_CLASSNAME], DEFAULT_ISSUER_CLASSNAME);\n+               classLoaded = loadMappingClass(className);\n+            }\n+            map<anydata>[] | error claims = [];\n+            if(jwtIssuer.hasKey(\"claims\")){\n+                  claims = map<anydata>[].constructFrom((jwtIssuer[\"claims\"]));\n+            }\n+            JwtAuthProvider jwtAuthProvider\n+                = new (jwtValidatorConfig, getDefaultBooleanValue(jwtIssuer[VALIDATE_SUBSCRIPTION], DEFAULT_VALIDATE_SUBSCRIPTION), claims, className, classLoaded);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODA4NTk2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjozMzozOFrOGF3ifQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjozMzozOFrOGF3ifQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwNjAxMw==", "bodyText": "Don't we have to use the modified jwt payload to do the rest of the work. I see, here we pass the original payload to subscription filtering (line 128) and so on.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408806013", "createdAt": "2020-04-15T12:33:38Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -67,6 +76,25 @@ public type JwtAuthProvider object {\n                     var cachedJwt = trap <jwt:CachedJwt>jwtCache.get(jwtToken);\n                     //finishing span\n                     finishSpan(JWT_CACHE, spanIdCache);\n+                    var isJwtTokenCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                    if (isJwtTokenCached is boolean) {\n+                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                     }\n+                    else {\n+                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                        (jwt:JwtPayload | error) payloadBody = getDecodedJWTPayload(jwtToken);\n+                        if (payloadBody is jwt:JwtPayload) {\n+                            string payloadIssuer = payloadBody[\"iss\"].toString();\n+                            if( self.jwtValidatorConfig[\"issuer\"] ==  payloadIssuer){\n+                                var result = doMappingContext(invocationContext, self.className, self.claims, self.classLoaded);\n+                                jwtToken = authContext?.authToken.toString();\n+                                self.gatewayCache.addClaimMappingCache(jwtToken, true);\n+                                if (result is auth:Error){\n+                                    return result;\n+                                }\n+                            }\n+                        }\n+                    }\n                     if (cachedJwt is jwt:CachedJwt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODA5MDM5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjozNDo0N1rOGF3lFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjozNDo0N1rOGF3lFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwNjY3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if ( claims is map<anydata>[] && claims.length() > 0) {\n          \n          \n            \n                    if (claims is map<anydata>[] && claims.length() > 0) {", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408806678", "createdAt": "2020-04-15T12:34:47Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +161,61 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className, map<anydata>[] | error claims, boolean classLoaded) returns @tainted (auth:Error)? {\n+    map<any>? customClaims = invocationContext[\"principal\"][\"claims\"];\n+    if (customClaims is map<any>) {\n+        if ( claims is map<anydata>[] && claims.length() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODA5NTEyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjozNTo1OVrOGF3n0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjozNTo1OVrOGF3n0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwNzM3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                         }\n          \n          \n            \n                         else{\n          \n          \n            \n                         } else {", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408807379", "createdAt": "2020-04-15T12:35:59Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +161,61 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className, map<anydata>[] | error claims, boolean classLoaded) returns @tainted (auth:Error)? {\n+    map<any>? customClaims = invocationContext[\"principal\"][\"claims\"];\n+    if (customClaims is map<any>) {\n+        if ( claims is map<anydata>[] && claims.length() > 0) {\n+            foreach map<anydata> claim in claims {\n+                string remoteClaim = claim[\"remoteClaim\"].toString();\n+                string localClaim = claim[\"localClaim\"].toString();\n+                if (customClaims is map<anydata>) {\n+                    if (customClaims.hasKey(remoteClaim) ) {\n+                        customClaims[localClaim] = customClaims[remoteClaim];\n+                        anydata removedElement = customClaims.remove(remoteClaim);\n+                    }\n+                 }\n+            }\n+        }\n+        if (className != \"\") {\n+            if(classLoaded){\n+                map<any>? customClaimsEdited = transformJWTValue(customClaims, className );\n+                if (customClaimsEdited is map<any>) {\n+                    customClaims = customClaimsEdited;\n+                }\n+             }\n+             else{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODEwMTE3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjozNzo0MFrOGF3rtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjozNzo0MFrOGF3rtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwODM3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                             }\n          \n          \n            \n                            }", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408808372", "createdAt": "2020-04-15T12:37:40Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +161,61 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className, map<anydata>[] | error claims, boolean classLoaded) returns @tainted (auth:Error)? {\n+    map<any>? customClaims = invocationContext[\"principal\"][\"claims\"];\n+    if (customClaims is map<any>) {\n+        if ( claims is map<anydata>[] && claims.length() > 0) {\n+            foreach map<anydata> claim in claims {\n+                string remoteClaim = claim[\"remoteClaim\"].toString();\n+                string localClaim = claim[\"localClaim\"].toString();\n+                if (customClaims is map<anydata>) {\n+                    if (customClaims.hasKey(remoteClaim) ) {\n+                        customClaims[localClaim] = customClaims[remoteClaim];\n+                        anydata removedElement = customClaims.remove(remoteClaim);\n+                    }\n+                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODExMDA0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo0MDowMlrOGF3xTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo0MDowMlrOGF3xTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgwOTgwNg==", "bodyText": "Can use constants values. Fix all occurrences.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408809806", "createdAt": "2020-04-15T12:40:02Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -67,6 +76,25 @@ public type JwtAuthProvider object {\n                     var cachedJwt = trap <jwt:CachedJwt>jwtCache.get(jwtToken);\n                     //finishing span\n                     finishSpan(JWT_CACHE, spanIdCache);\n+                    var isJwtTokenCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                    if (isJwtTokenCached is boolean) {\n+                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                     }\n+                    else {\n+                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                        (jwt:JwtPayload | error) payloadBody = getDecodedJWTPayload(jwtToken);\n+                        if (payloadBody is jwt:JwtPayload) {\n+                            string payloadIssuer = payloadBody[\"iss\"].toString();\n+                            if( self.jwtValidatorConfig[\"issuer\"] ==  payloadIssuer){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODEzMDM3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo0NToxN1rOGF395w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo0NToxN1rOGF395w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxMzAzMQ==", "bodyText": "Why do we check iss here? If it is needed, why not validating the aud as well?", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408813031", "createdAt": "2020-04-15T12:45:17Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -67,6 +76,25 @@ public type JwtAuthProvider object {\n                     var cachedJwt = trap <jwt:CachedJwt>jwtCache.get(jwtToken);\n                     //finishing span\n                     finishSpan(JWT_CACHE, spanIdCache);\n+                    var isJwtTokenCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                    if (isJwtTokenCached is boolean) {\n+                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                     }\n+                    else {\n+                        printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                        (jwt:JwtPayload | error) payloadBody = getDecodedJWTPayload(jwtToken);\n+                        if (payloadBody is jwt:JwtPayload) {\n+                            string payloadIssuer = payloadBody[\"iss\"].toString();\n+                            if( self.jwtValidatorConfig[\"issuer\"] ==  payloadIssuer){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODE0ODA2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1MDowMVrOGF4I4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1MDowMVrOGF4I4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNTg0MQ==", "bodyText": "Can combine.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (className != \"\") {\n          \n          \n            \n                        if(classLoaded){\n          \n          \n            \n                    if (className != \"\" && classLoaded) {", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408815841", "createdAt": "2020-04-15T12:50:01Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +161,61 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className, map<anydata>[] | error claims, boolean classLoaded) returns @tainted (auth:Error)? {\n+    map<any>? customClaims = invocationContext[\"principal\"][\"claims\"];\n+    if (customClaims is map<any>) {\n+        if ( claims is map<anydata>[] && claims.length() > 0) {\n+            foreach map<anydata> claim in claims {\n+                string remoteClaim = claim[\"remoteClaim\"].toString();\n+                string localClaim = claim[\"localClaim\"].toString();\n+                if (customClaims is map<anydata>) {\n+                    if (customClaims.hasKey(remoteClaim) ) {\n+                        customClaims[localClaim] = customClaims[remoteClaim];\n+                        anydata removedElement = customClaims.remove(remoteClaim);\n+                    }\n+                 }\n+            }\n+        }\n+        if (className != \"\") {\n+            if(classLoaded){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODE1Nzc0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1MjozN1rOGF4O8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1MjozN1rOGF4O8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgxNzM5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            map<any>? customClaimsEdited = transformJWTValue(customClaims, className );\n          \n          \n            \n                            map<any>? customClaimsEdited = transformJWTValue(customClaims, className);", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408817394", "createdAt": "2020-04-15T12:52:37Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +161,61 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className, map<anydata>[] | error claims, boolean classLoaded) returns @tainted (auth:Error)? {\n+    map<any>? customClaims = invocationContext[\"principal\"][\"claims\"];\n+    if (customClaims is map<any>) {\n+        if ( claims is map<anydata>[] && claims.length() > 0) {\n+            foreach map<anydata> claim in claims {\n+                string remoteClaim = claim[\"remoteClaim\"].toString();\n+                string localClaim = claim[\"localClaim\"].toString();\n+                if (customClaims is map<anydata>) {\n+                    if (customClaims.hasKey(remoteClaim) ) {\n+                        customClaims[localClaim] = customClaims[remoteClaim];\n+                        anydata removedElement = customClaims.remove(remoteClaim);\n+                    }\n+                 }\n+            }\n+        }\n+        if (className != \"\") {\n+            if(classLoaded){\n+                map<any>? customClaimsEdited = transformJWTValue(customClaims, className );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzODE3MzgyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1NzowM1rOGF4Zrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMjo1NzowM1rOGF4Zrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODgyMDE0Mg==", "bodyText": "Better to add filename to the debug log for easier debugging.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r408820142", "createdAt": "2020-04-15T12:57:03Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +161,61 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className, map<anydata>[] | error claims, boolean classLoaded) returns @tainted (auth:Error)? {\n+    map<any>? customClaims = invocationContext[\"principal\"][\"claims\"];\n+    if (customClaims is map<any>) {\n+        if ( claims is map<anydata>[] && claims.length() > 0) {\n+            foreach map<anydata> claim in claims {\n+                string remoteClaim = claim[\"remoteClaim\"].toString();\n+                string localClaim = claim[\"localClaim\"].toString();\n+                if (customClaims is map<anydata>) {\n+                    if (customClaims.hasKey(remoteClaim) ) {\n+                        customClaims[localClaim] = customClaims[remoteClaim];\n+                        anydata removedElement = customClaims.remove(remoteClaim);\n+                    }\n+                 }\n+            }\n+        }\n+        if (className != \"\") {\n+            if(classLoaded){\n+                map<any>? customClaimsEdited = transformJWTValue(customClaims, className );\n+                if (customClaimsEdited is map<any>) {\n+                    customClaims = customClaimsEdited;\n+                }\n+             }\n+             else{\n+                return prepareError(\"Error while loading the jwttransformer class: \" + className);\n+             }\n+\n+        }\n+        if(customClaims[\"scope\"].toString() != \"\"){\n+            var result = putScopeValue(customClaims[\"scope\"],invocationContext);\n+            if (result is auth:Error) {\n+                return result;\n+            }\n+        }\n+     }\n+}\n+\n+public function putScopeValue(any scope,runtime:InvocationContext invocationContext) returns @tainted (auth:Error)? {\n+    if (scope is string && scope != \"\") {\n+        string[]? scopes =  stringutils:split(scope.toString(), \" \");\n+        if (scopes is string[]) {\n+            invocationContext.principal.scopes = scopes;\n+            printDebug(\"scopes\", scopes.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b3c4c4d0a2df3ab288572f46c774f12e3973801"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjE4MTMwOnYy", "diffSide": "RIGHT", "path": "tests/src/test/resources/openAPIs/jwtTransformer/jwt_transformer.yaml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoxMzo0MlrOGZLyaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoxMzo0MlrOGZLyaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MDcxMg==", "bodyText": "Lets remove unused resources,schemas   from the open API and make it short", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r429060712", "createdAt": "2020-05-22T06:13:42Z", "author": {"login": "Rajith90"}, "path": "tests/src/test/resources/openAPIs/jwtTransformer/jwt_transformer.yaml", "diffHunk": "@@ -0,0 +1,748 @@\n+openapi: 3.0.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49be77d90f771dc763c3aaa209f890bf741705ca"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjIwMDc4OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoyMzoyN1rOGZL-BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjoyMzoyN1rOGZL-BQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA2MzY4NQ==", "bodyText": "Comment seems to have class word twice", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r429063685", "createdAt": "2020-05-22T06:23:27Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.mapping;\n+\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.micro.gateway.jwttransformer.JWTValueTransformer;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class Class to dynamically invoke the transformer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49be77d90f771dc763c3aaa209f890bf741705ca"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjI2NzMyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1NDozN1rOGZMmQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1NDozN1rOGZMmQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3Mzk4Ng==", "bodyText": "If there are no claims and additional java class specified then we don not always check the cache and invoke doMappingContext method", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r429073986", "createdAt": "2020-05-22T06:54:37Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -97,11 +106,37 @@ public type JwtAuthProvider object {\n                         } else {\n                             printDebug(KEY_JWT_AUTH_PROVIDER, \"jti claim not found in the jwt\");\n                         }\n+                        var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                        if (jwtTokenClaimCached is runtime:Principal) {\n+                            invocationContext.principal =  jwtTokenClaimCached;\n+                            printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                        } else {\n+                            printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                            var result = doMappingContext(invocationContext, self.className, self.claims,\n+                                self.classLoaded, jwtPayloadFromCache, self.jwtValidatorConfig, self.gatewayCache, authContext);\n+                            if (result is auth:Error){\n+                                return result;\n+                            }\n+                            jwtToken = authContext?.authToken.toString();\n+                        }\n                         return validateSubscriptions(jwtToken, cachedJwt.jwtPayload, self.subscriptionValEnabled, isGRPC);\n-                    } \n+                    }\n                     printDebug(KEY_JWT_AUTH_PROVIDER, \"jwt not found in the jwt cache\");\n                     (jwt:JwtPayload | error) payload = getDecodedJWTPayload(jwtToken);\n                     if (payload is jwt:JwtPayload) {\n+                        var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49be77d90f771dc763c3aaa209f890bf741705ca"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjI2OTM0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1NToyNlrOGZMnig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwNjo1NToyNlrOGZMnig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA3NDMxNA==", "bodyText": "Use a proper name for the map", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r429074314", "createdAt": "2020-05-22T06:55:26Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/mapping/MappingInvoker.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.mapping;\n+\n+import org.ballerinalang.jvm.values.ArrayValue;\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.ballerinalang.jvm.values.MapValueImpl;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.wso2.micro.gateway.jwttransformer.JWTValueTransformer;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * This class Class to dynamically invoke the transformer.\n+ */\n+public class MappingInvoker {\n+    private static Map map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49be77d90f771dc763c3aaa209f890bf741705ca"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjM3MjUzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1NzowNFrOGcPtAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNTo1NzowNFrOGcPtAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI3MDU5Mw==", "bodyText": "Pleae move this line also inside if condition", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r432270593", "createdAt": "2020-05-29T05:57:04Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -97,11 +107,41 @@ public type JwtAuthProvider object {\n                         } else {\n                             printDebug(KEY_JWT_AUTH_PROVIDER, \"jti claim not found in the jwt\");\n                         }\n+                        var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f43ac87c2513219c3237d5003e5fc82eb6464522"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjUxNTg2OnYy", "diffSide": "RIGHT", "path": "distribution/resources/conf/default-micro-gw.conf.template", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzowNTowMVrOGcRF8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzowNTowMVrOGcRF8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5MzM2MA==", "bodyText": "provide example values", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r432293360", "createdAt": "2020-05-29T07:05:01Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -100,13 +100,29 @@\n   certificateAlias = \"wso2apim310\"\n   # Validate subscribed APIs\n   validateSubscription = false\n+  #support custom claim mapping\n+  claimMapperClassName = \"class name of jwt claims value transformer 1\"\n+  [[jwtTokenConfig.claims]]\n+    remoteClaim = \"attribute name of remote claim 1\"\n+    localClaim = \"attribute name of local claim 1\"\n+  [[jwtTokenConfig.claims]]\n+    remoteClaim = \"attribute name of remote claim 2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c286051e8eb599adf78d105b01abe58d3460b86"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjUyNDI3OnYy", "diffSide": "RIGHT", "path": "tests/src/test/resources/openAPIs/jwtTransformer/jwt_transformer.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzowNzo1MVrOGcRKzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo0Nzo0OVrOGeM47Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDYwNw==", "bodyText": "Can we use an existing YAML for test cases?", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r432294607", "createdAt": "2020-05-29T07:07:51Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "tests/src/test/resources/openAPIs/jwtTransformer/jwt_transformer.yaml", "diffHunk": "@@ -0,0 +1,145 @@\n+openapi: 3.0.0\n+info:\n+  description: \"This is a sample server Petstore server.  You can find out more about", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c286051e8eb599adf78d105b01abe58d3460b86"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMTY0NQ==", "bodyText": "It is better to have separate yaml file.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434321645", "createdAt": "2020-06-03T05:47:49Z", "author": {"login": "tharmini"}, "path": "tests/src/test/resources/openAPIs/jwtTransformer/jwt_transformer.yaml", "diffHunk": "@@ -0,0 +1,145 @@\n+openapi: 3.0.0\n+info:\n+  description: \"This is a sample server Petstore server.  You can find out more about", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NDYwNw=="}, "originalCommit": {"oid": "1c286051e8eb599adf78d105b01abe58d3460b86"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjUyODAwOnYy", "diffSide": "RIGHT", "path": "tests/src/test/resources/confs/jwt-transformer-test-config.conf", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzowOToxM1rOGcRNBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzowOToxM1rOGcRNBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NTE3NA==", "bodyText": "remove unnecessary configs and keep only configs specific to the test cases.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r432295174", "createdAt": "2020-05-29T07:09:13Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "tests/src/test/resources/confs/jwt-transformer-test-config.conf", "diffHunk": "@@ -0,0 +1,46 @@\n+[listenerConfig]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c286051e8eb599adf78d105b01abe58d3460b86"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjUzNjk1OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/wso2/micro/gateway/tests/context/Constants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoxMjozM1rOGcRScA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzoxMjozM1rOGcRScA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjI5NjU2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static final String SYSTEM_PROP_JWTTRANSFORMER_JAR = \"jwt_transformer_jar\";\n          \n          \n            \n                public static final String SYSTEM_PROP_JWT_TRANSFORMER_JAR = \"jwt_transformer_jar\";", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r432296560", "createdAt": "2020-05-29T07:12:33Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "tests/src/test/java/org/wso2/micro/gateway/tests/context/Constants.java", "diffHunk": "@@ -29,6 +29,8 @@\n     public static final String SYSTEM_PROP_WINDOWS_RUNTIME = \"runtime_windows\";\n     //Name of the system property define the location of the linux runtime distribution\n     public static final String SYSTEM_PROP_LINUX_RUNTIME = \"runtime_linux\";\n+    // Name of the system property define the custom value  transformer jar file location\n+    public static final String SYSTEM_PROP_JWTTRANSFORMER_JAR = \"jwt_transformer_jar\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c286051e8eb599adf78d105b01abe58d3460b86"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzM5OTcxOnYy", "diffSide": "RIGHT", "path": "tests/src/main/java/org/wso2/micro/gateway/tests/jwtvaluetransformer/DefaultJwtTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNDo0OTowNVrOGc-pqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNDo0OTowNVrOGc-pqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAzOTc4NQ==", "bodyText": "I think package name should be jwt.transformer", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r433039785", "createdAt": "2020-06-01T04:49:05Z", "author": {"login": "Rajith90"}, "path": "tests/src/main/java/org/wso2/micro/gateway/tests/jwtvaluetransformer/DefaultJwtTransformer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.wso2.micro.gateway.tests.jwtvaluetransformer;\n+\n+import org.wso2.micro.gateway.jwttransformer.JWTValueTransformer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c286051e8eb599adf78d105b01abe58d3460b86"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NzM5OTk5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-jwt-transformer/src/main/java/org/wso2/micro/gateway/jwttransformer/JWTValueTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNDo0OToyMFrOGc-p0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwNDo0OToyMFrOGc-p0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAzOTgyNw==", "bodyText": "I think package name should be jwt.transformer", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r433039827", "createdAt": "2020-06-01T04:49:20Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-jwt-transformer/src/main/java/org/wso2/micro/gateway/jwttransformer/JWTValueTransformer.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.jwttransformer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c286051e8eb599adf78d105b01abe58d3460b86"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMzNDk5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-jwt-transformer/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowMToyOVrOGeMGzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowMToyOVrOGeMGzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwODgxNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n          \n          \n            \n            <!--\n          \n          \n            \n              ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n              ~\n          \n          \n            \n              ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n          \n          \n            \n              ~ you may not use this file except in compliance with the License.\n          \n          \n            \n              ~ You may obtain a copy of the License at\n          \n          \n            \n              ~\n          \n          \n            \n              ~ http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n              ~\n          \n          \n            \n              ~ Unless required by applicable law or agreed to in writing, software\n          \n          \n            \n              ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n          \n          \n            \n              ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n          \n          \n            \n              ~ See the License for the specific language governing permissions and\n          \n          \n            \n              ~ limitations under the License.\n          \n          \n            \n              -->\n          \n          \n            \n            <project xmlns=\"http://maven.apache.org/POM/4.0.0\"", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434308815", "createdAt": "2020-06-03T05:01:29Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-jwt-transformer/pom.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMzODY3OnYy", "diffSide": "RIGHT", "path": "tests/src/main/java/org/wso2/micro/gateway/tests/jwtvaluetransformer/DefaultJwtTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowMzo1MFrOGeMJAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowMzo1MFrOGeMJAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwOTM3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.wso2.micro.gateway.tests.jwtvaluetransformer;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            \n          \n          \n            \n            package org.wso2.micro.gateway.tests.jwtvaluetransformer;", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434309376", "createdAt": "2020-06-03T05:03:50Z", "author": {"login": "praminda"}, "path": "tests/src/main/java/org/wso2/micro/gateway/tests/jwtvaluetransformer/DefaultJwtTransformer.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.wso2.micro.gateway.tests.jwtvaluetransformer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTMzOTM2OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/wso2/micro/gateway/tests/jwtTransformer/JwtTransformerTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowNDoyM1rOGeMJeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowNDoyM1rOGeMJeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMwOTQ5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            package org.wso2.micro.gateway.tests.jwtTransformer;\n          \n          \n            \n            /*\n          \n          \n            \n             * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n             *\n          \n          \n            \n             * WSO2 Inc. licenses this file to you under the Apache License,\n          \n          \n            \n             * Version 2.0 (the \"License\"); you may not use this file except\n          \n          \n            \n             * in compliance with the License.\n          \n          \n            \n             * You may obtain a copy of the License at\n          \n          \n            \n             *\n          \n          \n            \n             *    http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *\n          \n          \n            \n             * Unless required by applicable law or agreed to in writing,\n          \n          \n            \n             * software distributed under the License is distributed on an\n          \n          \n            \n             * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n          \n          \n            \n             * KIND, either express or implied.  See the License for the\n          \n          \n            \n             * specific language governing permissions and limitations\n          \n          \n            \n             * under the License.\n          \n          \n            \n             */\n          \n          \n            \n            \n          \n          \n            \n            package org.wso2.micro.gateway.tests.jwtTransformer;", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434309497", "createdAt": "2020-06-03T05:04:23Z", "author": {"login": "praminda"}, "path": "tests/src/test/java/org/wso2/micro/gateway/tests/jwtTransformer/JwtTransformerTestCase.java", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.wso2.micro.gateway.tests.jwtTransformer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM0NzQyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowOToyN1rOGeMObw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowOToyN1rOGeMObw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDc2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n          \n          \n            \n                                            printDebug(KEY_JWT_AUTH_PROVIDER, \"Modified claims in the cache\");", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434310767", "createdAt": "2020-06-03T05:09:27Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -97,11 +107,41 @@ public type JwtAuthProvider object {\n                         } else {\n                             printDebug(KEY_JWT_AUTH_PROVIDER, \"jti claim not found in the jwt\");\n                         }\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {\n+                            var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                            if (jwtTokenClaimCached is runtime:Principal) {\n+                                invocationContext.principal =  jwtTokenClaimCached;\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM0Nzk2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowOTo0MVrOGeMOvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowOTo0MVrOGeMOvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDg0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                            printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n          \n          \n            \n                                            printDebug(KEY_JWT_AUTH_PROVIDER, \"Modified claims is not in the cache\");", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434310844", "createdAt": "2020-06-03T05:09:41Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -97,11 +107,41 @@ public type JwtAuthProvider object {\n                         } else {\n                             printDebug(KEY_JWT_AUTH_PROVIDER, \"jti claim not found in the jwt\");\n                         }\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {\n+                            var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                            if (jwtTokenClaimCached is runtime:Principal) {\n+                                invocationContext.principal =  jwtTokenClaimCached;\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                            } else {\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM1MzcyOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxMjo1MFrOGeMSDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo0NTowNlrOGeM16A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTY5Mw==", "bodyText": "jwtToken is already retrieved from above lines. line 62. Why retrieve it again?", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434311693", "createdAt": "2020-06-03T05:12:50Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -97,11 +107,41 @@ public type JwtAuthProvider object {\n                         } else {\n                             printDebug(KEY_JWT_AUTH_PROVIDER, \"jti claim not found in the jwt\");\n                         }\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {\n+                            var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                            if (jwtTokenClaimCached is runtime:Principal) {\n+                                invocationContext.principal =  jwtTokenClaimCached;\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                            } else {\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                                var result = doMappingContext(invocationContext, self.className, self.claims,\n+                                    self.classLoaded, jwtPayloadFromCache, self.jwtValidatorConfig, self.gatewayCache, authContext);\n+                                if (result is auth:Error){\n+                                    return result;\n+                                }\n+                                jwtToken = authContext?.authToken.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMDg3Mg==", "bodyText": "Here we have to take modified jwt token with claims from auth context.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434320872", "createdAt": "2020-06-03T05:45:06Z", "author": {"login": "tharmini"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -97,11 +107,41 @@ public type JwtAuthProvider object {\n                         } else {\n                             printDebug(KEY_JWT_AUTH_PROVIDER, \"jti claim not found in the jwt\");\n                         }\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {\n+                            var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                            if (jwtTokenClaimCached is runtime:Principal) {\n+                                invocationContext.principal =  jwtTokenClaimCached;\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                            } else {\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                                var result = doMappingContext(invocationContext, self.className, self.claims,\n+                                    self.classLoaded, jwtPayloadFromCache, self.jwtValidatorConfig, self.gatewayCache, authContext);\n+                                if (result is auth:Error){\n+                                    return result;\n+                                }\n+                                jwtToken = authContext?.authToken.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTY5Mw=="}, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM1NDM5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxMzoxNVrOGeMSfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo0Njo1MFrOGeM3zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTgwNg==", "bodyText": "Here as well", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434311806", "createdAt": "2020-06-03T05:13:15Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -97,11 +107,41 @@ public type JwtAuthProvider object {\n                         } else {\n                             printDebug(KEY_JWT_AUTH_PROVIDER, \"jti claim not found in the jwt\");\n                         }\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {\n+                            var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                            if (jwtTokenClaimCached is runtime:Principal) {\n+                                invocationContext.principal =  jwtTokenClaimCached;\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                            } else {\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                                var result = doMappingContext(invocationContext, self.className, self.claims,\n+                                    self.classLoaded, jwtPayloadFromCache, self.jwtValidatorConfig, self.gatewayCache, authContext);\n+                                if (result is auth:Error){\n+                                    return result;\n+                                }\n+                                jwtToken = authContext?.authToken.toString();\n+                            }\n+                         }\n                         return validateSubscriptions(jwtToken, cachedJwt.jwtPayload, self.subscriptionValEnabled, isGRPC);\n-                    } \n+                    }\n                     printDebug(KEY_JWT_AUTH_PROVIDER, \"jwt not found in the jwt cache\");\n                     (jwt:JwtPayload | error) payload = getDecodedJWTPayload(jwtToken);\n                     if (payload is jwt:JwtPayload) {\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {\n+                            var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                            if (jwtTokenClaimCached is runtime:Principal) {\n+                                invocationContext.principal =  jwtTokenClaimCached;\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                            } else {\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                                var result = doMappingContext(invocationContext, self.className, self.claims,\n+                                    self.classLoaded, payload, self.jwtValidatorConfig, self.gatewayCache, authContext);\n+                                if (result is auth:Error){\n+                                    return result;\n+                                }\n+                                jwtToken = authContext?.authToken.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyMTM1Ng==", "bodyText": "Here we have to take modified jwt token with claims from auth context.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434321356", "createdAt": "2020-06-03T05:46:50Z", "author": {"login": "tharmini"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -97,11 +107,41 @@ public type JwtAuthProvider object {\n                         } else {\n                             printDebug(KEY_JWT_AUTH_PROVIDER, \"jti claim not found in the jwt\");\n                         }\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {\n+                            var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                            if (jwtTokenClaimCached is runtime:Principal) {\n+                                invocationContext.principal =  jwtTokenClaimCached;\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                            } else {\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                                var result = doMappingContext(invocationContext, self.className, self.claims,\n+                                    self.classLoaded, jwtPayloadFromCache, self.jwtValidatorConfig, self.gatewayCache, authContext);\n+                                if (result is auth:Error){\n+                                    return result;\n+                                }\n+                                jwtToken = authContext?.authToken.toString();\n+                            }\n+                         }\n                         return validateSubscriptions(jwtToken, cachedJwt.jwtPayload, self.subscriptionValEnabled, isGRPC);\n-                    } \n+                    }\n                     printDebug(KEY_JWT_AUTH_PROVIDER, \"jwt not found in the jwt cache\");\n                     (jwt:JwtPayload | error) payload = getDecodedJWTPayload(jwtToken);\n                     if (payload is jwt:JwtPayload) {\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {\n+                            var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                            if (jwtTokenClaimCached is runtime:Principal) {\n+                                invocationContext.principal =  jwtTokenClaimCached;\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                            } else {\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                                var result = doMappingContext(invocationContext, self.className, self.claims,\n+                                    self.classLoaded, payload, self.jwtValidatorConfig, self.gatewayCache, authContext);\n+                                if (result is auth:Error){\n+                                    return result;\n+                                }\n+                                jwtToken = authContext?.authToken.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMTgwNg=="}, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM1OTA5OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNTo0MVrOGeMVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNTo0MVrOGeMVOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjUwNg==", "bodyText": "it seems, same code is duplicated in above as well. If so, can we fix it?", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434312506", "createdAt": "2020-06-03T05:15:41Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -97,11 +107,41 @@ public type JwtAuthProvider object {\n                         } else {\n                             printDebug(KEY_JWT_AUTH_PROVIDER, \"jti claim not found in the jwt\");\n                         }\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {\n+                            var jwtTokenClaimCached = self.gatewayCache.retrieveClaimMappingCache(jwtToken);\n+                            if (jwtTokenClaimCached is runtime:Principal) {\n+                                invocationContext.principal =  jwtTokenClaimCached;\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims in the cache\");\n+                            } else {\n+                                printDebug(KEY_JWT_AUTH_PROVIDER, \"Moddified claims is not in the cache\");\n+                                var result = doMappingContext(invocationContext, self.className, self.claims,\n+                                    self.classLoaded, jwtPayloadFromCache, self.jwtValidatorConfig, self.gatewayCache, authContext);\n+                                if (result is auth:Error){\n+                                    return result;\n+                                }\n+                                jwtToken = authContext?.authToken.toString();\n+                            }\n+                         }\n                         return validateSubscriptions(jwtToken, cachedJwt.jwtPayload, self.subscriptionValEnabled, isGRPC);\n-                    } \n+                    }\n                     printDebug(KEY_JWT_AUTH_PROVIDER, \"jwt not found in the jwt cache\");\n                     (jwt:JwtPayload | error) payload = getDecodedJWTPayload(jwtToken);\n                     if (payload is jwt:JwtPayload) {\n+                        if(self.className != \"\" || (claimsSet is map<anydata>[] && claimsSet.length() > 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM2MTgxOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNzoxNFrOGeMWyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNzoxNFrOGeMWyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMjkwNg==", "bodyText": "can we use constants for these?", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434312906", "createdAt": "2020-06-03T05:17:14Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handler_providers/jwt_auth_provider.bal", "diffHunk": "@@ -133,11 +173,71 @@ public function validateSubscriptions(string jwtToken, jwt:JwtPayload payload, b\n         if (subscriptionValidated || !subscriptionValEnabled || isGRPC) {\n             printDebug(KEY_JWT_AUTH_PROVIDER, \"Subscriptions validation passed.\");\n             return true;\n-        } else { \n+        } else {\n             setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n             return prepareError(\"Subscriptions validation failed.\");\n         }\n     }\n     setErrorMessageToInvocationContext(API_AUTH_FORBIDDEN);\n     return prepareError(\"Failed to decode the JWT.\");\n }\n+\n+public function doMappingContext(runtime:InvocationContext invocationContext, string className,\n+    map<anydata>[] | error claims, boolean classLoaded, jwt:JwtPayload jwtPayloadFromCache,\n+        jwt:JwtValidatorConfig jwtValidatorConfig, APIGatewayCache gatewayCache,\n+            runtime:AuthenticationContext authContext) returns @tainted (auth:Error)? {\n+    string payloadIssuer = jwtPayloadFromCache[\"iss\"].toString();\n+    string payloadAudience = jwtPayloadFromCache[\"aud\"].toString();\n+    if( jwtValidatorConfig[ISSUER] ==  payloadIssuer &&\n+        jwtValidatorConfig[AUDIENCE] ==  payloadAudience) {\n+        map<any>? customClaims = invocationContext[\"principal\"][\"claims\"];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM2Mjg1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-jwt-transformer/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNzo1MFrOGeMXZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToxNzo1MFrOGeMXZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMzA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n          \n          \n            \n              ~ Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434313060", "createdAt": "2020-06-03T05:17:50Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-jwt-transformer/pom.xml", "diffHunk": "@@ -0,0 +1,85 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e324f7b3a0fc400b62ef0408976aaea688026f9"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTM2ODI3OnYy", "diffSide": "RIGHT", "path": "distribution/resources/conf/default-micro-gw.conf.template", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToyMTowMlrOGeMatg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNToyMTowMlrOGeMatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMzkxMA==", "bodyText": "add comments describing these.", "url": "https://github.com/wso2/product-microgateway/pull/1180#discussion_r434313910", "createdAt": "2020-06-03T05:21:02Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -98,13 +98,29 @@\n   certificateAlias = \"wso2apim310\"\n   # Validate subscribed APIs\n   validateSubscription = false\n+  #support custom claim mapping\n+  claimMapperClassName = \"org.wso2.micro.gateway.jwtTransformer.DefaultJwtTransformer\"\n+  [[jwtTokenConfig.claims]]\n+    remoteClaim = \"scp\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f59752dbe7e675db21fd42ffdb368be6f38d734"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1202, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}