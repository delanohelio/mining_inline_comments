{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MjU2MzA3", "number": 1288, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxNzo1NlrOEH4rAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNjo0Njo0N1rOFXlxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzA0MDAxOnYy", "diffSide": "RIGHT", "path": "filter-chain/envoy.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOToxNzo1NlrOGngq5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0Mzo0NFrOGnhmow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MjkxNg==", "bodyText": "Why did we change this?", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r444082916", "createdAt": "2020-06-23T09:17:56Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "filter-chain/envoy.yaml", "diffHunk": "@@ -17,7 +17,7 @@ static_resources:\n     - filters:\n       - name: envoy.http_connection_manager\n         typed_config:\n-          \"@type\": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager\n+          \"@type\": type.googleapis.com/envoy.configs.filter.network.http_connection_manager.v2.HttpConnectionManager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb1cb61d33b81b6043082611a7b83c2d482ca9c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5ODIxMQ==", "bodyText": "Replacement issues. I corrected it.", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r444098211", "createdAt": "2020-06-23T09:43:44Z", "author": {"login": "chashikajw"}, "path": "filter-chain/envoy.yaml", "diffHunk": "@@ -17,7 +17,7 @@ static_resources:\n     - filters:\n       - name: envoy.http_connection_manager\n         typed_config:\n-          \"@type\": type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager\n+          \"@type\": type.googleapis.com/envoy.configs.filter.network.http_connection_manager.v2.HttpConnectionManager", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA4MjkxNg=="}, "originalCommit": {"oid": "cbb1cb61d33b81b6043082611a7b83c2d482ca9c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzA0MzU1OnYy", "diffSide": "LEFT", "path": "internal/pkg/api/APIServer.go", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0Mjo0MFrOGnhkRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0Mjo0MFrOGnhkRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NzYwNg==", "bodyText": "Yeah It's intentional. Otherwise we need to import all the packages using gopath.(It is much difficult. go doesn't support relative paths) Here we use go modules to avoid that difficulty. Since it behaves like we import it from github.", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r444097606", "createdAt": "2020-06-23T09:42:40Z", "author": {"login": "chashikajw"}, "path": "internal/pkg/api/APIServer.go", "diffHunk": "@@ -18,15 +18,19 @@ package api\n \n import (\n \t\"github.com/gorilla/mux\"\n-\t\"github.com/sirupsen/logrus\"\n-\t\"github.com/wso2/micro-gw/internal/pkg/confTypes\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb1cb61d33b81b6043082611a7b83c2d482ca9c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzE5NzgzOnYy", "diffSide": "RIGHT", "path": "configs/tomlConfigParser.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDowMToxMlrOGniO3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoyNTo0MlrOGnjD5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwODUwOA==", "bodyText": "License Header?", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r444108508", "createdAt": "2020-06-23T10:01:12Z", "author": {"login": "pubudu538"}, "path": "configs/tomlConfigParser.go", "diffHunk": "@@ -0,0 +1,76 @@\n+package configs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c038d7eb19a63c0c719e390012d1a20ede5a39"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEyMjA4NQ==", "bodyText": "Added", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r444122085", "createdAt": "2020-06-23T10:25:42Z", "author": {"login": "chashikajw"}, "path": "configs/tomlConfigParser.go", "diffHunk": "@@ -0,0 +1,76 @@\n+package configs", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDEwODUwOA=="}, "originalCommit": {"oid": "c3c038d7eb19a63c0c719e390012d1a20ede5a39"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjEyOTQzOnYy", "diffSide": "RIGHT", "path": "configs/confTypes/logtypes.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDo1NDowOVrOIeK8LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDo1NzozM1rOIfGcBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUwNzQzNw==", "bodyText": "Any reason for this empty line here? related to go specific formatting?", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r568507437", "createdAt": "2021-02-02T10:54:09Z", "author": {"login": "Ketharan"}, "path": "configs/confTypes/logtypes.go", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package confTypes\n+\n+type pkg struct {\n+\tName     string\n+\tLogLevel string\n+}\n+\n+type accessLog struct {\n+\tLogFile string\n+\tFormat string\n+}\n+\n+// The log configuration struct.\n+type LogConfig struct {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ4MjI0NA==", "bodyText": "This is already fixed", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r569482244", "createdAt": "2021-02-03T14:57:33Z", "author": {"login": "chashikajw"}, "path": "configs/confTypes/logtypes.go", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package confTypes\n+\n+type pkg struct {\n+\tName     string\n+\tLogLevel string\n+}\n+\n+type accessLog struct {\n+\tLogFile string\n+\tFormat string\n+}\n+\n+// The log configuration struct.\n+type LogConfig struct {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUwNzQzNw=="}, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjEzNDgxOnYy", "diffSide": "RIGHT", "path": "configs/tomlConfigParser.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDo1NTozMFrOIeK_eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoxNzowMFrOIfEVdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUwODI4MA==", "bodyText": "shall we remove this?", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r568508280", "createdAt": "2021-02-02T10:55:30Z", "author": {"login": "Ketharan"}, "path": "configs/tomlConfigParser.go", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package configs\n+\n+import (\n+\t\"github.com/BurntSushi/toml\"\n+\tlogger \"github.com/sirupsen/logrus\"\n+\tconfig \"github.com/wso2/micro-gw/configs/confTypes\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"sync\"\n+)\n+var (\n+\tonce_c sync.Once\n+\tonce_lc sync.Once\n+\tconfigs *config.Config\n+\tlogConfigs *config.LogConfig\n+\te error\n+)\n+\n+/**\n+ * Read the control plane main configs.\n+ *\n+ * @return *config.Config Reference for config instance\n+ * @return *error Error\n+ */\n+func ReadConfigs() (*config.Config, error) {\n+\tonce_c.Do(func() {\n+\t\tconfigs = new(config.Config)\n+\t\tmgwHome, _ := os.Getwd()\n+\t\tlogger.Info(\"MGW_HOME: \", mgwHome)\n+\t\t_, err := os.Stat(mgwHome + \"/resources/conf/config.toml\")\n+\t\tif err != nil {\n+\t\t\tlogger.Fatal(\"Configuration file not found.\", err)\n+\t\t}\n+\t\tcontent, readErr := ioutil.ReadFile(mgwHome + \"/resources/conf/config.toml\")\n+\t\tif readErr != nil {\n+\t\t\tlogger.Fatal(\"Error reading configurations. \", readErr)\n+\t\t}\n+\t\t_, e = toml.Decode(string(content), configs)\n+\t})\n+\n+\treturn configs, e\n+}\n+\n+/**\n+ * Read the control plane log configs.\n+ *\n+ * @return *config.LogConfig Reference for log config instance\n+ * @return *error Error\n+ */\n+func ReadLogConfigs() (*config.LogConfig, error) {\n+\tonce_lc.Do(func() {\n+\t\tlogConfigs = new(config.LogConfig)\n+\t\tmgwHome, _ := os.Getwd()\n+\t\t//logger.Info(\"MGW_HOME: \", mgwHome)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ0Nzc5OQ==", "bodyText": "This is already removed", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r569447799", "createdAt": "2021-02-03T14:17:00Z", "author": {"login": "chashikajw"}, "path": "configs/tomlConfigParser.go", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package configs\n+\n+import (\n+\t\"github.com/BurntSushi/toml\"\n+\tlogger \"github.com/sirupsen/logrus\"\n+\tconfig \"github.com/wso2/micro-gw/configs/confTypes\"\n+\t\"io/ioutil\"\n+\t\"os\"\n+\t\"sync\"\n+)\n+var (\n+\tonce_c sync.Once\n+\tonce_lc sync.Once\n+\tconfigs *config.Config\n+\tlogConfigs *config.LogConfig\n+\te error\n+)\n+\n+/**\n+ * Read the control plane main configs.\n+ *\n+ * @return *config.Config Reference for config instance\n+ * @return *error Error\n+ */\n+func ReadConfigs() (*config.Config, error) {\n+\tonce_c.Do(func() {\n+\t\tconfigs = new(config.Config)\n+\t\tmgwHome, _ := os.Getwd()\n+\t\tlogger.Info(\"MGW_HOME: \", mgwHome)\n+\t\t_, err := os.Stat(mgwHome + \"/resources/conf/config.toml\")\n+\t\tif err != nil {\n+\t\t\tlogger.Fatal(\"Configuration file not found.\", err)\n+\t\t}\n+\t\tcontent, readErr := ioutil.ReadFile(mgwHome + \"/resources/conf/config.toml\")\n+\t\tif readErr != nil {\n+\t\t\tlogger.Fatal(\"Error reading configurations. \", readErr)\n+\t\t}\n+\t\t_, e = toml.Decode(string(content), configs)\n+\t})\n+\n+\treturn configs, e\n+}\n+\n+/**\n+ * Read the control plane log configs.\n+ *\n+ * @return *config.LogConfig Reference for log config instance\n+ * @return *error Error\n+ */\n+func ReadLogConfigs() (*config.LogConfig, error) {\n+\tonce_lc.Do(func() {\n+\t\tlogConfigs = new(config.LogConfig)\n+\t\tmgwHome, _ := os.Getwd()\n+\t\t//logger.Info(\"MGW_HOME: \", mgwHome)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUwODI4MA=="}, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjE0NjQ1OnYy", "diffSide": "RIGHT", "path": "internal/pkg/api/APIServer.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDo1ODoxMVrOIeLGdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoxNTo1M1rOIfEQFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUxMDA2OA==", "bodyText": "Any reason to keep these codes commented rather be removed? is this work in the initial phase?", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r568510068", "createdAt": "2021-02-02T10:58:11Z", "author": {"login": "Ketharan"}, "path": "internal/pkg/api/APIServer.go", "diffHunk": "@@ -36,17 +40,17 @@ func Start(config *confTypes.Config) {\n \tapiRouter.HandleFunc(\"/add\", apiService.ApiPOST).Methods(\"POST\")\n \t// TODO: Immplement\n \t//Configuration specific routes\n-\t//configRouter := router.PathPrefix(\"/config\").Subrouter()\n+\t//configRouter := router.PathPrefix(\"/configs\").Subrouter()\n \t//\n \t//authRouter := router.PathPrefix(\"/apikey\").Subrouter()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ0NjQyMg==", "bodyText": "This is already removed", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r569446422", "createdAt": "2021-02-03T14:15:53Z", "author": {"login": "chashikajw"}, "path": "internal/pkg/api/APIServer.go", "diffHunk": "@@ -36,17 +40,17 @@ func Start(config *confTypes.Config) {\n \tapiRouter.HandleFunc(\"/add\", apiService.ApiPOST).Methods(\"POST\")\n \t// TODO: Immplement\n \t//Configuration specific routes\n-\t//configRouter := router.PathPrefix(\"/config\").Subrouter()\n+\t//configRouter := router.PathPrefix(\"/configs\").Subrouter()\n \t//\n \t//authRouter := router.PathPrefix(\"/apikey\").Subrouter()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUxMDA2OA=="}, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjE1MTYxOnYy", "diffSide": "RIGHT", "path": "internal/pkg/logging/logConstants.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMDo1OToyOVrOIeLJhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoxNDo1NlrOIfEMSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUxMDg1NQ==", "bodyText": "Any reason for the indentation level change?", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r568510855", "createdAt": "2021-02-02T10:59:29Z", "author": {"login": "Ketharan"}, "path": "internal/pkg/logging/logConstants.go", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package logging\n+\n+import \"github.com/sirupsen/logrus\"\n+\n+const (\n+    //LOG_FILE_NAME = \"resources/logs/microgateway.log\"\n+    DEFAULT_LOG_LEVEL = logrus.InfoLevel\n+\n+    //log levels\n+\tLEVEL_PANIC = \"PANC\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ0NTQ1MA==", "bodyText": "This is already fixed in the repo", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r569445450", "createdAt": "2021-02-03T14:14:56Z", "author": {"login": "chashikajw"}, "path": "internal/pkg/logging/logConstants.go", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *\n+ */\n+package logging\n+\n+import \"github.com/sirupsen/logrus\"\n+\n+const (\n+    //LOG_FILE_NAME = \"resources/logs/microgateway.log\"\n+    DEFAULT_LOG_LEVEL = logrus.InfoLevel\n+\n+    //log levels\n+\tLEVEL_PANIC = \"PANC\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUxMDg1NQ=="}, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4MjE2NTc1OnYy", "diffSide": "RIGHT", "path": "internal/pkg/oasparser/envoyCodegen/listener.go", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQxMTowMzowN1rOIeLSYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wM1QxNDoxMzo0MlrOIfEIjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUxMzEyMA==", "bodyText": "new line at the EOF?", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r568513120", "createdAt": "2021-02-02T11:03:07Z", "author": {"login": "Ketharan"}, "path": "internal/pkg/oasparser/envoyCodegen/listener.go", "diffHunk": "@@ -109,15 +143,77 @@ func CreateVirtualHost(vHost_Name string, routes []*v2route.Route) (v2route.Virt\n \treturn virtual_host, nil\n }\n \n-func createAddress(remoteHost string, Port uint32) core.Address {\n+/**\n+ * Create a socket address.\n+ *\n+ * @param remoteHost  Host address or host ip\n+ * @param port  Port\n+ * @return core.Address  Endpoint as a core address\n+ */\n+func createAddress(remoteHost string, port uint32) core.Address {\n \taddress := core.Address{Address: &core.Address_SocketAddress{\n \t\tSocketAddress: &core.SocketAddress{\n \t\t\tAddress:  remoteHost,\n \t\t\tProtocol: core.SocketAddress_TCP,\n \t\t\tPortSpecifier: &core.SocketAddress_PortValue{\n-\t\t\t\tPortValue: uint32(Port),\n+\t\t\t\tPortValue: uint32(port),\n \t\t\t},\n \t\t},\n \t}}\n \treturn address\n }\n+\n+/**\n+ * Get access log configs for envoy.\n+ *\n+ * @return envoy_config_filter_accesslog_v2.AccessLog  Access log config\n+ */\n+func getAccessLogConfigs() envoy_config_filter_accesslog_v2.AccessLog {\n+\tlogFormat := \"\"\n+\n+\tlogConfig := &structpb.Struct{\n+\t\tFields: map[string]*structpb.Value{\n+\t\t\t\"path\": {\n+\t\t\t\tKind: &structpb.Value_StringValue{\n+\t\t\t\t\tStringValue: \"/tmp/envoy.access.log\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\tlogConf, errReadConfig := configs.ReadLogConfigs()\n+\tif errReadConfig != nil {\n+\t\tlogger.LoggerOasparser.Error(\"Error loading configuration. \", errReadConfig)\n+\t} else {\n+\t\tlogFormat = logConf.AccessLogs.Format\n+\t}\n+\n+\tif logFormat != \"\" {\n+\t\tlogConfig = &structpb.Struct{\n+\t\t\tFields: map[string]*structpb.Value{\n+\t\t\t\t\"path\": {\n+\t\t\t\t\tKind: &structpb.Value_StringValue{\n+\t\t\t\t\t\tStringValue: \"/tmp/envoy.access.log\",\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\t\"format\": {\n+\t\t\t\t\tKind: &structpb.Value_StringValue{\n+\t\t\t\t\t\tStringValue: logConf.AccessLogs.Format,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}\n+\t}\n+\n+\taccess_log := envoy_config_filter_accesslog_v2.AccessLog{\n+\t\tName:                 \"envoy.file_access_log\",\n+\t\tConfigType: &envoy_config_filter_accesslog_v2.AccessLog_Config{\n+\t\t\tConfig: logConfig,\n+\t\t} ,\n+\t\tXXX_NoUnkeyedLiteral: struct{}{},\n+\t\tXXX_unrecognized:     nil,\n+\t\tXXX_sizecache:        0,\n+\t}\n+\n+\treturn access_log\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2OTQ0NDQ5NA==", "bodyText": "This is already fixed in the repo", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r569444494", "createdAt": "2021-02-03T14:13:42Z", "author": {"login": "chashikajw"}, "path": "internal/pkg/oasparser/envoyCodegen/listener.go", "diffHunk": "@@ -109,15 +143,77 @@ func CreateVirtualHost(vHost_Name string, routes []*v2route.Route) (v2route.Virt\n \treturn virtual_host, nil\n }\n \n-func createAddress(remoteHost string, Port uint32) core.Address {\n+/**\n+ * Create a socket address.\n+ *\n+ * @param remoteHost  Host address or host ip\n+ * @param port  Port\n+ * @return core.Address  Endpoint as a core address\n+ */\n+func createAddress(remoteHost string, port uint32) core.Address {\n \taddress := core.Address{Address: &core.Address_SocketAddress{\n \t\tSocketAddress: &core.SocketAddress{\n \t\t\tAddress:  remoteHost,\n \t\t\tProtocol: core.SocketAddress_TCP,\n \t\t\tPortSpecifier: &core.SocketAddress_PortValue{\n-\t\t\t\tPortValue: uint32(Port),\n+\t\t\t\tPortValue: uint32(port),\n \t\t\t},\n \t\t},\n \t}}\n \treturn address\n }\n+\n+/**\n+ * Get access log configs for envoy.\n+ *\n+ * @return envoy_config_filter_accesslog_v2.AccessLog  Access log config\n+ */\n+func getAccessLogConfigs() envoy_config_filter_accesslog_v2.AccessLog {\n+\tlogFormat := \"\"\n+\n+\tlogConfig := &structpb.Struct{\n+\t\tFields: map[string]*structpb.Value{\n+\t\t\t\"path\": {\n+\t\t\t\tKind: &structpb.Value_StringValue{\n+\t\t\t\t\tStringValue: \"/tmp/envoy.access.log\",\n+\t\t\t\t},\n+\t\t\t},\n+\t\t},\n+\t}\n+\n+\tlogConf, errReadConfig := configs.ReadLogConfigs()\n+\tif errReadConfig != nil {\n+\t\tlogger.LoggerOasparser.Error(\"Error loading configuration. \", errReadConfig)\n+\t} else {\n+\t\tlogFormat = logConf.AccessLogs.Format\n+\t}\n+\n+\tif logFormat != \"\" {\n+\t\tlogConfig = &structpb.Struct{\n+\t\t\tFields: map[string]*structpb.Value{\n+\t\t\t\t\"path\": {\n+\t\t\t\t\tKind: &structpb.Value_StringValue{\n+\t\t\t\t\t\tStringValue: \"/tmp/envoy.access.log\",\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t\t\"format\": {\n+\t\t\t\t\tKind: &structpb.Value_StringValue{\n+\t\t\t\t\t\tStringValue: logConf.AccessLogs.Format,\n+\t\t\t\t\t},\n+\t\t\t\t},\n+\t\t\t},\n+\t\t}\n+\t}\n+\n+\taccess_log := envoy_config_filter_accesslog_v2.AccessLog{\n+\t\tName:                 \"envoy.file_access_log\",\n+\t\tConfigType: &envoy_config_filter_accesslog_v2.AccessLog_Config{\n+\t\t\tConfig: logConfig,\n+\t\t} ,\n+\t\tXXX_NoUnkeyedLiteral: struct{}{},\n+\t\tXXX_unrecognized:     nil,\n+\t\tXXX_sizecache:        0,\n+\t}\n+\n+\treturn access_log\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODUxMzEyMA=="}, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzYwMjgwMzc2OnYy", "diffSide": "RIGHT", "path": "internal/pkg/mgw/mgw.go", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNjo0Njo0N1rOIhKb6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wN1QxNjo0Njo0N1rOIhKb6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTY0NDkwNg==", "bodyText": "additional new line", "url": "https://github.com/wso2/product-microgateway/pull/1288#discussion_r571644906", "createdAt": "2021-02-07T16:46:47Z", "author": {"login": "VirajSalaka"}, "path": "internal/pkg/mgw/mgw.go", "diffHunk": "@@ -192,40 +145,54 @@ func updateEnvoy(location string) {\n \tlisteners, clusters, routes, endpoints := oasParser.GetProductionSources(location)\n \n \tatomic.AddInt32(&version, 1)\n-\tlog.Infof(\">>>>>>>>>>>>>>>>>>> creating snapshot Version \" + fmt.Sprint(version))\n+\tlogger.LoggerMgw.Infof(\">>>>>>>>>>>>>>>>>>> creating snapshot Version \" + fmt.Sprint(version))\n \tsnap := cachev2.NewSnapshot(fmt.Sprint(version), endpoints, clusters, routes, listeners, nil)\n \tsnap.Consistent()\n \n \terr := cache.SetSnapshot(nodeId, snap)\n \tif err != nil {\n-\t\tlogrus.Error(err)\n+\t\tlogger.LoggerMgw.Error(err)\n \t}\n }\n \n-// Run the management grpc server.\n+/**\n+ * Run the management grpc server.\n+ *\n+ * @param conf  Swagger files location\n+ */\n func Run(conf *mgwconfig.Config) {\n \tsig := make(chan os.Signal)\n \tsignal.Notify(sig, os.Interrupt)\n \twatcher, _ := fsnotify.NewWatcher()\n \terr := watcher.Add(conf.Apis.Location)\n \n \tif err != nil {\n-\t\tlogrus.Panic(\"Error reading the api definitions.\", err)\n+\t\tlogger.LoggerMgw.Fatal(\"Error reading the api definitions.\", err)\n \t}\n \n \tflag.Parse()\n-\tif debug {\n-\t\tlogrus.SetLevel(logrus.DebugLevel)\n-\t}\n+\n \tctx, cancel := context.WithCancel(context.Background())\n \tdefer cancel()\n \n-\tlogrus.Printf(\"Starting control plane\")\n+\t//log config watcher\n+\twatcherLogConf, _ := fsnotify.NewWatcher()\n+\terrC := watcherLogConf.Add(\"resources/conf/log_config.toml\")\n+\n+\tif errC != nil {\n+\t\tlogger.LoggerMgw.Fatal(\"Error reading the log configs. \", err)\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29a8f7aceb7ca7147dbd794eb2317f3189279fef"}, "originalPosition": 205}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1252, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}