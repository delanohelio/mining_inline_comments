{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMzE4Njc0", "number": 975, "title": "Fix #881 - Implement new fixed window throttling ", "bodyText": "Purpose\nThis implements the fixed window throttling without ballerina streaming\nIssues\n\nFixes #881\nAutomation tests\n\nUnit tests added: Yes/No\nIntegration tests added: Yes/No\n\nTested environments\n\nNot Tested\n\nMaintainers: Check before merge\n\n Assigned 'Type' label\n Assigned the project\n Validated respective github issues\n Assigned milestone to the github issue(s)", "createdAt": "2020-02-07T09:39:49Z", "url": "https://github.com/wso2/product-microgateway/pull/975", "merged": true, "mergeCommit": {"oid": "92a3ebe23c5b9dbab06a9ed65328086c1ca09b43"}, "closed": true, "closedAt": "2020-02-08T15:28:54Z", "author": {"login": "Rajith90"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAlQP3gH2gAyMzcyMzE4Njc0OmU3NTU1M2ZiNThkOGY0ZTFhZTUyNmYxMWM5ZmE4ZThhNjE4NWFjYWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcB_OPlgFqTM1NTE0ODcwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e75553fb58d8f4e1ae526f11c9fa8e8a6185acad", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/e75553fb58d8f4e1ae526f11c9fa8e8a6185acad", "committedDate": "2020-02-03T04:30:19Z", "message": "Fix #881 - Implement new fixed window throttling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40ead00aed3cd145a3be8e3ae8e3dbea12f53ced", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/40ead00aed3cd145a3be8e3ae8e3dbea12f53ced", "committedDate": "2020-02-07T09:37:53Z", "message": "Merge branch 'master' of https://github.com/wso2/product-microgateway into throttle_new"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/6953614d56b5ca2e409e2e569445d962b1cfc1d5", "committedDate": "2020-02-07T09:38:15Z", "message": "Fix #881 - Improvemnts to fixed window throttling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDYxOTIw", "url": "https://github.com/wso2/product-microgateway/pull/975#pullrequestreview-355061920", "createdAt": "2020-02-07T10:26:14Z", "commit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "state": "DISMISSED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDoyNjoxNFrOFm4qyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDozNDoxNlrOFm45KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMxODY2Ng==", "bodyText": "Inline version declaration. Shall we move this to dependecyManagement", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376318666", "createdAt": "2020-02-07T10:26:14Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/pom.xml", "diffHunk": "@@ -39,6 +39,21 @@\n             <artifactId>javax.jms-api</artifactId>\n             <version>${jmx.api.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>org.ops4j.pax.logging</groupId>\n+            <artifactId>pax-logging-api</artifactId>\n+            <version>1.10.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMDA1NA==", "bodyText": "Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376320054", "createdAt": "2020-02-07T10:29:07Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/native/throttle.bal", "diffHunk": "@@ -0,0 +1,77 @@\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMDIzMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            } external;\n          \n          \n            \n            } external;", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376320232", "createdAt": "2020-02-07T10:29:29Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/native/throttle.bal", "diffHunk": "@@ -0,0 +1,77 @@\n+\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerinax/java;\n+\n+public function initThrottleDataPublisher() {\n+    int processPoolMaxIdle = getConfigIntValue(LOCAL_THROTTLE_CONF_INSTANCE_ID, PROCESS_POOL_MAX_IDLE, DEFAULT_PROCESS_POOL_MAX_IDLE);\n+    int processPoolInitIdleCapacity = getConfigIntValue(LOCAL_THROTTLE_CONF_INSTANCE_ID, PROCESS_POOL_INIT_IDLE_CAPACITY, DEFAULT_PROCESS_POOL_INIT_IDLE_CAPACITY);\n+    int processThreadPoolCoreSize = getConfigIntValue(LOCAL_THROTTLE_CONF_INSTANCE_ID, PROCESS_THREAD_POOL_CORE_SIZE, DEFAULT_PROCESS_THREAD_POOL_CORE_SIZE);\n+    int processThreadPoolMaximumSize = getConfigIntValue(LOCAL_THROTTLE_CONF_INSTANCE_ID, PROCESS_THREAD_POOL_MAXIMUM_SIZE, DEFAULT_PROCESS_THREAD_POOL_MAXIMUM_SIZE);\n+    int processThreadPoolKeepAliveTime = getConfigIntValue(LOCAL_THROTTLE_CONF_INSTANCE_ID, PROCESS_THREAD_POOL_KEEP_ALIVE_TIME, DEFAULT_PROCESS_THREAD_POOL_KEEP_ALIVE_TIME);\n+    int cleanUpFrequency = getConfigIntValue(LOCAL_THROTTLE_CONF_INSTANCE_ID, THROTTLE_CLEANUP_FREQUENCY, DEFAULT_THROTTLE_CLEANUP_FREQUENCY);\n+    jInitThrottleDataPublisher (processPoolMaxIdle, processPoolInitIdleCapacity, processThreadPoolCoreSize,\n+        processThreadPoolMaximumSize, processThreadPoolKeepAliveTime, cleanUpFrequency);\n+}\n+\n+public function publishNonThrottledEvent(RequestStreamDTO throttleEvent) {\n+    jPublishNonThrottledEvent(throttleEvent);\n+}\n+\n+public function isResourceThrottled(string resourceKey) returns boolean {\n+    handle key = java:fromString(resourceKey);\n+    return jIsResourceThrottled(key);\n+}\n+\n+public function isAppLevelThrottled(string appKey) returns boolean {\n+    handle key = java:fromString(appKey);\n+    return jIsAppLevelThrottled(key);\n+}\n+\n+public function isSubLevelThrottled(string subscriptionKey) returns boolean {\n+    handle key = java:fromString(subscriptionKey);\n+    return jIsSubscriptionLevelThrottled(key);\n+}\n+\n+public function jIsResourceThrottled(handle resourceKey) returns boolean = @java:Method  {\n+    name: \"isResourceThrottled\",\n+    class: \"org.wso2.micro.gateway.core.throttle.ThrottleDataReceiver\"\n+} external;\n+\n+public function jIsSubscriptionLevelThrottled(handle subscriptionKey) returns boolean = @java:Method  {\n+    name: \"isSubcriptionLevelThrottled\",\n+    class: \"org.wso2.micro.gateway.core.throttle.ThrottleDataReceiver\"\n+} external;\n+\n+public function jIsAppLevelThrottled(handle appKey) returns boolean = @java:Method  {\n+    name: \"isAppLevelThrottled\",\n+    class: \"org.wso2.micro.gateway.core.throttle.ThrottleDataReceiver\"\n+} external;\n+\n+\n+public function jInitThrottleDataPublisher(int processPoolMaxIdle, int processPoolInitIdleCapacity,\n+    int processThreadPoolCoreSize, int processThreadPoolMaximumSize, int processThreadPoolKeepAliveTime,\n+    int cleanUpFrequency) = @java:Method {\n+    name: \"initThrottleDataReceiver\",\n+    class: \"org.wso2.micro.gateway.core.throttle.ThrottleDataReceiver\"\n+} external;\n+\n+\n+public function jPublishNonThrottledEvent(RequestStreamDTO throttleEvent) = @java:Method {\n+    name: \"processNonThrottledEvent\",\n+    class: \"org.wso2.micro.gateway.core.throttle.ThrottleDataReceiver\"\n+} external;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMDM0Nw==", "bodyText": "Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376320347", "createdAt": "2020-02-07T10:29:44Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/utils/throttle_util.bal", "diffHunk": "@@ -146,13 +147,24 @@ public function removeThrottleData(string key) {\n }\n \n //check whether the throttle policy is available if in built throttling is used\n-public function isPolicyExist(map<boolean> deployedPolicies, string policyName) returns boolean {\n+public function isPolicyExist(map<json> deployedPolicies, string policyName) returns boolean {\n     if (!enabledGlobalTMEventPublishing) {\n         return deployedPolicies.hasKey(policyName);\n     }\n     return true;\n }\n \n+public function getPolicyDetails(map<json> deployedPolicies, string policyName) returns (map<json>) {\n+    if (stringutils:equalsIgnoreCase(policyName, UNLIMITED_TIER) || policyName.length() == 0) {\n+        return { count : -1, unitTime :-1, timeUnit : \"min\", stopOnQuota : true };\n+    }\n+    return <map<json>>deployedPolicies.get(policyName);\n+}\n+\n+public function calculateUnitTimeInMillis(int unitTime, string timeUnit) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMDQ0Mw==", "bodyText": "Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376320443", "createdAt": "2020-02-07T10:29:58Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/DataProcessAgent.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+/**\n+ * This class is responsible for executing data processing logic. This class implements runnable interface and\n+ * need to execute using thread pool executor.\n+ */\n+public class DataProcessAgent implements Runnable {\n+\n+    private ThrottleCounter throttleCounter;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMTE1NQ==", "bodyText": "Dot at the end is a must for checkstyles\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Static holder single pattern implementation to hold the configurations related local throttle processing,\n          \n          \n            \n             * Static holder single pattern implementation to hold the configurations related local throttle processing.", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376321155", "createdAt": "2020-02-07T10:31:38Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleConfigHolder.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+/**\n+ * Static holder single pattern implementation to hold the configurations related local throttle processing,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMTQ5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Class to hold throttle counter data against a specific key\n          \n          \n            \n             * Class to hold throttle counter data against a specific key.", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376321497", "createdAt": "2020-02-07T10:32:33Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleData.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * Class to hold throttle counter data against a specific key", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMTczNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * which runs periodically\n          \n          \n            \n                 * which runs periodically.", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376321734", "createdAt": "2020-02-07T10:33:01Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleDataCleanUpTask.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * This task is responsible for cleanup ThrottleData objects which has expired.\n+ *\n+ */\n+public class ThrottleDataCleanUpTask {\n+\n+    private static final Logger log = LoggerFactory.getLogger(ThrottleDataCleanUpTask.class);\n+    private List<ThrottleData> throttleDataList = new ArrayList<>();\n+\n+    public ThrottleDataCleanUpTask() {\n+\n+        ScheduledExecutorService executor = Executors.newScheduledThreadPool(1, new ThreadFactory() {\n+\n+            public Thread newThread(Runnable r) {\n+                Thread t = new Thread(r);\n+                t.setName(\"Throttle Cleanup Task\");\n+                return t;\n+            }\n+        });\n+\n+        int throttleFrequency = ThrottleConfigHolder.getInstance().getThrottleFrequency();\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"Throttling Cleanup Task Frequency set to \" + throttleFrequency);\n+        }\n+\n+        executor.scheduleAtFixedRate(new CleanupTask(), throttleFrequency, throttleFrequency, TimeUnit.SECONDS);\n+\n+    }\n+\n+    /**\n+     * Add the throttle data instances to be cleaned into the cleanup array list, which is iterated by the cleanup task\n+     * which runs periodically", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMjMwNQ==", "bodyText": "Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376322305", "createdAt": "2020-02-07T10:34:11Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleDataReceiver.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Throttle data receiver class accepts all the request events and submit the throttle data to a thread pool to\n+ * calculate throttle counters against each unique throttle key.\n+ */\n+public class ThrottleDataReceiver {\n+    private static ThrottleDataCleanUpTask throttleDataCleanUpTask;\n+\n+    private static final Logger log = LoggerFactory.getLogger(\"ballerina\");\n+\n+    public static ThrottleCounter getThrottleCounter() {\n+        return throttleCounter;\n+    }\n+\n+    private static volatile ThrottleCounter throttleCounter = null;\n+\n+    private static ExecutorService executor;\n+\n+    /**\n+     * This method will initialize throttle data counters. Inside this we will start executor and initialize data\n+     * counter which we used to maintain throttle count against each unique keys.\n+     */\n+    public static void initThrottleDataReceiver(int processPoolMaxIdle, int processPoolInitIdleCapacity,\n+            int processThreadPoolCoreSize, int processThreadPoolMaximumSize, int processThreadPoolKeepAliveTime,\n+            int throttleFrequency) {\n+        ThrottleConfigHolder.getInstance()\n+                .setData(processPoolMaxIdle, processPoolInitIdleCapacity, processThreadPoolCoreSize,\n+                        processThreadPoolMaximumSize, processThreadPoolKeepAliveTime, throttleFrequency);\n+        initThrottleExecutors();\n+        throttleDataCleanUpTask = new ThrottleDataCleanUpTask();\n+    }\n+\n+    private static void initThrottleExecutors() {\n+        ThrottleConfigHolder throttleConfigHolder = ThrottleConfigHolder.getInstance();\n+        executor = new ThreadPoolExecutor(throttleConfigHolder.getProcessThreadPoolCoreSize(),\n+                throttleConfigHolder.getProcessThreadPoolMaximumSize(),\n+                throttleConfigHolder.getProcessThreadPoolKeepAliveTime(), TimeUnit.SECONDS,\n+                new LinkedBlockingDeque<Runnable>() {\n+                });\n+        throttleCounter = new ThrottleCounter();\n+    }\n+\n+    /**\n+     * This method used to pass throttle data and let it run within separate thread.\n+     */\n+    public static void processNonThrottledEvent(MapValue throttleEvent) {\n+        //check for a dto\n+        try {\n+            DataProcessAgent agent = new DataProcessAgent();\n+            agent.setDataReference(throttleEvent);\n+            executor.execute(agent);\n+        } catch (Exception e) {\n+            log.error(\"Error while processing throttling event\", e);\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyMjM0NA==", "bodyText": "Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376322344", "createdAt": "2020-02-07T10:34:16Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/ThrottleDataReceiver.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Throttle data receiver class accepts all the request events and submit the throttle data to a thread pool to\n+ * calculate throttle counters against each unique throttle key.\n+ */\n+public class ThrottleDataReceiver {\n+    private static ThrottleDataCleanUpTask throttleDataCleanUpTask;\n+\n+    private static final Logger log = LoggerFactory.getLogger(\"ballerina\");\n+\n+    public static ThrottleCounter getThrottleCounter() {\n+        return throttleCounter;\n+    }\n+\n+    private static volatile ThrottleCounter throttleCounter = null;\n+\n+    private static ExecutorService executor;\n+\n+    /**\n+     * This method will initialize throttle data counters. Inside this we will start executor and initialize data\n+     * counter which we used to maintain throttle count against each unique keys.\n+     */\n+    public static void initThrottleDataReceiver(int processPoolMaxIdle, int processPoolInitIdleCapacity,\n+            int processThreadPoolCoreSize, int processThreadPoolMaximumSize, int processThreadPoolKeepAliveTime,\n+            int throttleFrequency) {\n+        ThrottleConfigHolder.getInstance()\n+                .setData(processPoolMaxIdle, processPoolInitIdleCapacity, processThreadPoolCoreSize,\n+                        processThreadPoolMaximumSize, processThreadPoolKeepAliveTime, throttleFrequency);\n+        initThrottleExecutors();\n+        throttleDataCleanUpTask = new ThrottleDataCleanUpTask();\n+    }\n+\n+    private static void initThrottleExecutors() {\n+        ThrottleConfigHolder throttleConfigHolder = ThrottleConfigHolder.getInstance();\n+        executor = new ThreadPoolExecutor(throttleConfigHolder.getProcessThreadPoolCoreSize(),\n+                throttleConfigHolder.getProcessThreadPoolMaximumSize(),\n+                throttleConfigHolder.getProcessThreadPoolKeepAliveTime(), TimeUnit.SECONDS,\n+                new LinkedBlockingDeque<Runnable>() {\n+                });\n+        throttleCounter = new ThrottleCounter();\n+    }\n+\n+    /**\n+     * This method used to pass throttle data and let it run within separate thread.\n+     */\n+    public static void processNonThrottledEvent(MapValue throttleEvent) {\n+        //check for a dto\n+        try {\n+            DataProcessAgent agent = new DataProcessAgent();\n+            agent.setDataReference(throttleEvent);\n+            executor.execute(agent);\n+        } catch (Exception e) {\n+            log.error(\"Error while processing throttling event\", e);\n+        }\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDczMzM2", "url": "https://github.com/wso2/product-microgateway/pull/975#pullrequestreview-355073336", "createdAt": "2020-02-07T10:46:02Z", "commit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo0NjowM1rOFm5NxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo0NjowM1rOFm5NxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMyNzYyMA==", "bodyText": "Can make it one line", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376327620", "createdAt": "2020-02-07T10:46:03Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/cookie_handler.bal", "diffHunk": "@@ -32,7 +32,8 @@ public type CookieAuthHandler object {\n \n             //extract cookies from the incoming request\n             string authHead = req.getHeader(COOKIE_HEADER);\n-            string[] cookies = split(authHead.trim(), \";\");\n+            string[] cookies =\n+            split(authHead.trim(), \";\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDc4MTQz", "url": "https://github.com/wso2/product-microgateway/pull/975#pullrequestreview-355078143", "createdAt": "2020-02-07T10:54:36Z", "commit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo1NDozN1rOFm5ckA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo1NDozN1rOFm5ckA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMTQwOA==", "bodyText": "Can we add more documentation comments here with which units (e.g.seconds ..) and etc.", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376331408", "createdAt": "2020-02-07T10:54:37Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "distribution/resources/conf/default-micro-gw.conf.template", "diffHunk": "@@ -191,6 +191,14 @@\n \n # Throttling configurations\n [throttlingConfig]\n+  [throttlingConfig.nodeLocal]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MDgwNjI4", "url": "https://github.com/wso2/product-microgateway/pull/975#pullrequestreview-355080628", "createdAt": "2020-02-07T10:59:08Z", "commit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo1OTowOFrOFm5kVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMDo1OTowOFrOFm5kVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjMzMzM5OA==", "bodyText": "Suggested change", "url": "https://github.com/wso2/product-microgateway/pull/975#discussion_r376333398", "createdAt": "2020-02-07T10:59:08Z", "author": {"login": "AmaliMatharaarachchi"}, "path": "components/micro-gateway-core/src/main/java/org/wso2/micro/gateway/core/throttle/DataProcessAgent.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.wso2.micro.gateway.core.throttle;\n+\n+import org.ballerinalang.jvm.values.MapValue;\n+\n+/**\n+ * This class is responsible for executing data processing logic. This class implements runnable interface and\n+ * need to execute using thread pool executor.\n+ */\n+public class DataProcessAgent implements Runnable {\n+\n+    private ThrottleCounter throttleCounter;\n+\n+    private String apiKey;\n+    private String appKey;\n+    private boolean stopOnQuota;\n+    private String subscriptionKey;\n+    private long appTierCount;\n+    private long appTierUnitTime;\n+    private String appTierTimeUnit;\n+    private long apiTierCount;\n+    private long apiTierUnitTime;\n+    private long subscriptionTierCount;\n+    private long subscriptionTierUnitTime;\n+    private String subscriptionTierTimeUnit;\n+    private String resourceKey;\n+    private long resourceTierCount;\n+    private long resourceTierUnitTime;\n+    private String resourceTierTimeUnit;\n+    private long timestamp;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6953614d56b5ca2e409e2e569445d962b1cfc1d5"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fef6b12cb7c150e912a926688ea3939dbc462db", "author": {"user": {"login": "Rajith90", "name": "Rajith Roshan"}}, "url": "https://github.com/wso2/product-microgateway/commit/0fef6b12cb7c150e912a926688ea3939dbc462db", "committedDate": "2020-02-07T13:17:35Z", "message": "review improvements and performance improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTQ4NzA2", "url": "https://github.com/wso2/product-microgateway/pull/975#pullrequestreview-355148706", "createdAt": "2020-02-07T13:19:35Z", "commit": {"oid": "0fef6b12cb7c150e912a926688ea3939dbc462db"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1148, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}