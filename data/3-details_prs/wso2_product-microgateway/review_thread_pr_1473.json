{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NDg4MjMx", "number": 1473, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzoyMToyNlrOE3iHFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo0NTowNVrOE3jXaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjY2MDA1OnYy", "diffSide": "RIGHT", "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/api/RestAPI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMzoyMToyNlrOHw8FRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzo1NzoyMVrOHxCNFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3ODA4Nw==", "bodyText": "If multiple http methods are involved with a single path, the filter-core gets a space separated set of Methods (in a pending PR).\nHence shall we split this using space and add a resource for each method.", "url": "https://github.com/wso2/product-microgateway/pull/1473#discussion_r521078087", "createdAt": "2020-11-11T03:21:26Z", "author": {"login": "VirajSalaka"}, "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/api/RestAPI.java", "diffHunk": "@@ -85,63 +74,22 @@ public APIConfig getAPIConfig() {\n         return this.apiConfig;\n     }\n \n-    private List<ResourceConfig> getResourcesFromOpenAPI(Paths paths) {\n-        List<ResourceConfig> resourceConfigs = new ArrayList<>();\n-        paths.forEach((name, path) -> {\n-            path.readOperationsMap().forEach((httpMethod, operation) -> {\n-                ResourceConfig resourceConfig = new ResourceConfig();\n-                resourceConfig.setPath(name);\n-                resourceConfig.setMethod(ResourceConfig.HttpMethods.valueOf(httpMethod.name()));\n-                resourceConfigs.add(resourceConfig);\n-            });\n-        });\n-        return resourceConfigs;\n-    }\n-\n-    private String resolveBasePath() {\n-        String basePath = \"/\";\n-        if (openAPI.getExtensions() != null && openAPI.getExtensions().containsKey(APIConstants.X_WSO2_BASE_PATH)) {\n-            return openAPI.getExtensions().get(APIConstants.X_WSO2_BASE_PATH).toString();\n-        }\n-        List<Server> servers = openAPI.getServers();\n-        if (servers != null) {\n-            Server server = servers.get(0);\n-            String url = replaceOpenAPIServerTemplate(server);\n-            try {\n-                basePath = new URI(url).getPath();\n-            } catch (URISyntaxException e) {\n-                logger.error(e);\n-            }\n-        }\n-        return basePath;\n-    }\n-\n     /**\n-     * Open API server object can have server templating. Ex: https://{customerId}.saas-app.com:{port}/v2.\n-     * When adding the back end url this method will replace the template values with the default value.\n+     * Extract elected resource details from the request attributes.\n      *\n-     * @param server {@link Server} object of the open API definition\n-     * @return templated server url replaced with default values\n+     * @param attributes request attributes\n+     * @return resource configuration identified by the request\n      */\n-    private static String replaceOpenAPIServerTemplate(Server server) {\n-        //server url templating can have urls similar to 'https://{customerId}.saas-app.com:{port}/v2'\n-        String url = server.getUrl();\n-        Pattern serverTemplate = Pattern.compile(\"\\\\{.*?}\");\n-        Matcher matcher = serverTemplate.matcher(url);\n-        while (matcher.find()) {\n-            if (server.getVariables() != null && server.getVariables()\n-                    .containsKey(matcher.group(0).substring(1, matcher.group(0).length() - 1))) {\n-                String defaultValue = server.getVariables()\n-                        .get(matcher.group(0).substring(1, matcher.group(0).length() - 1)).getDefault();\n-                url = url.replaceAll(\"/\" + matcher.group(0), defaultValue);\n-            } else {\n-                logger.error(\"Open API server url templating is used for the url : \" + url\n-                        + \". But default values is not provided for the variable '\" + matcher.group(0)\n-                        + \"'. Hence correct url will not be resolved during the runtime \"\n-                        + \"unless url is overridden during the runtime\");\n-            }\n-        }\n-        return url;\n+    private List<ResourceConfig> extractResourceConfig(Map<String, String> attributes) {\n+        String resPath = attributes.get(APIConstants.GW_RES_PATH_PARAM);\n+        String resMethod = attributes.get(APIConstants.GW_RES_METHOD_PARAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc61c8c2b3844288e41d12750fa3ec1cfd27715f"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3ODM5MA==", "bodyText": "Fixed with c2b0467", "url": "https://github.com/wso2/product-microgateway/pull/1473#discussion_r521178390", "createdAt": "2020-11-11T07:57:21Z", "author": {"login": "praminda"}, "path": "filter-core/src/main/java/org/wso2/micro/gateway/filter/core/api/RestAPI.java", "diffHunk": "@@ -85,63 +74,22 @@ public APIConfig getAPIConfig() {\n         return this.apiConfig;\n     }\n \n-    private List<ResourceConfig> getResourcesFromOpenAPI(Paths paths) {\n-        List<ResourceConfig> resourceConfigs = new ArrayList<>();\n-        paths.forEach((name, path) -> {\n-            path.readOperationsMap().forEach((httpMethod, operation) -> {\n-                ResourceConfig resourceConfig = new ResourceConfig();\n-                resourceConfig.setPath(name);\n-                resourceConfig.setMethod(ResourceConfig.HttpMethods.valueOf(httpMethod.name()));\n-                resourceConfigs.add(resourceConfig);\n-            });\n-        });\n-        return resourceConfigs;\n-    }\n-\n-    private String resolveBasePath() {\n-        String basePath = \"/\";\n-        if (openAPI.getExtensions() != null && openAPI.getExtensions().containsKey(APIConstants.X_WSO2_BASE_PATH)) {\n-            return openAPI.getExtensions().get(APIConstants.X_WSO2_BASE_PATH).toString();\n-        }\n-        List<Server> servers = openAPI.getServers();\n-        if (servers != null) {\n-            Server server = servers.get(0);\n-            String url = replaceOpenAPIServerTemplate(server);\n-            try {\n-                basePath = new URI(url).getPath();\n-            } catch (URISyntaxException e) {\n-                logger.error(e);\n-            }\n-        }\n-        return basePath;\n-    }\n-\n     /**\n-     * Open API server object can have server templating. Ex: https://{customerId}.saas-app.com:{port}/v2.\n-     * When adding the back end url this method will replace the template values with the default value.\n+     * Extract elected resource details from the request attributes.\n      *\n-     * @param server {@link Server} object of the open API definition\n-     * @return templated server url replaced with default values\n+     * @param attributes request attributes\n+     * @return resource configuration identified by the request\n      */\n-    private static String replaceOpenAPIServerTemplate(Server server) {\n-        //server url templating can have urls similar to 'https://{customerId}.saas-app.com:{port}/v2'\n-        String url = server.getUrl();\n-        Pattern serverTemplate = Pattern.compile(\"\\\\{.*?}\");\n-        Matcher matcher = serverTemplate.matcher(url);\n-        while (matcher.find()) {\n-            if (server.getVariables() != null && server.getVariables()\n-                    .containsKey(matcher.group(0).substring(1, matcher.group(0).length() - 1))) {\n-                String defaultValue = server.getVariables()\n-                        .get(matcher.group(0).substring(1, matcher.group(0).length() - 1)).getDefault();\n-                url = url.replaceAll(\"/\" + matcher.group(0), defaultValue);\n-            } else {\n-                logger.error(\"Open API server url templating is used for the url : \" + url\n-                        + \". But default values is not provided for the variable '\" + matcher.group(0)\n-                        + \"'. Hence correct url will not be resolved during the runtime \"\n-                        + \"unless url is overridden during the runtime\");\n-            }\n-        }\n-        return url;\n+    private List<ResourceConfig> extractResourceConfig(Map<String, String> attributes) {\n+        String resPath = attributes.get(APIConstants.GW_RES_PATH_PARAM);\n+        String resMethod = attributes.get(APIConstants.GW_RES_METHOD_PARAM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA3ODA4Nw=="}, "originalCommit": {"oid": "fc61c8c2b3844288e41d12750fa3ec1cfd27715f"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2Njg2NTY5OnYy", "diffSide": "RIGHT", "path": "distribution/src/main/assembly/assembly.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNDo0NTowNVrOHw-EGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwNzo1NzowNFrOHxCMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExMDU1Mw==", "bodyText": "Lets use the existing distribution name we used for microgateway runtime", "url": "https://github.com/wso2/product-microgateway/pull/1473#discussion_r521110553", "createdAt": "2020-11-11T04:45:05Z", "author": {"login": "Rajith90"}, "path": "distribution/src/main/assembly/assembly.xml", "diffHunk": "@@ -28,7 +28,7 @@\n         </fileSet>\n         <fileSet>\n             <directory>../resources/conf</directory>\n-            <outputDirectory>WSO2-Microgateway-${project.version}/resources/pilot/conf</outputDirectory>\n+            <outputDirectory>WSO2-Microgateway-${project.version}/resources/conf</outputDirectory>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc61c8c2b3844288e41d12750fa3ec1cfd27715f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTE3ODI1MA==", "bodyText": "Fixed with 2921e00", "url": "https://github.com/wso2/product-microgateway/pull/1473#discussion_r521178250", "createdAt": "2020-11-11T07:57:04Z", "author": {"login": "praminda"}, "path": "distribution/src/main/assembly/assembly.xml", "diffHunk": "@@ -28,7 +28,7 @@\n         </fileSet>\n         <fileSet>\n             <directory>../resources/conf</directory>\n-            <outputDirectory>WSO2-Microgateway-${project.version}/resources/pilot/conf</outputDirectory>\n+            <outputDirectory>WSO2-Microgateway-${project.version}/resources/conf</outputDirectory>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTExMDU1Mw=="}, "originalCommit": {"oid": "fc61c8c2b3844288e41d12750fa3ec1cfd27715f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1161, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}