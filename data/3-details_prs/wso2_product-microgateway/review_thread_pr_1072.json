{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxODI0ODg3", "number": 1072, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwOTo1MjozN1rODkA4qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMDowMTo1OFrODkA6KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDg5ODMzOnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/cmd/BuildCmd.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwOTo1MjozN1rOFwIlkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxODo0ODoyNlrOFwKeKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjY1Ng==", "bodyText": "This will not look good on the bash output. output will be printed as,\nGenerating sources...\n[DONE]", "url": "https://github.com/wso2/product-microgateway/pull/1072#discussion_r386016656", "createdAt": "2020-02-29T09:52:37Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/cmd/BuildCmd.java", "diffHunk": "@@ -124,7 +124,7 @@ public void execute() {\n             }\n             String toolkitConfigPath = CmdUtils.getMainConfigLocation();\n             init(projectName, toolkitConfigPath, deploymentConfigPath);\n-            outStream.print(\"Generating sources...\");\n+            outStream.print(\"Generating sources...\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc4ee8b78eaf460374ab0be0dc2e3d849ad1d3f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxODYzMA==", "bodyText": "Otherwise, it will look like,\nGenerating sources...micro-gw: Error...\nIMO, this does not look great either. So shall we add \"\\n\" character to beginning of the error message", "url": "https://github.com/wso2/product-microgateway/pull/1072#discussion_r386018630", "createdAt": "2020-02-29T10:29:45Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/cmd/BuildCmd.java", "diffHunk": "@@ -124,7 +124,7 @@ public void execute() {\n             }\n             String toolkitConfigPath = CmdUtils.getMainConfigLocation();\n             init(projectName, toolkitConfigPath, deploymentConfigPath);\n-            outStream.print(\"Generating sources...\");\n+            outStream.print(\"Generating sources...\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjY1Ng=="}, "originalCommit": {"oid": "1cc4ee8b78eaf460374ab0be0dc2e3d849ad1d3f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NzUyOQ==", "bodyText": "I have a fix in my mind. I'll try that later. For now lets merge with \\n", "url": "https://github.com/wso2/product-microgateway/pull/1072#discussion_r386047529", "createdAt": "2020-02-29T18:48:26Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/cmd/BuildCmd.java", "diffHunk": "@@ -124,7 +124,7 @@ public void execute() {\n             }\n             String toolkitConfigPath = CmdUtils.getMainConfigLocation();\n             init(projectName, toolkitConfigPath, deploymentConfigPath);\n-            outStream.print(\"Generating sources...\");\n+            outStream.print(\"Generating sources...\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjY1Ng=="}, "originalCommit": {"oid": "1cc4ee8b78eaf460374ab0be0dc2e3d849ad1d3f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDg5ODU1OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/mgwcodegen/MgwEndpointDTO.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQwOTo1MzoyM1rOFwIlqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo0ODozNFrOFwMGZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjY4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * sets endpointUrl and isEtcdEnabled.\n          \n          \n            \n                 * Sets endpointUrl and isEtcdEnabled.", "url": "https://github.com/wso2/product-microgateway/pull/1072#discussion_r386016683", "createdAt": "2020-02-29T09:53:23Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/mgwcodegen/MgwEndpointDTO.java", "diffHunk": "@@ -55,37 +52,25 @@ public String getEndpointUrl() {\n     }\n \n     /**\n-     * sets endpointUrl and isEtcdEnabled\n+     * sets endpointUrl and isEtcdEnabled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc4ee8b78eaf460374ab0be0dc2e3d849ad1d3f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDIxMg==", "bodyText": "added via 8b13b9b", "url": "https://github.com/wso2/product-microgateway/pull/1072#discussion_r386074212", "createdAt": "2020-03-01T03:48:34Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/mgwcodegen/MgwEndpointDTO.java", "diffHunk": "@@ -55,37 +52,25 @@ public String getEndpointUrl() {\n     }\n \n     /**\n-     * sets endpointUrl and isEtcdEnabled\n+     * sets endpointUrl and isEtcdEnabled.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNjY4Mw=="}, "originalCommit": {"oid": "1cc4ee8b78eaf460374ab0be0dc2e3d849ad1d3f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MDkwMjE3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaPath.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOVQxMDowMTo1OFrOFwIncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzo0ODoxOFrOFwMGTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNzEzNw==", "bodyText": "Shouldn't we propagate e to the top? not only the message?", "url": "https://github.com/wso2/product-microgateway/pull/1072#discussion_r386017137", "createdAt": "2020-02-29T10:01:58Z", "author": {"login": "praminda"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaPath.java", "diffHunk": "@@ -41,51 +42,87 @@ public BallerinaPath() {\n     }\n \n     @Override\n-    public BallerinaPath buildContext(PathItem item, ExtendedAPI api) throws BallerinaServiceGenException {\n+    public BallerinaPath buildContext(PathItem item, ExtendedAPI api) throws BallerinaServiceGenException,\n+            CLICompileTimeException {\n         Map.Entry<String, BallerinaOperation> entry;\n         BallerinaOperation operation;\n \n         // Swagger PathItem object doesn't provide a iterable structure for operations\n         // Therefore we have to manually check if each http verb exists\n         if (item.getGet() != null) {\n             setServersToOperationLevel(item.getGet(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getGet(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getGet(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under GET resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"get\", operation);\n             operations.add(entry);\n         }\n         if (item.getPut() != null) {\n             setServersToOperationLevel(item.getPut(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getPut(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getPut(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under PUT resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"put\", operation);\n             operations.add(entry);\n         }\n         if (item.getPost() != null) {\n             setServersToOperationLevel(item.getPost(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getPost(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getPost(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under POST resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"post\", operation);\n             operations.add(entry);\n         }\n         if (item.getDelete() != null) {\n             setServersToOperationLevel(item.getDelete(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getDelete(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getDelete(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under DELETE resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"delete\", operation);\n             operations.add(entry);\n         }\n         if (item.getOptions() != null) {\n             setServersToOperationLevel(item.getOptions(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getOptions(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getOptions(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under OPTIONS resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"options\", operation);\n             operations.add(entry);\n         }\n         if (item.getHead() != null) {\n             setServersToOperationLevel(item.getHead(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getHead(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getHead(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under HEAD resource.\\n\\t-\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1cc4ee8b78eaf460374ab0be0dc2e3d849ad1d3f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA0NTg1Mw==", "bodyText": "Yes its better to propagate the stack trace to the top. So the stack trace will be in the log file instead of the console", "url": "https://github.com/wso2/product-microgateway/pull/1072#discussion_r386045853", "createdAt": "2020-02-29T18:21:49Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaPath.java", "diffHunk": "@@ -41,51 +42,87 @@ public BallerinaPath() {\n     }\n \n     @Override\n-    public BallerinaPath buildContext(PathItem item, ExtendedAPI api) throws BallerinaServiceGenException {\n+    public BallerinaPath buildContext(PathItem item, ExtendedAPI api) throws BallerinaServiceGenException,\n+            CLICompileTimeException {\n         Map.Entry<String, BallerinaOperation> entry;\n         BallerinaOperation operation;\n \n         // Swagger PathItem object doesn't provide a iterable structure for operations\n         // Therefore we have to manually check if each http verb exists\n         if (item.getGet() != null) {\n             setServersToOperationLevel(item.getGet(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getGet(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getGet(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under GET resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"get\", operation);\n             operations.add(entry);\n         }\n         if (item.getPut() != null) {\n             setServersToOperationLevel(item.getPut(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getPut(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getPut(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under PUT resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"put\", operation);\n             operations.add(entry);\n         }\n         if (item.getPost() != null) {\n             setServersToOperationLevel(item.getPost(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getPost(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getPost(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under POST resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"post\", operation);\n             operations.add(entry);\n         }\n         if (item.getDelete() != null) {\n             setServersToOperationLevel(item.getDelete(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getDelete(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getDelete(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under DELETE resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"delete\", operation);\n             operations.add(entry);\n         }\n         if (item.getOptions() != null) {\n             setServersToOperationLevel(item.getOptions(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getOptions(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getOptions(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under OPTIONS resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"options\", operation);\n             operations.add(entry);\n         }\n         if (item.getHead() != null) {\n             setServersToOperationLevel(item.getHead(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getHead(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getHead(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under HEAD resource.\\n\\t-\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNzEzNw=="}, "originalCommit": {"oid": "1cc4ee8b78eaf460374ab0be0dc2e3d849ad1d3f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3MjA4Nw==", "bodyText": "Yes. I will fix that.", "url": "https://github.com/wso2/product-microgateway/pull/1072#discussion_r386072087", "createdAt": "2020-03-01T02:57:34Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaPath.java", "diffHunk": "@@ -41,51 +42,87 @@ public BallerinaPath() {\n     }\n \n     @Override\n-    public BallerinaPath buildContext(PathItem item, ExtendedAPI api) throws BallerinaServiceGenException {\n+    public BallerinaPath buildContext(PathItem item, ExtendedAPI api) throws BallerinaServiceGenException,\n+            CLICompileTimeException {\n         Map.Entry<String, BallerinaOperation> entry;\n         BallerinaOperation operation;\n \n         // Swagger PathItem object doesn't provide a iterable structure for operations\n         // Therefore we have to manually check if each http verb exists\n         if (item.getGet() != null) {\n             setServersToOperationLevel(item.getGet(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getGet(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getGet(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under GET resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"get\", operation);\n             operations.add(entry);\n         }\n         if (item.getPut() != null) {\n             setServersToOperationLevel(item.getPut(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getPut(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getPut(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under PUT resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"put\", operation);\n             operations.add(entry);\n         }\n         if (item.getPost() != null) {\n             setServersToOperationLevel(item.getPost(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getPost(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getPost(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under POST resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"post\", operation);\n             operations.add(entry);\n         }\n         if (item.getDelete() != null) {\n             setServersToOperationLevel(item.getDelete(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getDelete(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getDelete(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under DELETE resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"delete\", operation);\n             operations.add(entry);\n         }\n         if (item.getOptions() != null) {\n             setServersToOperationLevel(item.getOptions(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getOptions(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getOptions(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under OPTIONS resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"options\", operation);\n             operations.add(entry);\n         }\n         if (item.getHead() != null) {\n             setServersToOperationLevel(item.getHead(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getHead(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getHead(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under HEAD resource.\\n\\t-\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNzEzNw=="}, "originalCommit": {"oid": "1cc4ee8b78eaf460374ab0be0dc2e3d849ad1d3f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3NDE4OA==", "bodyText": "fixed via 8b13b9b", "url": "https://github.com/wso2/product-microgateway/pull/1072#discussion_r386074188", "createdAt": "2020-03-01T03:48:18Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-cli/src/main/java/org/wso2/apimgt/gateway/cli/model/template/service/BallerinaPath.java", "diffHunk": "@@ -41,51 +42,87 @@ public BallerinaPath() {\n     }\n \n     @Override\n-    public BallerinaPath buildContext(PathItem item, ExtendedAPI api) throws BallerinaServiceGenException {\n+    public BallerinaPath buildContext(PathItem item, ExtendedAPI api) throws BallerinaServiceGenException,\n+            CLICompileTimeException {\n         Map.Entry<String, BallerinaOperation> entry;\n         BallerinaOperation operation;\n \n         // Swagger PathItem object doesn't provide a iterable structure for operations\n         // Therefore we have to manually check if each http verb exists\n         if (item.getGet() != null) {\n             setServersToOperationLevel(item.getGet(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getGet(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getGet(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under GET resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"get\", operation);\n             operations.add(entry);\n         }\n         if (item.getPut() != null) {\n             setServersToOperationLevel(item.getPut(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getPut(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getPut(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under PUT resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"put\", operation);\n             operations.add(entry);\n         }\n         if (item.getPost() != null) {\n             setServersToOperationLevel(item.getPost(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getPost(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getPost(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under POST resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"post\", operation);\n             operations.add(entry);\n         }\n         if (item.getDelete() != null) {\n             setServersToOperationLevel(item.getDelete(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getDelete(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getDelete(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under DELETE resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"delete\", operation);\n             operations.add(entry);\n         }\n         if (item.getOptions() != null) {\n             setServersToOperationLevel(item.getOptions(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getOptions(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getOptions(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under OPTIONS resource.\\n\\t-\"\n+                        + e.getErrorMessage());\n+            }\n             entry = new AbstractMap.SimpleEntry<>(\"options\", operation);\n             operations.add(entry);\n         }\n         if (item.getHead() != null) {\n             setServersToOperationLevel(item.getHead(), item.getServers());\n-            operation = new BallerinaOperation().buildContext(item.getHead(), api);\n+            try {\n+                operation = new BallerinaOperation().buildContext(item.getHead(), api);\n+            } catch (CLICompileTimeException e) {\n+                throw new CLICompileTimeException(\"Error while parsing the information under HEAD resource.\\n\\t-\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjAxNzEzNw=="}, "originalCommit": {"oid": "1cc4ee8b78eaf460374ab0be0dc2e3d849ad1d3f"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1317, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}