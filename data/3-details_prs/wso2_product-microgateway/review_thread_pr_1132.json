{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3MTkyNDQw", "number": 1132, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NTo1OFrODnhhoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNjowMDowOFrOD68JMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzcwMzM2OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNTo1NTo1OFrOF1kq_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNTowMDo0MlrOF13roQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxOTY3OA==", "bodyText": "Use the constant for the header", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r391719678", "createdAt": "2020-03-12T15:55:58Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = \"authorization\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAzMTEzNw==", "bodyText": "fixed via 5f2b131", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r392031137", "createdAt": "2020-03-13T05:00:42Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = \"authorization\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcxOTY3OA=="}, "originalCommit": {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzczNTg3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNjowMzo1N1rOF1k_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QwNDo1Mzo1M1rOF13mSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNTAwMw==", "bodyText": "There is a method to get authorization header from the service annotation.  Is that method setting the value to the context", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r391725003", "createdAt": "2020-03-12T16:03:57Z", "author": {"login": "Rajith90"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjAyOTc2OQ==", "bodyText": "In the pre authentication filter, it is added to the invocation context. Besides that, it is required to pass the filter context to call that specific method.", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r392029769", "createdAt": "2020-03-13T04:53:53Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTcyNTAwMw=="}, "originalCommit": {"oid": "e49189a3ca6f2bfe5721512fbb41cd4c03e289a1"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTI5Mjc3OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNTo1ODo1NVrOGTA6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNTo1ODo1NVrOGTA6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5MTA4Mg==", "bodyText": "It is better to remove extra lines", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r422591082", "createdAt": "2020-05-10T05:58:55Z", "author": {"login": "Shehanir"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56b7fcef23ec648773909d8714e424b5654e919"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTI5Mzk0OnYy", "diffSide": "RIGHT", "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwNjowMDowOFrOGTA69A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjoxMzoxOVrOHS4Vmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5MTIyMA==", "bodyText": "Shall we keep an extra line at EOF", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r422591220", "createdAt": "2020-05-10T06:00:08Z", "author": {"login": "Shehanir"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = DEFAULT_AUTH_HEADER_NAME;\n+        }\n+        if (req.hasHeader(authHeader)) {\n+            string headerValue = req.getHeader(authHeader).toLowerAscii();\n+            string authScheme = (auth:AUTH_SCHEME_BASIC).toLowerAscii();\n+            if (headerValue.startsWith(authScheme)) {\n+                printDebug(KEY_AUTHN_FILTER, \"Request will be authenticated via basicAuth handler\");\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    # Authenticates the incoming request with the use of credentials passed as the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if authenticated successfully. Else, returns `false`\n+    # or the `AuthenticationError` in case of an error.\n+    public function process(http:Request req) returns @tainted boolean | http:AuthenticationError {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = DEFAULT_AUTH_HEADER_NAME;\n+        }\n+        string headerValue = req.getHeader(authHeader);\n+        string credential = headerValue.substring(5, headerValue.length()).trim();\n+        var authenticationResult = self.basicAuthProvider.authenticate(credential);\n+        if (authenticationResult is boolean) {\n+            return authenticationResult;\n+        } else {\n+            return prepareAuthenticationError(\"Failed to authenticate with basic auth handler.\", authenticationResult);\n+        }\n+    }\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f56b7fcef23ec648773909d8714e424b5654e919"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU1OTQ1MA==", "bodyText": "fix is already merged from some other PR.", "url": "https://github.com/wso2/product-microgateway/pull/1132#discussion_r489559450", "createdAt": "2020-09-16T16:13:19Z", "author": {"login": "VirajSalaka"}, "path": "components/micro-gateway-core/src/main/ballerina/src/gateway/handlers/basic_auth_handler.bal", "diffHunk": "@@ -0,0 +1,76 @@\n+// Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+//\n+// WSO2 Inc. licenses this file to you under the Apache License,\n+// Version 2.0 (the \"License\"); you may not use this file except\n+// in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+// http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing,\n+// software distributed under the License is distributed on an\n+// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+// KIND, either express or implied.  See the License for the\n+// specific language governing permissions and limitations\n+// under the License.\n+\n+import ballerina/auth;\n+import ballerina/http;\n+import ballerina/runtime;\n+import ballerina/stringutils;\n+\n+# Representation of the basic auth handler\n+#\n+# + basicAuthProvider - The reference to the basic auth provider instance\n+public type BasicAuthHandler object {\n+\n+    *http:InboundAuthHandler;\n+\n+    public BasicAuthProvider basicAuthProvider;\n+\n+    public function __init(BasicAuthProvider basicAuthProvider) {\n+        self.basicAuthProvider = basicAuthProvider;\n+    }\n+\n+    # Checks if the request can be authenticated with the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if can be authenticated. Else, returns `false`.\n+    public function canProcess(http:Request req) returns @tainted boolean {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = DEFAULT_AUTH_HEADER_NAME;\n+        }\n+        if (req.hasHeader(authHeader)) {\n+            string headerValue = req.getHeader(authHeader).toLowerAscii();\n+            string authScheme = (auth:AUTH_SCHEME_BASIC).toLowerAscii();\n+            if (headerValue.startsWith(authScheme)) {\n+                printDebug(KEY_AUTHN_FILTER, \"Request will be authenticated via basicAuth handler\");\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    # Authenticates the incoming request with the use of credentials passed as the Basic Auth header.\n+    #\n+    # + req - The `Request` instance.\n+    # + return - Returns `true` if authenticated successfully. Else, returns `false`\n+    # or the `AuthenticationError` in case of an error.\n+    public function process(http:Request req) returns @tainted boolean | http:AuthenticationError {\n+        string authHeader = runtime:getInvocationContext().attributes[AUTH_HEADER].toString().trim();\n+        //if '/apikey' resource is called, the handler is hit without the preAuthnFilter.\n+        if (stringutils:equalsIgnoreCase(\"\", authHeader)) {\n+            authHeader = DEFAULT_AUTH_HEADER_NAME;\n+        }\n+        string headerValue = req.getHeader(authHeader);\n+        string credential = headerValue.substring(5, headerValue.length()).trim();\n+        var authenticationResult = self.basicAuthProvider.authenticate(credential);\n+        if (authenticationResult is boolean) {\n+            return authenticationResult;\n+        } else {\n+            return prepareAuthenticationError(\"Failed to authenticate with basic auth handler.\", authenticationResult);\n+        }\n+    }\n+};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU5MTIyMA=="}, "originalCommit": {"oid": "f56b7fcef23ec648773909d8714e424b5654e919"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1186, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}