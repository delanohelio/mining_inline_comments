{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NTcxMjQ0", "number": 1090, "title": "filters: support internal buffering", "bodyText": "Description: Adds internal buffering support for platform filters. Filters may now utilize Envoy's internal buffering by returning the status StopIterationAndBuffer. The complete buffer will be passed on subsequent on*Data invocations until iteration is resumed. This change does not support modifying the buffer (support coming in #1100 ).\nRisk Level: Moderate\nTesting: Unit coverage, local and CI\nSigned-off-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-09-14T12:27:15Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090", "merged": true, "mergeCommit": {"oid": "8cec75cf0b83a3104880ed9d8188f9e724095b93"}, "closed": true, "closedAt": "2020-09-22T04:52:43Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdI49fwgBqjM3NjUxNDk5NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLPUVFgH2gAyNDg2NTcxMjQ0OmQxZDhmNjdmMGU1Nzk5MWQ3NjhkMzEyZTdiNTMwYmM3MmQ3OTEzOGU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "35fabed466bb75c8332d239cc72b155f5a7ea6f7", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/35fabed466bb75c8332d239cc72b155f5a7ea6f7", "committedDate": "2020-09-14T12:25:05Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "c78f205b015dc735fa156f963e8724aece7185d8", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c78f205b015dc735fa156f963e8724aece7185d8", "committedDate": "2020-09-14T20:09:53Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c78f205b015dc735fa156f963e8724aece7185d8", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c78f205b015dc735fa156f963e8724aece7185d8", "committedDate": "2020-09-14T20:09:53Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "8e1e61bd68120c066018dfb372321c8dfc72d2b3", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/8e1e61bd68120c066018dfb372321c8dfc72d2b3", "committedDate": "2020-09-14T20:31:04Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d27fec769c3ec230745b694977bf7d1a9245330", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7d27fec769c3ec230745b694977bf7d1a9245330", "committedDate": "2020-09-15T11:30:36Z", "message": "add tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "9edc583005aa42480d4f5d1488d1ced847d01f18", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9edc583005aa42480d4f5d1488d1ced847d01f18", "committedDate": "2020-09-15T19:28:27Z", "message": "wip fixing tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c78828f87bae0a10f286921de580ea9f82be4d82", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c78828f87bae0a10f286921de580ea9f82be4d82", "committedDate": "2020-09-16T01:29:42Z", "message": "fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "c885cb753a6bcc3c7865a3ef765b2f79a691c7a2", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c885cb753a6bcc3c7865a3ef765b2f79a691c7a2", "committedDate": "2020-09-16T08:50:15Z", "message": "filters: pass aggregate buffered data to platform\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTc0NTE1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#pullrequestreview-489974515", "createdAt": "2020-09-16T19:55:58Z", "commit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1NTo1OFrOHTCDFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1NTo1OFrOHTCDFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxODU0OQ==", "bodyText": "Are we planning to add an error here or will we silently fail?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r489718549", "createdAt": "2020-09-16T19:55:58Z", "author": {"login": "buildbreaker"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5OTc1NzA3", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#pullrequestreview-489975707", "createdAt": "2020-09-16T19:57:42Z", "commit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1Nzo0MlrOHTCGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1Nzo0MlrOHTCGrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxOTQ3MQ==", "bodyText": "Do we use the no buffer variant here because the data is being buffered in this filter?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r489719471", "createdAt": "2020-09-16T19:57:42Z", "author": {"login": "buildbreaker"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMDA1NzA0", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#pullrequestreview-491005704", "createdAt": "2020-09-17T21:35:38Z", "commit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozNTozOVrOHT2XMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1MzoyMlrOHT21Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NTY2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param data, the Buffer::Instance to transform.\n          \n          \n            \n             * @param data, the Buffer::Instance to copy from.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490575667", "createdAt": "2020-09-17T21:35:39Z", "author": {"login": "junr03"}, "path": "library/common/buffer/utility.h", "diffHunk": "@@ -22,6 +22,13 @@ Buffer::InstancePtr toInternalData(envoy_data data);\n  */\n envoy_data toBridgeData(Buffer::Instance&);\n \n+/**\n+ * Copy from Buffer::Instance to envoy_data.\n+ * @param data, the Buffer::Instance to transform.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NTc3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @return envoy_data, the 1:1 transformation of the Buffer::Instance param.\n          \n          \n            \n             * @return envoy_data, the 1:1 copy of the Buffer::Instance param.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490575770", "createdAt": "2020-09-17T21:35:51Z", "author": {"login": "junr03"}, "path": "library/common/buffer/utility.h", "diffHunk": "@@ -22,6 +22,13 @@ Buffer::InstancePtr toInternalData(envoy_data data);\n  */\n envoy_data toBridgeData(Buffer::Instance&);\n \n+/**\n+ * Copy from Buffer::Instance to envoy_data.\n+ * @param data, the Buffer::Instance to transform.\n+ * @return envoy_data, the 1:1 transformation of the Buffer::Instance param.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NzY1Mw==", "bodyText": "nit: The filter manager in envoy defines this as IterationState. Should we keep the same language here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490577653", "createdAt": "2020-09-17T21:40:00Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -29,6 +29,8 @@ class PlatformBridgeFilterConfig {\n \n typedef std::shared_ptr<PlatformBridgeFilterConfig> PlatformBridgeFilterConfigSharedPtr;\n \n+enum class IterationMode { Ongoing, Stopped };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3ODMwNQ==", "bodyText": "Similarly internally Ongoing/Continue?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490578305", "createdAt": "2020-09-17T21:41:39Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -29,6 +29,8 @@ class PlatformBridgeFilterConfig {\n \n typedef std::shared_ptr<PlatformBridgeFilterConfig> PlatformBridgeFilterConfigSharedPtr;\n \n+enum class IterationMode { Ongoing, Stopped };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NzY1Mw=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3OTAyNQ==", "bodyText": "maybe this will become clear later, but why is this a copy rather than a drain like before?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490579025", "createdAt": "2020-09-17T21:43:26Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MDExNQ==", "bodyText": "Seems like the place for an assertion? i.e the contract is that if the FilterDataStatus is to continue it is a programming error to have the manager's iteration_mode as anything but ongoing?\nRelated. Can we write API docs for the programming contract that these filters have?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490580115", "createdAt": "2020-09-17T21:46:00Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxODU0OQ=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MDYwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Data has already have been buffered.\n          \n          \n            \n                  // Data has already have been buffered by the PlatformBridgeFilter.\n          \n      \n    \n    \n  \n\nJust want something more explicit about whose responsibility it is to buffer", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490580606", "createdAt": "2020-09-17T21:47:09Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MTQyNA==", "bodyText": "convention is to use NOT_REACHED_GCOVR_EXCL_LINE. You can leave a comment above why the default should not be reached.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490581424", "createdAt": "2020-09-17T21:48:55Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.\n+      status = Http::FilterDataStatus::StopIterationNoBuffer;\n+    } else {\n+      // Data will be buffered on return.\n+      iteration_mode_ = IterationMode::Stopped;\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationNoBuffer:\n+    // In this context all previously buffered data can/should be dropped.\n+    if (internal_buffer) {\n+      internal_buffer->drain(internal_buffer->length());\n+    }\n+    iteration_mode_ = IterationMode::Stopped;\n+    break;\n+  default:\n+    PANIC(\"unsupported status for platform filters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MzAwMA==", "bodyText": "hmmm were we double draining before? Once in toBridge data and once here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490583000", "createdAt": "2020-09-17T21:52:39Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.\n+      status = Http::FilterDataStatus::StopIterationNoBuffer;\n+    } else {\n+      // Data will be buffered on return.\n+      iteration_mode_ = IterationMode::Stopped;\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationNoBuffer:\n+    // In this context all previously buffered data can/should be dropped.\n+    if (internal_buffer) {\n+      internal_buffer->drain(internal_buffer->length());\n+    }\n+    iteration_mode_ = IterationMode::Stopped;\n+    break;\n+  default:\n+    PANIC(\"unsupported status for platform filters\");\n+  }\n+\n   // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n   // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n   // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  data.drain(data.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MzMzNQ==", "bodyText": "^ Yeah, after going through this section in it entirety I think we need some more comments about all the combinations and why we are treating them as we are.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490583335", "createdAt": "2020-09-17T21:53:22Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxODU0OQ=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyOTI3NzY5", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#pullrequestreview-492927769", "createdAt": "2020-09-21T19:46:16Z", "commit": {"oid": "5499521eeda7f7a4f94c93470f0001609ab4bd4f"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0NjoxNlrOHVf7UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0NjoxNlrOHVf7UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNTIzMw==", "bodyText": "^ bump on this", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r492305233", "createdAt": "2020-09-21T19:46:16Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.\n+      status = Http::FilterDataStatus::StopIterationNoBuffer;\n+    } else {\n+      // Data will be buffered on return.\n+      iteration_mode_ = IterationMode::Stopped;\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationNoBuffer:\n+    // In this context all previously buffered data can/should be dropped.\n+    if (internal_buffer) {\n+      internal_buffer->drain(internal_buffer->length());\n+    }\n+    iteration_mode_ = IterationMode::Stopped;\n+    break;\n+  default:\n+    PANIC(\"unsupported status for platform filters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MTQyNA=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b085bc0c0b724f6c70aba75b3688a2b7931516c0", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b085bc0c0b724f6c70aba75b3688a2b7931516c0", "committedDate": "2020-09-22T02:44:07Z", "message": "filters: pass aggregate buffered data to platform\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ad8910931645aaf29255671481c2118a6adcafe", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7ad8910931645aaf29255671481c2118a6adcafe", "committedDate": "2020-09-22T02:44:07Z", "message": "fix test\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b63df6dafb963ce4441f3ee2a426bb51b54d5d3a", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b63df6dafb963ce4441f3ee2a426bb51b54d5d3a", "committedDate": "2020-09-22T02:44:07Z", "message": "add bidirectional support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8743a9c887c8e9fe08d94b12b30668c9c70454c2", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/8743a9c887c8e9fe08d94b12b30668c9c70454c2", "committedDate": "2020-09-22T02:44:07Z", "message": "add bidirectional coverage\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d144bfa68774815e0e95fa59ae6d4c1e6e007bb", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9d144bfa68774815e0e95fa59ae6d4c1e6e007bb", "committedDate": "2020-09-22T02:44:07Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6600c8a9f871a00b95bfcf224a9d4dd37f861c5", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b6600c8a9f871a00b95bfcf224a9d4dd37f861c5", "committedDate": "2020-09-22T02:44:07Z", "message": "fix asan\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a73cda4ab4d738a23a824e5bf3de83361f56f66c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/a73cda4ab4d738a23a824e5bf3de83361f56f66c", "committedDate": "2020-09-22T02:44:07Z", "message": "change mode to state\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "975c3d88fa60aebed71e213366e90a590b8a9f30", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/975c3d88fa60aebed71e213366e90a590b8a9f30", "committedDate": "2020-09-22T02:44:07Z", "message": "clarify some comments per feedback\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c528dd56e8a487ad9d358aef564b58e7bbe8e42", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/8c528dd56e8a487ad9d358aef564b58e7bbe8e42", "committedDate": "2020-09-22T02:44:07Z", "message": "fix typo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ffd978bcc8a927d4723ca4df52e75e902669ad8", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3ffd978bcc8a927d4723ca4df52e75e902669ad8", "committedDate": "2020-09-22T02:44:07Z", "message": "add missing release calls\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5499521eeda7f7a4f94c93470f0001609ab4bd4f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/5499521eeda7f7a4f94c93470f0001609ab4bd4f", "committedDate": "2020-09-18T22:50:40Z", "message": "add missing release calls\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "3ffd978bcc8a927d4723ca4df52e75e902669ad8", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3ffd978bcc8a927d4723ca4df52e75e902669ad8", "committedDate": "2020-09-22T02:44:07Z", "message": "add missing release calls\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1d8f67f0e57991d768d312e7b530bc72d79138e", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/d1d8f67f0e57991d768d312e7b530bc72d79138e", "committedDate": "2020-09-22T03:21:11Z", "message": "kick ci\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4026, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}