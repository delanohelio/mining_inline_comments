{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5MDIyMjEx", "number": 1071, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyMjoxNFrOEiTAfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoxOToxMFrOEiUxXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzk4NDYyOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/assertion/filter.cc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyMjoxNFrOHQGNsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozMjoyOVrOHQGf5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MTA3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n          \n          \n            \n              auto& match_status = config_->rootMatcher().matchStatus(statuses_);", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486641074", "createdAt": "2020-09-10T21:22:14Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTczMw==", "bodyText": "same elsewhere", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486645733", "createdAt": "2020-09-10T21:32:29Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MTA3NA=="}, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzk4NTcxOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/assertion/filter.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyMjo0MVrOHQGOZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyMjo0MVrOHQGOZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MTI1NA==", "bodyText": "\ud83d\udca1 might_change_status_ I see.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486641254", "createdAt": "2020-09-10T21:22:41Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzk5NTcyOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/assertion/filter.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyNTo1OFrOHQGUfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyNTo1OFrOHQGUfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjgxNA==", "bodyText": "I see, so here we would like to see if there were expectations for body and trailers that because this request ended on a headers frame would not match.\nDo you mind adding comments explaining the thought process for posterity?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486642814", "createdAt": "2020-09-10T21:25:58Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Headers do not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterHeadersStatus::StopIteration;\n   }\n \n   if (end_stream) {\n-    decoder_callbacks_->sendLocalReply(Http::Code::OK,\n-                                       \"Request Headers match configured expectations\", nullptr,\n-                                       absl::nullopt, \"\");\n-    return Http::FilterHeadersStatus::StopIteration;\n+    Buffer::OwnedImpl empty_buffer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDAyODY0OnYy", "diffSide": "RIGHT", "path": "test/common/extensions/filters/http/assertion/assertion_filter_test.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozNzoyNVrOHQGoVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozNzoyNVrOHQGoVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0Nzg5NA==", "bodyText": "We are missing tests for some of  the other combinations e.g, trailer missing in headers, trailer missing in data", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486647894", "createdAt": "2020-09-10T21:37:25Z", "author": {"login": "junr03"}, "path": "test/common/extensions/filters/http/assertion/assertion_filter_test.cc", "diffHunk": "@@ -126,6 +119,29 @@ TEST_F(AssertionFilterTest, DataNoMatch) {\n   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, filter_->decodeData(*body, true));\n }\n \n+TEST_F(AssertionFilterTest, DataMissing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDAzNDIzOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/assertion/filter.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozOToyN1rOHQGruA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozOToyN1rOHQGruA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0ODc2MA==", "bodyText": "I think I am confused about why we would catch this here rather than in the decodeData call, is it because the matcher is not completely done with knowing that data will not match until we see an end_stream == true in decodeData, or a decodeTrailers call (implying there is no more data to match?).\nSame as above could we add comments so that the thinking is clear?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486648760", "createdAt": "2020-09-10T21:39:27Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Headers do not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterHeadersStatus::StopIteration;\n   }\n \n   if (end_stream) {\n-    decoder_callbacks_->sendLocalReply(Http::Code::OK,\n-                                       \"Request Headers match configured expectations\", nullptr,\n-                                       absl::nullopt, \"\");\n-    return Http::FilterHeadersStatus::StopIteration;\n+    Buffer::OwnedImpl empty_buffer;\n+    config_->rootMatcher().onRequestBody(empty_buffer, statuses_);\n+    auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+    if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Body does not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterHeadersStatus::StopIteration;\n+    }\n+\n+    auto empty_trailers = Http::RequestTrailerMapImpl::create();\n+    config_->rootMatcher().onHttpRequestTrailers(*empty_trailers, statuses_);\n+    auto& finalMatchStatus = config_->rootMatcher().matchStatus(statuses_);\n+    if (!finalMatchStatus.matches_ && !finalMatchStatus.might_change_status_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Trailers do not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterHeadersStatus::StopIteration;\n+    }\n+    if (!finalMatchStatus.matches_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Body does not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterHeadersStatus::StopIteration;\n+    }\n   }\n \n   return Http::FilterHeadersStatus::Continue;\n }\n \n Http::FilterDataStatus AssertionFilter::decodeData(Buffer::Instance& data, bool end_stream) {\n   config_->rootMatcher().onRequestBody(data, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Body does not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterDataStatus::StopIterationNoBuffer;\n   }\n \n   if (end_stream) {\n-    decoder_callbacks_->sendLocalReply(Http::Code::OK, \"Request Body match configured expectations\",\n-                                       nullptr, absl::nullopt, \"\");\n-    return Http::FilterDataStatus::StopIterationNoBuffer;\n+    auto empty_trailers = Http::RequestTrailerMapImpl::create();\n+    config_->rootMatcher().onHttpRequestTrailers(*empty_trailers, statuses_);\n+    auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+    if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Trailers do not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterDataStatus::StopIterationNoBuffer;\n+    }\n+    if (!matchStatus.matches_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Body does not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterDataStatus::StopIterationNoBuffer;\n+    }\n   }\n-\n   return Http::FilterDataStatus::Continue;\n }\n \n Http::FilterTrailersStatus AssertionFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n   config_->rootMatcher().onHttpRequestTrailers(trailers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Trailers do not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterTrailersStatus::StopIteration;\n   }\n-\n-  decoder_callbacks_->sendLocalReply(\n-      Http::Code::OK, \"Request Trailers match configured expectations\", nullptr, absl::nullopt, \"\");\n-  return Http::FilterTrailersStatus::StopIteration;\n+  if (!matchStatus.matches_) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDI3MjcxOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/assertion/filter.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoxODo0NVrOHQI5qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoxODo0NVrOHQI5qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NTA5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Check of there are unsatisfied assertions about stream trailers.\n          \n          \n            \n                // Check if there are unsatisfied assertions about stream trailers.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486685098", "createdAt": "2020-09-10T23:18:45Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -28,25 +33,27 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n-  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+  auto& match_status = config_->rootMatcher().matchStatus(statuses_);\n+  if (!match_status.matches_ && !match_status.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Headers do not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterHeadersStatus::StopIteration;\n   }\n \n   if (end_stream) {\n+    // Check if there are unsatisfied assertions about stream data.\n     Buffer::OwnedImpl empty_buffer;\n     config_->rootMatcher().onRequestBody(empty_buffer, statuses_);\n-    auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n-    if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+    auto& match_status = config_->rootMatcher().matchStatus(statuses_);\n+    if (!match_status.matches_ && !match_status.might_change_status_) {\n       decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                          \"Request Body does not match configured expectations\",\n                                          nullptr, absl::nullopt, \"\");\n       return Http::FilterHeadersStatus::StopIteration;\n     }\n \n+    // Check of there are unsatisfied assertions about stream trailers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440d2c5f91888d07ed1db3252cbb35068ab0f051"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDI3MzU2OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/assertion/filter.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoxOToxMFrOHQI6KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoxOToxMFrOHQI6KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NTIyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Check of there are unsatisfied assertions about stream trailers.\n          \n          \n            \n                // Check if there are unsatisfied assertions about stream trailers.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486685224", "createdAt": "2020-09-10T23:19:10Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -69,25 +80,29 @@ Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap&\n \n Http::FilterDataStatus AssertionFilter::decodeData(Buffer::Instance& data, bool end_stream) {\n   config_->rootMatcher().onRequestBody(data, statuses_);\n-  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n-  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+  auto& match_status = config_->rootMatcher().matchStatus(statuses_);\n+  if (!match_status.matches_ && !match_status.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Body does not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterDataStatus::StopIterationNoBuffer;\n   }\n \n   if (end_stream) {\n+    // Check of there are unsatisfied assertions about stream trailers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440d2c5f91888d07ed1db3252cbb35068ab0f051"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 602, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}