{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1Nzg4NjIy", "number": 1018, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToyNzozOFrOEXDxQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToyNzozOFrOEXDxQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjE0NDY2OnYy", "diffSide": "RIGHT", "path": "library/common/engine.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwNToyNzozOFrOG-o2rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjoyMDo1M1rOG-_esQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzNDI1Mw==", "bodyText": "Can we document this inline somewhere? We're now relying on implementation details of how destructors are called, which is very fragile. Tests would be ideal, but I understand this is probably quite difficult to test, so we should at least document it", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1018#discussion_r468334253", "createdAt": "2020-08-11T05:27:38Z", "author": {"login": "rebello95"}, "path": "library/common/engine.h", "diffHunk": "@@ -48,12 +48,12 @@ class Engine {\n   envoy_engine_callbacks callbacks_;\n   Thread::MutexBasicLockable mutex_;\n   Thread::CondVar cv_;\n-  std::thread main_thread_;\n   std::unique_ptr<Http::Dispatcher> http_dispatcher_;\n   std::unique_ptr<MobileMainCommon> main_common_ GUARDED_BY(mutex_);\n   Server::Instance* server_{};\n   Server::ServerLifecycleNotifier::HandlePtr postinit_callback_handler_;\n   Event::Dispatcher* event_dispatcher_;\n+  std::thread main_thread_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5997a22e8c52a90f40a89cce769a4277a4c502b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcwNDk0NQ==", "bodyText": "We're now relying on implementation details of how destructors are called, which is very fragile\n\nFor better or worse this is a common c++ pattern.\n\nTests would be ideal\n\nAs always agreed. I had the idea for this crash \"fix\" but I am not entirely sure that the situation described here with instructions on the main_thread being executed after destruction of other objects is the actual problem. I tried writing repro tests but was not able to set it up. I have a related PR with engine tests coming up imminently that repros a different trace. I can try an massage that to repro this as well.\n\nCan we document this inline somewhere\n\nAbsolutely, this should be in the comments. Updated.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1018#discussion_r468704945", "createdAt": "2020-08-11T16:20:53Z", "author": {"login": "junr03"}, "path": "library/common/engine.h", "diffHunk": "@@ -48,12 +48,12 @@ class Engine {\n   envoy_engine_callbacks callbacks_;\n   Thread::MutexBasicLockable mutex_;\n   Thread::CondVar cv_;\n-  std::thread main_thread_;\n   std::unique_ptr<Http::Dispatcher> http_dispatcher_;\n   std::unique_ptr<MobileMainCommon> main_common_ GUARDED_BY(mutex_);\n   Server::Instance* server_{};\n   Server::ServerLifecycleNotifier::HandlePtr postinit_callback_handler_;\n   Event::Dispatcher* event_dispatcher_;\n+  std::thread main_thread_;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMzNDI1Mw=="}, "originalCommit": {"oid": "b5997a22e8c52a90f40a89cce769a4277a4c502b"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 739, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}