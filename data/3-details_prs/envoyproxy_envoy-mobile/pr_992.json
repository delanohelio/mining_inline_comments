{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NjYyMzk2", "number": 992, "title": "stats: introduce stats client", "bodyText": "Description: Introduces a StatsClient capable of giving out Counters that, when incremented, emit stats from Envoy's internal stats engine. Also refactors the top-level platform Engine interface to make both the StreamClient and the StatsClient available.\nRisk Level: Low\nTesting: Pending\nCo-authored-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-07-30T23:11:08Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992", "merged": true, "mergeCommit": {"oid": "b9a4334916159eebe68a544690a1eb9e4023dbc4"}, "closed": true, "closedAt": "2020-08-11T17:50:24Z", "author": {"login": "jingwei99"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc6IylfgBqjM2MDYyOTYwMTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc96IgjgFqTQ2NTI3MjY2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7202a8d70980d11464932f8d2db46dacda0d121d", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7202a8d70980d11464932f8d2db46dacda0d121d", "committedDate": "2020-07-30T23:09:58Z", "message": "update interface"}, "afterCommit": {"oid": "37370d5e34ef6dd83cc18ad32538897f2ea399e7", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/37370d5e34ef6dd83cc18ad32538897f2ea399e7", "committedDate": "2020-07-31T00:07:49Z", "message": "update interface\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODQxNzU1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-458841755", "createdAt": "2020-07-31T00:08:24Z", "commit": {"oid": "7202a8d70980d11464932f8d2db46dacda0d121d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowODo1MVrOG534PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowOToyM1rOG5348g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzUzMw==", "bodyText": "minor typo s/elemenets/elements/", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r463337533", "createdAt": "2020-07-31T00:08:51Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,18 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elemenets, uint64_t count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37370d5e34ef6dd83cc18ad32538897f2ea399e7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzcxNA==", "bodyText": "let's just make the prefix be \"client\" I think", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r463337714", "createdAt": "2020-07-31T00:09:23Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,18 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elemenets, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elemenets, count]() -> void {\n+      std::string client_stats = \"client_stats\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37370d5e34ef6dd83cc18ad32538897f2ea399e7"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NTAwMzky", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-459500392", "createdAt": "2020-07-31T22:03:38Z", "commit": {"oid": "4a76daec86e591dc98a00e17c23d330123741282"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7d99afec04544315bae76e7b5ad83e841a0dc6d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c7d99afec04544315bae76e7b5ad83e841a0dc6d", "committedDate": "2020-08-04T10:30:40Z", "message": "wip\n\nCo-authored-by: Jingwei <57155915+jingwei99@users.noreply.github.com>\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c3c0cd0eaed242db677dcc777838654cc38d802", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/8c3c0cd0eaed242db677dcc777838654cc38d802", "committedDate": "2020-08-04T10:30:40Z", "message": "update\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b804494f898c0656d74822c28e8866ce236b37b1", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b804494f898c0656d74822c28e8866ce236b37b1", "committedDate": "2020-08-04T10:30:40Z", "message": "update interfaces and implementations\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fab1505856a7341f6a2c6a37c5624dd95bba70a2", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/fab1505856a7341f6a2c6a37c5624dd95bba70a2", "committedDate": "2020-08-04T10:30:40Z", "message": "more files\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0213f89234c38e989ce20ffadd644d7f729ebef1", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/0213f89234c38e989ce20ffadd644d7f729ebef1", "committedDate": "2020-08-04T10:30:40Z", "message": "update interface\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b54bd6ae2b7c72644f37aa9f7dff9242df14604d", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b54bd6ae2b7c72644f37aa9f7dff9242df14604d", "committedDate": "2020-08-04T10:30:40Z", "message": "comments\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c6cc1130639c57c4ab74efb96d694b5f0dd032", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/09c6cc1130639c57c4ab74efb96d694b5f0dd032", "committedDate": "2020-08-04T10:30:41Z", "message": "wip updating Swift interfaces\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ac676ded9c3641d84153af242d97ea87cb146ec", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/4ac676ded9c3641d84153af242d97ea87cb146ec", "committedDate": "2020-08-04T10:31:30Z", "message": "cleanup\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4801a0b49c17c9f4e3faed9ebf9dc92cef07ab62", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/4801a0b49c17c9f4e3faed9ebf9dc92cef07ab62", "committedDate": "2020-08-04T10:31:30Z", "message": "add strong type of element for android\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f71fe512e505ae8ba15572aeb9e20d7290b3eda", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7f71fe512e505ae8ba15572aeb9e20d7290b3eda", "committedDate": "2020-08-04T10:31:30Z", "message": "doc for Element\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "843175a70bc94e84d5c39d87bf434625d9cbe836", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/843175a70bc94e84d5c39d87bf434625d9cbe836", "committedDate": "2020-08-04T10:33:55Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6cc46a8448e4956aa6445850762c71cd9d5fd11f", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6cc46a8448e4956aa6445850762c71cd9d5fd11f", "committedDate": "2020-08-03T20:42:43Z", "message": "doc for Element\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}, "afterCommit": {"oid": "843175a70bc94e84d5c39d87bf434625d9cbe836", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/843175a70bc94e84d5c39d87bf434625d9cbe836", "committedDate": "2020-08-04T10:33:55Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d363fbd7c38fa2f67b9f5741f91fdd655a6e670", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7d363fbd7c38fa2f67b9f5741f91fdd655a6e670", "committedDate": "2020-08-04T20:23:49Z", "message": "add Swift Element\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ded59b7f4703d4031203fad6e91e6c52a033130", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3ded59b7f4703d4031203fad6e91e6c52a033130", "committedDate": "2020-08-05T16:11:39Z", "message": "edit after rebase, forqak android\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0a17d6b1d57ef4d65640cd62d23f33e5cfb6910", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c0a17d6b1d57ef4d65640cd62d23f33e5cfb6910", "committedDate": "2020-08-04T20:36:37Z", "message": "Merge branch 'jh-ms/stats-poc' of github.com:lyft/envoy-mobile into jh-ms/stats-poc"}, "afterCommit": {"oid": "3ded59b7f4703d4031203fad6e91e6c52a033130", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3ded59b7f4703d4031203fad6e91e6c52a033130", "committedDate": "2020-08-05T16:11:39Z", "message": "edit after rebase, forqak android\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d8aa5a5e01b142eccf4decadc819b0524162196", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/2d8aa5a5e01b142eccf4decadc819b0524162196", "committedDate": "2020-08-06T01:25:26Z", "message": "fix ci (mostly) for android\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "356390c9fe2f34b336cc2aaeb0f66d3b334fed4d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/356390c9fe2f34b336cc2aaeb0f66d3b334fed4d", "committedDate": "2020-08-06T11:28:03Z", "message": "fix up swift Element\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNzEyMzkz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-462712393", "createdAt": "2020-08-06T17:11:23Z", "commit": {"oid": "356390c9fe2f34b336cc2aaeb0f66d3b334fed4d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoxMToyM1rOG88mLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoxMToyM1rOG88mLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2MDU1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                engine.getStreamClient().newStreamPrototype()\n          \n          \n            \n                    .setOnResponseHeaders((responseHeaders, endStream) -> {\n          \n          \n            \n                engine.getStreamClient()\n          \n          \n            \n                    .newStreamPrototype()\n          \n          \n            \n                    .setOnResponseHeaders((responseHeaders, endStream) -> {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466560558", "createdAt": "2020-08-06T17:11:23Z", "author": {"login": "buildbreaker"}, "path": "examples/java/hello_world/MainActivity.java", "diffHunk": "@@ -76,7 +76,7 @@ private void makeRequest() {\n     RequestHeaders requestHeaders = new RequestHeadersBuilder(RequestMethod.GET, REQUEST_SCHEME,\n                                                               REQUEST_AUTHORITY, REQUEST_PATH)\n                                         .build();\n-    streamClient.newStreamPrototype()\n+    engine.getStreamClient().newStreamPrototype()\n         .setOnResponseHeaders((responseHeaders, endStream) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356390c9fe2f34b336cc2aaeb0f66d3b334fed4d"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab5ad2178414c6b512a2fa56f61db73d618ecba", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/8ab5ad2178414c6b512a2fa56f61db73d618ecba", "committedDate": "2020-08-06T17:48:17Z", "message": "formatting/lint\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de2891007fedd03e8d099e404573298d13371ad0", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/de2891007fedd03e8d099e404573298d13371ad0", "committedDate": "2020-08-06T18:35:01Z", "message": "fix iOS example apps\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/352fd28fee9f674023da716efcbe0dcea8fdc58c", "committedDate": "2020-08-06T19:36:50Z", "message": "fix test\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODM5MzI0", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-462839324", "createdAt": "2020-08-06T20:07:15Z", "commit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "state": "COMMENTED", "comments": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowNzoxNVrOG9Cf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoyMzowNlrOG9C-Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzI0Nw==", "bodyText": "I think it'd make sense to group these into a stats subdirectory, similarly to grpc and filters", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466657247", "createdAt": "2020-08-06T20:07:15Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/BUILD", "diffHunk": "@@ -36,7 +36,11 @@ kt_android_library(\n envoy_mobile_kt_library(\n     name = \"envoy_interfaces_lib\",\n     srcs = glob([\n-        \"EnvoyClient.kt\",\n+        \"Counter.kt\",\n+        \"Element.kt\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1Nzk4MQ==", "bodyText": "Should we provide a default value of 1?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466657981", "createdAt": "2020-08-06T20:08:51Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Counter.kt", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * A stat.\n+ *\n+ * Current the supported stat type is counter, and it can increment.\n+ */\n+class Counter internal constructor(\n+  private val envoyEngine: WeakReference<EnvoyEngine>,\n+  private val elements: List<Element>\n+) {\n+\n+  /**\n+   * Increment the counter by the given count.\n+   */\n+  fun increment(count: Int) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODE4MA==", "bodyText": "I assume we will create different types for non-Counter stats, so maybe this docstring can be updated to simply describe the Counter?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466658180", "createdAt": "2020-08-06T20:09:20Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Counter.kt", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * A stat.\n+ *\n+ * Current the supported stat type is counter, and it can increment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODU0MA==", "bodyText": "Can you document what the intended value is supposed to be (given the regex below)?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466658540", "createdAt": "2020-08-06T20:10:01Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Element.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.util.regex.Pattern\n+\n+/**\n+ * Element for stats.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODc0Mw==", "bodyText": "would it make sense to simply name these streamClient() and statsClient()?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466658743", "createdAt": "2020-08-06T20:10:24Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Engine.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.envoyproxy.envoymobile\n+\n+/**\n+ * The engine for downstream clients to integrate Envoy Mobile\n+ */\n+interface Engine {\n+\n+  /**\n+   *  @return a {@link StreamClient} instance\n+   */\n+  fun getStreamClient(): StreamClient\n+\n+  /**\n+   *  @return a {@link StatsClient} instance\n+   */\n+  fun getStatsClient(): StatsClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTE3NQ==", "bodyText": "Similar suggestion here (counter() versus getCounter()?)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466659175", "createdAt": "2020-08-06T20:11:20Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClient.kt", "diffHunk": "@@ -0,0 +1,12 @@\n+package io.envoyproxy.envoymobile\n+\n+/**\n+ * Client used to record timeseries metrics.\n+ */\n+interface StatsClient {\n+\n+  /**\n+   * @return A counter based on the joined elements.\n+   */\n+  fun getCounter(vararg elements: Element): Counter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTY4NA==", "bodyText": "Same comments apply to iOS re: grouping and naming", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466659684", "createdAt": "2020-08-06T20:12:28Z", "author": {"login": "rebello95"}, "path": "library/swift/src/BUILD", "diffHunk": "@@ -5,7 +5,11 @@ licenses([\"notice\"])  # Apache 2\n swift_static_framework(\n     name = \"ios_framework\",\n     srcs = glob([\n-        \"EnvoyClient.swift\",\n+        \"Counter.swift\",\n+        \"Element.swift\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTgxNw==", "bodyText": "Same docstrings as Android?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466659817", "createdAt": "2020-08-06T20:12:44Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDAzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              internal init(elements: [Element], engine: EnvoyEngine) {\n          \n          \n            \n              init(elements: [Element], engine: EnvoyEngine) {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466660038", "createdAt": "2020-08-06T20:13:10Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  internal init(elements: [Element], engine: EnvoyEngine) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDIwMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                self.series = elements.map{ $0.description }.joined(separator: \".\")\n          \n          \n            \n                self.series = elements.map { $0.description }.joined(separator: \".\")", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466660201", "createdAt": "2020-08-06T20:13:30Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  internal init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map{ $0.description }.joined(separator: \".\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDYyNg==", "bodyText": "Why not make value internal? I think using description is fragile since it could break if someone deleted the explicit description override (yet would still compile)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466660626", "createdAt": "2020-08-06T20:14:21Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Element.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+import Foundation\n+\n+private let kPattern = \"^[A-Za-z_]+$\"\n+\n+/// Element represents one dot-delimited component of a timeseries name.\n+@objc\n+public final class Element: NSObject, ExpressibleByStringLiteral {\n+  private let value: String\n+\n+  public init(stringLiteral value: String) {\n+    guard value.range(of: kPattern, options: .regularExpression) != nil else {\n+      preconditionFailure(\"Element values must conform to the regex /^[A-Za-z_]+$/.\")\n+    }\n+    self.value = value\n+  }\n+\n+  // CustomStringConvertible\n+  public override var description: String { return value }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDgxNA==", "bodyText": "This needs to be public and is missing docstrings", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466660814", "createdAt": "2020-08-06T20:14:43Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  internal init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map{ $0.description }.joined(separator: \".\")\n+    self.engine = engine\n+    super.init()\n+  }\n+\n+  func increment(count: Int) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTMyMQ==", "bodyText": "Why are we exposing an Int publicly but requiring an unsigned integer internally? Shouldn't these be the same (in which case we could avoid a cast)?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466661321", "createdAt": "2020-08-06T20:15:49Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  internal init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map{ $0.description }.joined(separator: \".\")\n+    self.engine = engine\n+    super.init()\n+  }\n+\n+  func increment(count: Int) {\n+    guard let engine = self.engine else {\n+      return\n+    }\n+\n+    engine.recordCounter(self.series, count: numericCast(count))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTQ4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @objc\n          \n          \n            \n            @objcMembers", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466661483", "createdAt": "2020-08-06T20:16:07Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTY3OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @objc\n          \n          \n            \n            @objcMembers", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466661679", "createdAt": "2020-08-06T20:16:29Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Element.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+import Foundation\n+\n+private let kPattern = \"^[A-Za-z_]+$\"\n+\n+/// Element represents one dot-delimited component of a timeseries name.\n+@objc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MjAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  preconditionFailure(\"Element values must conform to the regex /^[A-Za-z_]+$/.\")\n          \n          \n            \n                  preconditionFailure(\"Element values must conform to the regex '\\(kPattern)'\")", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466662004", "createdAt": "2020-08-06T20:17:05Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Element.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+import Foundation\n+\n+private let kPattern = \"^[A-Za-z_]+$\"\n+\n+/// Element represents one dot-delimited component of a timeseries name.\n+@objc\n+public final class Element: NSObject, ExpressibleByStringLiteral {\n+  private let value: String\n+\n+  public init(stringLiteral value: String) {\n+    guard value.range(of: kPattern, options: .regularExpression) != nil else {\n+      preconditionFailure(\"Element values must conform to the regex /^[A-Za-z_]+$/.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2Mjk3OQ==", "bodyText": "I'd use a constant here so you don't have to replicate the regex twice (and so they don't deviate over time)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466662979", "createdAt": "2020-08-06T20:19:03Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Element.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.util.regex.Pattern\n+\n+/**\n+ * Element for stats.\n+ */\n+class Element(val element: String) {\n+  init {\n+    if (!Pattern.compile(\"^[A-Za-z_]+\\$\").matcher(element).matches()) {\n+      throw IllegalArgumentException(\n+        \"Element values must conform to the regex /^[A-Za-z_]+$/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MzMxNA==", "bodyText": "missing - parameter elements", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466663314", "createdAt": "2020-08-06T20:19:47Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StatsClient.swift", "diffHunk": "@@ -0,0 +1,8 @@\n+import Foundation\n+\n+/// Client used to record timeseries metrics.\n+@objc\n+public protocol StatsClient: AnyObject {\n+  /// - returns: A Counter based on the joined elements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MzUyNQ==", "bodyText": "This shouldn't be necessary since internal types don't need to be exposed to public objc consumers", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466663525", "createdAt": "2020-08-06T20:20:12Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StatsClientImpl.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// Envoy implementation of StatsClient.\n+@objcMembers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NDAwMA==", "bodyText": "Can we add some tests?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466664000", "createdAt": "2020-08-06T20:21:04Z", "author": {"login": "rebello95"}, "path": "library/swift/src/mocks/MockEnvoyEngine.swift", "diffHunk": "@@ -7,6 +7,8 @@ final class MockEnvoyEngine: NSObject {\n   static var onRunWithConfig: ((_ config: EnvoyConfiguration, _ logLevel: String?) -> Void)?\n   /// Closure called when `run(withConfigYAML:)` is called.\n   static var onRunWithYAML: ((_ configYAML: String, _ logLevel: String?) -> Void)?\n+  /// Closure called when `recordCounter(_:count:)` is called.\n+  static var onRecordCounter: ((_ elements: String, _ count: UInt) -> Void)?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NDgxMA==", "bodyText": "Same here regarding objc", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466664810", "createdAt": "2020-08-06T20:22:39Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StreamClientImpl.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// Envoy implementation of StreamClient.\n+@objcMembers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTAxOA==", "bodyText": "iOS has a strong ref below, we should keep them consistent (I think a strong ref is what you want here)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466665018", "createdAt": "2020-08-06T20:23:06Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * Envoy implementation of `StatsClient`.\n+ */\n+internal class StatsClientImpl constructor(\n+  internal val engine: EnvoyEngine\n+) : StatsClient {\n+\n+  override fun getCounter(vararg elements: Element): Counter {\n+    return Counter(WeakReference(engine), elements.asList())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODYwNzU1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-462860755", "createdAt": "2020-08-06T20:40:30Z", "commit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0MDozMFrOG9DgCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTowMToxM1rOG9EIIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MzY3Mg==", "bodyText": "I'd prefer having a more restrictive rule so that people have to think before their application level stats get emitted.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466673672", "createdAt": "2020-08-06T20:40:30Z", "author": {"login": "junr03"}, "path": "library/common/config_template.cc", "diffHunk": "@@ -204,6 +204,9 @@ stats_flush_interval: {{ stats_flush_interval_seconds }}s\n         - safe_regex:\n             google_re2: {}\n             regex: '^http.dispatcher.*'\n+        - safe_regex:\n+            google_re2: {}\n+            regex: '^client.*'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NDM4OA==", "bodyText": "this should be a constant, or CONTRUCT_ON_FIRST_USE", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466674388", "createdAt": "2020-08-06T20:41:58Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NDc0Nw==", "bodyText": "I believe you don't need to explicitly create a string view for passing into a function that expects one", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466674747", "createdAt": "2020-08-06T20:42:43Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NTEyOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void recordCounter(std::string elements, uint64_t count);\n          \n          \n            \n              void incCounter(std::string elements, uint64_t count);", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466675128", "createdAt": "2020-08-06T20:43:31Z", "author": {"login": "junr03"}, "path": "library/common/engine.h", "diffHunk": "@@ -35,6 +35,11 @@ class Engine {\n    */\n   Http::Dispatcher& httpDispatcher();\n \n+  /**\n+   * Increment a counter with a given string of elements and by the given count.\n+   */\n+  void recordCounter(std::string elements, uint64_t count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NTkwNw==", "bodyText": "same everywhere else. If we are incrementing a counter we should say that in the function's name.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466675907", "createdAt": "2020-08-06T20:44:58Z", "author": {"login": "junr03"}, "path": "library/common/engine.h", "diffHunk": "@@ -35,6 +35,11 @@ class Engine {\n    */\n   Http::Dispatcher& httpDispatcher();\n \n+  /**\n+   * Increment a counter with a given string of elements and by the given count.\n+   */\n+  void recordCounter(std::string elements, uint64_t count);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NTEyOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTIwNw==", "bodyText": "big comment: This is an expensive way to create stats and reserved for dynamic stats created in the hot path in Envoy. I see how we still want to expose this for some application level stats that might be dynamic, but I think we should also think about static stats known at compile time (like crash_count, etc) -- which I think will compose a good chunk of what we want -- that could be statically initialized based on config.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466679207", "createdAt": "2020-08-06T20:51:31Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};\n+      absl::string_view dynamic_elements{elements};\n+      Stats::Utility::counterFromElements(server_->serverFactoryContext().scope(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MjA0OQ==", "bodyText": "I believe the weak reference is intended. We would not want to have stats spread through the application to necessarily hold the engine alive, right?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466682049", "createdAt": "2020-08-06T20:57:17Z", "author": {"login": "junr03"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * Envoy implementation of `StatsClient`.\n+ */\n+internal class StatsClientImpl constructor(\n+  internal val engine: EnvoyEngine\n+) : StatsClient {\n+\n+  override fun getCounter(vararg elements: Element): Counter {\n+    return Counter(WeakReference(engine), elements.asList())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTAxOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MjY3MQ==", "bodyText": "https://github.com/envoyproxy/envoy/blob/master/source/docs/stats.md#dynamic-stat-tokens", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466682671", "createdAt": "2020-08-06T20:58:38Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};\n+      absl::string_view dynamic_elements{elements};\n+      Stats::Utility::counterFromElements(server_->serverFactoryContext().scope(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTIwNw=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MzkzOQ==", "bodyText": "Can we cover this in tests?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466683939", "createdAt": "2020-08-06T21:01:13Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d977737d9b2abb880326c8b1bfcb336792b92b36", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/d977737d9b2abb880326c8b1bfcb336792b92b36", "committedDate": "2020-08-07T22:52:33Z", "message": "comments\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8f26aee08337f092ed1a67561dd1723d7aeab3", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/ec8f26aee08337f092ed1a67561dd1723d7aeab3", "committedDate": "2020-08-08T00:01:39Z", "message": "Merge branch 'main' into jh-ms/stats-poc\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bad842212177211e4a893c7b5dc638532c64e09d", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/bad842212177211e4a893c7b5dc638532c64e09d", "committedDate": "2020-08-08T00:04:57Z", "message": "examples\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8d0bbbc59edbb5d9b347e3f8cc3554370061de0", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/a8d0bbbc59edbb5d9b347e3f8cc3554370061de0", "committedDate": "2020-08-08T00:36:29Z", "message": "lint\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75dbebd82e5703f3f8bbc45b9398a8d77a38735", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/e75dbebd82e5703f3f8bbc45b9398a8d77a38735", "committedDate": "2020-08-10T11:16:08Z", "message": "add Swift tests for StatsClientImpl\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3962e9655fb36f70edc1dee63c503f32160e8052", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3962e9655fb36f70edc1dee63c503f32160e8052", "committedDate": "2020-08-10T19:39:05Z", "message": "swiftlint fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "827d6930b01ebc47034d94bbb6fe446394db8f30", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/827d6930b01ebc47034d94bbb6fe446394db8f30", "committedDate": "2020-08-10T19:41:56Z", "message": "fix swift example app\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a216a5a51411410a2881b17b7781e43c3845c9f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/0a216a5a51411410a2881b17b7781e43c3845c9f", "committedDate": "2020-08-10T20:16:23Z", "message": "update and align docstrings and comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e89dfa0c347b464f3e5651cf2533d2839e62c841", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/e89dfa0c347b464f3e5651cf2533d2839e62c841", "committedDate": "2020-08-10T20:30:11Z", "message": "rename stat directory to stats\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fdaaca2b394686e5ca415abcfd225cc6ced3276", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9fdaaca2b394686e5ca415abcfd225cc6ced3276", "committedDate": "2020-08-10T20:35:34Z", "message": "don't override CustomStringConvertible\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3b575b3cc8d9426684ace77a62cdb292d64b933", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/d3b575b3cc8d9426684ace77a62cdb292d64b933", "committedDate": "2020-08-10T20:58:43Z", "message": "couple more updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b623969bc5f492c75195e861a3021563c9ae1477", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b623969bc5f492c75195e861a3021563c9ae1477", "committedDate": "2020-08-10T21:36:58Z", "message": "make clients be properties on swift Engine\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6ae7be32f03c919e8c0fd77a20449d87a55f5195", "committedDate": "2020-08-10T21:45:12Z", "message": "add experimental callout\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjExNDkz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-464611493", "createdAt": "2020-08-10T21:48:34Z", "commit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0ODozNFrOG-g95Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo0ODozNFrOG-g95Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNTAyOQ==", "bodyText": "@goaway don't forget to add this ticket", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468205029", "createdAt": "2020-08-10T21:48:34Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MzkzOQ=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjE2OTk5", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-464616999", "createdAt": "2020-08-10T21:59:07Z", "commit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1OTowN1rOG-hQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1OTowN1rOG-hQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwOTY4Mw==", "bodyText": "No non-pod statics (static init fiasco). Moreover what you really want here since this string is known at compile-time is to save a StatName for \"client\" using either a StatNamePool or StatNameManagedStorage. You want to do that in a context object that is created once at process startup and then re-used. Then you have no thread contention issues.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468209683", "createdAt": "2020-08-10T21:59:07Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      static const std::string client = \"client\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NjM4NjI0", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-464638624", "createdAt": "2020-08-10T22:48:42Z", "commit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo0ODo0MlrOG-iW1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1Njo1NlrOG-ihdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNzc5OA==", "bodyText": "Shouldn't these be in stats/ which is captured below with globbing?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468227798", "createdAt": "2020-08-10T22:48:42Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/BUILD", "diffHunk": "@@ -52,15 +54,18 @@ envoy_mobile_kt_library(\n         \"ResponseTrailersBuilder.kt\",\n         \"RetryPolicy.kt\",\n         \"RetryPolicyMapper.kt\",\n+        \"StatsClient.kt\",\n+        \"StatsClientImpl.kt\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODI5Nw==", "bodyText": "Was there a resolution here? Looks like the weak ref is still being passed from this line", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468228297", "createdAt": "2020-08-10T22:50:11Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * Envoy implementation of `StatsClient`.\n+ */\n+internal class StatsClientImpl constructor(\n+  internal val engine: EnvoyEngine\n+) : StatsClient {\n+\n+  override fun getCounter(vararg elements: Element): Counter {\n+    return Counter(WeakReference(engine), elements.asList())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTAxOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODY4OA==", "bodyText": "Regex is hardcoded 3 places here. Can we use a constant instead so we don't accidentally fail to change one of the usages in the future?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468228688", "createdAt": "2020-08-10T22:51:26Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/stats/Element.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.util.regex.Pattern\n+\n+/**\n+ * Element represents one dot-delimited component of a time series name.\n+ *\n+ * Element values must conform to the regex /^[A-Za-z_]+$/.\n+ */\n+class Element(val element: String) {\n+  init {\n+    if (!Pattern.compile(\"^[A-Za-z_]+\\$\").matcher(element).matches()) {\n+      throw IllegalArgumentException(\n+        \"Element values must conform to the regex /^[A-Za-z_]+$/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODgxNg==", "bodyText": "Same here regarding living in stats/", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468228816", "createdAt": "2020-08-10T22:51:48Z", "author": {"login": "rebello95"}, "path": "library/swift/src/BUILD", "diffHunk": "@@ -21,15 +23,18 @@ swift_static_framework(\n         \"ResponseTrailersBuilder.swift\",\n         \"RetryPolicy.swift\",\n         \"RetryPolicyMapper.swift\",\n+        \"StatsClient.swift\",\n+        \"StatsClientImpl.swift\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODk3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// - parameter elements: Elements to identify a counter\n          \n          \n            \n              /// - returns: A Counter based on the joined elements.\n          \n          \n            \n              /// - parameter elements: Elements to identify a counter\n          \n          \n            \n              ///\n          \n          \n            \n              /// - returns: A Counter based on the joined elements.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468228975", "createdAt": "2020-08-10T22:52:20Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StatsClient.swift", "diffHunk": "@@ -0,0 +1,12 @@\n+import Foundation\n+\n+/// Client used to record time series metrics.\n+///\n+/// Note: this an experimental interface and is subject to change. The implementation has not been\n+/// optimized, and there may be performance implications in production usage.\n+@objc\n+public protocol StatsClient: AnyObject {\n+  /// - parameter elements: Elements to identify a counter\n+  /// - returns: A Counter based on the joined elements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTI4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class Counter: NSObject {\n          \n          \n            \n            public final class Counter: NSObject {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468229289", "createdAt": "2020-08-10T22:53:28Z", "author": {"login": "rebello95"}, "path": "library/swift/src/stats/Counter.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// A time series counter.\n+@objcMembers\n+public class Counter: NSObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTUxNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// Increment the counter by the given count.\n          \n          \n            \n              /// Increment the counter by the given count.\n          \n          \n            \n              ///\n          \n          \n            \n              /// - parameter count: The amount by which to increment the counter.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468229516", "createdAt": "2020-08-10T22:54:11Z", "author": {"login": "rebello95"}, "path": "library/swift/src/stats/Counter.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// A time series counter.\n+@objcMembers\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map { $0.value }.joined(separator: \".\")\n+    self.engine = engine\n+    super.init()\n+  }\n+\n+  /// Increment the counter by the given count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                guard let engine = self.engine else {\n          \n          \n            \n                  return\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                engine.recordCounter(self.series, count: numericCast(count))\n          \n          \n            \n                self.engine?.recordCounter(self.series, count: numericCast(count))", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468229582", "createdAt": "2020-08-10T22:54:25Z", "author": {"login": "rebello95"}, "path": "library/swift/src/stats/Counter.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// A time series counter.\n+@objcMembers\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map { $0.value }.joined(separator: \".\")\n+    self.engine = engine\n+    super.init()\n+  }\n+\n+  /// Increment the counter by the given count.\n+  public func increment(count: Int = 1) {\n+    guard let engine = self.engine else {\n+      return\n+    }\n+\n+    engine.recordCounter(self.series, count: numericCast(count))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTc0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              internal let value: String\n          \n          \n            \n              let value: String", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468229744", "createdAt": "2020-08-10T22:54:47Z", "author": {"login": "rebello95"}, "path": "library/swift/src/stats/Element.swift", "diffHunk": "@@ -0,0 +1,17 @@\n+import Foundation\n+\n+private let kPattern = \"^[A-Za-z_]+$\"\n+\n+/// Element represents one dot-delimited component of a time series name.\n+/// Element values must conform to the regex /^[A-Za-z_]+$/.\n+@objcMembers\n+public final class Element: NSObject, ExpressibleByStringLiteral {\n+  internal let value: String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDAzNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func testCounterDelegatesToEngine() throws {\n          \n          \n            \n              func testCounterDelegatesToEngine() {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230035", "createdAt": "2020-08-10T22:55:33Z", "author": {"login": "rebello95"}, "path": "library/swift/test/StatsClientImplTests.swift", "diffHunk": "@@ -0,0 +1,53 @@\n+@testable import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class StatsClientImplTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+    MockEnvoyEngine.onRecordCounter = nil\n+  }\n+\n+  func testCounterDelegatesToEngine() throws {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDA5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func testCounterDelegatesToEngineWithCount() throws {\n          \n          \n            \n              func testCounterDelegatesToEngineWithCount() {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230097", "createdAt": "2020-08-10T22:55:44Z", "author": {"login": "rebello95"}, "path": "library/swift/test/StatsClientImplTests.swift", "diffHunk": "@@ -0,0 +1,53 @@\n+@testable import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class StatsClientImplTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+    MockEnvoyEngine.onRecordCounter = nil\n+  }\n+\n+  func testCounterDelegatesToEngine() throws {\n+    var actualSeries: String?\n+    var actualCount: UInt?\n+    MockEnvoyEngine.onRecordCounter = { series, count in\n+      actualSeries = series\n+      actualCount = count\n+    }\n+    let mockEngine = MockEnvoyEngine()\n+    let statsClient = StatsClientImpl(engine: mockEngine)\n+    let counter = statsClient.counter(elements: [\"test\", \"stat\"])\n+    counter.increment()\n+    XCTAssertEqual(actualSeries, \"test.stat\")\n+    XCTAssertEqual(actualCount, 1)\n+  }\n+\n+  func testCounterDelegatesToEngineWithCount() throws {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDE3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func testCounterWeaklyHoldsEngine() throws {\n          \n          \n            \n              func testCounterWeaklyHoldsEngine() {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230176", "createdAt": "2020-08-10T22:56:03Z", "author": {"login": "rebello95"}, "path": "library/swift/test/StatsClientImplTests.swift", "diffHunk": "@@ -0,0 +1,53 @@\n+@testable import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class StatsClientImplTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+    MockEnvoyEngine.onRecordCounter = nil\n+  }\n+\n+  func testCounterDelegatesToEngine() throws {\n+    var actualSeries: String?\n+    var actualCount: UInt?\n+    MockEnvoyEngine.onRecordCounter = { series, count in\n+      actualSeries = series\n+      actualCount = count\n+    }\n+    let mockEngine = MockEnvoyEngine()\n+    let statsClient = StatsClientImpl(engine: mockEngine)\n+    let counter = statsClient.counter(elements: [\"test\", \"stat\"])\n+    counter.increment()\n+    XCTAssertEqual(actualSeries, \"test.stat\")\n+    XCTAssertEqual(actualCount, 1)\n+  }\n+\n+  func testCounterDelegatesToEngineWithCount() throws {\n+    var actualSeries: String?\n+    var actualCount: UInt?\n+    MockEnvoyEngine.onRecordCounter = { series, count in\n+      actualSeries = series\n+      actualCount = count\n+    }\n+    let mockEngine = MockEnvoyEngine()\n+    let statsClient = StatsClientImpl(engine: mockEngine)\n+    let counter = statsClient.counter(elements: [\"test\", \"stat\"])\n+    counter.increment(count: 5)\n+    XCTAssertEqual(actualSeries, \"test.stat\")\n+    XCTAssertEqual(actualCount, 5)\n+  }\n+\n+  func testCounterWeaklyHoldsEngine() throws {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDM3Mw==", "bodyText": "Can we add these tests for Kotlin too?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230373", "createdAt": "2020-08-10T22:56:36Z", "author": {"login": "rebello95"}, "path": "library/swift/test/StatsClientImplTests.swift", "diffHunk": "@@ -0,0 +1,53 @@\n+@testable import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class StatsClientImplTests: XCTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDUxOQ==", "bodyText": "nit: can we alphabetize these test cases?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230519", "createdAt": "2020-08-10T22:56:56Z", "author": {"login": "rebello95"}, "path": "library/swift/test/BUILD", "diffHunk": "@@ -52,9 +52,19 @@ envoy_mobile_swift_test(\n )\n \n envoy_mobile_swift_test(\n-    name = \"stream_client_builder_tests\",\n+    name = \"engine_builder_tests\",\n     srcs = [\n-        \"StreamClientBuilderTests.swift\",\n+        \"EngineBuilderTests.swift\",\n+    ],\n+    deps = [\n+        \"//library/objective-c:envoy_engine_objc_lib\",\n+    ],\n+)\n+\n+envoy_mobile_swift_test(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fc3ec0afd483f96a3033255f9802a58091b5a9d", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7fc3ec0afd483f96a3033255f9802a58091b5a9d", "committedDate": "2020-08-11T02:17:22Z", "message": "comments\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c089d6952d9f4b8e0b0ba58e9ee36e94f71f266c", "author": {"user": {"login": "jingwei99", "name": "Jingwei"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c089d6952d9f4b8e0b0ba58e9ee36e94f71f266c", "committedDate": "2020-08-11T04:39:38Z", "message": "andr\n\nSigned-off-by: Jingwei Hao <jingweih@lyft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjU2OTk5", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-465256999", "createdAt": "2020-08-11T16:58:15Z", "commit": {"oid": "c089d6952d9f4b8e0b0ba58e9ee36e94f71f266c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1ODoxNVrOG_A5rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1ODoxNVrOG_A5rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyODIzOA==", "bodyText": "tried to emulate StatsClientImplTests.testCounterWeaklyHoldsEngine, but I wasn't able to get the EnvoyEngine instance garbage collected - as calling System.gc() doesn't guarantee gc.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468728238", "createdAt": "2020-08-11T16:58:15Z", "author": {"login": "jingwei99"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/StatsClientImplTest.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+import org.mockito.ArgumentCaptor\n+import org.mockito.Mockito.mock\n+import org.mockito.Mockito.verify\n+\n+class StatsClientImplTest {\n+  private var envoyEngine: EnvoyEngine = mock(EnvoyEngine::class.java)\n+\n+  @Test\n+  fun `counter delegates to engine`() {\n+    val statsClient = StatsClientImpl(envoyEngine)\n+    val counter = statsClient.counter(Element(\"test\"), Element(\"stat\"))\n+    counter.increment()\n+    val elementsCaptor = ArgumentCaptor.forClass(String::class.java)\n+    val countCaptor = ArgumentCaptor.forClass(Int::class.java)\n+    verify(envoyEngine).recordCounter(elementsCaptor.capture(), countCaptor.capture())\n+    assertThat(elementsCaptor.getValue()).isEqualTo(\"test.stat\")\n+    assertThat(countCaptor.getValue()).isEqualTo(1)\n+  }\n+\n+  @Test\n+  fun `counter delegates to engine with count`() {\n+    val statsClient = StatsClientImpl(envoyEngine)\n+    val counter = statsClient.counter(Element(\"test\"), Element(\"stat\"))\n+    counter.increment(5)\n+    val elementsCaptor = ArgumentCaptor.forClass(String::class.java)\n+    val countCaptor = ArgumentCaptor.forClass(Int::class.java)\n+    verify(envoyEngine).recordCounter(elementsCaptor.capture(), countCaptor.capture())\n+    assertThat(elementsCaptor.getValue()).isEqualTo(\"test.stat\")\n+    assertThat(countCaptor.getValue()).isEqualTo(5)\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c089d6952d9f4b8e0b0ba58e9ee36e94f71f266c"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MjcyNjY2", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#pullrequestreview-465272666", "createdAt": "2020-08-11T17:19:15Z", "commit": {"oid": "c089d6952d9f4b8e0b0ba58e9ee36e94f71f266c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4142, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}