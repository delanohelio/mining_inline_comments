{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NzY4NjE2", "number": 1087, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNTo0Mzo0MVrOEiv5DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo1MjowOVrOEkPFuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0ODcxNjkyOnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNTo0Mzo0MVrOHQy1hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQwNTo0Mzo0MVrOHQy1hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzM3MjE2Ng==", "bodyText": "Envoy lints against using system time - I think I'll actually revisit this and avoid doing the timing within the library and simply make the closure void", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1087#discussion_r487372166", "createdAt": "2020-09-12T05:43:41Z", "author": {"login": "rebello95"}, "path": "library/common/engine.cc", "diffHunk": "@@ -51,14 +53,23 @@ envoy_status_t Engine::run(const std::string config, const std::string log_level\n     // When we improve synchronous failure handling and/or move to dynamic forwarding, we only need\n     // to wait until the dispatcher is running (and can drain by enqueueing a drain callback on it,\n     // as we did previously).\n+    int64_t start_time = std::chrono::duration_cast<std::chrono::milliseconds>(\n+                             std::chrono::system_clock::now().time_since_epoch())\n+                             .count();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7a029bc3d98c62aa46e567d799b3f114f6fa40e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDE4NDQzOnYy", "diffSide": "RIGHT", "path": "library/proguard.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDozMTowM1rOHSb0Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwMDozMTowM1rOHSb0Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA5MjEyNw==", "bodyText": "\ud83d\udcaf", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1087#discussion_r489092127", "createdAt": "2020-09-16T00:31:03Z", "author": {"login": "buildbreaker"}, "path": "library/proguard.txt", "diffHunk": "@@ -11,6 +11,10 @@\n     native <methods>;\n }\n \n+-keep, includedescriptorclasses class io.envoyproxy.envoymobile.engine.types.EnvoyEngineOnSetupComplete {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e47e4d8df9b0c5b8056321b92c7c1bae81b121c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTQ1MzM5OnYy", "diffSide": "RIGHT", "path": "docs/root/api/starting_envoy.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToxMDo0NlrOHSnnxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxNjozNTo1MVrOHS5LTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4NTU3NQ==", "bodyText": "What about onEngineRunning?\nThere's a separate, potentially interesting callback point where objects have been initialized, but the main run loop hasn't started and configuration hasn't yet been loaded. onEngineRunning is maybe a little bit more explicit about the juncture to which it refers.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1087#discussion_r489285575", "createdAt": "2020-09-16T09:10:46Z", "author": {"login": "goaway"}, "path": "docs/root/api/starting_envoy.rst", "diffHunk": "@@ -184,6 +184,25 @@ This functionality is used for stat segmentation.\n   // Swift\n   builder.addVirtualClusters(\"[{\\\"name\\\":\\\"vcluster\\\",\\\"headers\\\":[{\\\"name\\\":\\\":path\\\",\\\"exact_match\\\":\\\"/v1/vcluster\\\"}]}]\")\n \n+~~~~~~~~~~~~~~~~~~~~~~\n+``setOnSetupComplete``\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n+Specify a closure to be called once Envoy's engine finishes its async initialization/startup.\n+\n+When Envoy is instantiated, its initializer returns before all of its internal configuration\n+completes. This interface provides the ability to observe when Envoy has completed its setup and is\n+ready to start dispatching requests. Any requests sent through Envoy before this setup completes\n+will be queued automatically, and this function is typically used purely for observability.\n+\n+**Example**::\n+\n+  // Kotlin\n+  builder.setOnSetupComplete { /*do something*/ }\n+\n+  // Swift\n+  builder.setOnSetupComplete { /*do something*/ }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8a0bee55c45b103bacab37e290c338f8b1105ae"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU3MzE5Ng==", "bodyText": "Okay, updated.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1087#discussion_r489573196", "createdAt": "2020-09-16T16:35:51Z", "author": {"login": "rebello95"}, "path": "docs/root/api/starting_envoy.rst", "diffHunk": "@@ -184,6 +184,25 @@ This functionality is used for stat segmentation.\n   // Swift\n   builder.addVirtualClusters(\"[{\\\"name\\\":\\\"vcluster\\\",\\\"headers\\\":[{\\\"name\\\":\\\":path\\\",\\\"exact_match\\\":\\\"/v1/vcluster\\\"}]}]\")\n \n+~~~~~~~~~~~~~~~~~~~~~~\n+``setOnSetupComplete``\n+~~~~~~~~~~~~~~~~~~~~~~\n+\n+Specify a closure to be called once Envoy's engine finishes its async initialization/startup.\n+\n+When Envoy is instantiated, its initializer returns before all of its internal configuration\n+completes. This interface provides the ability to observe when Envoy has completed its setup and is\n+ready to start dispatching requests. Any requests sent through Envoy before this setup completes\n+will be queued automatically, and this function is typically used purely for observability.\n+\n+**Example**::\n+\n+  // Kotlin\n+  builder.setOnSetupComplete { /*do something*/ }\n+\n+  // Swift\n+  builder.setOnSetupComplete { /*do something*/ }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4NTU3NQ=="}, "originalCommit": {"oid": "d8a0bee55c45b103bacab37e290c338f8b1105ae"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDMxNDE3OnYy", "diffSide": "RIGHT", "path": "library/common/jni/jni_interface.cc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo1MjowOVrOHTDx-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMToxMjoxMVrOHTEZaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NjkzOA==", "bodyText": "Can you put a comment here? This works only because the other current engine callback doesn't use the context, but if others get added and/or when we move to per-instance runs, this will need to be moved.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1087#discussion_r489746938", "createdAt": "2020-09-16T20:52:09Z", "author": {"login": "goaway"}, "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -30,6 +30,20 @@ extern \"C\" JNIEXPORT jlong JNICALL Java_io_envoyproxy_envoymobile_engine_JniLibr\n   return init_engine();\n }\n \n+static void jvm_on_engine_running(void* context) {\n+  __android_log_write(ANDROID_LOG_VERBOSE, \"[Envoy]\", \"jvm_on_engine_running\");\n+\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmonEngineRunningContext = env->GetObjectClass(j_context);\n+  jmethodID jmid_onEngineRunning = env->GetMethodID(\n+      jcls_JvmonEngineRunningContext, \"invokeOnEngineRunning\", \"()Ljava/lang/Object;\");\n+  env->CallObjectMethod(j_context, jmid_onEngineRunning);\n+\n+  env->DeleteLocalRef(jcls_JvmonEngineRunningContext);\n+  env->DeleteGlobalRef(j_context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb1a2908f6db308c9aea013d2d1c08fbd43a17a2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NTM0NQ==", "bodyText": "Sure, will add in a separate PR since this one is green", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1087#discussion_r489755345", "createdAt": "2020-09-16T21:08:44Z", "author": {"login": "rebello95"}, "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -30,6 +30,20 @@ extern \"C\" JNIEXPORT jlong JNICALL Java_io_envoyproxy_envoymobile_engine_JniLibr\n   return init_engine();\n }\n \n+static void jvm_on_engine_running(void* context) {\n+  __android_log_write(ANDROID_LOG_VERBOSE, \"[Envoy]\", \"jvm_on_engine_running\");\n+\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmonEngineRunningContext = env->GetObjectClass(j_context);\n+  jmethodID jmid_onEngineRunning = env->GetMethodID(\n+      jcls_JvmonEngineRunningContext, \"invokeOnEngineRunning\", \"()Ljava/lang/Object;\");\n+  env->CallObjectMethod(j_context, jmid_onEngineRunning);\n+\n+  env->DeleteLocalRef(jcls_JvmonEngineRunningContext);\n+  env->DeleteGlobalRef(j_context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NjkzOA=="}, "originalCommit": {"oid": "eb1a2908f6db308c9aea013d2d1c08fbd43a17a2"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NzAzNQ==", "bodyText": "#1101", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1087#discussion_r489757035", "createdAt": "2020-09-16T21:12:11Z", "author": {"login": "rebello95"}, "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -30,6 +30,20 @@ extern \"C\" JNIEXPORT jlong JNICALL Java_io_envoyproxy_envoymobile_engine_JniLibr\n   return init_engine();\n }\n \n+static void jvm_on_engine_running(void* context) {\n+  __android_log_write(ANDROID_LOG_VERBOSE, \"[Envoy]\", \"jvm_on_engine_running\");\n+\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmonEngineRunningContext = env->GetObjectClass(j_context);\n+  jmethodID jmid_onEngineRunning = env->GetMethodID(\n+      jcls_JvmonEngineRunningContext, \"invokeOnEngineRunning\", \"()Ljava/lang/Object;\");\n+  env->CallObjectMethod(j_context, jmid_onEngineRunning);\n+\n+  env->DeleteLocalRef(jcls_JvmonEngineRunningContext);\n+  env->DeleteGlobalRef(j_context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NjkzOA=="}, "originalCommit": {"oid": "eb1a2908f6db308c9aea013d2d1c08fbd43a17a2"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 614, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}