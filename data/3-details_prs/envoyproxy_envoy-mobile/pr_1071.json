{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5MDIyMjEx", "number": 1071, "title": "assertion filter: update to be pass-through", "bodyText": "Description: Updates theAssertionFilter to always return ::Continue when validation checks pass. Fixes some bugs when requests should have failed, but wouldn't, or should have passed, but wouldn't:\n\nProcessing would be aborted for truncated requests, but potentially still appear to pass: e.g., a filter set up to validate conditions on headers and body could return 200 for headers-only requests, skipping body validation.\nIf data was streamed, but the first chunk didn't pass all data assertions on its own, processing would fail, even if later chunks would have passed validation.\nTesting of conditions before and after another filter wasn't possible.\n\nFor integration tests, there's not much downside to the pass-through behavior, since the Router can always be configured to return a 200 direct response, or any other sentinel value.\nRisk Level: Low\nTesting: Local and CI\nSigned-off-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-09-03T22:04:19Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071", "merged": true, "mergeCommit": {"oid": "23aff43b886d89a2e6ce07b184a4147eeb22b080"}, "closed": true, "closedAt": "2020-09-11T17:52:03Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFYBh9gH2gAyNDc5MDIyMjExOjhhYzdkNzllMmUzOGUzMzQyYjc3Y2JmNmUwNmRhN2ViZDc2MGVlNzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHpZwqgH2gAyNDc5MDIyMjExOjc4NzExMTdhMDhjMDczY2YzZWQzY2M5NDJjZmMxNGI2NzBkNjM5ZDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8ac7d79e2e38e3342b77cbf6e06da7ebd760ee71", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/8ac7d79e2e38e3342b77cbf6e06da7ebd760ee71", "committedDate": "2020-09-03T22:06:15Z", "message": "assertion filter: update to be pass-through\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "affb6a00d5e090b7621234c2b20c452a76d88df0", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/affb6a00d5e090b7621234c2b20c452a76d88df0", "committedDate": "2020-09-03T21:58:46Z", "message": "assertion filter: update to be pass-through\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "8ac7d79e2e38e3342b77cbf6e06da7ebd760ee71", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/8ac7d79e2e38e3342b77cbf6e06da7ebd760ee71", "committedDate": "2020-09-03T22:06:15Z", "message": "assertion filter: update to be pass-through\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d7318b3e18dc5b11b0c41d074dc3dd354b5ae77", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/1d7318b3e18dc5b11b0c41d074dc3dd354b5ae77", "committedDate": "2020-09-03T22:06:58Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMjY5MzY3", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#pullrequestreview-482269367", "createdAt": "2020-09-03T23:39:18Z", "commit": {"oid": "1d7318b3e18dc5b11b0c41d074dc3dd354b5ae77"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6cf88929c8043694078c507f0921f860973b9598", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6cf88929c8043694078c507f0921f860973b9598", "committedDate": "2020-09-09T02:38:52Z", "message": "fix format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "981361bd742f151eb8336c9dd8b10ebdef01d92c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/981361bd742f151eb8336c9dd8b10ebdef01d92c", "committedDate": "2020-09-09T20:18:35Z", "message": "add validation failure path for incomplete requests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3b5fe32d81f6ed0825643a464c83f9b68ce5363", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b3b5fe32d81f6ed0825643a464c83f9b68ce5363", "committedDate": "2020-09-10T04:15:50Z", "message": "update failure handling and fix tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a11c24c1a6ab7d25166b900a4804f88539c4137c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/a11c24c1a6ab7d25166b900a4804f88539c4137c", "committedDate": "2020-09-10T04:29:24Z", "message": "header order maybe\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/0b333e88f21d6753b5c81d2dbb1584e8fbd35701", "committedDate": "2020-09-10T09:08:35Z", "message": "fix header order\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzE5NzQ1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#pullrequestreview-486319745", "createdAt": "2020-09-10T21:22:14Z", "commit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyMjoxNFrOHQGNsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozOToyN1rOHQGruA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MTA3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n          \n          \n            \n              auto& match_status = config_->rootMatcher().matchStatus(statuses_);", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486641074", "createdAt": "2020-09-10T21:22:14Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MTI1NA==", "bodyText": "\ud83d\udca1 might_change_status_ I see.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486641254", "createdAt": "2020-09-10T21:22:41Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjgxNA==", "bodyText": "I see, so here we would like to see if there were expectations for body and trailers that because this request ended on a headers frame would not match.\nDo you mind adding comments explaining the thought process for posterity?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486642814", "createdAt": "2020-09-10T21:25:58Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Headers do not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterHeadersStatus::StopIteration;\n   }\n \n   if (end_stream) {\n-    decoder_callbacks_->sendLocalReply(Http::Code::OK,\n-                                       \"Request Headers match configured expectations\", nullptr,\n-                                       absl::nullopt, \"\");\n-    return Http::FilterHeadersStatus::StopIteration;\n+    Buffer::OwnedImpl empty_buffer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTczMw==", "bodyText": "same elsewhere", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486645733", "createdAt": "2020-09-10T21:32:29Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MTA3NA=="}, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0Nzg5NA==", "bodyText": "We are missing tests for some of  the other combinations e.g, trailer missing in headers, trailer missing in data", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486647894", "createdAt": "2020-09-10T21:37:25Z", "author": {"login": "junr03"}, "path": "test/common/extensions/filters/http/assertion/assertion_filter_test.cc", "diffHunk": "@@ -126,6 +119,29 @@ TEST_F(AssertionFilterTest, DataNoMatch) {\n   EXPECT_EQ(Http::FilterDataStatus::StopIterationNoBuffer, filter_->decodeData(*body, true));\n }\n \n+TEST_F(AssertionFilterTest, DataMissing) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0ODc2MA==", "bodyText": "I think I am confused about why we would catch this here rather than in the decodeData call, is it because the matcher is not completely done with knowing that data will not match until we see an end_stream == true in decodeData, or a decodeTrailers call (implying there is no more data to match?).\nSame as above could we add comments so that the thinking is clear?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486648760", "createdAt": "2020-09-10T21:39:27Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -26,53 +28,91 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Headers do not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterHeadersStatus::StopIteration;\n   }\n \n   if (end_stream) {\n-    decoder_callbacks_->sendLocalReply(Http::Code::OK,\n-                                       \"Request Headers match configured expectations\", nullptr,\n-                                       absl::nullopt, \"\");\n-    return Http::FilterHeadersStatus::StopIteration;\n+    Buffer::OwnedImpl empty_buffer;\n+    config_->rootMatcher().onRequestBody(empty_buffer, statuses_);\n+    auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+    if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Body does not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterHeadersStatus::StopIteration;\n+    }\n+\n+    auto empty_trailers = Http::RequestTrailerMapImpl::create();\n+    config_->rootMatcher().onHttpRequestTrailers(*empty_trailers, statuses_);\n+    auto& finalMatchStatus = config_->rootMatcher().matchStatus(statuses_);\n+    if (!finalMatchStatus.matches_ && !finalMatchStatus.might_change_status_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Trailers do not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterHeadersStatus::StopIteration;\n+    }\n+    if (!finalMatchStatus.matches_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Body does not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterHeadersStatus::StopIteration;\n+    }\n   }\n \n   return Http::FilterHeadersStatus::Continue;\n }\n \n Http::FilterDataStatus AssertionFilter::decodeData(Buffer::Instance& data, bool end_stream) {\n   config_->rootMatcher().onRequestBody(data, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Body does not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterDataStatus::StopIterationNoBuffer;\n   }\n \n   if (end_stream) {\n-    decoder_callbacks_->sendLocalReply(Http::Code::OK, \"Request Body match configured expectations\",\n-                                       nullptr, absl::nullopt, \"\");\n-    return Http::FilterDataStatus::StopIterationNoBuffer;\n+    auto empty_trailers = Http::RequestTrailerMapImpl::create();\n+    config_->rootMatcher().onHttpRequestTrailers(*empty_trailers, statuses_);\n+    auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+    if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Trailers do not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterDataStatus::StopIterationNoBuffer;\n+    }\n+    if (!matchStatus.matches_) {\n+      decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n+                                         \"Request Body does not match configured expectations\",\n+                                         nullptr, absl::nullopt, \"\");\n+      return Http::FilterDataStatus::StopIterationNoBuffer;\n+    }\n   }\n-\n   return Http::FilterDataStatus::Continue;\n }\n \n Http::FilterTrailersStatus AssertionFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n   config_->rootMatcher().onHttpRequestTrailers(trailers, statuses_);\n-  if (!config_->rootMatcher().matchStatus(statuses_).matches_) {\n+  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n+  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Trailers do not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterTrailersStatus::StopIteration;\n   }\n-\n-  decoder_callbacks_->sendLocalReply(\n-      Http::Code::OK, \"Request Trailers match configured expectations\", nullptr, absl::nullopt, \"\");\n-  return Http::FilterTrailersStatus::StopIteration;\n+  if (!matchStatus.matches_) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b333e88f21d6753b5c81d2dbb1584e8fbd35701"}, "originalPosition": 106}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21403e31f1b3205b1db63bbcda54eaf2b6f2ff52", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/21403e31f1b3205b1db63bbcda54eaf2b6f2ff52", "committedDate": "2020-09-10T22:45:48Z", "message": "add full unit coverage\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "440d2c5f91888d07ed1db3252cbb35068ab0f051", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/440d2c5f91888d07ed1db3252cbb35068ab0f051", "committedDate": "2020-09-10T23:08:30Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzczNzQ4", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#pullrequestreview-486373748", "createdAt": "2020-09-10T23:18:21Z", "commit": {"oid": "440d2c5f91888d07ed1db3252cbb35068ab0f051"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MzczODcw", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#pullrequestreview-486373870", "createdAt": "2020-09-10T23:18:45Z", "commit": {"oid": "440d2c5f91888d07ed1db3252cbb35068ab0f051"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoxODo0NVrOHQI5qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoxOToxMFrOHQI6KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NTA5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Check of there are unsatisfied assertions about stream trailers.\n          \n          \n            \n                // Check if there are unsatisfied assertions about stream trailers.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486685098", "createdAt": "2020-09-10T23:18:45Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -28,25 +33,27 @@ AssertionFilter::AssertionFilter(AssertionFilterConfigSharedPtr config) : config\n Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n                                                          bool end_stream) {\n   config_->rootMatcher().onHttpRequestHeaders(headers, statuses_);\n-  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n-  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+  auto& match_status = config_->rootMatcher().matchStatus(statuses_);\n+  if (!match_status.matches_ && !match_status.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Headers do not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterHeadersStatus::StopIteration;\n   }\n \n   if (end_stream) {\n+    // Check if there are unsatisfied assertions about stream data.\n     Buffer::OwnedImpl empty_buffer;\n     config_->rootMatcher().onRequestBody(empty_buffer, statuses_);\n-    auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n-    if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+    auto& match_status = config_->rootMatcher().matchStatus(statuses_);\n+    if (!match_status.matches_ && !match_status.might_change_status_) {\n       decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                          \"Request Body does not match configured expectations\",\n                                          nullptr, absl::nullopt, \"\");\n       return Http::FilterHeadersStatus::StopIteration;\n     }\n \n+    // Check of there are unsatisfied assertions about stream trailers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440d2c5f91888d07ed1db3252cbb35068ab0f051"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4NTIyNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // Check of there are unsatisfied assertions about stream trailers.\n          \n          \n            \n                // Check if there are unsatisfied assertions about stream trailers.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1071#discussion_r486685224", "createdAt": "2020-09-10T23:19:10Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/assertion/filter.cc", "diffHunk": "@@ -69,25 +80,29 @@ Http::FilterHeadersStatus AssertionFilter::decodeHeaders(Http::RequestHeaderMap&\n \n Http::FilterDataStatus AssertionFilter::decodeData(Buffer::Instance& data, bool end_stream) {\n   config_->rootMatcher().onRequestBody(data, statuses_);\n-  auto& matchStatus = config_->rootMatcher().matchStatus(statuses_);\n-  if (!matchStatus.matches_ && !matchStatus.might_change_status_) {\n+  auto& match_status = config_->rootMatcher().matchStatus(statuses_);\n+  if (!match_status.matches_ && !match_status.might_change_status_) {\n     decoder_callbacks_->sendLocalReply(Http::Code::BadRequest,\n                                        \"Request Body does not match configured expectations\",\n                                        nullptr, absl::nullopt, \"\");\n     return Http::FilterDataStatus::StopIterationNoBuffer;\n   }\n \n   if (end_stream) {\n+    // Check of there are unsatisfied assertions about stream trailers.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "440d2c5f91888d07ed1db3252cbb35068ab0f051"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7871117a08c073cf3ed3cc942cfc14b670d639d7", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7871117a08c073cf3ed3cc942cfc14b670d639d7", "committedDate": "2020-09-10T23:28:57Z", "message": "typo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4011, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}