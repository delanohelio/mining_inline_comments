{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MTE2Mjcz", "number": 940, "title": "filters: add initial support for bridged filters", "bodyText": "Description: Adds support for platform-bridged filter implementations at the common and bridge layers of the library. Includes a stub implementation hardcoded into configuration. Dynamic configuration and data support, with platform-specific presentations, to come.\nRisk Level: Moderate\nTesting: Local end-to-end\nSigned-off-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-07-07T03:07:15Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940", "merged": true, "mergeCommit": {"oid": "f87359ca9538148b1e50a60a5010e46d01a1497b"}, "closed": true, "closedAt": "2020-07-15T04:41:39Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyrydsAFqTQ0NDA5MjI3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc1CKUcgH2gAyNDQ1MTE2MjczOjlkMzExNTBkOTkxMDFkZDQ0N2U0M2FlY2RhOWI4ZGRmNjc3Mzk0MjM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0MDkyMjc5", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#pullrequestreview-444092279", "createdAt": "2020-07-07T17:11:25Z", "commit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNzoxMToyNVrOGuH-IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMDoyMjozM1rOGuOPiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxODI3Mg==", "bodyText": "Is this still true?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451018272", "createdAt": "2020-07-07T17:11:25Z", "author": {"login": "rebello95"}, "path": "library/common/api/external.h", "diffHunk": "@@ -0,0 +1,22 @@\n+#pragma once\n+\n+#include <string>\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {\n+\n+/**\n+ * Register an external runtime API for usage (most likely in extensions).\n+ * NOTE: This is a proof of concept implementation and a HACK. Registration is NOT thread-safe.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxODUxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            //#include <iostream>", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451018513", "createdAt": "2020-07-07T17:11:51Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTAxOTE1MQ==", "bodyText": "Isn't this coming from the core layer, not the platform layer? Also {} is missing the format value I believe", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451019151", "createdAt": "2020-07-07T17:12:55Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>\n+\n+#include \"envoy/server/filter_config.h\"\n+\n+#include \"common/common/assert.h\"\n+#include \"common/common/utility.h\"\n+\n+#include \"library/common/api/external.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+Http::FilterHeadersStatus mapStatus(envoy_filter_headers_status_t status) {\n+  switch (status) {\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE:\n+    return Http::FilterHeadersStatus::Continue;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION:\n+    return Http::FilterHeadersStatus::StopIteration;\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM:\n+    return Http::FilterHeadersStatus::ContinueAndEndStream;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER:\n+    return Http::FilterHeadersStatus::StopAllIterationAndBuffer;\n+  default:\n+    ASSERT(false, \"unrecognized filter status from platform: {}\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MDY3OA==", "bodyText": "Same comment from #883 (comment) applies", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451040678", "createdAt": "2020-07-07T17:50:00Z", "author": {"login": "rebello95"}, "path": "library/common/config_template.cc", "diffHunk": "@@ -32,6 +32,10 @@ const char* config_template = R\"(\n                         base_interval: 0.25s\n                         max_interval: 60s\n         http_filters:\n+          - name: envoy.filters.http.platform_extension\n+            typed_config:\n+              \"@type\": type.googleapis.com/envoymobile.extensions.filters.http.platform_extension.Bridging\n+              name: PlatformStub", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA0MTAyNA==", "bodyText": "Same unresolved comment: #883 (comment)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451041024", "createdAt": "2020-07-07T17:50:37Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.h", "diffHunk": "@@ -0,0 +1,58 @@\n+#pragma once\n+\n+#include \"envoy/http/filter.h\"\n+\n+#include \"extensions/filters/http/common/pass_through_filter.h\"\n+\n+#include \"library/common/extensions/filters/http/platform_extension/c_types.h\"\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+class BridgingFilterConfig {\n+public:\n+  BridgingFilterConfig(\n+      const envoymobile::extensions::filters::http::platform_extension::Bridging& proto_config);\n+\n+  const std::string& name() const { return name_; }\n+\n+private:\n+  const std::string name_;\n+};\n+\n+typedef std::shared_ptr<BridgingFilterConfig> BridgingFilterConfigSharedPtr;\n+\n+/**\n+ * Harness to bridge Envoy filter invocations up to the platform layer.\n+ */\n+class BridgingFilter final : public Http::PassThroughFilter {\n+public:\n+  BridgingFilter(BridgingFilterConfigSharedPtr config);\n+\n+  // StreamDecoderFilter\n+  Http::FilterHeadersStatus decodeHeaders(Http::RequestHeaderMap& headers,\n+                                          bool end_stream) override;\n+  Http::FilterDataStatus decodeData(Buffer::Instance& data, bool end_stream) override;\n+  Http::FilterTrailersStatus decodeTrailers(Http::RequestTrailerMap& trailers) override;\n+  Http::FilterMetadataStatus decodeMetadata(Http::MetadataMap& metadata) override;\n+\n+  // StreamEncoderFilter\n+  Http::FilterHeadersStatus encode100ContinueHeaders(Http::ResponseHeaderMap& headers) override;\n+  Http::FilterHeadersStatus encodeHeaders(Http::ResponseHeaderMap& headers,\n+                                          bool end_stream) override;\n+  Http::FilterDataStatus encodeData(Buffer::Instance& data, bool end_stream) override;\n+  Http::FilterTrailersStatus encodeTrailers(Http::ResponseTrailerMap& trailers) override;\n+  Http::FilterMetadataStatus encodeMetadata(Http::MetadataMap& metadata) override;\n+\n+private:\n+  // FIXME: this leaks\n+  const envoy_http_filter* platform_filter_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDYxNA==", "bodyText": "In the past we've had bugs with C structs that have callback properties with the same types (i.e., envoy_filter_on_headers_f for request and response). Would it be possible to either a) add tests for the bridging (@junr03 maybe has thoughts?) or b) use different type signatures so they're enforced by the compiler?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451120614", "createdAt": "2020-07-07T20:21:38Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_extension/c_types.h", "diffHunk": "@@ -0,0 +1,97 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+/**\n+ * Return codes for on-headers filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION,\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER,\n+} envoy_filter_headers_status_t;\n+\n+/**\n+ * Compound return type for on-headers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_headers_status_t status;\n+  envoy_headers headers;\n+} envoy_filter_headers_status;\n+\n+/**\n+ * Return codes for on-data filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n+} envoy_filter_data_status_t;\n+\n+/**\n+ * Compound return type for on-data filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_data_status_t status;\n+  envoy_data data;\n+} envoy_filter_data_status;\n+\n+/**\n+ * Return codes for on-trailers filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_TRAILERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_TRAILERS_STATUS_STOP_ITERATION,\n+} envoy_filter_trailers_status_t;\n+\n+/**\n+ * Compound return type for on-trailers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_trailers_status_t status;\n+  envoy_headers trailers;\n+} envoy_filter_trailers_status;\n+\n+#ifdef __cplusplus\n+extern \"C\" { // function pointers\n+#endif\n+\n+/**\n+ * Function signature for on-headers filter invocations.\n+ */\n+typedef envoy_filter_headers_status (*envoy_filter_on_headers_f)(envoy_headers headers,\n+                                                                 bool end_stream, void* context);\n+\n+/**\n+ * Function signature for on-data filter invocations.\n+ */\n+typedef envoy_filter_data_status (*envoy_filter_on_data_f)(envoy_data data, bool end_stream,\n+                                                          void* context);\n+\n+/**\n+ * Function signature for on-trailers filter invocations.\n+ */\n+typedef envoy_filter_trailers_status (*envoy_filter_on_trailers_f)(envoy_headers trailers,\n+                                                                   bool end_stream,\n+                                                                   void* context);\n+\n+#ifdef __cplusplus\n+} // function pointers\n+#endif\n+\n+/**\n+ * Raw datatype containing dispatch functions for a platform-native HTTP filter. Leveraged by the\n+ * BridgingFilter\n+ */\n+typedef struct {\n+  envoy_filter_on_headers_f on_request_headers;\n+  envoy_filter_on_data_f on_request_data;\n+  envoy_filter_on_trailers_f on_request_trailers;\n+  envoy_filter_on_headers_f on_response_headers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMDgzMg==", "bodyText": "Bad copy/paste", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451120832", "createdAt": "2020-07-07T20:22:06Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_extension/config.h", "diffHunk": "@@ -0,0 +1,33 @@\n+#include <string>\n+\n+#include \"extensions/filters/http/common/factory_base.h\"\n+\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.h\"\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.validate.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+/**\n+ * Config registration for the decompressor filter. @see NamedHttpFilterConfigFactory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTEyMTAzMg==", "bodyText": "Can we document how this works/is intended to be used?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451121032", "createdAt": "2020-07-07T20:22:33Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_extension/filter.proto", "diffHunk": "@@ -0,0 +1,9 @@\n+syntax = \"proto3\";\n+\n+package envoymobile.extensions.filters.http.platform_extension;\n+\n+import \"validate/validate.proto\";\n+\n+message Bridging {\n+  string name = 1 [(validate.rules).string.min_bytes = 1];\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ0Mjg5NTQx", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#pullrequestreview-444289541", "createdAt": "2020-07-07T22:19:33Z", "commit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjoxOTozM1rOGuRmiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMjo1ODoyNlrOGuScMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjA3Mg==", "bodyText": "nit: the name extension suffix is a little odd, because the extension is a filter, not a generic \"PlatformExtension\".", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451176072", "createdAt": "2020-07-07T22:19:33Z", "author": {"login": "junr03"}, "path": "envoy_build_config/BUILD", "diffHunk": "@@ -22,5 +22,6 @@ envoy_cc_library(\n         \"@envoy//source/extensions/filters/network/http_connection_manager:config\",\n         \"@envoy//source/extensions/stat_sinks/metrics_service:config\",\n         \"@envoy//source/extensions/transport_sockets/tls:config\",\n+        \"@envoy_mobile//library/common/extensions/filters/http/platform_extension:config\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjI3Nw==", "bodyText": "should we do alpha ordering here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451176277", "createdAt": "2020-07-07T22:20:05Z", "author": {"login": "junr03"}, "path": "envoy_build_config/extensions_build_config.bzl", "diffHunk": "@@ -5,5 +5,6 @@ EXTENSIONS = {\n     \"envoy.filters.network.http_connection_manager\":    \"//source/extensions/filters/network/http_connection_manager:config\",\n     \"envoy.stat_sinks.metrics_service\":                 \"//source/extensions/stat_sinks/metrics_service:config\",\n     \"envoy.transport_sockets.tls\":                      \"//source/extensions/transport_sockets/tls:config\",\n+    \"envoy.filters.http.platform_extension\":            \"@envoy_mobile//library/common/extensions/filters/http/platform_extension:config\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3OTc5MQ==", "bodyText": "Ok, after reading more of the PR I think I see your thought here. The PlatformExtension namespace contains types that bridge to the platform. In this case it is the bridge filter. Usually the directory and the namespace share the filter's name, but I see how here is different.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451179791", "createdAt": "2020-07-07T22:28:54Z", "author": {"login": "junr03"}, "path": "envoy_build_config/BUILD", "diffHunk": "@@ -22,5 +22,6 @@ envoy_cc_library(\n         \"@envoy//source/extensions/filters/network/http_connection_manager:config\",\n         \"@envoy//source/extensions/stat_sinks/metrics_service:config\",\n         \"@envoy//source/extensions/transport_sockets/tls:config\",\n+        \"@envoy_mobile//library/common/extensions/filters/http/platform_extension:config\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE3NjA3Mg=="}, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDQ0Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            namespace External {\n          \n          \n            \n            namespace PlatformExtension {\n          \n      \n    \n    \n  \n\nI think this meshes well with the rest of the PR, because it tells us that these function signatures allow us to register any platform extension api?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451180446", "createdAt": "2020-07-07T22:30:41Z", "author": {"login": "junr03"}, "path": "library/common/api/external.cc", "diffHunk": "@@ -0,0 +1,25 @@\n+#include \"external.h\"\n+\n+#include <unordered_map>\n+\n+#include \"common/common/assert.h\"\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MDg1NA==", "bodyText": "How will this work with instance-based engines? Will the registry be per instance, or do you see this always being static?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451180854", "createdAt": "2020-07-07T22:31:58Z", "author": {"login": "junr03"}, "path": "library/common/api/external.cc", "diffHunk": "@@ -0,0 +1,25 @@\n+#include \"external.h\"\n+\n+#include <unordered_map>\n+\n+#include \"common/common/assert.h\"\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {\n+\n+static std::unordered_map<std::string, void*> registry_{};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTA0MQ==", "bodyText": "Should probably also note that name collisions update the stored api?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451181041", "createdAt": "2020-07-07T22:32:34Z", "author": {"login": "junr03"}, "path": "library/common/api/external.h", "diffHunk": "@@ -0,0 +1,22 @@\n+#pragma once\n+\n+#include <string>\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {\n+\n+/**\n+ * Register an external runtime API for usage (most likely in extensions).\n+ * NOTE: This is a proof of concept implementation and a HACK. Registration is NOT thread-safe.\n+ */\n+void registerApi(std::string name, void* api);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTE5OQ==", "bodyText": "Interesting, crash if not present?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451181199", "createdAt": "2020-07-07T22:33:02Z", "author": {"login": "junr03"}, "path": "library/common/api/external.cc", "diffHunk": "@@ -0,0 +1,25 @@\n+#include \"external.h\"\n+\n+#include <unordered_map>\n+\n+#include \"common/common/assert.h\"\n+\n+namespace Envoy {\n+namespace Api {\n+namespace External {\n+\n+static std::unordered_map<std::string, void*> registry_{};\n+\n+void registerApi(std::string name, void* api) {\n+  registry_[name] = api;\n+}\n+\n+void* retrieveApi(std::string name) {\n+  void* api = registry_[name];\n+  ASSERT(api);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MTUwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              string name = 1 [(validate.rules).string.min_bytes = 1];\n          \n          \n            \n              string platform_api_name = 1 [(validate.rules).string.min_bytes = 1];", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451181503", "createdAt": "2020-07-07T22:33:53Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_extension/filter.proto", "diffHunk": "@@ -0,0 +1,9 @@\n+syntax = \"proto3\";\n+\n+package envoymobile.extensions.filters.http.platform_extension;\n+\n+import \"validate/validate.proto\";\n+\n+message Bridging {\n+  string name = 1 [(validate.rules).string.min_bytes = 1];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4MzY2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Config registration for the decompressor filter. @see NamedHttpFilterConfigFactory.\n          \n          \n            \n             * Config registration for the bridging filter. @see NamedHttpFilterConfigFactory.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451183666", "createdAt": "2020-07-07T22:40:15Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_extension/config.h", "diffHunk": "@@ -0,0 +1,33 @@\n+#include <string>\n+\n+#include \"extensions/filters/http/common/factory_base.h\"\n+\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.h\"\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.validate.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+/**\n+ * Config registration for the decompressor filter. @see NamedHttpFilterConfigFactory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4Mzg0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              BridgingFilterFactory() : FactoryBase(\"platform_extension\") {}\n          \n          \n            \n              BridgingFilterFactory() : FactoryBase(\"bridging\") {}", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451183847", "createdAt": "2020-07-07T22:40:43Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_extension/config.h", "diffHunk": "@@ -0,0 +1,33 @@\n+#include <string>\n+\n+#include \"extensions/filters/http/common/factory_base.h\"\n+\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.h\"\n+#include \"library/common/extensions/filters/http/platform_extension/filter.pb.validate.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+/**\n+ * Config registration for the decompressor filter. @see NamedHttpFilterConfigFactory.\n+ */\n+class BridgingFilterFactory\n+    : public Common::FactoryBase<\n+          envoymobile::extensions::filters::http::platform_extension::Bridging> {\n+public:\n+  BridgingFilterFactory() : FactoryBase(\"platform_extension\") {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4NTg0Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Return codes for on-headers filter invocations. See envoy/http/filter.h\n          \n          \n            \n             * Return codes for on-headers filter invocations. @see envoy/http/filter.h\n          \n      \n    \n    \n  \n\nsame elsewhere", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451185843", "createdAt": "2020-07-07T22:46:42Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_extension/c_types.h", "diffHunk": "@@ -0,0 +1,97 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+/**\n+ * Return codes for on-headers filter invocations. See envoy/http/filter.h", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4NzY0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * BridgingFilter\n          \n          \n            \n             * BridgingFilter.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451187642", "createdAt": "2020-07-07T22:51:57Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_extension/c_types.h", "diffHunk": "@@ -0,0 +1,97 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+/**\n+ * Return codes for on-headers filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION,\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER,\n+} envoy_filter_headers_status_t;\n+\n+/**\n+ * Compound return type for on-headers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_headers_status_t status;\n+  envoy_headers headers;\n+} envoy_filter_headers_status;\n+\n+/**\n+ * Return codes for on-data filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n+} envoy_filter_data_status_t;\n+\n+/**\n+ * Compound return type for on-data filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_data_status_t status;\n+  envoy_data data;\n+} envoy_filter_data_status;\n+\n+/**\n+ * Return codes for on-trailers filter invocations. See envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_TRAILERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_TRAILERS_STATUS_STOP_ITERATION,\n+} envoy_filter_trailers_status_t;\n+\n+/**\n+ * Compound return type for on-trailers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_trailers_status_t status;\n+  envoy_headers trailers;\n+} envoy_filter_trailers_status;\n+\n+#ifdef __cplusplus\n+extern \"C\" { // function pointers\n+#endif\n+\n+/**\n+ * Function signature for on-headers filter invocations.\n+ */\n+typedef envoy_filter_headers_status (*envoy_filter_on_headers_f)(envoy_headers headers,\n+                                                                 bool end_stream, void* context);\n+\n+/**\n+ * Function signature for on-data filter invocations.\n+ */\n+typedef envoy_filter_data_status (*envoy_filter_on_data_f)(envoy_data data, bool end_stream,\n+                                                          void* context);\n+\n+/**\n+ * Function signature for on-trailers filter invocations.\n+ */\n+typedef envoy_filter_trailers_status (*envoy_filter_on_trailers_f)(envoy_headers trailers,\n+                                                                   bool end_stream,\n+                                                                   void* context);\n+\n+#ifdef __cplusplus\n+} // function pointers\n+#endif\n+\n+/**\n+ * Raw datatype containing dispatch functions for a platform-native HTTP filter. Leveraged by the\n+ * BridgingFilter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4ODk2MA==", "bodyText": "I wonder if this should live in the BridgingFilterConfig class. That way if we crash/throw an exception we can do so at config time and not when the first stream creates the filter.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451188960", "createdAt": "2020-07-07T22:55:58Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>\n+\n+#include \"envoy/server/filter_config.h\"\n+\n+#include \"common/common/assert.h\"\n+#include \"common/common/utility.h\"\n+\n+#include \"library/common/api/external.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+Http::FilterHeadersStatus mapStatus(envoy_filter_headers_status_t status) {\n+  switch (status) {\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE:\n+    return Http::FilterHeadersStatus::Continue;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION:\n+    return Http::FilterHeadersStatus::StopIteration;\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM:\n+    return Http::FilterHeadersStatus::ContinueAndEndStream;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER:\n+    return Http::FilterHeadersStatus::StopAllIterationAndBuffer;\n+  default:\n+    ASSERT(false, \"unrecognized filter status from platform: {}\");\n+    return Http::FilterHeadersStatus::Continue;\n+  }\n+}\n+\n+BridgingFilterConfig::BridgingFilterConfig(\n+    const envoymobile::extensions::filters::http::platform_extension::Bridging& proto_config)\n+    : name_(proto_config.name()) {}\n+\n+BridgingFilter::BridgingFilter(BridgingFilterConfigSharedPtr config)\n+    : platform_filter_(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTMzNQ==", "bodyText": "TODO for optimization", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451189335", "createdAt": "2020-07-07T22:57:02Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>\n+\n+#include \"envoy/server/filter_config.h\"\n+\n+#include \"common/common/assert.h\"\n+#include \"common/common/utility.h\"\n+\n+#include \"library/common/api/external.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+Http::FilterHeadersStatus mapStatus(envoy_filter_headers_status_t status) {\n+  switch (status) {\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE:\n+    return Http::FilterHeadersStatus::Continue;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION:\n+    return Http::FilterHeadersStatus::StopIteration;\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM:\n+    return Http::FilterHeadersStatus::ContinueAndEndStream;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER:\n+    return Http::FilterHeadersStatus::StopAllIterationAndBuffer;\n+  default:\n+    ASSERT(false, \"unrecognized filter status from platform: {}\");\n+    return Http::FilterHeadersStatus::Continue;\n+  }\n+}\n+\n+BridgingFilterConfig::BridgingFilterConfig(\n+    const envoymobile::extensions::filters::http::platform_extension::Bridging& proto_config)\n+    : name_(proto_config.name()) {}\n+\n+BridgingFilter::BridgingFilter(BridgingFilterConfigSharedPtr config)\n+    : platform_filter_(\n+          static_cast<envoy_http_filter*>(Api::External::retrieveApi(config->name()))) {}\n+\n+Http::FilterHeadersStatus BridgingFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n+                                                        bool end_stream) {\n+  envoy_headers in_headers = Http::Utility::toBridgeHeaders(headers);\n+  envoy_filter_headers_status result = platform_filter_->on_request_headers(in_headers, end_stream, platform_filter_->context);\n+  Http::FilterHeadersStatus status = mapStatus(result.status);\n+  // Current platform implementations expose immutable headers, thus any modification necessitates a full copy.\n+  // If the returned pointer is identical, we assume no modification was made and elide the copy here.\n+  if (in_headers.headers != result.headers.headers) {\n+    headers.clear();\n+    for (envoy_header_size_t i = 0; i < result.headers.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE4OTgwOA==", "bodyText": "we can probably extract all this logic to a helper function that takes a function pointer, that way decode/encodeHeaders don't need to have all this repeated code?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r451189808", "createdAt": "2020-07-07T22:58:26Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_extension/bridging_filter.cc", "diffHunk": "@@ -0,0 +1,115 @@\n+#include \"library/common/extensions/filters/http/platform_extension/bridging_filter.h\"\n+\n+//#include <iostream>\n+\n+#include \"envoy/server/filter_config.h\"\n+\n+#include \"common/common/assert.h\"\n+#include \"common/common/utility.h\"\n+\n+#include \"library/common/api/external.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformExtension {\n+\n+Http::FilterHeadersStatus mapStatus(envoy_filter_headers_status_t status) {\n+  switch (status) {\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE:\n+    return Http::FilterHeadersStatus::Continue;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION:\n+    return Http::FilterHeadersStatus::StopIteration;\n+  case ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM:\n+    return Http::FilterHeadersStatus::ContinueAndEndStream;\n+  case ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER:\n+    return Http::FilterHeadersStatus::StopAllIterationAndBuffer;\n+  default:\n+    ASSERT(false, \"unrecognized filter status from platform: {}\");\n+    return Http::FilterHeadersStatus::Continue;\n+  }\n+}\n+\n+BridgingFilterConfig::BridgingFilterConfig(\n+    const envoymobile::extensions::filters::http::platform_extension::Bridging& proto_config)\n+    : name_(proto_config.name()) {}\n+\n+BridgingFilter::BridgingFilter(BridgingFilterConfigSharedPtr config)\n+    : platform_filter_(\n+          static_cast<envoy_http_filter*>(Api::External::retrieveApi(config->name()))) {}\n+\n+Http::FilterHeadersStatus BridgingFilter::decodeHeaders(Http::RequestHeaderMap& headers,\n+                                                        bool end_stream) {\n+  envoy_headers in_headers = Http::Utility::toBridgeHeaders(headers);\n+  envoy_filter_headers_status result = platform_filter_->on_request_headers(in_headers, end_stream, platform_filter_->context);\n+  Http::FilterHeadersStatus status = mapStatus(result.status);\n+  // Current platform implementations expose immutable headers, thus any modification necessitates a full copy.\n+  // If the returned pointer is identical, we assume no modification was made and elide the copy here.\n+  if (in_headers.headers != result.headers.headers) {\n+    headers.clear();\n+    for (envoy_header_size_t i = 0; i < result.headers.length; i++) {\n+      headers.addCopy(\n+          Http::LowerCaseString(Http::Utility::convertToString(result.headers.headers[i].key)),\n+          Http::Utility::convertToString(result.headers.headers[i].value));\n+    }\n+  }\n+  // The C envoy_headers struct can be released now because the headers have been copied.\n+  release_envoy_headers(result.headers);\n+  return status;\n+}\n+\n+Http::FilterDataStatus BridgingFilter::decodeData(Buffer::Instance& /*data*/, bool /*end_stream*/) {\n+  return Http::FilterDataStatus::Continue;\n+}\n+\n+Http::FilterTrailersStatus BridgingFilter::decodeTrailers(Http::RequestTrailerMap& /*trailers*/) {\n+  return Http::FilterTrailersStatus::Continue;\n+}\n+\n+Http::FilterMetadataStatus BridgingFilter::decodeMetadata(Http::MetadataMap& /*metadata*/) {\n+  return Http::FilterMetadataStatus::Continue;\n+}\n+\n+Http::FilterHeadersStatus\n+BridgingFilter::encode100ContinueHeaders(Http::ResponseHeaderMap& /*headers*/) {\n+  return Http::FilterHeadersStatus::Continue;\n+}\n+\n+Http::FilterHeadersStatus BridgingFilter::encodeHeaders(Http::ResponseHeaderMap& headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "65b4f10ab256dc9a69ae30ca318ccefcd1cda529"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjY4MDEw", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#pullrequestreview-447268010", "createdAt": "2020-07-13T13:49:06Z", "commit": {"oid": "d3d3beed676670505600dfafb908df74324b6119"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo0OTowNlrOGwpZeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzo1Mjo0NlrOGwpjtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2MzA5Ng==", "bodyText": "end_stream should be omitted since trailers always indicate an end-of-stream", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r453663096", "createdAt": "2020-07-13T13:49:06Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -0,0 +1,96 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+/**\n+ * Return codes for on-headers filter invocations. @see envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ITERATION,\n+  ENVOY_FILTER_HEADERS_STATUS_CONTINUE_AND_END_STREAM,\n+  ENVOY_FILTER_HEADERS_STATUS_STOP_ALL_ITERATION_AND_BUFFER,\n+} envoy_filter_headers_status_t;\n+\n+/**\n+ * Compound return type for on-headers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_headers_status_t status;\n+  envoy_headers headers;\n+} envoy_filter_headers_status;\n+\n+/**\n+ * Return codes for on-data filter invocations. @see envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n+  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n+} envoy_filter_data_status_t;\n+\n+/**\n+ * Compound return type for on-data filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_data_status_t status;\n+  envoy_data data;\n+} envoy_filter_data_status;\n+\n+/**\n+ * Return codes for on-trailers filter invocations. @see envoy/http/filter.h\n+ */\n+typedef enum {\n+  ENVOY_FILTER_TRAILERS_STATUS_CONTINUE = 0,\n+  ENVOY_FILTER_TRAILERS_STATUS_STOP_ITERATION,\n+} envoy_filter_trailers_status_t;\n+\n+/**\n+ * Compound return type for on-trailers filter invocations.\n+ */\n+typedef struct {\n+  envoy_filter_trailers_status_t status;\n+  envoy_headers trailers;\n+} envoy_filter_trailers_status;\n+\n+#ifdef __cplusplus\n+extern \"C\" { // function pointers\n+#endif\n+\n+/**\n+ * Function signature for on-headers filter invocations.\n+ */\n+typedef envoy_filter_headers_status (*envoy_filter_on_headers_f)(envoy_headers headers,\n+                                                                 bool end_stream, void* context);\n+\n+/**\n+ * Function signature for on-data filter invocations.\n+ */\n+typedef envoy_filter_data_status (*envoy_filter_on_data_f)(envoy_data data, bool end_stream,\n+                                                           void* context);\n+\n+/**\n+ * Function signature for on-trailers filter invocations.\n+ */\n+typedef envoy_filter_trailers_status (*envoy_filter_on_trailers_f)(envoy_headers trailers,\n+                                                                   bool end_stream, void* context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d3beed676670505600dfafb908df74324b6119"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY2NTcxNg==", "bodyText": "This isn't necessarily true since we compile out release asserts, right? Maybe worth clarifying", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#discussion_r453665716", "createdAt": "2020-07-13T13:52:46Z", "author": {"login": "rebello95"}, "path": "library/common/types/c_types.h", "diffHunk": "@@ -103,6 +103,14 @@ extern \"C\" { // utility functions\n  */\n void* safe_malloc(size_t size);\n \n+/**\n+ * calloc wrapper that asserts that the returned pointer is valid. Otherwise, the program exits.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3d3beed676670505600dfafb908df74324b6119"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NTQ5MjQx", "url": "https://github.com/envoyproxy/envoy-mobile/pull/940#pullrequestreview-447549241", "createdAt": "2020-07-13T19:45:59Z", "commit": {"oid": "de6f0808bbcd9f7d8d2e4e4e4538739c460ad467"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de6f0808bbcd9f7d8d2e4e4e4538739c460ad467", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/de6f0808bbcd9f7d8d2e4e4e4538739c460ad467", "committedDate": "2020-07-13T19:40:48Z", "message": "bump envoy\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "6483bdd77c02b5dc96f187838fe0e652dccbf45f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6483bdd77c02b5dc96f187838fe0e652dccbf45f", "committedDate": "2020-07-14T03:10:24Z", "message": "bump envoy\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b561ab0dcae6c4756a197e9ef85636a0226b7c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/84b561ab0dcae6c4756a197e9ef85636a0226b7c", "committedDate": "2020-07-15T03:08:55Z", "message": "filters: add initial support for bridged (header) filters\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edb56dc6c4d498a7669edc0b748eb836e74b2555", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/edb56dc6c4d498a7669edc0b748eb836e74b2555", "committedDate": "2020-07-15T03:08:55Z", "message": "refactor BridgeFilter and add PlatformStub implementation\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "827ccb8c16849f42d5a19126da22ad01471760cd", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/827ccb8c16849f42d5a19126da22ad01471760cd", "committedDate": "2020-07-15T03:08:55Z", "message": "updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e0c3a8dbd6a0f80a8fd7ad42197d513a0910c6c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9e0c3a8dbd6a0f80a8fd7ad42197d513a0910c6c", "committedDate": "2020-07-15T03:09:03Z", "message": "update comment\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b9983cf2ded70e9076bcdc7f0a1da38e13ab462", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7b9983cf2ded70e9076bcdc7f0a1da38e13ab462", "committedDate": "2020-07-15T03:09:42Z", "message": "standardize naming to PlatformBridgeFilter\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c46d9b1ec5381c68cd0d54fa09c8002896ce3efd", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c46d9b1ec5381c68cd0d54fa09c8002896ce3efd", "committedDate": "2020-07-15T03:09:42Z", "message": "updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf578af7eec0c51ed0a48f7366564e167d176306", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/bf578af7eec0c51ed0a48f7366564e167d176306", "committedDate": "2020-07-15T03:09:42Z", "message": "update api retrieval to occur during config loading\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e5196d906d24e60bb4a94ef0a54fc62e53a6cd3", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/0e5196d906d24e60bb4a94ef0a54fc62e53a6cd3", "committedDate": "2020-07-15T03:09:42Z", "message": "formatting\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa84b3c368bb9c633c5a3f203ca696355d24b430", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/fa84b3c368bb9c633c5a3f203ca696355d24b430", "committedDate": "2020-07-15T03:09:42Z", "message": "add link to optimization issue\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3af5dd42047912ae536646c0d66ef763f55beefb", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3af5dd42047912ae536646c0d66ef763f55beefb", "committedDate": "2020-07-15T03:09:42Z", "message": "minor update for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6483bdd77c02b5dc96f187838fe0e652dccbf45f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6483bdd77c02b5dc96f187838fe0e652dccbf45f", "committedDate": "2020-07-14T03:10:24Z", "message": "bump envoy\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "3af5dd42047912ae536646c0d66ef763f55beefb", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3af5dd42047912ae536646c0d66ef763f55beefb", "committedDate": "2020-07-15T03:09:42Z", "message": "minor update for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f431456c9e663c129744f8718306736b4d73628a", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/f431456c9e663c129744f8718306736b4d73628a", "committedDate": "2020-07-15T03:17:15Z", "message": "fix envoy ref\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d31150d99101dd447e43aecda9b8ddf67739423", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9d31150d99101dd447e43aecda9b8ddf67739423", "committedDate": "2020-07-15T03:35:09Z", "message": "fix format checker\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4094, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}