{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNzkyMTMz", "number": 1217, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODowNTo0NFrOFK_jjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODozMzozMVrOFLZKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDcxMzczOnYy", "diffSide": "RIGHT", "path": "library/cc/bridge_utility.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODowNTo0NFrOIN7jlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoyMzo0MVrOIN8FyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3ODE2Nw==", "bodyText": "My inclination is not to introduce std::vector<uint8_t> as a buffer representation unless there's a good pythonic reason for doing so. Can we simply directly use envoy_data?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551478167", "createdAt": "2021-01-04T18:05:44Z", "author": {"login": "goaway"}, "path": "library/cc/bridge_utility.h", "diffHunk": "@@ -0,0 +1,21 @@\n+#pragma once\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"headers.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+envoy_data buffer_as_envoy_data(const std::vector<uint8_t>& data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MDI1Ng==", "bodyText": "yeah--this translates into List[int] in Python, but Eventually\u2122 you can tell pybind11 out-of-the-box to reinterpret a std::vector<uint8_t> as a bytes object. that was my original motivation for it\na better approach (if it's supported by pybind11) is to just tell pybind11 how to interpret envoy_data as bytes, i'll look into it", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551480256", "createdAt": "2021-01-04T18:10:01Z", "author": {"login": "crockeo"}, "path": "library/cc/bridge_utility.h", "diffHunk": "@@ -0,0 +1,21 @@\n+#pragma once\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"headers.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+envoy_data buffer_as_envoy_data(const std::vector<uint8_t>& data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3ODE2Nw=="}, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4NjkyMA==", "bodyText": "Okay, cool - I'd just prefer not to introduce yet another buffer representation if at all possible.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551486920", "createdAt": "2021-01-04T18:23:41Z", "author": {"login": "goaway"}, "path": "library/cc/bridge_utility.h", "diffHunk": "@@ -0,0 +1,21 @@\n+#pragma once\n+\n+#include <string>\n+#include <vector>\n+\n+#include \"headers.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+envoy_data buffer_as_envoy_data(const std::vector<uint8_t>& data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ3ODE2Nw=="}, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDc0NzA5OnYy", "diffSide": "RIGHT", "path": "library/cc/stream_callbacks.h", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxNjoyMlrOIN73yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODo1Mjo0MFrOIOjKjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzMzNg==", "bodyText": "Maybe c_on_headers?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551483336", "createdAt": "2021-01-04T18:16:22Z", "author": {"login": "goaway"}, "path": "library/cc/stream_callbacks.h", "diffHunk": "@@ -32,9 +36,21 @@ class EnvoyHttpCallbacksAdapter {\n public:\n   EnvoyHttpCallbacksAdapter(ExecutorSharedPtr executor, StreamCallbacksSharedPtr callbacks);\n \n+  envoy_http_callbacks as_envoy_http_callbacks();\n+\n private:\n+  static void* dispatch_on_headers(envoy_headers headers, bool end_stream, void* context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTYzNDc3Ng==", "bodyText": "Or maybe not - I was thinking these would be the raw function pointers to go on the struct, but that doesn't look to be the case from the implementation.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551634776", "createdAt": "2021-01-04T23:42:21Z", "author": {"login": "goaway"}, "path": "library/cc/stream_callbacks.h", "diffHunk": "@@ -32,9 +36,21 @@ class EnvoyHttpCallbacksAdapter {\n public:\n   EnvoyHttpCallbacksAdapter(ExecutorSharedPtr executor, StreamCallbacksSharedPtr callbacks);\n \n+  envoy_http_callbacks as_envoy_http_callbacks();\n+\n private:\n+  static void* dispatch_on_headers(envoy_headers headers, bool end_stream, void* context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzMzNg=="}, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyNzAzMw==", "bodyText": "changed these all to c_..., hope that's ok!", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r552127033", "createdAt": "2021-01-05T18:52:28Z", "author": {"login": "crockeo"}, "path": "library/cc/stream_callbacks.h", "diffHunk": "@@ -32,9 +36,21 @@ class EnvoyHttpCallbacksAdapter {\n public:\n   EnvoyHttpCallbacksAdapter(ExecutorSharedPtr executor, StreamCallbacksSharedPtr callbacks);\n \n+  envoy_http_callbacks as_envoy_http_callbacks();\n+\n private:\n+  static void* dispatch_on_headers(envoy_headers headers, bool end_stream, void* context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzMzNg=="}, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjEyNzExOA==", "bodyText": "although i noticed that maybe they're still the same in engine.h, let me go back and fix that.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r552127118", "createdAt": "2021-01-05T18:52:40Z", "author": {"login": "crockeo"}, "path": "library/cc/stream_callbacks.h", "diffHunk": "@@ -32,9 +36,21 @@ class EnvoyHttpCallbacksAdapter {\n public:\n   EnvoyHttpCallbacksAdapter(ExecutorSharedPtr executor, StreamCallbacksSharedPtr callbacks);\n \n+  envoy_http_callbacks as_envoy_http_callbacks();\n+\n private:\n+  static void* dispatch_on_headers(envoy_headers headers, bool end_stream, void* context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4MzMzNg=="}, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDc1ODI1OnYy", "diffSide": "RIGHT", "path": "library/cc/headers.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxOTo0NlrOIN7-fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODoxOTo0NlrOIN7-fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ4NTA1Mw==", "bodyText": "Maybe RawHeaderMap?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551485053", "createdAt": "2021-01-04T18:19:46Z", "author": {"login": "goaway"}, "path": "library/cc/headers.h", "diffHunk": "@@ -1,12 +1,13 @@\n #pragma once\n \n-// NOLINT(namespace-envoy)\n-\n #include <string>\n #include <vector>\n \n #include \"absl/container/flat_hash_map.h\"\n \n+namespace Envoy {\n+namespace Platform {\n+\n using RawHeaders = absl::flat_hash_map<std::string, std::vector<std::string>>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDgxNDg2OnYy", "diffSide": "RIGHT", "path": "library/cc/executor.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODozNzowNFrOIN8f6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODozNzowNFrOIN8f6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5MzYwOQ==", "bodyText": "Envoy has a PURE macro we should use for this.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551493609", "createdAt": "2021-01-04T18:37:04Z", "author": {"login": "goaway"}, "path": "library/cc/executor.h", "diffHunk": "@@ -1,15 +1,19 @@\n #pragma once\n \n-// NOLINT(namespace-envoy)\n-\n #include <functional>\n #include <memory>\n \n+namespace Envoy {\n+namespace Platform {\n+\n class Executor {\n public:\n-  virtual ~Executor();\n+  virtual ~Executor() {}\n \n   virtual void execute(std::function<void()> closure) = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MDgxNzQ3OnYy", "diffSide": "RIGHT", "path": "library/cc/pulse_client.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODozNzo1M1rOIN8hfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNFQxODozNzo1M1rOIN8hfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTQ5NDAxMw==", "bodyText": "Use PURE macro (though it's commented out).", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r551494013", "createdAt": "2021-01-04T18:37:53Z", "author": {"login": "goaway"}, "path": "library/cc/pulse_client.h", "diffHunk": "@@ -1,20 +1,20 @@\n #pragma once\n \n-// NOLINT(namespace-envoy)\n-\n #include <memory>\n \n+namespace Envoy {\n+namespace Platform {\n+\n // TODO(crockeo): although this is stubbed out since it's in the main directory, it depends on\n // objects defined under stats. this will not be fully stubbed until stats is stubbed\n \n-// #include \"stats/counter.h\"\n-// #include \"stats/element.h\"\n-// #include \"stats/gauge.h\"\n-\n class PulseClient {\n public:\n   // virtual Counter counter(Element element) = 0;\n   // virtual Gauge gauge(Element element) = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDkwODk0OnYy", "diffSide": "RIGHT", "path": "library/cc/executor.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODozMzozMVrOIOikLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODozMzozMVrOIOikLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExNzI5NA==", "bodyText": "I'm still not certain that we need this. If callbacks in this context are std::function then they can have all the state embedded they need for dispatch. I'm not sure there's really a need for the new interface, and I'm a little bit hesitant to introduce one that bindings will come to rely on.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1217#discussion_r552117294", "createdAt": "2021-01-05T18:33:31Z", "author": {"login": "goaway"}, "path": "library/cc/executor.h", "diffHunk": "@@ -1,15 +1,19 @@\n #pragma once\n \n-// NOLINT(namespace-envoy)\n-\n #include <functional>\n #include <memory>\n \n+namespace Envoy {\n+namespace Platform {\n+\n class Executor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6a6519bc45a3501c3e66ba170d7da120ed5987b"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 558, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}