{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MDIyNTE1", "number": 1188, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoyOTo1NFrOE7wTSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoxNTowNFrOE_YN1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDkyODA4OnYy", "diffSide": "RIGHT", "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmStringAccessorContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDoyOTo1NFrOH3k3mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1NTo1OFrOH49frQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzc4NQ==", "bodyText": "Given that this accessor runs on the threading context that calls it I am not sure if we need it versus just passing the EnvoyStringAccessor to the jni and retaining that.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r528037785", "createdAt": "2020-11-21T00:29:54Z", "author": {"login": "junr03"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmStringAccessorContext.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyStringAccessor;\n+\n+class JvmStringAccessorContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4OTgzNw==", "bodyText": "The concrete class allows methods to be cached.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529489837", "createdAt": "2020-11-24T11:55:58Z", "author": {"login": "goaway"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmStringAccessorContext.java", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyStringAccessor;\n+\n+class JvmStringAccessorContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzNzc4NQ=="}, "originalCommit": {"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDkzMTUxOnYy", "diffSide": "RIGHT", "path": "library/java/src/io/envoyproxy/envoymobile/engine/types/EnvoyStringAccessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwMDozMjoxOFrOH3k5fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMjowNzowOFrOH5XutA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODI2OQ==", "bodyText": "decided to return a ByteBuffer here rather than a String to take advantage of the utilities we already have that bridge it into an envoy_data.\nAlthough it wouldn't be too complicated to create a bridging utility from String to envoy_data if we'd rather use that type.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r528038269", "createdAt": "2020-11-21T00:32:18Z", "author": {"login": "junr03"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/types/EnvoyStringAccessor.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package io.envoyproxy.envoymobile.engine.types;\n+\n+import java.nio.ByteBuffer;\n+\n+public interface EnvoyStringAccessor {\n+\n+  /**\n+   * Called to retrieve a string from the Application\n+   */\n+  ByteBuffer getString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ5MDE3NQ==", "bodyText": "Seems fine. Don't we already have a utility for String though?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529490175", "createdAt": "2020-11-24T11:56:35Z", "author": {"login": "goaway"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/types/EnvoyStringAccessor.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package io.envoyproxy.envoymobile.engine.types;\n+\n+import java.nio.ByteBuffer;\n+\n+public interface EnvoyStringAccessor {\n+\n+  /**\n+   * Called to retrieve a string from the Application\n+   */\n+  ByteBuffer getString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODI2OQ=="}, "originalCommit": {"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTkxOTY2OA==", "bodyText": "Not afaict? We have a byte buffer and a byte array utility. I guess the byte array one can be used with a jstring? But you have to copy.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529919668", "createdAt": "2020-11-24T22:07:08Z", "author": {"login": "junr03"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/types/EnvoyStringAccessor.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package io.envoyproxy.envoymobile.engine.types;\n+\n+import java.nio.ByteBuffer;\n+\n+public interface EnvoyStringAccessor {\n+\n+  /**\n+   * Called to retrieve a string from the Application\n+   */\n+  ByteBuffer getString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAzODI2OQ=="}, "originalCommit": {"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY5NjA0OnYy", "diffSide": "RIGHT", "path": "library/common/jni/jni_interface.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1MTowNFrOH49U9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1MTowNFrOH49U9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NzA5NA==", "bodyText": "This is a leak - the local ref needs to be deleted at the end of this function.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529487094", "createdAt": "2020-11-24T11:51:04Z", "author": {"login": "goaway"}, "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -610,6 +611,19 @@ static const void* jvm_http_filter_init(const void* context) {\n   return retained_filter;\n }\n \n+// EnvoyStringAccessor\n+\n+static envoy_data jvm_get_string(void* context) {\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmStringAccessorContext = env->GetObjectClass(j_context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY5NzcwOnYy", "diffSide": "RIGHT", "path": "library/common/jni/jni_interface.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1MTozMVrOH49V_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1MTozMVrOH49V_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NzM1OA==", "bodyText": "(This is not a leak - jmethodID is an int.)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529487358", "createdAt": "2020-11-24T11:51:31Z", "author": {"login": "goaway"}, "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -610,6 +611,19 @@ static const void* jvm_http_filter_init(const void* context) {\n   return retained_filter;\n }\n \n+// EnvoyStringAccessor\n+\n+static envoy_data jvm_get_string(void* context) {\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmStringAccessorContext = env->GetObjectClass(j_context);\n+  jmethodID jmid_getString =\n+      env->GetMethodID(jcls_JvmStringAccessorContext, \"getString\", \"()Ljava/lang/Object;\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMDY5OTI2OnYy", "diffSide": "RIGHT", "path": "library/common/jni/jni_interface.cc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMTo1MTo1OFrOH49W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMToxNToyOFrOH5Vcuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NzYwMQ==", "bodyText": "Also leaking.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529487601", "createdAt": "2020-11-24T11:51:58Z", "author": {"login": "goaway"}, "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -610,6 +611,19 @@ static const void* jvm_http_filter_init(const void* context) {\n   return retained_filter;\n }\n \n+// EnvoyStringAccessor\n+\n+static envoy_data jvm_get_string(void* context) {\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmStringAccessorContext = env->GetObjectClass(j_context);\n+  jmethodID jmid_getString =\n+      env->GetMethodID(jcls_JvmStringAccessorContext, \"getString\", \"()Ljava/lang/Object;\");\n+  // Passed as a java.nio.ByteBuffer.\n+  jobject data = env->CallObjectMethod(j_context, jmid_getString);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg4MjI5OQ==", "bodyText": "@goaway you mean the local ref, right?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r529882299", "createdAt": "2020-11-24T21:15:28Z", "author": {"login": "junr03"}, "path": "library/common/jni/jni_interface.cc", "diffHunk": "@@ -610,6 +611,19 @@ static const void* jvm_http_filter_init(const void* context) {\n   return retained_filter;\n }\n \n+// EnvoyStringAccessor\n+\n+static envoy_data jvm_get_string(void* context) {\n+  JNIEnv* env = get_env();\n+  jobject j_context = static_cast<jobject>(context);\n+  jclass jcls_JvmStringAccessorContext = env->GetObjectClass(j_context);\n+  jmethodID jmid_getString =\n+      env->GetMethodID(jcls_JvmStringAccessorContext, \"getString\", \"()Ljava/lang/Object;\");\n+  // Passed as a java.nio.ByteBuffer.\n+  jobject data = env->CallObjectMethod(j_context, jmid_getString);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ4NzYwMQ=="}, "originalCommit": {"oid": "fbb1690b8226388aa875b49c2d1ce116f9ccd505"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0ODkyNTAxOnYy", "diffSide": "RIGHT", "path": "library/common/api/c_types.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoxNTowNFrOH9DtrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQyMzoxNTowNFrOH9DtrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzc4NjAyOQ==", "bodyText": "Please add a docstring here and clarify that this is ready only.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1188#discussion_r533786029", "createdAt": "2020-12-01T23:15:04Z", "author": {"login": "goaway"}, "path": "library/common/api/c_types.h", "diffHunk": "@@ -0,0 +1,20 @@\n+#pragma once\n+\n+#include \"library/common/types/c_types.h\"\n+\n+// NOLINT(namespace-envoy)\n+\n+#ifdef __cplusplus\n+extern \"C\" { // function pointers\n+#endif\n+\n+typedef envoy_data (*envoy_get_string_f)(void* context);\n+\n+#ifdef __cplusplus\n+} // function pointers\n+#endif\n+\n+typedef struct {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5659a0199d0103a81cf68e1eac62187c00ed1961"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 519, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}