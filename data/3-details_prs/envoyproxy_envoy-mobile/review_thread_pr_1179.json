{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMjIxMDM1", "number": 1179, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowNjo0MFrOE6JnZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowNjo0MFrOE6JnZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDEwNDA1OnYy", "diffSide": "RIGHT", "path": "library/java/test/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistryTest.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowNjo0MFrOH1CcDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQwNzoxNzozN1rOH1f8NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NjUyNg==", "bodyText": "Would this still work if we create a private method which does this instead of inlining it into each test (this is so we can more easily add a new test or change the wrapper)?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1179#discussion_r525376526", "createdAt": "2020-11-17T18:06:40Z", "author": {"login": "buildbreaker"}, "path": "library/java/test/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistryTest.kt", "diffHunk": "@@ -0,0 +1,52 @@\n+package io.envoyproxy.envoymobile.engine\n+\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.TimeUnit\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class EnvoyNativeResourceRegistryTest {\n+\n+  @Test\n+  fun `release callbacks are invoked when EnvoyNativeResourceWrappers are flagged as unreachable`() {\n+    val latch = CountDownLatch(1)\n+    val testHandle: Long = 77\n+    // Force Wrapper out of scope so the GC picks it up. \u00af\\_(\u30c4)_/\u00af\n+    for (i in 0..1 step 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61e06a50f8437c01ef08fc15e1db46da768f4676"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1OTI3NA==", "bodyText": "It... might? I wouldn't be able to simply move the wrapper in and out of scope though like I'm doing in these two tests though. This was the simplest approach I could come up with to get the GC to run consistently. Various lambda-based approaches I tried did not work.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1179#discussion_r525859274", "createdAt": "2020-11-18T07:15:57Z", "author": {"login": "goaway"}, "path": "library/java/test/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistryTest.kt", "diffHunk": "@@ -0,0 +1,52 @@\n+package io.envoyproxy.envoymobile.engine\n+\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.TimeUnit\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class EnvoyNativeResourceRegistryTest {\n+\n+  @Test\n+  fun `release callbacks are invoked when EnvoyNativeResourceWrappers are flagged as unreachable`() {\n+    val latch = CountDownLatch(1)\n+    val testHandle: Long = 77\n+    // Force Wrapper out of scope so the GC picks it up. \u00af\\_(\u30c4)_/\u00af\n+    for (i in 0..1 step 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NjUyNg=="}, "originalCommit": {"oid": "61e06a50f8437c01ef08fc15e1db46da768f4676"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg1OTg5Mg==", "bodyText": "TBQH I'm somewhat disinclined to put even more time in this, given the time it took to get something that was both simple and seemed to work consistently.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1179#discussion_r525859892", "createdAt": "2020-11-18T07:17:37Z", "author": {"login": "goaway"}, "path": "library/java/test/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistryTest.kt", "diffHunk": "@@ -0,0 +1,52 @@\n+package io.envoyproxy.envoymobile.engine\n+\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.TimeUnit\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class EnvoyNativeResourceRegistryTest {\n+\n+  @Test\n+  fun `release callbacks are invoked when EnvoyNativeResourceWrappers are flagged as unreachable`() {\n+    val latch = CountDownLatch(1)\n+    val testHandle: Long = 77\n+    // Force Wrapper out of scope so the GC picks it up. \u00af\\_(\u30c4)_/\u00af\n+    for (i in 0..1 step 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3NjUyNg=="}, "originalCommit": {"oid": "61e06a50f8437c01ef08fc15e1db46da768f4676"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 510, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}