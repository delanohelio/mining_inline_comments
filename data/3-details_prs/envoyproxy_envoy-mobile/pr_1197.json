{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNzg0ODc4", "number": 1197, "title": "python: create python bindings stub", "bodyText": "Description: I'm going to be working with @goaway on setting up Python bindings to envoy-mobile to be used for a requests-like library that uses envoy-mobile, rather than urllib3, for its underlying networking. This PR creates the stubs for the Python platform implementation, which will be translated into a Python module using pybind11.\nThis PR contains only the stubs for the core engine implementation (i.e. no gRPC, no stats, no filter). Stubs and implementations for those features will come later.\nRisk Level: Low\nTesting: N/A for now. We'll put together tests in Python and/or C++ for the types exposed from this library when they have associated functionality.\nDocs Changes: N/A\nRelease Notes: N/A (yet?)", "createdAt": "2020-12-04T20:59:25Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197", "merged": true, "mergeCommit": {"oid": "3e47afea209add543bd43aeea18b2aaebbf6e992"}, "closed": true, "closedAt": "2020-12-15T19:26:23Z", "author": {"login": "crockeo"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdi-qs8gFqTU0NTMwOTU3MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoPjwLAFqTU1NjE0NjI3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzA5NTcx", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#pullrequestreview-545309571", "createdAt": "2020-12-04T21:31:25Z", "commit": {"oid": "081f9bf2bcf9907eac7f140f0ed81a8e24005548"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozMToyNVrOH_iuug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozMToyNVrOH_iuug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MTM1NA==", "bodyText": "Having envoy_mobile in the path seems a little bit funky. Could this be pybind or cc_platform?\nAlso maybe the cc_library belongs in //library/cc and just the pybind_extension should go here.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r536391354", "createdAt": "2020-12-04T21:31:25Z", "author": {"login": "goaway"}, "path": "library/python/envoy_mobile/BUILD", "diffHunk": "@@ -0,0 +1,49 @@\n+load(\"@pybind11_bazel//:build_defs.bzl\", \"pybind_extension\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081f9bf2bcf9907eac7f140f0ed81a8e24005548"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1MzEwMTM1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#pullrequestreview-545310135", "createdAt": "2020-12-04T21:32:30Z", "commit": {"oid": "081f9bf2bcf9907eac7f140f0ed81a8e24005548"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozMjozMFrOH_iwpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQyMTozMjozMFrOH_iwpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjM5MTg0Nw==", "bodyText": "I don't know that we should necessarily have this, since it's basically where we'd want to plug in native python dispatch. I mean, it is a flexible and pretty agnostic interface, but does it really align with python based dispatch mechanisms?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r536391847", "createdAt": "2020-12-04T21:32:30Z", "author": {"login": "goaway"}, "path": "library/python/envoy_mobile/executor.h", "diffHunk": "@@ -0,0 +1,11 @@\n+#pragma once\n+\n+#include <functional>\n+\n+\n+class Executor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081f9bf2bcf9907eac7f140f0ed81a8e24005548"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "081f9bf2bcf9907eac7f140f0ed81a8e24005548", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/081f9bf2bcf9907eac7f140f0ed81a8e24005548", "committedDate": "2020-12-04T21:20:18Z", "message": "move load to right place; fix missing dep\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}, "afterCommit": {"oid": "1d953195c130730c7aedb0b4481a903cc4486aae", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/1d953195c130730c7aedb0b4481a903cc4486aae", "committedDate": "2020-12-05T01:30:47Z", "message": "impl python platform stub, this time with signing\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NDI5MzQ4", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#pullrequestreview-546429348", "createdAt": "2020-12-07T18:40:08Z", "commit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODo0MDowOFrOIA08zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxODo1MzozNFrOIA1eMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczODQ0NQ==", "bodyText": "make this const std::string&", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537738445", "createdAt": "2020-12-07T18:40:08Z", "author": {"login": "crockeo"}, "path": "library/cc/headers_builder.h", "diffHunk": "@@ -0,0 +1,19 @@\n+#pragma once\n+\n+#include \"headers.h\"\n+\n+class HeadersBuilder {\n+public:\n+  HeadersBuilder& add(const std::string& name, std::string& value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczODU4OA==", "bodyText": "LogLeve -> LogLevel", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537738588", "createdAt": "2020-12-07T18:40:25Z", "author": {"login": "crockeo"}, "path": "library/cc/log_level.h", "diffHunk": "@@ -0,0 +1,32 @@\n+#pragma once\n+\n+#include <string>\n+\n+/**\n+ * See: https://pybind11.readthedocs.io/en/stable/classes.html#enumerations-and-internal-types\n+ * this set up will let Python see:\n+ *\n+ * LogLevel.Trace = the enum value\n+ * LogLevel.to_string(LogLeve.Trace) = the string value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczODYyOQ==", "bodyText": "static", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537738629", "createdAt": "2020-12-07T18:40:31Z", "author": {"login": "crockeo"}, "path": "library/cc/log_level.h", "diffHunk": "@@ -0,0 +1,32 @@\n+#pragma once\n+\n+#include <string>\n+\n+/**\n+ * See: https://pybind11.readthedocs.io/en/stable/classes.html#enumerations-and-internal-types\n+ * this set up will let Python see:\n+ *\n+ * LogLevel.Trace = the enum value\n+ * LogLevel.to_string(LogLeve.Trace) = the string value\n+ *\n+ * But it's not actually constructible bc of the private constructor (this may not work in practice,\n+ * as pybind11 may require that there is a public constructor for py::init)\n+ */\n+class LogLevel {\n+public:\n+  enum _LogLevel {\n+    Trace,\n+    Debug,\n+    Info,\n+    Warn,\n+    Error,\n+    Critical,\n+    Off,\n+  };\n+\n+  _LogLevel from_string(std::string log_level);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzczOTQyMg==", "bodyText": "this can probably just be const std::string& and avoid copying strings here, same for the rest of them", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537739422", "createdAt": "2020-12-07T18:41:43Z", "author": {"login": "crockeo"}, "path": "library/cc/request_headers.h", "diffHunk": "@@ -0,0 +1,26 @@\n+#pragma once\n+\n+#include <optional>\n+\n+#include \"headers.h\"\n+#include \"request_headers_builder.h\"\n+#include \"request_method.h\"\n+#include \"retry_policy.h\"\n+#include \"upstream_http_protocol.h\"\n+\n+class RequestHeaders : public Headers {\n+public:\n+  RequestMethod request_method() const;\n+  std::string scheme() const;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MDEzNQ==", "bodyText": "C++ question:\n\n\ndo I even need this, or will inheritance automatically allow subclasses to have the superclass's implementation?\n\n\ni have a feeling that this will return a HeadersBuilder& instead of a RequestHeadersBuilder&, is that right?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537740135", "createdAt": "2020-12-07T18:42:52Z", "author": {"login": "crockeo"}, "path": "library/cc/request_headers_builder.h", "diffHunk": "@@ -0,0 +1,30 @@\n+#pragma once\n+\n+#include <string>\n+\n+#include \"headers_builder.h\"\n+#include \"request_headers.h\"\n+#include \"request_method.h\"\n+#include \"retry_policy.h\"\n+#include \"upstream_http_protocol.h\"\n+\n+class RequestHeaders;\n+\n+class RequestHeadersBuilder : public HeadersBuilder {\n+public:\n+  RequestHeadersBuilder(RequestMethod::_RequestMethod request_method, const std::string& scheme,\n+                        const std::string& authority, const std::string& path);\n+\n+  using HeadersBuilder::add;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MTM2NA==", "bodyText": "it could be more performant to put this directly into an already-existing RawHeaders instance, or otherwise just add headers to a HeadersBuilder reference, but the API wouldn't be nearly as nice", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537741364", "createdAt": "2020-12-07T18:44:47Z", "author": {"login": "crockeo"}, "path": "library/cc/retry_policy.h", "diffHunk": "@@ -0,0 +1,36 @@\n+#pragma once\n+\n+#include \"headers.h\"\n+#include \"request_headers.h\"\n+\n+class RequestHeaders;\n+\n+class RetryRule {\n+public:\n+  enum _RetryRule {\n+    Status5xx,\n+    GatewayFailure,\n+    ConnectFailure,\n+    RefusedStream,\n+    Retriable4xx,\n+    RetriableHeaders,\n+    Reset,\n+  };\n+\n+  static _RetryRule from_string(std::string retry_rule);\n+  static std::string to_string(_RetryRule retry_rule);\n+\n+private:\n+  RetryRule() {}\n+};\n+\n+struct RetryPolicy {\n+  int max_retry_count;\n+  int retry_on;\n+  std::vector<int> retry_status_codes;\n+  int per_try_timeout_ms;\n+  int total_upstream_timeout_ms;\n+\n+  RawHeaders output_headers() const;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MjU3Mg==", "bodyText": "i've been futzing around in rust-land where i get to feel comfortable about reference lifetimes. this isn't really safe per se, but its lifetime will be articulated in a pybind11::keep_alive on the python obj definition", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537742572", "createdAt": "2020-12-07T18:46:40Z", "author": {"login": "crockeo"}, "path": "library/cc/stream_callbacks.h", "diffHunk": "@@ -0,0 +1,34 @@\n+#pragma once\n+\n+#include <cstddef>\n+#include <optional>\n+#include <vector>\n+\n+#include \"envoy_error.h\"\n+#include \"executor.h\"\n+#include \"response_headers.h\"\n+#include \"response_trailers.h\"\n+\n+using OnHeadersCallback = std::function<void(ResponseHeaders headers, bool end_stream)>;\n+using OnDataCallback = std::function<void(std::vector<std::byte> data, bool end_stream)>;\n+using OnTrailersCallback = std::function<void(ResponseTrailers trailers)>;\n+using OnCancelCallback = std::function<void()>;\n+using OnErrorCallback = std::function<void(EnvoyError error)>;\n+\n+struct StreamCallbacks {\n+  std::optional<OnHeadersCallback> on_headers;\n+  std::optional<OnDataCallback> on_data;\n+  std::optional<OnTrailersCallback> on_trailers;\n+  std::optional<OnCancelCallback> on_cancel;\n+  std::optional<OnErrorCallback> on_error;\n+};\n+\n+class EnvoyHttpCallbacksAdapter {\n+public:\n+  EnvoyHttpCallbacksAdapter(Executor executor, StreamCallbacks callbacks);\n+\n+private:\n+  // TODO(crockeo): figure out lifecycle management here\n+  Executor& executor_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0MzAxOA==", "bodyText": "use callback types here to make sure they stay the same", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537743018", "createdAt": "2020-12-07T18:47:21Z", "author": {"login": "crockeo"}, "path": "library/cc/stream_prototype.h", "diffHunk": "@@ -0,0 +1,34 @@\n+#pragma once\n+\n+#include <cstddef>\n+#include <functional>\n+\n+#include \"engine.h\"\n+#include \"envoy_error.h\"\n+#include \"executor.h\"\n+#include \"response_headers.h\"\n+#include \"response_trailers.h\"\n+#include \"stream.h\"\n+#include \"stream_callbacks.h\"\n+\n+class Engine;\n+\n+class StreamPrototype {\n+public:\n+  StreamPrototype(Engine engine);\n+\n+  Stream start(Executor executor);\n+\n+  StreamPrototype& set_on_response_headers(\n+      std::function<void(const ResponseHeaders& headers, bool end_stream)> closure);\n+  StreamPrototype& set_on_response_data(\n+      std::function<void(const std::vector<std::byte>& bytes, bool end_stream)> closure);\n+  StreamPrototype&\n+  set_on_response_trailers(std::function<void(const ResponseTrailers& trailers)> closure);\n+  StreamPrototype& set_on_error(std::function<void(const EnvoyError& error)> closure);\n+  StreamPrototype& set_on_cancel(std::function<void()> closure);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc0Njk5Mg==", "bodyText": "rm this build file", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r537746992", "createdAt": "2020-12-07T18:53:34Z", "author": {"login": "crockeo"}, "path": "library/python/envoy_mobile/BUILD", "diffHunk": "@@ -0,0 +1,49 @@\n+load(\"@pybind11_bazel//:build_defs.bzl\", \"pybind_extension\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad439322ff929ab226f5b5ce4054077eae2ae908"}, "originalPosition": 1}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzMwMDI5", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#pullrequestreview-548730029", "createdAt": "2020-12-10T00:36:52Z", "commit": {"oid": "0598b4d9361f339ec0e4ead58d52bca8f758f8c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozNjo1MlrOICwAOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozNjo1MlrOICwAOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1NDU1Mg==", "bodyText": "Is there an Envoy enum we can leverage for this?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r539754552", "createdAt": "2020-12-10T00:36:52Z", "author": {"login": "goaway"}, "path": "library/cc/log_level.h", "diffHunk": "@@ -0,0 +1,11 @@\n+#pragma once\n+\n+enum LogLevel {\n+  Trace,\n+  Debug,\n+  Info,\n+  Warn,\n+  Error,\n+  Critical,\n+  Off,\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0598b4d9361f339ec0e4ead58d52bca8f758f8c0"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzMwMTcy", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#pullrequestreview-548730172", "createdAt": "2020-12-10T00:37:12Z", "commit": {"oid": "0598b4d9361f339ec0e4ead58d52bca8f758f8c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozNzoxM1rOICwAvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDozNzoxM1rOICwAvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1NDY4NA==", "bodyText": "Here, too, I'd look to just use an Envoy-defined enum, I think.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r539754684", "createdAt": "2020-12-10T00:37:13Z", "author": {"login": "goaway"}, "path": "library/cc/request_method.h", "diffHunk": "@@ -0,0 +1,12 @@\n+#pragma once\n+\n+enum RequestMethod {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0598b4d9361f339ec0e4ead58d52bca8f758f8c0"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzMyMjE5", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#pullrequestreview-548732219", "createdAt": "2020-12-10T00:42:24Z", "commit": {"oid": "0598b4d9361f339ec0e4ead58d52bca8f758f8c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDo0MjoyNVrOICwI8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwMDo0MjoyNVrOICwI8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTc1Njc4Ng==", "bodyText": "Is there a pybind reason to use this buffer representation? If not, I'd propose we use uint8_t (which Envoy currently uses internally) and probably just simple arrays.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r539756786", "createdAt": "2020-12-10T00:42:25Z", "author": {"login": "goaway"}, "path": "library/cc/stream.h", "diffHunk": "@@ -0,0 +1,22 @@\n+#pragma once\n+\n+#include <cstddef>\n+#include <vector>\n+\n+#include \"library/common/types/c_types.h\"\n+#include \"request_headers.h\"\n+#include \"request_trailers.h\"\n+\n+class Stream {\n+public:\n+  Stream(envoy_stream_t handle);\n+\n+  Stream& send_headers(const RequestHeaders& headers, bool end_stream);\n+  Stream& send_data(const std::vector<std::byte>& data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0598b4d9361f339ec0e4ead58d52bca8f758f8c0"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df9b1fc1fdc76b8f8276677aa17e29c33641b169", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/df9b1fc1fdc76b8f8276677aa17e29c33641b169", "committedDate": "2020-12-11T15:19:14Z", "message": "impl python platform stub, this time with signing\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cb7148788dfd416248ab389199103a5966835c8", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/1cb7148788dfd416248ab389199103a5966835c8", "committedDate": "2020-12-11T15:19:14Z", "message": "renaming in accordance w/ comments\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6eecfd75e9aefefa90e026a141059b114b0d3a2", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/e6eecfd75e9aefefa90e026a141059b114b0d3a2", "committedDate": "2020-12-11T15:19:14Z", "message": "clang-format on cc lib\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ac531e5de5b55f8c79d5e3b1461a8a5edc39268", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/8ac531e5de5b55f8c79d5e3b1461a8a5edc39268", "committedDate": "2020-12-11T15:19:14Z", "message": "my own comments\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6211e5135b1385795ed35d5ab08d83cff54b5194", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6211e5135b1385795ed35d5ab08d83cff54b5194", "committedDate": "2020-12-11T15:19:14Z", "message": "make executor trampoline...and then made a couple more todos\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d99971362c1b0d2d26ef94b8e7353a6958afafd3", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/d99971362c1b0d2d26ef94b8e7353a6958afafd3", "committedDate": "2020-12-11T15:19:14Z", "message": "impl enums\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f961be0f0bfba2cfb5acd1bad542753df2e6613", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7f961be0f0bfba2cfb5acd1bad542753df2e6613", "committedDate": "2020-12-11T15:19:14Z", "message": "cont stubs\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2932ac2730773cf38e82b889a27b3a0c667c0b2b", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/2932ac2730773cf38e82b889a27b3a0c667c0b2b", "committedDate": "2020-12-11T15:19:14Z", "message": "move over to shared ptrs\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82ed336d26480fbfe059ec1726b3a3cc6e66935", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c82ed336d26480fbfe059ec1726b3a3cc6e66935", "committedDate": "2020-12-11T15:19:14Z", "message": "unify headers-like interface\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f6789521598955425ffdb65236c1bf148dc9fc7", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/1f6789521598955425ffdb65236c1bf148dc9fc7", "committedDate": "2020-12-11T15:19:14Z", "message": "get rid of log level in favor of envoy type\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f79932503366033cf915fd696d225c03f8a1b7c4", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/f79932503366033cf915fd696d225c03f8a1b7c4", "committedDate": "2020-12-11T15:19:14Z", "message": "exactly 1 missing word\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9f06b4da2d97daa766cbb0d39a28836eb9e30bc", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/a9f06b4da2d97daa766cbb0d39a28836eb9e30bc", "committedDate": "2020-12-11T15:19:14Z", "message": "replace bytes with uint8_t...and also catch places where i had still imported log_level\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50d29d2b8169dcad2a724382ebb93d33b10911e1", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/50d29d2b8169dcad2a724382ebb93d33b10911e1", "committedDate": "2020-12-11T15:19:14Z", "message": "check-format\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "24192b32ff0cbab37f0354c85632b3baf38b0786", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/24192b32ff0cbab37f0354c85632b3baf38b0786", "committedDate": "2020-12-11T04:49:31Z", "message": "check-format\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}, "afterCommit": {"oid": "50d29d2b8169dcad2a724382ebb93d33b10911e1", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/50d29d2b8169dcad2a724382ebb93d33b10911e1", "committedDate": "2020-12-11T15:19:14Z", "message": "check-format\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b430f8832101589466aa5bdc4ba08e159743b6b3", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b430f8832101589466aa5bdc4ba08e159743b6b3", "committedDate": "2020-12-11T17:26:36Z", "message": "Merge branch 'main' into ch/python-bindings-stub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c75b746110231cbc33483207fbc0e3c7d58049bb", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c75b746110231cbc33483207fbc0e3c7d58049bb", "committedDate": "2020-12-11T19:46:38Z", "message": "one last API change + fix the build from check_format\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6324d96459de11fe384fca8b19838a9e95117cdb", "author": {"user": {"login": "crockeo", "name": "Cerek Hillen"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6324d96459de11fe384fca8b19838a9e95117cdb", "committedDate": "2020-12-11T19:57:18Z", "message": "add @envoy prefix to more places\n\nSigned-off-by: Cerek Hillen <chillen@lyft.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNzk0NjQy", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#pullrequestreview-552794642", "createdAt": "2020-12-15T19:24:37Z", "commit": {"oid": "6324d96459de11fe384fca8b19838a9e95117cdb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTQ0NTU1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#pullrequestreview-556144555", "createdAt": "2020-12-21T05:56:07Z", "commit": {"oid": "6324d96459de11fe384fca8b19838a9e95117cdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNTo1NjowN1rOIJNEYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNTo1NjowN1rOIJNEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyMjIxMQ==", "bodyText": "After thinking about this a bit, I think we should switch to using envoy_data directly in this implementation to represent buffers. Python's buffer protocol doesn't deal in vectors, nor do any buffer representations in Envoy. We've already have a bridge implementation of Envoy's internal buffer type defined in terms of envoy_data. It seems like using vectors will just result in extra indirection, and potentially, copies.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r546522211", "createdAt": "2020-12-21T05:56:07Z", "author": {"login": "goaway"}, "path": "library/cc/stream.h", "diffHunk": "@@ -0,0 +1,25 @@\n+#pragma once\n+\n+// NOLINT(namespace-envoy)\n+\n+#include <vector>\n+\n+#include \"library/common/types/c_types.h\"\n+#include \"request_headers.h\"\n+#include \"request_trailers.h\"\n+\n+class Stream {\n+public:\n+  Stream(envoy_stream_t handle);\n+\n+  Stream& send_headers(RequestHeadersSharedPtr headers, bool end_stream);\n+  Stream& send_data(const std::vector<uint8_t>& data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6324d96459de11fe384fca8b19838a9e95117cdb"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2MTQ2Mjc0", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#pullrequestreview-556146274", "createdAt": "2020-12-21T06:01:49Z", "commit": {"oid": "6324d96459de11fe384fca8b19838a9e95117cdb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjowMTo1MFrOIJNJ_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQwNjowMTo1MFrOIJNJ_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjUyMzY0NA==", "bodyText": "Let's namespace everything in these files. Envoy::Mobile, Envoy::Platform, Envoy::Lib/rary all seem like reasonable candidates to me.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1197#discussion_r546523644", "createdAt": "2020-12-21T06:01:50Z", "author": {"login": "goaway"}, "path": "library/cc/engine.h", "diffHunk": "@@ -0,0 +1,29 @@\n+#pragma once\n+\n+// NOLINT(namespace-envoy)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6324d96459de11fe384fca8b19838a9e95117cdb"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3930, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}