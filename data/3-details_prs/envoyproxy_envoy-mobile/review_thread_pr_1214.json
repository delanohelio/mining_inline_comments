{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyNjkyOTE2", "number": 1214, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowMTozNlrOFHSgYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxODoyNjo1MlrOFXQXMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTg3NTU1OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowMTozNlrOIItEmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQyMToyODowNlrOIIzQwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5Nzk3OA==", "bodyText": "Why don't we use the *FromStatNames methods in utility.h? I see that we are passing a dynamic name, but I'm not sure why it needs to be a dynamic name.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r545997978", "createdAt": "2020-12-18T18:01:36Z", "author": {"login": "donyu"}, "path": "library/common/engine.cc", "diffHunk": "@@ -154,6 +154,19 @@ envoy_status_t Engine::recordGaugeSub(const std::string& elements, uint64_t amou\n   return ENVOY_FAILURE;\n }\n \n+envoy_status_t Engine::recordHistogramDurationMs(const std::string& elements, uint64_t amount) {\n+  if (server_ && client_scope_) {\n+    std::string name = Stats::Utility::sanitizeStatsName(elements);\n+    server_->dispatcher().post([this, name, amount]() -> void {\n+      Stats::Utility::histogramFromElements(*client_scope_, {Stats::DynamicName(name)},", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db7f194adeb52375b3e8e005935c057d9ee4cf1c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzMTUxOQ==", "bodyText": "if i remember it correctly, it's bc the other way(w/o dynamic name) it requires changes on the c++ layer, which we might/could port to the platform layer, it adds complexity tho, there was a discussion on this when counter was introduced", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r546031519", "createdAt": "2020-12-18T19:01:51Z", "author": {"login": "jingwei99"}, "path": "library/common/engine.cc", "diffHunk": "@@ -154,6 +154,19 @@ envoy_status_t Engine::recordGaugeSub(const std::string& elements, uint64_t amou\n   return ENVOY_FAILURE;\n }\n \n+envoy_status_t Engine::recordHistogramDurationMs(const std::string& elements, uint64_t amount) {\n+  if (server_ && client_scope_) {\n+    std::string name = Stats::Utility::sanitizeStatsName(elements);\n+    server_->dispatcher().post([this, name, amount]() -> void {\n+      Stats::Utility::histogramFromElements(*client_scope_, {Stats::DynamicName(name)},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5Nzk3OA=="}, "originalCommit": {"oid": "db7f194adeb52375b3e8e005935c057d9ee4cf1c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjA5OTM5Mw==", "bodyText": "Ah got it. Thanks for the context - I'll stick to dynamic names then.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r546099393", "createdAt": "2020-12-18T21:28:06Z", "author": {"login": "donyu"}, "path": "library/common/engine.cc", "diffHunk": "@@ -154,6 +154,19 @@ envoy_status_t Engine::recordGaugeSub(const std::string& elements, uint64_t amou\n   return ENVOY_FAILURE;\n }\n \n+envoy_status_t Engine::recordHistogramDurationMs(const std::string& elements, uint64_t amount) {\n+  if (server_ && client_scope_) {\n+    std::string name = Stats::Utility::sanitizeStatsName(elements);\n+    server_->dispatcher().post([this, name, amount]() -> void {\n+      Stats::Utility::histogramFromElements(*client_scope_, {Stats::DynamicName(name)},", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5Nzk3OA=="}, "originalCommit": {"oid": "db7f194adeb52375b3e8e005935c057d9ee4cf1c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTg4MzQ4OnYy", "diffSide": "RIGHT", "path": "library/common/engine.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowNDowOFrOIItJTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxOTowNDoyN1rOIIvMeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5OTE4Mg==", "bodyText": "Put this down as a DurationMs since it's the most common use case I see on the mobile side, but I'm going to move this to an enum so clients can record any unit values e.g. bytes/ms/us", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r545999182", "createdAt": "2020-12-18T18:04:08Z", "author": {"login": "donyu"}, "path": "library/common/engine.h", "diffHunk": "@@ -63,6 +63,13 @@ class Engine {\n    */\n   envoy_status_t recordGaugeSub(const std::string& elements, uint64_t amount);\n \n+  /**\n+   * Record a value for the histogram with the given string of elements\n+   * @param elements, joined elements of the timeseries.\n+   * @param amount, amount to add to the aggregated pool of events for quantile calculations\n+   */\n+  envoy_status_t recordHistogramDurationMs(const std::string& elements, uint64_t amount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db7f194adeb52375b3e8e005935c057d9ee4cf1c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzMjIwNw==", "bodyText": "probably just do recordHistogram, and client can decide the unit for the histogram", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r546032207", "createdAt": "2020-12-18T19:03:17Z", "author": {"login": "jingwei99"}, "path": "library/common/engine.h", "diffHunk": "@@ -63,6 +63,13 @@ class Engine {\n    */\n   envoy_status_t recordGaugeSub(const std::string& elements, uint64_t amount);\n \n+  /**\n+   * Record a value for the histogram with the given string of elements\n+   * @param elements, joined elements of the timeseries.\n+   * @param amount, amount to add to the aggregated pool of events for quantile calculations\n+   */\n+  envoy_status_t recordHistogramDurationMs(const std::string& elements, uint64_t amount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5OTE4Mg=="}, "originalCommit": {"oid": "db7f194adeb52375b3e8e005935c057d9ee4cf1c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAzMjc2MA==", "bodyText": "and uint64_t amount -> uint64_t value", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r546032760", "createdAt": "2020-12-18T19:04:27Z", "author": {"login": "jingwei99"}, "path": "library/common/engine.h", "diffHunk": "@@ -63,6 +63,13 @@ class Engine {\n    */\n   envoy_status_t recordGaugeSub(const std::string& elements, uint64_t amount);\n \n+  /**\n+   * Record a value for the histogram with the given string of elements\n+   * @param elements, joined elements of the timeseries.\n+   * @param amount, amount to add to the aggregated pool of events for quantile calculations\n+   */\n+  envoy_status_t recordHistogramDurationMs(const std::string& elements, uint64_t amount);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5OTE4Mg=="}, "originalCommit": {"oid": "db7f194adeb52375b3e8e005935c057d9ee4cf1c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTg4NjU3OnYy", "diffSide": "RIGHT", "path": "library/common/main_interface.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowNToxNFrOIItLOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODowNToxNFrOIItLOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTk5OTY3NA==", "bodyText": "This is then called in jni_interface.cc for Android clients.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r545999674", "createdAt": "2020-12-18T18:05:14Z", "author": {"login": "donyu"}, "path": "library/common/main_interface.h", "diffHunk": "@@ -133,6 +133,15 @@ envoy_status_t record_gauge_add(envoy_engine_t engine, const char* elements, uin\n  * @param amount, amount to subtract from the gauge.\n  */\n envoy_status_t record_gauge_sub(envoy_engine_t engine, const char* elements, uint64_t amount);\n+\n+/**\n+ * Add another recorded amount to the histogram with the given string of elements.\n+ * @param engine, the engine that owns the histogram.\n+ * @param elements, the string that identifies the histogram to subtract from.\n+ * @param amount, amount to record as a new value for the histogram.\n+ */\n+envoy_status_t record_histogram_duration_ms(envoy_engine_t engine, const char* elements, uint64_t amount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db7f194adeb52375b3e8e005935c057d9ee4cf1c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTkxMTI2OnYy", "diffSide": "RIGHT", "path": "library/java/src/io/envoyproxy/envoymobile/engine/AndroidEngineImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxMjoyM1rOIItZuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODoxMjoyM1rOIItZuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAwMzM4Nw==", "bodyText": "This will be used in a follow-up PR for the actual interface that clients will use to record histogram stats.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r546003387", "createdAt": "2020-12-18T18:12:23Z", "author": {"login": "donyu"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/AndroidEngineImpl.java", "diffHunk": "@@ -60,6 +60,16 @@ public int recordGaugeSub(String elements, int amount) {\n     return envoyEngine.recordGaugeSub(elements, amount);\n   }\n \n+  @Override\n+  public int recordGaugeSub(String elements, int amount) {\n+    return envoyEngine.recordGaugeSub(elements, amount);\n+  }\n+\n+  @Override\n+  public int recordHistogramDurationMs(String elements, int duration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db7f194adeb52375b3e8e005935c057d9ee4cf1c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMjA1MTQyOnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODo1MjowMVrOIIuuWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxODo1MjowMVrOIIuuWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjAyNTA0OQ==", "bodyText": "This is the only method exposed in histogram.h and all we really need to assign more values to the collection of data points in the histogram.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r546025049", "createdAt": "2020-12-18T18:52:01Z", "author": {"login": "donyu"}, "path": "library/common/engine.cc", "diffHunk": "@@ -154,6 +154,19 @@ envoy_status_t Engine::recordGaugeSub(const std::string& elements, uint64_t amou\n   return ENVOY_FAILURE;\n }\n \n+envoy_status_t Engine::recordHistogramDurationMs(const std::string& elements, uint64_t amount) {\n+  if (server_ && client_scope_) {\n+    std::string name = Stats::Utility::sanitizeStatsName(elements);\n+    server_->dispatcher().post([this, name, amount]() -> void {\n+      Stats::Utility::histogramFromElements(*client_scope_, {Stats::DynamicName(name)},\n+                                        Histogram::Unit::Milliseconds)\n+          .recordValue(amount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80940c253314baddabef2037c58e414fca4e520f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NDk2Njc2OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/PulseClient.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQyMTo1MDozM1rOIemRiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQyMTo1MDozM1rOIemRiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODk1NTI3Mw==", "bodyText": "+1 to APIs", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r568955273", "createdAt": "2021-02-02T21:50:33Z", "author": {"login": "jingwei99"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/PulseClient.kt", "diffHunk": "@@ -15,4 +15,10 @@ interface PulseClient {\n \n   /** @return A gauge based on the joined elements. */\n   fun gauge(vararg elements: Element): Gauge\n+\n+  /** @return A histogram based on the joined elements that can be used as a timer. */\n+  fun histogramTimer(vararg elements: Element): Histogram\n+\n+  /** @return A histogram based on the joined elements that tracks an unspecified unit measure */\n+  fun histogramGeneric(vararg elements: Element): Histogram", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8ce6d04ebf621add913fe51bc4d0a9743efc10b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NDk5MTQ1OnYy", "diffSide": "RIGHT", "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyEngine.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQyMTo1NzoxOFrOIemgKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxNzoyMjowMlrOIgq05A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODk1OTAxNg==", "bodyText": "it's probably worth documenting (as a comment in this pr) the reason of pushing HistogramUnit enum to this layer (instead of keeping in below jni)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r568959016", "createdAt": "2021-02-02T21:57:18Z", "author": {"login": "jingwei99"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyEngine.java", "diffHunk": "@@ -72,5 +73,15 @@ int runWithConfig(EnvoyConfiguration envoyConfiguration, String logLevel,\n    */\n   int recordGaugeSub(String elements, int amount);\n \n+  /**\n+   * Add another recorded amount to the histogram with the given string of elements.\n+   *\n+   * @param elements Elements of the histogram stat.\n+   * @param value Amount to record as a new value for the histogram distribution.\n+   * @param unitMeasure the unit of measurement (e.g. milliseconds, bytes, etc.)\n+   * @return A status indicating if the action was successful.\n+   */\n+  int recordHistogramValue(String elements, int value, HistogramUnit unitMeasure);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf64ce10ea17c7b7319cee5780e53089f0440706"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTEyNzAxMg==", "bodyText": "I updated to hide the enum at the JNI layer. I think it's cleaner to have 2 separate implementations here.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r571127012", "createdAt": "2021-02-05T17:22:02Z", "author": {"login": "donyu"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyEngine.java", "diffHunk": "@@ -72,5 +73,15 @@ int runWithConfig(EnvoyConfiguration envoyConfiguration, String logLevel,\n    */\n   int recordGaugeSub(String elements, int amount);\n \n+  /**\n+   * Add another recorded amount to the histogram with the given string of elements.\n+   *\n+   * @param elements Elements of the histogram stat.\n+   * @param value Amount to record as a new value for the histogram distribution.\n+   * @param unitMeasure the unit of measurement (e.g. milliseconds, bytes, etc.)\n+   * @return A status indicating if the action was successful.\n+   */\n+  int recordHistogramValue(String elements, int value, HistogramUnit unitMeasure);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODk1OTAxNg=="}, "originalCommit": {"oid": "cf64ce10ea17c7b7319cee5780e53089f0440706"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU4NTAyNDAxOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/PulseClient.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQyMjowNjozOFrOIemzdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wMlQyMjo1Njo1OFrOIeoVGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODk2Mzk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /** @return A histogram based on the joined elements that tracks an unspecified unit measure */\n          \n          \n            \n            /** @return A histogram based on the joined elements that tracks generic value */", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r568963959", "createdAt": "2021-02-02T22:06:38Z", "author": {"login": "jingwei99"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/PulseClient.kt", "diffHunk": "@@ -15,4 +15,10 @@ interface PulseClient {\n \n   /** @return A gauge based on the joined elements. */\n   fun gauge(vararg elements: Element): Gauge\n+\n+  /** @return A histogram based on the joined elements that can be used as a timer. */\n+  fun histogramTimer(vararg elements: Element): Histogram\n+\n+  /** @return A histogram based on the joined elements that tracks an unspecified unit measure */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf64ce10ea17c7b7319cee5780e53089f0440706"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODk4ODk1NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r568988955", "createdAt": "2021-02-02T22:56:58Z", "author": {"login": "donyu"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/PulseClient.kt", "diffHunk": "@@ -15,4 +15,10 @@ interface PulseClient {\n \n   /** @return A gauge based on the joined elements. */\n   fun gauge(vararg elements: Element): Gauge\n+\n+  /** @return A histogram based on the joined elements that can be used as a timer. */\n+  fun histogramTimer(vararg elements: Element): Histogram\n+\n+  /** @return A histogram based on the joined elements that tracks an unspecified unit measure */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2ODk2Mzk1OQ=="}, "originalCommit": {"oid": "cf64ce10ea17c7b7319cee5780e53089f0440706"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5OTI3NTQxOnYy", "diffSide": "RIGHT", "path": "docs/root/api/stats.rst", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxODoyMDozMlrOIgs_Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQyMTo0NTo0M1rOIgzaGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE2MjM3OQ==", "bodyText": "nit: I'd called this Distribution.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r571162379", "createdAt": "2021-02-05T18:20:32Z", "author": {"login": "goaway"}, "path": "docs/root/api/stats.rst", "diffHunk": "@@ -82,3 +82,33 @@ The value of a ``Gauge`` can be incremented, decremented, or reassigned.\n \n   // Swift\n   gauge.sub(amount: 5)\n+\n+---------\n+``Timer``\n+---------\n+Use ``Timer`` to track a distribution of time durations.\n+You can view the cumulative stats like quantile data (p50/p90/etc.) and average durations.\n+\n+**Example**::\n+\n+  // Add a new duration to the underlying timer distribution\n+  // Kotlin\n+  timer.recordDuration(5)\n+\n+  // Swift\n+  timer.recordDuration(durationMs: 5)\n+\n+-------------\n+``Histogram``", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3f5f8f5933f7e225f1a4bbbbf33976a102044c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE2ODEzOA==", "bodyText": "Sure, I like that.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r571168138", "createdAt": "2021-02-05T18:30:50Z", "author": {"login": "donyu"}, "path": "docs/root/api/stats.rst", "diffHunk": "@@ -82,3 +82,33 @@ The value of a ``Gauge`` can be incremented, decremented, or reassigned.\n \n   // Swift\n   gauge.sub(amount: 5)\n+\n+---------\n+``Timer``\n+---------\n+Use ``Timer`` to track a distribution of time durations.\n+You can view the cumulative stats like quantile data (p50/p90/etc.) and average durations.\n+\n+**Example**::\n+\n+  // Add a new duration to the underlying timer distribution\n+  // Kotlin\n+  timer.recordDuration(5)\n+\n+  // Swift\n+  timer.recordDuration(durationMs: 5)\n+\n+-------------\n+``Histogram``", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE2MjM3OQ=="}, "originalCommit": {"oid": "8f3f5f8f5933f7e225f1a4bbbbf33976a102044c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTI2NzYxMQ==", "bodyText": "On 2nd thought, I'd like to follow the histogram naming since it's a more common terminology throughout metrics. Do you feel strongly about having this called Distribution?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r571267611", "createdAt": "2021-02-05T21:45:43Z", "author": {"login": "donyu"}, "path": "docs/root/api/stats.rst", "diffHunk": "@@ -82,3 +82,33 @@ The value of a ``Gauge`` can be incremented, decremented, or reassigned.\n \n   // Swift\n   gauge.sub(amount: 5)\n+\n+---------\n+``Timer``\n+---------\n+Use ``Timer`` to track a distribution of time durations.\n+You can view the cumulative stats like quantile data (p50/p90/etc.) and average durations.\n+\n+**Example**::\n+\n+  // Add a new duration to the underlying timer distribution\n+  // Kotlin\n+  timer.recordDuration(5)\n+\n+  // Swift\n+  timer.recordDuration(durationMs: 5)\n+\n+-------------\n+``Histogram``", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE2MjM3OQ=="}, "originalCommit": {"oid": "8f3f5f8f5933f7e225f1a4bbbbf33976a102044c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzU5OTI5NjUwOnYy", "diffSide": "RIGHT", "path": "library/common/engine.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxODoyNjo1MlrOIgtMXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0wNVQxODozMTowMlrOIgtV5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE2NTc4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              envoy_status_t recordHistogramValue(const std::string& elements, uint64_t value,\n          \n          \n            \n              envoy_status_t recordDistributionValue(const std::string& elements, uint64_t value,", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r571165789", "createdAt": "2021-02-05T18:26:52Z", "author": {"login": "goaway"}, "path": "library/common/engine.h", "diffHunk": "@@ -63,6 +63,15 @@ class Engine {\n    */\n   envoy_status_t recordGaugeSub(const std::string& elements, uint64_t amount);\n \n+  /**\n+   * Record a value for the histogram with the given string of elements and unit measurement\n+   * @param elements, joined elements of the timeseries.\n+   * @param value, value to add to the aggregated distribution of values for quantile calculations\n+   * @param unit_measure, the unit of measurement (e.g. milliseconds, bytes, etc.)\n+   */\n+  envoy_status_t recordHistogramValue(const std::string& elements, uint64_t value,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f3f5f8f5933f7e225f1a4bbbbf33976a102044c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE2NTg1NA==", "bodyText": "etc.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r571165854", "createdAt": "2021-02-05T18:27:00Z", "author": {"login": "goaway"}, "path": "library/common/engine.h", "diffHunk": "@@ -63,6 +63,15 @@ class Engine {\n    */\n   envoy_status_t recordGaugeSub(const std::string& elements, uint64_t amount);\n \n+  /**\n+   * Record a value for the histogram with the given string of elements and unit measurement\n+   * @param elements, joined elements of the timeseries.\n+   * @param value, value to add to the aggregated distribution of values for quantile calculations\n+   * @param unit_measure, the unit of measurement (e.g. milliseconds, bytes, etc.)\n+   */\n+  envoy_status_t recordHistogramValue(const std::string& elements, uint64_t value,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE2NTc4OQ=="}, "originalCommit": {"oid": "8f3f5f8f5933f7e225f1a4bbbbf33976a102044c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE2ODIyOA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1214#discussion_r571168228", "createdAt": "2021-02-05T18:31:02Z", "author": {"login": "donyu"}, "path": "library/common/engine.h", "diffHunk": "@@ -63,6 +63,15 @@ class Engine {\n    */\n   envoy_status_t recordGaugeSub(const std::string& elements, uint64_t amount);\n \n+  /**\n+   * Record a value for the histogram with the given string of elements and unit measurement\n+   * @param elements, joined elements of the timeseries.\n+   * @param value, value to add to the aggregated distribution of values for quantile calculations\n+   * @param unit_measure, the unit of measurement (e.g. milliseconds, bytes, etc.)\n+   */\n+  envoy_status_t recordHistogramValue(const std::string& elements, uint64_t value,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3MTE2NTc4OQ=="}, "originalCommit": {"oid": "8f3f5f8f5933f7e225f1a4bbbbf33976a102044c"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 551, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}