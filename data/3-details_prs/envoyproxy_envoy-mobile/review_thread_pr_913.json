{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1NTA5NTcy", "number": 913, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NTo0N1rOEG1Qog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo0MDo0NlrOEG2adg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NTk5NTIyOnYy", "diffSide": "RIGHT", "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyHTTPStream.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NTo0N1rOGl3w7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NTo0N1rOGl3w7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2NDE0MA==", "bodyText": "This change was necessary in order to ensure that mock subclasses of EnvoyHTTPStream don't end up calling JNI at all (doing so caused tests to crash). Instead, the initializer now no longer has the side effect of calling the JNI, and the engine starts the stream via this method (similarly to the ObjC engine here)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442364140", "createdAt": "2020-06-18T16:45:47Z", "author": {"login": "rebello95"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyHTTPStream.java", "diffHunk": "@@ -9,14 +9,22 @@\n import java.util.Map;\n \n public class EnvoyHTTPStream {\n-\n   private final long streamHandle;\n   private final JvmCallbackContext callbacksContext;\n \n-  EnvoyHTTPStream(long streamHandle, EnvoyHTTPCallbacks callbacks) {\n+  /**\n+   * Start the stream via the JNI library.\n+   */\n+  void start() { JniLibrary.startStream(streamHandle, callbacksContext); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1098580e537f53d7566601489c04a89a437fe596"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjAwMDgxOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/EnvoyClient.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NzowOFrOGl30Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjo0NzowOFrOGl30Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM2NTAxNA==", "bodyText": "File was renamed from Envoy, but git didn't recognize this as a rename because there were enough changes in the file", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442365014", "createdAt": "2020-06-18T16:47:08Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/EnvoyClient.kt", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.envoyproxy.envoymobile", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1098580e537f53d7566601489c04a89a437fe596"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA1MjkwOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestHeadersBuilder.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowMjowNVrOGl4WWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowMjowNVrOGl4WWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3MzcyMA==", "bodyText": "These are necessary in order to return a RequestHeadersBuilder type rather than a HeadersBuilder", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442373720", "createdAt": "2020-06-18T17:02:05Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestHeadersBuilder.kt", "diffHunk": "@@ -35,6 +35,26 @@ class RequestHeadersBuilder : HeadersBuilder {\n    */\n   internal constructor(headers: MutableMap<String, MutableList<String>>) : super(headers)\n \n+  override fun add(name: String, value: String): RequestHeadersBuilder {\n+    super.add(name, value)\n+    return this\n+  }\n+\n+  override fun set(name: String, value: MutableList<String>): RequestHeadersBuilder {\n+    super.set(name, value)\n+    return this\n+  }\n+\n+  override fun remove(name: String): RequestHeadersBuilder {\n+    super.remove(name)\n+    return this\n+  }\n+\n+  override fun internalSet(name: String, value: MutableList<String>): RequestHeadersBuilder {\n+    super.internalSet(name, value)\n+    return this\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1098580e537f53d7566601489c04a89a437fe596"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA1NDY0OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RetryPolicy.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowMjozN1rOGl4Xhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowMjozN1rOGl4Xhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3NDAyMg==", "bodyText": "This was a bug caught by the new tests I added \ud83d\ude43", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442374022", "createdAt": "2020-06-18T17:02:37Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/RetryPolicy.kt", "diffHunk": "@@ -68,7 +67,7 @@ enum class RetryRule(internal val stringValue: String) {\n   companion object {\n     internal fun enumValue(stringRepresentation: String): RetryRule? {\n       return when (stringRepresentation) {\n-        \"status-5xx\" -> STATUS_5XX\n+        \"5xx\" -> STATUS_5XX", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1098580e537f53d7566601489c04a89a437fe596"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA2MTEwOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/StreamCallbacks.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowNDo0MVrOGl4b1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzowNDo0MVrOGl4b1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3NTEyNg==", "bodyText": "Partly moved from a different file", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442375126", "createdAt": "2020-06-18T17:04:41Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StreamCallbacks.kt", "diffHunk": "@@ -0,0 +1,52 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPCallbacks\n+import java.nio.ByteBuffer\n+import java.util.concurrent.Executor\n+\n+/**\n+ * A collection of platform-level callbacks that are specified by consumers\n+ * who wish to interact with streams.\n+ *\n+ * `StreamCallbacks` are bridged through to `EnvoyHTTPCallbacks` to communicate with the engine.\n+ */\n+internal class StreamCallbacks {\n+  var onHeaders: ((headers: ResponseHeaders, endStream: Boolean) -> Unit)? = null\n+  var onData: ((data: ByteBuffer, endStream: Boolean) -> Unit)? = null\n+  var onTrailers: ((trailers: ResponseTrailers) -> Unit)? = null\n+  var onCancel: (() -> Unit)? = null\n+  var onError: ((error: EnvoyError) -> Unit)? = null\n+}\n+\n+/**\n+ * Class responsible for bridging between the platform-level `StreamCallbacks` and the\n+ * engine's `EnvoyHTTPCallbacks`.\n+ */\n+internal class EnvoyHTTPCallbacksAdapter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1098580e537f53d7566601489c04a89a437fe596"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA4Nzc3OnYy", "diffSide": "RIGHT", "path": "library/swift/src/grpc/GRPCRequestHeadersBuilder.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMjozOFrOGl4tIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMjozOFrOGl4tIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3OTU1Mw==", "bodyText": "Renamed for consistency on both platforms", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442379553", "createdAt": "2020-06-18T17:12:38Z", "author": {"login": "rebello95"}, "path": "library/swift/src/grpc/GRPCRequestHeadersBuilder.swift", "diffHunk": "@@ -21,14 +21,14 @@ public final class GRPCRequestHeadersBuilder: HeadersBuilder {\n \n   /// Add a specific timeout for the gRPC request. This will be sent in the `grpc-timeout` header.\n   ///\n-  /// - parameter timeoutMS: Timeout, in milliseconds.\n+  /// - parameter timeoutMs: Timeout, in milliseconds.\n   ///\n   /// - returns: This builder.\n   @discardableResult\n-  public func addTimeoutMS(_ timeoutMS: UInt?) -> GRPCRequestHeadersBuilder {\n+  public func addTimeoutMs(_ timeoutMs: UInt?) -> GRPCRequestHeadersBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1098580e537f53d7566601489c04a89a437fe596"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjA4ODMxOnYy", "diffSide": "RIGHT", "path": "library/swift/src/grpc/GRPCStreamPrototype.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMjo0N1rOGl4tbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoxMjo0N1rOGl4tbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM3OTYzMQ==", "bodyText": "This was missing on master", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442379631", "createdAt": "2020-06-18T17:12:47Z", "author": {"login": "rebello95"}, "path": "library/swift/src/grpc/GRPCStreamPrototype.swift", "diffHunk": "@@ -96,6 +96,20 @@ public final class GRPCStreamPrototype: NSObject {\n     self.underlyingStream.setOnError(closure: closure)\n     return self\n   }\n+\n+  /// Specify a callback for when the stream is canceled.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1098580e537f53d7566601489c04a89a437fe596"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjEzMTQ0OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/EnvoyClient.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoyNToxNlrOGl5JvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNToxMFrOGl5gEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4Njg3Nw==", "bodyText": "Is this really needed? Could get rid of these constructors and you'd still be able to call this like:\nEnvoyClient(engine, envoyConfiguration)\n\nOR\nEnvoyClient(engine, configurationYAML  = yaml)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442386877", "createdAt": "2020-06-18T17:25:16Z", "author": {"login": "johnpaulmckean"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/EnvoyClient.kt", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyConfiguration\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+\n+/**\n+ * Envoy's implementation of `StreamClient`, buildable using `StreamClientBuilder`.\n+ */\n+internal class EnvoyClient private constructor(\n+  internal val engine: EnvoyEngine,\n+  internal val envoyConfiguration: EnvoyConfiguration?,\n+  internal val configurationYAML: String?,\n+  internal val logLevel: LogLevel\n+) : StreamClient {\n+  constructor(\n+    engine: EnvoyEngine,\n+    envoyConfiguration: EnvoyConfiguration,\n+    logLevel: LogLevel = LogLevel.INFO\n+  ) : this(engine, envoyConfiguration, null, logLevel)\n+  constructor(\n+    engine: EnvoyEngine,\n+    configurationYAML: String,\n+    logLevel: LogLevel = LogLevel.INFO\n+  ) : this(engine, null, configurationYAML, logLevel)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MjU5NQ==", "bodyText": "Fair callout. This was moved from a different file, but if I recall correctly we elected to keep these two constructors to make it clearer that either a yaml configuration or a typed configuration could be specified (i.e., preventing them from passing both values and ignoring one of them). iOS for example: here", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442392595", "createdAt": "2020-06-18T17:35:10Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/EnvoyClient.kt", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyConfiguration\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+\n+/**\n+ * Envoy's implementation of `StreamClient`, buildable using `StreamClientBuilder`.\n+ */\n+internal class EnvoyClient private constructor(\n+  internal val engine: EnvoyEngine,\n+  internal val envoyConfiguration: EnvoyConfiguration?,\n+  internal val configurationYAML: String?,\n+  internal val logLevel: LogLevel\n+) : StreamClient {\n+  constructor(\n+    engine: EnvoyEngine,\n+    envoyConfiguration: EnvoyConfiguration,\n+    logLevel: LogLevel = LogLevel.INFO\n+  ) : this(engine, envoyConfiguration, null, logLevel)\n+  constructor(\n+    engine: EnvoyEngine,\n+    configurationYAML: String,\n+    logLevel: LogLevel = LogLevel.INFO\n+  ) : this(engine, null, configurationYAML, logLevel)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4Njg3Nw=="}, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjEzNTY0OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/EnvoyClient.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoyNjozMlrOGl5McQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNTo1OVrOGl5h7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4NzU2OQ==", "bodyText": "can just be:\noverride fun newStreamPrototype() = StreamPrototype(engine)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442387569", "createdAt": "2020-06-18T17:26:32Z", "author": {"login": "johnpaulmckean"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/EnvoyClient.kt", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyConfiguration\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+\n+/**\n+ * Envoy's implementation of `StreamClient`, buildable using `StreamClientBuilder`.\n+ */\n+internal class EnvoyClient private constructor(\n+  internal val engine: EnvoyEngine,\n+  internal val envoyConfiguration: EnvoyConfiguration?,\n+  internal val configurationYAML: String?,\n+  internal val logLevel: LogLevel\n+) : StreamClient {\n+  constructor(\n+    engine: EnvoyEngine,\n+    envoyConfiguration: EnvoyConfiguration,\n+    logLevel: LogLevel = LogLevel.INFO\n+  ) : this(engine, envoyConfiguration, null, logLevel)\n+  constructor(\n+    engine: EnvoyEngine,\n+    configurationYAML: String,\n+    logLevel: LogLevel = LogLevel.INFO\n+  ) : this(engine, null, configurationYAML, logLevel)\n+\n+  init {\n+    if (envoyConfiguration == null) {\n+      engine.runWithConfig(configurationYAML, logLevel.level)\n+    } else {\n+      engine.runWithConfig(envoyConfiguration, logLevel.level)\n+    }\n+  }\n+\n+  override fun newStreamPrototype(): StreamPrototype {\n+    return StreamPrototype(engine)\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MzA3MA==", "bodyText": "nice", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442393070", "createdAt": "2020-06-18T17:35:59Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/EnvoyClient.kt", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyConfiguration\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+\n+/**\n+ * Envoy's implementation of `StreamClient`, buildable using `StreamClientBuilder`.\n+ */\n+internal class EnvoyClient private constructor(\n+  internal val engine: EnvoyEngine,\n+  internal val envoyConfiguration: EnvoyConfiguration?,\n+  internal val configurationYAML: String?,\n+  internal val logLevel: LogLevel\n+) : StreamClient {\n+  constructor(\n+    engine: EnvoyEngine,\n+    envoyConfiguration: EnvoyConfiguration,\n+    logLevel: LogLevel = LogLevel.INFO\n+  ) : this(engine, envoyConfiguration, null, logLevel)\n+  constructor(\n+    engine: EnvoyEngine,\n+    configurationYAML: String,\n+    logLevel: LogLevel = LogLevel.INFO\n+  ) : this(engine, null, configurationYAML, logLevel)\n+\n+  init {\n+    if (envoyConfiguration == null) {\n+      engine.runWithConfig(configurationYAML, logLevel.level)\n+    } else {\n+      engine.runWithConfig(envoyConfiguration, logLevel.level)\n+    }\n+  }\n+\n+  override fun newStreamPrototype(): StreamPrototype {\n+    return StreamPrototype(engine)\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4NzU2OQ=="}, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjE0MjMwOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/HeadersBuilder.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoyODoxMFrOGl5QfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNjo0NVrOGl5jgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4ODYwNA==", "bodyText": "can be:\nprivate fun isRestrictedHeader(name: String) = name.startsWith(\":\") || name.startsWith(\"x-envoy-mobile\")", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442388604", "createdAt": "2020-06-18T17:28:10Z", "author": {"login": "johnpaulmckean"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/HeadersBuilder.kt", "diffHunk": "@@ -49,8 +55,28 @@ open class HeadersBuilder {\n    *\n    * @return HeadersBuilder, This builder.\n    */\n-  fun remove(name: String): HeadersBuilder {\n+  open fun remove(name: String): HeadersBuilder {\n+    if (isRestrictedHeader(name)) {\n+      return this\n+    }\n     headers.remove(name)\n     return this\n   }\n+\n+  /**\n+   * Allows for setting headers that are not publicly mutable (i.e., restricted headers).\n+   *\n+   * @param name: The header name.\n+   * @param value: The value associated to the header name.\n+   *\n+   * @return HeadersBuilder, This builder.\n+   */\n+  internal open fun internalSet(name: String, value: MutableList<String>): HeadersBuilder {\n+    headers[name] = value\n+    return this\n+  }\n+\n+  private fun isRestrictedHeader(name: String): Boolean {\n+    return name.startsWith(\":\") || name.startsWith(\"x-envoy-mobile\")\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MzQ3Mg==", "bodyText": "TIL \ud83d\udc4d", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442393472", "createdAt": "2020-06-18T17:36:45Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/HeadersBuilder.kt", "diffHunk": "@@ -49,8 +55,28 @@ open class HeadersBuilder {\n    *\n    * @return HeadersBuilder, This builder.\n    */\n-  fun remove(name: String): HeadersBuilder {\n+  open fun remove(name: String): HeadersBuilder {\n+    if (isRestrictedHeader(name)) {\n+      return this\n+    }\n     headers.remove(name)\n     return this\n   }\n+\n+  /**\n+   * Allows for setting headers that are not publicly mutable (i.e., restricted headers).\n+   *\n+   * @param name: The header name.\n+   * @param value: The value associated to the header name.\n+   *\n+   * @return HeadersBuilder, This builder.\n+   */\n+  internal open fun internalSet(name: String, value: MutableList<String>): HeadersBuilder {\n+    headers[name] = value\n+    return this\n+  }\n+\n+  private fun isRestrictedHeader(name: String): Boolean {\n+    return name.startsWith(\":\") || name.startsWith(\"x-envoy-mobile\")\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4ODYwNA=="}, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjE1NDIzOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestTrailers.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMToyOFrOGl5YPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozMToyOFrOGl5YPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MDU4OQ==", "bodyText": "can be:\nfun toRequestTrailersBuilder() = RequestTrailersBuilder(this.headers.mapValues { \n    it.value.toMutableList() \n}.toMutableMap())", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442390589", "createdAt": "2020-06-18T17:31:28Z", "author": {"login": "johnpaulmckean"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestTrailers.kt", "diffHunk": "@@ -11,4 +11,16 @@ class RequestTrailers : Headers {\n    * @param trailers: Headers to set.\n    */\n   internal constructor(trailers: Map<String, List<String>>) : super(trailers)\n+\n+  /**\n+   * Convert the trailers back to a builder for mutation.\n+   *\n+   * @return RequestTrailersBuilder, The new builder.\n+   */\n+  fun toRequestTrailersBuilder(): RequestTrailersBuilder {\n+    return RequestTrailersBuilder(\n+      this.headers.mapValues { it.value.toMutableList() }\n+        .toMutableMap()\n+    )\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjE2MzM2OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/grpc/GRPCClient.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNDoxNVrOGl5eLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNDoxNVrOGl5eLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MjEwOQ==", "bodyText": "would be pretty:\n  fun newGRPCStreamPrototype() = GRPCStreamPrototype(\n    streamClient.newStreamPrototype()\n )", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442392109", "createdAt": "2020-06-18T17:34:15Z", "author": {"login": "johnpaulmckean"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/grpc/GRPCClient.kt", "diffHunk": "@@ -1,27 +1,23 @@\n package io.envoyproxy.envoymobile\n \n // 1 byte for the compression flag, 4 bytes for the message length (int)\n-const val GRPC_PREFIX_LENGTH = 5\n+internal const val GRPC_PREFIX_LENGTH = 5\n \n /**\n  * Client that supports sending and receiving gRPC traffic.\n  *\n- * @param httpClient The HTTP client to use for gRPC streams.\n+ * @param streamClient The stream client to use for gRPC streams.\n  */\n class GRPCClient(\n-  private val httpClient: HTTPClient\n+  private val streamClient: StreamClient\n ) {\n-\n   /**\n-   * Start a gRPC request with the provided handler.\n-   *\n-   * @param request The outbound gRPC request. See `GRPCRequestBuilder` for creation.\n-   * @param handler Handler for receiving responses.\n+   * Create a new gRPC stream prototype which can be used to start streams.\n    *\n-   * @returns An emitter that can be used for sending more traffic over the stream.\n+   * @return The new gRPC stream prototype.\n    */\n-  fun start(request: Request, grpcResponseHandler: GRPCResponseHandler): GRPCStreamEmitter {\n-    val emitter = httpClient.start(request, grpcResponseHandler.underlyingHandler)\n-    return GRPCStreamEmitter(emitter)\n+  fun newGRPCStreamPrototype(): GRPCStreamPrototype {\n+    val prototype = streamClient.newStreamPrototype()\n+    return GRPCStreamPrototype(prototype)\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjE2NTk5OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/grpc/GRPCRequestHeaders.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNTowMFrOGl5fvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNTowMFrOGl5fvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MjUwOQ==", "bodyText": "you know ;)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442392509", "createdAt": "2020-06-18T17:35:00Z", "author": {"login": "johnpaulmckean"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/grpc/GRPCRequestHeaders.kt", "diffHunk": "@@ -0,0 +1,22 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * Headers representing an outbound gRPC request.\n+ */\n+class GRPCRequestHeaders : RequestHeaders {\n+  /**\n+   * Internal constructor used by builders.\n+   *\n+   * @param headers: Headers to set.\n+   */\n+  internal constructor(headers: Map<String, List<String>>) : super(headers)\n+\n+  /**\n+   * Convert the headers back to a builder for mutation.\n+   *\n+   * @return GRPCRequestHeadersBuilder, The new builder.\n+   */\n+  fun toGRPCRequestHeadersBuilder(): GRPCRequestHeadersBuilder {\n+    return GRPCRequestHeadersBuilder(this.headers.mapValues { it.value.toMutableList() }.toMutableMap())\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjE3MTIyOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/mocks/MockEnvoyEngine.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNjozMVrOGl5jDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzozNjozMVrOGl5jDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5MzM1Ng==", "bodyText": "this can all be just a few lines.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442393356", "createdAt": "2020-06-18T17:36:31Z", "author": {"login": "johnpaulmckean"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/mocks/MockEnvoyEngine.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyConfiguration\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import io.envoyproxy.envoymobile.engine.EnvoyHTTPStream\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPCallbacks\n+\n+/**\n+ * Mock implementation of `EnvoyEngine`. Used internally for testing the bridging layer & mocking.\n+ */\n+internal class MockEnvoyEngine : EnvoyEngine {\n+  override fun runWithConfig(envoyConfiguration: EnvoyConfiguration?, logLevel: String?): Int {\n+    return 0\n+  }\n+\n+  override fun runWithConfig(configurationYAML: String?, logLevel: String?): Int {\n+    return 0\n+  }\n+\n+  override fun startStream(callbacks: EnvoyHTTPCallbacks?): EnvoyHTTPStream {\n+    return MockEnvoyHTTPStream(callbacks!!)\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjE4NDIyOnYy", "diffSide": "RIGHT", "path": "library/kotlin/test/io/envoyproxy/envoymobile/GRPCRequestHeadersBuilderTest.kt", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo0MDo0NlrOGl5riQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoyODo0MlrOGoChww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NTUyOQ==", "bodyText": "would highly recommend using kluent:\nhttps://github.com/MarkusAmshove/Kluent", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442395529", "createdAt": "2020-06-18T17:40:46Z", "author": {"login": "johnpaulmckean"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/GRPCRequestHeadersBuilderTest.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.envoyproxy.envoymobile\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class GRPCRequestHeadersBuilderTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NzQwOQ==", "bodyText": "Might be good for future reference (not sure if @buildbreaker has thoughts, I'm not familiar with it \ud83e\udd37)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442397409", "createdAt": "2020-06-18T17:44:19Z", "author": {"login": "rebello95"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/GRPCRequestHeadersBuilderTest.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.envoyproxy.envoymobile\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class GRPCRequestHeadersBuilderTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NTUyOQ=="}, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1Mzg0NQ==", "bodyText": "Certainly open to new frameworks which would help. Would you like to file an issue for us to have a conversation about this @johnpaulmckean?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r442453845", "createdAt": "2020-06-18T19:30:08Z", "author": {"login": "buildbreaker"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/GRPCRequestHeadersBuilderTest.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.envoyproxy.envoymobile\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class GRPCRequestHeadersBuilderTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NTUyOQ=="}, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYwNzcyOQ==", "bodyText": "done.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r444607729", "createdAt": "2020-06-24T02:21:29Z", "author": {"login": "johnpaulmckean"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/GRPCRequestHeadersBuilderTest.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.envoyproxy.envoymobile\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class GRPCRequestHeadersBuilderTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NTUyOQ=="}, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxMzMwNQ==", "bodyText": "Thank you @johnpaulmckean!", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r444613305", "createdAt": "2020-06-24T02:42:58Z", "author": {"login": "buildbreaker"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/GRPCRequestHeadersBuilderTest.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.envoyproxy.envoymobile\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class GRPCRequestHeadersBuilderTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NTUyOQ=="}, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNzYzNQ==", "bodyText": "Thanks! #930 for future reference", "url": "https://github.com/envoyproxy/envoy-mobile/pull/913#discussion_r444637635", "createdAt": "2020-06-24T04:28:42Z", "author": {"login": "rebello95"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/GRPCRequestHeadersBuilderTest.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package io.envoyproxy.envoymobile\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class GRPCRequestHeadersBuilderTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5NTUyOQ=="}, "originalCommit": {"oid": "c1ff70a18918427c61a48093f1f1b6209f93e478"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 828, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}