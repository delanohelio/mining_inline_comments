{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMzc5Nzc3", "number": 728, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDozNTowOFrODlk5KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDozNTowOFrODlk5KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzI4MzYxOnYy", "diffSide": "RIGHT", "path": "docs/root/development/performance/vpn_analysis.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDozNTowOFrOFyjLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMDozNToyMFrOFyjLmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0OTQzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            However, when a VPN is enabled after the library is already running, any number\n          \n          \n            \n            However, when a VPN is enabled *after* the library is already running, any number", "url": "https://github.com/envoyproxy/envoy-mobile/pull/728#discussion_r388549432", "createdAt": "2020-03-05T20:35:08Z", "author": {"login": "buildbreaker"}, "path": "docs/root/development/performance/vpn_analysis.rst", "diffHunk": "@@ -0,0 +1,135 @@\n+.. _vpn_analysis:\n+\n+VPN analysis\n+============\n+\n+Given the fact that Envoy Mobile utilizes raw BSD sockets for performing API\n+calls today (investigations into which have been detailed in\n+:issue:`#13 <13>`), we wanted to validate the behavior of the library\n+when working with VPNs.\n+\n+In order for us to consider Envoy Mobile to be \"working properly\" with respect\n+to VPNs, it needs to:\n+\n+- Send all traffic over the VPN if enabled when the library starts\n+- Send all new requests over the VPN if the VPN is enabled after the library starts\n+- Properly recover from dead VPN connections if the VPN is disabled after the library starts\n+- Mirror this behavior on both iOS and Android\n+\n+-------------\n+Investigation\n+-------------\n+\n+~~~~~~~~~~\n+Experiment\n+~~~~~~~~~~\n+\n+The following approach was taken to experiment with VPN connections on both\n+iOS and Android:\n+\n+1. Start a service running Envoy proxy\n+2. Create a mobile app that performs requests to the service using Envoy Mobile\n+3. In our case, we used a man-in-the-middle proxy to observe requests/responses between the two, but this could also be accomplished via logging on the service\n+4. Open the app running Envoy Mobile with a VPN disabled\n+5. Note the ``x-forwarded-for`` header (or the ``x-envoy-external-address`` header which should be the same) of requests from the client\n+6. Enable a VPN on the mobile device\n+7. Monitor the above headers for changes in IP address\n+8. Repeat the same for disabling the VPN\n+\n+On both iOS and Android...\n+\n+With the above workflow, we observed an initial IP address of ``68.7.163.XXX``.\n+\n+Within a second or two of enabling the Hotspot Shield VPN, requests sent\n+from the client changed IP addresses to ``104.232.37.XXX`` - the location of\n+the VPN servers.\n+\n+When launching the app with the VPN enabled, all requests were seen as\n+coming from the VPN IP address.\n+\n+Upon disabling the VPN, some requests failed before switching IP addresses\n+back to the original (non-VPN). This took several seconds (noticeably longer\n+than switching onto the VPN when it was enabled).\n+\n+---------\n+Deep dive\n+---------\n+\n+**Enabling the VPN**\n+\n+Our understanding of why Envoy Mobile sends traffic through VPNs the way it\n+does is as follows.\n+\n+When the library starts up with a VPN enabled, none of its clusters have been\n+used yet. Upon utilizing each cluster, it selects the preferred network to use\n+for establishing a connection. Since the OS is routing all of these through the\n+VPN, Envoy Mobile immediately ends up sending all traffic over the VPN.\n+\n+However, when a VPN is enabled after the library is already running, any number", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b59d1db4bf653498c40e32fd84ee12ab5ed31e3"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0OTUyOA==", "bodyText": "Wanted to bold", "url": "https://github.com/envoyproxy/envoy-mobile/pull/728#discussion_r388549528", "createdAt": "2020-03-05T20:35:20Z", "author": {"login": "buildbreaker"}, "path": "docs/root/development/performance/vpn_analysis.rst", "diffHunk": "@@ -0,0 +1,135 @@\n+.. _vpn_analysis:\n+\n+VPN analysis\n+============\n+\n+Given the fact that Envoy Mobile utilizes raw BSD sockets for performing API\n+calls today (investigations into which have been detailed in\n+:issue:`#13 <13>`), we wanted to validate the behavior of the library\n+when working with VPNs.\n+\n+In order for us to consider Envoy Mobile to be \"working properly\" with respect\n+to VPNs, it needs to:\n+\n+- Send all traffic over the VPN if enabled when the library starts\n+- Send all new requests over the VPN if the VPN is enabled after the library starts\n+- Properly recover from dead VPN connections if the VPN is disabled after the library starts\n+- Mirror this behavior on both iOS and Android\n+\n+-------------\n+Investigation\n+-------------\n+\n+~~~~~~~~~~\n+Experiment\n+~~~~~~~~~~\n+\n+The following approach was taken to experiment with VPN connections on both\n+iOS and Android:\n+\n+1. Start a service running Envoy proxy\n+2. Create a mobile app that performs requests to the service using Envoy Mobile\n+3. In our case, we used a man-in-the-middle proxy to observe requests/responses between the two, but this could also be accomplished via logging on the service\n+4. Open the app running Envoy Mobile with a VPN disabled\n+5. Note the ``x-forwarded-for`` header (or the ``x-envoy-external-address`` header which should be the same) of requests from the client\n+6. Enable a VPN on the mobile device\n+7. Monitor the above headers for changes in IP address\n+8. Repeat the same for disabling the VPN\n+\n+On both iOS and Android...\n+\n+With the above workflow, we observed an initial IP address of ``68.7.163.XXX``.\n+\n+Within a second or two of enabling the Hotspot Shield VPN, requests sent\n+from the client changed IP addresses to ``104.232.37.XXX`` - the location of\n+the VPN servers.\n+\n+When launching the app with the VPN enabled, all requests were seen as\n+coming from the VPN IP address.\n+\n+Upon disabling the VPN, some requests failed before switching IP addresses\n+back to the original (non-VPN). This took several seconds (noticeably longer\n+than switching onto the VPN when it was enabled).\n+\n+---------\n+Deep dive\n+---------\n+\n+**Enabling the VPN**\n+\n+Our understanding of why Envoy Mobile sends traffic through VPNs the way it\n+does is as follows.\n+\n+When the library starts up with a VPN enabled, none of its clusters have been\n+used yet. Upon utilizing each cluster, it selects the preferred network to use\n+for establishing a connection. Since the OS is routing all of these through the\n+VPN, Envoy Mobile immediately ends up sending all traffic over the VPN.\n+\n+However, when a VPN is enabled after the library is already running, any number", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU0OTQzMg=="}, "originalCommit": {"oid": "5b59d1db4bf653498c40e32fd84ee12ab5ed31e3"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 870, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}