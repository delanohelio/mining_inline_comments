{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNjU1NTE2", "number": 962, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMjowMVrOEQ1MxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMDo0NlrOEQ1URQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0MjkzOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/c_types.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMjowMVrOG1NN-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzo0MzoxMFrOG1NoVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDI4MA==", "bodyText": "nit: is the k prefix a common c-style convention?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458444280", "createdAt": "2020-07-21T23:22:01Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.cc", "diffHunk": "@@ -13,3 +13,10 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+\n+const envoy_filter_data_status_t kEnvoyFilterDataStatusContinue =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a60e3c005d518fe812f71a402df189caa217535"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MTAzMA==", "bodyText": "It is a convention that has been used in C, C++, Objective-C and Swift. It's the nearest I could come to a style shared by and recognizable across all four languages.\nSee, for example:\nhttps://google.github.io/styleguide/cppguide.html#Variable_Comments\nNote, the Google Style Guide for Objective-C, no longer recommends prefixing global constants with k (where it was once quite prevalent), but again I was going for something that would be easily recognizable across all the languages/environments.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458451030", "createdAt": "2020-07-21T23:43:10Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.cc", "diffHunk": "@@ -13,3 +13,10 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+\n+const envoy_filter_data_status_t kEnvoyFilterDataStatusContinue =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDI4MA=="}, "originalCommit": {"oid": "0a60e3c005d518fe812f71a402df189caa217535"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg0NDYwOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzoyMjo1N1rOG1NO6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwMDoyNjowMVrOG1OZkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw==", "bodyText": "Can we document this style decision in STYLE.md?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458444523", "createdAt": "2020-07-21T23:22:57Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -24,11 +24,10 @@ typedef struct {\n /**\n  * Return codes for on-data filter invocations. @see envoy/http/filter.h\n  */\n-typedef enum {\n-  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n-} envoy_filter_data_status_t;\n+typedef int envoy_filter_data_status_t;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a60e3c005d518fe812f71a402df189caa217535"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MTk3NA==", "bodyText": "Sure, but just to clarify, which do you mean?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458451974", "createdAt": "2020-07-21T23:46:15Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -24,11 +24,10 @@ typedef struct {\n /**\n  * Return codes for on-data filter invocations. @see envoy/http/filter.h\n  */\n-typedef enum {\n-  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n-} envoy_filter_data_status_t;\n+typedef int envoy_filter_data_status_t;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}, "originalCommit": {"oid": "0a60e3c005d518fe812f71a402df189caa217535"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MjQwNw==", "bodyText": "The new approach with the static cast", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458452407", "createdAt": "2020-07-21T23:47:45Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -24,11 +24,10 @@ typedef struct {\n /**\n  * Return codes for on-data filter invocations. @see envoy/http/filter.h\n  */\n-typedef enum {\n-  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n-} envoy_filter_data_status_t;\n+typedef int envoy_filter_data_status_t;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}, "originalCommit": {"oid": "0a60e3c005d518fe812f71a402df189caa217535"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1MzM1Ng==", "bodyText": "Oh, sure.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458453356", "createdAt": "2020-07-21T23:50:51Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -24,11 +24,10 @@ typedef struct {\n /**\n  * Return codes for on-data filter invocations. @see envoy/http/filter.h\n  */\n-typedef enum {\n-  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n-} envoy_filter_data_status_t;\n+typedef int envoy_filter_data_status_t;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}, "originalCommit": {"oid": "0a60e3c005d518fe812f71a402df189caa217535"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ1NjI1OA==", "bodyText": "Maybe as part of this PR?\n#966", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458456258", "createdAt": "2020-07-22T00:00:09Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -24,11 +24,10 @@ typedef struct {\n /**\n  * Return codes for on-data filter invocations. @see envoy/http/filter.h\n  */\n-typedef enum {\n-  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n-} envoy_filter_data_status_t;\n+typedef int envoy_filter_data_status_t;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}, "originalCommit": {"oid": "0a60e3c005d518fe812f71a402df189caa217535"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ2MzYzMg==", "bodyText": "will document in https://github.com/lyft/envoy-mobile/pull/966/files", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458463632", "createdAt": "2020-07-22T00:26:01Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -24,11 +24,10 @@ typedef struct {\n /**\n  * Return codes for on-data filter invocations. @see envoy/http/filter.h\n  */\n-typedef enum {\n-  ENVOY_FILTER_DATA_STATUS_CONTINUE = 0,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_AND_BUFFER,\n-  ENVOY_FILTER_DATA_STATUS_STOP_ITERATION_NO_BUFFER,\n-} envoy_filter_data_status_t;\n+typedef int envoy_filter_data_status_t;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NDUyMw=="}, "originalCommit": {"oid": "0a60e3c005d518fe812f71a402df189caa217535"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDg2MjEzOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMDo0NlrOG1NY_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMzozMDo0NlrOG1NY_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQ0NzEwMA==", "bodyText": "I still think that this wrapping class is such a nifty approach, love it.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/962#discussion_r458447100", "createdAt": "2020-07-21T23:30:46Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -47,15 +48,37 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n   return status;\n }\n \n+Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    envoy_filter_on_data_f on_data) {\n+  // Allow nullptr to act as (optimized) no-op.\n+  if (on_data == nullptr) {\n+    return Http::FilterDataStatus::Continue;\n+  }\n+\n+  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_->context);\n+  Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  // Current platform implementations expose immutable data, thus any modification necessitates a\n+  // full copy. If the returned buffer is identical, we assume no modification was made and elide\n+  // the copy here. See also https://github.com/lyft/envoy-mobile/issues/949 for potential future\n+  // optimization.\n+  if (in_data.bytes != result.data.bytes) {\n+    data.drain(data.length());\n+    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a60e3c005d518fe812f71a402df189caa217535"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 695, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}