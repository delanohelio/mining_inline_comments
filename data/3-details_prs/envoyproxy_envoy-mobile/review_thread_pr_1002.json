{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNDEyMjU4", "number": 1002, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxODozMVrOEW96bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1MzozM1rOEW-ilQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTE4NTA4OnYy", "diffSide": "RIGHT", "path": "examples/kotlin/hello_world/MainActivity.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxODozMVrOG-gJjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxODozMVrOG-gJjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MTYyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .addFilter({ DemoFilter() })\n          \n          \n            \n                  .addFilter { DemoFilter() }\n          \n      \n    \n    \n  \n\nYou don't have to add the parens for this case", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1002#discussion_r468191629", "createdAt": "2020-08-10T21:18:31Z", "author": {"login": "buildbreaker"}, "path": "examples/kotlin/hello_world/MainActivity.kt", "diffHunk": "@@ -36,7 +37,9 @@ class MainActivity : Activity() {\n     super.onCreate(savedInstanceState)\n     setContentView(R.layout.activity_main)\n \n-    streamClient = AndroidStreamClientBuilder(application).build()\n+    streamClient = AndroidStreamClientBuilder(application)\n+      .addFilter({ DemoFilter() })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d37ce46d3b91a40f1839325306400f70a3e1a7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTI4Nzg5OnYy", "diffSide": "RIGHT", "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmFilterContext.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1MzozM1rOG-hGuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0NzoxOFrOHAbHow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNzI4OA==", "bodyText": "Is it possible for us to add unit tests to just ensure the the filters are called appropriately?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1002#discussion_r468207288", "createdAt": "2020-08-10T21:53:33Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmFilterContext.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPFilter;\n+\n+/**\n+ * Wrapper class for EnvoyHTTPFilter for receiving JNI calls.\n+ */\n+class JvmFilterContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16d37ce46d3b91a40f1839325306400f70a3e1a7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODk4OTgyMg==", "bodyText": "#1024", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1002#discussion_r468989822", "createdAt": "2020-08-12T03:54:01Z", "author": {"login": "goaway"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmFilterContext.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPFilter;\n+\n+/**\n+ * Wrapper class for EnvoyHTTPFilter for receiving JNI calls.\n+ */\n+class JvmFilterContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNzI4OA=="}, "originalCommit": {"oid": "16d37ce46d3b91a40f1839325306400f70a3e1a7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NTA0MA==", "bodyText": "Could we also have a JvmFilterContext unit test which helps us with exercising the interaction between the JvmBridgeUtility and EnvoyHTTPFilter?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1002#discussion_r469385040", "createdAt": "2020-08-12T16:24:01Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmFilterContext.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPFilter;\n+\n+/**\n+ * Wrapper class for EnvoyHTTPFilter for receiving JNI calls.\n+ */\n+class JvmFilterContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNzI4OA=="}, "originalCommit": {"oid": "16d37ce46d3b91a40f1839325306400f70a3e1a7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUyODgxMw==", "bodyText": "Stepping back for a second, I'm honestly skeptical of the value of unit testing functions that purely perform delegation. There's no real black box logic to test; the function makes another call, and you implement that call on one hand and then assert you've implemented it on the other. In my opinion, integration testing is a much better mechanism for testing for correct wiring/coupling of layers.\nTranslation on the other hand, I think merits unit testing - which is partly why I've extracted logic into the JvmBridgeUtility (and also the JniBridgeUtility in the upcoming PR).", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1002#discussion_r469528813", "createdAt": "2020-08-12T20:36:49Z", "author": {"login": "goaway"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmFilterContext.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPFilter;\n+\n+/**\n+ * Wrapper class for EnvoyHTTPFilter for receiving JNI calls.\n+ */\n+class JvmFilterContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNzI4OA=="}, "originalCommit": {"oid": "16d37ce46d3b91a40f1839325306400f70a3e1a7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzNDYxNA==", "bodyText": "That's fair. I would like to capture and exercise the delegation path somewhere.\nI assume you have in mind an integration test which would exercise this?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1002#discussion_r469534614", "createdAt": "2020-08-12T20:42:18Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmFilterContext.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPFilter;\n+\n+/**\n+ * Wrapper class for EnvoyHTTPFilter for receiving JNI calls.\n+ */\n+class JvmFilterContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNzI4OA=="}, "originalCommit": {"oid": "16d37ce46d3b91a40f1839325306400f70a3e1a7"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwNjM3MQ==", "bodyText": "Yes, I'd like to cover the paths through the layer wiring using the AssertionFilter that @junr03 has implemented.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1002#discussion_r470206371", "createdAt": "2020-08-13T19:47:18Z", "author": {"login": "goaway"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/JvmFilterContext.java", "diffHunk": "@@ -0,0 +1,104 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+import io.envoyproxy.envoymobile.engine.types.EnvoyHTTPFilter;\n+\n+/**\n+ * Wrapper class for EnvoyHTTPFilter for receiving JNI calls.\n+ */\n+class JvmFilterContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNzI4OA=="}, "originalCommit": {"oid": "16d37ce46d3b91a40f1839325306400f70a3e1a7"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 733, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}