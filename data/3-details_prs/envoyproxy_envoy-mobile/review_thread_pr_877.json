{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTQ1NDUx", "number": 877, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzowOTo0OVrOEDqCsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxODoyN1rOEDqJJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjcwMDAxOnYy", "diffSide": "RIGHT", "path": "BUILD", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzowOTo0OVrOGgzaRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzowOTo0OVrOGgzaRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA0OTkyNg==", "bodyText": "Is an aar not already output as a zip? if it is you could probably remove this", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437049926", "createdAt": "2020-06-08T23:09:49Z", "author": {"login": "keith"}, "path": "BUILD", "diffHunk": "@@ -18,64 +19,37 @@ touch $@\n     stamp = True,\n )\n \n-alias(\n-    name = \"android_pom\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_pom\",\n-)\n-\n alias(\n     name = \"android_aar\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n-)\n-\n-alias(\n-    name = \"android_javadocs\",\n-    actual = \"//library:javadocs\",\n-)\n-\n-alias(\n-    name = \"android_sources\",\n-    actual = \"//library:sources_jar\",\n+    actual = \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_only_aar\",\n+    visibility = [\"//visibility:public\"],\n )\n \n genrule(\n-    name = \"android_dist\",\n+    name = \"android_zip\",\n     srcs = [\n-        \"android_aar\",\n+        \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n     ],\n-    outs = [\"stub_android_dist_output\"],\n-    cmd = \"\"\"\n-cp $(location :android_aar) dist/envoy.aar\n-chmod 755 dist/envoy.aar\n-touch $@\n-\"\"\",\n+    outs = [\"envoy_mobile.zip\"],\n+    cmd = \"$(location @envoy_mobile//bazel:zipper) fc $@ $(SRCS)\",\n     stamp = True,\n+    tools = [\"@envoy_mobile//bazel:zipper\"],\n+    visibility = [\"//visibility:public\"],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjcwMzEzOnYy", "diffSide": "RIGHT", "path": "BUILD", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxMToyMVrOGgzcJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxNToxMFrOGg0iUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MDQwNw==", "bodyText": "I thought you were going to toss this one entirely?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437050407", "createdAt": "2020-06-08T23:11:21Z", "author": {"login": "keith"}, "path": "BUILD", "diffHunk": "@@ -18,64 +19,37 @@ touch $@\n     stamp = True,\n )\n \n-alias(\n-    name = \"android_pom\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_pom\",\n-)\n-\n alias(\n     name = \"android_aar\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n-)\n-\n-alias(\n-    name = \"android_javadocs\",\n-    actual = \"//library:javadocs\",\n-)\n-\n-alias(\n-    name = \"android_sources\",\n-    actual = \"//library:sources_jar\",\n+    actual = \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_only_aar\",\n+    visibility = [\"//visibility:public\"],\n )\n \n genrule(\n-    name = \"android_dist\",\n+    name = \"android_zip\",\n     srcs = [\n-        \"android_aar\",\n+        \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n     ],\n-    outs = [\"stub_android_dist_output\"],\n-    cmd = \"\"\"\n-cp $(location :android_aar) dist/envoy.aar\n-chmod 755 dist/envoy.aar\n-touch $@\n-\"\"\",\n+    outs = [\"envoy_mobile.zip\"],\n+    cmd = \"$(location @envoy_mobile//bazel:zipper) fc $@ $(SRCS)\",\n     stamp = True,\n+    tools = [\"@envoy_mobile//bazel:zipper\"],\n+    visibility = [\"//visibility:public\"],\n )\n \n genrule(\n-    name = \"android_deploy\",\n+    name = \"android_dist\",\n     srcs = [\n-        \"android_aar\",\n-        \"android_pom\",\n-        \"android_javadocs\",\n-        \"android_sources\",\n+        \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n     ],\n-    outs = [\"stub_android_deploy_output\"],\n+    outs = [\"output_in_dist_directory\"],\n     cmd = \"\"\"\n-cp $(location :android_aar) dist/envoy.aar\n-cp $(location :android_pom) dist/envoy-pom.xml\n-cp $(location :android_javadocs) dist/envoy-javadoc.jar\n-cp $(location :android_sources) dist/envoy-sources.jar\n-chmod 755 dist/envoy.aar\n-chmod 755 dist/envoy-pom.xml\n-chmod 755 dist/envoy-javadoc.jar\n-chmod 755 dist/envoy-sources.jar\n-orig_dir=$$PWD\n-pushd dist\n-zip -r envoy_aar_sources.zip envoy.aar envoy-pom.xml envoy-javadoc.jar envoy-sources.jar > /dev/null\n-popd\n-touch $@\n-\"\"\",\n+    for artifact in $(SRCS); do\n+        chmod 755 $$artifact\n+        cp $$artifact dist/\n+    done\n+    touch $@\n+    \"\"\",\n     stamp = True,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2ODM2OQ==", "bodyText": "I...need to do more work to get that", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437068369", "createdAt": "2020-06-09T00:15:10Z", "author": {"login": "buildbreaker"}, "path": "BUILD", "diffHunk": "@@ -18,64 +19,37 @@ touch $@\n     stamp = True,\n )\n \n-alias(\n-    name = \"android_pom\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_pom\",\n-)\n-\n alias(\n     name = \"android_aar\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n-)\n-\n-alias(\n-    name = \"android_javadocs\",\n-    actual = \"//library:javadocs\",\n-)\n-\n-alias(\n-    name = \"android_sources\",\n-    actual = \"//library:sources_jar\",\n+    actual = \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_only_aar\",\n+    visibility = [\"//visibility:public\"],\n )\n \n genrule(\n-    name = \"android_dist\",\n+    name = \"android_zip\",\n     srcs = [\n-        \"android_aar\",\n+        \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n     ],\n-    outs = [\"stub_android_dist_output\"],\n-    cmd = \"\"\"\n-cp $(location :android_aar) dist/envoy.aar\n-chmod 755 dist/envoy.aar\n-touch $@\n-\"\"\",\n+    outs = [\"envoy_mobile.zip\"],\n+    cmd = \"$(location @envoy_mobile//bazel:zipper) fc $@ $(SRCS)\",\n     stamp = True,\n+    tools = [\"@envoy_mobile//bazel:zipper\"],\n+    visibility = [\"//visibility:public\"],\n )\n \n genrule(\n-    name = \"android_deploy\",\n+    name = \"android_dist\",\n     srcs = [\n-        \"android_aar\",\n-        \"android_pom\",\n-        \"android_javadocs\",\n-        \"android_sources\",\n+        \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n     ],\n-    outs = [\"stub_android_deploy_output\"],\n+    outs = [\"output_in_dist_directory\"],\n     cmd = \"\"\"\n-cp $(location :android_aar) dist/envoy.aar\n-cp $(location :android_pom) dist/envoy-pom.xml\n-cp $(location :android_javadocs) dist/envoy-javadoc.jar\n-cp $(location :android_sources) dist/envoy-sources.jar\n-chmod 755 dist/envoy.aar\n-chmod 755 dist/envoy-pom.xml\n-chmod 755 dist/envoy-javadoc.jar\n-chmod 755 dist/envoy-sources.jar\n-orig_dir=$$PWD\n-pushd dist\n-zip -r envoy_aar_sources.zip envoy.aar envoy-pom.xml envoy-javadoc.jar envoy-sources.jar > /dev/null\n-popd\n-touch $@\n-\"\"\",\n+    for artifact in $(SRCS); do\n+        chmod 755 $$artifact\n+        cp $$artifact dist/\n+    done\n+    touch $@\n+    \"\"\",\n     stamp = True,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MDQwNw=="}, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjcwMzU3OnYy", "diffSide": "RIGHT", "path": "BUILD", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxMTozNlrOGgzccA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxNToxOVrOGg0iew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MDQ4MA==", "bodyText": "Seems like you probably shouldn't need stamp here \ud83e\udd14", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437050480", "createdAt": "2020-06-08T23:11:36Z", "author": {"login": "keith"}, "path": "BUILD", "diffHunk": "@@ -18,64 +19,37 @@ touch $@\n     stamp = True,\n )\n \n-alias(\n-    name = \"android_pom\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_pom\",\n-)\n-\n alias(\n     name = \"android_aar\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n-)\n-\n-alias(\n-    name = \"android_javadocs\",\n-    actual = \"//library:javadocs\",\n-)\n-\n-alias(\n-    name = \"android_sources\",\n-    actual = \"//library:sources_jar\",\n+    actual = \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_only_aar\",\n+    visibility = [\"//visibility:public\"],\n )\n \n genrule(\n-    name = \"android_dist\",\n+    name = \"android_zip\",\n     srcs = [\n-        \"android_aar\",\n+        \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n     ],\n-    outs = [\"stub_android_dist_output\"],\n-    cmd = \"\"\"\n-cp $(location :android_aar) dist/envoy.aar\n-chmod 755 dist/envoy.aar\n-touch $@\n-\"\"\",\n+    outs = [\"envoy_mobile.zip\"],\n+    cmd = \"$(location @envoy_mobile//bazel:zipper) fc $@ $(SRCS)\",\n     stamp = True,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2ODQxMQ==", "bodyText": "What does that do actually?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437068411", "createdAt": "2020-06-09T00:15:19Z", "author": {"login": "buildbreaker"}, "path": "BUILD", "diffHunk": "@@ -18,64 +19,37 @@ touch $@\n     stamp = True,\n )\n \n-alias(\n-    name = \"android_pom\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_pom\",\n-)\n-\n alias(\n     name = \"android_aar\",\n-    actual = \"//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n-)\n-\n-alias(\n-    name = \"android_javadocs\",\n-    actual = \"//library:javadocs\",\n-)\n-\n-alias(\n-    name = \"android_sources\",\n-    actual = \"//library:sources_jar\",\n+    actual = \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar_only_aar\",\n+    visibility = [\"//visibility:public\"],\n )\n \n genrule(\n-    name = \"android_dist\",\n+    name = \"android_zip\",\n     srcs = [\n-        \"android_aar\",\n+        \"@envoy_mobile//library/kotlin/src/io/envoyproxy/envoymobile:android_aar\",\n     ],\n-    outs = [\"stub_android_dist_output\"],\n-    cmd = \"\"\"\n-cp $(location :android_aar) dist/envoy.aar\n-chmod 755 dist/envoy.aar\n-touch $@\n-\"\"\",\n+    outs = [\"envoy_mobile.zip\"],\n+    cmd = \"$(location @envoy_mobile//bazel:zipper) fc $@ $(SRCS)\",\n     stamp = True,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MDQ4MA=="}, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjcwNDYyOnYy", "diffSide": "RIGHT", "path": "bazel/BUILD", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxMjowNVrOGgzdFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxNTo1M1rOGg0jGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MDY0Nw==", "bodyText": "I'd probably just inline this", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437050647", "createdAt": "2020-06-08T23:12:05Z", "author": {"login": "keith"}, "path": "bazel/BUILD", "diffHunk": "@@ -19,3 +19,8 @@ kt_jvm_library(\n exports_files([\n     \"pom_template.xml\",\n ])\n+\n+alias(\n+    name = \"zipper\",\n+    actual = \"@bazel_tools//tools/zip:zipper\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2ODU2OQ==", "bodyText": "buildifier (or an envoy format tool) complains that I'm using @bazel directly if I do", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437068569", "createdAt": "2020-06-09T00:15:53Z", "author": {"login": "buildbreaker"}, "path": "bazel/BUILD", "diffHunk": "@@ -19,3 +19,8 @@ kt_jvm_library(\n exports_files([\n     \"pom_template.xml\",\n ])\n+\n+alias(\n+    name = \"zipper\",\n+    actual = \"@bazel_tools//tools/zip:zipper\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MDY0Nw=="}, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjcxNjAyOnYy", "diffSide": "RIGHT", "path": "bazel/aar_with_jni.bzl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxODoxMFrOGgzkCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxNjo1MFrOGg0kAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MjQyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        echo \"No jni directory found\"\n          \n          \n            \n                    fi\n          \n          \n            \n                        echo \"No jni directory found\"\n          \n          \n            \n                        exit 1\n          \n          \n            \n                    fi\n          \n      \n    \n    \n  \n\nmight want to fail here", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437052424", "createdAt": "2020-06-08T23:18:10Z", "author": {"login": "keith"}, "path": "bazel/aar_with_jni.bzl", "diffHunk": "@@ -4,82 +4,214 @@ load(\"@google_bazel_common//tools/maven:pom_file.bzl\", \"pom_file\")\n \n # This file is based on https://github.com/aj-michael/aar_with_jni which is\n # subject to the following copyright and license:\n-\n+#\n # MIT License\n-\n+#\n # Copyright (c) 2019 Adam Michael\n-\n+#\n # Permission is hereby granted, free of charge, to any person obtaining a copy\n # of this software and associated documentation files (the \"Software\"), to deal\n # in the Software without restriction, including without limitation the rights\n # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n # copies of the Software, and to permit persons to whom the Software is\n # furnished to do so, subject to the following conditions:\n-\n+#\n # The above copyright notice and this permission notice shall be included in all\n # copies or substantial portions of the Software.\n-\n+#\n # THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n # SOFTWARE.\n-\n-# android_library's implicit aar doesn't flatten its transitive\n-# dependencies. When using the kotlin rules, the kt_android_library rule\n-# creates a few underlying libraries, because of this the classes.jar in\n-# the aar we built was empty. This rule separately builds the underlying\n-# kt.jar file, and replaces the aar's classes.jar with the kotlin jar\n def aar_with_jni(name, android_library, manifest, archive_name, native_deps = [], proguard_rules = \"\", visibility = []):\n-    manifest_name = name + \"_android_manifest\"\n-    android_binary_name = name + \"_bin\"\n-    jni_archive_name = archive_name + \"_jni\"\n-    pom_name = name + \"_pom\"\n-    cc_lib_name = name + \"_jni_interface_lib\"\n+    \"\"\"\n+    NOTE: The bazel android_library's implicit aar output doesn't flatten its transitive\n+    dependencies. Additionally, when using the kotlin rules, the kt_android_library rule\n+    creates a few underlying libraries which makes the declared sources and dependencies\n+    a transitive dependency on the resulting android_library. The result of this is that\n+    the classes.jar in the resulting aar will be empty. In order to workaround this issue,\n+    this rule manually constructs the aar.\n \n-    # This is for the pom xml. It has a public visibility since this can be accessed in the root BUILD file\n-    pom_file(\n-        name = pom_name,\n-        targets = [android_library],\n-        template_file = \"//bazel:pom_template.xml\",\n+\n+    This macro exposes two gen rules:\n+    1. `{name}` which outputs the aar, pom, sources.jar, javadoc.jar.\n+    2. `{name}_aar_only` which outputs the aar.\n+\n+    :param name The name of the underlying gen rule.\n+    :param android_library The android library target.\n+    :native_deps The native dependency targets.\n+    :proguard_rules The proguard rules used for the aar.\n+    :visibility The visibility of the underlying gen rule.\n+    \"\"\"\n+\n+    # Create the aar\n+    _classes_jar = _create_classes_jar(name, manifest, android_library)\n+    _jni_archive = _create_jni_library(name, native_deps)\n+    _aar_output = _create_aar(name, archive_name, _classes_jar, _jni_archive, proguard_rules, visibility)\n+\n+    # Generate other needed files for a maven publish\n+    _sources_name, _javadocs_name = _create_sources_javadocs(name, android_library)\n+    _pom_name = _create_pom_xml(name, android_library)\n+    native.genrule(\n+        name = name,\n+        srcs = [\n+            _aar_output,\n+            _pom_name,\n+            _sources_name + \"_deploy-src.jar\",\n+            _javadocs_name,\n+        ],\n+        outs = [\n+            archive_name + \".aar\",\n+            archive_name + \"_pom.xml\",\n+            archive_name + \"-sources.jar\",\n+            archive_name + \"-javadoc.jar\",\n+        ],\n         visibility = visibility,\n+        cmd = \"\"\"\n+        # Set source variables\n+        set -- $(SRCS)\n+        src_aar=$$1\n+        src_pom_xml=$$2\n+        src_sources_jar=$$3\n+        src_javadocs=$$4\n+\n+        # Set output variables\n+        set -- $(OUTS)\n+        out_aar=$$1\n+        out_pom_xml=$$2\n+        out_sources_jar=$$3\n+        out_javadocs=$$4\n+\n+        echo \"Outputting pom.xml, sources.jar, and javadocs.jar...\"\n+        cp $$src_aar $$out_aar\n+        cp $$src_pom_xml $$out_pom_xml\n+        cp $$src_sources_jar $$out_sources_jar\n+        cp $$src_javadocs $$out_javadocs\n+        echo \"Finished!\"\n+        \"\"\",\n+    )\n+\n+def _create_aar(name, archive_name, classes_jar, jni_archive, proguard_rules, visibility):\n+    \"\"\"\n+    This macro rule manually creates an aar artifact.\n+\n+    The underlying gen rule does the following:\n+    1. Create the final aar manifest file.\n+    2. Unzips the apk file generated by the `jni_archive_name` into a temporary directory.\n+    3. Renames the `lib` directory to `jni` directory since the aar requires the so files\n+       to be in the `jni` directory.\n+    4. Copy the android binary `jar` output from the `android_binary_name` as `classes.jar`.\n+    5. Copy the proguard rules specified in the macro parameters.\n+    6. Override the apk's aar with a generated one.\n+    7. Zip everything in the temporary directory into the output.\n+\n+\n+    :param name Name of the aar generation rule.\n+    :param archive_name Name of the resulting aar archive.\n+    :param classes_jar The classes.jar file which contains all the kotlin/java classes.\n+    :param jni_archive The apk with the desired jni libraries.\n+    :param proguard_rules The proguard.txt file.\n+    :param visibility The bazel visibility for the underlying rule.\n+    \"\"\"\n+    _aar_output = name + \"_local.aar\"\n+\n+    # This is to generate the envoy mobile aar AndroidManifest.xml\n+    _manifest_name = name + \"_android_manifest\"\n+    native.genrule(\n+        name = _manifest_name,\n+        outs = [_manifest_name + \".xml\"],\n+        cmd = \"cat > $(OUTS) <<EOF {}EOF\".format(_manifest(\"io.envoyproxy.envoymobile\")),\n     )\n \n-    # Create a dummy manifest file for our android_binary\n     native.genrule(\n-        name = archive_name + \"_binary_manifest_generator\",\n-        outs = [archive_name + \"_generated_AndroidManifest.xml\"],\n+        name = name + \"_only_aar\",\n+        outs = [_aar_output],\n+        srcs = [\n+            classes_jar,\n+            jni_archive,\n+            _manifest_name,\n+            proguard_rules,\n+        ],\n         cmd = \"\"\"\n-cat > $(OUTS) <<EOF\n-<manifest\n-  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-  package=\"does.not.matter\">\n-  <uses-sdk android:minSdkVersion=\"999\"/>\n-</manifest>\n-EOF\n-\"\"\",\n+        # Set source variables\n+        set -- $(SRCS)\n+        src_classes_jar=$$1\n+        src_jni_archive_apk=$$2\n+        src_manifest_xml=$$3\n+        src_proguard_txt=$$4\n+\n+        original_directory=$$PWD\n+\n+        echo \"Constructing aar...\"\n+        final_dir=$$(mktemp -d)\n+        cp $$src_classes_jar $$final_dir/classes.jar\n+        cd $$final_dir\n+        unzip $$original_directory/$$src_jni_archive_apk > /dev/null\n+        if [[ -d lib ]]; then\n+            mv lib jni\n+        else\n+            echo \"No jni directory found\"\n+        fi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 186}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2ODgwMA==", "bodyText": "It was to allow for the optionality of not having a native dependency (helped with testing this bazel rule)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437068800", "createdAt": "2020-06-09T00:16:50Z", "author": {"login": "buildbreaker"}, "path": "bazel/aar_with_jni.bzl", "diffHunk": "@@ -4,82 +4,214 @@ load(\"@google_bazel_common//tools/maven:pom_file.bzl\", \"pom_file\")\n \n # This file is based on https://github.com/aj-michael/aar_with_jni which is\n # subject to the following copyright and license:\n-\n+#\n # MIT License\n-\n+#\n # Copyright (c) 2019 Adam Michael\n-\n+#\n # Permission is hereby granted, free of charge, to any person obtaining a copy\n # of this software and associated documentation files (the \"Software\"), to deal\n # in the Software without restriction, including without limitation the rights\n # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n # copies of the Software, and to permit persons to whom the Software is\n # furnished to do so, subject to the following conditions:\n-\n+#\n # The above copyright notice and this permission notice shall be included in all\n # copies or substantial portions of the Software.\n-\n+#\n # THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n # SOFTWARE.\n-\n-# android_library's implicit aar doesn't flatten its transitive\n-# dependencies. When using the kotlin rules, the kt_android_library rule\n-# creates a few underlying libraries, because of this the classes.jar in\n-# the aar we built was empty. This rule separately builds the underlying\n-# kt.jar file, and replaces the aar's classes.jar with the kotlin jar\n def aar_with_jni(name, android_library, manifest, archive_name, native_deps = [], proguard_rules = \"\", visibility = []):\n-    manifest_name = name + \"_android_manifest\"\n-    android_binary_name = name + \"_bin\"\n-    jni_archive_name = archive_name + \"_jni\"\n-    pom_name = name + \"_pom\"\n-    cc_lib_name = name + \"_jni_interface_lib\"\n+    \"\"\"\n+    NOTE: The bazel android_library's implicit aar output doesn't flatten its transitive\n+    dependencies. Additionally, when using the kotlin rules, the kt_android_library rule\n+    creates a few underlying libraries which makes the declared sources and dependencies\n+    a transitive dependency on the resulting android_library. The result of this is that\n+    the classes.jar in the resulting aar will be empty. In order to workaround this issue,\n+    this rule manually constructs the aar.\n \n-    # This is for the pom xml. It has a public visibility since this can be accessed in the root BUILD file\n-    pom_file(\n-        name = pom_name,\n-        targets = [android_library],\n-        template_file = \"//bazel:pom_template.xml\",\n+\n+    This macro exposes two gen rules:\n+    1. `{name}` which outputs the aar, pom, sources.jar, javadoc.jar.\n+    2. `{name}_aar_only` which outputs the aar.\n+\n+    :param name The name of the underlying gen rule.\n+    :param android_library The android library target.\n+    :native_deps The native dependency targets.\n+    :proguard_rules The proguard rules used for the aar.\n+    :visibility The visibility of the underlying gen rule.\n+    \"\"\"\n+\n+    # Create the aar\n+    _classes_jar = _create_classes_jar(name, manifest, android_library)\n+    _jni_archive = _create_jni_library(name, native_deps)\n+    _aar_output = _create_aar(name, archive_name, _classes_jar, _jni_archive, proguard_rules, visibility)\n+\n+    # Generate other needed files for a maven publish\n+    _sources_name, _javadocs_name = _create_sources_javadocs(name, android_library)\n+    _pom_name = _create_pom_xml(name, android_library)\n+    native.genrule(\n+        name = name,\n+        srcs = [\n+            _aar_output,\n+            _pom_name,\n+            _sources_name + \"_deploy-src.jar\",\n+            _javadocs_name,\n+        ],\n+        outs = [\n+            archive_name + \".aar\",\n+            archive_name + \"_pom.xml\",\n+            archive_name + \"-sources.jar\",\n+            archive_name + \"-javadoc.jar\",\n+        ],\n         visibility = visibility,\n+        cmd = \"\"\"\n+        # Set source variables\n+        set -- $(SRCS)\n+        src_aar=$$1\n+        src_pom_xml=$$2\n+        src_sources_jar=$$3\n+        src_javadocs=$$4\n+\n+        # Set output variables\n+        set -- $(OUTS)\n+        out_aar=$$1\n+        out_pom_xml=$$2\n+        out_sources_jar=$$3\n+        out_javadocs=$$4\n+\n+        echo \"Outputting pom.xml, sources.jar, and javadocs.jar...\"\n+        cp $$src_aar $$out_aar\n+        cp $$src_pom_xml $$out_pom_xml\n+        cp $$src_sources_jar $$out_sources_jar\n+        cp $$src_javadocs $$out_javadocs\n+        echo \"Finished!\"\n+        \"\"\",\n+    )\n+\n+def _create_aar(name, archive_name, classes_jar, jni_archive, proguard_rules, visibility):\n+    \"\"\"\n+    This macro rule manually creates an aar artifact.\n+\n+    The underlying gen rule does the following:\n+    1. Create the final aar manifest file.\n+    2. Unzips the apk file generated by the `jni_archive_name` into a temporary directory.\n+    3. Renames the `lib` directory to `jni` directory since the aar requires the so files\n+       to be in the `jni` directory.\n+    4. Copy the android binary `jar` output from the `android_binary_name` as `classes.jar`.\n+    5. Copy the proguard rules specified in the macro parameters.\n+    6. Override the apk's aar with a generated one.\n+    7. Zip everything in the temporary directory into the output.\n+\n+\n+    :param name Name of the aar generation rule.\n+    :param archive_name Name of the resulting aar archive.\n+    :param classes_jar The classes.jar file which contains all the kotlin/java classes.\n+    :param jni_archive The apk with the desired jni libraries.\n+    :param proguard_rules The proguard.txt file.\n+    :param visibility The bazel visibility for the underlying rule.\n+    \"\"\"\n+    _aar_output = name + \"_local.aar\"\n+\n+    # This is to generate the envoy mobile aar AndroidManifest.xml\n+    _manifest_name = name + \"_android_manifest\"\n+    native.genrule(\n+        name = _manifest_name,\n+        outs = [_manifest_name + \".xml\"],\n+        cmd = \"cat > $(OUTS) <<EOF {}EOF\".format(_manifest(\"io.envoyproxy.envoymobile\")),\n     )\n \n-    # Create a dummy manifest file for our android_binary\n     native.genrule(\n-        name = archive_name + \"_binary_manifest_generator\",\n-        outs = [archive_name + \"_generated_AndroidManifest.xml\"],\n+        name = name + \"_only_aar\",\n+        outs = [_aar_output],\n+        srcs = [\n+            classes_jar,\n+            jni_archive,\n+            _manifest_name,\n+            proguard_rules,\n+        ],\n         cmd = \"\"\"\n-cat > $(OUTS) <<EOF\n-<manifest\n-  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-  package=\"does.not.matter\">\n-  <uses-sdk android:minSdkVersion=\"999\"/>\n-</manifest>\n-EOF\n-\"\"\",\n+        # Set source variables\n+        set -- $(SRCS)\n+        src_classes_jar=$$1\n+        src_jni_archive_apk=$$2\n+        src_manifest_xml=$$3\n+        src_proguard_txt=$$4\n+\n+        original_directory=$$PWD\n+\n+        echo \"Constructing aar...\"\n+        final_dir=$$(mktemp -d)\n+        cp $$src_classes_jar $$final_dir/classes.jar\n+        cd $$final_dir\n+        unzip $$original_directory/$$src_jni_archive_apk > /dev/null\n+        if [[ -d lib ]]; then\n+            mv lib jni\n+        else\n+            echo \"No jni directory found\"\n+        fi", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MjQyNA=="}, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMjcxNjUyOnYy", "diffSide": "RIGHT", "path": "bazel/aar_with_jni.bzl", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMzoxODoyN1rOGgzkUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMDoxNzo0M1rOGg0k4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MjQ5Ng==", "bodyText": "at some point with these scripts you might be better off splitting them into separate files", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437052496", "createdAt": "2020-06-08T23:18:27Z", "author": {"login": "keith"}, "path": "bazel/aar_with_jni.bzl", "diffHunk": "@@ -4,82 +4,214 @@ load(\"@google_bazel_common//tools/maven:pom_file.bzl\", \"pom_file\")\n \n # This file is based on https://github.com/aj-michael/aar_with_jni which is\n # subject to the following copyright and license:\n-\n+#\n # MIT License\n-\n+#\n # Copyright (c) 2019 Adam Michael\n-\n+#\n # Permission is hereby granted, free of charge, to any person obtaining a copy\n # of this software and associated documentation files (the \"Software\"), to deal\n # in the Software without restriction, including without limitation the rights\n # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n # copies of the Software, and to permit persons to whom the Software is\n # furnished to do so, subject to the following conditions:\n-\n+#\n # The above copyright notice and this permission notice shall be included in all\n # copies or substantial portions of the Software.\n-\n+#\n # THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n # SOFTWARE.\n-\n-# android_library's implicit aar doesn't flatten its transitive\n-# dependencies. When using the kotlin rules, the kt_android_library rule\n-# creates a few underlying libraries, because of this the classes.jar in\n-# the aar we built was empty. This rule separately builds the underlying\n-# kt.jar file, and replaces the aar's classes.jar with the kotlin jar\n def aar_with_jni(name, android_library, manifest, archive_name, native_deps = [], proguard_rules = \"\", visibility = []):\n-    manifest_name = name + \"_android_manifest\"\n-    android_binary_name = name + \"_bin\"\n-    jni_archive_name = archive_name + \"_jni\"\n-    pom_name = name + \"_pom\"\n-    cc_lib_name = name + \"_jni_interface_lib\"\n+    \"\"\"\n+    NOTE: The bazel android_library's implicit aar output doesn't flatten its transitive\n+    dependencies. Additionally, when using the kotlin rules, the kt_android_library rule\n+    creates a few underlying libraries which makes the declared sources and dependencies\n+    a transitive dependency on the resulting android_library. The result of this is that\n+    the classes.jar in the resulting aar will be empty. In order to workaround this issue,\n+    this rule manually constructs the aar.\n \n-    # This is for the pom xml. It has a public visibility since this can be accessed in the root BUILD file\n-    pom_file(\n-        name = pom_name,\n-        targets = [android_library],\n-        template_file = \"//bazel:pom_template.xml\",\n+\n+    This macro exposes two gen rules:\n+    1. `{name}` which outputs the aar, pom, sources.jar, javadoc.jar.\n+    2. `{name}_aar_only` which outputs the aar.\n+\n+    :param name The name of the underlying gen rule.\n+    :param android_library The android library target.\n+    :native_deps The native dependency targets.\n+    :proguard_rules The proguard rules used for the aar.\n+    :visibility The visibility of the underlying gen rule.\n+    \"\"\"\n+\n+    # Create the aar\n+    _classes_jar = _create_classes_jar(name, manifest, android_library)\n+    _jni_archive = _create_jni_library(name, native_deps)\n+    _aar_output = _create_aar(name, archive_name, _classes_jar, _jni_archive, proguard_rules, visibility)\n+\n+    # Generate other needed files for a maven publish\n+    _sources_name, _javadocs_name = _create_sources_javadocs(name, android_library)\n+    _pom_name = _create_pom_xml(name, android_library)\n+    native.genrule(\n+        name = name,\n+        srcs = [\n+            _aar_output,\n+            _pom_name,\n+            _sources_name + \"_deploy-src.jar\",\n+            _javadocs_name,\n+        ],\n+        outs = [\n+            archive_name + \".aar\",\n+            archive_name + \"_pom.xml\",\n+            archive_name + \"-sources.jar\",\n+            archive_name + \"-javadoc.jar\",\n+        ],\n         visibility = visibility,\n+        cmd = \"\"\"\n+        # Set source variables\n+        set -- $(SRCS)\n+        src_aar=$$1\n+        src_pom_xml=$$2\n+        src_sources_jar=$$3\n+        src_javadocs=$$4\n+\n+        # Set output variables\n+        set -- $(OUTS)\n+        out_aar=$$1\n+        out_pom_xml=$$2\n+        out_sources_jar=$$3\n+        out_javadocs=$$4\n+\n+        echo \"Outputting pom.xml, sources.jar, and javadocs.jar...\"\n+        cp $$src_aar $$out_aar\n+        cp $$src_pom_xml $$out_pom_xml\n+        cp $$src_sources_jar $$out_sources_jar\n+        cp $$src_javadocs $$out_javadocs\n+        echo \"Finished!\"\n+        \"\"\",\n+    )\n+\n+def _create_aar(name, archive_name, classes_jar, jni_archive, proguard_rules, visibility):\n+    \"\"\"\n+    This macro rule manually creates an aar artifact.\n+\n+    The underlying gen rule does the following:\n+    1. Create the final aar manifest file.\n+    2. Unzips the apk file generated by the `jni_archive_name` into a temporary directory.\n+    3. Renames the `lib` directory to `jni` directory since the aar requires the so files\n+       to be in the `jni` directory.\n+    4. Copy the android binary `jar` output from the `android_binary_name` as `classes.jar`.\n+    5. Copy the proguard rules specified in the macro parameters.\n+    6. Override the apk's aar with a generated one.\n+    7. Zip everything in the temporary directory into the output.\n+\n+\n+    :param name Name of the aar generation rule.\n+    :param archive_name Name of the resulting aar archive.\n+    :param classes_jar The classes.jar file which contains all the kotlin/java classes.\n+    :param jni_archive The apk with the desired jni libraries.\n+    :param proguard_rules The proguard.txt file.\n+    :param visibility The bazel visibility for the underlying rule.\n+    \"\"\"\n+    _aar_output = name + \"_local.aar\"\n+\n+    # This is to generate the envoy mobile aar AndroidManifest.xml\n+    _manifest_name = name + \"_android_manifest\"\n+    native.genrule(\n+        name = _manifest_name,\n+        outs = [_manifest_name + \".xml\"],\n+        cmd = \"cat > $(OUTS) <<EOF {}EOF\".format(_manifest(\"io.envoyproxy.envoymobile\")),\n     )\n \n-    # Create a dummy manifest file for our android_binary\n     native.genrule(\n-        name = archive_name + \"_binary_manifest_generator\",\n-        outs = [archive_name + \"_generated_AndroidManifest.xml\"],\n+        name = name + \"_only_aar\",\n+        outs = [_aar_output],\n+        srcs = [\n+            classes_jar,\n+            jni_archive,\n+            _manifest_name,\n+            proguard_rules,\n+        ],\n         cmd = \"\"\"\n-cat > $(OUTS) <<EOF\n-<manifest\n-  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-  package=\"does.not.matter\">\n-  <uses-sdk android:minSdkVersion=\"999\"/>\n-</manifest>\n-EOF\n-\"\"\",\n+        # Set source variables\n+        set -- $(SRCS)\n+        src_classes_jar=$$1\n+        src_jni_archive_apk=$$2\n+        src_manifest_xml=$$3\n+        src_proguard_txt=$$4\n+\n+        original_directory=$$PWD\n+\n+        echo \"Constructing aar...\"\n+        final_dir=$$(mktemp -d)\n+        cp $$src_classes_jar $$final_dir/classes.jar\n+        cd $$final_dir\n+        unzip $$original_directory/$$src_jni_archive_apk > /dev/null\n+        if [[ -d lib ]]; then\n+            mv lib jni\n+        else\n+            echo \"No jni directory found\"\n+        fi\n+        cp $$original_directory/$$src_proguard_txt ./proguard.txt\n+        cp $$original_directory/$$src_manifest_xml AndroidManifest.xml\n+        zip -r tmp.aar * > /dev/null\n+        cp tmp.aar $$original_directory/$@", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA2OTAyNQ==", "bodyText": "Would it be better to split each private method into a separate file now?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/877#discussion_r437069025", "createdAt": "2020-06-09T00:17:43Z", "author": {"login": "buildbreaker"}, "path": "bazel/aar_with_jni.bzl", "diffHunk": "@@ -4,82 +4,214 @@ load(\"@google_bazel_common//tools/maven:pom_file.bzl\", \"pom_file\")\n \n # This file is based on https://github.com/aj-michael/aar_with_jni which is\n # subject to the following copyright and license:\n-\n+#\n # MIT License\n-\n+#\n # Copyright (c) 2019 Adam Michael\n-\n+#\n # Permission is hereby granted, free of charge, to any person obtaining a copy\n # of this software and associated documentation files (the \"Software\"), to deal\n # in the Software without restriction, including without limitation the rights\n # to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n # copies of the Software, and to permit persons to whom the Software is\n # furnished to do so, subject to the following conditions:\n-\n+#\n # The above copyright notice and this permission notice shall be included in all\n # copies or substantial portions of the Software.\n-\n+#\n # THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n # IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n # FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n # AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n # LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n # OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n # SOFTWARE.\n-\n-# android_library's implicit aar doesn't flatten its transitive\n-# dependencies. When using the kotlin rules, the kt_android_library rule\n-# creates a few underlying libraries, because of this the classes.jar in\n-# the aar we built was empty. This rule separately builds the underlying\n-# kt.jar file, and replaces the aar's classes.jar with the kotlin jar\n def aar_with_jni(name, android_library, manifest, archive_name, native_deps = [], proguard_rules = \"\", visibility = []):\n-    manifest_name = name + \"_android_manifest\"\n-    android_binary_name = name + \"_bin\"\n-    jni_archive_name = archive_name + \"_jni\"\n-    pom_name = name + \"_pom\"\n-    cc_lib_name = name + \"_jni_interface_lib\"\n+    \"\"\"\n+    NOTE: The bazel android_library's implicit aar output doesn't flatten its transitive\n+    dependencies. Additionally, when using the kotlin rules, the kt_android_library rule\n+    creates a few underlying libraries which makes the declared sources and dependencies\n+    a transitive dependency on the resulting android_library. The result of this is that\n+    the classes.jar in the resulting aar will be empty. In order to workaround this issue,\n+    this rule manually constructs the aar.\n \n-    # This is for the pom xml. It has a public visibility since this can be accessed in the root BUILD file\n-    pom_file(\n-        name = pom_name,\n-        targets = [android_library],\n-        template_file = \"//bazel:pom_template.xml\",\n+\n+    This macro exposes two gen rules:\n+    1. `{name}` which outputs the aar, pom, sources.jar, javadoc.jar.\n+    2. `{name}_aar_only` which outputs the aar.\n+\n+    :param name The name of the underlying gen rule.\n+    :param android_library The android library target.\n+    :native_deps The native dependency targets.\n+    :proguard_rules The proguard rules used for the aar.\n+    :visibility The visibility of the underlying gen rule.\n+    \"\"\"\n+\n+    # Create the aar\n+    _classes_jar = _create_classes_jar(name, manifest, android_library)\n+    _jni_archive = _create_jni_library(name, native_deps)\n+    _aar_output = _create_aar(name, archive_name, _classes_jar, _jni_archive, proguard_rules, visibility)\n+\n+    # Generate other needed files for a maven publish\n+    _sources_name, _javadocs_name = _create_sources_javadocs(name, android_library)\n+    _pom_name = _create_pom_xml(name, android_library)\n+    native.genrule(\n+        name = name,\n+        srcs = [\n+            _aar_output,\n+            _pom_name,\n+            _sources_name + \"_deploy-src.jar\",\n+            _javadocs_name,\n+        ],\n+        outs = [\n+            archive_name + \".aar\",\n+            archive_name + \"_pom.xml\",\n+            archive_name + \"-sources.jar\",\n+            archive_name + \"-javadoc.jar\",\n+        ],\n         visibility = visibility,\n+        cmd = \"\"\"\n+        # Set source variables\n+        set -- $(SRCS)\n+        src_aar=$$1\n+        src_pom_xml=$$2\n+        src_sources_jar=$$3\n+        src_javadocs=$$4\n+\n+        # Set output variables\n+        set -- $(OUTS)\n+        out_aar=$$1\n+        out_pom_xml=$$2\n+        out_sources_jar=$$3\n+        out_javadocs=$$4\n+\n+        echo \"Outputting pom.xml, sources.jar, and javadocs.jar...\"\n+        cp $$src_aar $$out_aar\n+        cp $$src_pom_xml $$out_pom_xml\n+        cp $$src_sources_jar $$out_sources_jar\n+        cp $$src_javadocs $$out_javadocs\n+        echo \"Finished!\"\n+        \"\"\",\n+    )\n+\n+def _create_aar(name, archive_name, classes_jar, jni_archive, proguard_rules, visibility):\n+    \"\"\"\n+    This macro rule manually creates an aar artifact.\n+\n+    The underlying gen rule does the following:\n+    1. Create the final aar manifest file.\n+    2. Unzips the apk file generated by the `jni_archive_name` into a temporary directory.\n+    3. Renames the `lib` directory to `jni` directory since the aar requires the so files\n+       to be in the `jni` directory.\n+    4. Copy the android binary `jar` output from the `android_binary_name` as `classes.jar`.\n+    5. Copy the proguard rules specified in the macro parameters.\n+    6. Override the apk's aar with a generated one.\n+    7. Zip everything in the temporary directory into the output.\n+\n+\n+    :param name Name of the aar generation rule.\n+    :param archive_name Name of the resulting aar archive.\n+    :param classes_jar The classes.jar file which contains all the kotlin/java classes.\n+    :param jni_archive The apk with the desired jni libraries.\n+    :param proguard_rules The proguard.txt file.\n+    :param visibility The bazel visibility for the underlying rule.\n+    \"\"\"\n+    _aar_output = name + \"_local.aar\"\n+\n+    # This is to generate the envoy mobile aar AndroidManifest.xml\n+    _manifest_name = name + \"_android_manifest\"\n+    native.genrule(\n+        name = _manifest_name,\n+        outs = [_manifest_name + \".xml\"],\n+        cmd = \"cat > $(OUTS) <<EOF {}EOF\".format(_manifest(\"io.envoyproxy.envoymobile\")),\n     )\n \n-    # Create a dummy manifest file for our android_binary\n     native.genrule(\n-        name = archive_name + \"_binary_manifest_generator\",\n-        outs = [archive_name + \"_generated_AndroidManifest.xml\"],\n+        name = name + \"_only_aar\",\n+        outs = [_aar_output],\n+        srcs = [\n+            classes_jar,\n+            jni_archive,\n+            _manifest_name,\n+            proguard_rules,\n+        ],\n         cmd = \"\"\"\n-cat > $(OUTS) <<EOF\n-<manifest\n-  xmlns:android=\"http://schemas.android.com/apk/res/android\"\n-  package=\"does.not.matter\">\n-  <uses-sdk android:minSdkVersion=\"999\"/>\n-</manifest>\n-EOF\n-\"\"\",\n+        # Set source variables\n+        set -- $(SRCS)\n+        src_classes_jar=$$1\n+        src_jni_archive_apk=$$2\n+        src_manifest_xml=$$3\n+        src_proguard_txt=$$4\n+\n+        original_directory=$$PWD\n+\n+        echo \"Constructing aar...\"\n+        final_dir=$$(mktemp -d)\n+        cp $$src_classes_jar $$final_dir/classes.jar\n+        cd $$final_dir\n+        unzip $$original_directory/$$src_jni_archive_apk > /dev/null\n+        if [[ -d lib ]]; then\n+            mv lib jni\n+        else\n+            echo \"No jni directory found\"\n+        fi\n+        cp $$original_directory/$$src_proguard_txt ./proguard.txt\n+        cp $$original_directory/$$src_manifest_xml AndroidManifest.xml\n+        zip -r tmp.aar * > /dev/null\n+        cp tmp.aar $$original_directory/$@", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzA1MjQ5Ng=="}, "originalCommit": {"oid": "622a173930ae9eac74de7303b30143ed20c17fab"}, "originalPosition": 190}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 815, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}