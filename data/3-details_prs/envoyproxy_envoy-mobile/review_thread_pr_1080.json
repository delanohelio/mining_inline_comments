{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNzAyNzgz", "number": 1080, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTozNjo1N1rOEiWUZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTozNjo1N1rOEiWUZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDUyNzA5OnYy", "diffSide": "RIGHT", "path": "test/common/extensions/filters/http/platform_bridge/platform_bridge_filter_test.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTozNjo1N1rOHQLMzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMTozNjo1N1rOHQLMzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcyMjc2Nw==", "bodyText": "nit: could we rename this to be invocations instead of just i?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1080#discussion_r486722767", "createdAt": "2020-09-11T01:36:57Z", "author": {"login": "buildbreaker"}, "path": "test/common/extensions/filters/http/platform_bridge/platform_bridge_filter_test.cc", "diffHunk": "@@ -0,0 +1,88 @@\n+#include \"test/mocks/http/mocks.h\"\n+#include \"test/test_common/utility.h\"\n+\n+#include \"gtest/gtest.h\"\n+#include \"library/common/api/external.h\"\n+#include \"library/common/extensions/filters/http/platform_bridge/filter.h\"\n+#include \"library/common/extensions/filters/http/platform_bridge/filter.pb.h\"\n+\n+using testing::ByMove;\n+using testing::Return;\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace PlatformBridge {\n+namespace {\n+\n+class PlatformBridgeFilterTest : public testing::Test {\n+public:\n+  void setUpFilter(std::string&& yaml, envoy_http_filter* platform_filter) {\n+    envoymobile::extensions::filters::http::platform_bridge::PlatformBridge config;\n+    TestUtility::loadFromYaml(yaml, config);\n+    Api::External::registerApi(config.platform_filter_name(), platform_filter);\n+\n+    config_ = std::make_shared<PlatformBridgeFilterConfig>(config);\n+    filter_ = std::make_unique<PlatformBridgeFilter>(config_);\n+    filter_->setDecoderFilterCallbacks(decoder_callbacks_);\n+    filter_->setEncoderFilterCallbacks(encoder_callbacks_);\n+  }\n+\n+  typedef struct {\n+    unsigned int init_filter_calls;\n+    unsigned int on_request_headers_calls;\n+    unsigned int on_request_data_calls;\n+    unsigned int on_request_trailers_calls;\n+    unsigned int on_response_headers_calls;\n+    unsigned int on_response_data_calls;\n+    unsigned int on_response_trailers_calls;\n+    unsigned int release_filter_calls;\n+  } filter_invocations;\n+\n+  PlatformBridgeFilterConfigSharedPtr config_{};\n+  std::unique_ptr<PlatformBridgeFilter> filter_{};\n+  NiceMock<Http::MockStreamDecoderFilterCallbacks> decoder_callbacks_;\n+  NiceMock<Http::MockStreamEncoderFilterCallbacks> encoder_callbacks_;\n+};\n+\n+TEST_F(PlatformBridgeFilterTest, BasicContinueOnRequestHeaders) {\n+  envoy_http_filter platform_filter;\n+  filter_invocations i = {0, 0, 0, 0, 0, 0, 0, 0};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aed497557a38657ee1d3662d97cf30d43f11d42e"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 608, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}