{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3NTc4NDQ3", "number": 697, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0NToxOFrODhaCQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1MjoxMlrODhuD_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU2MTYxOnYy", "diffSide": "RIGHT", "path": "docs/root/api/http.rst", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0NToxOFrOFsHtxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzozNjozMVrOFscuFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwODA2OA==", "bodyText": "I'd suggest moving this out of the constructor, and adding it via a builder method.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r381808068", "createdAt": "2020-02-20T06:45:18Z", "author": {"login": "goaway"}, "path": "docs/root/api/http.rst", "diffHunk": "@@ -17,15 +17,15 @@ a previously created :ref:`Envoy instance <api_starting_envoy>`.\n \n **Kotlin**::\n \n-  val request = RequestBuilder(RequestMethod.POST, \"https\", \"api.envoyproxy.io\", \"/foo\")\n+  val request = RequestBuilder(RequestMethod.POST, \"https\", \"api.envoyproxy.io\", \"/foo\", upstreamHttpProtocol = UpstreamRequestProtocol.HTTP2)\n     .addRetryPolicy(RetryPolicy(...))\n     .addHeader(\"x-custom-header\", \"foobar\")\n     ...\n     .build()\n \n **Swift**::\n \n-  let request = RequestBuilder(method: .post, scheme: \"https\", authority: \"api.envoyproxy.io\", path: \"/foo\")\n+  let request = RequestBuilder(method: .post, scheme: \"https\", authority: \"api.envoyproxy.io\", path: \"/foo\", upstreamHttpProtocol: .http2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369b6c4c2fc73672790b2ff51b99b991aaa54ad"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1MjIxMw==", "bodyText": "+1 to this suggestion. addUpstreamProtocol?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382152213", "createdAt": "2020-02-20T17:36:31Z", "author": {"login": "rebello95"}, "path": "docs/root/api/http.rst", "diffHunk": "@@ -17,15 +17,15 @@ a previously created :ref:`Envoy instance <api_starting_envoy>`.\n \n **Kotlin**::\n \n-  val request = RequestBuilder(RequestMethod.POST, \"https\", \"api.envoyproxy.io\", \"/foo\")\n+  val request = RequestBuilder(RequestMethod.POST, \"https\", \"api.envoyproxy.io\", \"/foo\", upstreamHttpProtocol = UpstreamRequestProtocol.HTTP2)\n     .addRetryPolicy(RetryPolicy(...))\n     .addHeader(\"x-custom-header\", \"foobar\")\n     ...\n     .build()\n \n **Swift**::\n \n-  let request = RequestBuilder(method: .post, scheme: \"https\", authority: \"api.envoyproxy.io\", path: \"/foo\")\n+  let request = RequestBuilder(method: .post, scheme: \"https\", authority: \"api.envoyproxy.io\", path: \"/foo\", upstreamHttpProtocol: .http2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwODA2OA=="}, "originalCommit": {"oid": "9369b6c4c2fc73672790b2ff51b99b991aaa54ad"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU3MTU5OnYy", "diffSide": "RIGHT", "path": "library/common/http/dispatcher.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0Nzo1MVrOFsHzMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0Nzo1MVrOFsHzMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgwOTQ1OA==", "bodyText": "I propose simplifying this with a x-envoy-mobile-force-h2 header. If a header with this name is present assume inferred h2 support, if not, default to h1.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r381809458", "createdAt": "2020-02-20T06:47:51Z", "author": {"login": "goaway"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -477,19 +477,38 @@ const LowerCaseString ClusterHeader{\"x-envoy-mobile-cluster\"};\n const std::string BaseCluster = \"base\";\n const std::string BaseWlanCluster = \"base_wlan\";\n const std::string BaseWwanCluster = \"base_wwan\";\n+const LowerCaseString H2UpstreamHeader{\"x-envoy-mobile-upstream-protocol\"};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369b6c4c2fc73672790b2ff51b99b991aaa54ad"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU3ODE2OnYy", "diffSide": "RIGHT", "path": "library/common/http/dispatcher.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0OToyMlrOFsH2YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo0OToyMlrOFsH2YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMDI3Mg==", "bodyText": "nit: this would actually be one less line of code if you just used literals ;)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r381810272", "createdAt": "2020-02-20T06:49:22Z", "author": {"login": "goaway"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -477,19 +477,38 @@ const LowerCaseString ClusterHeader{\"x-envoy-mobile-cluster\"};\n const std::string BaseCluster = \"base\";\n const std::string BaseWlanCluster = \"base_wlan\";\n const std::string BaseWwanCluster = \"base_wwan\";\n+const LowerCaseString H2UpstreamHeader{\"x-envoy-mobile-upstream-protocol\"};\n+const std::string H2Suffix = \"_h2\";\n+const std::string BaseClusterH2 = BaseCluster + H2Suffix;\n+const std::string BaseWlanClusterH2 = BaseWlanCluster + H2Suffix;\n+const std::string BaseWwanClusterH2 = BaseWwanCluster + H2Suffix;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369b6c4c2fc73672790b2ff51b99b991aaa54ad"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzU4NDE0OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/UpstreamHttpProtocol.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MDo0MFrOFsH5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwNjo1MDo0MFrOFsH5cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTgxMTA1Nw==", "bodyText": "Can drop this enum if we just use a single header to force h2 (which is sort of non-standard anyways and only works with known destinations).", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r381811057", "createdAt": "2020-02-20T06:50:40Z", "author": {"login": "goaway"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/UpstreamHttpProtocol.kt", "diffHunk": "@@ -0,0 +1,9 @@\n+package io.envoyproxy.envoymobile\n+\n+/**\n+ * Available upstream http protocols.\n+ */\n+enum class UpstreamHttpProtocol(internal val stringValue: String) {\n+  HTTP1(\"http1\"),\n+  HTTP2(\"http2\"),\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9369b6c4c2fc73672790b2ff51b99b991aaa54ad"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTc2ODk1OnYy", "diffSide": "RIGHT", "path": "library/common/http/dispatcher.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzozOTowMlrOFsczlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzozOTowMlrOFsczlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1MzYyMw==", "bodyText": "do you think it's worth asserting in the else case if the caller specifies a value that's unsupported?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382153623", "createdAt": "2020-02-20T17:39:02Z", "author": {"login": "rebello95"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -478,19 +478,38 @@ const LowerCaseString ClusterHeader{\"x-envoy-mobile-cluster\"};\n const std::string BaseCluster = \"base\";\n const std::string BaseWlanCluster = \"base_wlan\";\n const std::string BaseWwanCluster = \"base_wwan\";\n+const LowerCaseString H2UpstreamHeader{\"x-envoy-mobile-upstream-protocol\"};\n+const std::string H2Suffix = \"_h2\";\n+const std::string BaseClusterH2 = BaseCluster + H2Suffix;\n+const std::string BaseWlanClusterH2 = BaseWlanCluster + H2Suffix;\n+const std::string BaseWwanClusterH2 = BaseWwanCluster + H2Suffix;\n } // namespace\n \n-void Dispatcher::attachPreferredNetwork(HeaderMap& headers) {\n+void Dispatcher::setDestinationCluster(HeaderMap& headers) {\n+\n+  // Determine upstream protocol. Use http2 if selected for explicitly, otherwise (any other value,\n+  // absence of value) select http1.\n+  // TODO(junr03): once http3 is available this would probably benefit from some sort of struct that\n+  // maps to appropriate cluster names. However, with only two options (http1/2) this suffices.\n+  bool use_h2_cluster{};\n+  const HeaderEntry* entry = headers.get(H2UpstreamHeader);\n+  if (entry) {\n+    if (entry->value() == \"http2\") {\n+      use_h2_cluster = true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088ce93868d7eef83e61f9348b035644ed23d6b6"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTc3MTQ0OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/Request.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzozOTo0OFrOFsc1JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoyMzoxNlrOFsmo7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1NDAyMA==", "bodyText": "nit: I think we should prefer HTTP over Http on all of these, in line with how we use MS for milliseconds over Ms. wdyt?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382154020", "createdAt": "2020-02-20T17:39:48Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Request.kt", "diffHunk": "@@ -7,12 +7,14 @@ package io.envoyproxy.envoymobile\n  * @param scheme The URL scheme for the request (i.e., \"https\").\n  * @param authority The URL authority for the request (i.e., \"api.foo.com\").\n  * @param path The URL path for the request (i.e., \"/foo\").\n+ * @param upstreamHttpProtocol The protcol version to use for upstream requests.\n  */\n data class Request internal constructor(\n     val method: RequestMethod,\n     val scheme: String,\n     val authority: String,\n     val path: String,\n+    val upstreamHttpProtocol: UpstreamHttpProtocol,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088ce93868d7eef83e61f9348b035644ed23d6b6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMzgyNA==", "bodyText": "I feel conflicted because in the envoy codebase we dont use all caps...", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382313824", "createdAt": "2020-02-20T23:20:33Z", "author": {"login": "junr03"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Request.kt", "diffHunk": "@@ -7,12 +7,14 @@ package io.envoyproxy.envoymobile\n  * @param scheme The URL scheme for the request (i.e., \"https\").\n  * @param authority The URL authority for the request (i.e., \"api.foo.com\").\n  * @param path The URL path for the request (i.e., \"/foo\").\n+ * @param upstreamHttpProtocol The protcol version to use for upstream requests.\n  */\n data class Request internal constructor(\n     val method: RequestMethod,\n     val scheme: String,\n     val authority: String,\n     val path: String,\n+    val upstreamHttpProtocol: UpstreamHttpProtocol,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1NDAyMA=="}, "originalCommit": {"oid": "088ce93868d7eef83e61f9348b035644ed23d6b6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxNDczMw==", "bodyText": "Eh just leave it I guess", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382314733", "createdAt": "2020-02-20T23:23:16Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Request.kt", "diffHunk": "@@ -7,12 +7,14 @@ package io.envoyproxy.envoymobile\n  * @param scheme The URL scheme for the request (i.e., \"https\").\n  * @param authority The URL authority for the request (i.e., \"api.foo.com\").\n  * @param path The URL path for the request (i.e., \"/foo\").\n+ * @param upstreamHttpProtocol The protcol version to use for upstream requests.\n  */\n data class Request internal constructor(\n     val method: RequestMethod,\n     val scheme: String,\n     val authority: String,\n     val path: String,\n+    val upstreamHttpProtocol: UpstreamHttpProtocol,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1NDAyMA=="}, "originalCommit": {"oid": "088ce93868d7eef83e61f9348b035644ed23d6b6"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTc3NjU3OnYy", "diffSide": "RIGHT", "path": "library/kotlin/test/io/envoyproxy/envoymobile/RequestMapperTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzo0MToxMFrOFsc4EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNzo1MzoxNFrOFsdQHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1NDc2OA==", "bodyText": "Changing this to a builder as @goaway suggested would allow for reverting a lot of these test changes", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382154768", "createdAt": "2020-02-20T17:41:10Z", "author": {"login": "rebello95"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/RequestMapperTest.kt", "diffHunk": "@@ -123,7 +145,7 @@ class RequestMapperTest {\n         perRetryTimeoutMS = 9001)\n     val retryPolicyHeaders = retryPolicy.outboundHeaders()\n \n-    val requestHeaders = RequestBuilder(method = RequestMethod.POST, scheme = \"https\", authority = \"api.foo.com\", path = \"/foo\")\n+    val requestHeaders = RequestBuilder(method = RequestMethod.POST, scheme = \"https\", authority = \"api.foo.com\", path = \"/foo\", upstreamHttpProtocol = UpstreamHttpProtocol.HTTP2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088ce93868d7eef83e61f9348b035644ed23d6b6"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE2MDkyNw==", "bodyText": "Yep, I like the suggestion to move out to the builder. It would also make it easier to deprecate if we want to move into an only ALPN-based future when that is supported.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382160927", "createdAt": "2020-02-20T17:53:14Z", "author": {"login": "junr03"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/RequestMapperTest.kt", "diffHunk": "@@ -123,7 +145,7 @@ class RequestMapperTest {\n         perRetryTimeoutMS = 9001)\n     val retryPolicyHeaders = retryPolicy.outboundHeaders()\n \n-    val requestHeaders = RequestBuilder(method = RequestMethod.POST, scheme = \"https\", authority = \"api.foo.com\", path = \"/foo\")\n+    val requestHeaders = RequestBuilder(method = RequestMethod.POST, scheme = \"https\", authority = \"api.foo.com\", path = \"/foo\", upstreamHttpProtocol = UpstreamHttpProtocol.HTTP2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE1NDc2OA=="}, "originalCommit": {"oid": "088ce93868d7eef83e61f9348b035644ed23d6b6"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ3OTM0OnYy", "diffSide": "LEFT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestBuilder.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyODowN1rOFsjwCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToyODowN1rOFsjwCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2NzQwMg==", "bodyText": "moving below for consistent ordering with swift", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382267402", "createdAt": "2020-02-20T21:28:07Z", "author": {"login": "junr03"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestBuilder.kt", "diffHunk": "@@ -22,16 +22,8 @@ class RequestBuilder(\n   // Retry policy to use for this request.\n   private var retryPolicy: RetryPolicy? = null\n \n-  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e0d1e681c325f1684045e8da8425d67a33ebf36"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU2NjQ3OnYy", "diffSide": "RIGHT", "path": "examples/swift/hello_world/ViewController.swift", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo1OTo0NlrOFsknXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoyMjo0MFrOFsmoLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MTU2NA==", "bodyText": "Can we update objc/java too?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382281564", "createdAt": "2020-02-20T21:59:46Z", "author": {"login": "rebello95"}, "path": "examples/swift/hello_world/ViewController.swift", "diffHunk": "@@ -49,7 +49,9 @@ final class ViewController: UITableViewController {\n     let requestID = self.requestCount\n     let request = RequestBuilder(method: .get, scheme: kRequestScheme,\n                                  authority: kRequestAuthority,\n-                                 path: kRequestPath).build()\n+                                 path: kRequestPath, upstreamHttpProtocol: .http2)\n+        .addUpstreamHttpProtocol(.http2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMjM5Nw==", "bodyText": "I intentionally left this with h1 so we have coverage for both paths. I can drop a comment in the examples to make this explicit.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382312397", "createdAt": "2020-02-20T23:16:28Z", "author": {"login": "junr03"}, "path": "examples/swift/hello_world/ViewController.swift", "diffHunk": "@@ -49,7 +49,9 @@ final class ViewController: UITableViewController {\n     let requestID = self.requestCount\n     let request = RequestBuilder(method: .get, scheme: kRequestScheme,\n                                  authority: kRequestAuthority,\n-                                 path: kRequestPath).build()\n+                                 path: kRequestPath, upstreamHttpProtocol: .http2)\n+        .addUpstreamHttpProtocol(.http2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MTU2NA=="}, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxNDU0Mw==", "bodyText": "Comment would be nice \ud83d\udc4d", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382314543", "createdAt": "2020-02-20T23:22:40Z", "author": {"login": "rebello95"}, "path": "examples/swift/hello_world/ViewController.swift", "diffHunk": "@@ -49,7 +49,9 @@ final class ViewController: UITableViewController {\n     let requestID = self.requestCount\n     let request = RequestBuilder(method: .get, scheme: kRequestScheme,\n                                  authority: kRequestAuthority,\n-                                 path: kRequestPath).build()\n+                                 path: kRequestPath, upstreamHttpProtocol: .http2)\n+        .addUpstreamHttpProtocol(.http2)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MTU2NA=="}, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU3NTE5OnYy", "diffSide": "RIGHT", "path": "library/common/http/dispatcher.cc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowMjo0OVrOFsksyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoyMzowMVrOFsmopg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4Mjk1NQ==", "bodyText": "Also seems like this should be use_h2_cluster = entry->value() == \"http2\"", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382282955", "createdAt": "2020-02-20T22:02:49Z", "author": {"login": "rebello95"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -478,19 +478,38 @@ const LowerCaseString ClusterHeader{\"x-envoy-mobile-cluster\"};\n const std::string BaseCluster = \"base\";\n const std::string BaseWlanCluster = \"base_wlan\";\n const std::string BaseWwanCluster = \"base_wwan\";\n+const LowerCaseString H2UpstreamHeader{\"x-envoy-mobile-upstream-protocol\"};\n+const std::string H2Suffix = \"_h2\";\n+const std::string BaseClusterH2 = BaseCluster + H2Suffix;\n+const std::string BaseWlanClusterH2 = BaseWlanCluster + H2Suffix;\n+const std::string BaseWwanClusterH2 = BaseWwanCluster + H2Suffix;\n } // namespace\n \n-void Dispatcher::attachPreferredNetwork(HeaderMap& headers) {\n+void Dispatcher::setDestinationCluster(HeaderMap& headers) {\n+\n+  // Determine upstream protocol. Use http2 if selected for explicitly, otherwise (any other value,\n+  // absence of value) select http1.\n+  // TODO(junr03): once http3 is available this would probably benefit from some sort of struct that\n+  // maps to appropriate cluster names. However, with only two options (http1/2) this suffices.\n+  bool use_h2_cluster{};\n+  const HeaderEntry* entry = headers.get(H2UpstreamHeader);\n+  if (entry) {\n+    if (entry->value() == \"http2\") {\n+      use_h2_cluster = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxMzM2NQ==", "bodyText": "I want the else for the assertion. I guess I could do\nuse_h2_cluster = entry->value() == \"http2\"\nif (!use_h2_cluster) { ASSERT(entry->value()->getStringView() == \"http1\"); }\n\nsix of one half a dozen of the other?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382313365", "createdAt": "2020-02-20T23:19:10Z", "author": {"login": "junr03"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -478,19 +478,38 @@ const LowerCaseString ClusterHeader{\"x-envoy-mobile-cluster\"};\n const std::string BaseCluster = \"base\";\n const std::string BaseWlanCluster = \"base_wlan\";\n const std::string BaseWwanCluster = \"base_wwan\";\n+const LowerCaseString H2UpstreamHeader{\"x-envoy-mobile-upstream-protocol\"};\n+const std::string H2Suffix = \"_h2\";\n+const std::string BaseClusterH2 = BaseCluster + H2Suffix;\n+const std::string BaseWlanClusterH2 = BaseWlanCluster + H2Suffix;\n+const std::string BaseWwanClusterH2 = BaseWwanCluster + H2Suffix;\n } // namespace\n \n-void Dispatcher::attachPreferredNetwork(HeaderMap& headers) {\n+void Dispatcher::setDestinationCluster(HeaderMap& headers) {\n+\n+  // Determine upstream protocol. Use http2 if selected for explicitly, otherwise (any other value,\n+  // absence of value) select http1.\n+  // TODO(junr03): once http3 is available this would probably benefit from some sort of struct that\n+  // maps to appropriate cluster names. However, with only two options (http1/2) this suffices.\n+  bool use_h2_cluster{};\n+  const HeaderEntry* entry = headers.get(H2UpstreamHeader);\n+  if (entry) {\n+    if (entry->value() == \"http2\") {\n+      use_h2_cluster = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4Mjk1NQ=="}, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxNDY2Mg==", "bodyText": "I think what you have now is fine", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382314662", "createdAt": "2020-02-20T23:23:01Z", "author": {"login": "rebello95"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -478,19 +478,38 @@ const LowerCaseString ClusterHeader{\"x-envoy-mobile-cluster\"};\n const std::string BaseCluster = \"base\";\n const std::string BaseWlanCluster = \"base_wlan\";\n const std::string BaseWwanCluster = \"base_wwan\";\n+const LowerCaseString H2UpstreamHeader{\"x-envoy-mobile-upstream-protocol\"};\n+const std::string H2Suffix = \"_h2\";\n+const std::string BaseClusterH2 = BaseCluster + H2Suffix;\n+const std::string BaseWlanClusterH2 = BaseWlanCluster + H2Suffix;\n+const std::string BaseWwanClusterH2 = BaseWwanCluster + H2Suffix;\n } // namespace\n \n-void Dispatcher::attachPreferredNetwork(HeaderMap& headers) {\n+void Dispatcher::setDestinationCluster(HeaderMap& headers) {\n+\n+  // Determine upstream protocol. Use http2 if selected for explicitly, otherwise (any other value,\n+  // absence of value) select http1.\n+  // TODO(junr03): once http3 is available this would probably benefit from some sort of struct that\n+  // maps to appropriate cluster names. However, with only two options (http1/2) this suffices.\n+  bool use_h2_cluster{};\n+  const HeaderEntry* entry = headers.get(H2UpstreamHeader);\n+  if (entry) {\n+    if (entry->value() == \"http2\") {\n+      use_h2_cluster = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4Mjk1NQ=="}, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU3OTQ2OnYy", "diffSide": "RIGHT", "path": "library/kotlin/test/io/envoyproxy/envoymobile/RequestBuilderTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNDoxNlrOFskvnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNDoxNlrOFskvnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MzY3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              fun `not adding upstream http protocol should have null body in request`() {\n          \n          \n            \n              fun `not adding upstream http protocol should have null upstream protocol in request`() {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382283677", "createdAt": "2020-02-20T22:04:16Z", "author": {"login": "rebello95"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/RequestBuilderTest.kt", "diffHunk": "@@ -24,6 +24,25 @@ class RequestBuilderTest {\n     assertThat(request.retryPolicy).isNull()\n   }\n \n+  @Test\n+  fun `adding upstream http protocol should have hint present in request`() {\n+\n+    val retryPolicy = RetryPolicy(maxRetryCount = 23, retryOn = listOf(RetryRule.STATUS_5XX, RetryRule.CONNECT_FAILURE), perRetryTimeoutMS = 1234)\n+    val request = RequestBuilder(method = RequestMethod.POST, scheme = \"https\", authority = \"api.foo.com\", path = \"foo\")\n+        .addUpstreamHttpProtocol(UpstreamHttpProtocol.HTTP2)\n+        .build()\n+\n+    assertThat(request.upstreamHttpProtocol).isEqualTo(UpstreamHttpProtocol.HTTP2)\n+  }\n+\n+  @Test\n+  fun `not adding upstream http protocol should have null body in request`() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU4MDg0OnYy", "diffSide": "RIGHT", "path": "library/kotlin/test/io/envoyproxy/envoymobile/RequestMapperTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNDo1MlrOFskwmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNTowNlrOFskxAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MzkyOQ==", "bodyText": "I'd probably make this a different test or update the name of the test", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382283929", "createdAt": "2020-02-20T22:04:52Z", "author": {"login": "rebello95"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/RequestMapperTest.kt", "diffHunk": "@@ -57,24 +77,29 @@ class RequestMapperTest {\n   fun `invalid semicolon prefixed header keys are filtered out of outbound request headers`() {\n     val requestHeaders = RequestBuilder(method = RequestMethod.POST, scheme = \"https\", authority = \"api.foo.com\", path = \"/foo\")\n         .addHeader(\":restricted\", \"value\")\n+        .addHeader(\"x-envoy-mobile-test\", \"value\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4NDAzMw==", "bodyText": "could use \"restricted headers\" like the other test below", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382284033", "createdAt": "2020-02-20T22:05:06Z", "author": {"login": "rebello95"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/RequestMapperTest.kt", "diffHunk": "@@ -57,24 +77,29 @@ class RequestMapperTest {\n   fun `invalid semicolon prefixed header keys are filtered out of outbound request headers`() {\n     val requestHeaders = RequestBuilder(method = RequestMethod.POST, scheme = \"https\", authority = \"api.foo.com\", path = \"/foo\")\n         .addHeader(\":restricted\", \"value\")\n+        .addHeader(\"x-envoy-mobile-test\", \"value\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4MzkyOQ=="}, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU4NDQzOnYy", "diffSide": "RIGHT", "path": "library/swift/src/RequestMapper.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNjoxMVrOFskyyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNjoxMVrOFskyyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4NDQ5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            private let kRestrictedHeaderPrefix = [\":\", \"x-envoy-mobile\"]\n          \n          \n            \n            private let kRestrictedHeaderPrefixes = [\":\", \"x-envoy-mobile\"]", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382284491", "createdAt": "2020-02-20T22:06:11Z", "author": {"login": "rebello95"}, "path": "library/swift/src/RequestMapper.swift", "diffHunk": "@@ -1,4 +1,4 @@\n-private let kRestrictedHeaderPrefix = \":\"\n+private let kRestrictedHeaderPrefix = [\":\", \"x-envoy-mobile\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU4NjAzOnYy", "diffSide": "RIGHT", "path": "library/swift/src/UpstreamHttpProtocol.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNjo0NVrOFskzuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNjo0NVrOFskzuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4NDcyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// String representation of the log level.\n          \n          \n            \n              /// String representation of the protocol.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382284729", "createdAt": "2020-02-20T22:06:45Z", "author": {"login": "rebello95"}, "path": "library/swift/src/UpstreamHttpProtocol.swift", "diffHunk": "@@ -0,0 +1,18 @@\n+import Foundation\n+\n+/// Available upstream http protocols.\n+@objc\n+public enum UpstreamHttpProtocol: Int {\n+  case http1\n+  case http2\n+\n+  /// String representation of the log level.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjU4NjMwOnYy", "diffSide": "RIGHT", "path": "library/swift/src/UpstreamHttpProtocol.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNjo1MVrOFskz5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMjowNjo1MVrOFskz5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI4NDc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            /// Available upstream http protocols.\n          \n          \n            \n            /// Available upstream HTTP protocols.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382284772", "createdAt": "2020-02-20T22:06:51Z", "author": {"login": "rebello95"}, "path": "library/swift/src/UpstreamHttpProtocol.swift", "diffHunk": "@@ -0,0 +1,18 @@\n+import Foundation\n+\n+/// Available upstream http protocols.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9f87fcfa9a6a0637523073d027b980d266b731b"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2Njg0Mjg3OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestMapper.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzo1MjoxMlrOFsnRTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMDoxNDowMFrOFsnqlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNTA3MA==", "bodyText": "Up to you but using this might be more readable: !entry.key.startsWith(\":\") && !entry.key.startsWith(\"x-envoy-mobile\")", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382325070", "createdAt": "2020-02-20T23:52:12Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestMapper.kt", "diffHunk": "@@ -4,13 +4,17 @@ internal fun Request.outboundHeaders(): Map<String, List<String>> {\n   val retryPolicyHeaders = retryPolicy?.outboundHeaders() ?: emptyMap()\n \n   val result = mutableMapOf<String, List<String>>()\n-  result.putAll(headers.filter { entry -> !entry.key.startsWith(\":\") })\n+  result.putAll(headers.filter { entry -> !(entry.key.startsWith(\":\") || entry.key.startsWith(\"x-envoy-mobile\"))})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1719bfafd1c9aba5d874ee4c5abf699a2b7fa80f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMTM2NA==", "bodyText": "I am always ambivalent about which one is more readable. I'll change to kick CI... \ud83d\udca9", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382331364", "createdAt": "2020-02-21T00:13:27Z", "author": {"login": "junr03"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestMapper.kt", "diffHunk": "@@ -4,13 +4,17 @@ internal fun Request.outboundHeaders(): Map<String, List<String>> {\n   val retryPolicyHeaders = retryPolicy?.outboundHeaders() ?: emptyMap()\n \n   val result = mutableMapOf<String, List<String>>()\n-  result.putAll(headers.filter { entry -> !entry.key.startsWith(\":\") })\n+  result.putAll(headers.filter { entry -> !(entry.key.startsWith(\":\") || entry.key.startsWith(\"x-envoy-mobile\"))})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNTA3MA=="}, "originalCommit": {"oid": "1719bfafd1c9aba5d874ee4c5abf699a2b7fa80f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzMTU0Mg==", "bodyText": "\ud83d\ude2d", "url": "https://github.com/envoyproxy/envoy-mobile/pull/697#discussion_r382331542", "createdAt": "2020-02-21T00:14:00Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/RequestMapper.kt", "diffHunk": "@@ -4,13 +4,17 @@ internal fun Request.outboundHeaders(): Map<String, List<String>> {\n   val retryPolicyHeaders = retryPolicy?.outboundHeaders() ?: emptyMap()\n \n   val result = mutableMapOf<String, List<String>>()\n-  result.putAll(headers.filter { entry -> !entry.key.startsWith(\":\") })\n+  result.putAll(headers.filter { entry -> !(entry.key.startsWith(\":\") || entry.key.startsWith(\"x-envoy-mobile\"))})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMyNTA3MA=="}, "originalCommit": {"oid": "1719bfafd1c9aba5d874ee4c5abf699a2b7fa80f"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 853, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}