{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MTY3NjI4", "number": 943, "title": "filters: add iOS header support", "bodyText": "Description: Adds initial support for Swift presentation of HTTP filter on-headers invocations.\nRisk Level: Moderate\nTesting: Local end-to-end\nSigned-off-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-07-08T11:10:20Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943", "merged": true, "mergeCommit": {"oid": "edde5f4650e31262570a602aa4fdce342a916d1a"}, "closed": true, "closedAt": "2020-07-21T17:43:10Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0p0r-ABqjM1NDE2Mzg1MTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3G1TTAFqTQ1MjQ5NTkzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d9685c74ae7405d1d702c5c3464e6e73effe39f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/0d9685c74ae7405d1d702c5c3464e6e73effe39f", "committedDate": "2020-07-07T02:37:24Z", "message": "filters: initial support for bridged iOS filters\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "92a45c8f117b8657d68b5afad3eb505c6b5c924f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/92a45c8f117b8657d68b5afad3eb505c6b5c924f", "committedDate": "2020-07-13T23:11:48Z", "message": "register new required extension\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92a45c8f117b8657d68b5afad3eb505c6b5c924f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/92a45c8f117b8657d68b5afad3eb505c6b5c924f", "committedDate": "2020-07-13T23:11:48Z", "message": "register new required extension\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "c4c3f98e7382c12477c9ac41a6de2492eafcf828", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c4c3f98e7382c12477c9ac41a6de2492eafcf828", "committedDate": "2020-07-14T03:10:55Z", "message": "register new required extension\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4c3f98e7382c12477c9ac41a6de2492eafcf828", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c4c3f98e7382c12477c9ac41a6de2492eafcf828", "committedDate": "2020-07-14T03:10:55Z", "message": "register new required extension\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "a420c4d830d8fee7bba752904241880a73fdc3bb", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/a420c4d830d8fee7bba752904241880a73fdc3bb", "committedDate": "2020-07-15T05:17:44Z", "message": "fix header path\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMjI3Nzgz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#pullrequestreview-450227783", "createdAt": "2020-07-16T21:25:48Z", "commit": {"oid": "b8f24d53814c5a3f9ed2fcc35ab68ed898e32cb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToyNTo0OFrOGy9WHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMToyNTo0OFrOGy9WHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA4NzA2OA==", "bodyText": "Are we able to generate a filter name here (for the user) instead of requiring the implementer to handle the name for the registration?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456087068", "createdAt": "2020-07-16T21:25:48Z", "author": {"login": "buildbreaker"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -29,13 +117,33 @@ - (void)dealloc {\n   [[NSNotificationCenter defaultCenter] removeObserver:self];\n }\n \n+- (int)registerFilter:(EnvoyHTTPFilter *)filter {\n+  // TODO(goaway): Everything here leaks, but it's all be tied to the life of the engine.\n+  // This will need to be updated for https://github.com/lyft/envoy-mobile/issues/332\n+  ios_http_filter_context *context = safe_malloc(sizeof(ios_http_filter_context));\n+  CFBridgingRetain(filter);\n+  context->filter = filter;\n+  envoy_http_filter *api = safe_malloc(sizeof(envoy_http_filter));\n+  api->on_request_headers = ios_http_filter_on_request_headers;\n+  api->on_request_data = NULL;\n+  api->on_response_headers = ios_http_filter_on_response_headers;\n+  api->on_response_data = NULL;\n+  api->context = context;\n+  register_platform_api(filter.name.UTF8String, api);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8f24d53814c5a3f9ed2fcc35ab68ed898e32cb8"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwMzI0NTA1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#pullrequestreview-450324505", "createdAt": "2020-07-17T01:53:19Z", "commit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "state": "COMMENTED", "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMTo1MzoxOVrOGzCq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjowODo1NlrOGzC7KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NDI5Mg==", "bodyText": "Can we move this to a different file?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456174292", "createdAt": "2020-07-17T01:53:19Z", "author": {"login": "rebello95"}, "path": "examples/swift/hello_world/ViewController.swift", "diffHunk": "@@ -6,6 +6,29 @@ private let kRequestAuthority = \"api.lyft.com\"\n private let kRequestPath = \"/ping\"\n private let kRequestScheme = \"https\"\n \n+struct PlatformDemoFilter: ResponseFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NDQwMw==", "bodyText": "Maybe add a TODO here since this'll be removed per https://github.com/lyft/envoy-mobile/pull/943/files#r456093581 I assume?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456174403", "createdAt": "2020-07-17T01:53:47Z", "author": {"login": "rebello95"}, "path": "examples/swift/hello_world/ViewController.swift", "diffHunk": "@@ -6,6 +6,29 @@ private let kRequestAuthority = \"api.lyft.com\"\n private let kRequestPath = \"/ping\"\n private let kRequestScheme = \"https\"\n \n+struct PlatformDemoFilter: ResponseFilter {\n+  let name = \"PlatformStub\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NDc5Nw==", "bodyText": "Shouldn't this be registering the PlatformDemoFilter type (or a factory that produces a filter) rather than an instance of the filter? I assume that the lifetime of a filter instance will reflect that of 1 request (and that new filters will be instantiated for each request) like upstream Envoy", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456174797", "createdAt": "2020-07-17T01:55:13Z", "author": {"login": "rebello95"}, "path": "examples/swift/hello_world/ViewController.swift", "diffHunk": "@@ -15,7 +38,7 @@ final class ViewController: UITableViewController {\n     super.viewDidLoad()\n     do {\n       NSLog(\"starting Envoy...\")\n-      self.client = try StreamClientBuilder().build()\n+      self.client = try StreamClientBuilder().addFilter(PlatformDemoFilter()).build()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NTMzMA==", "bodyText": "Refactor in what way?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456175330", "createdAt": "2020-07-17T01:56:44Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -10,6 +11,93 @@ static void ios_on_exit() {\n   NSLog(@\"[Envoy] library is exiting\");\n }\n \n+typedef struct {\n+  __unsafe_unretained EnvoyHTTPFilter *filter;\n+} ios_http_filter_context;\n+\n+// TODO(goaway): refactor and relocate translation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NTc0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              for (id headerKey in headers) {\n          \n          \n            \n              for (NSString *headerKey in headers) {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456175744", "createdAt": "2020-07-17T01:58:14Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -10,6 +11,93 @@ static void ios_on_exit() {\n   NSLog(@\"[Envoy] library is exiting\");\n }\n \n+typedef struct {\n+  __unsafe_unretained EnvoyHTTPFilter *filter;\n+} ios_http_filter_context;\n+\n+// TODO(goaway): refactor and relocate translation\n+static envoy_data toManagedNativeString(NSString *s) {\n+  size_t length = s.length;\n+  uint8_t *native_string = (uint8_t *)safe_malloc(sizeof(uint8_t) * length);\n+  memcpy(native_string, s.UTF8String, length);\n+  envoy_data ret = {length, native_string, free, native_string};\n+  return ret;\n+}\n+\n+static EnvoyHeaders *to_ios_headers(envoy_headers headers) {\n+  NSMutableDictionary *headerDict = [NSMutableDictionary new];\n+  for (envoy_header_size_t i = 0; i < headers.length; i++) {\n+    envoy_header header = headers.headers[i];\n+    NSString *headerKey = [[NSString alloc] initWithBytes:header.key.bytes\n+                                                   length:header.key.length\n+                                                 encoding:NSUTF8StringEncoding];\n+    NSString *headerValue = [[NSString alloc] initWithBytes:header.value.bytes\n+                                                     length:header.value.length\n+                                                   encoding:NSUTF8StringEncoding];\n+    NSMutableArray *headerValueList = headerDict[headerKey];\n+    if (headerValueList == nil) {\n+      headerValueList = [NSMutableArray new];\n+      headerDict[headerKey] = headerValueList;\n+    }\n+    [headerValueList addObject:headerValue];\n+  }\n+  // TODO(goaway): consider solution that doesn't violate release convention\n+  // Note: We don't call release_envoy_headers because they may not be modified by the filter\n+  return headerDict;\n+}\n+\n+static envoy_headers toNativeHeaders(EnvoyHeaders *headers) {\n+  envoy_header_size_t length = 0;\n+  for (id headerKey in headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NTg2Ng==", "bodyText": "Same here, can we use types instead of using id?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456175866", "createdAt": "2020-07-17T01:58:39Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -10,6 +11,93 @@ static void ios_on_exit() {\n   NSLog(@\"[Envoy] library is exiting\");\n }\n \n+typedef struct {\n+  __unsafe_unretained EnvoyHTTPFilter *filter;\n+} ios_http_filter_context;\n+\n+// TODO(goaway): refactor and relocate translation\n+static envoy_data toManagedNativeString(NSString *s) {\n+  size_t length = s.length;\n+  uint8_t *native_string = (uint8_t *)safe_malloc(sizeof(uint8_t) * length);\n+  memcpy(native_string, s.UTF8String, length);\n+  envoy_data ret = {length, native_string, free, native_string};\n+  return ret;\n+}\n+\n+static EnvoyHeaders *to_ios_headers(envoy_headers headers) {\n+  NSMutableDictionary *headerDict = [NSMutableDictionary new];\n+  for (envoy_header_size_t i = 0; i < headers.length; i++) {\n+    envoy_header header = headers.headers[i];\n+    NSString *headerKey = [[NSString alloc] initWithBytes:header.key.bytes\n+                                                   length:header.key.length\n+                                                 encoding:NSUTF8StringEncoding];\n+    NSString *headerValue = [[NSString alloc] initWithBytes:header.value.bytes\n+                                                     length:header.value.length\n+                                                   encoding:NSUTF8StringEncoding];\n+    NSMutableArray *headerValueList = headerDict[headerKey];\n+    if (headerValueList == nil) {\n+      headerValueList = [NSMutableArray new];\n+      headerDict[headerKey] = headerValueList;\n+    }\n+    [headerValueList addObject:headerValue];\n+  }\n+  // TODO(goaway): consider solution that doesn't violate release convention\n+  // Note: We don't call release_envoy_headers because they may not be modified by the filter\n+  return headerDict;\n+}\n+\n+static envoy_headers toNativeHeaders(EnvoyHeaders *headers) {\n+  envoy_header_size_t length = 0;\n+  for (id headerKey in headers) {\n+    length += [headers[headerKey] count];\n+  }\n+  envoy_header *header_array = (envoy_header *)safe_malloc(sizeof(envoy_header) * length);\n+  envoy_header_size_t header_index = 0;\n+  for (id headerKey in headers) {\n+    NSArray *headerList = headers[headerKey];\n+    for (id headerValue in headerList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NjEzMQ==", "bodyText": "Why not actually assert?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456176131", "createdAt": "2020-07-17T01:59:40Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -10,6 +11,93 @@ static void ios_on_exit() {\n   NSLog(@\"[Envoy] library is exiting\");\n }\n \n+typedef struct {\n+  __unsafe_unretained EnvoyHTTPFilter *filter;\n+} ios_http_filter_context;\n+\n+// TODO(goaway): refactor and relocate translation\n+static envoy_data toManagedNativeString(NSString *s) {\n+  size_t length = s.length;\n+  uint8_t *native_string = (uint8_t *)safe_malloc(sizeof(uint8_t) * length);\n+  memcpy(native_string, s.UTF8String, length);\n+  envoy_data ret = {length, native_string, free, native_string};\n+  return ret;\n+}\n+\n+static EnvoyHeaders *to_ios_headers(envoy_headers headers) {\n+  NSMutableDictionary *headerDict = [NSMutableDictionary new];\n+  for (envoy_header_size_t i = 0; i < headers.length; i++) {\n+    envoy_header header = headers.headers[i];\n+    NSString *headerKey = [[NSString alloc] initWithBytes:header.key.bytes\n+                                                   length:header.key.length\n+                                                 encoding:NSUTF8StringEncoding];\n+    NSString *headerValue = [[NSString alloc] initWithBytes:header.value.bytes\n+                                                     length:header.value.length\n+                                                   encoding:NSUTF8StringEncoding];\n+    NSMutableArray *headerValueList = headerDict[headerKey];\n+    if (headerValueList == nil) {\n+      headerValueList = [NSMutableArray new];\n+      headerDict[headerKey] = headerValueList;\n+    }\n+    [headerValueList addObject:headerValue];\n+  }\n+  // TODO(goaway): consider solution that doesn't violate release convention\n+  // Note: We don't call release_envoy_headers because they may not be modified by the filter\n+  return headerDict;\n+}\n+\n+static envoy_headers toNativeHeaders(EnvoyHeaders *headers) {\n+  envoy_header_size_t length = 0;\n+  for (id headerKey in headers) {\n+    length += [headers[headerKey] count];\n+  }\n+  envoy_header *header_array = (envoy_header *)safe_malloc(sizeof(envoy_header) * length);\n+  envoy_header_size_t header_index = 0;\n+  for (id headerKey in headers) {\n+    NSArray *headerList = headers[headerKey];\n+    for (id headerValue in headerList) {\n+      envoy_header new_header = {toManagedNativeString(headerKey),\n+                                 toManagedNativeString(headerValue)};\n+      header_array[header_index++] = new_header;\n+    }\n+  }\n+  // TODO: ASSERT(header_index == length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NjIyMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              envoy_headers ret = {length, header_array};\n          \n          \n            \n              return ret;\n          \n          \n            \n              return envoy_headers{length, header_array};", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456176220", "createdAt": "2020-07-17T02:00:01Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -10,6 +11,93 @@ static void ios_on_exit() {\n   NSLog(@\"[Envoy] library is exiting\");\n }\n \n+typedef struct {\n+  __unsafe_unretained EnvoyHTTPFilter *filter;\n+} ios_http_filter_context;\n+\n+// TODO(goaway): refactor and relocate translation\n+static envoy_data toManagedNativeString(NSString *s) {\n+  size_t length = s.length;\n+  uint8_t *native_string = (uint8_t *)safe_malloc(sizeof(uint8_t) * length);\n+  memcpy(native_string, s.UTF8String, length);\n+  envoy_data ret = {length, native_string, free, native_string};\n+  return ret;\n+}\n+\n+static EnvoyHeaders *to_ios_headers(envoy_headers headers) {\n+  NSMutableDictionary *headerDict = [NSMutableDictionary new];\n+  for (envoy_header_size_t i = 0; i < headers.length; i++) {\n+    envoy_header header = headers.headers[i];\n+    NSString *headerKey = [[NSString alloc] initWithBytes:header.key.bytes\n+                                                   length:header.key.length\n+                                                 encoding:NSUTF8StringEncoding];\n+    NSString *headerValue = [[NSString alloc] initWithBytes:header.value.bytes\n+                                                     length:header.value.length\n+                                                   encoding:NSUTF8StringEncoding];\n+    NSMutableArray *headerValueList = headerDict[headerKey];\n+    if (headerValueList == nil) {\n+      headerValueList = [NSMutableArray new];\n+      headerDict[headerKey] = headerValueList;\n+    }\n+    [headerValueList addObject:headerValue];\n+  }\n+  // TODO(goaway): consider solution that doesn't violate release convention\n+  // Note: We don't call release_envoy_headers because they may not be modified by the filter\n+  return headerDict;\n+}\n+\n+static envoy_headers toNativeHeaders(EnvoyHeaders *headers) {\n+  envoy_header_size_t length = 0;\n+  for (id headerKey in headers) {\n+    length += [headers[headerKey] count];\n+  }\n+  envoy_header *header_array = (envoy_header *)safe_malloc(sizeof(envoy_header) * length);\n+  envoy_header_size_t header_index = 0;\n+  for (id headerKey in headers) {\n+    NSArray *headerList = headers[headerKey];\n+    for (id headerValue in headerList) {\n+      envoy_header new_header = {toManagedNativeString(headerKey),\n+                                 toManagedNativeString(headerValue)};\n+      header_array[header_index++] = new_header;\n+    }\n+  }\n+  // TODO: ASSERT(header_index == length);\n+  envoy_headers ret = {length, header_array};\n+  return ret;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3Njc4MQ==", "bodyText": "Assuming my comment above about providing an instance of each filter for each request, I think this will become more problematic, no?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456176781", "createdAt": "2020-07-17T02:01:56Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -29,13 +117,33 @@ - (void)dealloc {\n   [[NSNotificationCenter defaultCenter] removeObserver:self];\n }\n \n+- (int)registerFilter:(EnvoyHTTPFilter *)filter {\n+  // TODO(goaway): Everything here leaks, but it's all be tied to the life of the engine.\n+  // This will need to be updated for https://github.com/lyft/envoy-mobile/issues/332", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NzI5Mg==", "bodyText": "We should add tests for this new functionality", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456177292", "createdAt": "2020-07-17T02:04:02Z", "author": {"login": "rebello95"}, "path": "library/swift/test/StreamClientBuilderTests.swift", "diffHunk": "@@ -172,6 +172,7 @@ final class StreamClientBuilderTests: XCTestCase {\n                                     dnsRefreshSeconds: 300,\n                                     dnsFailureRefreshSecondsBase: 400,\n                                     dnsFailureRefreshSecondsMax: 500,\n+                                    filterChain: [],", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NzM1NA==", "bodyText": "I'd either remove this or provide an actual description", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456177354", "createdAt": "2020-07-17T02:04:15Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/ResponseFilter.swift", "diffHunk": "@@ -1,7 +1,28 @@\n+@_implementationOnly import EnvoyEngine\n import Foundation\n \n+extension EnvoyHTTPFilter {\n+  /// Initializer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NzU5NQ==", "bodyText": "Can we name these instead of using 0/1?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456177595", "createdAt": "2020-07-17T02:05:11Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/ResponseFilter.swift", "diffHunk": "@@ -1,7 +1,28 @@\n+@_implementationOnly import EnvoyEngine\n import Foundation\n \n+extension EnvoyHTTPFilter {\n+  /// Initializer\n+  convenience init(responseFilter: ResponseFilter) {\n+    self.init()\n+    self.name = responseFilter.name\n+    self.onResponseHeaders = {\n+      let result = responseFilter.onResponseHeaders(ResponseHeaders(headers: $0), endStream: $1)\n+      switch result {\n+      case .continue(let headers):\n+        return [0, headers.headers]\n+      case .stopIteration(let headers):\n+        return [1, headers.headers]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NzY2OA==", "bodyText": "nit: let's name these parameters in the opening of the closure", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456177668", "createdAt": "2020-07-17T02:05:27Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/ResponseFilter.swift", "diffHunk": "@@ -1,7 +1,28 @@\n+@_implementationOnly import EnvoyEngine\n import Foundation\n \n+extension EnvoyHTTPFilter {\n+  /// Initializer\n+  convenience init(responseFilter: ResponseFilter) {\n+    self.init()\n+    self.name = responseFilter.name\n+    self.onResponseHeaders = {\n+      let result = responseFilter.onResponseHeaders(ResponseHeaders(headers: $0), endStream: $1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3Nzc3NQ==", "bodyText": "Same comments here as below", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456177775", "createdAt": "2020-07-17T02:05:54Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/RequestFilter.swift", "diffHunk": "@@ -1,7 +1,28 @@\n+@_implementationOnly import EnvoyEngine\n import Foundation\n \n+extension EnvoyHTTPFilter {\n+  /// Initializer\n+  convenience init(requestFilter: RequestFilter) {\n+    self.init()\n+    self.name = requestFilter.name\n+    self.onRequestHeaders = {\n+      let result = requestFilter.onRequestHeaders(RequestHeaders(headers: $0), endStream: $1)\n+      switch result {\n+      case .continue(let headers):\n+        return [0, headers.headers]\n+      case .stopIteration(let headers):\n+        return [1, headers.headers]\n+      }\n+    }\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3Nzg4NA==", "bodyText": "How will this work for filters that want to act as both request and response filters? As-is, it doesn't look like that's possible since the callbacks are only set on EnvoyHTTPFilter.init", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456177884", "createdAt": "2020-07-17T02:06:22Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/RequestFilter.swift", "diffHunk": "@@ -1,7 +1,28 @@\n+@_implementationOnly import EnvoyEngine\n import Foundation\n \n+extension EnvoyHTTPFilter {\n+  /// Initializer\n+  convenience init(requestFilter: RequestFilter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3ODQ3Mw==", "bodyText": "It looks like this prevents filters from being able to act as both RequestFilter and ResponseFilter conformers. The idea behind the empty Filter protocol in place is to allow registration of a filter, then call its request/response functionality depending on what it conforms to. Should we be doing something like that here?\nPer comments above, I think these should accept closures that create the filters on each request/stream, rather than instances of the filters.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456178473", "createdAt": "2020-07-17T02:08:56Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StreamClientBuilder.swift", "diffHunk": "@@ -107,6 +108,28 @@ public final class StreamClientBuilder: NSObject {\n     return self\n   }\n \n+  /// Add HTTP filter for requests sent by this client.\n+  ///\n+  /// - parameter filter: RequestFilter to be invoked for streams.\n+  ///\n+  /// - returns: This builder.\n+  @discardableResult\n+  public func addFilter(_ filter: RequestFilter) -> StreamClientBuilder {\n+    self.filterChain.append(EnvoyHTTPFilter(requestFilter: filter))\n+    return self\n+  }\n+\n+  /// Add HTTP filter for resonses received by this client.\n+  ///\n+  /// - parameter filter: RequestFilter to be invoked for streams.\n+  ///\n+  /// - returns: This builder.\n+  @discardableResult\n+  public func addFilter(_ filter: ResponseFilter) -> StreamClientBuilder {\n+    self.filterChain.append(EnvoyHTTPFilter(responseFilter: filter))\n+    return self\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwOTg2NDIz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#pullrequestreview-450986423", "createdAt": "2020-07-17T22:26:35Z", "commit": {"oid": "5b08d0548fb52ead8556ac632ab60b389a86774f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjoyNjozNVrOGzituw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QyMjo0ODo1OFrOGzjDlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5OTMyMw==", "bodyText": "Isn't it the same as https://github.com/lyft/envoy-mobile/blob/2d86a1c052ec97852ac8161c470649290310fde7/library/objective-c/EnvoyHTTPStreamImpl.m#L21?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456699323", "createdAt": "2020-07-17T22:26:35Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -10,6 +11,93 @@ static void ios_on_exit() {\n   NSLog(@\"[Envoy] library is exiting\");\n }\n \n+typedef struct {\n+  __unsafe_unretained EnvoyHTTPFilter *filter;\n+} ios_http_filter_context;\n+\n+// TODO(goaway): refactor and relocate translation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3NTMzMA=="}, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjY5OTY2NQ==", "bodyText": "I feel like the user can determine if they are going to modify or not, and this function should release on copy? Or conversely, change the existing API and have the caller bear the responsibility of releasing? In any case, I think we can unify these helpers with the ones in EnvoyHTTPStreamImpl", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456699665", "createdAt": "2020-07-17T22:27:54Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -10,6 +11,91 @@ static void ios_on_exit() {\n   NSLog(@\"[Envoy] library is exiting\");\n }\n \n+typedef struct {\n+  __unsafe_unretained EnvoyHTTPFilter *filter;\n+} ios_http_filter_context;\n+\n+// TODO(goaway): refactor and relocate translation\n+static envoy_data toManagedNativeString(NSString *s) {\n+  size_t length = s.length;\n+  uint8_t *native_string = (uint8_t *)safe_malloc(sizeof(uint8_t) * length);\n+  memcpy(native_string, s.UTF8String, length);\n+  return (envoy_data){length, native_string, free, native_string};\n+}\n+\n+static EnvoyHeaders *to_ios_headers(envoy_headers headers) {\n+  NSMutableDictionary *headerDict = [NSMutableDictionary new];\n+  for (envoy_header_size_t i = 0; i < headers.length; i++) {\n+    envoy_header header = headers.headers[i];\n+    NSString *headerKey = [[NSString alloc] initWithBytes:header.key.bytes\n+                                                   length:header.key.length\n+                                                 encoding:NSUTF8StringEncoding];\n+    NSString *headerValue = [[NSString alloc] initWithBytes:header.value.bytes\n+                                                     length:header.value.length\n+                                                   encoding:NSUTF8StringEncoding];\n+    NSMutableArray *headerValueList = headerDict[headerKey];\n+    if (headerValueList == nil) {\n+      headerValueList = [NSMutableArray new];\n+      headerDict[headerKey] = headerValueList;\n+    }\n+    [headerValueList addObject:headerValue];\n+  }\n+  // TODO(goaway): consider solution that doesn't violate release convention", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b08d0548fb52ead8556ac632ab60b389a86774f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMDg1OQ==", "bodyText": "Is there no tuple type?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456700859", "createdAt": "2020-07-17T22:32:16Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -10,6 +11,91 @@ static void ios_on_exit() {\n   NSLog(@\"[Envoy] library is exiting\");\n }\n \n+typedef struct {\n+  __unsafe_unretained EnvoyHTTPFilter *filter;\n+} ios_http_filter_context;\n+\n+// TODO(goaway): refactor and relocate translation\n+static envoy_data toManagedNativeString(NSString *s) {\n+  size_t length = s.length;\n+  uint8_t *native_string = (uint8_t *)safe_malloc(sizeof(uint8_t) * length);\n+  memcpy(native_string, s.UTF8String, length);\n+  return (envoy_data){length, native_string, free, native_string};\n+}\n+\n+static EnvoyHeaders *to_ios_headers(envoy_headers headers) {\n+  NSMutableDictionary *headerDict = [NSMutableDictionary new];\n+  for (envoy_header_size_t i = 0; i < headers.length; i++) {\n+    envoy_header header = headers.headers[i];\n+    NSString *headerKey = [[NSString alloc] initWithBytes:header.key.bytes\n+                                                   length:header.key.length\n+                                                 encoding:NSUTF8StringEncoding];\n+    NSString *headerValue = [[NSString alloc] initWithBytes:header.value.bytes\n+                                                     length:header.value.length\n+                                                   encoding:NSUTF8StringEncoding];\n+    NSMutableArray *headerValueList = headerDict[headerKey];\n+    if (headerValueList == nil) {\n+      headerValueList = [NSMutableArray new];\n+      headerDict[headerKey] = headerValueList;\n+    }\n+    [headerValueList addObject:headerValue];\n+  }\n+  // TODO(goaway): consider solution that doesn't violate release convention\n+  // Note: We don't call release_envoy_headers because they may not be modified by the filter\n+  return headerDict;\n+}\n+\n+static envoy_headers toNativeHeaders(EnvoyHeaders *headers) {\n+  envoy_header_size_t length = 0;\n+  for (NSString *headerKey in headers) {\n+    length += [headers[headerKey] count];\n+  }\n+  envoy_header *header_array = (envoy_header *)safe_malloc(sizeof(envoy_header) * length);\n+  envoy_header_size_t header_index = 0;\n+  for (NSString *headerKey in headers) {\n+    NSArray *headerList = headers[headerKey];\n+    for (NSString *headerValue in headerList) {\n+      envoy_header new_header = {toManagedNativeString(headerKey),\n+                                 toManagedNativeString(headerValue)};\n+      header_array[header_index++] = new_header;\n+    }\n+  }\n+  // TODO: ASSERT(header_index == length);\n+  return (envoy_headers){length, header_array};\n+}\n+\n+static envoy_filter_headers_status\n+ios_http_filter_on_request_headers(envoy_headers headers, bool end_stream, void *context) {\n+  // TODO(goaway): optimize unmodified case\n+  ios_http_filter_context *c = (ios_http_filter_context *)context;\n+  if (c->filter.onRequestHeaders == nil) {\n+    return (envoy_filter_headers_status){/*status*/ 0, /*headers*/ headers};\n+  }\n+\n+  EnvoyHeaders *platformHeaders = to_ios_headers(headers);\n+  release_envoy_headers(headers);\n+  // TODO(goaway): consider better solution for compound return\n+  NSArray *result = c->filter.onRequestHeaders(platformHeaders, end_stream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b08d0548fb52ead8556ac632ab60b389a86774f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwMzQ2Mg==", "bodyText": "following on @rebello95's comment about lifetime. We definitely want a per stream instance of the full chain, like Envoy.\nI wonder if what we can do is: have the api retain a filter factory in its context, and register that. Then the registry can instantiate a filter chain, that the stream retains, and passes that in the context to the static ios_http_filter_on_*_* functions. So we would have two different contexts, and the one here (which retains the factory) leaks, but will eventually be tied/retained to/by the engine instance.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456703462", "createdAt": "2020-07-17T22:42:33Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -29,13 +115,33 @@ - (void)dealloc {\n   [[NSNotificationCenter defaultCenter] removeObserver:self];\n }\n \n+- (int)registerFilter:(EnvoyHTTPFilter *)filter {\n+  // TODO(goaway): Everything here leaks, but it's all be tied to the life of the engine.\n+  // This will need to be updated for https://github.com/lyft/envoy-mobile/issues/332\n+  ios_http_filter_context *context = safe_malloc(sizeof(ios_http_filter_context));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b08d0548fb52ead8556ac632ab60b389a86774f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjcwNDkxOQ==", "bodyText": "re: 2. we should definitely do this per stream instance. And re: 1. do we really need reflection? Can't we have multiple inheritance and have a filter class that is both, and thus calls both request and response addFilter functions as in envoy:\nhttps://github.com/envoyproxy/envoy/blob/bc02b7748a69fd3854f74b9e5bec236b5499f7fd/include/envoy/http/filter.h#L772\nhttps://github.com/envoyproxy/envoy/blob/0c6523c0925d260de41d89002044d0d6271550d0/source/common/http/conn_manager_impl.h#L553", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r456704919", "createdAt": "2020-07-17T22:48:58Z", "author": {"login": "junr03"}, "path": "library/swift/src/StreamClientBuilder.swift", "diffHunk": "@@ -107,6 +108,28 @@ public final class StreamClientBuilder: NSObject {\n     return self\n   }\n \n+  /// Add HTTP filter for requests sent by this client.\n+  ///\n+  /// - parameter filter: RequestFilter to be invoked for streams.\n+  ///\n+  /// - returns: This builder.\n+  @discardableResult\n+  public func addFilter(_ filter: RequestFilter) -> StreamClientBuilder {\n+    self.filterChain.append(EnvoyHTTPFilter(requestFilter: filter))\n+    return self\n+  }\n+\n+  /// Add HTTP filter for resonses received by this client.\n+  ///\n+  /// - parameter filter: RequestFilter to be invoked for streams.\n+  ///\n+  /// - returns: This builder.\n+  @discardableResult\n+  public func addFilter(_ filter: ResponseFilter) -> StreamClientBuilder {\n+    self.filterChain.append(EnvoyHTTPFilter(responseFilter: filter))\n+    return self\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE3ODQ3Mw=="}, "originalCommit": {"oid": "7a296fdf97f9a24f63fce6dd9821510970bc4f14"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10a8f35aa080f03efec7f5fe863878ea41efada5", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/10a8f35aa080f03efec7f5fe863878ea41efada5", "committedDate": "2020-07-19T06:15:58Z", "message": "wip: rebased ios poc work\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8016316bae4c24a4a7cbb27df34f48a62e0fa55", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/e8016316bae4c24a4a7cbb27df34f48a62e0fa55", "committedDate": "2020-07-19T06:15:58Z", "message": "fix header path\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57ca90364d080c4997ee5b29d1125b9c8e7c63f7", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/57ca90364d080c4997ee5b29d1125b9c8e7c63f7", "committedDate": "2020-07-19T06:15:58Z", "message": "update filter arrays with element type\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9efe34ca487cc9e996ce29d81dd56d749a7ae87c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9efe34ca487cc9e996ce29d81dd56d749a7ae87c", "committedDate": "2020-07-19T06:15:58Z", "message": "revert mutability change to swift Header\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca31bdf639b219ce4d5d2c5ff3914d5feb250b28", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/ca31bdf639b219ce4d5d2c5ff3914d5feb250b28", "committedDate": "2020-07-19T06:15:58Z", "message": "cleaned up response path\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67e59eb280cc9cd5de5a965dc37e951d209eab3d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/67e59eb280cc9cd5de5a965dc37e951d209eab3d", "committedDate": "2020-07-19T06:15:58Z", "message": "here we go\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "312093e35d5a6a6cb037dd3db84a927ca03ff867", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/312093e35d5a6a6cb037dd3db84a927ca03ff867", "committedDate": "2020-07-19T06:15:58Z", "message": "cleanup\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddbdd678be56f8b865250b400415ebccbcfd4f7a", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/ddbdd678be56f8b865250b400415ebccbcfd4f7a", "committedDate": "2020-07-19T06:15:58Z", "message": "swiftlint\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b837e51c704c4599f74e9c66053e91c4088d063", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/0b837e51c704c4599f74e9c66053e91c4088d063", "committedDate": "2020-07-19T06:15:58Z", "message": "more swiftlint\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c475fbd59ec34dcafb11c28f4f38ced99c97c1b1", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c475fbd59ec34dcafb11c28f4f38ced99c97c1b1", "committedDate": "2020-07-19T06:15:58Z", "message": "add array element type\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6106985f25f61ef0f9c071ee8c2f6bef79f125f5", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6106985f25f61ef0f9c071ee8c2f6bef79f125f5", "committedDate": "2020-07-19T06:15:58Z", "message": "fix swift tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11ec0567ecf247eab6c6ec781c573ead93db0b24", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/11ec0567ecf247eab6c6ec781c573ead93db0b24", "committedDate": "2020-07-19T06:15:58Z", "message": "fix typo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d39d8b50692542fd86ecc7549c5bc37c472b3d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/39d39d8b50692542fd86ecc7549c5bc37c472b3d", "committedDate": "2020-07-19T06:15:58Z", "message": "move demo filter\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e14aa26f28aaa0460da23cbc686167d078071777", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/e14aa26f28aaa0460da23cbc686167d078071777", "committedDate": "2020-07-19T06:15:58Z", "message": "capture filter-demo header in Swift example app\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49a8d7621691e28e996cbffb2f9710608f7cb64e", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/49a8d7621691e28e996cbffb2f9710608f7cb64e", "committedDate": "2020-07-19T06:15:58Z", "message": "add TODO\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "978fd35c8af0ad44dd5f68b7d0b70958a876143a", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/978fd35c8af0ad44dd5f68b7d0b70958a876143a", "committedDate": "2020-07-19T06:15:58Z", "message": "update types in loop\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ab88ca5359a2760aebc9ac83631d3bce84bb7f3", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6ab88ca5359a2760aebc9ac83631d3bce84bb7f3", "committedDate": "2020-07-19T06:15:58Z", "message": "inline some return values\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9336510c162da5577c2582f0ecf1b3e12ce7a798", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9336510c162da5577c2582f0ecf1b3e12ce7a798", "committedDate": "2020-07-19T06:15:58Z", "message": "add bidirectional support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b08d0548fb52ead8556ac632ab60b389a86774f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/5b08d0548fb52ead8556ac632ab60b389a86774f", "committedDate": "2020-07-17T17:54:04Z", "message": "inline some return values\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "9336510c162da5577c2582f0ecf1b3e12ce7a798", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9336510c162da5577c2582f0ecf1b3e12ce7a798", "committedDate": "2020-07-19T06:15:58Z", "message": "add bidirectional support\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af97368474d3a9ad9d1c77d1890c3d159af8ee22", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/af97368474d3a9ad9d1c77d1890c3d159af8ee22", "committedDate": "2020-07-19T06:49:08Z", "message": "update TODO with additional context\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df9f2945ea5e04121257781e18ce7b387c389f0d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/df9f2945ea5e04121257781e18ce7b387c389f0d", "committedDate": "2020-07-19T10:14:02Z", "message": "fix missing import\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c768c577a2febc05b11e0f63bb1c5ab302a09ad2", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c768c577a2febc05b11e0f63bb1c5ab302a09ad2", "committedDate": "2020-07-19T10:18:57Z", "message": "solution to link filter status declarations across layers\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a561feda7139e6328982964ae181653c64949438", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/a561feda7139e6328982964ae181653c64949438", "committedDate": "2020-07-19T10:19:38Z", "message": "swiftlint\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca446c444f35399fa843c3273c6838c2e1378c6a", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/ca446c444f35399fa843c3273c6838c2e1378c6a", "committedDate": "2020-07-19T10:45:48Z", "message": "name parameters\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff07bc36986a53ef7df07f46fccc5594a62bf344", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/ff07bc36986a53ef7df07f46fccc5594a62bf344", "committedDate": "2020-07-19T10:58:22Z", "message": "fix typo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3269118018bd4e493e1606782e747cb89ee9cdc", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/d3269118018bd4e493e1606782e747cb89ee9cdc", "committedDate": "2020-07-20T20:37:39Z", "message": "improve docstring\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxOTcwNzcy", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#pullrequestreview-451970772", "createdAt": "2020-07-20T21:25:23Z", "commit": {"oid": "d3269118018bd4e493e1606782e747cb89ee9cdc"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMToyNToyM1rOG0f1vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQyMTozNjoyMFrOG0gIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwMDc5OQ==", "bodyText": "Shouldn't this be an NSMutableArray as the values?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r457700799", "createdAt": "2020-07-20T21:25:23Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngine.h", "diffHunk": "@@ -7,6 +7,9 @@ NS_ASSUME_NONNULL_BEGIN\n /// A set of headers that may be passed to/from an Envoy stream.\n typedef NSDictionary<NSString *, NSArray<NSString *> *> EnvoyHeaders;\n \n+/// A mutable set of headers that may be passed to/from an Envoy stream.\n+typedef NSMutableDictionary<NSString *, NSArray<NSString *> *> EnvoyMutableHeaders;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3269118018bd4e493e1606782e747cb89ee9cdc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwNTM4MA==", "bodyText": "ENVOY_SUCCESS?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r457705380", "createdAt": "2020-07-20T21:35:42Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -29,13 +119,33 @@ - (void)dealloc {\n   [[NSNotificationCenter defaultCenter] removeObserver:self];\n }\n \n+- (int)registerFilter:(EnvoyHTTPFilter *)filter {\n+  // TODO(goaway): Everything here leaks, but it's all be tied to the life of the engine.\n+  // This will need to be updated for https://github.com/lyft/envoy-mobile/issues/332\n+  ios_http_filter_context *context = safe_malloc(sizeof(ios_http_filter_context));\n+  CFBridgingRetain(filter);\n+  context->filter = filter;\n+  envoy_http_filter *api = safe_malloc(sizeof(envoy_http_filter));\n+  api->on_request_headers = ios_http_filter_on_request_headers;\n+  api->on_request_data = NULL;\n+  api->on_response_headers = ios_http_filter_on_response_headers;\n+  api->on_response_data = NULL;\n+  api->context = context;\n+  register_platform_api(filter.name.UTF8String, api);\n+  return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3269118018bd4e493e1606782e747cb89ee9cdc"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzcwNTY3MA==", "bodyText": "Maybe add a todo here since we'll be switching from instance-based filters in a future PR?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#discussion_r457705670", "createdAt": "2020-07-20T21:36:20Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StreamClientBuilder.swift", "diffHunk": "@@ -107,6 +108,17 @@ public final class StreamClientBuilder: NSObject {\n     return self\n   }\n \n+  /// Add HTTP filter for requests sent by this client.\n+  ///\n+  /// - parameter filter: RequestFilter to be invoked for streams.\n+  ///\n+  /// - returns: This builder.\n+  @discardableResult\n+  public func addFilter(_ filter: Filter) -> StreamClientBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3269118018bd4e493e1606782e747cb89ee9cdc"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9122546ecd3edc10ccef2ce3a769dff3712f8cd3", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9122546ecd3edc10ccef2ce3a769dff3712f8cd3", "committedDate": "2020-07-21T08:16:35Z", "message": "final pass\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDk1OTM1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/943#pullrequestreview-452495935", "createdAt": "2020-07-21T14:09:34Z", "commit": {"oid": "9122546ecd3edc10ccef2ce3a769dff3712f8cd3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4098, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}