{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4ODA1NjE1", "number": 1069, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NDoyOVrOEhbP-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTo0NjoyMFrOEoxOQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDg0OTIwOnYy", "diffSide": "RIGHT", "path": "library/swift/test/DemoFilter.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NDoyOVrOHOvEbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NDoyOVrOHOvEbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMzI5NQ==", "bodyText": "This shouldn't be required for ResponseFilter implementations", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r485213295", "createdAt": "2020-09-08T21:44:29Z", "author": {"login": "rebello95"}, "path": "library/swift/test/DemoFilter.swift", "diffHunk": "@@ -0,0 +1,30 @@\n+import Envoy\n+import Foundation\n+\n+struct DemoFilter: ResponseFilter {\n+  func onResponseHeaders(_ headers: ResponseHeaders, endStream: Bool)\n+    -> FilterHeadersStatus<ResponseHeaders>\n+  {\n+    NSLog(\"Adding new header!\")\n+    let builder = headers.toResponseHeadersBuilder()\n+    builder.add(name: \"filter-demo\", value: \"1\")\n+    return .continue(headers: builder.build())\n+  }\n+\n+  func setResponseFilterCallbacks(_ callbacks: ResponseFilterCallbacks) {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6417305edae972382fe3c69a578edac8286152a7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDg1MDAwOnYy", "diffSide": "RIGHT", "path": "library/swift/test/BridgeTests.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NDo0OFrOHOvFAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NDo0OFrOHOvFAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxMzQ0MQ==", "bodyText": "Can remove this", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r485213441", "createdAt": "2020-09-08T21:44:48Z", "author": {"login": "rebello95"}, "path": "library/swift/test/BridgeTests.swift", "diffHunk": "@@ -0,0 +1,100 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+private let kMockTemplate = \"\"\"\n+mock_template:\n+- name: mock\n+  stats_domain: {{ stats_domain }}\n+  device_os: {{ device_os }}\n+  connect_timeout: {{ connect_timeout_seconds }}s\n+  dns_refresh_rate: {{ dns_refresh_rate_seconds }}s\n+  dns_failure_refresh_rate:\n+    base_interval: {{ dns_failure_refresh_rate_seconds_base }}s\n+    max_interval: {{ dns_failure_refresh_rate_seconds_max }}s\n+  platform_filter_chain: {{ platform_filter_chain }}\n+  stats_flush_interval: {{ stats_flush_interval_seconds }}s\n+  app_version: {{ app_version }}\n+  app_id: {{ app_id }}\n+  virtual_clusters: {{ virtual_clusters }}\n+\"\"\"\n+\n+private struct TestFilter: Filter {}\n+\n+final class BridgeTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6417305edae972382fe3c69a578edac8286152a7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDg1NDIwOnYy", "diffSide": "RIGHT", "path": "library/swift/test/BridgeTests.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NjoyM1rOHOvHlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NjoyM1rOHOvHlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNDEwMw==", "bodyText": "We should be using XCTestExpectation rather than NSCondition: https://github.com/lyft/envoy-mobile/blob/06fc24a895cb640408450bc220190c01c3f2f2c0/library/swift/test/EngineBuilderTests.swift#L131", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r485214103", "createdAt": "2020-09-08T21:46:23Z", "author": {"login": "rebello95"}, "path": "library/swift/test/BridgeTests.swift", "diffHunk": "@@ -0,0 +1,100 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+private let kMockTemplate = \"\"\"\n+mock_template:\n+- name: mock\n+  stats_domain: {{ stats_domain }}\n+  device_os: {{ device_os }}\n+  connect_timeout: {{ connect_timeout_seconds }}s\n+  dns_refresh_rate: {{ dns_refresh_rate_seconds }}s\n+  dns_failure_refresh_rate:\n+    base_interval: {{ dns_failure_refresh_rate_seconds_base }}s\n+    max_interval: {{ dns_failure_refresh_rate_seconds_max }}s\n+  platform_filter_chain: {{ platform_filter_chain }}\n+  stats_flush_interval: {{ stats_flush_interval_seconds }}s\n+  app_version: {{ app_version }}\n+  app_id: {{ app_id }}\n+  virtual_clusters: {{ virtual_clusters }}\n+\"\"\"\n+\n+private struct TestFilter: Filter {}\n+\n+final class BridgeTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+  }\n+\n+  func testInitial() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 418\n+            http_filters:\n+              - name: envoy.filters.http.assertion\n+                typed_config:\n+                  \"@type\": \\(assertionFilterType)\n+                  match_config:\n+                    http_request_headers_match:\n+                      headers:\n+                        - name: \":authority\"\n+                          exact_match: example.com\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let cond = NSCondition()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6417305edae972382fe3c69a578edac8286152a7"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDg1NjMzOnYy", "diffSide": "RIGHT", "path": "library/swift/test/BridgeTests.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NzoxNVrOHOvI7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NzoxNVrOHOvI7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNDQ0Ng==", "bodyText": "We should add some more color to what this is actually testing (test names can be quite verbose which is fine)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r485214446", "createdAt": "2020-09-08T21:47:15Z", "author": {"login": "rebello95"}, "path": "library/swift/test/BridgeTests.swift", "diffHunk": "@@ -0,0 +1,100 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+private let kMockTemplate = \"\"\"\n+mock_template:\n+- name: mock\n+  stats_domain: {{ stats_domain }}\n+  device_os: {{ device_os }}\n+  connect_timeout: {{ connect_timeout_seconds }}s\n+  dns_refresh_rate: {{ dns_refresh_rate_seconds }}s\n+  dns_failure_refresh_rate:\n+    base_interval: {{ dns_failure_refresh_rate_seconds_base }}s\n+    max_interval: {{ dns_failure_refresh_rate_seconds_max }}s\n+  platform_filter_chain: {{ platform_filter_chain }}\n+  stats_flush_interval: {{ stats_flush_interval_seconds }}s\n+  app_version: {{ app_version }}\n+  app_id: {{ app_id }}\n+  virtual_clusters: {{ virtual_clusters }}\n+\"\"\"\n+\n+private struct TestFilter: Filter {}\n+\n+final class BridgeTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+  }\n+\n+  func testInitial() throws {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6417305edae972382fe3c69a578edac8286152a7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDg1NzIzOnYy", "diffSide": "RIGHT", "path": "library/swift/test/BridgeTests.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NzozMlrOHOvJfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0NzozMlrOHOvJfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNDU4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    let status = responseHeaders.httpStatus ?? -1\n          \n          \n            \n                     XCTAssertEqual(200, status)\n          \n          \n            \n                     XCTAssertEqual(200, responseHeaders.httpStatus)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r485214589", "createdAt": "2020-09-08T21:47:32Z", "author": {"login": "rebello95"}, "path": "library/swift/test/BridgeTests.swift", "diffHunk": "@@ -0,0 +1,100 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+private let kMockTemplate = \"\"\"\n+mock_template:\n+- name: mock\n+  stats_domain: {{ stats_domain }}\n+  device_os: {{ device_os }}\n+  connect_timeout: {{ connect_timeout_seconds }}s\n+  dns_refresh_rate: {{ dns_refresh_rate_seconds }}s\n+  dns_failure_refresh_rate:\n+    base_interval: {{ dns_failure_refresh_rate_seconds_base }}s\n+    max_interval: {{ dns_failure_refresh_rate_seconds_max }}s\n+  platform_filter_chain: {{ platform_filter_chain }}\n+  stats_flush_interval: {{ stats_flush_interval_seconds }}s\n+  app_version: {{ app_version }}\n+  app_id: {{ app_id }}\n+  virtual_clusters: {{ virtual_clusters }}\n+\"\"\"\n+\n+private struct TestFilter: Filter {}\n+\n+final class BridgeTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+  }\n+\n+  func testInitial() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 418\n+            http_filters:\n+              - name: envoy.filters.http.assertion\n+                typed_config:\n+                  \"@type\": \\(assertionFilterType)\n+                  match_config:\n+                    http_request_headers_match:\n+                      headers:\n+                        - name: \":authority\"\n+                          exact_match: example.com\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let cond = NSCondition()\n+    let q = DispatchQueue(label: \"test.envoymobile\")\n+    let client = try EngineBuilder(yaml: config)\n+      .addLogLevel(.debug)\n+      .addFilter(factory: DemoFilter.init)\n+      .build()\n+      .streamClient\n+\n+    let requestHeaders = RequestHeadersBuilder(method: .get, scheme: \"https\",\n+                                               authority: \"example.com\", path: \"/test\")\n+      .addUpstreamHttpProtocol(.http2)\n+      .build()\n+    client\n+      .newStreamPrototype()\n+      .setOnResponseHeaders { responseHeaders, _ in\n+        let status = responseHeaders.httpStatus ?? -1\n+         XCTAssertEqual(200, status)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6417305edae972382fe3c69a578edac8286152a7"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNDg1ODE2OnYy", "diffSide": "RIGHT", "path": "library/swift/test/BridgeTests.swift", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQyMTo0Nzo1MFrOHOvKDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNjozOTo1MVrOHZ3bQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNDczMg==", "bodyText": "Could probably just use .main", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r485214732", "createdAt": "2020-09-08T21:47:50Z", "author": {"login": "rebello95"}, "path": "library/swift/test/BridgeTests.swift", "diffHunk": "@@ -0,0 +1,100 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+private let kMockTemplate = \"\"\"\n+mock_template:\n+- name: mock\n+  stats_domain: {{ stats_domain }}\n+  device_os: {{ device_os }}\n+  connect_timeout: {{ connect_timeout_seconds }}s\n+  dns_refresh_rate: {{ dns_refresh_rate_seconds }}s\n+  dns_failure_refresh_rate:\n+    base_interval: {{ dns_failure_refresh_rate_seconds_base }}s\n+    max_interval: {{ dns_failure_refresh_rate_seconds_max }}s\n+  platform_filter_chain: {{ platform_filter_chain }}\n+  stats_flush_interval: {{ stats_flush_interval_seconds }}s\n+  app_version: {{ app_version }}\n+  app_id: {{ app_id }}\n+  virtual_clusters: {{ virtual_clusters }}\n+\"\"\"\n+\n+private struct TestFilter: Filter {}\n+\n+final class BridgeTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+  }\n+\n+  func testInitial() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 418\n+            http_filters:\n+              - name: envoy.filters.http.assertion\n+                typed_config:\n+                  \"@type\": \\(assertionFilterType)\n+                  match_config:\n+                    http_request_headers_match:\n+                      headers:\n+                        - name: \":authority\"\n+                          exact_match: example.com\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let cond = NSCondition()\n+    let q = DispatchQueue(label: \"test.envoymobile\")\n+    let client = try EngineBuilder(yaml: config)\n+      .addLogLevel(.debug)\n+      .addFilter(factory: DemoFilter.init)\n+      .build()\n+      .streamClient\n+\n+    let requestHeaders = RequestHeadersBuilder(method: .get, scheme: \"https\",\n+                                               authority: \"example.com\", path: \"/test\")\n+      .addUpstreamHttpProtocol(.http2)\n+      .build()\n+    client\n+      .newStreamPrototype()\n+      .setOnResponseHeaders { responseHeaders, _ in\n+        let status = responseHeaders.httpStatus ?? -1\n+         XCTAssertEqual(200, status)\n+      }\n+      .setOnResponseData { _, endStream in\n+        XCTAssertTrue(endStream)\n+        cond.signal()\n+      }\n+      .start(queue: q)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6417305edae972382fe3c69a578edac8286152a7"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg3NjAxMQ==", "bodyText": "I believe I need to use a different thread for the response to advance the test thread to wait for the expectation. In an earlier draft the test was blocking if I queued on main. I did change some of the test structure, so I can try with main again.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496876011", "createdAt": "2020-09-29T16:27:05Z", "author": {"login": "junr03"}, "path": "library/swift/test/BridgeTests.swift", "diffHunk": "@@ -0,0 +1,100 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+private let kMockTemplate = \"\"\"\n+mock_template:\n+- name: mock\n+  stats_domain: {{ stats_domain }}\n+  device_os: {{ device_os }}\n+  connect_timeout: {{ connect_timeout_seconds }}s\n+  dns_refresh_rate: {{ dns_refresh_rate_seconds }}s\n+  dns_failure_refresh_rate:\n+    base_interval: {{ dns_failure_refresh_rate_seconds_base }}s\n+    max_interval: {{ dns_failure_refresh_rate_seconds_max }}s\n+  platform_filter_chain: {{ platform_filter_chain }}\n+  stats_flush_interval: {{ stats_flush_interval_seconds }}s\n+  app_version: {{ app_version }}\n+  app_id: {{ app_id }}\n+  virtual_clusters: {{ virtual_clusters }}\n+\"\"\"\n+\n+private struct TestFilter: Filter {}\n+\n+final class BridgeTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+  }\n+\n+  func testInitial() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 418\n+            http_filters:\n+              - name: envoy.filters.http.assertion\n+                typed_config:\n+                  \"@type\": \\(assertionFilterType)\n+                  match_config:\n+                    http_request_headers_match:\n+                      headers:\n+                        - name: \":authority\"\n+                          exact_match: example.com\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let cond = NSCondition()\n+    let q = DispatchQueue(label: \"test.envoymobile\")\n+    let client = try EngineBuilder(yaml: config)\n+      .addLogLevel(.debug)\n+      .addFilter(factory: DemoFilter.init)\n+      .build()\n+      .streamClient\n+\n+    let requestHeaders = RequestHeadersBuilder(method: .get, scheme: \"https\",\n+                                               authority: \"example.com\", path: \"/test\")\n+      .addUpstreamHttpProtocol(.http2)\n+      .build()\n+    client\n+      .newStreamPrototype()\n+      .setOnResponseHeaders { responseHeaders, _ in\n+        let status = responseHeaders.httpStatus ?? -1\n+         XCTAssertEqual(200, status)\n+      }\n+      .setOnResponseData { _, endStream in\n+        XCTAssertTrue(endStream)\n+        cond.signal()\n+      }\n+      .start(queue: q)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNDczMg=="}, "originalCommit": {"oid": "6417305edae972382fe3c69a578edac8286152a7"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njg4NDU0NA==", "bodyText": "I guess expectations work differently under the hood than NSCondition. Changed queue back to main successfully.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496884544", "createdAt": "2020-09-29T16:39:51Z", "author": {"login": "junr03"}, "path": "library/swift/test/BridgeTests.swift", "diffHunk": "@@ -0,0 +1,100 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+private let kMockTemplate = \"\"\"\n+mock_template:\n+- name: mock\n+  stats_domain: {{ stats_domain }}\n+  device_os: {{ device_os }}\n+  connect_timeout: {{ connect_timeout_seconds }}s\n+  dns_refresh_rate: {{ dns_refresh_rate_seconds }}s\n+  dns_failure_refresh_rate:\n+    base_interval: {{ dns_failure_refresh_rate_seconds_base }}s\n+    max_interval: {{ dns_failure_refresh_rate_seconds_max }}s\n+  platform_filter_chain: {{ platform_filter_chain }}\n+  stats_flush_interval: {{ stats_flush_interval_seconds }}s\n+  app_version: {{ app_version }}\n+  app_id: {{ app_id }}\n+  virtual_clusters: {{ virtual_clusters }}\n+\"\"\"\n+\n+private struct TestFilter: Filter {}\n+\n+final class BridgeTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+  }\n+\n+  func testInitial() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 418\n+            http_filters:\n+              - name: envoy.filters.http.assertion\n+                typed_config:\n+                  \"@type\": \\(assertionFilterType)\n+                  match_config:\n+                    http_request_headers_match:\n+                      headers:\n+                        - name: \":authority\"\n+                          exact_match: example.com\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let cond = NSCondition()\n+    let q = DispatchQueue(label: \"test.envoymobile\")\n+    let client = try EngineBuilder(yaml: config)\n+      .addLogLevel(.debug)\n+      .addFilter(factory: DemoFilter.init)\n+      .build()\n+      .streamClient\n+\n+    let requestHeaders = RequestHeadersBuilder(method: .get, scheme: \"https\",\n+                                               authority: \"example.com\", path: \"/test\")\n+      .addUpstreamHttpProtocol(.http2)\n+      .build()\n+    client\n+      .newStreamPrototype()\n+      .setOnResponseHeaders { responseHeaders, _ in\n+        let status = responseHeaders.httpStatus ?? -1\n+         XCTAssertEqual(200, status)\n+      }\n+      .setOnResponseData { _, endStream in\n+        XCTAssertTrue(endStream)\n+        cond.signal()\n+      }\n+      .start(queue: q)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTIxNDczMg=="}, "originalCommit": {"oid": "6417305edae972382fe3c69a578edac8286152a7"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA2MjQ0OnYy", "diffSide": "RIGHT", "path": "library/swift/test/HttpBridgeTests/CancelStreamTest.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjoyM1rOHZ7wAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjoyM1rOHZ7wAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NTM5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                self.waitForExpectations(timeout: 1)\n          \n          \n            \n                XCTAssertEqual(XCTWaiter.wait(for: [expectation], timeout: 1), .completed)\n          \n      \n    \n    \n  \n\nI'd replace these with assertions that the result of the wait is actually completed (throughout this PR)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496955393", "createdAt": "2020-09-29T18:36:23Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/CancelStreamTest.swift", "diffHunk": "@@ -0,0 +1,57 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class CancelStreamTests: XCTestCase {\n+  func testCancelStream() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 200\n+            http_filters:\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let expectation = self.expectation(description: \"Run called with expected cancellation\")\n+    let client = try EngineBuilder(yaml: config)\n+      .addLogLevel(.debug)\n+      .addFilter(factory: DemoFilter.init)\n+      .build()\n+      .streamClient()\n+\n+    client\n+      .newStreamPrototype()\n+      .setOnCancel {\n+         expectation.fulfill()\n+      }\n+      .start()\n+      .cancel()\n+\n+    self.waitForExpectations(timeout: 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA2NDIxOnYy", "diffSide": "RIGHT", "path": "library/swift/test/HttpBridgeTests/DemoFilter.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjo1MlrOHZ7xEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjo1MlrOHZ7xEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NTY2Ng==", "bodyText": "Should we remove these logs?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496955666", "createdAt": "2020-09-29T18:36:52Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/DemoFilter.swift", "diffHunk": "@@ -0,0 +1,28 @@\n+import Envoy\n+import Foundation\n+\n+struct DemoFilter: ResponseFilter {\n+  func onResponseHeaders(_ headers: ResponseHeaders, endStream: Bool)\n+    -> FilterHeadersStatus<ResponseHeaders>\n+  {\n+    NSLog(\"Adding new header!\")\n+    let builder = headers.toResponseHeadersBuilder()\n+    builder.add(name: \"filter-demo\", value: \"1\")\n+    return .continue(headers: builder.build())\n+  }\n+\n+  func onResponseData(_ body: Data, endStream: Bool) -> FilterDataStatus<ResponseHeaders> {\n+    // TODO(goaway): Can remove this when we have better integration coverage in place.\n+    NSLog(\"Saw data chunk of length \\(body.count)\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA2NDQ0OnYy", "diffSide": "RIGHT", "path": "library/swift/test/HttpBridgeTests/DemoFilter.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjo1NlrOHZ7xMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjo1NlrOHZ7xMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NTY5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                NSLog(\"Adding new header!\")", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496955698", "createdAt": "2020-09-29T18:36:56Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/DemoFilter.swift", "diffHunk": "@@ -0,0 +1,28 @@\n+import Envoy\n+import Foundation\n+\n+struct DemoFilter: ResponseFilter {\n+  func onResponseHeaders(_ headers: ResponseHeaders, endStream: Bool)\n+    -> FilterHeadersStatus<ResponseHeaders>\n+  {\n+    NSLog(\"Adding new header!\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA3NzIyOnYy", "diffSide": "RIGHT", "path": "library/swift/test/HttpBridgeTests/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0MDo0MFrOHZ75Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0MDo0MFrOHZ75Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NzczOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            This test suite tests end-to-end integration of the platform layer to the core layer's HTTP\n          \n          \n            \n            functionality. It tests both the request side sendHeaders/Data,Close,Cancel; and the response\n          \n          \n            \n            side via all the setOnResponseHeaders/Data,setOnError,setOnCancel.\n          \n          \n            \n            \n          \n          \n            \n            Note: These tests are broke apart into different suites and bazel targets in order to tear down\n          \n          \n            \n            app state --and thus static lifetime objects like the Envoy engine -- between tests. When\n          \n          \n            \n            multiple engine support (https://github.com/lyft/envoy-mobile/issues/332) lands, all of these\n          \n          \n            \n            tests can be collapsed to the same suite/target.\n          \n          \n            \n            \n          \n          \n            \n            TODO: setOnTrailers is not tested as the neither the direct_response pathway, nor the router\n          \n          \n            \n            allow sending trailers programmatically. Add tests once possible.\n          \n          \n            \n            This test suite tests end-to-end integration of the platform layer and the core layer's HTTP\n          \n          \n            \n            functionality. It tests both the request side `send{Headers|Data}`, `close`, `cancel`,\n          \n          \n            \n            as well as the response side via all the` setOnResponse{...}` functions.\n          \n          \n            \n            \n          \n          \n            \n            TODO: These tests are broken apart into different suites and bazel targets in order to tear down\n          \n          \n            \n            app state - and thus static lifetime objects like the Envoy engine - between tests. When\n          \n          \n            \n            multiple engine support (https://github.com/lyft/envoy-mobile/issues/332) lands, all of these\n          \n          \n            \n            tests can be collapsed to the same suite/target.\n          \n          \n            \n            \n          \n          \n            \n            TODO: setOnTrailers is not tested as neither the `direct_response` pathway, nor the router\n          \n          \n            \n            allow sending trailers programmatically. Add tests once possible.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496957738", "createdAt": "2020-09-29T18:40:40Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/README.md", "diffHunk": "@@ -0,0 +1,11 @@\n+This test suite tests end-to-end integration of the platform layer to the core layer's HTTP\n+functionality. It tests both the request side sendHeaders/Data,Close,Cancel; and the response\n+side via all the setOnResponseHeaders/Data,setOnError,setOnCancel.\n+\n+Note: These tests are broke apart into different suites and bazel targets in order to tear down\n+app state --and thus static lifetime objects like the Envoy engine -- between tests. When\n+multiple engine support (https://github.com/lyft/envoy-mobile/issues/332) lands, all of these\n+tests can be collapsed to the same suite/target.\n+\n+TODO: setOnTrailers is not tested as the neither the direct_response pathway, nor the router\n+allow sending trailers programmatically. Add tests once possible.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA3OTQzOnYy", "diffSide": "RIGHT", "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0MToxMVrOHZ76kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOToxOTowOVrOHZ9XoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1ODA5Ng==", "bodyText": "If you want you could put one of these at the top of the individual file and do // swiftlint:disable line_length", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496958096", "createdAt": "2020-09-29T18:41:11Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "diffHunk": "@@ -0,0 +1,78 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class ReceiveDataTests: XCTestCase {\n+  func testReceiveData() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk4MTkyMA==", "bodyText": "just want to do these specific lines", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496981920", "createdAt": "2020-09-29T19:19:09Z", "author": {"login": "junr03"}, "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "diffHunk": "@@ -0,0 +1,78 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class ReceiveDataTests: XCTestCase {\n+  func testReceiveData() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1ODA5Ng=="}, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA4Nzc0OnYy", "diffSide": "RIGHT", "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0MzoyN1rOHZ7_vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxOTo0NzozM1rOHZ-ndw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1OTQyMw==", "bodyText": "We should add a second expectation here and wait for it below as well - there's no validation as-is that this assert is actually called", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496959423", "createdAt": "2020-09-29T18:43:27Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "diffHunk": "@@ -0,0 +1,78 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class ReceiveDataTests: XCTestCase {\n+  func testReceiveData() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 200\n+                        body:\n+                          inline_string: response_body\n+            http_filters:\n+              - name: envoy.filters.http.assertion\n+                typed_config:\n+                  \"@type\": \\(assertionFilterType)\n+                  match_config:\n+                    http_request_headers_match:\n+                      headers:\n+                        - name: \":authority\"\n+                          exact_match: example.com\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let expectation = self.expectation(description: \"Run called with expected data\")\n+    let client = try EngineBuilder(yaml: config)\n+      .addLogLevel(.debug)\n+      .addFilter(factory: DemoFilter.init)\n+      .build()\n+      .streamClient()\n+\n+    let requestHeaders = RequestHeadersBuilder(method: .get, scheme: \"https\",\n+                                               authority: \"example.com\", path: \"/test\")\n+      .addUpstreamHttpProtocol(.http2)\n+      .build()\n+    client\n+      .newStreamPrototype()\n+      .setOnResponseHeaders { responseHeaders, _ in\n+         XCTAssertEqual(200, responseHeaders.httpStatus)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk4MjcxNw==", "bodyText": "How come there isn't? If the expectation below doesn't fulfill then the test will fail. Meaning that if the test finishes, this code must have ran?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496982717", "createdAt": "2020-09-29T19:20:04Z", "author": {"login": "junr03"}, "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "diffHunk": "@@ -0,0 +1,78 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class ReceiveDataTests: XCTestCase {\n+  func testReceiveData() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 200\n+                        body:\n+                          inline_string: response_body\n+            http_filters:\n+              - name: envoy.filters.http.assertion\n+                typed_config:\n+                  \"@type\": \\(assertionFilterType)\n+                  match_config:\n+                    http_request_headers_match:\n+                      headers:\n+                        - name: \":authority\"\n+                          exact_match: example.com\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let expectation = self.expectation(description: \"Run called with expected data\")\n+    let client = try EngineBuilder(yaml: config)\n+      .addLogLevel(.debug)\n+      .addFilter(factory: DemoFilter.init)\n+      .build()\n+      .streamClient()\n+\n+    let requestHeaders = RequestHeadersBuilder(method: .get, scheme: \"https\",\n+                                               authority: \"example.com\", path: \"/test\")\n+      .addUpstreamHttpProtocol(.http2)\n+      .build()\n+    client\n+      .newStreamPrototype()\n+      .setOnResponseHeaders { responseHeaders, _ in\n+         XCTAssertEqual(200, responseHeaders.httpStatus)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1OTQyMw=="}, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzAwMjM1OQ==", "bodyText": "My concern is that it relies on the (hopefully always valid) assumption that onResponseData will always be called after onResponseHeaders (since the expectation being fulfilled is fulfilled upon receiving response data, but nothing is explicitly fulfilled on headers). Adding an expectation here would prevent the theoretical issue of the filter responding with data callbacks but no headers", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r497002359", "createdAt": "2020-09-29T19:47:33Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "diffHunk": "@@ -0,0 +1,78 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class ReceiveDataTests: XCTestCase {\n+  func testReceiveData() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 200\n+                        body:\n+                          inline_string: response_body\n+            http_filters:\n+              - name: envoy.filters.http.assertion\n+                typed_config:\n+                  \"@type\": \\(assertionFilterType)\n+                  match_config:\n+                    http_request_headers_match:\n+                      headers:\n+                        - name: \":authority\"\n+                          exact_match: example.com\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let expectation = self.expectation(description: \"Run called with expected data\")\n+    let client = try EngineBuilder(yaml: config)\n+      .addLogLevel(.debug)\n+      .addFilter(factory: DemoFilter.init)\n+      .build()\n+      .streamClient()\n+\n+    let requestHeaders = RequestHeadersBuilder(method: .get, scheme: \"https\",\n+                                               authority: \"example.com\", path: \"/test\")\n+      .addUpstreamHttpProtocol(.http2)\n+      .build()\n+    client\n+      .newStreamPrototype()\n+      .setOnResponseHeaders { responseHeaders, _ in\n+         XCTAssertEqual(200, responseHeaders.httpStatus)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1OTQyMw=="}, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA4OTMwOnYy", "diffSide": "RIGHT", "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0Mzo1NVrOHZ8AwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0Mzo1NVrOHZ8AwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1OTY4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    let responseBody = String(decoding: data, as: UTF8.self)\n          \n          \n            \n                    let responseBody = String(data: data, encoding: .utf8)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496959681", "createdAt": "2020-09-29T18:43:55Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "diffHunk": "@@ -0,0 +1,78 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class ReceiveDataTests: XCTestCase {\n+  func testReceiveData() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 200\n+                        body:\n+                          inline_string: response_body\n+            http_filters:\n+              - name: envoy.filters.http.assertion\n+                typed_config:\n+                  \"@type\": \\(assertionFilterType)\n+                  match_config:\n+                    http_request_headers_match:\n+                      headers:\n+                        - name: \":authority\"\n+                          exact_match: example.com\n+              - name: envoy.router\n+                typed_config:\n+                  \"@type\": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router\n+    \"\"\"\n+    let expectation = self.expectation(description: \"Run called with expected data\")\n+    let client = try EngineBuilder(yaml: config)\n+      .addLogLevel(.debug)\n+      .addFilter(factory: DemoFilter.init)\n+      .build()\n+      .streamClient()\n+\n+    let requestHeaders = RequestHeadersBuilder(method: .get, scheme: \"https\",\n+                                               authority: \"example.com\", path: \"/test\")\n+      .addUpstreamHttpProtocol(.http2)\n+      .build()\n+    client\n+      .newStreamPrototype()\n+      .setOnResponseHeaders { responseHeaders, _ in\n+         XCTAssertEqual(200, responseHeaders.httpStatus)\n+      }\n+      .setOnResponseData { data, _ in\n+        let responseBody = String(decoding: data, as: UTF8.self)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTEwNTg2OnYy", "diffSide": "RIGHT", "path": "library/swift/test/HttpBridgeTests/ReceiveErrorTest.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0ODoyOFrOHZ8K2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODo0ODoyOFrOHZ8K2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk2MjI2NQ==", "bodyText": "Would it make sense to document lower in the test that Envoy Mobile maps a 503 to an EnvoyError which is what's being tested?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r496962265", "createdAt": "2020-09-29T18:48:28Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/ReceiveErrorTest.swift", "diffHunk": "@@ -0,0 +1,69 @@\n+import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class ReceiveErrorTests: XCTestCase {\n+  func testReceiveError() throws {\n+    // swiftlint:disable:next line_length\n+    let apiListenerType = \"type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\"\n+    // swiftlint:disable:next line_length\n+    let assertionFilterType = \"type.googleapis.com/envoymobile.extensions.filters.http.assertion.Assertion\"\n+    let config =\n+    \"\"\"\n+    static_resources:\n+      listeners:\n+      - name: base_api_listener\n+        address:\n+          socket_address:\n+            protocol: TCP\n+            address: 0.0.0.0\n+            port_value: 10000\n+        api_listener:\n+          api_listener:\n+            \"@type\": \\(apiListenerType)\n+            stat_prefix: hcm\n+            route_config:\n+              name: api_router\n+              virtual_hosts:\n+                - name: api\n+                  domains:\n+                    - \"*\"\n+                  routes:\n+                    - match:\n+                        prefix: \"/\"\n+                      direct_response:\n+                        status: 503", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "326f349c71c90f31f64f89fcaf9aa7748545693b"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTg0OTYwOnYy", "diffSide": "RIGHT", "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTo0NjoyMFrOHaDUwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMTo0NjoyMFrOHaDUwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA3OTQ4OA==", "bodyText": "you could also pass enforceOrder: true here if you want", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1069#discussion_r497079488", "createdAt": "2020-09-29T21:46:20Z", "author": {"login": "rebello95"}, "path": "library/swift/test/HttpBridgeTests/ReceiveDataTest.swift", "diffHunk": "@@ -60,19 +59,24 @@ final class ReceiveDataTests: XCTestCase {\n                                                authority: \"example.com\", path: \"/test\")\n       .addUpstreamHttpProtocol(.http2)\n       .build()\n+\n+    let headersExpectation = self.expectation(description: \"Run called with expected headers\")\n+    let dataExpectation = self.expectation(description: \"Run called with expected data\")\n+\n     client\n       .newStreamPrototype()\n       .setOnResponseHeaders { responseHeaders, _ in\n          XCTAssertEqual(200, responseHeaders.httpStatus)\n+         headersExpectation.fulfill()\n       }\n       .setOnResponseData { data, _ in\n         let responseBody = String(data: data, encoding: .utf8)\n         XCTAssertEqual(\"response_body\", responseBody)\n-        expectation.fulfill()\n+        dataExpectation.fulfill()\n       }\n       .start()\n       .sendHeaders(requestHeaders, endStream: true)\n \n-    XCTAssertEqual(XCTWaiter.wait(for: [expectation], timeout: 1), .completed)\n+    XCTAssertEqual(XCTWaiter.wait(for: [headersExpectation, dataExpectation], timeout: 1), .completed)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1c8dfa16c6846763f4450253dc97960c92263f2"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 598, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}