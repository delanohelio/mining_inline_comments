{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5NjYyMzk2", "number": 992, "reviewThreads": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowODo1MVrOET4scQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1ODoxNVrOEXTMMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg3MjgxOnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowODo1MVrOG534PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowODo1MVrOG534PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzUzMw==", "bodyText": "minor typo s/elemenets/elements/", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r463337533", "createdAt": "2020-07-31T00:08:51Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,18 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elemenets, uint64_t count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37370d5e34ef6dd83cc18ad32538897f2ea399e7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5Mjg3NDA5OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowOToyM1rOG5348g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwMDowOToyM1rOG5348g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzNzcxNA==", "bodyText": "let's just make the prefix be \"client\" I think", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r463337714", "createdAt": "2020-07-31T00:09:23Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,18 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elemenets, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elemenets, count]() -> void {\n+      std::string client_stats = \"client_stats\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37370d5e34ef6dd83cc18ad32538897f2ea399e7"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDE3MTk1OnYy", "diffSide": "RIGHT", "path": "examples/java/hello_world/MainActivity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoxMToyM1rOG88mLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNzoxMToyM1rOG88mLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU2MDU1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                engine.getStreamClient().newStreamPrototype()\n          \n          \n            \n                    .setOnResponseHeaders((responseHeaders, endStream) -> {\n          \n          \n            \n                engine.getStreamClient()\n          \n          \n            \n                    .newStreamPrototype()\n          \n          \n            \n                    .setOnResponseHeaders((responseHeaders, endStream) -> {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466560558", "createdAt": "2020-08-06T17:11:23Z", "author": {"login": "buildbreaker"}, "path": "examples/java/hello_world/MainActivity.java", "diffHunk": "@@ -76,7 +76,7 @@ private void makeRequest() {\n     RequestHeaders requestHeaders = new RequestHeadersBuilder(RequestMethod.GET, REQUEST_SCHEME,\n                                                               REQUEST_AUTHORITY, REQUEST_PATH)\n                                         .build();\n-    streamClient.newStreamPrototype()\n+    engine.getStreamClient().newStreamPrototype()\n         .setOnResponseHeaders((responseHeaders, endStream) -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356390c9fe2f34b336cc2aaeb0f66d3b334fed4d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc4MTU2OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/BUILD", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowNzoxNVrOG9Cf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo0NDowNlrOG9kOKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzI0Nw==", "bodyText": "I think it'd make sense to group these into a stats subdirectory, similarly to grpc and filters", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466657247", "createdAt": "2020-08-06T20:07:15Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/BUILD", "diffHunk": "@@ -36,7 +36,11 @@ kt_android_library(\n envoy_mobile_kt_library(\n     name = \"envoy_interfaces_lib\",\n     srcs = glob([\n-        \"EnvoyClient.kt\",\n+        \"Counter.kt\",\n+        \"Element.kt\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwOTc3MA==", "bodyText": "Sounds good to me.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r467209770", "createdAt": "2020-08-07T18:44:06Z", "author": {"login": "goaway"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/BUILD", "diffHunk": "@@ -36,7 +36,11 @@ kt_android_library(\n envoy_mobile_kt_library(\n     name = \"envoy_interfaces_lib\",\n     srcs = glob([\n-        \"EnvoyClient.kt\",\n+        \"Counter.kt\",\n+        \"Element.kt\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1NzI0Nw=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc4NjAyOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/Counter.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowODo1MVrOG9CivQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo0NDoxOFrOG9kOkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1Nzk4MQ==", "bodyText": "Should we provide a default value of 1?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466657981", "createdAt": "2020-08-06T20:08:51Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Counter.kt", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * A stat.\n+ *\n+ * Current the supported stat type is counter, and it can increment.\n+ */\n+class Counter internal constructor(\n+  private val envoyEngine: WeakReference<EnvoyEngine>,\n+  private val elements: List<Element>\n+) {\n+\n+  /**\n+   * Increment the counter by the given count.\n+   */\n+  fun increment(count: Int) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MjE1NQ==", "bodyText": "usually we overload with increment() being increment(1). In favor of that.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466672155", "createdAt": "2020-08-06T20:37:26Z", "author": {"login": "junr03"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Counter.kt", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * A stat.\n+ *\n+ * Current the supported stat type is counter, and it can increment.\n+ */\n+class Counter internal constructor(\n+  private val envoyEngine: WeakReference<EnvoyEngine>,\n+  private val elements: List<Element>\n+) {\n+\n+  /**\n+   * Increment the counter by the given count.\n+   */\n+  fun increment(count: Int) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1Nzk4MQ=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIwOTg3Mg==", "bodyText": "Sounds good.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r467209872", "createdAt": "2020-08-07T18:44:18Z", "author": {"login": "goaway"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Counter.kt", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * A stat.\n+ *\n+ * Current the supported stat type is counter, and it can increment.\n+ */\n+class Counter internal constructor(\n+  private val envoyEngine: WeakReference<EnvoyEngine>,\n+  private val elements: List<Element>\n+) {\n+\n+  /**\n+   * Increment the counter by the given count.\n+   */\n+  fun increment(count: Int) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1Nzk4MQ=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc4NzI5OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/Counter.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowOToyMFrOG9CjhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDowOToyMFrOG9CjhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODE4MA==", "bodyText": "I assume we will create different types for non-Counter stats, so maybe this docstring can be updated to simply describe the Counter?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466658180", "createdAt": "2020-08-06T20:09:20Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Counter.kt", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * A stat.\n+ *\n+ * Current the supported stat type is counter, and it can increment.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc4OTY3OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/Element.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMDowMVrOG9Ck7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMDowMVrOG9Ck7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODU0MA==", "bodyText": "Can you document what the intended value is supposed to be (given the regex below)?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466658540", "createdAt": "2020-08-06T20:10:01Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Element.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.util.regex.Pattern\n+\n+/**\n+ * Element for stats.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc5MDg3OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/Engine.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMDoyNFrOG9Cltw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo0NTowM1rOG9kP2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODc0Mw==", "bodyText": "would it make sense to simply name these streamClient() and statsClient()?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466658743", "createdAt": "2020-08-06T20:10:24Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Engine.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.envoyproxy.envoymobile\n+\n+/**\n+ * The engine for downstream clients to integrate Envoy Mobile\n+ */\n+interface Engine {\n+\n+  /**\n+   *  @return a {@link StreamClient} instance\n+   */\n+  fun getStreamClient(): StreamClient\n+\n+  /**\n+   *  @return a {@link StatsClient} instance\n+   */\n+  fun getStatsClient(): StatsClient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MDA3Nw==", "bodyText": "@goaway ^", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466680077", "createdAt": "2020-08-06T20:53:19Z", "author": {"login": "jingwei99"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Engine.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.envoyproxy.envoymobile\n+\n+/**\n+ * The engine for downstream clients to integrate Envoy Mobile\n+ */\n+interface Engine {\n+\n+  /**\n+   *  @return a {@link StreamClient} instance\n+   */\n+  fun getStreamClient(): StreamClient\n+\n+  /**\n+   *  @return a {@link StatsClient} instance\n+   */\n+  fun getStatsClient(): StatsClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODc0Mw=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMDIwMw==", "bodyText": "I'm fine with that.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r467210203", "createdAt": "2020-08-07T18:45:03Z", "author": {"login": "goaway"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Engine.kt", "diffHunk": "@@ -0,0 +1,17 @@\n+package io.envoyproxy.envoymobile\n+\n+/**\n+ * The engine for downstream clients to integrate Envoy Mobile\n+ */\n+interface Engine {\n+\n+  /**\n+   *  @return a {@link StreamClient} instance\n+   */\n+  fun getStreamClient(): StreamClient\n+\n+  /**\n+   *  @return a {@link StatsClient} instance\n+   */\n+  fun getStatsClient(): StatsClient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1ODc0Mw=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc5MzY4OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClient.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMToyMFrOG9CnZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo0NTo1M1rOG9kRRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTE3NQ==", "bodyText": "Similar suggestion here (counter() versus getCounter()?)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466659175", "createdAt": "2020-08-06T20:11:20Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClient.kt", "diffHunk": "@@ -0,0 +1,12 @@\n+package io.envoyproxy.envoymobile\n+\n+/**\n+ * Client used to record timeseries metrics.\n+ */\n+interface StatsClient {\n+\n+  /**\n+   * @return A counter based on the joined elements.\n+   */\n+  fun getCounter(vararg elements: Element): Counter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMDU2NA==", "bodyText": "Sure, sounds good.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r467210564", "createdAt": "2020-08-07T18:45:53Z", "author": {"login": "goaway"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClient.kt", "diffHunk": "@@ -0,0 +1,12 @@\n+package io.envoyproxy.envoymobile\n+\n+/**\n+ * Client used to record timeseries metrics.\n+ */\n+interface StatsClient {\n+\n+  /**\n+   * @return A counter based on the joined elements.\n+   */\n+  fun getCounter(vararg elements: Element): Counter", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTE3NQ=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc5Njc3OnYy", "diffSide": "RIGHT", "path": "library/swift/src/BUILD", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMjoyOFrOG9CpZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMjoyOFrOG9CpZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTY4NA==", "bodyText": "Same comments apply to iOS re: grouping and naming", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466659684", "createdAt": "2020-08-06T20:12:28Z", "author": {"login": "rebello95"}, "path": "library/swift/src/BUILD", "diffHunk": "@@ -5,7 +5,11 @@ licenses([\"notice\"])  # Apache 2\n swift_static_framework(\n     name = \"ios_framework\",\n     srcs = glob([\n-        \"EnvoyClient.swift\",\n+        \"Counter.swift\",\n+        \"Element.swift\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc5NzU4OnYy", "diffSide": "RIGHT", "path": "library/swift/src/Counter.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMjo0NFrOG9Cp6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMjo0NFrOG9Cp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY1OTgxNw==", "bodyText": "Same docstrings as Android?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466659817", "createdAt": "2020-08-06T20:12:44Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc5ODkwOnYy", "diffSide": "RIGHT", "path": "library/swift/src/Counter.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMzoxMFrOG9Cqxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMzoxMFrOG9Cqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDAzOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              internal init(elements: [Element], engine: EnvoyEngine) {\n          \n          \n            \n              init(elements: [Element], engine: EnvoyEngine) {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466660038", "createdAt": "2020-08-06T20:13:10Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  internal init(elements: [Element], engine: EnvoyEngine) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDc5OTg3OnYy", "diffSide": "RIGHT", "path": "library/swift/src/Counter.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMzozMFrOG9CraQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxMzozMFrOG9CraQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDIwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                self.series = elements.map{ $0.description }.joined(separator: \".\")\n          \n          \n            \n                self.series = elements.map { $0.description }.joined(separator: \".\")", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466660201", "createdAt": "2020-08-06T20:13:30Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  internal init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map{ $0.description }.joined(separator: \".\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgwMjUyOnYy", "diffSide": "RIGHT", "path": "library/swift/src/Element.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNDoyMVrOG9CtEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo0ODowN1rOG9kVAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDYyNg==", "bodyText": "Why not make value internal? I think using description is fragile since it could break if someone deleted the explicit description override (yet would still compile)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466660626", "createdAt": "2020-08-06T20:14:21Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Element.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+import Foundation\n+\n+private let kPattern = \"^[A-Za-z_]+$\"\n+\n+/// Element represents one dot-delimited component of a timeseries name.\n+@objc\n+public final class Element: NSObject, ExpressibleByStringLiteral {\n+  private let value: String\n+\n+  public init(stringLiteral value: String) {\n+    guard value.range(of: kPattern, options: .regularExpression) != nil else {\n+      preconditionFailure(\"Element values must conform to the regex /^[A-Za-z_]+$/.\")\n+    }\n+    self.value = value\n+  }\n+\n+  // CustomStringConvertible\n+  public override var description: String { return value }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMTUyMg==", "bodyText": "Okay, sure.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r467211522", "createdAt": "2020-08-07T18:48:07Z", "author": {"login": "goaway"}, "path": "library/swift/src/Element.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+import Foundation\n+\n+private let kPattern = \"^[A-Za-z_]+$\"\n+\n+/// Element represents one dot-delimited component of a timeseries name.\n+@objc\n+public final class Element: NSObject, ExpressibleByStringLiteral {\n+  private let value: String\n+\n+  public init(stringLiteral value: String) {\n+    guard value.range(of: kPattern, options: .regularExpression) != nil else {\n+      preconditionFailure(\"Element values must conform to the regex /^[A-Za-z_]+$/.\")\n+    }\n+    self.value = value\n+  }\n+\n+  // CustomStringConvertible\n+  public override var description: String { return value }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDYyNg=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgwMzU4OnYy", "diffSide": "RIGHT", "path": "library/swift/src/Counter.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNDo0M1rOG9Ctzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNDo0M1rOG9Ctzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MDgxNA==", "bodyText": "This needs to be public and is missing docstrings", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466660814", "createdAt": "2020-08-06T20:14:43Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  internal init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map{ $0.description }.joined(separator: \".\")\n+    self.engine = engine\n+    super.init()\n+  }\n+\n+  func increment(count: Int) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgwNjcyOnYy", "diffSide": "RIGHT", "path": "library/swift/src/Counter.swift", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNTo0OVrOG9CvyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDozOToxNVrOG-e-sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTMyMQ==", "bodyText": "Why are we exposing an Int publicly but requiring an unsigned integer internally? Shouldn't these be the same (in which case we could avoid a cast)?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466661321", "createdAt": "2020-08-06T20:15:49Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  internal init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map{ $0.description }.joined(separator: \".\")\n+    self.engine = engine\n+    super.init()\n+  }\n+\n+  func increment(count: Int) {\n+    guard let engine = self.engine else {\n+      return\n+    }\n+\n+    engine.recordCounter(self.series, count: numericCast(count))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MjQ2Nw==", "bodyText": "My impression is that Swift convention strongly favors treating base numeric types as signed wherever possible. (And in Java/Kotlin, there's basically no alternative.) On the other hand, Envoy is explicit about counters accepting unsigned values only. numericCast imposes strong runtime checks on invalid (in this case, negative) ranges. And this keeps the two platform interfaces aligned.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468172467", "createdAt": "2020-08-10T20:39:15Z", "author": {"login": "goaway"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  internal init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map{ $0.description }.joined(separator: \".\")\n+    self.engine = engine\n+    super.init()\n+  }\n+\n+  func increment(count: Int) {\n+    guard let engine = self.engine else {\n+      return\n+    }\n+\n+    engine.recordCounter(self.series, count: numericCast(count))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTMyMQ=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgwNzgxOnYy", "diffSide": "RIGHT", "path": "library/swift/src/Counter.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNjowN1rOG9Cwaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNjowN1rOG9Cwaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTQ4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @objc\n          \n          \n            \n            @objcMembers", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466661483", "createdAt": "2020-08-06T20:16:07Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Counter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+@objc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgwOTA0OnYy", "diffSide": "RIGHT", "path": "library/swift/src/Element.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNjoyOVrOG9CxLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNjoyOVrOG9CxLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MTY3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            @objc\n          \n          \n            \n            @objcMembers", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466661679", "createdAt": "2020-08-06T20:16:29Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Element.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+import Foundation\n+\n+private let kPattern = \"^[A-Za-z_]+$\"\n+\n+/// Element represents one dot-delimited component of a timeseries name.\n+@objc", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgxMTAxOnYy", "diffSide": "RIGHT", "path": "library/swift/src/Element.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNzowNVrOG9CydA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxNzowNVrOG9CydA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MjAwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  preconditionFailure(\"Element values must conform to the regex /^[A-Za-z_]+$/.\")\n          \n          \n            \n                  preconditionFailure(\"Element values must conform to the regex '\\(kPattern)'\")", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466662004", "createdAt": "2020-08-06T20:17:05Z", "author": {"login": "rebello95"}, "path": "library/swift/src/Element.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+import Foundation\n+\n+private let kPattern = \"^[A-Za-z_]+$\"\n+\n+/// Element represents one dot-delimited component of a timeseries name.\n+@objc\n+public final class Element: NSObject, ExpressibleByStringLiteral {\n+  private let value: String\n+\n+  public init(stringLiteral value: String) {\n+    guard value.range(of: kPattern, options: .regularExpression) != nil else {\n+      preconditionFailure(\"Element values must conform to the regex /^[A-Za-z_]+$/.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgxNzIxOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/Element.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxOTowM1rOG9C2Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDo1MDo1N1rOG-fVhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2Mjk3OQ==", "bodyText": "I'd use a constant here so you don't have to replicate the regex twice (and so they don't deviate over time)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466662979", "createdAt": "2020-08-06T20:19:03Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Element.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.util.regex.Pattern\n+\n+/**\n+ * Element for stats.\n+ */\n+class Element(val element: String) {\n+  init {\n+    if (!Pattern.compile(\"^[A-Za-z_]+\\$\").matcher(element).matches()) {\n+      throw IllegalArgumentException(\n+        \"Element values must conform to the regex /^[A-Za-z_]+$/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3ODMxMA==", "bodyText": "clever", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468178310", "createdAt": "2020-08-10T20:50:57Z", "author": {"login": "goaway"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/Element.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.util.regex.Pattern\n+\n+/**\n+ * Element for stats.\n+ */\n+class Element(val element: String) {\n+  init {\n+    if (!Pattern.compile(\"^[A-Za-z_]+\\$\").matcher(element).matches()) {\n+      throw IllegalArgumentException(\n+        \"Element values must conform to the regex /^[A-Za-z_]+$/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2Mjk3OQ=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgxOTQyOnYy", "diffSide": "RIGHT", "path": "library/swift/src/StatsClient.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxOTo0N1rOG9C3kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoxOTo0N1rOG9C3kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MzMxNA==", "bodyText": "missing - parameter elements", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466663314", "createdAt": "2020-08-06T20:19:47Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StatsClient.swift", "diffHunk": "@@ -0,0 +1,8 @@\n+import Foundation\n+\n+/// Client used to record timeseries metrics.\n+@objc\n+public protocol StatsClient: AnyObject {\n+  /// - returns: A Counter based on the joined elements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgyMDg2OnYy", "diffSide": "RIGHT", "path": "library/swift/src/StatsClientImpl.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoyMDoxMlrOG9C4ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoyMDoxMlrOG9C4ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2MzUyNQ==", "bodyText": "This shouldn't be necessary since internal types don't need to be exposed to public objc consumers", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466663525", "createdAt": "2020-08-06T20:20:12Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StatsClientImpl.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// Envoy implementation of StatsClient.\n+@objcMembers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgyMzgwOnYy", "diffSide": "RIGHT", "path": "library/swift/src/mocks/MockEnvoyEngine.swift", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoyMTowNFrOG9C6QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxODo1MDo0MFrOG9kZfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NDAwMA==", "bodyText": "Can we add some tests?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466664000", "createdAt": "2020-08-06T20:21:04Z", "author": {"login": "rebello95"}, "path": "library/swift/src/mocks/MockEnvoyEngine.swift", "diffHunk": "@@ -7,6 +7,8 @@ final class MockEnvoyEngine: NSObject {\n   static var onRunWithConfig: ((_ config: EnvoyConfiguration, _ logLevel: String?) -> Void)?\n   /// Closure called when `run(withConfigYAML:)` is called.\n   static var onRunWithYAML: ((_ configYAML: String, _ logLevel: String?) -> Void)?\n+  /// Closure called when `recordCounter(_:count:)` is called.\n+  static var onRecordCounter: ((_ elements: String, _ count: UInt) -> Void)?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzIxMjY2OQ==", "bodyText": "Sure.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r467212669", "createdAt": "2020-08-07T18:50:40Z", "author": {"login": "goaway"}, "path": "library/swift/src/mocks/MockEnvoyEngine.swift", "diffHunk": "@@ -7,6 +7,8 @@ final class MockEnvoyEngine: NSObject {\n   static var onRunWithConfig: ((_ config: EnvoyConfiguration, _ logLevel: String?) -> Void)?\n   /// Closure called when `run(withConfigYAML:)` is called.\n   static var onRunWithYAML: ((_ configYAML: String, _ logLevel: String?) -> Void)?\n+  /// Closure called when `recordCounter(_:count:)` is called.\n+  static var onRecordCounter: ((_ elements: String, _ count: UInt) -> Void)?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NDAwMA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgyOTAyOnYy", "diffSide": "RIGHT", "path": "library/swift/src/StreamClientImpl.swift", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoyMjozOVrOG9C9ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoyMjozOVrOG9C9ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NDgxMA==", "bodyText": "Same here regarding objc", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466664810", "createdAt": "2020-08-06T20:22:39Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StreamClientImpl.swift", "diffHunk": "@@ -0,0 +1,19 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// Envoy implementation of StreamClient.\n+@objcMembers", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDgzMDQyOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDoyMzowNlrOG9C-Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1MDoxMVrOG-iYyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTAxOA==", "bodyText": "iOS has a strong ref below, we should keep them consistent (I think a strong ref is what you want here)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466665018", "createdAt": "2020-08-06T20:23:06Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * Envoy implementation of `StatsClient`.\n+ */\n+internal class StatsClientImpl constructor(\n+  internal val engine: EnvoyEngine\n+) : StatsClient {\n+\n+  override fun getCounter(vararg elements: Element): Counter {\n+    return Counter(WeakReference(engine), elements.asList())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MjA0OQ==", "bodyText": "I believe the weak reference is intended. We would not want to have stats spread through the application to necessarily hold the engine alive, right?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466682049", "createdAt": "2020-08-06T20:57:17Z", "author": {"login": "junr03"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * Envoy implementation of `StatsClient`.\n+ */\n+internal class StatsClientImpl constructor(\n+  internal val engine: EnvoyEngine\n+) : StatsClient {\n+\n+  override fun getCounter(vararg elements: Element): Counter {\n+    return Counter(WeakReference(engine), elements.asList())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTAxOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MzY3NA==", "bodyText": "Ah I see, this is passing a weak reference to the Counter, whereas on iOS the Counter itself makes the reference weak. Would it make sense to move WeakReference(engine) into the counter file's constructor to make it clear that it doesn't retain the engine?\nSeparately, I'm wondering if it makes sense to allow counters to retain the engine. Do we want the engine to stick around as long as a consumer is holding on to a counter ref?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466683674", "createdAt": "2020-08-06T21:00:41Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * Envoy implementation of `StatsClient`.\n+ */\n+internal class StatsClientImpl constructor(\n+  internal val engine: EnvoyEngine\n+) : StatsClient {\n+\n+  override fun getCounter(vararg elements: Element): Counter {\n+    return Counter(WeakReference(engine), elements.asList())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTAxOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4NDI5OQ==", "bodyText": "Would it make sense to move WeakReference(engine) into the counter file's constructor to make it clear that it doesn't retain the engine?\n\nyea\n\nDo we want the engine to stick around as long as a consumer is holding on to a counter ref?\n\nprobably not, counters could be referenced by feature modules of the platform(iOS/android) code, and we probably don't want the feature modules to (indirectly) hold a strong ref to engine", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466684299", "createdAt": "2020-08-06T21:01:59Z", "author": {"login": "jingwei99"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * Envoy implementation of `StatsClient`.\n+ */\n+internal class StatsClientImpl constructor(\n+  internal val engine: EnvoyEngine\n+) : StatsClient {\n+\n+  override fun getCounter(vararg elements: Element): Counter {\n+    return Counter(WeakReference(engine), elements.asList())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTAxOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4MTg2NQ==", "bodyText": "My intuition right now is that it seems natural for engine clients to strongly retain the engine, but perhaps less so for the artifacts they produce. This has more to do with users of the library being able to implicitly manage the lifecycle of the engine than anything else. I should say that I'm not strongly convinced this is right, but it seems reasonable for now for experimentation.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468181865", "createdAt": "2020-08-10T20:57:56Z", "author": {"login": "goaway"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * Envoy implementation of `StatsClient`.\n+ */\n+internal class StatsClientImpl constructor(\n+  internal val engine: EnvoyEngine\n+) : StatsClient {\n+\n+  override fun getCounter(vararg elements: Element): Counter {\n+    return Counter(WeakReference(engine), elements.asList())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTAxOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODI5Nw==", "bodyText": "Was there a resolution here? Looks like the weak ref is still being passed from this line", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468228297", "createdAt": "2020-08-10T22:50:11Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/StatsClientImpl.kt", "diffHunk": "@@ -0,0 +1,16 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import java.lang.ref.WeakReference\n+\n+/**\n+ * Envoy implementation of `StatsClient`.\n+ */\n+internal class StatsClientImpl constructor(\n+  internal val engine: EnvoyEngine\n+) : StatsClient {\n+\n+  override fun getCounter(vararg elements: Element): Counter {\n+    return Counter(WeakReference(engine), elements.asList())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY2NTAxOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDg4NTU5OnYy", "diffSide": "RIGHT", "path": "library/common/config_template.cc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0MDozMFrOG9DgCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxMToyMFrOG-f8HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MzY3Mg==", "bodyText": "I'd prefer having a more restrictive rule so that people have to think before their application level stats get emitted.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466673672", "createdAt": "2020-08-06T20:40:30Z", "author": {"login": "junr03"}, "path": "library/common/config_template.cc", "diffHunk": "@@ -204,6 +204,9 @@ stats_flush_interval: {{ stats_flush_interval_seconds }}s\n         - safe_regex:\n             google_re2: {}\n             regex: '^http.dispatcher.*'\n+        - safe_regex:\n+            google_re2: {}\n+            regex: '^client.*'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4ODg4OA==", "bodyText": "what rules do you have in mind?\nright now all the elements used for the stats are checked against the regex: ^[A-Za-z_]+\\$", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466688888", "createdAt": "2020-08-06T21:11:51Z", "author": {"login": "jingwei99"}, "path": "library/common/config_template.cc", "diffHunk": "@@ -204,6 +204,9 @@ stats_flush_interval: {{ stats_flush_interval_seconds }}s\n         - safe_regex:\n             google_re2: {}\n             regex: '^http.dispatcher.*'\n+        - safe_regex:\n+            google_re2: {}\n+            regex: '^client.*'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MzY3Mg=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4ODE4OQ==", "bodyText": "Talked with @junr03, long-term it might make sense to make people specify this in configuration, so that some thought goes into the stats they emit. For now, as a new, experimental interface, this is probably good enough to move forward.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468188189", "createdAt": "2020-08-10T21:11:20Z", "author": {"login": "goaway"}, "path": "library/common/config_template.cc", "diffHunk": "@@ -204,6 +204,9 @@ stats_flush_interval: {{ stats_flush_interval_seconds }}s\n         - safe_regex:\n             google_re2: {}\n             regex: '^http.dispatcher.*'\n+        - safe_regex:\n+            google_re2: {}\n+            regex: '^client.*'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3MzY3Mg=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDg5MDQ3OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0MTo1OFrOG9Di1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0MTo1OFrOG9Di1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NDM4OA==", "bodyText": "this should be a constant, or CONTRUCT_ON_FIRST_USE", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466674388", "createdAt": "2020-08-06T20:41:58Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDg5MjY5OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0Mjo0M1rOG9DkOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwMDo0Njo0NFrOG9sJBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NDc0Nw==", "bodyText": "I believe you don't need to explicitly create a string view for passing into a function that expects one", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466674747", "createdAt": "2020-08-06T20:42:43Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4OTEyOA==", "bodyText": "will try it out", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466689128", "createdAt": "2020-08-06T21:12:19Z", "author": {"login": "jingwei99"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NDc0Nw=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzOTUyNA==", "bodyText": "update: tried it out, didn't compile", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r467339524", "createdAt": "2020-08-08T00:46:44Z", "author": {"login": "jingwei99"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NDc0Nw=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDg5NTA2OnYy", "diffSide": "RIGHT", "path": "library/common/engine.h", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo0MzozMVrOG9DluA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMzo1MTozM1rOG9rnhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NTEyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              void recordCounter(std::string elements, uint64_t count);\n          \n          \n            \n              void incCounter(std::string elements, uint64_t count);", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466675128", "createdAt": "2020-08-06T20:43:31Z", "author": {"login": "junr03"}, "path": "library/common/engine.h", "diffHunk": "@@ -35,6 +35,11 @@ class Engine {\n    */\n   Http::Dispatcher& httpDispatcher();\n \n+  /**\n+   * Increment a counter with a given string of elements and by the given count.\n+   */\n+  void recordCounter(std::string elements, uint64_t count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NTkwNw==", "bodyText": "same everywhere else. If we are incrementing a counter we should say that in the function's name.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466675907", "createdAt": "2020-08-06T20:44:58Z", "author": {"login": "junr03"}, "path": "library/common/engine.h", "diffHunk": "@@ -35,6 +35,11 @@ class Engine {\n    */\n   Http::Dispatcher& httpDispatcher();\n \n+  /**\n+   * Increment a counter with a given string of elements and by the given count.\n+   */\n+  void recordCounter(std::string elements, uint64_t count);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NTEyOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzMzMDk0OQ==", "bodyText": "discussed offline and decided we'll go with record for now", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r467330949", "createdAt": "2020-08-07T23:51:33Z", "author": {"login": "goaway"}, "path": "library/common/engine.h", "diffHunk": "@@ -35,6 +35,11 @@ class Engine {\n    */\n   Http::Dispatcher& httpDispatcher();\n \n+  /**\n+   * Increment a counter with a given string of elements and by the given count.\n+   */\n+  void recordCounter(std::string elements, uint64_t count);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3NTEyOA=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDkyMTE0OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMDo1MTozMVrOG9D1pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMToxODoxNFrOG-gJDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTIwNw==", "bodyText": "big comment: This is an expensive way to create stats and reserved for dynamic stats created in the hot path in Envoy. I see how we still want to expose this for some application level stats that might be dynamic, but I think we should also think about static stats known at compile time (like crash_count, etc) -- which I think will compose a good chunk of what we want -- that could be statically initialized based on config.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466679207", "createdAt": "2020-08-06T20:51:31Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};\n+      absl::string_view dynamic_elements{elements};\n+      Stats::Utility::counterFromElements(server_->serverFactoryContext().scope(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MjY3MQ==", "bodyText": "https://github.com/envoyproxy/envoy/blob/master/source/docs/stats.md#dynamic-stat-tokens", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466682671", "createdAt": "2020-08-06T20:58:38Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};\n+      absl::string_view dynamic_elements{elements};\n+      Stats::Utility::counterFromElements(server_->serverFactoryContext().scope(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTIwNw=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE0Nzg2MQ==", "bodyText": "Based on my reading of the linked doc, the main cost associated with dynamic tokens is that they take up more space and take time to encode - but they don't actually contend locks. It also appears new static tokens can be created via XDS updates, implying this could be an option for us as well as a potential optimization.\nAt present, all our work is on the main thread anyhow, and with dispatched stat updates, they're going to execute exclusively between I/O events regardless. I'd be fine with prominently documenting that this interface is experimental and may have unknown performance implications, but I feel we shouldn't block on that any more than we have other potential performance sinks in our hot path (extra copies, etc.).\nWhat do you think?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468147861", "createdAt": "2020-08-10T19:59:16Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};\n+      absl::string_view dynamic_elements{elements};\n+      Stats::Utility::counterFromElements(server_->serverFactoryContext().scope(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTIwNw=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE5MTUwMQ==", "bodyText": "Chatted with @junr03, we're going to flag the StatsClient interface as experimental, and move forward, while continuing to investigate potential performance ramifications.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468191501", "createdAt": "2020-08-10T21:18:14Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      std::string client = \"client\";\n+      absl::string_view prefix{client};\n+      absl::string_view dynamic_elements{elements};\n+      Stats::Utility::counterFromElements(server_->serverFactoryContext().scope(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY3OTIwNw=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNDk1MDczOnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQyMTowMToxM1rOG9EIIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDowNTowOFrOG-xFVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MzkzOQ==", "bodyText": "Can we cover this in tests?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r466683939", "createdAt": "2020-08-06T21:01:13Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE4ODkwNg==", "bodyText": "Adding a ticket to cover testing generally at this layer, will link here.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468188906", "createdAt": "2020-08-10T21:12:53Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MzkzOQ=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwNTAyOQ==", "bodyText": "@goaway don't forget to add this ticket", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468205029", "createdAt": "2020-08-10T21:48:34Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MzkzOQ=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ2OTA3OA==", "bodyText": "Created (but it's internal).", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468469078", "createdAt": "2020-08-11T10:05:08Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjY4MzkzOQ=="}, "originalCommit": {"oid": "352fd28fee9f674023da716efcbe0dcea8fdc58c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTMwMzY2OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1OTowN1rOG-hQEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMTo1OTowN1rOG-hQEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIwOTY4Mw==", "bodyText": "No non-pod statics (static init fiasco). Moreover what you really want here since this string is known at compile-time is to save a StatName for \"client\" using either a StatNamePool or StatNameManagedStorage. You want to do that in a context object that is created once at process startup and then re-used. Then you have no thread contention issues.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468209683", "createdAt": "2020-08-10T21:59:07Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,6 +93,19 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n+void Engine::recordCounter(std::string elements, uint64_t count) {\n+  if (server_) {\n+    server_->dispatcher().post([this, elements, count]() -> void {\n+      static const std::string client = \"client\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQyMjkyOnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/BUILD", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo0ODo0MlrOG-iW1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDo0NjoxMVrOG-khAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNzc5OA==", "bodyText": "Shouldn't these be in stats/ which is captured below with globbing?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468227798", "createdAt": "2020-08-10T22:48:42Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/BUILD", "diffHunk": "@@ -52,15 +54,18 @@ envoy_mobile_kt_library(\n         \"ResponseTrailersBuilder.kt\",\n         \"RetryPolicy.kt\",\n         \"RetryPolicyMapper.kt\",\n+        \"StatsClient.kt\",\n+        \"StatsClientImpl.kt\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzE3MA==", "bodyText": "I think these ideally live here, basically in the same level as StreamClient, as the interface Engine.kt exposes a StatsClient and a StreamClient.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468263170", "createdAt": "2020-08-11T00:46:11Z", "author": {"login": "jingwei99"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/BUILD", "diffHunk": "@@ -52,15 +54,18 @@ envoy_mobile_kt_library(\n         \"ResponseTrailersBuilder.kt\",\n         \"RetryPolicy.kt\",\n         \"RetryPolicyMapper.kt\",\n+        \"StatsClient.kt\",\n+        \"StatsClientImpl.kt\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyNzc5OA=="}, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQyODY3OnYy", "diffSide": "RIGHT", "path": "library/kotlin/src/io/envoyproxy/envoymobile/stats/Element.kt", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1MToyNlrOG-iaUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDo0ODoyMVrOG-kjIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODY4OA==", "bodyText": "Regex is hardcoded 3 places here. Can we use a constant instead so we don't accidentally fail to change one of the usages in the future?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468228688", "createdAt": "2020-08-10T22:51:26Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/stats/Element.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.util.regex.Pattern\n+\n+/**\n+ * Element represents one dot-delimited component of a time series name.\n+ *\n+ * Element values must conform to the regex /^[A-Za-z_]+$/.\n+ */\n+class Element(val element: String) {\n+  init {\n+    if (!Pattern.compile(\"^[A-Za-z_]+\\$\").matcher(element).matches()) {\n+      throw IllegalArgumentException(\n+        \"Element values must conform to the regex /^[A-Za-z_]+$/\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2MzcxNQ==", "bodyText": "fair", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468263715", "createdAt": "2020-08-11T00:48:21Z", "author": {"login": "jingwei99"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/stats/Element.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.util.regex.Pattern\n+\n+/**\n+ * Element represents one dot-delimited component of a time series name.\n+ *\n+ * Element values must conform to the regex /^[A-Za-z_]+$/.\n+ */\n+class Element(val element: String) {\n+  init {\n+    if (!Pattern.compile(\"^[A-Za-z_]+\\$\").matcher(element).matches()) {\n+      throw IllegalArgumentException(\n+        \"Element values must conform to the regex /^[A-Za-z_]+$/\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODY4OA=="}, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQyOTU5OnYy", "diffSide": "RIGHT", "path": "library/swift/src/BUILD", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1MTo0OFrOG-ia0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDo0OTozOFrOG-kkfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODgxNg==", "bodyText": "Same here regarding living in stats/", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468228816", "createdAt": "2020-08-10T22:51:48Z", "author": {"login": "rebello95"}, "path": "library/swift/src/BUILD", "diffHunk": "@@ -21,15 +23,18 @@ swift_static_framework(\n         \"ResponseTrailersBuilder.swift\",\n         \"RetryPolicy.swift\",\n         \"RetryPolicyMapper.swift\",\n+        \"StatsClient.swift\",\n+        \"StatsClientImpl.swift\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI2NDA2Mw==", "bodyText": "same as above, StatsClient and its implementation ideally live at the same level as StreamClient given the Engine.swift interface.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468264063", "createdAt": "2020-08-11T00:49:38Z", "author": {"login": "jingwei99"}, "path": "library/swift/src/BUILD", "diffHunk": "@@ -21,15 +23,18 @@ swift_static_framework(\n         \"ResponseTrailersBuilder.swift\",\n         \"RetryPolicy.swift\",\n         \"RetryPolicyMapper.swift\",\n+        \"StatsClient.swift\",\n+        \"StatsClientImpl.swift\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODgxNg=="}, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzMDY0OnYy", "diffSide": "RIGHT", "path": "library/swift/src/StatsClient.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1MjoyMFrOG-ibbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1MjoyMFrOG-ibbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyODk3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// - parameter elements: Elements to identify a counter\n          \n          \n            \n              /// - returns: A Counter based on the joined elements.\n          \n          \n            \n              /// - parameter elements: Elements to identify a counter\n          \n          \n            \n              ///\n          \n          \n            \n              /// - returns: A Counter based on the joined elements.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468228975", "createdAt": "2020-08-10T22:52:20Z", "author": {"login": "rebello95"}, "path": "library/swift/src/StatsClient.swift", "diffHunk": "@@ -0,0 +1,12 @@\n+import Foundation\n+\n+/// Client used to record time series metrics.\n+///\n+/// Note: this an experimental interface and is subject to change. The implementation has not been\n+/// optimized, and there may be performance implications in production usage.\n+@objc\n+public protocol StatsClient: AnyObject {\n+  /// - parameter elements: Elements to identify a counter\n+  /// - returns: A Counter based on the joined elements.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzMjcyOnYy", "diffSide": "RIGHT", "path": "library/swift/src/stats/Counter.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1MzoyOFrOG-icqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1MzoyOFrOG-icqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTI4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class Counter: NSObject {\n          \n          \n            \n            public final class Counter: NSObject {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468229289", "createdAt": "2020-08-10T22:53:28Z", "author": {"login": "rebello95"}, "path": "library/swift/src/stats/Counter.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// A time series counter.\n+@objcMembers\n+public class Counter: NSObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDIyOnYy", "diffSide": "RIGHT", "path": "library/swift/src/stats/Counter.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoxMVrOG-idjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoxMVrOG-idjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTUxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// Increment the counter by the given count.\n          \n          \n            \n              /// Increment the counter by the given count.\n          \n          \n            \n              ///\n          \n          \n            \n              /// - parameter count: The amount by which to increment the counter.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468229516", "createdAt": "2020-08-10T22:54:11Z", "author": {"login": "rebello95"}, "path": "library/swift/src/stats/Counter.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// A time series counter.\n+@objcMembers\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map { $0.value }.joined(separator: \".\")\n+    self.engine = engine\n+    super.init()\n+  }\n+\n+  /// Increment the counter by the given count.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNDcwOnYy", "diffSide": "RIGHT", "path": "library/swift/src/stats/Counter.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyNVrOG-idzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDoyNVrOG-idzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTU4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                guard let engine = self.engine else {\n          \n          \n            \n                  return\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                engine.recordCounter(self.series, count: numericCast(count))\n          \n          \n            \n                self.engine?.recordCounter(self.series, count: numericCast(count))", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468229582", "createdAt": "2020-08-10T22:54:25Z", "author": {"login": "rebello95"}, "path": "library/swift/src/stats/Counter.swift", "diffHunk": "@@ -0,0 +1,24 @@\n+@_implementationOnly import EnvoyEngine\n+import Foundation\n+\n+/// A time series counter.\n+@objcMembers\n+public class Counter: NSObject {\n+  private let series: String\n+  private weak var engine: EnvoyEngine?\n+\n+  init(elements: [Element], engine: EnvoyEngine) {\n+    self.series = elements.map { $0.value }.joined(separator: \".\")\n+    self.engine = engine\n+    super.init()\n+  }\n+\n+  /// Increment the counter by the given count.\n+  public func increment(count: Int = 1) {\n+    guard let engine = self.engine else {\n+      return\n+    }\n+\n+    engine.recordCounter(self.series, count: numericCast(count))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNTg3OnYy", "diffSide": "RIGHT", "path": "library/swift/src/stats/Element.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDo0N1rOG-iecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NDo0N1rOG-iecA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIyOTc0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              internal let value: String\n          \n          \n            \n              let value: String", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468229744", "createdAt": "2020-08-10T22:54:47Z", "author": {"login": "rebello95"}, "path": "library/swift/src/stats/Element.swift", "diffHunk": "@@ -0,0 +1,17 @@\n+import Foundation\n+\n+private let kPattern = \"^[A-Za-z_]+$\"\n+\n+/// Element represents one dot-delimited component of a time series name.\n+/// Element values must conform to the regex /^[A-Za-z_]+$/.\n+@objcMembers\n+public final class Element: NSObject, ExpressibleByStringLiteral {\n+  internal let value: String", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzNzg5OnYy", "diffSide": "RIGHT", "path": "library/swift/test/StatsClientImplTests.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NTozM1rOG-ifkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NTozM1rOG-ifkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDAzNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func testCounterDelegatesToEngine() throws {\n          \n          \n            \n              func testCounterDelegatesToEngine() {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230035", "createdAt": "2020-08-10T22:55:33Z", "author": {"login": "rebello95"}, "path": "library/swift/test/StatsClientImplTests.swift", "diffHunk": "@@ -0,0 +1,53 @@\n+@testable import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class StatsClientImplTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+    MockEnvoyEngine.onRecordCounter = nil\n+  }\n+\n+  func testCounterDelegatesToEngine() throws {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzODM1OnYy", "diffSide": "RIGHT", "path": "library/swift/test/StatsClientImplTests.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NTo0NFrOG-if0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NTo0NFrOG-if0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDA5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func testCounterDelegatesToEngineWithCount() throws {\n          \n          \n            \n              func testCounterDelegatesToEngineWithCount() {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230097", "createdAt": "2020-08-10T22:55:44Z", "author": {"login": "rebello95"}, "path": "library/swift/test/StatsClientImplTests.swift", "diffHunk": "@@ -0,0 +1,53 @@\n+@testable import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class StatsClientImplTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+    MockEnvoyEngine.onRecordCounter = nil\n+  }\n+\n+  func testCounterDelegatesToEngine() throws {\n+    var actualSeries: String?\n+    var actualCount: UInt?\n+    MockEnvoyEngine.onRecordCounter = { series, count in\n+      actualSeries = series\n+      actualCount = count\n+    }\n+    let mockEngine = MockEnvoyEngine()\n+    let statsClient = StatsClientImpl(engine: mockEngine)\n+    let counter = statsClient.counter(elements: [\"test\", \"stat\"])\n+    counter.increment()\n+    XCTAssertEqual(actualSeries, \"test.stat\")\n+    XCTAssertEqual(actualCount, 1)\n+  }\n+\n+  func testCounterDelegatesToEngineWithCount() throws {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQzODg3OnYy", "diffSide": "RIGHT", "path": "library/swift/test/StatsClientImplTests.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NjowM1rOG-igIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NjowM1rOG-igIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDE3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              func testCounterWeaklyHoldsEngine() throws {\n          \n          \n            \n              func testCounterWeaklyHoldsEngine() {", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230176", "createdAt": "2020-08-10T22:56:03Z", "author": {"login": "rebello95"}, "path": "library/swift/test/StatsClientImplTests.swift", "diffHunk": "@@ -0,0 +1,53 @@\n+@testable import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class StatsClientImplTests: XCTestCase {\n+  override func tearDown() {\n+    super.tearDown()\n+    MockEnvoyEngine.onRecordCounter = nil\n+  }\n+\n+  func testCounterDelegatesToEngine() throws {\n+    var actualSeries: String?\n+    var actualCount: UInt?\n+    MockEnvoyEngine.onRecordCounter = { series, count in\n+      actualSeries = series\n+      actualCount = count\n+    }\n+    let mockEngine = MockEnvoyEngine()\n+    let statsClient = StatsClientImpl(engine: mockEngine)\n+    let counter = statsClient.counter(elements: [\"test\", \"stat\"])\n+    counter.increment()\n+    XCTAssertEqual(actualSeries, \"test.stat\")\n+    XCTAssertEqual(actualCount, 1)\n+  }\n+\n+  func testCounterDelegatesToEngineWithCount() throws {\n+    var actualSeries: String?\n+    var actualCount: UInt?\n+    MockEnvoyEngine.onRecordCounter = { series, count in\n+      actualSeries = series\n+      actualCount = count\n+    }\n+    let mockEngine = MockEnvoyEngine()\n+    let statsClient = StatsClientImpl(engine: mockEngine)\n+    let counter = statsClient.counter(elements: [\"test\", \"stat\"])\n+    counter.increment(count: 5)\n+    XCTAssertEqual(actualSeries, \"test.stat\")\n+    XCTAssertEqual(actualCount, 5)\n+  }\n+\n+  func testCounterWeaklyHoldsEngine() throws {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ0MDA0OnYy", "diffSide": "RIGHT", "path": "library/swift/test/StatsClientImplTests.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NjozNlrOG-ig5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1NjozNlrOG-ig5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDM3Mw==", "bodyText": "Can we add these tests for Kotlin too?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230373", "createdAt": "2020-08-10T22:56:36Z", "author": {"login": "rebello95"}, "path": "library/swift/test/StatsClientImplTests.swift", "diffHunk": "@@ -0,0 +1,53 @@\n+@testable import Envoy\n+import EnvoyEngine\n+import Foundation\n+import XCTest\n+\n+final class StatsClientImplTests: XCTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTQ0MTA5OnYy", "diffSide": "RIGHT", "path": "library/swift/test/BUILD", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMjo1Njo1NlrOG-ihdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzoxNzozNVrOG-i67w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDUxOQ==", "bodyText": "nit: can we alphabetize these test cases?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468230519", "createdAt": "2020-08-10T22:56:56Z", "author": {"login": "rebello95"}, "path": "library/swift/test/BUILD", "diffHunk": "@@ -52,9 +52,19 @@ envoy_mobile_swift_test(\n )\n \n envoy_mobile_swift_test(\n-    name = \"stream_client_builder_tests\",\n+    name = \"engine_builder_tests\",\n     srcs = [\n-        \"StreamClientBuilderTests.swift\",\n+        \"EngineBuilderTests.swift\",\n+    ],\n+    deps = [\n+        \"//library/objective-c:envoy_engine_objc_lib\",\n+    ],\n+)\n+\n+envoy_mobile_swift_test(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzNzAzOQ==", "bodyText": "thinking out loud: prolly worth adding a lint/pre-commit check for this in the long run", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468237039", "createdAt": "2020-08-10T23:17:35Z", "author": {"login": "jingwei99"}, "path": "library/swift/test/BUILD", "diffHunk": "@@ -52,9 +52,19 @@ envoy_mobile_swift_test(\n )\n \n envoy_mobile_swift_test(\n-    name = \"stream_client_builder_tests\",\n+    name = \"engine_builder_tests\",\n     srcs = [\n-        \"StreamClientBuilderTests.swift\",\n+        \"EngineBuilderTests.swift\",\n+    ],\n+    deps = [\n+        \"//library/objective-c:envoy_engine_objc_lib\",\n+    ],\n+)\n+\n+envoy_mobile_swift_test(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzMDUxOQ=="}, "originalCommit": {"oid": "6ae7be32f03c919e8c0fd77a20449d87a55f5195"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyODY3MTIwOnYy", "diffSide": "RIGHT", "path": "library/kotlin/test/io/envoyproxy/envoymobile/StatsClientImplTest.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1ODoxNVrOG_A5rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNjo1ODoxNVrOG_A5rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODcyODIzOA==", "bodyText": "tried to emulate StatsClientImplTests.testCounterWeaklyHoldsEngine, but I wasn't able to get the EnvoyEngine instance garbage collected - as calling System.gc() doesn't guarantee gc.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/992#discussion_r468728238", "createdAt": "2020-08-11T16:58:15Z", "author": {"login": "jingwei99"}, "path": "library/kotlin/test/io/envoyproxy/envoymobile/StatsClientImplTest.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyEngine\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+import org.mockito.ArgumentCaptor\n+import org.mockito.Mockito.mock\n+import org.mockito.Mockito.verify\n+\n+class StatsClientImplTest {\n+  private var envoyEngine: EnvoyEngine = mock(EnvoyEngine::class.java)\n+\n+  @Test\n+  fun `counter delegates to engine`() {\n+    val statsClient = StatsClientImpl(envoyEngine)\n+    val counter = statsClient.counter(Element(\"test\"), Element(\"stat\"))\n+    counter.increment()\n+    val elementsCaptor = ArgumentCaptor.forClass(String::class.java)\n+    val countCaptor = ArgumentCaptor.forClass(Int::class.java)\n+    verify(envoyEngine).recordCounter(elementsCaptor.capture(), countCaptor.capture())\n+    assertThat(elementsCaptor.getValue()).isEqualTo(\"test.stat\")\n+    assertThat(countCaptor.getValue()).isEqualTo(1)\n+  }\n+\n+  @Test\n+  fun `counter delegates to engine with count`() {\n+    val statsClient = StatsClientImpl(envoyEngine)\n+    val counter = statsClient.counter(Element(\"test\"), Element(\"stat\"))\n+    counter.increment(5)\n+    val elementsCaptor = ArgumentCaptor.forClass(String::class.java)\n+    val countCaptor = ArgumentCaptor.forClass(Int::class.java)\n+    verify(envoyEngine).recordCounter(elementsCaptor.capture(), countCaptor.capture())\n+    assertThat(elementsCaptor.getValue()).isEqualTo(\"test.stat\")\n+    assertThat(countCaptor.getValue()).isEqualTo(5)\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c089d6952d9f4b8e0b0ba58e9ee36e94f71f266c"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 724, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}