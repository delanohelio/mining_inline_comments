{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MzU5MzE2", "number": 1021, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzo0NDoxNFrOEYpNDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODo0OTowMlrOEf475A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc2MzY0OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzo0NDoxNFrOHBF3bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMjozNFrOHM0s-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNjczNA==", "bodyText": "Can you provide some motivation here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1021#discussion_r470906734", "createdAt": "2020-08-14T23:44:14Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -21,17 +21,21 @@ Engine::Engine(envoy_engine_callbacks callbacks, const char* config, const char*\n   main_thread_ = std::thread(&Engine::run, this, std::string(config), std::string(log_level));\n }\n \n-envoy_status_t Engine::run(std::string config, std::string log_level) {\n+envoy_status_t Engine::run(const std::string config, const std::string log_level) {\n   {\n     Thread::LockGuard lock(mutex_);\n     try {\n-      char* envoy_argv[] = {strdup(\"envoy\"), strdup(\"--config-yaml\"),   strdup(config.c_str()),\n-                            strdup(\"-l\"),    strdup(log_level.c_str()), nullptr};\n+      const std::string name = \"envoy\";\n+      const std::string config_flag = \"--config-yaml\";\n+      const std::string log_flag = \"-l\";\n+      const char* envoy_argv[] = {name.c_str(),     config_flag.c_str(), config.c_str(),\n+                                  log_flag.c_str(), log_level.c_str(),   nullptr};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9950f256e958d467fac99a886b99472bde7959"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkxNjc2Nw==", "bodyText": "asan correctly complained about the engine test. the old strdup based implementation was leaking all these strings.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1021#discussion_r470916767", "createdAt": "2020-08-15T00:49:11Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -21,17 +21,21 @@ Engine::Engine(envoy_engine_callbacks callbacks, const char* config, const char*\n   main_thread_ = std::thread(&Engine::run, this, std::string(config), std::string(log_level));\n }\n \n-envoy_status_t Engine::run(std::string config, std::string log_level) {\n+envoy_status_t Engine::run(const std::string config, const std::string log_level) {\n   {\n     Thread::LockGuard lock(mutex_);\n     try {\n-      char* envoy_argv[] = {strdup(\"envoy\"), strdup(\"--config-yaml\"),   strdup(config.c_str()),\n-                            strdup(\"-l\"),    strdup(log_level.c_str()), nullptr};\n+      const std::string name = \"envoy\";\n+      const std::string config_flag = \"--config-yaml\";\n+      const std::string log_flag = \"-l\";\n+      const char* envoy_argv[] = {name.c_str(),     config_flag.c_str(), config.c_str(),\n+                                  log_flag.c_str(), log_level.c_str(),   nullptr};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNjczNA=="}, "originalCommit": {"oid": "4c9950f256e958d467fac99a886b99472bde7959"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwODQ0MQ==", "bodyText": "We were leaking them intentionally before because we weren't sure how long Envoy needed them to stick around. This is fine though; they're on the stack anyways for the full duration of run.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1021#discussion_r483208441", "createdAt": "2020-09-03T19:32:34Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -21,17 +21,21 @@ Engine::Engine(envoy_engine_callbacks callbacks, const char* config, const char*\n   main_thread_ = std::thread(&Engine::run, this, std::string(config), std::string(log_level));\n }\n \n-envoy_status_t Engine::run(std::string config, std::string log_level) {\n+envoy_status_t Engine::run(const std::string config, const std::string log_level) {\n   {\n     Thread::LockGuard lock(mutex_);\n     try {\n-      char* envoy_argv[] = {strdup(\"envoy\"), strdup(\"--config-yaml\"),   strdup(config.c_str()),\n-                            strdup(\"-l\"),    strdup(log_level.c_str()), nullptr};\n+      const std::string name = \"envoy\";\n+      const std::string config_flag = \"--config-yaml\";\n+      const std::string log_flag = \"-l\";\n+      const char* envoy_argv[] = {name.c_str(),     config_flag.c_str(), config.c_str(),\n+                                  log_flag.c_str(), log_level.c_str(),   nullptr};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNjczNA=="}, "originalCommit": {"oid": "4c9950f256e958d467fac99a886b99472bde7959"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjc2NzQxOnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzo0NTo0NlrOHBF5LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMzo0NTo0NlrOHBF5LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkwNzE4MQ==", "bodyText": "This comment really applies to the event loop rather than the above calls now.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1021#discussion_r470907181", "createdAt": "2020-08-14T23:45:46Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -60,13 +64,14 @@ envoy_status_t Engine::run(std::string config, std::string log_level) {\n   // The main run loop must run without holding the mutex, so that the destructor can acquire it.\n   bool run_success = TS_UNCHECKED_READ(main_common_)->run();\n \n-  // The above call is blocking; at this point the event loop has exited.\n-  callbacks_.on_exit();\n-\n   // Ensure destructors run on Envoy's main thread.\n+  http_dispatcher_->exit();\n   postinit_callback_handler_.reset();\n   TS_UNCHECKED_READ(main_common_).reset();\n \n+  // The above call is blocking; at this point the event loop has exited.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c9950f256e958d467fac99a886b99472bde7959"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODczMzg0OnYy", "diffSide": "RIGHT", "path": "library/objective-c/EnvoyEngineImpl.m", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODo0Njo1M1rOHMcilw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxOTozMDoyM1rOHM0oxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxMjU2Nw==", "bodyText": "Won't this terminate the engine on any lifecycle notification? Or are we only registering for backgrounding/shutdown.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1021#discussion_r482812567", "createdAt": "2020-09-03T08:46:53Z", "author": {"login": "goaway"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -193,19 +195,18 @@ - (void)recordCounter:(NSString *)elements count:(NSUInteger)count {\n \n - (void)startObservingLifecycleNotifications {\n   NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];\n-  [notificationCenter addObserver:self\n-                         selector:@selector(lifecycleDidChangeWithNotification:)\n-                             name:UIApplicationWillResignActiveNotification\n-                           object:nil];\n   [notificationCenter addObserver:self\n                          selector:@selector(lifecycleDidChangeWithNotification:)\n                              name:UIApplicationWillTerminateNotification\n                            object:nil];\n }\n \n - (void)lifecycleDidChangeWithNotification:(NSNotification *)notification {\n-  NSLog(@\"[Envoy] triggering stats flush (%@)\", notification.name);\n-  flush_stats();\n+  NSLog(@\"[Envoy] terminating engine (%@)\", notification.name);\n+  // TODO: ensure this is called with the correct envoy_engine_t once multiple Engine objects can\n+  // be allocated.\n+  // https://github.com/lyft/envoy-mobile/issues/332\n+  terminate_engine(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0757528016fa83f9a69c9eea4d800ec9dde4142"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxMzE5Mg==", "bodyText": "Also, we should have access to the engine handle here. No need to hardcode 0.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1021#discussion_r482813192", "createdAt": "2020-09-03T08:48:02Z", "author": {"login": "goaway"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -193,19 +195,18 @@ - (void)recordCounter:(NSString *)elements count:(NSUInteger)count {\n \n - (void)startObservingLifecycleNotifications {\n   NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];\n-  [notificationCenter addObserver:self\n-                         selector:@selector(lifecycleDidChangeWithNotification:)\n-                             name:UIApplicationWillResignActiveNotification\n-                           object:nil];\n   [notificationCenter addObserver:self\n                          selector:@selector(lifecycleDidChangeWithNotification:)\n                              name:UIApplicationWillTerminateNotification\n                            object:nil];\n }\n \n - (void)lifecycleDidChangeWithNotification:(NSNotification *)notification {\n-  NSLog(@\"[Envoy] triggering stats flush (%@)\", notification.name);\n-  flush_stats();\n+  NSLog(@\"[Envoy] terminating engine (%@)\", notification.name);\n+  // TODO: ensure this is called with the correct envoy_engine_t once multiple Engine objects can\n+  // be allocated.\n+  // https://github.com/lyft/envoy-mobile/issues/332\n+  terminate_engine(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxMjU2Nw=="}, "originalCommit": {"oid": "b0757528016fa83f9a69c9eea4d800ec9dde4142"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA5MjAwMA==", "bodyText": "I deleted the observer for UIApplicationWillResignActiveNotification so it will only be on termination. ack on the engine handle, will update.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1021#discussion_r483092000", "createdAt": "2020-09-03T16:05:03Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -193,19 +195,18 @@ - (void)recordCounter:(NSString *)elements count:(NSUInteger)count {\n \n - (void)startObservingLifecycleNotifications {\n   NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];\n-  [notificationCenter addObserver:self\n-                         selector:@selector(lifecycleDidChangeWithNotification:)\n-                             name:UIApplicationWillResignActiveNotification\n-                           object:nil];\n   [notificationCenter addObserver:self\n                          selector:@selector(lifecycleDidChangeWithNotification:)\n                              name:UIApplicationWillTerminateNotification\n                            object:nil];\n }\n \n - (void)lifecycleDidChangeWithNotification:(NSNotification *)notification {\n-  NSLog(@\"[Envoy] triggering stats flush (%@)\", notification.name);\n-  flush_stats();\n+  NSLog(@\"[Envoy] terminating engine (%@)\", notification.name);\n+  // TODO: ensure this is called with the correct envoy_engine_t once multiple Engine objects can\n+  // be allocated.\n+  // https://github.com/lyft/envoy-mobile/issues/332\n+  terminate_engine(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxMjU2Nw=="}, "originalCommit": {"oid": "b0757528016fa83f9a69c9eea4d800ec9dde4142"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzIwNzM2Nw==", "bodyText": "I think the notification actually has the lifecycle event on it, so we could be more picky here. My worry is that if someone adds it back in, it won't be obvious they're doing something wrong, and it could cause networking to fail until the app is restarted.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1021#discussion_r483207367", "createdAt": "2020-09-03T19:30:23Z", "author": {"login": "goaway"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -193,19 +195,18 @@ - (void)recordCounter:(NSString *)elements count:(NSUInteger)count {\n \n - (void)startObservingLifecycleNotifications {\n   NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];\n-  [notificationCenter addObserver:self\n-                         selector:@selector(lifecycleDidChangeWithNotification:)\n-                             name:UIApplicationWillResignActiveNotification\n-                           object:nil];\n   [notificationCenter addObserver:self\n                          selector:@selector(lifecycleDidChangeWithNotification:)\n                              name:UIApplicationWillTerminateNotification\n                            object:nil];\n }\n \n - (void)lifecycleDidChangeWithNotification:(NSNotification *)notification {\n-  NSLog(@\"[Envoy] triggering stats flush (%@)\", notification.name);\n-  flush_stats();\n+  NSLog(@\"[Envoy] terminating engine (%@)\", notification.name);\n+  // TODO: ensure this is called with the correct envoy_engine_t once multiple Engine objects can\n+  // be allocated.\n+  // https://github.com/lyft/envoy-mobile/issues/332\n+  terminate_engine(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxMjU2Nw=="}, "originalCommit": {"oid": "b0757528016fa83f9a69c9eea4d800ec9dde4142"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODc0MTQ4OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODo0OTowMlrOHMcnSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwODo0OTowMlrOHMcnSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgxMzc2OA==", "bodyText": "I agree this ordering makes more sense.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1021#discussion_r482813768", "createdAt": "2020-09-03T08:49:02Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -60,14 +64,14 @@ envoy_status_t Engine::run(std::string config, std::string log_level) {\n \n   // The main run loop must run without holding the mutex, so that the destructor can acquire it.\n   bool run_success = TS_UNCHECKED_READ(main_common_)->run();\n-\n   // The above call is blocking; at this point the event loop has exited.\n-  callbacks_.on_exit();\n \n   // Ensure destructors run on Envoy's main thread.\n   postinit_callback_handler_.reset();\n   TS_UNCHECKED_READ(main_common_).reset();\n \n+  callbacks_.on_exit(callbacks_.context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0757528016fa83f9a69c9eea4d800ec9dde4142"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 745, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}