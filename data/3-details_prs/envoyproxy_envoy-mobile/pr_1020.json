{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MzAwOTA5", "number": 1020, "title": "stats: add scope for external stats", "bodyText": "Description: Use a dedicated Stats::Scope for external stats.\nRisk Level: Low\nTesting: Local\nSigned-off-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-08-11T19:11:40Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020", "merged": true, "mergeCommit": {"oid": "19542223677d3c793826c64ed84a1b1cb24a08ac"}, "closed": true, "closedAt": "2020-08-17T21:45:01Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc97v20AH2gAyNDY2MzAwOTA5OmFmMDJmNTI1NjJmNjk5YTA5YWQ3ZWFiOTY5NTEzY2IxOTU4MmQxNDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_JqAGAFqTQ2Nzk4NzIyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "af02f52562f699a09ad7eab969513cb19582d146", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/af02f52562f699a09ad7eab969513cb19582d146", "committedDate": "2020-08-11T19:12:08Z", "message": "stats: add scope for external stats\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "539a11c94a1fa9a3062d853a261430adb18b4512", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/539a11c94a1fa9a3062d853a261430adb18b4512", "committedDate": "2020-08-11T19:11:01Z", "message": "stats: add scope for external stats\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "af02f52562f699a09ad7eab969513cb19582d146", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/af02f52562f699a09ad7eab969513cb19582d146", "committedDate": "2020-08-11T19:12:08Z", "message": "stats: add scope for external stats\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "446adedf3a8d5c81ac42d5763a1a2558b67dc477", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/446adedf3a8d5c81ac42d5763a1a2558b67dc477", "committedDate": "2020-08-11T19:13:50Z", "message": "make name more explicit\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/5d153a93d7e70211ea5d13703122d08d9a78e671", "committedDate": "2020-08-11T19:14:29Z", "message": "missed reference\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MzU4OTQ4", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#pullrequestreview-465358948", "createdAt": "2020-08-11T19:19:04Z", "commit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2Mjg2MDQ3", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#pullrequestreview-466286047", "createdAt": "2020-08-12T21:20:56Z", "commit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMDo1NlrOG_zSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMzozN1rOG_zXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1Mzg1Mg==", "bodyText": "nit: can we check if the string view can be built in place in the call below?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r469553852", "createdAt": "2020-08-12T21:20:56Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && external_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {\n-      static const std::string client = \"client\";\n-      absl::string_view prefix{client};\n       absl::string_view dynamic_elements{elements};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NDM0NQ==", "bodyText": "maybe we can asset external_scope_? Because if the server is there but the scope is not that seems odd?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r469554345", "createdAt": "2020-08-12T21:21:58Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && external_scope_) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NTA2MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Stats::ScopePtr external_scope_;\n          \n          \n            \n              Stats::ScopePtr stats_client_scope_;", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r469555060", "createdAt": "2020-08-12T21:23:37Z", "author": {"login": "junr03"}, "path": "library/common/engine.h", "diffHunk": "@@ -50,6 +50,7 @@ class Engine {\n private:\n   envoy_status_t run(std::string config, std::string log_level);\n \n+  Stats::ScopePtr external_scope_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12f81c508e76405a54b83869cc0b90d4276307f5", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/12f81c508e76405a54b83869cc0b90d4276307f5", "committedDate": "2020-08-13T20:45:43Z", "message": "updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MTE3MzI5", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#pullrequestreview-467117329", "createdAt": "2020-08-13T20:46:02Z", "commit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo0NjowMlrOHAdDMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1Mjo1NVrOHAdSFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzODAwMQ==", "bodyText": "it's weird to have a scalar string called elements, but in any case I suggest passing it by const ref, or better yet, by string_view.\nBut IMO the higher level issue is that if you define your API to inc a counter based on a string, you are going to have to pay the cost of map lookups and/or locks. Is it not possible for you to have the Engine API offer a wrapper to create a handle that the caller can store, to quickly increment a counter?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470238001", "createdAt": "2020-08-13T20:46:02Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTYyMw==", "bodyText": "I would not have expected this to work, but I see the problem. I meant to make DynamicName an explicit but allow the implicit conversion from string literal to string_view.\nCan you change this to:\n  Stats::Utility::counterFromElements(*client_scope_, {Stats::DynamicName(elements)}).add(count);\n\nI'm going to write a quick PR to add the explicit qualifier to the DynamicName constructor which would make the form that you have here invalid.\nThe reason is that it is an anti-pattern to have a ton of DynamicName objects (due to string bloat) so I want to be able to search for them.\nOf course the better solution is really to get callers to create a Counter and keep a handle to it, rather than doing the name lookup all the time, but if you can't do that then please add the explicit qualifier.\nThen also you will not need the string_view declaration above.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470241623", "createdAt": "2020-08-13T20:52:34Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && client_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {\n-      static const std::string client = \"client\";\n-      absl::string_view prefix{client};\n       absl::string_view dynamic_elements{elements};\n-      Stats::Utility::counterFromElements(server_->serverFactoryContext().scope(),\n-                                          {prefix, dynamic_elements})\n-          .add(count);\n+      Stats::Utility::counterFromElements(*client_scope_, {dynamic_elements}).add(count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f81c508e76405a54b83869cc0b90d4276307f5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTgxMw==", "bodyText": "why the post() here rather than just incrementing the counter directly at the call-site?\ncounters are thread-safe, at least once they are looked up.\nMaybe the issue is that the caller is in some thread that Envoy does not know about, so the TLS lookups underneath fail? In that case can you comment?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470241813", "createdAt": "2020-08-13T20:52:55Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && client_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f81c508e76405a54b83869cc0b90d4276307f5"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd8d4e8feb0e6e5eba4150fe518225d3d12c318c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/dd8d4e8feb0e6e5eba4150fe518225d3d12c318c", "committedDate": "2020-08-14T08:45:28Z", "message": "use Stats::DynamicName for recording\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be8e4d9090539685515fd56d21d81f2984ef3a86", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/be8e4d9090539685515fd56d21d81f2984ef3a86", "committedDate": "2020-08-14T10:36:32Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3Nzk0NDY4", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#pullrequestreview-467794468", "createdAt": "2020-08-14T18:31:03Z", "commit": {"oid": "be8e4d9090539685515fd56d21d81f2984ef3a86"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODozMTowM1rOHA_CAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODozMTowM1rOHA_CAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NDc1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            void Engine::recordCounter(std::string elements, uint64_t count) {\n          \n          \n            \n            void Engine::recordCounter(const std::string& elements, uint64_t count) {\n          \n      \n    \n    \n  \n\nper @jmarantz.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470794754", "createdAt": "2020-08-14T18:31:03Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzODAwMQ=="}, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/8d6bd382c63e68fa586b64adb12063468b02c9a4", "committedDate": "2020-08-14T18:35:09Z", "message": "pass const string ref\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODE1NDAy", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#pullrequestreview-467815402", "createdAt": "2020-08-14T19:08:05Z", "commit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODI4MjU2", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#pullrequestreview-467828256", "createdAt": "2020-08-14T19:32:16Z", "commit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozMjoxNlrOHBBD7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozMjoxNlrOHBBD7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyODAxMg==", "bodyText": "now that I see this in its current form, it's worth a quick check whether 'elements' value gets copied into the lambda provided to post, or whether it holds a ref to an object that might potentially not live long enough for the dispatcher to execute the post.\nIt might not matter in your unit test, where the lifetime of the string you pass to recordCounter is long enough.\nIn any case I think the interface to this function should be a const ref, but you may need to copy it explicitly into storage saved in the lambda. Can you check?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470828012", "createdAt": "2020-08-14T19:32:16Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,14 +94,10 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n-void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+void Engine::recordCounter(const std::string& elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTg3MjI2", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#pullrequestreview-467987226", "createdAt": "2020-08-15T13:58:20Z", "commit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4166, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}