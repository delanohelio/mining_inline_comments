{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4Mjc4MTEw", "number": 1102, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyMzo0N1rOEkRe-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzowODoyNVrOEkpKTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDcwNjQ5OnYy", "diffSide": "RIGHT", "path": "test/common/main_interface_test.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyMzo0N1rOHTHcJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyMzo0N1rOHTHcJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNjg4Nw==", "bodyText": "You'll need to merge main for this; there's an on_engine_running callback now", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r489806887", "createdAt": "2020-09-16T23:23:47Z", "author": {"login": "rebello95"}, "path": "test/common/main_interface_test.cc", "diffHunk": "@@ -0,0 +1,128 @@\n+#include \"test/common/http/common.h\"\n+\n+#include \"absl/synchronization/notification.h\"\n+#include \"gtest/gtest.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+#include \"library/common/main_interface.h\"\n+\n+namespace Envoy {\n+\n+class MainInterfaceTest : public testing::Test {};\n+\n+TEST_F(MainInterfaceTest, BasicStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\", \"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"direct_response\\\":{\\\"status\\\":\\\"200\\\"}}]}]},\\\"http_filters\\\":[{\\\"name\\\":\\\"buffer\\\",\"\n+      \"\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.buffer.v3.Buffer\\\", \\\"max_request_bytes\\\": \\\"65000\\\"}}, \"\n+      \"{\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda570002916b6579fde136c02d065bf9a6edf74"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDcwNjg5OnYy", "diffSide": "RIGHT", "path": "test/common/main_interface_test.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyNDowM1rOHTHcaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyNDowM1rOHTHcaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNjk1Mg==", "bodyText": "Can you /*document*/ these?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r489806952", "createdAt": "2020-09-16T23:24:03Z", "author": {"login": "rebello95"}, "path": "test/common/main_interface_test.cc", "diffHunk": "@@ -0,0 +1,128 @@\n+#include \"test/common/http/common.h\"\n+\n+#include \"absl/synchronization/notification.h\"\n+#include \"gtest/gtest.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+#include \"library/common/main_interface.h\"\n+\n+namespace Envoy {\n+\n+class MainInterfaceTest : public testing::Test {};\n+\n+TEST_F(MainInterfaceTest, BasicStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\", \"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"direct_response\\\":{\\\"status\\\":\\\"200\\\"}}]}]},\\\"http_filters\\\":[{\\\"name\\\":\\\"buffer\\\",\"\n+      \"\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.buffer.v3.Buffer\\\", \\\"max_request_bytes\\\": \\\"65000\\\"}}, \"\n+      \"{\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};\n+  run_engine(0, engine_cbs, config.c_str(), level.c_str());\n+\n+  absl::Notification on_complete_notification;\n+  envoy_http_callbacks stream_cbs{[](envoy_headers, bool, void*) -> void* { return nullptr; },\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda570002916b6579fde136c02d065bf9a6edf74"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDcxMDM2OnYy", "diffSide": "RIGHT", "path": "test/common/main_interface_test.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyNToyNVrOHTHeRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyNToyNVrOHTHeRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNzQzMQ==", "bodyText": "Same comments for this test case as above", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r489807431", "createdAt": "2020-09-16T23:25:25Z", "author": {"login": "rebello95"}, "path": "test/common/main_interface_test.cc", "diffHunk": "@@ -0,0 +1,128 @@\n+#include \"test/common/http/common.h\"\n+\n+#include \"absl/synchronization/notification.h\"\n+#include \"gtest/gtest.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+#include \"library/common/main_interface.h\"\n+\n+namespace Envoy {\n+\n+class MainInterfaceTest : public testing::Test {};\n+\n+TEST_F(MainInterfaceTest, BasicStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\", \"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"direct_response\\\":{\\\"status\\\":\\\"200\\\"}}]}]},\\\"http_filters\\\":[{\\\"name\\\":\\\"buffer\\\",\"\n+      \"\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.buffer.v3.Buffer\\\", \\\"max_request_bytes\\\": \\\"65000\\\"}}, \"\n+      \"{\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};\n+  run_engine(0, engine_cbs, config.c_str(), level.c_str());\n+\n+  absl::Notification on_complete_notification;\n+  envoy_http_callbacks stream_cbs{[](envoy_headers, bool, void*) -> void* { return nullptr; },\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  [](void* context) -> void* {\n+                                    auto* on_complete_notification =\n+                                        static_cast<absl::Notification*>(context);\n+                                    on_complete_notification->Notify();\n+                                    return nullptr;\n+                                  },\n+                                  nullptr,\n+                                  &on_complete_notification};\n+  Http::TestRequestHeaderMapImpl headers;\n+  HttpTestUtility::addDefaultHeaders(headers);\n+  envoy_headers c_headers = Http::Utility::toBridgeHeaders(headers);\n+\n+  Buffer::OwnedImpl request_data = Buffer::OwnedImpl(\"request body\");\n+  envoy_data c_data = Buffer::Utility::toBridgeData(request_data);\n+\n+  Http::TestRequestTrailerMapImpl trailers;\n+  envoy_headers c_trailers = Http::Utility::toBridgeHeaders(trailers);\n+\n+  envoy_stream_t stream = init_stream(0);\n+\n+  start_stream(stream, stream_cbs);\n+\n+  send_headers(stream, c_headers, false);\n+  send_data(stream, c_data, false);\n+  send_trailers(stream, c_trailers);\n+\n+  ASSERT_TRUE(on_complete_notification.WaitForNotificationWithTimeout(absl::Seconds(10)));\n+\n+  terminate_engine(0);\n+\n+  ASSERT_TRUE(exit.WaitForNotificationWithTimeout(absl::Seconds(10)));\n+}\n+\n+TEST_F(MainInterfaceTest, ResetStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\",\"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"route\\\":{\\\"cluster_header\\\":\\\"x-envoy-mobile-cluster\\\",\\\"retry_policy\\\":{\\\"retry_back_\"\n+      \"off\\\":{\\\"base_interval\\\":\\\"0.25s\\\",\\\"max_interval\\\":\\\"60s\\\"}}}}]}]},\\\"http_filters\\\":[{\"\n+      \"\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};\n+  run_engine(0, engine_cbs, config.c_str(), level.c_str());\n+\n+  absl::Notification on_cancel_notification;\n+  envoy_http_callbacks stream_cbs{[](envoy_headers, bool, void*) -> void* { return nullptr; },\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  [](void* context) -> void* {\n+                                    auto* on_cancel_notification =\n+                                        static_cast<absl::Notification*>(context);\n+                                    on_cancel_notification->Notify();\n+                                    return nullptr;\n+                                  },\n+                                  &on_cancel_notification};\n+\n+  envoy_stream_t stream = init_stream(0);\n+\n+  start_stream(stream, stream_cbs);\n+\n+  reset_stream(stream);\n+\n+  ASSERT_TRUE(on_cancel_notification.WaitForNotificationWithTimeout(absl::Seconds(10)));\n+\n+  terminate_engine(0);\n+\n+  ASSERT_TRUE(exit.WaitForNotificationWithTimeout(absl::Seconds(10)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda570002916b6579fde136c02d065bf9a6edf74"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDcxMzU1OnYy", "diffSide": "RIGHT", "path": "test/common/main_interface_test.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyNzowNlrOHTHgIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMzoyNzowNlrOHTHgIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgwNzkwNw==", "bodyText": "I think it's worth a docstring somewhere here explaining that the config above triggers a direct response which is why the stream completes. Also, should we validate the response itself?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r489807907", "createdAt": "2020-09-16T23:27:06Z", "author": {"login": "rebello95"}, "path": "test/common/main_interface_test.cc", "diffHunk": "@@ -0,0 +1,128 @@\n+#include \"test/common/http/common.h\"\n+\n+#include \"absl/synchronization/notification.h\"\n+#include \"gtest/gtest.h\"\n+#include \"library/common/buffer/utility.h\"\n+#include \"library/common/http/header_utility.h\"\n+#include \"library/common/main_interface.h\"\n+\n+namespace Envoy {\n+\n+class MainInterfaceTest : public testing::Test {};\n+\n+TEST_F(MainInterfaceTest, BasicStream) {\n+  const std::string config =\n+      \"{\\\"admin\\\":{},\\\"static_resources\\\":{\\\"listeners\\\":[{\\\"name\\\":\\\"base_api_listener\\\", \"\n+      \"\\\"address\\\":{\\\"socket_address\\\":{\\\"protocol\\\":\\\"TCP\\\",\\\"address\\\":\\\"0.0.0.0\\\",\\\"port_\"\n+      \"value\\\":10000}},\\\"api_listener\\\":{\\\"api_listener\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager\\\",\\\"stat_\"\n+      \"prefix\\\":\\\"hcm\\\",\\\"route_config\\\":{\\\"name\\\":\\\"api_router\\\",\\\"virtual_hosts\\\":[{\\\"name\\\":\"\n+      \"\\\"api\\\",\\\"include_attempt_count_in_response\\\":true,\\\"domains\\\":[\\\"*\\\"],\\\"routes\\\":[{\"\n+      \"\\\"match\\\":{\\\"prefix\\\":\\\"/\"\n+      \"\\\"},\\\"direct_response\\\":{\\\"status\\\":\\\"200\\\"}}]}]},\\\"http_filters\\\":[{\\\"name\\\":\\\"buffer\\\",\"\n+      \"\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.buffer.v3.Buffer\\\", \\\"max_request_bytes\\\": \\\"65000\\\"}}, \"\n+      \"{\\\"name\\\":\\\"envoy.router\\\",\\\"typed_config\\\":{\\\"@type\\\":\\\"type.googleapis.com/\"\n+      \"envoy.extensions.filters.http.router.v3.Router\\\"}}]}}}]},\\\"layered_runtime\\\":{\\\"layers\\\":[{\"\n+      \"\\\"name\\\":\\\"static_layer_0\\\",\\\"static_layer\\\":{\\\"overload\\\":{\\\"global_downstream_max_\"\n+      \"connections\\\":50000}}}]}}\";\n+  const std::string level = \"debug\";\n+  absl::Notification exit;\n+  envoy_engine_callbacks engine_cbs{[](void* context) -> void {\n+                                      auto* exit = static_cast<absl::Notification*>(context);\n+                                      exit->Notify();\n+                                    },\n+                                    &exit};\n+  run_engine(0, engine_cbs, config.c_str(), level.c_str());\n+\n+  absl::Notification on_complete_notification;\n+  envoy_http_callbacks stream_cbs{[](envoy_headers, bool, void*) -> void* { return nullptr; },\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  nullptr,\n+                                  [](void* context) -> void* {\n+                                    auto* on_complete_notification =\n+                                        static_cast<absl::Notification*>(context);\n+                                    on_complete_notification->Notify();\n+                                    return nullptr;\n+                                  },\n+                                  nullptr,\n+                                  &on_complete_notification};\n+  Http::TestRequestHeaderMapImpl headers;\n+  HttpTestUtility::addDefaultHeaders(headers);\n+  envoy_headers c_headers = Http::Utility::toBridgeHeaders(headers);\n+\n+  Buffer::OwnedImpl request_data = Buffer::OwnedImpl(\"request body\");\n+  envoy_data c_data = Buffer::Utility::toBridgeData(request_data);\n+\n+  Http::TestRequestTrailerMapImpl trailers;\n+  envoy_headers c_trailers = Http::Utility::toBridgeHeaders(trailers);\n+\n+  envoy_stream_t stream = init_stream(0);\n+\n+  start_stream(stream, stream_cbs);\n+\n+  send_headers(stream, c_headers, false);\n+  send_data(stream, c_data, false);\n+  send_trailers(stream, c_trailers);\n+\n+  ASSERT_TRUE(on_complete_notification.WaitForNotificationWithTimeout(absl::Seconds(10)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bda570002916b6579fde136c02d065bf9a6edf74"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODU4MTA2OnYy", "diffSide": "RIGHT", "path": "library/common/http/dispatcher.h", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzowNzowNFrOHTs_ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzowNzowNFrOHTs_ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMjIwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                absl::string_view details_;\n          \n          \n            \n                absl::string_view response_details_;", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r490422202", "createdAt": "2020-09-17T17:07:04Z", "author": {"login": "rebello95"}, "path": "library/common/http/dispatcher.h", "diffHunk": "@@ -168,19 +172,24 @@ class Dispatcher : public Logger::Loggable<Logger::Id::http> {\n     const Network::Address::InstanceConstSharedPtr& connectionLocalAddress() override {\n       return parent_.address_;\n     }\n+    absl::string_view responseDetails() override { return details_; }\n     // TODO: https://github.com/lyft/envoy-mobile/issues/825\n     void readDisable(bool /*disable*/) override {}\n     uint32_t bufferLimit() override { return 65000; }\n     // Not applicable\n     void setFlushTimeout(std::chrono::milliseconds) override {}\n \n+    void setDetails(absl::string_view details) { details_ = details; }\n+\n     const envoy_stream_t stream_handle_;\n \n     // Used to issue outgoing HTTP stream operations.\n     RequestDecoder* request_decoder_;\n     // Used to receive incoming HTTP stream operations.\n     DirectStreamCallbacksPtr callbacks_;\n     Dispatcher& parent_;\n+    // Response details used by the connection manager.\n+    absl::string_view details_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65f75aa4e67dd8f512f499aadfb292b8ab44c8d"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODU4NTc0OnYy", "diffSide": "RIGHT", "path": "library/common/http/dispatcher.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzowODoyNVrOHTtCsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMToyOTozMFrOHT2MRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMjk2Mg==", "bodyText": "setResponseDetails? I'm also curious as to what the benefit is of having an explicit setter when details_ has the same access level below and can be modified directly", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r490422962", "createdAt": "2020-09-17T17:08:25Z", "author": {"login": "rebello95"}, "path": "library/common/http/dispatcher.h", "diffHunk": "@@ -168,19 +172,24 @@ class Dispatcher : public Logger::Loggable<Logger::Id::http> {\n     const Network::Address::InstanceConstSharedPtr& connectionLocalAddress() override {\n       return parent_.address_;\n     }\n+    absl::string_view responseDetails() override { return details_; }\n     // TODO: https://github.com/lyft/envoy-mobile/issues/825\n     void readDisable(bool /*disable*/) override {}\n     uint32_t bufferLimit() override { return 65000; }\n     // Not applicable\n     void setFlushTimeout(std::chrono::milliseconds) override {}\n \n+    void setDetails(absl::string_view details) { details_ = details; }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b65f75aa4e67dd8f512f499aadfb292b8ab44c8d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3Mjg3MQ==", "bodyText": "yep, good eye. I actually want to turn all the members to private to prevent a conn manager <-> async stream situation here. So wanted to prepare for that.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1102#discussion_r490572871", "createdAt": "2020-09-17T21:29:30Z", "author": {"login": "junr03"}, "path": "library/common/http/dispatcher.h", "diffHunk": "@@ -168,19 +172,24 @@ class Dispatcher : public Logger::Loggable<Logger::Id::http> {\n     const Network::Address::InstanceConstSharedPtr& connectionLocalAddress() override {\n       return parent_.address_;\n     }\n+    absl::string_view responseDetails() override { return details_; }\n     // TODO: https://github.com/lyft/envoy-mobile/issues/825\n     void readDisable(bool /*disable*/) override {}\n     uint32_t bufferLimit() override { return 65000; }\n     // Not applicable\n     void setFlushTimeout(std::chrono::milliseconds) override {}\n \n+    void setDetails(absl::string_view details) { details_ = details; }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQyMjk2Mg=="}, "originalCommit": {"oid": "b65f75aa4e67dd8f512f499aadfb292b8ab44c8d"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 623, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}