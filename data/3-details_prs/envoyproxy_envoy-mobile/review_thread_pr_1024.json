{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NDc2Nzk0", "number": 1024, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoxNDowNVrOEXsxpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyMDo0N1rOEXs7oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjg2MzEwOnYy", "diffSide": "RIGHT", "path": "library/java/src/io/envoyproxy/envoymobile/engine/BUILD", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoxNDowNVrOG_oncA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoxNDowNVrOG_oncA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3ODkyOA==", "bodyText": "This is unfortunate...\n#1027", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1024#discussion_r469378928", "createdAt": "2020-08-12T16:14:05Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/BUILD", "diffHunk": "@@ -36,3 +36,9 @@ java_library(\n         \"//library/java/src/io/envoyproxy/envoymobile/engine/types:envoy_c_types_lib\",\n     ],\n )\n+\n+filegroup(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0912b540ca48e862f232ecc5e236cfe4d4b1c96b"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjg2Njc2OnYy", "diffSide": "RIGHT", "path": "library/java/test/io/envoyproxy/envoymobile/engine/JvmBridgeUtilityTest.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoxNDo1OVrOG_opwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOTowMzowNlrOG_ummg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3OTUyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .usingRecursiveComparison().isEqualTo(expectedHeaders)\n          \n          \n            \n                  .usingRecursiveComparison()\n          \n          \n            \n                  .isEqualTo(expectedHeaders)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1024#discussion_r469379522", "createdAt": "2020-08-12T16:14:59Z", "author": {"login": "buildbreaker"}, "path": "library/java/test/io/envoyproxy/envoymobile/engine/JvmBridgeUtilityTest.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.envoyproxy.envoymobile.engine\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class JvmBridgeUtilityTest {\n+\n+  @Test\n+  fun `retrieveHeaders produces a Map with all headers provided via passHeaders`() {\n+    val utility = JvmBridgeUtility()\n+    utility.passHeader(\"test-0\".toByteArray(), \"value-0\".toByteArray(), true)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-1\".toByteArray(), false)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-2\".toByteArray(), false)\n+\n+    val headers = utility.retrieveHeaders()\n+    val expectedHeaders = mapOf(\n+      \"test-0\" to listOf(\"value-0\"),\n+      \"test-1\" to listOf(\"value-1\", \"value-2\")\n+    )\n+\n+    assertThat(headers)\n+      .hasSize(2) // Two keys / header name\n+      .usingRecursiveComparison().isEqualTo(expectedHeaders)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0912b540ca48e862f232ecc5e236cfe4d4b1c96b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3NzAxOA==", "bodyText": "These two are actually dependently-chained (and you couldn't, for instance, reverse the order of 22 and 23, since 23 changes the type) which was why I put them on one line. I don't feel terribly strongly about it though.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1024#discussion_r469477018", "createdAt": "2020-08-12T19:03:06Z", "author": {"login": "goaway"}, "path": "library/java/test/io/envoyproxy/envoymobile/engine/JvmBridgeUtilityTest.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.envoyproxy.envoymobile.engine\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class JvmBridgeUtilityTest {\n+\n+  @Test\n+  fun `retrieveHeaders produces a Map with all headers provided via passHeaders`() {\n+    val utility = JvmBridgeUtility()\n+    utility.passHeader(\"test-0\".toByteArray(), \"value-0\".toByteArray(), true)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-1\".toByteArray(), false)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-2\".toByteArray(), false)\n+\n+    val headers = utility.retrieveHeaders()\n+    val expectedHeaders = mapOf(\n+      \"test-0\" to listOf(\"value-0\"),\n+      \"test-1\" to listOf(\"value-1\", \"value-2\")\n+    )\n+\n+    assertThat(headers)\n+      .hasSize(2) // Two keys / header name\n+      .usingRecursiveComparison().isEqualTo(expectedHeaders)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM3OTUyMg=="}, "originalCommit": {"oid": "0912b540ca48e862f232ecc5e236cfe4d4b1c96b"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjg4ODY1OnYy", "diffSide": "RIGHT", "path": "library/java/test/io/envoyproxy/envoymobile/engine/JvmBridgeUtilityTest.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyMDo0N1rOG_o3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToxODo1N1rOG_4hpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4MzEwMw==", "bodyText": "I think we can have 2 separate tests (potentially 3 but up to you):\n\nvalidateCount returns the appropriate value (this can be split into the positive and negative cases but up to you)\nretrieveHeaders() resets the internal count\n\nSeparate question: Wouldn't it be easier if the utility just returned the count value instead of requiring the user to ask it if the utility has N counts?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1024#discussion_r469383103", "createdAt": "2020-08-12T16:20:47Z", "author": {"login": "buildbreaker"}, "path": "library/java/test/io/envoyproxy/envoymobile/engine/JvmBridgeUtilityTest.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.envoyproxy.envoymobile.engine\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class JvmBridgeUtilityTest {\n+\n+  @Test\n+  fun `retrieveHeaders produces a Map with all headers provided via passHeaders`() {\n+    val utility = JvmBridgeUtility()\n+    utility.passHeader(\"test-0\".toByteArray(), \"value-0\".toByteArray(), true)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-1\".toByteArray(), false)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-2\".toByteArray(), false)\n+\n+    val headers = utility.retrieveHeaders()\n+    val expectedHeaders = mapOf(\n+      \"test-0\" to listOf(\"value-0\"),\n+      \"test-1\" to listOf(\"value-1\", \"value-2\")\n+    )\n+\n+    assertThat(headers)\n+      .hasSize(2) // Two keys / header name\n+      .usingRecursiveComparison().isEqualTo(expectedHeaders)\n+  }\n+\n+  @Test\n+  fun `validateCount checks if the expected number of header values in the map matches the actual`() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0912b540ca48e862f232ecc5e236cfe4d4b1c96b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUyMzIzMA==", "bodyText": "We could do that. I don't know that it would necessarily be easier, but it's definitely a valid approach. I was trying to keep the interface scoped pretty narrowly, and nothing really has any business querying the accumulated count outside of validation purposes.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1024#discussion_r469523230", "createdAt": "2020-08-12T20:32:22Z", "author": {"login": "goaway"}, "path": "library/java/test/io/envoyproxy/envoymobile/engine/JvmBridgeUtilityTest.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.envoyproxy.envoymobile.engine\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class JvmBridgeUtilityTest {\n+\n+  @Test\n+  fun `retrieveHeaders produces a Map with all headers provided via passHeaders`() {\n+    val utility = JvmBridgeUtility()\n+    utility.passHeader(\"test-0\".toByteArray(), \"value-0\".toByteArray(), true)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-1\".toByteArray(), false)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-2\".toByteArray(), false)\n+\n+    val headers = utility.retrieveHeaders()\n+    val expectedHeaders = mapOf(\n+      \"test-0\" to listOf(\"value-0\"),\n+      \"test-1\" to listOf(\"value-1\", \"value-2\")\n+    )\n+\n+    assertThat(headers)\n+      .hasSize(2) // Two keys / header name\n+      .usingRecursiveComparison().isEqualTo(expectedHeaders)\n+  }\n+\n+  @Test\n+  fun `validateCount checks if the expected number of header values in the map matches the actual`() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4MzEwMw=="}, "originalCommit": {"oid": "0912b540ca48e862f232ecc5e236cfe4d4b1c96b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzNDczNQ==", "bodyText": "Oh also, I'm fine with splitting up the tests.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1024#discussion_r469534735", "createdAt": "2020-08-12T20:42:30Z", "author": {"login": "goaway"}, "path": "library/java/test/io/envoyproxy/envoymobile/engine/JvmBridgeUtilityTest.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.envoyproxy.envoymobile.engine\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class JvmBridgeUtilityTest {\n+\n+  @Test\n+  fun `retrieveHeaders produces a Map with all headers provided via passHeaders`() {\n+    val utility = JvmBridgeUtility()\n+    utility.passHeader(\"test-0\".toByteArray(), \"value-0\".toByteArray(), true)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-1\".toByteArray(), false)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-2\".toByteArray(), false)\n+\n+    val headers = utility.retrieveHeaders()\n+    val expectedHeaders = mapOf(\n+      \"test-0\" to listOf(\"value-0\"),\n+      \"test-1\" to listOf(\"value-1\", \"value-2\")\n+    )\n+\n+    assertThat(headers)\n+      .hasSize(2) // Two keys / header name\n+      .usingRecursiveComparison().isEqualTo(expectedHeaders)\n+  }\n+\n+  @Test\n+  fun `validateCount checks if the expected number of header values in the map matches the actual`() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4MzEwMw=="}, "originalCommit": {"oid": "0912b540ca48e862f232ecc5e236cfe4d4b1c96b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYzOTU5MA==", "bodyText": "Let's split them up :)\nI think it'll be clearer", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1024#discussion_r469639590", "createdAt": "2020-08-13T01:18:57Z", "author": {"login": "buildbreaker"}, "path": "library/java/test/io/envoyproxy/envoymobile/engine/JvmBridgeUtilityTest.kt", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.envoyproxy.envoymobile.engine\n+\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+\n+class JvmBridgeUtilityTest {\n+\n+  @Test\n+  fun `retrieveHeaders produces a Map with all headers provided via passHeaders`() {\n+    val utility = JvmBridgeUtility()\n+    utility.passHeader(\"test-0\".toByteArray(), \"value-0\".toByteArray(), true)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-1\".toByteArray(), false)\n+    utility.passHeader(\"test-1\".toByteArray(), \"value-2\".toByteArray(), false)\n+\n+    val headers = utility.retrieveHeaders()\n+    val expectedHeaders = mapOf(\n+      \"test-0\" to listOf(\"value-0\"),\n+      \"test-1\" to listOf(\"value-1\", \"value-2\")\n+    )\n+\n+    assertThat(headers)\n+      .hasSize(2) // Two keys / header name\n+      .usingRecursiveComparison().isEqualTo(expectedHeaders)\n+  }\n+\n+  @Test\n+  fun `validateCount checks if the expected number of header values in the map matches the actual`() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4MzEwMw=="}, "originalCommit": {"oid": "0912b540ca48e862f232ecc5e236cfe4d4b1c96b"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 747, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}