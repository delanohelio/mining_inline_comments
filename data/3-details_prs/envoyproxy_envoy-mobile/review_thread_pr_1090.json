{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NTcxMjQ0", "number": 1090, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1NTo1OFrOEkN_mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1MjozOFrOEkvSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDEzNDY2OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1NTo1OFrOHTCDFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODozNzoyN1rOHUX9Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxODU0OQ==", "bodyText": "Are we planning to add an error here or will we silently fail?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r489718549", "createdAt": "2020-09-16T19:55:58Z", "author": {"login": "buildbreaker"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNTE3Nw==", "bodyText": "Options are to fail the request or crash the app. Neither seems terribly ideal, but perhaps neither is silently failing. I hadn't made up my mind here yet.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r489825177", "createdAt": "2020-09-17T00:27:50Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxODU0OQ=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MDExNQ==", "bodyText": "Seems like the place for an assertion? i.e the contract is that if the FilterDataStatus is to continue it is a programming error to have the manager's iteration_mode as anything but ongoing?\nRelated. Can we write API docs for the programming contract that these filters have?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490580115", "createdAt": "2020-09-17T21:46:00Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxODU0OQ=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MzMzNQ==", "bodyText": "^ Yeah, after going through this section in it entirety I think we need some more comments about all the combinations and why we are treating them as we are.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490583335", "createdAt": "2020-09-17T21:53:22Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxODU0OQ=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEyNjA5NA==", "bodyText": "Agreed about public documentation (there's an issue tracking it) - also this is currently captured in the planning doc I shared when we decided on this behavior. Whether and how it's a programming error is something I'm still ambivalent about. We could also generate an error response, too. Or do nothing here, and let Envoy do whatever it does when requests/responses try to forward invalid state. I'm going to make this a TODO I think for now.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r491126094", "createdAt": "2020-09-18T18:37:27Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxODU0OQ=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NDE0MDQ3OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxOTo1Nzo0MlrOHTCGrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMDoyODowNVrOHTIj6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxOTQ3MQ==", "bodyText": "Do we use the no buffer variant here because the data is being buffered in this filter?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r489719471", "createdAt": "2020-09-16T19:57:42Z", "author": {"login": "buildbreaker"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTgyNTI1Nw==", "bodyText": "Yes, that's correct.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r489825257", "createdAt": "2020-09-17T00:28:05Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTcxOTQ3MQ=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU0MzM5OnYy", "diffSide": "RIGHT", "path": "library/common/buffer/utility.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozNTozOVrOHT2XMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozNTozOVrOHT2XMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NTY2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @param data, the Buffer::Instance to transform.\n          \n          \n            \n             * @param data, the Buffer::Instance to copy from.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490575667", "createdAt": "2020-09-17T21:35:39Z", "author": {"login": "junr03"}, "path": "library/common/buffer/utility.h", "diffHunk": "@@ -22,6 +22,13 @@ Buffer::InstancePtr toInternalData(envoy_data data);\n  */\n envoy_data toBridgeData(Buffer::Instance&);\n \n+/**\n+ * Copy from Buffer::Instance to envoy_data.\n+ * @param data, the Buffer::Instance to transform.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU0NDA0OnYy", "diffSide": "RIGHT", "path": "library/common/buffer/utility.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozNTo1MVrOHT2Xmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTozNTo1MVrOHT2Xmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NTc3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @return envoy_data, the 1:1 transformation of the Buffer::Instance param.\n          \n          \n            \n             * @return envoy_data, the 1:1 copy of the Buffer::Instance param.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490575770", "createdAt": "2020-09-17T21:35:51Z", "author": {"login": "junr03"}, "path": "library/common/buffer/utility.h", "diffHunk": "@@ -22,6 +22,13 @@ Buffer::InstancePtr toInternalData(envoy_data data);\n  */\n envoy_data toBridgeData(Buffer::Instance&);\n \n+/**\n+ * Copy from Buffer::Instance to envoy_data.\n+ * @param data, the Buffer::Instance to transform.\n+ * @return envoy_data, the 1:1 transformation of the Buffer::Instance param.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU1NjU0OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0MDowMFrOHT2e9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyNDozNlrOHUDG-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NzY1Mw==", "bodyText": "nit: The filter manager in envoy defines this as IterationState. Should we keep the same language here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490577653", "createdAt": "2020-09-17T21:40:00Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -29,6 +29,8 @@ class PlatformBridgeFilterConfig {\n \n typedef std::shared_ptr<PlatformBridgeFilterConfig> PlatformBridgeFilterConfigSharedPtr;\n \n+enum class IterationMode { Ongoing, Stopped };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3ODMwNQ==", "bodyText": "Similarly internally Ongoing/Continue?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490578305", "createdAt": "2020-09-17T21:41:39Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -29,6 +29,8 @@ class PlatformBridgeFilterConfig {\n \n typedef std::shared_ptr<PlatformBridgeFilterConfig> PlatformBridgeFilterConfigSharedPtr;\n \n+enum class IterationMode { Ongoing, Stopped };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NzY1Mw=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4NDUwNg==", "bodyText": "Given that we now have a Resume status, I felt Ongoing was a bit clearer. Iteration will be ongoing or iteration will be stopped. I'm fine with IterationState though.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490784506", "createdAt": "2020-09-18T08:24:36Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -29,6 +29,8 @@ class PlatformBridgeFilterConfig {\n \n typedef std::shared_ptr<PlatformBridgeFilterConfig> PlatformBridgeFilterConfigSharedPtr;\n \n+enum class IterationMode { Ongoing, Stopped };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3NzY1Mw=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU2NTA5OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0MzoyNlrOHT2kUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxODo1MjoxN1rOHUYX2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3OTAyNQ==", "bodyText": "maybe this will become clear later, but why is this a copy rather than a drain like before?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490579025", "createdAt": "2020-09-17T21:43:26Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MzUwOQ==", "bodyText": "When the buffer is unmodified, we shouldn't be draining Envoy's buffer. Per our discussed API, we now explicitly disallow the buffer to be modified in any state other than Continue or Resume.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490783509", "createdAt": "2020-09-18T08:22:52Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3OTAyNQ=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzMjg4OA==", "bodyText": "There are also other ways we could potentially handle this, but for now, this is expedient and has no real downside since transform was doing a copy anyways.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r491132888", "createdAt": "2020-09-18T18:52:17Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU3OTAyNQ=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU3NTU1OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0NzowOVrOHT2qfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0NzowOVrOHT2qfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MDYwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  // Data has already have been buffered.\n          \n          \n            \n                  // Data has already have been buffered by the PlatformBridgeFilter.\n          \n      \n    \n    \n  \n\nJust want something more explicit about whose responsibility it is to buffer", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490580606", "createdAt": "2020-09-17T21:47:09Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU4MDUxOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo0ODo1NVrOHT2tsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxOTo0NjoxNlrOHVf7UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MTQyNA==", "bodyText": "convention is to use NOT_REACHED_GCOVR_EXCL_LINE. You can leave a comment above why the default should not be reached.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490581424", "createdAt": "2020-09-17T21:48:55Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.\n+      status = Http::FilterDataStatus::StopIterationNoBuffer;\n+    } else {\n+      // Data will be buffered on return.\n+      iteration_mode_ = IterationMode::Stopped;\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationNoBuffer:\n+    // In this context all previously buffered data can/should be dropped.\n+    if (internal_buffer) {\n+      internal_buffer->drain(internal_buffer->length());\n+    }\n+    iteration_mode_ = IterationMode::Stopped;\n+    break;\n+  default:\n+    PANIC(\"unsupported status for platform filters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTEzNDkzNQ==", "bodyText": "Actually, the default can be reached - we haven't enumerated all statuses Envoy defines, and a truly strange implementation of a filter could try to break things here. I think the assertion is maybe warranted?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r491134935", "createdAt": "2020-09-18T18:56:47Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.\n+      status = Http::FilterDataStatus::StopIterationNoBuffer;\n+    } else {\n+      // Data will be buffered on return.\n+      iteration_mode_ = IterationMode::Stopped;\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationNoBuffer:\n+    // In this context all previously buffered data can/should be dropped.\n+    if (internal_buffer) {\n+      internal_buffer->drain(internal_buffer->length());\n+    }\n+    iteration_mode_ = IterationMode::Stopped;\n+    break;\n+  default:\n+    PANIC(\"unsupported status for platform filters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MTQyNA=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIwNjYzNA==", "bodyText": "@goaway, under the hood NOT_REACHED_GCOVR_EXCL_LINE panics. It doesn't mean that it cannot be reached, it means that if it reaches it is an error.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r491206634", "createdAt": "2020-09-18T21:49:59Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.\n+      status = Http::FilterDataStatus::StopIterationNoBuffer;\n+    } else {\n+      // Data will be buffered on return.\n+      iteration_mode_ = IterationMode::Stopped;\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationNoBuffer:\n+    // In this context all previously buffered data can/should be dropped.\n+    if (internal_buffer) {\n+      internal_buffer->drain(internal_buffer->length());\n+    }\n+    iteration_mode_ = IterationMode::Stopped;\n+    break;\n+  default:\n+    PANIC(\"unsupported status for platform filters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MTQyNA=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMwNTIzMw==", "bodyText": "^ bump on this", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r492305233", "createdAt": "2020-09-21T19:46:16Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.\n+      status = Http::FilterDataStatus::StopIterationNoBuffer;\n+    } else {\n+      // Data will be buffered on return.\n+      iteration_mode_ = IterationMode::Stopped;\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationNoBuffer:\n+    // In this context all previously buffered data can/should be dropped.\n+    if (internal_buffer) {\n+      internal_buffer->drain(internal_buffer->length());\n+    }\n+    iteration_mode_ = IterationMode::Stopped;\n+    break;\n+  default:\n+    PANIC(\"unsupported status for platform filters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MTQyNA=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTU5MDQwOnYy", "diffSide": "LEFT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTo1MjozOVrOHT2z2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODoyMDozMVrOHUC-IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MzAwMA==", "bodyText": "hmmm were we double draining before? Once in toBridge data and once here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490583000", "createdAt": "2020-09-17T21:52:39Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.\n+      status = Http::FilterDataStatus::StopIterationNoBuffer;\n+    } else {\n+      // Data will be buffered on return.\n+      iteration_mode_ = IterationMode::Stopped;\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationNoBuffer:\n+    // In this context all previously buffered data can/should be dropped.\n+    if (internal_buffer) {\n+      internal_buffer->drain(internal_buffer->length());\n+    }\n+    iteration_mode_ = IterationMode::Stopped;\n+    break;\n+  default:\n+    PANIC(\"unsupported status for platform filters\");\n+  }\n+\n   // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n   // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n   // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  data.drain(data.length());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc4MjI0MQ==", "bodyText": "Yes, we were double draining before. Which was benign, but not ideal.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1090#discussion_r490782241", "createdAt": "2020-09-18T08:20:31Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -81,20 +82,59 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n }\n \n Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool end_stream,\n+                                                    Buffer::Instance* internal_buffer,\n                                                     envoy_filter_on_data_f on_data) {\n   // Allow nullptr to act as no-op.\n   if (on_data == nullptr) {\n     return Http::FilterDataStatus::Continue;\n   }\n \n-  envoy_data in_data = Buffer::Utility::toBridgeData(data);\n+  envoy_data in_data;\n+\n+  if (iteration_mode_ == IterationMode::Stopped && internal_buffer &&\n+      internal_buffer->length() > 0) {\n+    // Pre-emptively buffer data to present aggregate to platform.\n+    internal_buffer->move(data);\n+    in_data = Buffer::Utility::copyToBridgeData(*internal_buffer);\n+  } else {\n+    in_data = Buffer::Utility::copyToBridgeData(data);\n+  }\n+\n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n   Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n+  switch (status) {\n+  case Http::FilterDataStatus::Continue:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Error: iteration must be Resumed first.\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationAndBuffer:\n+    if (iteration_mode_ == IterationMode::Stopped) {\n+      // Data has already have been buffered.\n+      status = Http::FilterDataStatus::StopIterationNoBuffer;\n+    } else {\n+      // Data will be buffered on return.\n+      iteration_mode_ = IterationMode::Stopped;\n+    }\n+    break;\n+  case Http::FilterDataStatus::StopIterationNoBuffer:\n+    // In this context all previously buffered data can/should be dropped.\n+    if (internal_buffer) {\n+      internal_buffer->drain(internal_buffer->length());\n+    }\n+    iteration_mode_ = IterationMode::Stopped;\n+    break;\n+  default:\n+    PANIC(\"unsupported status for platform filters\");\n+  }\n+\n   // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n   // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n   // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  data.drain(data.length());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU4MzAwMA=="}, "originalCommit": {"oid": "2472fdba601d2a74d6e72aec54cf7de8aef93579"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 617, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}