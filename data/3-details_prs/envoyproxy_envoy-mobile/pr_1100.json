{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3OTgwMTE0", "number": 1100, "title": "filters: support new platform ResumeIteration status", "bodyText": "Description: Adds support for resuming iteration to platform filters via a new *ResumeIteration filter status. The API for platform filters requires all HTTP entities that should be forwarded to be attached to a result status of a filter invocation. When iteration is stopped, previous entities that were not forwarded may now be attached to the special ResumeIteration status, e.g., pending headers might be attached to ResumeIteration returned during an on-data invocation. See code documentation for additional detail. Full API documentation will be included in an upcoming PR.\nRisk Level: Moderate\nTesting: Unit tests\nSigned-off-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-09-16T13:13:13Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100", "merged": true, "mergeCommit": {"oid": "1e6eeae783294da2de67a46ae667ec63c94e5cc3"}, "closed": true, "closedAt": "2020-09-30T13:28:53Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKF__hABqjM3ODI3MzkzMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN7zJdgH2gAyNDg3OTgwMTE0OmM5YTgwMjgxODBkMDhjMmRmMWQ3ZGFkMGZhN2MwN2EzOWY4MzVhZTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "369112795a041edc6ad6dd9382fc7901e4ebee2c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/369112795a041edc6ad6dd9382fc7901e4ebee2c", "committedDate": "2020-09-18T13:47:39Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "e9f63f880730de47e713671132f26512121f0a4d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/e9f63f880730de47e713671132f26512121f0a4d", "committedDate": "2020-09-18T13:55:43Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9f63f880730de47e713671132f26512121f0a4d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/e9f63f880730de47e713671132f26512121f0a4d", "committedDate": "2020-09-18T13:55:43Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "58e21e922c5ec1c9670921aad0f5bed88434b522", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/58e21e922c5ec1c9670921aad0f5bed88434b522", "committedDate": "2020-09-18T13:57:14Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "58e21e922c5ec1c9670921aad0f5bed88434b522", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/58e21e922c5ec1c9670921aad0f5bed88434b522", "committedDate": "2020-09-18T13:57:14Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "6bf647acedbc50d136292c041e532874bc7769ba", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6bf647acedbc50d136292c041e532874bc7769ba", "committedDate": "2020-09-22T05:06:38Z", "message": "filters: add support for resuming iteration with mutations to pending HTTP entities\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1be28babcd949fda9a5ffb4227530d74c0cc5ea", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b1be28babcd949fda9a5ffb4227530d74c0cc5ea", "committedDate": "2020-09-22T14:54:25Z", "message": "kotlin fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "6c9c47cd12ab9570740056b6fe773147dd3621f8", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6c9c47cd12ab9570740056b6fe773147dd3621f8", "committedDate": "2020-09-22T14:56:40Z", "message": "compiles and passes tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTU0MzEy", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#pullrequestreview-494954312", "createdAt": "2020-09-23T18:49:51Z", "commit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo0OTo1MlrOHW8NPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOToxNzo1OVrOHW9bcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNzE1MA==", "bodyText": "Sorry, at first glance I am a little confused about this status vs continue, which in envoy has the semantics of continuing, but also resuming if previously stopped. Perhaps it will become clear as I read.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493817150", "createdAt": "2020-09-23T18:49:52Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -13,15 +13,34 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+// ResumeIteration is not a status supported by Envoy itself, and only has relevance in Envoy\n+// Mobile's implementation of platform filters.\n+//\n+// Regarding enum values, the C++11 standard (7.2/2) states:\n+//   If the first enumerator has no initializer, the value of the corresponding constant is zero.\n+//   An enumerator-definition without an initializer gives the enumerator the value obtained by\n+//   increasing the value of the previous enumerator by one.\n+//\n+// Creating a new return status like this is brittle, but at least somewhat more resilient to\n+// a new status being added in Envoy, since it won't overlap as long as the new status is added\n+// rather than prepended.\n+const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusResumeIteration =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxODc4Nw==", "bodyText": "Why change this file to another header?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493818787", "createdAt": "2020-09-23T18:51:41Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/BUILD", "diffHunk": "@@ -10,7 +10,7 @@ api_proto_package()\n envoy_cc_library(\n     name = \"platform_bridge_filter_lib\",\n     srcs = [\n-        \"c_types.cc\",\n+        \"c_type_definitions.h\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMTY4Nw==", "bodyText": "I think we should put this in the header utility.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493821687", "createdAt": "2020-09-23T18:54:39Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -56,6 +57,16 @@ void PlatformBridgeFilter::onDestroy() {\n   platform_filter_.instance_context = nullptr;\n }\n \n+void PlatformBridgeFilter::replaceHeaders(Http::HeaderMap& headers, envoy_headers c_headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyNTI5OA==", "bodyText": "I am confused who would flush this, since a particular filter should not have any calls past trailers?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493825298", "createdAt": "2020-09-23T18:58:12Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -189,36 +248,56 @@ Http::FilterDataStatus PlatformBridgeFilter::decodeData(Buffer::Instance& data,\n     });\n   }\n \n-  return onData(data, end_stream, internal_buffer, platform_filter_.on_request_data);\n+  return onData(data, end_stream, internal_buffer, &pending_request_headers_,\n+                platform_filter_.on_request_data);\n }\n \n-Http::FilterTrailersStatus PlatformBridgeFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n+Http::FilterDataStatus PlatformBridgeFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n   // Delegate to shared implementation for request and response path.\n-  return onTrailers(trailers, platform_filter_.on_request_trailers);\n-}\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (encoder_callbacks_->encodingBuffer()) {\n+    encoder_callbacks_->modifyEncodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n \n-Http::FilterHeadersStatus PlatformBridgeFilter::encodeHeaders(Http::ResponseHeaderMap& headers,\n-                                                              bool end_stream) {\n-  // Delegate to shared implementation for request and response path.\n-  return onHeaders(headers, end_stream, platform_filter_.on_response_headers);\n+  return onData(data, end_stream, internal_buffer, &pending_response_headers_,\n+                platform_filter_.on_response_data);\n }\n \n-Http::FilterDataStatus PlatformBridgeFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n+Http::FilterTrailersStatus PlatformBridgeFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n   // Delegate to shared implementation for request and response path.\n   Buffer::Instance* internal_buffer = nullptr;\n-  if (encoder_callbacks_->encodingBuffer()) {\n-    encoder_callbacks_->modifyEncodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+  if (decoder_callbacks_->decodingBuffer()) {\n+    decoder_callbacks_->modifyDecodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n       internal_buffer = &mutable_buffer;\n     });\n   }\n \n-  return onData(data, end_stream, internal_buffer, platform_filter_.on_response_data);\n+  auto status = onTrailers(trailers, internal_buffer, &pending_request_headers_,\n+                           platform_filter_.on_request_trailers);\n+  if (status == Http::FilterTrailersStatus::StopIteration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyODA2NQ==", "bodyText": "Can we change this to NOT_REACHED_GCOVR_EXCL_LINE? We can add a new macro for NOT_REACHED that takes a string if we want to modify the message. Same with everywhere else.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493828065", "createdAt": "2020-09-23T19:01:04Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -66,31 +77,33 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n   envoy_headers in_headers = Http::Utility::toBridgeHeaders(headers);\n   envoy_filter_headers_status result =\n       on_headers(in_headers, end_stream, platform_filter_.instance_context);\n-  Http::FilterHeadersStatus status = static_cast<Http::FilterHeadersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable headers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  headers.clear();\n-  for (envoy_header_size_t i = 0; i < result.headers.length; i++) {\n-    headers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.headers.headers[i].key)),\n-        Http::Utility::convertToString(result.headers.headers[i].value));\n+\n+  switch (result.status) {\n+  case kEnvoyFilterHeadersStatusContinue:\n+    PlatformBridgeFilter::replaceHeaders(headers, result.headers);\n+    return Http::FilterHeadersStatus::Continue;\n+\n+  case kEnvoyFilterHeadersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterHeadersStatus::StopIteration;\n+\n+  default:\n+    PANIC(\"invalid filter state: unsupported status for platform filters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyODU4NQ==", "bodyText": "Instead of having the if and the panic we could just RELEASE_ASSERT(iteration_state_ != IterationState::Stopped, msg)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493828585", "createdAt": "2020-09-23T19:01:58Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -101,27 +114,26 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n   }\n \n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n-  Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n-  switch (status) {\n-  case Http::FilterDataStatus::Continue:\n+\n+  switch (result.status) {\n+  case kEnvoyFilterDataStatusContinue:\n     if (iteration_state_ == IterationState::Stopped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzMDA3Mg==", "bodyText": "same as above with the release assert", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493830072", "createdAt": "2020-09-23T19:04:38Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzMjE1NQ==", "bodyText": "After looking at onData, I am still confused why we need two different statuses rather than driving difference via the presence of absence of headers to replace (or headers/data in onTrailers). I might just be being dense, but I wonder if we can eliminate the need of another status to support the use case?\nIf we do need the new status, can we write more documentation about it in the filter.cc file?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493832155", "createdAt": "2020-09-23T19:08:32Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -13,15 +13,34 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+// ResumeIteration is not a status supported by Envoy itself, and only has relevance in Envoy\n+// Mobile's implementation of platform filters.\n+//\n+// Regarding enum values, the C++11 standard (7.2/2) states:\n+//   If the first enumerator has no initializer, the value of the corresponding constant is zero.\n+//   An enumerator-definition without an initializer gives the enumerator the value obtained by\n+//   increasing the value of the previous enumerator by one.\n+//\n+// Creating a new return status like this is brittle, but at least somewhat more resilient to\n+// a new status being added in Envoy, since it won't overlap as long as the new status is added\n+// rather than prepended.\n+const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusResumeIteration =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNzE1MA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNjMyNA==", "bodyText": "Why are extra headers only allowed here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493836324", "createdAt": "2020-09-23T19:16:19Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNzE3MA==", "bodyText": "I think I see? In continue iteration the buffer copied is only the current frame, but in resume iteration it is the entire internal buffer?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493837170", "createdAt": "2020-09-23T19:17:59Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -13,15 +13,34 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+// ResumeIteration is not a status supported by Envoy itself, and only has relevance in Envoy\n+// Mobile's implementation of platform filters.\n+//\n+// Regarding enum values, the C++11 standard (7.2/2) states:\n+//   If the first enumerator has no initializer, the value of the corresponding constant is zero.\n+//   An enumerator-definition without an initializer gives the enumerator the value obtained by\n+//   increasing the value of the previous enumerator by one.\n+//\n+// Creating a new return status like this is brittle, but at least somewhat more resilient to\n+// a new status being added in Envoy, since it won't overlap as long as the new status is added\n+// rather than prepended.\n+const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusResumeIteration =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNzE1MA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2OTE2OTk0", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#pullrequestreview-496916994", "createdAt": "2020-09-25T23:55:43Z", "commit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "state": "DISMISSED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzo1NTo0NFrOHYYbHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowNzozMFrOHYYs-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyODAyOQ==", "bodyText": "I think adding inline documentation as to how these are used (similarly to how the values are documented on the platform layer's interfaces) would be helpful for future reference when reading this code", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495328029", "createdAt": "2020-09-25T23:55:44Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -43,13 +56,16 @@ typedef struct {\n typedef int envoy_filter_trailers_status_t;\n extern const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusContinue;\n extern const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusStopIteration;\n+extern const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusResumeIteration;\n \n /**\n  * Compound return type for on-trailers filter invocations.\n  */\n typedef struct {\n   envoy_filter_trailers_status_t status;\n   envoy_headers trailers;\n+  envoy_headers* extra_headers;\n+  envoy_data* extra_data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyOTc2Ng==", "bodyText": "extra_headers is a bit of a misnomer IMO because it's actually replacing the headers rather than adding to them, right?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495329766", "createdAt": "2020-09-26T00:00:10Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyOTk1Nw==", "bodyText": "I think it's worth having this be exhaustive so that if upstream Envoy adds a new iteration state Envoy Mobile won't compile", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495329957", "createdAt": "2020-09-26T00:00:41Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);\n+      *pending_headers = nullptr;\n+      free(result.extra_headers);\n+    }\n+    internal_buffer->drain(internal_buffer->length());\n+    internal_buffer->addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+    return Http::FilterDataStatus::Continue;\n+\n+  default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDMxMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n          \n          \n            \n                  PANIC(\"invalid filter state: ResumeIteration may only be used when filter iteration is \"", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495330312", "createdAt": "2020-09-26T00:01:37Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -159,25 +179,64 @@ PlatformBridgeFilter::onTrailers(Http::HeaderMap& trailers,\n \n   envoy_headers in_trailers = Http::Utility::toBridgeHeaders(trailers);\n   envoy_filter_trailers_status result = on_trailers(in_trailers, platform_filter_.instance_context);\n-  Http::FilterTrailersStatus status = static_cast<Http::FilterTrailersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable trailers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  trailers.clear();\n-  for (envoy_header_size_t i = 0; i < result.trailers.length; i++) {\n-    trailers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.trailers.headers[i].key)),\n-        Http::Utility::convertToString(result.trailers.headers[i].value));\n-  }\n-  // The C envoy_trailers struct can be released now because the trailers have been copied.\n-  release_envoy_headers(result.trailers);\n-  return status;\n+\n+  switch (result.status) {\n+  case kEnvoyFilterTrailersStatusContinue:\n+    if (iteration_state_ == IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDU4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n          \n          \n            \n                  PANIC(\"invalid filter state: ResumeIteration may only be used when filter iteration is \"", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495330588", "createdAt": "2020-09-26T00:02:12Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -159,25 +179,64 @@ PlatformBridgeFilter::onTrailers(Http::HeaderMap& trailers,\n \n   envoy_headers in_trailers = Http::Utility::toBridgeHeaders(trailers);\n   envoy_filter_trailers_status result = on_trailers(in_trailers, platform_filter_.instance_context);\n-  Http::FilterTrailersStatus status = static_cast<Http::FilterTrailersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable trailers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  trailers.clear();\n-  for (envoy_header_size_t i = 0; i < result.trailers.length; i++) {\n-    trailers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.trailers.headers[i].key)),\n-        Http::Utility::convertToString(result.trailers.headers[i].value));\n-  }\n-  // The C envoy_trailers struct can be released now because the trailers have been copied.\n-  release_envoy_headers(result.trailers);\n-  return status;\n+\n+  switch (result.status) {\n+  case kEnvoyFilterTrailersStatusContinue:\n+    if (iteration_state_ == IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    PlatformBridgeFilter::replaceHeaders(trailers, result.trailers);\n+    return Http::FilterTrailersStatus::Continue;\n+\n+  case kEnvoyFilterTrailersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterTrailersStatus::StopIteration;\n+\n+  case kEnvoyFilterTrailersStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDc3Mw==", "bodyText": "extra_data is also a bit deceiving since it's a replacement set of data", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495330773", "createdAt": "2020-09-26T00:02:45Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -159,25 +179,64 @@ PlatformBridgeFilter::onTrailers(Http::HeaderMap& trailers,\n \n   envoy_headers in_trailers = Http::Utility::toBridgeHeaders(trailers);\n   envoy_filter_trailers_status result = on_trailers(in_trailers, platform_filter_.instance_context);\n-  Http::FilterTrailersStatus status = static_cast<Http::FilterTrailersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable trailers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  trailers.clear();\n-  for (envoy_header_size_t i = 0; i < result.trailers.length; i++) {\n-    trailers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.trailers.headers[i].key)),\n-        Http::Utility::convertToString(result.trailers.headers[i].value));\n-  }\n-  // The C envoy_trailers struct can be released now because the trailers have been copied.\n-  release_envoy_headers(result.trailers);\n-  return status;\n+\n+  switch (result.status) {\n+  case kEnvoyFilterTrailersStatusContinue:\n+    if (iteration_state_ == IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    PlatformBridgeFilter::replaceHeaders(trailers, result.trailers);\n+    return Http::FilterTrailersStatus::Continue;\n+\n+  case kEnvoyFilterTrailersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterTrailersStatus::StopIteration;\n+\n+  case kEnvoyFilterTrailersStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);\n+      *pending_headers = nullptr;\n+      free(result.extra_headers);\n+    }\n+    if (result.extra_data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDg0NA==", "bodyText": "Same here regarding default switch statements", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495330844", "createdAt": "2020-09-26T00:02:58Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -159,25 +179,64 @@ PlatformBridgeFilter::onTrailers(Http::HeaderMap& trailers,\n \n   envoy_headers in_trailers = Http::Utility::toBridgeHeaders(trailers);\n   envoy_filter_trailers_status result = on_trailers(in_trailers, platform_filter_.instance_context);\n-  Http::FilterTrailersStatus status = static_cast<Http::FilterTrailersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable trailers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  trailers.clear();\n-  for (envoy_header_size_t i = 0; i < result.trailers.length; i++) {\n-    trailers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.trailers.headers[i].key)),\n-        Http::Utility::convertToString(result.trailers.headers[i].value));\n-  }\n-  // The C envoy_trailers struct can be released now because the trailers have been copied.\n-  release_envoy_headers(result.trailers);\n-  return status;\n+\n+  switch (result.status) {\n+  case kEnvoyFilterTrailersStatusContinue:\n+    if (iteration_state_ == IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    PlatformBridgeFilter::replaceHeaders(trailers, result.trailers);\n+    return Http::FilterTrailersStatus::Continue;\n+\n+  case kEnvoyFilterTrailersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterTrailersStatus::StopIteration;\n+\n+  case kEnvoyFilterTrailersStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);\n+      *pending_headers = nullptr;\n+      free(result.extra_headers);\n+    }\n+    if (result.extra_data) {\n+      internal_buffer->drain(internal_buffer->length());\n+      internal_buffer->addBufferFragment(\n+          *Buffer::BridgeFragment::createBridgeFragment(*result.extra_data));\n+      free(result.extra_data);\n+    }\n+    PlatformBridgeFilter::replaceHeaders(trailers, result.trailers);\n+    return Http::FilterTrailersStatus::Continue;\n+\n+  default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMTIyNA==", "bodyText": "Is passing a null buffer here acceptable? (I assume yes)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495331224", "createdAt": "2020-09-26T00:03:58Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -189,36 +248,56 @@ Http::FilterDataStatus PlatformBridgeFilter::decodeData(Buffer::Instance& data,\n     });\n   }\n \n-  return onData(data, end_stream, internal_buffer, platform_filter_.on_request_data);\n+  return onData(data, end_stream, internal_buffer, &pending_request_headers_,\n+                platform_filter_.on_request_data);\n }\n \n-Http::FilterTrailersStatus PlatformBridgeFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n+Http::FilterDataStatus PlatformBridgeFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n   // Delegate to shared implementation for request and response path.\n-  return onTrailers(trailers, platform_filter_.on_request_trailers);\n-}\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (encoder_callbacks_->encodingBuffer()) {\n+    encoder_callbacks_->modifyEncodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n \n-Http::FilterHeadersStatus PlatformBridgeFilter::encodeHeaders(Http::ResponseHeaderMap& headers,\n-                                                              bool end_stream) {\n-  // Delegate to shared implementation for request and response path.\n-  return onHeaders(headers, end_stream, platform_filter_.on_response_headers);\n+  return onData(data, end_stream, internal_buffer, &pending_response_headers_,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMTk3MA==", "bodyText": "I actually don't see that these references are being cleared - are we assuming they'll be automatically released when the filter is deallocated and that's sufficient?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495331970", "createdAt": "2020-09-26T00:05:49Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -55,15 +55,23 @@ class PlatformBridgeFilter final : public Http::PassThroughFilter,\n   Http::FilterTrailersStatus encodeTrailers(Http::ResponseTrailerMap& trailers) override;\n \n private:\n+  static void replaceHeaders(Http::HeaderMap& headers, envoy_headers c_headers);\n   Http::FilterHeadersStatus onHeaders(Http::HeaderMap& headers, bool end_stream,\n                                       envoy_filter_on_headers_f on_headers);\n   Http::FilterDataStatus onData(Buffer::Instance& data, bool end_stream,\n-                                Buffer::Instance* internal_buffer, envoy_filter_on_data_f on_data);\n+                                Buffer::Instance* internal_buffer,\n+                                Http::HeaderMap** pending_headers, envoy_filter_on_data_f on_data);\n   Http::FilterTrailersStatus onTrailers(Http::HeaderMap& trailers,\n+                                        Buffer::Instance* internal_buffer,\n+                                        Http::HeaderMap** pending_headers,\n                                         envoy_filter_on_trailers_f on_trailers);\n   const std::string filter_name_;\n   IterationState iteration_state_;\n   envoy_http_filter platform_filter_;\n+  Http::HeaderMap* pending_request_headers_{};\n+  Http::HeaderMap* pending_response_headers_{};\n+  Http::HeaderMap* pending_request_trailers_{};\n+  Http::HeaderMap* pending_response_trailers_{};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMjYwMg==", "bodyText": "Below you're using NULL, can we keep these consistent?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495332602", "createdAt": "2020-09-26T00:07:30Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyBridgeUtility.h", "diffHunk": "@@ -3,12 +3,26 @@\n #import \"library/common/types/c_types.h\"\n \n static inline envoy_data toNativeData(NSData *data) {\n+  if (data == nil) {\n+    return envoy_nodata;\n+  }\n+\n   uint8_t *native_bytes = (uint8_t *)safe_malloc(sizeof(uint8_t) * data.length);\n   memcpy(native_bytes, data.bytes, data.length);\n   envoy_data ret = {data.length, native_bytes, free, native_bytes};\n   return ret;\n }\n \n+static inline envoy_data *toNativeDataPtr(NSData *data) {\n+  if (data == nil) {\n+    return nil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ff3659e75c914c86d706aa6c84aab1be6ddbb99", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6ff3659e75c914c86d706aa6c84aab1be6ddbb99", "committedDate": "2020-09-29T00:41:51Z", "message": "filters: add support for resuming iteration with mutations to pending HTTP entities\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e6eef299bccf958c3dc73812de8d56ff7645750", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/5e6eef299bccf958c3dc73812de8d56ff7645750", "committedDate": "2020-09-29T00:41:51Z", "message": "compiles and passes tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c012fa9351e946c8237603655bd78ef06e5a2a3", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/5c012fa9351e946c8237603655bd78ef06e5a2a3", "committedDate": "2020-09-29T00:41:51Z", "message": "syntax and format fix\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d4caa06a7d23e86bc8e26175ad7de53e6e38c1f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3d4caa06a7d23e86bc8e26175ad7de53e6e38c1f", "committedDate": "2020-09-29T00:41:51Z", "message": "ios fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b6e1a29f93796029f220e960b29b1d072f3bff4", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6b6e1a29f93796029f220e960b29b1d072f3bff4", "committedDate": "2020-09-29T00:41:51Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaf2a888ea1368cd6144089b4262d2f027367c0e", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/aaf2a888ea1368cd6144089b4262d2f027367c0e", "committedDate": "2020-09-29T00:41:51Z", "message": "swiftlint\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6afe9d6803082eda872417a9bdfc6f71c0b6a4a6", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6afe9d6803082eda872417a9bdfc6f71c0b6a4a6", "committedDate": "2020-09-29T00:41:51Z", "message": "swiftlint 2\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0914aba75c9cea10c3d93b3bb15fcc3d0c8fc05", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/e0914aba75c9cea10c3d93b3bb15fcc3d0c8fc05", "committedDate": "2020-09-29T01:01:28Z", "message": "change some panics to release assertions\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36e55fddc1d6a183f636bed7a563e8f3deb33414", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/36e55fddc1d6a183f636bed7a563e8f3deb33414", "committedDate": "2020-09-29T01:13:01Z", "message": "use NULL\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09088e73c05229f4f367b934a739e132e80354cf", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/09088e73c05229f4f367b934a739e132e80354cf", "committedDate": "2020-09-29T01:21:53Z", "message": "change 'extra' to 'pending' and add comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/88b0eaaa3d8f09423c873db360cb2390a7f5df63", "committedDate": "2020-09-23T18:36:01Z", "message": "swiftlint 2\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "09088e73c05229f4f367b934a739e132e80354cf", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/09088e73c05229f4f367b934a739e132e80354cf", "committedDate": "2020-09-29T01:21:53Z", "message": "change 'extra' to 'pending' and add comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ce7113ba357a217dcee02ef721c7d393e8ddffb", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6ce7113ba357a217dcee02ef721c7d393e8ddffb", "committedDate": "2020-09-29T03:14:36Z", "message": "additional inline comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf4533228d262eed2ec1a49ffcdf9f44f4a35a9a", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/bf4533228d262eed2ec1a49ffcdf9f44f4a35a9a", "committedDate": "2020-09-29T13:05:25Z", "message": "add tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "954ee8104a4de93a4f97fe102a8b67fa080aeb9f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/954ee8104a4de93a4f97fe102a8b67fa080aeb9f", "committedDate": "2020-09-29T13:05:25Z", "message": "add tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6afb5238aea94945f42a477ba841d78ca3f52a5", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b6afb5238aea94945f42a477ba841d78ca3f52a5", "committedDate": "2020-09-29T13:07:03Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "570121daaa2f582499c0082806e3415d62f78d34", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/570121daaa2f582499c0082806e3415d62f78d34", "committedDate": "2020-09-29T18:35:31Z", "message": "update variable comment\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98d8cee416a5c72cc3814692ca74bc8c44e25d95", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/98d8cee416a5c72cc3814692ca74bc8c44e25d95", "committedDate": "2020-09-29T19:14:06Z", "message": "add tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17778271ccbcf1a2ffa2dfe1b1ddd11ede522a62", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/17778271ccbcf1a2ffa2dfe1b1ddd11ede522a62", "committedDate": "2020-09-29T21:41:12Z", "message": "add tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "154df833d7b3cd2bad8ed357baf810c2c05b41c6", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/154df833d7b3cd2bad8ed357baf810c2c05b41c6", "committedDate": "2020-09-29T21:41:38Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed82982298617c7a3d5671e2065546033193b919", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/ed82982298617c7a3d5671e2065546033193b919", "committedDate": "2020-09-30T00:57:30Z", "message": "fix asan failures in tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5MDIyOTEz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#pullrequestreview-499022913", "createdAt": "2020-09-30T01:07:25Z", "commit": {"oid": "ed82982298617c7a3d5671e2065546033193b919"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "606505ced339eb24fe6edd8c3fa60d6c67e791b6", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/606505ced339eb24fe6edd8c3fa60d6c67e791b6", "committedDate": "2020-09-30T11:39:46Z", "message": "fix tests for asan\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9a8028180d08c2df1d7dad0fa7c07a39f835ae4", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c9a8028180d08c2df1d7dad0fa7c07a39f835ae4", "committedDate": "2020-09-30T12:18:31Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4029, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}