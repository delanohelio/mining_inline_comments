{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2Njk0MzU5", "number": 1138, "title": "java: create native resource management system", "bodyText": "Description: Adds the general-purpose capability for java objects to be associated with and manage native resources tied to the lifecycle of said object. Also introduces filter callbacks as the first use case for this system.\nRisk Level: Moderate\nTesting: Pending (#1139)\nSigned-off-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-10-20T10:58:57Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138", "merged": true, "mergeCommit": {"oid": "463a027db5f39b00e7ccdb58b65b9cb2583b3802"}, "closed": true, "closedAt": "2020-10-21T06:52:31Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUWnJ8AH2gAyNTA2Njk0MzU5OmE5NzE3YTEzZTJjNzFlYjU1NmY5NGMyNmYwMzMzYmNmN2Q4YWM5NDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUhMMBAFqTUxMzIwMTI4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a9717a13e2c71eb556f94c26f0333bcf7d8ac941", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/a9717a13e2c71eb556f94c26f0333bcf7d8ac941", "committedDate": "2020-10-20T10:56:24Z", "message": "java: create native resource management system\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c6ce88fab35852ade638b24060b818953f97c6f", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9c6ce88fab35852ade638b24060b818953f97c6f", "committedDate": "2020-10-20T12:09:28Z", "message": "fix typo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/54a1530db533470a24db502e112d2756d9cbeaaf", "committedDate": "2020-10-20T18:00:13Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDMxMzI2", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#pullrequestreview-513031326", "createdAt": "2020-10-20T18:43:18Z", "commit": {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODo0MzoxOFrOHlMITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozODo0NVrOHlOFCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1ODA5Mg==", "bodyText": "Do we need to add these to the proguard rules?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508758092", "createdAt": "2020-10-20T18:43:18Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyHTTPFilterCallbacksImpl.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+final class EnvoyHTTPFilterCallbacksImpl\n+    implements EnvoyHTTPFilterCallbacks, EnvoyNativeResourceWrapper {\n+\n+  private static final EnvoyNativeResourceReleaser releaseCallbacks = (long handle) -> {\n+    callReleaseCallbacks(handle);\n+  };\n+\n+  private final long callbackHandle;\n+\n+  /**\n+   * @param callbackHandle, native handle for callback execution. This must be eventually passed to\n+                            `callReleaseCallbacks` to release underlying memory.\n+   */\n+  EnvoyHTTPFilterCallbacksImpl(long callbackHandle) { this.callbackHandle = callbackHandle; }\n+\n+  static EnvoyHTTPFilterCallbacksImpl create(long callbackHandle) {\n+    final EnvoyHTTPFilterCallbacksImpl object = new EnvoyHTTPFilterCallbacksImpl(callbackHandle);\n+    EnvoyNativeResourceRegistry.globalRegister(object, callbackHandle, releaseCallbacks);\n+    return object;\n+  }\n+\n+  public void resumeIteration() { callResumeIteration(callbackHandle, this); }\n+\n+  /**\n+   * @param callbackHandle, native handle for callback execution.\n+   * @param object, pass this object so that the JNI retains it, preventing it from potentially\n+   *                being concurrently garbage-collected while the native call is executing.\n+   */\n+  private native void callResumeIteration(long callbackHandle, EnvoyHTTPFilterCallbacksImpl object);\n+\n+  private static native void callReleaseCallbacks(long callbackHandle);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1OTc0NA==", "bodyText": "I think this reads more easily:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private ReferenceQueue\n          \n          \n            \n                  refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n          \n          \n            \n              private Collection refMaintainer; // Maintains references in the object graph while we wait for\n          \n          \n            \n                                                // them to be enqueued.\n          \n          \n            \n              // References are automatically enqueued when the gc flags them as unreachable.\n          \n          \n            \n              private ReferenceQueue refQueue; \n          \n          \n            \n              // Maintains references in the object graph while we wait for\n          \n          \n            \n              // them to be enqueued.\n          \n          \n            \n              private Collection refMaintainer;", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508759744", "createdAt": "2020-10-20T18:44:55Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeMemoryRegistry.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {\n+  SINGLETON;\n+\n+  private ReferenceQueue\n+      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n+  private Collection refMaintainer; // Maintains references in the object graph while we wait for\n+                                    // them to be enqueued.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODE2NQ==", "bodyText": "Could we add a blurb on the responsibilities of this wrapper?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508788165", "createdAt": "2020-10-20T19:35:27Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceWrapper.java", "diffHunk": "@@ -0,0 +1,3 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+interface EnvoyNativeResourceWrapper {}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODQxMw==", "bodyText": "docs for params", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508788413", "createdAt": "2020-10-20T19:35:57Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Set;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {\n+  SINGLETON;\n+\n+  private ReferenceQueue\n+      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n+  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n+                             // be enqueued.\n+  private RefQueueThread\n+      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n+\n+  private class RefQueueThread extends Thread {\n+    public void run() {\n+      EnvoyPhantomRef ref;\n+      while (true) {\n+        try {\n+          ref = (EnvoyPhantomRef)refQueue.remove();\n+        } catch (InterruptedException e) {\n+          continue;\n+        }\n+\n+        ref.releaseResource();\n+        refMaintainer.remove(ref);\n+      }\n+    }\n+  }\n+\n+  private class EnvoyPhantomRef extends PhantomReference<EnvoyNativeResourceWrapper> {\n+    private final EnvoyNativeResourceReleaser releaser;\n+    private final long nativeHandle;\n+\n+    EnvoyPhantomRef(EnvoyNativeResourceWrapper owner, long nativeHandle,\n+                    EnvoyNativeResourceReleaser releaser) {\n+      super(owner, refQueue);\n+      this.nativeHandle = nativeHandle;\n+      this.releaser = releaser;\n+      refQueueThread = new RefQueueThread();\n+      refMaintainer = new ConcurrentHashMap().newKeySet();\n+      refQueueThread.start();\n+    }\n+\n+    void releaseResource() { releaser.release(nativeHandle); }\n+  }\n+\n+  /**\n+   * Register an EnvoyNativeResourceWrapper to schedule cleanup of its native resources when the\n+   * Java object is flagged for collection by the garbage collector.\n+   */\n+  public void register(EnvoyNativeResourceWrapper owner, long nativeHandle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODQ4OQ==", "bodyText": "Docs for params", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508788489", "createdAt": "2020-10-20T19:36:05Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Set;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {\n+  SINGLETON;\n+\n+  private ReferenceQueue\n+      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n+  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n+                             // be enqueued.\n+  private RefQueueThread\n+      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n+\n+  private class RefQueueThread extends Thread {\n+    public void run() {\n+      EnvoyPhantomRef ref;\n+      while (true) {\n+        try {\n+          ref = (EnvoyPhantomRef)refQueue.remove();\n+        } catch (InterruptedException e) {\n+          continue;\n+        }\n+\n+        ref.releaseResource();\n+        refMaintainer.remove(ref);\n+      }\n+    }\n+  }\n+\n+  private class EnvoyPhantomRef extends PhantomReference<EnvoyNativeResourceWrapper> {\n+    private final EnvoyNativeResourceReleaser releaser;\n+    private final long nativeHandle;\n+\n+    EnvoyPhantomRef(EnvoyNativeResourceWrapper owner, long nativeHandle,\n+                    EnvoyNativeResourceReleaser releaser) {\n+      super(owner, refQueue);\n+      this.nativeHandle = nativeHandle;\n+      this.releaser = releaser;\n+      refQueueThread = new RefQueueThread();\n+      refMaintainer = new ConcurrentHashMap().newKeySet();\n+      refQueueThread.start();\n+    }\n+\n+    void releaseResource() { releaser.release(nativeHandle); }\n+  }\n+\n+  /**\n+   * Register an EnvoyNativeResourceWrapper to schedule cleanup of its native resources when the\n+   * Java object is flagged for collection by the garbage collector.\n+   */\n+  public void register(EnvoyNativeResourceWrapper owner, long nativeHandle,\n+                       EnvoyNativeResourceReleaser releaser) {\n+    EnvoyPhantomRef ref = new EnvoyPhantomRef(owner, nativeHandle, releaser);\n+    refMaintainer.add(ref);\n+  }\n+\n+  public static void globalRegister(EnvoyNativeResourceWrapper owner, long nativeHandle,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4OTY5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private ReferenceQueue\n          \n          \n            \n                  refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n          \n          \n            \n              private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n          \n          \n            \n                                         // be enqueued.\n          \n          \n            \n              private RefQueueThread\n          \n          \n            \n                  refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.\n          \n          \n            \n              // References are automatically enqueued when the gc flags them as unreachable.\n          \n          \n            \n              private ReferenceQueue refQueue;\n          \n          \n            \n            \n          \n          \n            \n              // Maintains references in the object graph while we wait for them to\n          \n          \n            \n              // be enqueued.\n          \n          \n            \n              private Set refMaintainer;\n          \n          \n            \n            \n          \n          \n            \n              // Blocks on the reference queue and calls the releaser of queued references.\n          \n          \n            \n              private RefQueueThread refQueueThread;", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508789697", "createdAt": "2020-10-20T19:38:05Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Set;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {\n+  SINGLETON;\n+\n+  private ReferenceQueue\n+      refQueue; // References are automatically enqueued when the gc flags them as unreachable.\n+  private Set refMaintainer; // Maintains references in the object graph while we wait for them to\n+                             // be enqueued.\n+  private RefQueueThread\n+      refQueueThread; // Blocks on the reference queue and calls the releaser of queued references.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc5MDAyNw==", "bodyText": "Is there a reason for this to be an enum?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#discussion_r508790027", "createdAt": "2020-10-20T19:38:45Z", "author": {"login": "buildbreaker"}, "path": "library/java/src/io/envoyproxy/envoymobile/engine/EnvoyNativeResourceRegistry.java", "diffHunk": "@@ -0,0 +1,72 @@\n+package io.envoyproxy.envoymobile.engine;\n+\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.ReferenceQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.Set;\n+\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceReleaser;\n+import io.envoyproxy.envoymobile.engine.EnvoyNativeResourceWrapper;\n+\n+/**\n+ * Central class to manage releasing native resources when wrapper objects are flagged as\n+ * unreachable by the garbage collector.\n+ */\n+public enum EnvoyNativeResourceRegistry {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54a1530db533470a24db502e112d2756d9cbeaaf"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85aace3482ea74d7247816f1448c9ad68caf6926", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/85aace3482ea74d7247816f1448c9ad68caf6926", "committedDate": "2020-10-20T20:14:04Z", "message": "updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cce3471164bdaae2b49d5c6906e58d34906768aa", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/cce3471164bdaae2b49d5c6906e58d34906768aa", "committedDate": "2020-10-20T20:17:04Z", "message": "typo\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMjAxMjg1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1138#pullrequestreview-513201285", "createdAt": "2020-10-20T23:15:54Z", "commit": {"oid": "cce3471164bdaae2b49d5c6906e58d34906768aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4068, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}