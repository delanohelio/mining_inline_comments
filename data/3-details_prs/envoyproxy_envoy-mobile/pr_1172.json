{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NTIxMTkz", "number": 1172, "title": "core: create LocalErrorFilter to map responses to errors", "bodyText": "Description: Creates a filter to handle mapping local responses to errors, instead of baking the logic into the dispatcher. This additionally allows platform filters to receive onError callbacks.\nRisk Level: Moderate\nTesting: Dispatcher integration, Swift integration, unit and manual\nSigned-off-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-11-10T14:18:21Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1172", "merged": true, "mergeCommit": {"oid": "e637c6083bfeaa8c6b4ef3c803ca08de2eccb598"}, "closed": true, "closedAt": "2020-12-17T07:58:23Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddy4jmABqjQwMTIyNjQ0Mzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdm8FvgAH2gAyNTE4NTIxMTkzOjgyOWU2NThkZWQ5ZjcxZTUwMDVjNzZmY2E4OTQwOTI5MDQyNjA0ZTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66047e88a9177b5f44e9aea76aa88b77ffd227bd", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/66047e88a9177b5f44e9aea76aa88b77ffd227bd", "committedDate": "2020-11-12T12:44:31Z", "message": "wip\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "d521bb36a2c3ac1f351a7b0f5a4c8ab602866e19", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/d521bb36a2c3ac1f351a7b0f5a4c8ab602866e19", "committedDate": "2020-11-18T18:57:54Z", "message": "typos\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d521bb36a2c3ac1f351a7b0f5a4c8ab602866e19", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/d521bb36a2c3ac1f351a7b0f5a4c8ab602866e19", "committedDate": "2020-11-18T18:57:54Z", "message": "typos\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "c8f4a176084c8dcaf563435ac9c4b89dba47b6fb", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c8f4a176084c8dcaf563435ac9c4b89dba47b6fb", "committedDate": "2020-11-30T13:52:23Z", "message": "core: create LocalErrorFilter to map responses to errors\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8f4a176084c8dcaf563435ac9c4b89dba47b6fb", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c8f4a176084c8dcaf563435ac9c4b89dba47b6fb", "committedDate": "2020-11-30T13:52:23Z", "message": "core: create LocalErrorFilter to map responses to errors\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "99119c042e9266666b24158de0acff4ac7148fe8", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/99119c042e9266666b24158de0acff4ac7148fe8", "committedDate": "2020-11-30T17:55:57Z", "message": "core: create LocalErrorFilter to map responses to errors\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "11bcc17f7cac32acbb8ad93a81d1f436ce6de685", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/11bcc17f7cac32acbb8ad93a81d1f436ce6de685", "committedDate": "2020-12-03T13:30:31Z", "message": "undo java formatting changes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "35bfc00d10fbf83c453eb3ff0123afbd8248db5e", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/35bfc00d10fbf83c453eb3ff0123afbd8248db5e", "committedDate": "2020-12-05T01:12:55Z", "message": "undo java formatting changes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMzEwOTcw", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1172#pullrequestreview-541310970", "createdAt": "2020-11-30T21:31:08Z", "commit": {"oid": "aa7b7408a959298f9a7d080400c0d34145388695"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQyMTozMTowOVrOH8Oo-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxOTo0OTowOVrOIBzP5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxNjQ3Mw==", "bodyText": "usually done via a runtime field", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1172#discussion_r532916473", "createdAt": "2020-11-30T21:31:09Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/local_error/filter.proto", "diffHunk": "@@ -0,0 +1,7 @@\n+syntax = \"proto3\";\n+\n+package envoymobile.extensions.filters.http.local_error;\n+\n+message LocalError {\n+  bool enabled = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7b7408a959298f9a7d080400c0d34145388695"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NDQ2Ng==", "bodyText": "I know this won't surface to the application because we end up mapping to an on error response. But I wonder if we should use a non 2xx code here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1172#discussion_r538754466", "createdAt": "2020-12-08T19:41:33Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/local_error/filter.cc", "diffHunk": "@@ -0,0 +1,88 @@\n+#include \"library/common/extensions/filters/http/local_error/filter.h\"\n+\n+#include \"envoy/http/codes.h\"\n+#include \"envoy/server/filter_config.h\"\n+\n+#include \"common/http/codes.h\"\n+#include \"common/http/header_map_impl.h\"\n+#include \"common/http/utility.h\"\n+\n+#include \"library/common/http/headers.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Extensions {\n+namespace HttpFilters {\n+namespace LocalError {\n+\n+LocalErrorFilterConfig::LocalErrorFilterConfig(\n+    const envoymobile::extensions::filters::http::local_error::LocalError& proto_config)\n+    : enabled_(proto_config.enabled()) {}\n+\n+LocalErrorFilter::LocalErrorFilter(LocalErrorFilterConfigSharedPtr config) : config_(config) {}\n+\n+Http::FilterHeadersStatus LocalErrorFilter::encodeHeaders(Http::ResponseHeaderMap& headers,\n+                                                          bool end_stream) {\n+  uint64_t response_status = Http::Utility::getResponseStatus(headers);\n+  bool success = Http::CodeUtility::is2xx(response_status);\n+\n+  // TODO: ***HACK*** currently Envoy sends local replies in cases where an error ought to be\n+  // surfaced via the error path. There are ways we can clean up Envoy's local reply path to\n+  // make this possible, but nothing expedient. For the immediate term this is our only real\n+  // option. See https://github.com/lyft/envoy-mobile/issues/460\n+\n+  // Absence of EnvoyUpstreamServiceTime header implies this is a local reply, which we treat as\n+  // a stream error.\n+  if (!success && headers.get(Http::Headers::get().EnvoyUpstreamServiceTime).empty()) {\n+    ENVOY_LOG(debug, \"intercepted local response\");\n+    processingError_ = true;\n+    headers_ = &headers;\n+    mapLocalResponseToError(headers);\n+    return end_stream ? Http::FilterHeadersStatus::Continue\n+                      : Http::FilterHeadersStatus::StopIteration;\n+  }\n+\n+  return Http::FilterHeadersStatus::Continue;\n+}\n+\n+Http::FilterDataStatus LocalErrorFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n+  if (processingError_) {\n+    // We assume the first (and assumed only) data chunk will be a contextual error message.\n+    ASSERT(end_stream,\n+           \"Local responses must end the stream with a single data frame. If Envoy changes \"\n+           \"this expectation, this code needs to be updated.\");\n+    headers_->addCopy(Http::InternalHeaders::get().ErrorMessage, data.toString());\n+    return Http::FilterDataStatus::Continue;\n+  }\n+\n+  return Http::FilterDataStatus::Continue;\n+}\n+\n+void LocalErrorFilter::mapLocalResponseToError(Http::ResponseHeaderMap& headers) {\n+  // Envoy Mobile surfaces non-200 local responses as errors via callbacks rather than an HTTP\n+  // response. Here that response's \"real\" status code is mapped to an Envoy Mobile error code\n+  // which is passed through the response chain as a header. The status code is updated with\n+  // the sentinel value, 218 (\"This is fine\").\n+  switch (Http::Utility::getResponseStatus(headers)) {\n+  case 408:\n+    headers.addCopy(Http::InternalHeaders::get().ErrorCode, std::to_string(ENVOY_REQUEST_TIMEOUT));\n+    break;\n+  case 413:\n+    headers.addCopy(Http::InternalHeaders::get().ErrorCode,\n+                    std::to_string(ENVOY_BUFFER_LIMIT_EXCEEDED));\n+    break;\n+  case 503:\n+    headers.addCopy(Http::InternalHeaders::get().ErrorCode,\n+                    std::to_string(ENVOY_CONNECTION_FAILURE));\n+    break;\n+  default:\n+    headers.addCopy(Http::InternalHeaders::get().ErrorCode, std::to_string(ENVOY_UNDEFINED_ERROR));\n+  }\n+\n+  headers.setStatus(218);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "140e26ecac62f1d29f64ced2202551bac4208bef"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1NzE0NQ==", "bodyText": "related to my comment above re: 218. Should the local error path be counted as success?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1172#discussion_r538757145", "createdAt": "2020-12-08T19:45:46Z", "author": {"login": "junr03"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -35,32 +36,41 @@ void Dispatcher::DirectStreamCallbacks::encodeHeaders(const ResponseHeaderMap& h\n             direct_stream_.stream_handle_, end_stream, headers);\n \n   ASSERT(http_dispatcher_.getStream(direct_stream_.stream_handle_));\n-\n-  uint64_t response_status = Utility::getResponseStatus(headers);\n-  // Track success for later bookkeeping (stream could still be reset).\n-  success_ = CodeUtility::is2xx(response_status);\n-\n   if (end_stream) {\n     closeStream();\n   }\n \n-  // TODO: ***HACK*** currently Envoy sends local replies in cases where an error ought to be\n-  // surfaced via the error path. There are ways we can clean up Envoy's local reply path to\n-  // make this possible, but nothing expedient. For the immediate term this is our only real\n-  // option. See https://github.com/lyft/envoy-mobile/issues/460\n+  uint64_t response_status = Utility::getResponseStatus(headers);\n+\n+  // Presence of internal error header indicates an error that should be surfaced as an\n+  // error callback (rather than an HTTP response).\n+  const auto error_code_header = headers.get(InternalHeaders::get().ErrorCode);\n+  if (!error_code_header.empty()) {\n+    envoy_error_code_t error_code;\n+    bool check = absl::SimpleAtoi(error_code_header[0]->value().getStringView(), &error_code);\n+    RELEASE_ASSERT(check, \"parse error reading error code\");\n+    error_code_ = error_code;\n+\n+    const auto error_message_header = headers.get(InternalHeaders::get().ErrorMessage);\n+    if (!error_message_header.empty()) {\n+      error_message_ =\n+          Buffer::Utility::copyToBridgeData(error_message_header[0]->value().getStringView());\n+    }\n+\n+    uint32_t attempt_count;\n+    if (headers.EnvoyAttemptCount() &&\n+        absl::SimpleAtoi(headers.EnvoyAttemptCount()->value().getStringView(), &attempt_count)) {\n+      error_attempt_count_ = attempt_count;\n+    }\n \n-  // Error path: missing EnvoyUpstreamServiceTime implies this is a local reply, which we treat as\n-  // a stream error.\n-  if (!success_ && headers.get(Headers::get().EnvoyUpstreamServiceTime).empty()) {\n-    ENVOY_LOG(debug, \"[S{}] intercepted local response\", direct_stream_.stream_handle_);\n-    mapLocalResponseToError(headers);\n     if (end_stream) {\n       onError();\n     }\n     return;\n   }\n \n-  // Normal response path.\n+  // Track success for later bookkeeping (stream could still be reset).\n+  success_ = CodeUtility::is2xx(response_status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "140e26ecac62f1d29f64ced2202551bac4208bef"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc1OTE0MA==", "bodyText": "This is the suite where you are going to add more test? Or are you creating a test suite for the filter? Probably both, right?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1172#discussion_r538759140", "createdAt": "2020-12-08T19:49:09Z", "author": {"login": "junr03"}, "path": "test/common/http/dispatcher_test.cc", "diffHunk": "@@ -773,17 +773,29 @@ TEST_F(DispatcherTest, MultipleStreams) {\n   ASSERT_EQ(cc.on_complete_calls, 1);\n }\n \n-TEST_F(DispatcherTest, EnvoyLocalReply) {\n+TEST_F(DispatcherTest, EnvoyLocalReplyNotAnError) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "140e26ecac62f1d29f64ced2202551bac4208bef"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjI0NDA1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1172#pullrequestreview-552624405", "createdAt": "2020-12-15T16:12:56Z", "commit": {"oid": "140e26ecac62f1d29f64ced2202551bac4208bef"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoxMjo1NlrOIGTe9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjoxMjo1NlrOIGTe9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4MTU4OQ==", "bodyText": "Pending this.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1172#discussion_r543481589", "createdAt": "2020-12-15T16:12:56Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/local_error/filter.proto", "diffHunk": "@@ -0,0 +1,7 @@\n+syntax = \"proto3\";\n+\n+package envoymobile.extensions.filters.http.local_error;\n+\n+message LocalError {\n+  bool enabled = 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjkxNjQ3Mw=="}, "originalCommit": {"oid": "aa7b7408a959298f9a7d080400c0d34145388695"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbe5649e719cc467da5f302acd8295070a7dd967", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/dbe5649e719cc467da5f302acd8295070a7dd967", "committedDate": "2020-12-16T18:22:19Z", "message": "core: create LocalErrorFilter to map responses to errors\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "444ed4b1246a7a531a8d510c9e6d8439598025d5", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/444ed4b1246a7a531a8d510c9e6d8439598025d5", "committedDate": "2020-12-16T18:22:19Z", "message": "fixing tests\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "667b7bcb8107584af9a0e961900a516f8bb7498b", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/667b7bcb8107584af9a0e961900a516f8bb7498b", "committedDate": "2020-12-16T18:22:19Z", "message": "swift integration coverage\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad0d11ed23a52750e745a6faf19897156441a4df", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/ad0d11ed23a52750e745a6faf19897156441a4df", "committedDate": "2020-12-16T18:22:19Z", "message": "dispatcher integration coverage\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56c6663ce9b0a963380304377e7abf1f6d197dac", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/56c6663ce9b0a963380304377e7abf1f6d197dac", "committedDate": "2020-12-16T18:22:19Z", "message": "swiftlint\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "108b10e0e30994ae97cff38977d5d467c1cbcd4b", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/108b10e0e30994ae97cff38977d5d467c1cbcd4b", "committedDate": "2020-12-16T18:22:19Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "470d027dc11d6254cb31bf90a5dbc785fc0fd34c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/470d027dc11d6254cb31bf90a5dbc785fc0fd34c", "committedDate": "2020-12-16T18:22:19Z", "message": "undo java formatting changes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b1d6251de9af1c7b5b5f056b4e330856091987e", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/0b1d6251de9af1c7b5b5f056b4e330856091987e", "committedDate": "2020-12-16T18:22:19Z", "message": "asan fix\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56b0ab4b3d79ceecfee162898a6c41d0a59e730b", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/56b0ab4b3d79ceecfee162898a6c41d0a59e730b", "committedDate": "2020-12-16T18:22:19Z", "message": "remove enabled flag; fix test\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "140e26ecac62f1d29f64ced2202551bac4208bef", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/140e26ecac62f1d29f64ced2202551bac4208bef", "committedDate": "2020-12-07T18:30:10Z", "message": "asan fix\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "56b0ab4b3d79ceecfee162898a6c41d0a59e730b", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/56b0ab4b3d79ceecfee162898a6c41d0a59e730b", "committedDate": "2020-12-16T18:22:19Z", "message": "remove enabled flag; fix test\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c72cd8abfc7a494cc4a7b899b4a6c44bffe96dae", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c72cd8abfc7a494cc4a7b899b4a6c44bffe96dae", "committedDate": "2020-12-16T18:25:28Z", "message": "format\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzOTcwODgz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1172#pullrequestreview-553970883", "createdAt": "2020-12-16T18:30:50Z", "commit": {"oid": "c72cd8abfc7a494cc4a7b899b4a6c44bffe96dae"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "829e658ded9f71e5005c76fca8940929042604e0", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/829e658ded9f71e5005c76fca8940929042604e0", "committedDate": "2020-12-17T04:46:56Z", "message": "fix integration test\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3901, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}