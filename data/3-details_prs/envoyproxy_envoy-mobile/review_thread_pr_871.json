{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MjQxMTA5", "number": 871, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo1Mzo0M1rOEBigNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoxNDo0OFrOEBivdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDQ5MzMyOnYy", "diffSide": "RIGHT", "path": "library/common/http/dispatcher.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo1Mzo0M1rOGdcpJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo1Mzo0M1rOGdcpJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTE3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // only count the on error if it is dispatchable. Otherwise, the onReset was caused due to a\n          \n          \n            \n                // Only count the on error if it is dispatchable. Otherwise, the onReset was caused due to a", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r433531175", "createdAt": "2020-06-01T22:53:43Z", "author": {"login": "buildbreaker"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -206,6 +219,9 @@ void Dispatcher::DirectStreamCallbacks::onReset() {\n   if (direct_stream_.dispatchable(true)) {\n     ENVOY_LOG(debug, \"[S{}] dispatching to platform remote reset stream\",\n               direct_stream_.stream_handle_);\n+    // only count the on error if it is dispatchable. Otherwise, the onReset was caused due to a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDQ5NTg2OnYy", "diffSide": "RIGHT", "path": "library/common/http/dispatcher.cc", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo1NTowMlrOGdcquA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMToyNDo0OVrOGeEf_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTU3Ng==", "bodyText": "Why not just emit the stat here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r433531576", "createdAt": "2020-06-01T22:55:02Z", "author": {"login": "goaway"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -33,6 +34,13 @@ void Dispatcher::DirectStreamCallbacks::encodeHeaders(const ResponseHeaderMap& h\n   ENVOY_LOG(debug, \"[S{}] response headers for stream (end_stream={}):\\n{}\",\n             direct_stream_.stream_handle_, end_stream, headers);\n \n+  uint64_t response_status = Utility::getResponseStatus(headers);\n+\n+  // Record received status to report success or failure stat in\n+  // Dispatcher::DirectStreamCallbacks::closeRemote. Not reported here to avoid more complexity with\n+  // checking end stream, and the potential for stream reset, thus resulting in mis-reporting.\n+  observed_success_ = CodeUtility::is2xx(response_status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMzMyNQ==", "bodyText": "Looks like this is explained via the docs directly above?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r433533325", "createdAt": "2020-06-01T23:00:43Z", "author": {"login": "rebello95"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -33,6 +34,13 @@ void Dispatcher::DirectStreamCallbacks::encodeHeaders(const ResponseHeaderMap& h\n   ENVOY_LOG(debug, \"[S{}] response headers for stream (end_stream={}):\\n{}\",\n             direct_stream_.stream_handle_, end_stream, headers);\n \n+  uint64_t response_status = Utility::getResponseStatus(headers);\n+\n+  // Record received status to report success or failure stat in\n+  // Dispatcher::DirectStreamCallbacks::closeRemote. Not reported here to avoid more complexity with\n+  // checking end stream, and the potential for stream reset, thus resulting in mis-reporting.\n+  observed_success_ = CodeUtility::is2xx(response_status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTU3Ng=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMzg0Nw==", "bodyText": "@junr03 Can correct me if I'm wrong (maybe that'll be best anyway!) but the intent here is to get a high level stat on when the application side is able to receive a success or failure.\nThe reason we don't track it here is because we could run into other stream events where the application side wouldn't necessarily get a \"complete request\" but we'll be tracking a success here.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r433533847", "createdAt": "2020-06-01T23:02:41Z", "author": {"login": "buildbreaker"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -33,6 +34,13 @@ void Dispatcher::DirectStreamCallbacks::encodeHeaders(const ResponseHeaderMap& h\n   ENVOY_LOG(debug, \"[S{}] response headers for stream (end_stream={}):\\n{}\",\n             direct_stream_.stream_handle_, end_stream, headers);\n \n+  uint64_t response_status = Utility::getResponseStatus(headers);\n+\n+  // Record received status to report success or failure stat in\n+  // Dispatcher::DirectStreamCallbacks::closeRemote. Not reported here to avoid more complexity with\n+  // checking end stream, and the potential for stream reset, thus resulting in mis-reporting.\n+  observed_success_ = CodeUtility::is2xx(response_status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTU3Ng=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzMTc4NA==", "bodyText": "Yep, the intention to not increase here is that we could still receive a reset or a cancel if the on headers call is not final. So instead of increasing in this function in the dispatch block for the terminal case, and in on complete for the other cases I decided to just increase when on complete is dispatched.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r434031784", "createdAt": "2020-06-02T16:58:56Z", "author": {"login": "junr03"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -33,6 +34,13 @@ void Dispatcher::DirectStreamCallbacks::encodeHeaders(const ResponseHeaderMap& h\n   ENVOY_LOG(debug, \"[S{}] response headers for stream (end_stream={}):\\n{}\",\n             direct_stream_.stream_handle_, end_stream, headers);\n \n+  uint64_t response_status = Utility::getResponseStatus(headers);\n+\n+  // Record received status to report success or failure stat in\n+  // Dispatcher::DirectStreamCallbacks::closeRemote. Not reported here to avoid more complexity with\n+  // checking end stream, and the potential for stream reset, thus resulting in mis-reporting.\n+  observed_success_ = CodeUtility::is2xx(response_status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTU3Ng=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MDk0MA==", "bodyText": "I guess what I was getting at is you could emit stream_opened or stream_failed here. If canceled happens later that can still be reported and you (arguably?) have more insight, rather than less, with (maybe?) less complexity since you don't need state. But I guess it all depends on what you actually want captured.\nI missed the comment. :)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r434180940", "createdAt": "2020-06-02T21:17:55Z", "author": {"login": "goaway"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -33,6 +34,13 @@ void Dispatcher::DirectStreamCallbacks::encodeHeaders(const ResponseHeaderMap& h\n   ENVOY_LOG(debug, \"[S{}] response headers for stream (end_stream={}):\\n{}\",\n             direct_stream_.stream_handle_, end_stream, headers);\n \n+  uint64_t response_status = Utility::getResponseStatus(headers);\n+\n+  // Record received status to report success or failure stat in\n+  // Dispatcher::DirectStreamCallbacks::closeRemote. Not reported here to avoid more complexity with\n+  // checking end stream, and the potential for stream reset, thus resulting in mis-reporting.\n+  observed_success_ = CodeUtility::is2xx(response_status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTU3Ng=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4NDE5MA==", "bodyText": "I probably should have been more clear also - it's not that big a deal, and I am fine with the current approach. was mostly just wondering if the extra state was really necessary.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r434184190", "createdAt": "2020-06-02T21:24:49Z", "author": {"login": "goaway"}, "path": "library/common/http/dispatcher.cc", "diffHunk": "@@ -33,6 +34,13 @@ void Dispatcher::DirectStreamCallbacks::encodeHeaders(const ResponseHeaderMap& h\n   ENVOY_LOG(debug, \"[S{}] response headers for stream (end_stream={}):\\n{}\",\n             direct_stream_.stream_handle_, end_stream, headers);\n \n+  uint64_t response_status = Utility::getResponseStatus(headers);\n+\n+  // Record received status to report success or failure stat in\n+  // Dispatcher::DirectStreamCallbacks::closeRemote. Not reported here to avoid more complexity with\n+  // checking end stream, and the potential for stream reset, thus resulting in mis-reporting.\n+  observed_success_ = CodeUtility::is2xx(response_status);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTU3Ng=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDUyMzcwOnYy", "diffSide": "RIGHT", "path": "test/integration/dispatcher_integration_test.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzowOTo1OFrOGdc77A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzowOTo1OFrOGdc77A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNTk4MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              // Set response header status to be non-2xx to test correct stats get charged.\n          \n          \n            \n              // Set response header status to be non-2xx to test that correct stats get charged.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r433535980", "createdAt": "2020-06-01T23:09:58Z", "author": {"login": "buildbreaker"}, "path": "test/integration/dispatcher_integration_test.cc", "diffHunk": "@@ -177,13 +177,107 @@ TEST_P(DispatcherIntegrationTest, Basic) {\n   ASSERT_EQ(cc.on_headers_calls, 1);\n   ASSERT_EQ(cc.on_data_calls, 2);\n   ASSERT_EQ(cc.on_complete_calls, 1);\n+\n+  test_server_->waitForCounterEq(\"http.dispatcher.stream_success\", 1);\n+}\n+\n+TEST_P(DispatcherIntegrationTest, BasicNon2xx) {\n+  ConditionalInitializer ready_ran;\n+  test_server_->server().dispatcher().post([this, &ready_ran]() -> void {\n+    http_dispatcher_.ready(\n+        test_server_->server().dispatcher(), test_server_->statStore(),\n+        test_server_->server().listenerManager().apiListener()->get().http()->get());\n+    ready_ran.setReady();\n+  });\n+  ready_ran.waitReady();\n+\n+  // Set response header status to be non-2xx to test correct stats get charged.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDUyNTE1OnYy", "diffSide": "RIGHT", "path": "test/integration/dispatcher_integration_test.cc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoxMDo0NlrOGdc82g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzowODo0NVrOGd7jCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjIxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    test_server_->server().dispatcher(), test_server_->statStore(),\n          \n          \n            \n                    test_server_->server().dispatcher(), \n          \n          \n            \n                    test_server_->statStore(),", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r433536218", "createdAt": "2020-06-01T23:10:46Z", "author": {"login": "buildbreaker"}, "path": "test/integration/dispatcher_integration_test.cc", "diffHunk": "@@ -114,7 +114,7 @@ TEST_P(DispatcherIntegrationTest, Basic) {\n   ConditionalInitializer ready_ran;\n   test_server_->server().dispatcher().post([this, &ready_ran]() -> void {\n     http_dispatcher_.ready(\n-        test_server_->server().dispatcher(),\n+        test_server_->server().dispatcher(), test_server_->statStore(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzNzUxNA==", "bodyText": "letting clang-format call the shots", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r434037514", "createdAt": "2020-06-02T17:08:45Z", "author": {"login": "junr03"}, "path": "test/integration/dispatcher_integration_test.cc", "diffHunk": "@@ -114,7 +114,7 @@ TEST_P(DispatcherIntegrationTest, Basic) {\n   ConditionalInitializer ready_ran;\n   test_server_->server().dispatcher().post([this, &ready_ran]() -> void {\n     http_dispatcher_.ready(\n-        test_server_->server().dispatcher(),\n+        test_server_->server().dispatcher(), test_server_->statStore(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjIxOA=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDUyNzg1OnYy", "diffSide": "RIGHT", "path": "test/integration/dispatcher_integration_test.cc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoxMjoxNVrOGdc-iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNzowMjowMlrOGd7T8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjY1MQ==", "bodyText": "Maybe we should have a positive case also: Basic2xx?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r433536651", "createdAt": "2020-06-01T23:12:15Z", "author": {"login": "buildbreaker"}, "path": "test/integration/dispatcher_integration_test.cc", "diffHunk": "@@ -177,13 +177,107 @@ TEST_P(DispatcherIntegrationTest, Basic) {\n   ASSERT_EQ(cc.on_headers_calls, 1);\n   ASSERT_EQ(cc.on_data_calls, 2);\n   ASSERT_EQ(cc.on_complete_calls, 1);\n+\n+  test_server_->waitForCounterEq(\"http.dispatcher.stream_success\", 1);\n+}\n+\n+TEST_P(DispatcherIntegrationTest, BasicNon2xx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNzUzOQ==", "bodyText": "Do we want a test case to ensure we are incrementing the stats at the appropriate time based on: https://github.com/lyft/envoy-mobile/pull/871/files#r433531576", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r433537539", "createdAt": "2020-06-01T23:15:26Z", "author": {"login": "buildbreaker"}, "path": "test/integration/dispatcher_integration_test.cc", "diffHunk": "@@ -177,13 +177,107 @@ TEST_P(DispatcherIntegrationTest, Basic) {\n   ASSERT_EQ(cc.on_headers_calls, 1);\n   ASSERT_EQ(cc.on_data_calls, 2);\n   ASSERT_EQ(cc.on_complete_calls, 1);\n+\n+  test_server_->waitForCounterEq(\"http.dispatcher.stream_success\", 1);\n+}\n+\n+TEST_P(DispatcherIntegrationTest, BasicNon2xx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjY1MQ=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAyOTk3NA==", "bodyText": "Maybe we should have a positive case also: Basic2xx?\n\nBasic covers that.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r434029974", "createdAt": "2020-06-02T16:56:06Z", "author": {"login": "junr03"}, "path": "test/integration/dispatcher_integration_test.cc", "diffHunk": "@@ -177,13 +177,107 @@ TEST_P(DispatcherIntegrationTest, Basic) {\n   ASSERT_EQ(cc.on_headers_calls, 1);\n   ASSERT_EQ(cc.on_data_calls, 2);\n   ASSERT_EQ(cc.on_complete_calls, 1);\n+\n+  test_server_->waitForCounterEq(\"http.dispatcher.stream_success\", 1);\n+}\n+\n+TEST_P(DispatcherIntegrationTest, BasicNon2xx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjY1MQ=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzMDU0MA==", "bodyText": "Do we want a test case to ensure we are incrementing the stats at the appropriate time based on\n\nI believe the race test below does that. Let me double check", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r434030540", "createdAt": "2020-06-02T16:57:01Z", "author": {"login": "junr03"}, "path": "test/integration/dispatcher_integration_test.cc", "diffHunk": "@@ -177,13 +177,107 @@ TEST_P(DispatcherIntegrationTest, Basic) {\n   ASSERT_EQ(cc.on_headers_calls, 1);\n   ASSERT_EQ(cc.on_data_calls, 2);\n   ASSERT_EQ(cc.on_complete_calls, 1);\n+\n+  test_server_->waitForCounterEq(\"http.dispatcher.stream_success\", 1);\n+}\n+\n+TEST_P(DispatcherIntegrationTest, BasicNon2xx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjY1MQ=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDAzMzY1MA==", "bodyText": "https://github.com/lyft/envoy-mobile/pull/871/files/bee32cbaa7147d723adc4ccabd810f65192efa65#diff-bb212e49f4cf7a1c832af632465e1440R339 this test shows that even if we received headers if cancelation won out the race we get the right stat", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r434033650", "createdAt": "2020-06-02T17:02:02Z", "author": {"login": "junr03"}, "path": "test/integration/dispatcher_integration_test.cc", "diffHunk": "@@ -177,13 +177,107 @@ TEST_P(DispatcherIntegrationTest, Basic) {\n   ASSERT_EQ(cc.on_headers_calls, 1);\n   ASSERT_EQ(cc.on_data_calls, 2);\n   ASSERT_EQ(cc.on_complete_calls, 1);\n+\n+  test_server_->waitForCounterEq(\"http.dispatcher.stream_success\", 1);\n+}\n+\n+TEST_P(DispatcherIntegrationTest, BasicNon2xx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNjY1MQ=="}, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDUzMjM2OnYy", "diffSide": "RIGHT", "path": "test/integration/dispatcher_integration_test.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoxNDo0OFrOGddBTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMzoxNDo0OFrOGddBTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzNzM1OQ==", "bodyText": "What do you think about the naming BasicResetsIncrementFailures to help describe what behavior we are trying to exercise here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/871#discussion_r433537359", "createdAt": "2020-06-01T23:14:48Z", "author": {"login": "buildbreaker"}, "path": "test/integration/dispatcher_integration_test.cc", "diffHunk": "@@ -177,13 +177,107 @@ TEST_P(DispatcherIntegrationTest, Basic) {\n   ASSERT_EQ(cc.on_headers_calls, 1);\n   ASSERT_EQ(cc.on_data_calls, 2);\n   ASSERT_EQ(cc.on_complete_calls, 1);\n+\n+  test_server_->waitForCounterEq(\"http.dispatcher.stream_success\", 1);\n+}\n+\n+TEST_P(DispatcherIntegrationTest, BasicNon2xx) {\n+  ConditionalInitializer ready_ran;\n+  test_server_->server().dispatcher().post([this, &ready_ran]() -> void {\n+    http_dispatcher_.ready(\n+        test_server_->server().dispatcher(), test_server_->statStore(),\n+        test_server_->server().listenerManager().apiListener()->get().http()->get());\n+    ready_ran.setReady();\n+  });\n+  ready_ran.waitReady();\n+\n+  // Set response header status to be non-2xx to test correct stats get charged.\n+  reinterpret_cast<AutonomousUpstream*>(fake_upstreams_.front().get())\n+      ->setResponseHeaders(std::make_unique<Http::TestResponseHeaderMapImpl>(\n+          Http::TestHeaderMapImpl({{\":status\", \"503\"}, {\"content-length\", \"0\"}})));\n+\n+  envoy_stream_t stream = 1;\n+  // Setup bridge_callbacks to handle the response.\n+  envoy_http_callbacks bridge_callbacks;\n+  ConditionalInitializer terminal_callback;\n+  callbacks_called cc = {0, 0, 0, 0, 0, &terminal_callback};\n+  bridge_callbacks.context = &cc;\n+  bridge_callbacks.on_headers = [](envoy_headers, bool, void* context) -> void {\n+    callbacks_called* cc = static_cast<callbacks_called*>(context);\n+    cc->on_headers_calls++;\n+  };\n+  bridge_callbacks.on_complete = [](void* context) -> void {\n+    callbacks_called* cc = static_cast<callbacks_called*>(context);\n+    cc->on_complete_calls++;\n+    cc->terminal_callback->setReady();\n+  };\n+  bridge_callbacks.on_error = [](envoy_error, void* context) -> void {\n+    callbacks_called* cc = static_cast<callbacks_called*>(context);\n+    cc->on_error_calls++;\n+  };\n+\n+  // Build a set of request headers.\n+  Http::TestRequestHeaderMapImpl headers;\n+  HttpTestUtility::addDefaultHeaders(headers);\n+  envoy_headers c_headers = Http::Utility::toBridgeHeaders(headers);\n+\n+  // Create a stream.\n+  EXPECT_EQ(http_dispatcher_.startStream(stream, bridge_callbacks), ENVOY_SUCCESS);\n+  http_dispatcher_.sendHeaders(stream, c_headers, true);\n+\n+  terminal_callback.waitReady();\n+\n+  ASSERT_EQ(cc.on_error_calls, 0);\n+  ASSERT_EQ(cc.on_headers_calls, 1);\n+  ASSERT_EQ(cc.on_complete_calls, 1);\n+\n+  test_server_->waitForCounterEq(\"http.dispatcher.stream_failure\", 1);\n+}\n+\n+TEST_P(DispatcherIntegrationTest, BasicReset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bee32cbaa7147d723adc4ccabd810f65192efa65"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 810, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}