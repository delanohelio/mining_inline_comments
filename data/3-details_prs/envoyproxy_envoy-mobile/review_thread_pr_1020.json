{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MzAwOTA5", "number": 1020, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMDo1NlrOEXzbww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozMjoxNlrOEYmBEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk1Mzk1OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMDo1NlrOG_zSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDoyOToxMFrOHAcgSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1Mzg1Mg==", "bodyText": "nit: can we check if the string view can be built in place in the call below?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r469553852", "createdAt": "2020-08-12T21:20:56Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && external_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {\n-      static const std::string client = \"client\";\n-      absl::string_view prefix{client};\n       absl::string_view dynamic_elements{elements};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyOTA2Ng==", "bodyText": "I checked it; it doesn't work. In fact, there's another transparent type being created here, which is an const InlinedVector<variant<Envoy::Stats::StatName, Envoy::Stats::DynamicName>.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470229066", "createdAt": "2020-08-13T20:29:10Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && external_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {\n-      static const std::string client = \"client\";\n-      absl::string_view prefix{client};\n       absl::string_view dynamic_elements{elements};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1Mzg1Mg=="}, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk1NzE5OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMTo1OFrOG_zUqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMDo0Njo1MlrOG_35PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NDM0NQ==", "bodyText": "maybe we can asset external_scope_? Because if the server is there but the scope is not that seems odd?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r469554345", "createdAt": "2020-08-12T21:21:58Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && external_scope_) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYyOTI0NQ==", "bodyText": "I chose to assert both because the server_ is still the sentinel for the dispatcher event loop, but the Scope could be constructed independently, and if someone changed it to be, it would silently cause a conditional on server_ to no longer guard against the null pointer deference.\nIn other words, the conditional guards exactly the two pointers that are dereferenced, and it's an unenforced detail that one happens to depend on the other right now.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r469629245", "createdAt": "2020-08-13T00:46:52Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && external_scope_) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NDM0NQ=="}, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk2MTY4OnYy", "diffSide": "RIGHT", "path": "library/common/engine.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMzozN1rOG_zXdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMzozN1rOG_zXdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NTA2MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              Stats::ScopePtr external_scope_;\n          \n          \n            \n              Stats::ScopePtr stats_client_scope_;", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r469555060", "createdAt": "2020-08-12T21:23:37Z", "author": {"login": "junr03"}, "path": "library/common/engine.h", "diffHunk": "@@ -50,6 +50,7 @@ class Engine {\n private:\n   envoy_status_t run(std::string config, std::string log_level);\n \n+  Stats::ScopePtr external_scope_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODQyMTkxOnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo0NjowMlrOHAdDMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODozMTowM1rOHA_CAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzODAwMQ==", "bodyText": "it's weird to have a scalar string called elements, but in any case I suggest passing it by const ref, or better yet, by string_view.\nBut IMO the higher level issue is that if you define your API to inc a counter based on a string, you are going to have to pay the cost of map lookups and/or locks. Is it not possible for you to have the Engine API offer a wrapper to create a handle that the caller can store, to quickly increment a counter?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470238001", "createdAt": "2020-08-13T20:46:02Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0NjczMw==", "bodyText": "I think this is ideally what we'd like to do, but we were going for something quick to iterate on here, and lacked the familiarity with the stats API to figure out how best to accomplish this. Would welcome your perspective on a sounder approach.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470246733", "createdAt": "2020-08-13T21:02:56Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzODAwMQ=="}, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc5NDc1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            void Engine::recordCounter(std::string elements, uint64_t count) {\n          \n          \n            \n            void Engine::recordCounter(const std::string& elements, uint64_t count) {\n          \n      \n    \n    \n  \n\nper @jmarantz.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470794754", "createdAt": "2020-08-14T18:31:03Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzODAwMQ=="}, "originalCommit": {"oid": "5d153a93d7e70211ea5d13703122d08d9a78e671"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODQ0NjUxOnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1MjozNFrOHAdRVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1MjozNFrOHAdRVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTYyMw==", "bodyText": "I would not have expected this to work, but I see the problem. I meant to make DynamicName an explicit but allow the implicit conversion from string literal to string_view.\nCan you change this to:\n  Stats::Utility::counterFromElements(*client_scope_, {Stats::DynamicName(elements)}).add(count);\n\nI'm going to write a quick PR to add the explicit qualifier to the DynamicName constructor which would make the form that you have here invalid.\nThe reason is that it is an anti-pattern to have a ton of DynamicName objects (due to string bloat) so I want to be able to search for them.\nOf course the better solution is really to get callers to create a Counter and keep a handle to it, rather than doing the name lookup all the time, but if you can't do that then please add the explicit qualifier.\nThen also you will not need the string_view declaration above.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470241623", "createdAt": "2020-08-13T20:52:34Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && client_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {\n-      static const std::string client = \"client\";\n-      absl::string_view prefix{client};\n       absl::string_view dynamic_elements{elements};\n-      Stats::Utility::counterFromElements(server_->serverFactoryContext().scope(),\n-                                          {prefix, dynamic_elements})\n-          .add(count);\n+      Stats::Utility::counterFromElements(*client_scope_, {dynamic_elements}).add(count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f81c508e76405a54b83869cc0b90d4276307f5"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODQ0NzcxOnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1Mjo1NVrOHAdSFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxMjoyODowMlrOHAyvbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTgxMw==", "bodyText": "why the post() here rather than just incrementing the counter directly at the call-site?\ncounters are thread-safe, at least once they are looked up.\nMaybe the issue is that the caller is in some thread that Envoy does not know about, so the TLS lookups underneath fail? In that case can you comment?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470241813", "createdAt": "2020-08-13T20:52:55Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && client_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f81c508e76405a54b83869cc0b90d4276307f5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0Nzc0MQ==", "bodyText": "The issue is exactly what you suggest - this call is coming from a random application thread, Envoy has no knowledge of it, and there's no TLS state associated with it. I can definitely add a comment, though that's actually a common theme at this layer of the API.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470247741", "createdAt": "2020-08-13T21:05:03Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && client_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTgxMw=="}, "originalCommit": {"oid": "12f81c508e76405a54b83869cc0b90d4276307f5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0ODY3Nw==", "bodyText": "No worries just add a comment explaining the non-obvious delay.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470248677", "createdAt": "2020-08-13T21:07:02Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && client_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTgxMw=="}, "originalCommit": {"oid": "12f81c508e76405a54b83869cc0b90d4276307f5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0ODY4OQ==", "bodyText": "On the other hand, if you see a way we could accomplish this without the dispatch in a thread-safe manner, would certainly be interested in hearing more.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470248689", "createdAt": "2020-08-13T21:07:03Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && client_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTgxMw=="}, "originalCommit": {"oid": "12f81c508e76405a54b83869cc0b90d4276307f5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDU5MzM5MQ==", "bodyText": "I don't think you can without changes to ThreadLocalStore...so we'll have to be content with a comment.\nAlso when you establish an API for creation of a Counter object for callers, the same issue will be there. You will have to populate the underlying Counter objects from a dispatch.\nI'll defer to @mattklein123 on what the best TLS strategy should be for accessing stat by name outside the context of worker threads. But in the current code I think it has to be done via post.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470593391", "createdAt": "2020-08-14T12:28:02Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -94,14 +95,10 @@ Engine::~Engine() {\n }\n \n void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+  if (server_ && client_scope_) {\n     server_->dispatcher().post([this, elements, count]() -> void {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTgxMw=="}, "originalCommit": {"oid": "12f81c508e76405a54b83869cc0b90d4276307f5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjI0MTQ2OnYy", "diffSide": "RIGHT", "path": "library/common/engine.cc", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxOTozMjoxNlrOHBBD7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQxMzo1NjozOFrOHBLJFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyODAxMg==", "bodyText": "now that I see this in its current form, it's worth a quick check whether 'elements' value gets copied into the lambda provided to post, or whether it holds a ref to an object that might potentially not live long enough for the dispatcher to execute the post.\nIt might not matter in your unit test, where the lifetime of the string you pass to recordCounter is long enough.\nIn any case I think the interface to this function should be a const ref, but you may need to copy it explicitly into storage saved in the lambda. Can you check?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470828012", "createdAt": "2020-08-14T19:32:16Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,14 +94,10 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n-void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+void Engine::recordCounter(const std::string& elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0NTgzNA==", "bodyText": "Thanks @jmarantz, good callout.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470845834", "createdAt": "2020-08-14T20:15:58Z", "author": {"login": "goaway"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,14 +94,10 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n-void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+void Engine::recordCounter(const std::string& elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyODAxMg=="}, "originalCommit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1MDk5OA==", "bodyText": "Yeah good point! \ud83e\udd26 the string could definitely be gone as the copy is just in the stack of the main interface function call. What's the least egregious way to minimize copies:\n\npass down the const char* all the way until we capture a copy in the lambda,\ncreate a unique ptr of a string at the main interface level that we pass down,\nsomething else?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470850998", "createdAt": "2020-08-14T20:29:20Z", "author": {"login": "junr03"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,14 +94,10 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n-void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+void Engine::recordCounter(const std::string& elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyODAxMg=="}, "originalCommit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkyODY2Nw==", "bodyText": "My recommendation:\n\nleave the interface as is (or better yet, witch to a string_view to avoid copying while calling recordValue)\nmake a local copy in the function body (std::string name = elements;)\ncapture that copy by value in the lambda passed to post().", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470928667", "createdAt": "2020-08-15T02:52:10Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,14 +94,10 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n-void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+void Engine::recordCounter(const std::string& elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyODAxMg=="}, "originalCommit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDk5MzE3NQ==", "bodyText": "My apologies, what you have is fine. I tested it with:\nTEST(Foo, Bar) {\n  std::string foo = \"foo\";\n  std::string& fooref = foo;\n  auto test = [fooref]() { EXPECT_EQ(\"foo\", fooref); };\n  test();\n  foo = \"bar\";\n  test();\n}\n\nThat test passes, which means that the ref's value is captured by the lambda.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1020#discussion_r470993175", "createdAt": "2020-08-15T13:56:38Z", "author": {"login": "jmarantz"}, "path": "library/common/engine.cc", "diffHunk": "@@ -93,14 +94,10 @@ Engine::~Engine() {\n   main_thread_.join();\n }\n \n-void Engine::recordCounter(std::string elements, uint64_t count) {\n-  if (server_) {\n+void Engine::recordCounter(const std::string& elements, uint64_t count) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgyODAxMg=="}, "originalCommit": {"oid": "8d6bd382c63e68fa586b64adb12063468b02c9a4"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 743, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}