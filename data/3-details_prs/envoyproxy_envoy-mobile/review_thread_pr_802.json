{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MzY4Mjgx", "number": 802, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMToyODo1MFrOD0g1Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMToyODo1MFrOD0g1Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MzkwNDQzOnYy", "diffSide": "RIGHT", "path": "library/swift/test/EnvoyClientTests.swift", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwMToyODo1MFrOGJfQGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDowMzo1N1rOGJiUrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYwMjM5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  method: .post, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/test\")\n          \n          \n            \n                  method: .post, scheme: \"https\", authority: \"envoyproxy.io\", path: \"/test\")", "url": "https://github.com/envoyproxy/envoy-mobile/pull/802#discussion_r412602393", "createdAt": "2020-04-22T01:28:50Z", "author": {"login": "buildbreaker"}, "path": "library/swift/test/EnvoyClientTests.swift", "diffHunk": "@@ -17,26 +17,163 @@ private final class MockEnvoyEngine: EnvoyEngine {\n }\n \n final class EnvoyClientTests: XCTestCase {\n+  private var envoy: EnvoyClient!\n+\n+  override func setUp() {\n+    super.setUp()\n+    self.envoy = try! EnvoyClientBuilder()\n+      .addEngineType(MockEnvoyEngine.self)\n+      .build()\n+  }\n+\n   override func tearDown() {\n     super.tearDown()\n     MockEnvoyHTTPStream.reset()\n   }\n \n-  func testNonStreamingExtensionSendsRequestDetailsThroughStream() throws {\n-    let requestExpectation = self.expectation(description: \"Sends request\")\n-    let dataExpectation = self.expectation(description: \"Sends data\")\n-    let closeExpectation = self.expectation(description: \"Calls close\")\n+  // MARK: - Streaming\n+\n+  func testStartingAStreamSendsHeaders() {\n+    let expectation = self.expectation(description: \"Sends stream headers\")\n+    let expectedHeaders = [\n+      \"key_1\": [\"value_a\"],\n+      \":method\": [\"POST\"],\n+      \":scheme\": [\"https\"],\n+      \":authority\": [\"www.envoyproxy.io\"],\n+      \":path\": [\"/test\"],\n+    ]\n \n-    let expectedRequest = RequestBuilder(\n-      method: .get, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/docs\")\n+    MockEnvoyHTTPStream.onHeaders = { headers, closeStream in\n+      XCTAssertEqual(expectedHeaders, headers)\n+      XCTAssertFalse(closeStream)\n+      expectation.fulfill()\n+    }\n+\n+    let request = RequestBuilder(\n+      method: .post, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/test\")\n+      .addHeader(name: \"key_1\", value: \"value_a\")\n       .build()\n-    let expectedData = Data([1, 2, 3])\n-    let expectedTrailers = [\"foo\": [\"bar\", \"baz\"]]\n+    _ = self.envoy.start(request, handler: ResponseHandler())\n+    self.wait(for: [expectation], timeout: 0.1)\n+  }\n+\n+  func testSendingDataOnStreamPassesDataToTheUnderlyingStream() {\n+    let expectation = self.expectation(description: \"Sends stream data\")\n \n+    let expectedData = Data([0x0, 0x1, 0x2])\n+    MockEnvoyHTTPStream.onData = { data, closeStream in\n+      XCTAssertEqual(expectedData, data)\n+      XCTAssertFalse(closeStream)\n+      expectation.fulfill()\n+    }\n+\n+    let request = RequestBuilder(\n+      method: .post, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7eec1c8f142b0a4f9c0cb99707a19aa65589085"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYwMjQ0NA==", "bodyText": "?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/802#discussion_r412602444", "createdAt": "2020-04-22T01:28:57Z", "author": {"login": "buildbreaker"}, "path": "library/swift/test/EnvoyClientTests.swift", "diffHunk": "@@ -17,26 +17,163 @@ private final class MockEnvoyEngine: EnvoyEngine {\n }\n \n final class EnvoyClientTests: XCTestCase {\n+  private var envoy: EnvoyClient!\n+\n+  override func setUp() {\n+    super.setUp()\n+    self.envoy = try! EnvoyClientBuilder()\n+      .addEngineType(MockEnvoyEngine.self)\n+      .build()\n+  }\n+\n   override func tearDown() {\n     super.tearDown()\n     MockEnvoyHTTPStream.reset()\n   }\n \n-  func testNonStreamingExtensionSendsRequestDetailsThroughStream() throws {\n-    let requestExpectation = self.expectation(description: \"Sends request\")\n-    let dataExpectation = self.expectation(description: \"Sends data\")\n-    let closeExpectation = self.expectation(description: \"Calls close\")\n+  // MARK: - Streaming\n+\n+  func testStartingAStreamSendsHeaders() {\n+    let expectation = self.expectation(description: \"Sends stream headers\")\n+    let expectedHeaders = [\n+      \"key_1\": [\"value_a\"],\n+      \":method\": [\"POST\"],\n+      \":scheme\": [\"https\"],\n+      \":authority\": [\"www.envoyproxy.io\"],\n+      \":path\": [\"/test\"],\n+    ]\n \n-    let expectedRequest = RequestBuilder(\n-      method: .get, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/docs\")\n+    MockEnvoyHTTPStream.onHeaders = { headers, closeStream in\n+      XCTAssertEqual(expectedHeaders, headers)\n+      XCTAssertFalse(closeStream)\n+      expectation.fulfill()\n+    }\n+\n+    let request = RequestBuilder(\n+      method: .post, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/test\")\n+      .addHeader(name: \"key_1\", value: \"value_a\")\n       .build()\n-    let expectedData = Data([1, 2, 3])\n-    let expectedTrailers = [\"foo\": [\"bar\", \"baz\"]]\n+    _ = self.envoy.start(request, handler: ResponseHandler())\n+    self.wait(for: [expectation], timeout: 0.1)\n+  }\n+\n+  func testSendingDataOnStreamPassesDataToTheUnderlyingStream() {\n+    let expectation = self.expectation(description: \"Sends stream data\")\n \n+    let expectedData = Data([0x0, 0x1, 0x2])\n+    MockEnvoyHTTPStream.onData = { data, closeStream in\n+      XCTAssertEqual(expectedData, data)\n+      XCTAssertFalse(closeStream)\n+      expectation.fulfill()\n+    }\n+\n+    let request = RequestBuilder(\n+      method: .post, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYwMjM5Mw=="}, "originalCommit": {"oid": "f7eec1c8f142b0a4f9c0cb99707a19aa65589085"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1MjcxNg==", "bodyText": "If anything I think this would probably be api.envoyproxy.io, but really could be any string for these tests. I'd prefer to leave it as is unless you feel strongly \ud83e\udd37\u200d\u2642\ufe0f", "url": "https://github.com/envoyproxy/envoy-mobile/pull/802#discussion_r412652716", "createdAt": "2020-04-22T04:03:57Z", "author": {"login": "rebello95"}, "path": "library/swift/test/EnvoyClientTests.swift", "diffHunk": "@@ -17,26 +17,163 @@ private final class MockEnvoyEngine: EnvoyEngine {\n }\n \n final class EnvoyClientTests: XCTestCase {\n+  private var envoy: EnvoyClient!\n+\n+  override func setUp() {\n+    super.setUp()\n+    self.envoy = try! EnvoyClientBuilder()\n+      .addEngineType(MockEnvoyEngine.self)\n+      .build()\n+  }\n+\n   override func tearDown() {\n     super.tearDown()\n     MockEnvoyHTTPStream.reset()\n   }\n \n-  func testNonStreamingExtensionSendsRequestDetailsThroughStream() throws {\n-    let requestExpectation = self.expectation(description: \"Sends request\")\n-    let dataExpectation = self.expectation(description: \"Sends data\")\n-    let closeExpectation = self.expectation(description: \"Calls close\")\n+  // MARK: - Streaming\n+\n+  func testStartingAStreamSendsHeaders() {\n+    let expectation = self.expectation(description: \"Sends stream headers\")\n+    let expectedHeaders = [\n+      \"key_1\": [\"value_a\"],\n+      \":method\": [\"POST\"],\n+      \":scheme\": [\"https\"],\n+      \":authority\": [\"www.envoyproxy.io\"],\n+      \":path\": [\"/test\"],\n+    ]\n \n-    let expectedRequest = RequestBuilder(\n-      method: .get, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/docs\")\n+    MockEnvoyHTTPStream.onHeaders = { headers, closeStream in\n+      XCTAssertEqual(expectedHeaders, headers)\n+      XCTAssertFalse(closeStream)\n+      expectation.fulfill()\n+    }\n+\n+    let request = RequestBuilder(\n+      method: .post, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/test\")\n+      .addHeader(name: \"key_1\", value: \"value_a\")\n       .build()\n-    let expectedData = Data([1, 2, 3])\n-    let expectedTrailers = [\"foo\": [\"bar\", \"baz\"]]\n+    _ = self.envoy.start(request, handler: ResponseHandler())\n+    self.wait(for: [expectation], timeout: 0.1)\n+  }\n+\n+  func testSendingDataOnStreamPassesDataToTheUnderlyingStream() {\n+    let expectation = self.expectation(description: \"Sends stream data\")\n \n+    let expectedData = Data([0x0, 0x1, 0x2])\n+    MockEnvoyHTTPStream.onData = { data, closeStream in\n+      XCTAssertEqual(expectedData, data)\n+      XCTAssertFalse(closeStream)\n+      expectation.fulfill()\n+    }\n+\n+    let request = RequestBuilder(\n+      method: .post, scheme: \"https\", authority: \"www.envoyproxy.io\", path: \"/test\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjYwMjM5Mw=="}, "originalCommit": {"oid": "f7eec1c8f142b0a4f9c0cb99707a19aa65589085"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 909, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}