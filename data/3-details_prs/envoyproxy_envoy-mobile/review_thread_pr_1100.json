{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3OTgwMTE0", "number": 1100, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo0OTo1MlrOEmvEfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowNzozMFrOEnqZnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDUyNTQzOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo0OTo1MlrOHW8NPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo0Njo0MlrOHXDgWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNzE1MA==", "bodyText": "Sorry, at first glance I am a little confused about this status vs continue, which in envoy has the semantics of continuing, but also resuming if previously stopped. Perhaps it will become clear as I read.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493817150", "createdAt": "2020-09-23T18:49:52Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -13,15 +13,34 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+// ResumeIteration is not a status supported by Envoy itself, and only has relevance in Envoy\n+// Mobile's implementation of platform filters.\n+//\n+// Regarding enum values, the C++11 standard (7.2/2) states:\n+//   If the first enumerator has no initializer, the value of the corresponding constant is zero.\n+//   An enumerator-definition without an initializer gives the enumerator the value obtained by\n+//   increasing the value of the previous enumerator by one.\n+//\n+// Creating a new return status like this is brittle, but at least somewhat more resilient to\n+// a new status being added in Envoy, since it won't overlap as long as the new status is added\n+// rather than prepended.\n+const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusResumeIteration =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzMjE1NQ==", "bodyText": "After looking at onData, I am still confused why we need two different statuses rather than driving difference via the presence of absence of headers to replace (or headers/data in onTrailers). I might just be being dense, but I wonder if we can eliminate the need of another status to support the use case?\nIf we do need the new status, can we write more documentation about it in the filter.cc file?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493832155", "createdAt": "2020-09-23T19:08:32Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -13,15 +13,34 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+// ResumeIteration is not a status supported by Envoy itself, and only has relevance in Envoy\n+// Mobile's implementation of platform filters.\n+//\n+// Regarding enum values, the C++11 standard (7.2/2) states:\n+//   If the first enumerator has no initializer, the value of the corresponding constant is zero.\n+//   An enumerator-definition without an initializer gives the enumerator the value obtained by\n+//   increasing the value of the previous enumerator by one.\n+//\n+// Creating a new return status like this is brittle, but at least somewhat more resilient to\n+// a new status being added in Envoy, since it won't overlap as long as the new status is added\n+// rather than prepended.\n+const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusResumeIteration =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNzE1MA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNzE3MA==", "bodyText": "I think I see? In continue iteration the buffer copied is only the current frame, but in resume iteration it is the entire internal buffer?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493837170", "createdAt": "2020-09-23T19:17:59Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -13,15 +13,34 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+// ResumeIteration is not a status supported by Envoy itself, and only has relevance in Envoy\n+// Mobile's implementation of platform filters.\n+//\n+// Regarding enum values, the C++11 standard (7.2/2) states:\n+//   If the first enumerator has no initializer, the value of the corresponding constant is zero.\n+//   An enumerator-definition without an initializer gives the enumerator the value obtained by\n+//   increasing the value of the previous enumerator by one.\n+//\n+// Creating a new return status like this is brittle, but at least somewhat more resilient to\n+// a new status being added in Envoy, since it won't overlap as long as the new status is added\n+// rather than prepended.\n+const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusResumeIteration =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNzE1MA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNDA1Ng==", "bodyText": "@junr03 I think it will be helpful for you to reference the API doc we put together back when we discussed our implementation for advanced filters. It lays out differences between Envoy's native filters and the platform filters. Also the docstrings on the platform implementations of these APIs contain some detail as well, e.g.\nhttps://github.com/lyft/envoy-mobile/blob/main/library/swift/src/filters/AsyncRequestFilter.swift\nhttps://github.com/lyft/envoy-mobile/blob/main/library/swift/src/filters/FilterResumeStatus.swift", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493934056", "createdAt": "2020-09-23T22:39:02Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -13,15 +13,34 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+// ResumeIteration is not a status supported by Envoy itself, and only has relevance in Envoy\n+// Mobile's implementation of platform filters.\n+//\n+// Regarding enum values, the C++11 standard (7.2/2) states:\n+//   If the first enumerator has no initializer, the value of the corresponding constant is zero.\n+//   An enumerator-definition without an initializer gives the enumerator the value obtained by\n+//   increasing the value of the previous enumerator by one.\n+//\n+// Creating a new return status like this is brittle, but at least somewhat more resilient to\n+// a new status being added in Envoy, since it won't overlap as long as the new status is added\n+// rather than prepended.\n+const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusResumeIteration =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNzE1MA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNTY3Ng==", "bodyText": "Sorry actually that's the other side of the coin - I mixed up the PRs because I'm working on the asynchronous side right now. For the synchronous side there's this (e.g.):\nhttps://github.com/lyft/envoy-mobile/blob/main/library/swift/src/filters/FilterDataStatus.swift\nBecause iteration may have been stopped on headers, we need a mechanism for the platform filter to still inform Envoy of what modifications, if any, it wants to perform on headers when iteration is resumed. Same for headers and data, when resumption occurs on trailers.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493935676", "createdAt": "2020-09-23T22:43:37Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -13,15 +13,34 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+// ResumeIteration is not a status supported by Envoy itself, and only has relevance in Envoy\n+// Mobile's implementation of platform filters.\n+//\n+// Regarding enum values, the C++11 standard (7.2/2) states:\n+//   If the first enumerator has no initializer, the value of the corresponding constant is zero.\n+//   An enumerator-definition without an initializer gives the enumerator the value obtained by\n+//   increasing the value of the previous enumerator by one.\n+//\n+// Creating a new return status like this is brittle, but at least somewhat more resilient to\n+// a new status being added in Envoy, since it won't overlap as long as the new status is added\n+// rather than prepended.\n+const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusResumeIteration =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNzE1MA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNjcyOA==", "bodyText": "Part of the reason to have two statuses is that it keeps things simple for the main/golden path. When all you're doing is continuing, you never need to worry about sending previous entities.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493936728", "createdAt": "2020-09-23T22:46:42Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/c_type_definitions.h", "diffHunk": "@@ -13,15 +13,34 @@ const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusContinueAndEndStrea\n const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusStopAllIterationAndBuffer =\n     static_cast<envoy_filter_headers_status_t>(\n         Envoy::Http::FilterHeadersStatus::StopAllIterationAndBuffer);\n+// ResumeIteration is not a status supported by Envoy itself, and only has relevance in Envoy\n+// Mobile's implementation of platform filters.\n+//\n+// Regarding enum values, the C++11 standard (7.2/2) states:\n+//   If the first enumerator has no initializer, the value of the corresponding constant is zero.\n+//   An enumerator-definition without an initializer gives the enumerator the value obtained by\n+//   increasing the value of the previous enumerator by one.\n+//\n+// Creating a new return status like this is brittle, but at least somewhat more resilient to\n+// a new status being added in Envoy, since it won't overlap as long as the new status is added\n+// rather than prepended.\n+const envoy_filter_headers_status_t kEnvoyFilterHeadersStatusResumeIteration =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxNzE1MA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDUzNTkxOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/BUILD", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1MTo0MVrOHW8Tow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo0NDo1N1rOHXDeEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxODc4Nw==", "bodyText": "Why change this file to another header?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493818787", "createdAt": "2020-09-23T18:51:41Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/BUILD", "diffHunk": "@@ -10,7 +10,7 @@ api_proto_package()\n envoy_cc_library(\n     name = \"platform_bridge_filter_lib\",\n     srcs = [\n-        \"c_types.cc\",\n+        \"c_type_definitions.h\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNjE0NA==", "bodyText": "It's not possible to switch on externed constants without compile-time visibility into their defined values. Making this a header allows me to import their actual definitions as part of the only file that needs them at compile time - the filter implementation.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493936144", "createdAt": "2020-09-23T22:44:57Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/BUILD", "diffHunk": "@@ -10,7 +10,7 @@ api_proto_package()\n envoy_cc_library(\n     name = \"platform_bridge_filter_lib\",\n     srcs = [\n-        \"c_types.cc\",\n+        \"c_type_definitions.h\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgxODc4Nw=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDU1NDY4OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1NDozOVrOHW8e9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo0OTo0MlrOHXDkFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMTY4Nw==", "bodyText": "I think we should put this in the header utility.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493821687", "createdAt": "2020-09-23T18:54:39Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -56,6 +57,16 @@ void PlatformBridgeFilter::onDestroy() {\n   platform_filter_.instance_context = nullptr;\n }\n \n+void PlatformBridgeFilter::replaceHeaders(Http::HeaderMap& headers, envoy_headers c_headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzNzY4NA==", "bodyText": "The standard request/response path produces new headers; this is the only place we modify them, and moreover, need to modify them in place. I guess I'm not opposed to it, but I don't see an obvious use for it elsewhere at the moment.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493937684", "createdAt": "2020-09-23T22:49:42Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -56,6 +57,16 @@ void PlatformBridgeFilter::onDestroy() {\n   platform_filter_.instance_context = nullptr;\n }\n \n+void PlatformBridgeFilter::replaceHeaders(Http::HeaderMap& headers, envoy_headers c_headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyMTY4Nw=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDU3NzE0OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxODo1ODoxMlrOHW8tEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1MToxM1rOHXDmMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyNTI5OA==", "bodyText": "I am confused who would flush this, since a particular filter should not have any calls past trailers?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493825298", "createdAt": "2020-09-23T18:58:12Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -189,36 +248,56 @@ Http::FilterDataStatus PlatformBridgeFilter::decodeData(Buffer::Instance& data,\n     });\n   }\n \n-  return onData(data, end_stream, internal_buffer, platform_filter_.on_request_data);\n+  return onData(data, end_stream, internal_buffer, &pending_request_headers_,\n+                platform_filter_.on_request_data);\n }\n \n-Http::FilterTrailersStatus PlatformBridgeFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n+Http::FilterDataStatus PlatformBridgeFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n   // Delegate to shared implementation for request and response path.\n-  return onTrailers(trailers, platform_filter_.on_request_trailers);\n-}\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (encoder_callbacks_->encodingBuffer()) {\n+    encoder_callbacks_->modifyEncodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n \n-Http::FilterHeadersStatus PlatformBridgeFilter::encodeHeaders(Http::ResponseHeaderMap& headers,\n-                                                              bool end_stream) {\n-  // Delegate to shared implementation for request and response path.\n-  return onHeaders(headers, end_stream, platform_filter_.on_response_headers);\n+  return onData(data, end_stream, internal_buffer, &pending_response_headers_,\n+                platform_filter_.on_response_data);\n }\n \n-Http::FilterDataStatus PlatformBridgeFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n+Http::FilterTrailersStatus PlatformBridgeFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n   // Delegate to shared implementation for request and response path.\n   Buffer::Instance* internal_buffer = nullptr;\n-  if (encoder_callbacks_->encodingBuffer()) {\n-    encoder_callbacks_->modifyEncodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+  if (decoder_callbacks_->decodingBuffer()) {\n+    decoder_callbacks_->modifyDecodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n       internal_buffer = &mutable_buffer;\n     });\n   }\n \n-  return onData(data, end_stream, internal_buffer, platform_filter_.on_response_data);\n+  auto status = onTrailers(trailers, internal_buffer, &pending_request_headers_,\n+                           platform_filter_.on_request_trailers);\n+  if (status == Http::FilterTrailersStatus::StopIteration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzODIyNA==", "bodyText": "Filters can stop iteration on trailers and still asynchronously resume iteration later. Consider for instance a filter that buffers an entire request, then kicks off some async side request, then resumes iteration when that side request completes. (We actually internally have some examples of exactly this.)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493938224", "createdAt": "2020-09-23T22:51:13Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -189,36 +248,56 @@ Http::FilterDataStatus PlatformBridgeFilter::decodeData(Buffer::Instance& data,\n     });\n   }\n \n-  return onData(data, end_stream, internal_buffer, platform_filter_.on_request_data);\n+  return onData(data, end_stream, internal_buffer, &pending_request_headers_,\n+                platform_filter_.on_request_data);\n }\n \n-Http::FilterTrailersStatus PlatformBridgeFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n+Http::FilterDataStatus PlatformBridgeFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n   // Delegate to shared implementation for request and response path.\n-  return onTrailers(trailers, platform_filter_.on_request_trailers);\n-}\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (encoder_callbacks_->encodingBuffer()) {\n+    encoder_callbacks_->modifyEncodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n \n-Http::FilterHeadersStatus PlatformBridgeFilter::encodeHeaders(Http::ResponseHeaderMap& headers,\n-                                                              bool end_stream) {\n-  // Delegate to shared implementation for request and response path.\n-  return onHeaders(headers, end_stream, platform_filter_.on_response_headers);\n+  return onData(data, end_stream, internal_buffer, &pending_response_headers_,\n+                platform_filter_.on_response_data);\n }\n \n-Http::FilterDataStatus PlatformBridgeFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n+Http::FilterTrailersStatus PlatformBridgeFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n   // Delegate to shared implementation for request and response path.\n   Buffer::Instance* internal_buffer = nullptr;\n-  if (encoder_callbacks_->encodingBuffer()) {\n-    encoder_callbacks_->modifyEncodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+  if (decoder_callbacks_->decodingBuffer()) {\n+    decoder_callbacks_->modifyDecodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n       internal_buffer = &mutable_buffer;\n     });\n   }\n \n-  return onData(data, end_stream, internal_buffer, platform_filter_.on_response_data);\n+  auto status = onTrailers(trailers, internal_buffer, &pending_request_headers_,\n+                           platform_filter_.on_request_trailers);\n+  if (status == Http::FilterTrailersStatus::StopIteration) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyNTI5OA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 283}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDU5NDE5OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTowMTowNFrOHW834Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1MjozOVrOHXDn4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyODA2NQ==", "bodyText": "Can we change this to NOT_REACHED_GCOVR_EXCL_LINE? We can add a new macro for NOT_REACHED that takes a string if we want to modify the message. Same with everywhere else.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493828065", "createdAt": "2020-09-23T19:01:04Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -66,31 +77,33 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n   envoy_headers in_headers = Http::Utility::toBridgeHeaders(headers);\n   envoy_filter_headers_status result =\n       on_headers(in_headers, end_stream, platform_filter_.instance_context);\n-  Http::FilterHeadersStatus status = static_cast<Http::FilterHeadersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable headers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  headers.clear();\n-  for (envoy_header_size_t i = 0; i < result.headers.length; i++) {\n-    headers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.headers.headers[i].key)),\n-        Http::Utility::convertToString(result.headers.headers[i].value));\n+\n+  switch (result.status) {\n+  case kEnvoyFilterHeadersStatusContinue:\n+    PlatformBridgeFilter::replaceHeaders(headers, result.headers);\n+    return Http::FilterHeadersStatus::Continue;\n+\n+  case kEnvoyFilterHeadersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterHeadersStatus::StopIteration;\n+\n+  default:\n+    PANIC(\"invalid filter state: unsupported status for platform filters\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzODY1OA==", "bodyText": "Is that strictly correct though? I mean this could be reached - we receive the value from a public API.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493938658", "createdAt": "2020-09-23T22:52:39Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -66,31 +77,33 @@ Http::FilterHeadersStatus PlatformBridgeFilter::onHeaders(Http::HeaderMap& heade\n   envoy_headers in_headers = Http::Utility::toBridgeHeaders(headers);\n   envoy_filter_headers_status result =\n       on_headers(in_headers, end_stream, platform_filter_.instance_context);\n-  Http::FilterHeadersStatus status = static_cast<Http::FilterHeadersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable headers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  headers.clear();\n-  for (envoy_header_size_t i = 0; i < result.headers.length; i++) {\n-    headers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.headers.headers[i].key)),\n-        Http::Utility::convertToString(result.headers.headers[i].value));\n+\n+  switch (result.status) {\n+  case kEnvoyFilterHeadersStatusContinue:\n+    PlatformBridgeFilter::replaceHeaders(headers, result.headers);\n+    return Http::FilterHeadersStatus::Continue;\n+\n+  case kEnvoyFilterHeadersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterHeadersStatus::StopIteration;\n+\n+  default:\n+    PANIC(\"invalid filter state: unsupported status for platform filters\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyODA2NQ=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDU5NzUyOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTowMTo1OFrOHW856Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1MzozNVrOHXDpHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyODU4NQ==", "bodyText": "Instead of having the if and the panic we could just RELEASE_ASSERT(iteration_state_ != IterationState::Stopped, msg)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493828585", "createdAt": "2020-09-23T19:01:58Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -101,27 +114,26 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n   }\n \n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n-  Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n-  switch (status) {\n-  case Http::FilterDataStatus::Continue:\n+\n+  switch (result.status) {\n+  case kEnvoyFilterDataStatusContinue:\n     if (iteration_state_ == IterationState::Stopped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzODk3NA==", "bodyText": "Yes, you're absolutely right.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493938974", "createdAt": "2020-09-23T22:53:35Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -101,27 +114,26 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n   }\n \n   envoy_filter_data_status result = on_data(in_data, end_stream, platform_filter_.instance_context);\n-  Http::FilterDataStatus status = static_cast<Http::FilterDataStatus>(result.status);\n-  switch (status) {\n-  case Http::FilterDataStatus::Continue:\n+\n+  switch (result.status) {\n+  case kEnvoyFilterDataStatusContinue:\n     if (iteration_state_ == IterationState::Stopped) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgyODU4NQ=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDYwNjMxOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTowNDozOFrOHW8_uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTowNDozOFrOHW8_uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzMDA3Mg==", "bodyText": "same as above with the release assert", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493830072", "createdAt": "2020-09-23T19:04:38Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDY0NTI1OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOToxNjoxOVrOHW9YJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QyMjo1NDo1MVrOHXDqrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNjMyNA==", "bodyText": "Why are extra headers only allowed here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493836324", "createdAt": "2020-09-23T19:16:19Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzkzOTM3NA==", "bodyText": "They're only allowed where pending headers might still exist. That means onData or onTrailers (or async onResume) when iteration has been previously stopped.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r493939374", "createdAt": "2020-09-23T22:54:51Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNjMyNA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDIxNzk3OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMzo1NTo0NFrOHYYbHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjowMjo1NVrOHY6gvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyODAyOQ==", "bodyText": "I think adding inline documentation as to how these are used (similarly to how the values are documented on the platform layer's interfaces) would be helpful for future reference when reading this code", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495328029", "createdAt": "2020-09-25T23:55:44Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -43,13 +56,16 @@ typedef struct {\n typedef int envoy_filter_trailers_status_t;\n extern const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusContinue;\n extern const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusStopIteration;\n+extern const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusResumeIteration;\n \n /**\n  * Compound return type for on-trailers filter invocations.\n  */\n typedef struct {\n   envoy_filter_trailers_status_t status;\n   envoy_headers trailers;\n+  envoy_headers* extra_headers;\n+  envoy_data* extra_data;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4NjUyNg==", "bodyText": "Inline documentation coming.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495886526", "createdAt": "2020-09-28T12:02:55Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/c_types.h", "diffHunk": "@@ -43,13 +56,16 @@ typedef struct {\n typedef int envoy_filter_trailers_status_t;\n extern const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusContinue;\n extern const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusStopIteration;\n+extern const envoy_filter_trailers_status_t kEnvoyFilterTrailersStatusResumeIteration;\n \n /**\n  * Compound return type for on-trailers filter invocations.\n  */\n typedef struct {\n   envoy_filter_trailers_status_t status;\n   envoy_headers trailers;\n+  envoy_headers* extra_headers;\n+  envoy_data* extra_data;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyODAyOQ=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDIyODU1OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMDoxMFrOHYYh5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjowMjowN1rOHY6fOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyOTc2Ng==", "bodyText": "extra_headers is a bit of a misnomer IMO because it's actually replacing the headers rather than adding to them, right?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495329766", "createdAt": "2020-09-26T00:00:10Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4NjEzNg==", "bodyText": "Yeah, I'll use pending_. I used extra to differentiate between the internal entity that hadn't been sent yet and those attached to the status as \"extra\", but I agree it's probably a confusing choice.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495886136", "createdAt": "2020-09-28T12:02:07Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyOTc2Ng=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDIyOTc0OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMDo0MVrOHYYipQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQwMToxNjo0MlrOHaKG5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyOTk1Nw==", "bodyText": "I think it's worth having this be exhaustive so that if upstream Envoy adds a new iteration state Envoy Mobile won't compile", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495329957", "createdAt": "2020-09-26T00:00:41Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);\n+      *pending_headers = nullptr;\n+      free(result.extra_headers);\n+    }\n+    internal_buffer->drain(internal_buffer->length());\n+    internal_buffer->addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+    return Http::FilterDataStatus::Continue;\n+\n+  default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzE5MDYzMQ==", "bodyText": "Unfortunately we won't be able to get these compile-time guarantees here regardless. C/C++ don't enforce this, and static analysis would miss it too, since we're iterating over a constant set only partially defined in terms of the internal enum (ResumeIteration doesn't map to anything internal).", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r497190631", "createdAt": "2020-09-30T01:16:42Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -133,24 +145,32 @@ Http::FilterDataStatus PlatformBridgeFilter::onData(Buffer::Instance& data, bool\n       internal_buffer->drain(internal_buffer->length());\n     }\n     iteration_state_ = IterationState::Stopped;\n-    break;\n-  default:\n-    PANIC(\"unsupported status for platform filters\");\n-  }\n+    return Http::FilterDataStatus::StopIterationNoBuffer;\n \n-  // TODO(goaway): Current platform implementations expose immutable data, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  if (iteration_state_ == IterationState::Ongoing) {\n-    data.drain(data.length());\n-    data.addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+  case kEnvoyFilterDataStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);\n+      *pending_headers = nullptr;\n+      free(result.extra_headers);\n+    }\n+    internal_buffer->drain(internal_buffer->length());\n+    internal_buffer->addBufferFragment(*Buffer::BridgeFragment::createBridgeFragment(result.data));\n+    return Http::FilterDataStatus::Continue;\n+\n+  default:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMyOTk1Nw=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDIzMTg2OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMTozN1rOHYYkCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMTozN1rOHYYkCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDMxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n          \n          \n            \n                  PANIC(\"invalid filter state: ResumeIteration may only be used when filter iteration is \"", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495330312", "createdAt": "2020-09-26T00:01:37Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -159,25 +179,64 @@ PlatformBridgeFilter::onTrailers(Http::HeaderMap& trailers,\n \n   envoy_headers in_trailers = Http::Utility::toBridgeHeaders(trailers);\n   envoy_filter_trailers_status result = on_trailers(in_trailers, platform_filter_.instance_context);\n-  Http::FilterTrailersStatus status = static_cast<Http::FilterTrailersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable trailers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  trailers.clear();\n-  for (envoy_header_size_t i = 0; i < result.trailers.length; i++) {\n-    trailers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.trailers.headers[i].key)),\n-        Http::Utility::convertToString(result.trailers.headers[i].value));\n-  }\n-  // The C envoy_trailers struct can be released now because the trailers have been copied.\n-  release_envoy_headers(result.trailers);\n-  return status;\n+\n+  switch (result.status) {\n+  case kEnvoyFilterTrailersStatusContinue:\n+    if (iteration_state_ == IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDIzMzY0OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMjoxMlrOHYYlHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMjoxMlrOHYYlHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDU4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n          \n          \n            \n                  PANIC(\"invalid filter state: ResumeIteration may only be used when filter iteration is \"", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495330588", "createdAt": "2020-09-26T00:02:12Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -159,25 +179,64 @@ PlatformBridgeFilter::onTrailers(Http::HeaderMap& trailers,\n \n   envoy_headers in_trailers = Http::Utility::toBridgeHeaders(trailers);\n   envoy_filter_trailers_status result = on_trailers(in_trailers, platform_filter_.instance_context);\n-  Http::FilterTrailersStatus status = static_cast<Http::FilterTrailersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable trailers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  trailers.clear();\n-  for (envoy_header_size_t i = 0; i < result.trailers.length; i++) {\n-    trailers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.trailers.headers[i].key)),\n-        Http::Utility::convertToString(result.trailers.headers[i].value));\n-  }\n-  // The C envoy_trailers struct can be released now because the trailers have been copied.\n-  release_envoy_headers(result.trailers);\n-  return status;\n+\n+  switch (result.status) {\n+  case kEnvoyFilterTrailersStatusContinue:\n+    if (iteration_state_ == IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    PlatformBridgeFilter::replaceHeaders(trailers, result.trailers);\n+    return Http::FilterTrailersStatus::Continue;\n+\n+  case kEnvoyFilterTrailersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterTrailersStatus::StopIteration;\n+\n+  case kEnvoyFilterTrailersStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 193}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDIzNDcxOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMjo0NVrOHYYl1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjowMDozNlrOHY6cWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDc3Mw==", "bodyText": "extra_data is also a bit deceiving since it's a replacement set of data", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495330773", "createdAt": "2020-09-26T00:02:45Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -159,25 +179,64 @@ PlatformBridgeFilter::onTrailers(Http::HeaderMap& trailers,\n \n   envoy_headers in_trailers = Http::Utility::toBridgeHeaders(trailers);\n   envoy_filter_trailers_status result = on_trailers(in_trailers, platform_filter_.instance_context);\n-  Http::FilterTrailersStatus status = static_cast<Http::FilterTrailersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable trailers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  trailers.clear();\n-  for (envoy_header_size_t i = 0; i < result.trailers.length; i++) {\n-    trailers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.trailers.headers[i].key)),\n-        Http::Utility::convertToString(result.trailers.headers[i].value));\n-  }\n-  // The C envoy_trailers struct can be released now because the trailers have been copied.\n-  release_envoy_headers(result.trailers);\n-  return status;\n+\n+  switch (result.status) {\n+  case kEnvoyFilterTrailersStatusContinue:\n+    if (iteration_state_ == IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    PlatformBridgeFilter::replaceHeaders(trailers, result.trailers);\n+    return Http::FilterTrailersStatus::Continue;\n+\n+  case kEnvoyFilterTrailersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterTrailersStatus::StopIteration;\n+\n+  case kEnvoyFilterTrailersStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);\n+      *pending_headers = nullptr;\n+      free(result.extra_headers);\n+    }\n+    if (result.extra_data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4NTQwMQ==", "bodyText": "I'll rename it to pending_data.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495885401", "createdAt": "2020-09-28T12:00:36Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -159,25 +179,64 @@ PlatformBridgeFilter::onTrailers(Http::HeaderMap& trailers,\n \n   envoy_headers in_trailers = Http::Utility::toBridgeHeaders(trailers);\n   envoy_filter_trailers_status result = on_trailers(in_trailers, platform_filter_.instance_context);\n-  Http::FilterTrailersStatus status = static_cast<Http::FilterTrailersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable trailers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  trailers.clear();\n-  for (envoy_header_size_t i = 0; i < result.trailers.length; i++) {\n-    trailers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.trailers.headers[i].key)),\n-        Http::Utility::convertToString(result.trailers.headers[i].value));\n-  }\n-  // The C envoy_trailers struct can be released now because the trailers have been copied.\n-  release_envoy_headers(result.trailers);\n-  return status;\n+\n+  switch (result.status) {\n+  case kEnvoyFilterTrailersStatusContinue:\n+    if (iteration_state_ == IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    PlatformBridgeFilter::replaceHeaders(trailers, result.trailers);\n+    return Http::FilterTrailersStatus::Continue;\n+\n+  case kEnvoyFilterTrailersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterTrailersStatus::StopIteration;\n+\n+  case kEnvoyFilterTrailersStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);\n+      *pending_headers = nullptr;\n+      free(result.extra_headers);\n+    }\n+    if (result.extra_data) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDc3Mw=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDIzNTIzOnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMjo1OFrOHYYmHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMjo1OFrOHYYmHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMDg0NA==", "bodyText": "Same here regarding default switch statements", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495330844", "createdAt": "2020-09-26T00:02:58Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -159,25 +179,64 @@ PlatformBridgeFilter::onTrailers(Http::HeaderMap& trailers,\n \n   envoy_headers in_trailers = Http::Utility::toBridgeHeaders(trailers);\n   envoy_filter_trailers_status result = on_trailers(in_trailers, platform_filter_.instance_context);\n-  Http::FilterTrailersStatus status = static_cast<Http::FilterTrailersStatus>(result.status);\n-  // TODO(goaway): Current platform implementations expose immutable trailers, thus any modification\n-  // necessitates a full copy. Add 'modified' bit to determine when we can elide the copy. See also\n-  // https://github.com/lyft/envoy-mobile/issues/949 for potential future optimization.\n-  trailers.clear();\n-  for (envoy_header_size_t i = 0; i < result.trailers.length; i++) {\n-    trailers.addCopy(\n-        Http::LowerCaseString(Http::Utility::convertToString(result.trailers.headers[i].key)),\n-        Http::Utility::convertToString(result.trailers.headers[i].value));\n-  }\n-  // The C envoy_trailers struct can be released now because the trailers have been copied.\n-  release_envoy_headers(result.trailers);\n-  return status;\n+\n+  switch (result.status) {\n+  case kEnvoyFilterTrailersStatusContinue:\n+    if (iteration_state_ == IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    PlatformBridgeFilter::replaceHeaders(trailers, result.trailers);\n+    return Http::FilterTrailersStatus::Continue;\n+\n+  case kEnvoyFilterTrailersStatusStopIteration:\n+    iteration_state_ = IterationState::Stopped;\n+    return Http::FilterTrailersStatus::StopIteration;\n+\n+  case kEnvoyFilterTrailersStatusResumeIteration:\n+    if (iteration_state_ != IterationState::Stopped) {\n+      PANIC(\"invalid filter state: ResumeIteration  may only be used when filter iteration is \"\n+            \"stopped\");\n+    }\n+    if (result.extra_headers) {\n+      PlatformBridgeFilter::replaceHeaders(**pending_headers, *result.extra_headers);\n+      *pending_headers = nullptr;\n+      free(result.extra_headers);\n+    }\n+    if (result.extra_data) {\n+      internal_buffer->drain(internal_buffer->length());\n+      internal_buffer->addBufferFragment(\n+          *Buffer::BridgeFragment::createBridgeFragment(*result.extra_data));\n+      free(result.extra_data);\n+    }\n+    PlatformBridgeFilter::replaceHeaders(trailers, result.trailers);\n+    return Http::FilterTrailersStatus::Continue;\n+\n+  default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDIzNzQ2OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowMzo1OFrOHYYnmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo1ODo1M1rOHY6Y-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMTIyNA==", "bodyText": "Is passing a null buffer here acceptable? (I assume yes)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495331224", "createdAt": "2020-09-26T00:03:58Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -189,36 +248,56 @@ Http::FilterDataStatus PlatformBridgeFilter::decodeData(Buffer::Instance& data,\n     });\n   }\n \n-  return onData(data, end_stream, internal_buffer, platform_filter_.on_request_data);\n+  return onData(data, end_stream, internal_buffer, &pending_request_headers_,\n+                platform_filter_.on_request_data);\n }\n \n-Http::FilterTrailersStatus PlatformBridgeFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n+Http::FilterDataStatus PlatformBridgeFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n   // Delegate to shared implementation for request and response path.\n-  return onTrailers(trailers, platform_filter_.on_request_trailers);\n-}\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (encoder_callbacks_->encodingBuffer()) {\n+    encoder_callbacks_->modifyEncodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n \n-Http::FilterHeadersStatus PlatformBridgeFilter::encodeHeaders(Http::ResponseHeaderMap& headers,\n-                                                              bool end_stream) {\n-  // Delegate to shared implementation for request and response path.\n-  return onHeaders(headers, end_stream, platform_filter_.on_response_headers);\n+  return onData(data, end_stream, internal_buffer, &pending_response_headers_,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4NDUzNg==", "bodyText": "Yes, but good eye for catching the possibility. Here, nullptr represents \"none\".", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495884536", "createdAt": "2020-09-28T11:58:53Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -189,36 +248,56 @@ Http::FilterDataStatus PlatformBridgeFilter::decodeData(Buffer::Instance& data,\n     });\n   }\n \n-  return onData(data, end_stream, internal_buffer, platform_filter_.on_request_data);\n+  return onData(data, end_stream, internal_buffer, &pending_request_headers_,\n+                platform_filter_.on_request_data);\n }\n \n-Http::FilterTrailersStatus PlatformBridgeFilter::decodeTrailers(Http::RequestTrailerMap& trailers) {\n+Http::FilterDataStatus PlatformBridgeFilter::encodeData(Buffer::Instance& data, bool end_stream) {\n   // Delegate to shared implementation for request and response path.\n-  return onTrailers(trailers, platform_filter_.on_request_trailers);\n-}\n+  Buffer::Instance* internal_buffer = nullptr;\n+  if (encoder_callbacks_->encodingBuffer()) {\n+    encoder_callbacks_->modifyEncodingBuffer([&internal_buffer](Buffer::Instance& mutable_buffer) {\n+      internal_buffer = &mutable_buffer;\n+    });\n+  }\n \n-Http::FilterHeadersStatus PlatformBridgeFilter::encodeHeaders(Http::ResponseHeaderMap& headers,\n-                                                              bool end_stream) {\n-  // Delegate to shared implementation for request and response path.\n-  return onHeaders(headers, end_stream, platform_filter_.on_response_headers);\n+  return onData(data, end_stream, internal_buffer, &pending_response_headers_,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMTIyNA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDI0MjE4OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowNTo0OVrOHYYqgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo1Njo1OVrOHY6VIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMTk3MA==", "bodyText": "I actually don't see that these references are being cleared - are we assuming they'll be automatically released when the filter is deallocated and that's sufficient?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495331970", "createdAt": "2020-09-26T00:05:49Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -55,15 +55,23 @@ class PlatformBridgeFilter final : public Http::PassThroughFilter,\n   Http::FilterTrailersStatus encodeTrailers(Http::ResponseTrailerMap& trailers) override;\n \n private:\n+  static void replaceHeaders(Http::HeaderMap& headers, envoy_headers c_headers);\n   Http::FilterHeadersStatus onHeaders(Http::HeaderMap& headers, bool end_stream,\n                                       envoy_filter_on_headers_f on_headers);\n   Http::FilterDataStatus onData(Buffer::Instance& data, bool end_stream,\n-                                Buffer::Instance* internal_buffer, envoy_filter_on_data_f on_data);\n+                                Buffer::Instance* internal_buffer,\n+                                Http::HeaderMap** pending_headers, envoy_filter_on_data_f on_data);\n   Http::FilterTrailersStatus onTrailers(Http::HeaderMap& trailers,\n+                                        Buffer::Instance* internal_buffer,\n+                                        Http::HeaderMap** pending_headers,\n                                         envoy_filter_on_trailers_f on_trailers);\n   const std::string filter_name_;\n   IterationState iteration_state_;\n   envoy_http_filter platform_filter_;\n+  Http::HeaderMap* pending_request_headers_{};\n+  Http::HeaderMap* pending_response_headers_{};\n+  Http::HeaderMap* pending_request_trailers_{};\n+  Http::HeaderMap* pending_response_trailers_{};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4MzU1Mg==", "bodyText": "These member pointers are all being initialized to nullptr. This syntax is idiomatic (though it's also newer and perhaps less obvious to an unfamiliar observer than  = nullptr;). When they're set to something else in the implementation, they're being set to point to an object they don't manage - something else owns and will clean up that object. (This may be inferred by the type signatures that provide those objects.) The actual space the pointer itself occupies will be automatically reclaimed when the object is destructed.\n(Don't worry - these details and their syntax are not all that intuitive.)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495883552", "createdAt": "2020-09-28T11:56:59Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -55,15 +55,23 @@ class PlatformBridgeFilter final : public Http::PassThroughFilter,\n   Http::FilterTrailersStatus encodeTrailers(Http::ResponseTrailerMap& trailers) override;\n \n private:\n+  static void replaceHeaders(Http::HeaderMap& headers, envoy_headers c_headers);\n   Http::FilterHeadersStatus onHeaders(Http::HeaderMap& headers, bool end_stream,\n                                       envoy_filter_on_headers_f on_headers);\n   Http::FilterDataStatus onData(Buffer::Instance& data, bool end_stream,\n-                                Buffer::Instance* internal_buffer, envoy_filter_on_data_f on_data);\n+                                Buffer::Instance* internal_buffer,\n+                                Http::HeaderMap** pending_headers, envoy_filter_on_data_f on_data);\n   Http::FilterTrailersStatus onTrailers(Http::HeaderMap& trailers,\n+                                        Buffer::Instance* internal_buffer,\n+                                        Http::HeaderMap** pending_headers,\n                                         envoy_filter_on_trailers_f on_trailers);\n   const std::string filter_name_;\n   IterationState iteration_state_;\n   envoy_http_filter platform_filter_;\n+  Http::HeaderMap* pending_request_headers_{};\n+  Http::HeaderMap* pending_response_headers_{};\n+  Http::HeaderMap* pending_request_trailers_{};\n+  Http::HeaderMap* pending_response_trailers_{};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMTk3MA=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDI0NjA0OnYy", "diffSide": "RIGHT", "path": "library/objective-c/EnvoyBridgeUtility.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMDowNzozMFrOHYYs-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMTo1OTozM1rOHY6aUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMjYwMg==", "bodyText": "Below you're using NULL, can we keep these consistent?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495332602", "createdAt": "2020-09-26T00:07:30Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyBridgeUtility.h", "diffHunk": "@@ -3,12 +3,26 @@\n #import \"library/common/types/c_types.h\"\n \n static inline envoy_data toNativeData(NSData *data) {\n+  if (data == nil) {\n+    return envoy_nodata;\n+  }\n+\n   uint8_t *native_bytes = (uint8_t *)safe_malloc(sizeof(uint8_t) * data.length);\n   memcpy(native_bytes, data.bytes, data.length);\n   envoy_data ret = {data.length, native_bytes, free, native_bytes};\n   return ret;\n }\n \n+static inline envoy_data *toNativeDataPtr(NSData *data) {\n+  if (data == nil) {\n+    return nil;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTg4NDg4MQ==", "bodyText": "Yeah, this should be NULL because it's not a valid Objective-C object.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1100#discussion_r495884881", "createdAt": "2020-09-28T11:59:33Z", "author": {"login": "goaway"}, "path": "library/objective-c/EnvoyBridgeUtility.h", "diffHunk": "@@ -3,12 +3,26 @@\n #import \"library/common/types/c_types.h\"\n \n static inline envoy_data toNativeData(NSData *data) {\n+  if (data == nil) {\n+    return envoy_nodata;\n+  }\n+\n   uint8_t *native_bytes = (uint8_t *)safe_malloc(sizeof(uint8_t) * data.length);\n   memcpy(native_bytes, data.bytes, data.length);\n   envoy_data ret = {data.length, native_bytes, free, native_bytes};\n   return ret;\n }\n \n+static inline envoy_data *toNativeDataPtr(NSData *data) {\n+  if (data == nil) {\n+    return nil;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTMzMjYwMg=="}, "originalCommit": {"oid": "88b0eaaa3d8f09423c873db360cb2390a7f5df63"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 621, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}