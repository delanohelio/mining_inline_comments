{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzODg2NDA2", "number": 1200, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoyNjo0MFrOFCBLUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoyNjo0MFrOFCBLUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjYwNzU1OnYy", "diffSide": "RIGHT", "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoyNjo0MFrOIA9nPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowNDowMFrOIHUrRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDM4MQ==", "bodyText": "Are we able to have a test case for verifying this behavior?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1200#discussion_r537880381", "createdAt": "2020-12-07T22:26:40Z", "author": {"login": "buildbreaker"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -321,6 +322,36 @@ Http::FilterHeadersStatus PlatformBridgeFilter::encodeHeaders(Http::ResponseHead\n                                                               bool end_stream) {\n   ENVOY_LOG(trace, \"PlatformBridgeFilter({})::encodeHeaders\", filter_name_);\n \n+  // Presence of internal error header indicates an error that should be surfaced as an\n+  // error callback (rather than an HTTP response).\n+  const auto error_code_header = headers.get(Http::InternalHeaders::get().ErrorCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf3bed4367b390edc23a26ef0dd7e09b7a445f5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0OTcwMw==", "bodyText": "Added passing test.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1200#discussion_r544549703", "createdAt": "2020-12-16T19:04:00Z", "author": {"login": "goaway"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -321,6 +322,36 @@ Http::FilterHeadersStatus PlatformBridgeFilter::encodeHeaders(Http::ResponseHead\n                                                               bool end_stream) {\n   ENVOY_LOG(trace, \"PlatformBridgeFilter({})::encodeHeaders\", filter_name_);\n \n+  // Presence of internal error header indicates an error that should be surfaced as an\n+  // error callback (rather than an HTTP response).\n+  const auto error_code_header = headers.get(Http::InternalHeaders::get().ErrorCode);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDM4MQ=="}, "originalCommit": {"oid": "fbf3bed4367b390edc23a26ef0dd7e09b7a445f5"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 530, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}