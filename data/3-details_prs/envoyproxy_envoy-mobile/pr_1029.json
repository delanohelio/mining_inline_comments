{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDE2MDc4", "number": 1029, "title": "advanced filters: introduce interface for more complex filter interactions", "bodyText": "Description: Introduces platform-bridged filter interfaces that allow stopping and stopping filter iteration, and asynchronous resumption of filter chain. The following conventions are adopted with these new interfaces:\n\n'Continue' is the status used to indicate HTTP entities should be forwarded when filter iteration is ongoing.\n'StopIteration' causes forwarding to halt (though invocations of the current filter will continue).\nThe 'ResumeIteration' status or an asynchronous resume call must be used to begin iteration and forwarding again. 'Continue' is not valid when iteration is stopped.\nUsing an asynchronous call to resume iteration will result in a special 'onResume' invocation of the filter, that will allow interaction with the HTTP stream on the same thread as other invocations, avoiding the need for synchronization.\nResume mechanisms offer optional parameters attached to the return status that can be used to provide parts of the stream that have not yet been forwarded. e.g., if you resume during an 'onData' invocation, you can attach headers to the 'ResumeIteration' status (and must do so, if headers have not yet been forwarded).\nRisk: Low\nTesting: Local and CI\n\nSigned-off-by: Mike Schore mike.schore@gmail.com", "createdAt": "2020-08-12T21:24:53Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029", "merged": true, "mergeCommit": {"oid": "bf71af0128cbe64d4f3d18fc355a7443c555d4b2"}, "closed": true, "closedAt": "2020-08-15T05:20:10Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-SYPGgFqTQ2NjI5MDAzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc_ANpYgH2gAyNDY3MDE2MDc4OjM0M2NmYmQyZmVkNTA1OTkyNzkxMTE3NzQ2NmY4YWE2OWU5YmFlYjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MjkwMDM2", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-466290036", "createdAt": "2020-08-12T21:27:57Z", "commit": {"oid": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyNzo1N1rOG_zftA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTozNDowNlrOG_zqWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NzE3Mg==", "bodyText": "If the caller omits headers here (passes nil), that will result in the underlying filter manager passing its internally buffered headers, correct? If so, I think that's worth documenting above", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469557172", "createdAt": "2020-08-12T21:27:57Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -45,4 +45,14 @@ sealed class FilterDataStatus {\n    * continuing processing, and will handle their own buffering.\n    */\n   class StopIterationNoBuffer : FilterDataStatus()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */\n+  class ResumeIteration<T : Headers>(val headers: T?, val data: ByteBuffer) : FilterDataStatus()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NzMyNg==", "bodyText": "Same comment here regarding behavior in the nil case", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469557326", "createdAt": "2020-08-12T21:28:22Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterTrailersStatus.kt", "diffHunk": "@@ -17,4 +17,14 @@ sealed class FilterTrailersStatus<T : Headers> {\n    * is desired.\n    */\n   class StopIteration<T : Headers>(val trailers: T) : FilterTrailersStatus<T>()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */\n+  class ResumeIteration<T : Headers>(val headers: Headers?, val data: ByteBuffer?, val trailers: T) : FilterTrailersStatus<T>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODI1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              case resumeIteration(Data, withHeaders: Headers? = nil)\n          \n          \n            \n              case resumeIteration(headers: Headers? = nil, data: Data)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469558253", "createdAt": "2020-08-12T21:30:23Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -35,4 +35,14 @@ public enum FilterDataStatus: Equatable {\n   /// This may be called by filters which must parse a larger block of the incoming data before\n   /// continuing processing, and will handle their own buffering.\n   case stopIterationNoBuffer\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.\n+   *\n+   * It is an error to return `resumeIteration` if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */\n+  case resumeIteration(Data, withHeaders: Headers? = nil)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODU0OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              case resumeIteration(T, withHeaders: Headers? = nil, withData: Data? = nil)\n          \n          \n            \n              case resumeIteration(headers: Headers? = nil, data: Data? = nil, trailers: T)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469558549", "createdAt": "2020-08-12T21:31:01Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/FilterTrailersStatus.swift", "diffHunk": "@@ -9,4 +9,14 @@ public enum FilterTrailersStatus<T: Headers>: Equatable {\n   /// Calling `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration\n   /// is desired.\n   case stopIteration(T)\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */\n+  case resumeIteration(T, withHeaders: Headers? = nil, withData: Data? = nil)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODczNw==", "bodyText": "This ordering matches Kotlin - I also think it's nice to name the values explicitly but don't feel too strongly", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469558737", "createdAt": "2020-08-12T21:31:29Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/FilterTrailersStatus.swift", "diffHunk": "@@ -9,4 +9,14 @@ public enum FilterTrailersStatus<T: Headers>: Equatable {\n   /// Calling `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration\n   /// is desired.\n   case stopIteration(T)\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */\n+  case resumeIteration(T, withHeaders: Headers? = nil, withData: Data? = nil)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODU0OQ=="}, "originalCommit": {"oid": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1ODkxMQ==", "bodyText": "Are we missing the FilterResumeStatus type in this PR?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469558911", "createdAt": "2020-08-12T21:31:49Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/ResponseFilter.swift", "diffHunk": "@@ -38,6 +38,14 @@ public protocol ResponseFilter: Filter {\n   /// - returns: The trailer status containing body with which to continue or buffer.\n   func onResponseTrailers(_ trailers: ResponseTrailers) -> FilterTrailersStatus<ResponseTrailers>\n \n+  /// Invoked explicitly in response to an asynchronous resume() callback when filter\n+  /// iteration has been stopped.\n+  /// \n+  /// @return: The resumption status including any previously held entities that remain\n+  ///          to be forwarded.\n+  /// \n+  func onResumeIteration() -> FilterResumeStatus<ResponseHeaders, ResponseTrailers>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1OTg5Nw==", "bodyText": "These functions are currently called continueRequest() / continueResponse(); I think they need to be updated in this PR on the callback types\nCan we add documentation to the callbacks indicating that this function will be called on the filter's execution thread as an immediate result of calling the callback?\nIt'd be nice to add an example use case to these descriptions. Personally I think we should be as clear/verbose as possible on these interface descriptions", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r469559897", "createdAt": "2020-08-12T21:34:06Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/ResponseFilter.kt", "diffHunk": "@@ -50,6 +50,15 @@ interface ResponseFilter : Filter {\n    */\n   fun onResponseTrailers(trailers: ResponseTrailers): FilterTrailersStatus<ResponseTrailers>\n \n+  /**\n+   * Invoked explicitly in response to an asynchronous resume() callback when filter\n+   * iteration has been stopped.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95b8d9f5e4fbc7c5c19ab4009ffd4c9d9b6675e6"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6f9455a507905ec1f1b617a9b99c00a584a4eed", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/e6f9455a507905ec1f1b617a9b99c00a584a4eed", "committedDate": "2020-08-13T12:25:52Z", "message": "swift compiles\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/caedca6dfd92c731635aa743cfd633ac9a3dae69", "committedDate": "2020-08-13T19:29:00Z", "message": "kotlin compiles\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDczMDc2", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467073076", "createdAt": "2020-08-13T19:37:16Z", "commit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozNzoxNlrOHAazgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozNzoxNlrOHAazgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIxOQ==", "bodyText": "Interface to be updated", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470201219", "createdAt": "2020-08-13T19:37:16Z", "author": {"login": "buildbreaker"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsycRequestFilter.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped.\n+   *\n+   * @return: The resumption status including any previously held entities that remain\n+   *          to be forwarded.\n+   */\n+  fun onResumeRequest(): FilterResumeStatus<RequestHeaders, RequestTrailers>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDczNTUy", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467073552", "createdAt": "2020-08-13T19:38:01Z", "commit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozODowMVrOHAa1MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozODowMVrOHAa1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTY0OA==", "bodyText": "Can we have this first", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470201648", "createdAt": "2020-08-13T19:38:01Z", "author": {"login": "buildbreaker"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsycRequestFilter.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped.\n+   *\n+   * @return: The resumption status including any previously held entities that remain\n+   *          to be forwarded.\n+   */\n+  fun onResumeRequest(): FilterResumeStatus<RequestHeaders, RequestTrailers>\n+\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+   fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDczNzIw", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467073720", "createdAt": "2020-08-13T19:38:15Z", "commit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozODoxNVrOHAa1uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTozODoxNVrOHAa1uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTc4NA==", "bodyText": "nit: have this first\n(same on swift)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470201784", "createdAt": "2020-08-13T19:38:15Z", "author": {"login": "buildbreaker"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsycResponseFilter.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * ResponseFilter supporting asynchronous resumption.\n+ */\n+interface AsyncResponseFilter : ResponseFilter {\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeResponse() callback when filter\n+   * iteration has been stopped.\n+   *\n+   * @return: The resumption status including any previously held entities that remain\n+   *          to be forwarded.\n+   */\n+  fun onResumeResponse(): FilterResumeStatus<ResponseHeaders, ResponseTrailers>\n+\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+   fun setResponseFilterCallbacks(callbacks: ResponseFilterCallbacks)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDc2MTA1", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467076105", "createdAt": "2020-08-13T19:42:03Z", "commit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MjowNFrOHAa9FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MjowNFrOHAa9FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMzY2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n          \n          \n            \n               * stopped during an on*Headers invocation.\n          \n          \n            \n               * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n          \n          \n            \n               * stopped during an on*Headers invocation. If headers are already sent, headers should not be passed in the return status.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470203669", "createdAt": "2020-08-13T19:42:04Z", "author": {"login": "buildbreaker"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -44,5 +44,15 @@ sealed class FilterDataStatus {\n    * This may be called by filters which must parse a larger block of the incoming data before\n    * continuing processing, and will handle their own buffering.\n    */\n-  class StopIterationNoBuffer : FilterDataStatus()\n+  class StopIterationNoBuffer<T : Headers> : FilterDataStatus<T>()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDc2NDEz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467076413", "createdAt": "2020-08-13T19:42:31Z", "commit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MjozMlrOHAa-Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MjozMlrOHAa-Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMzkxOA==", "bodyText": "same as https://github.com/lyft/envoy-mobile/pull/1029/files#r470203669", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470203918", "createdAt": "2020-08-13T19:42:32Z", "author": {"login": "buildbreaker"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterResumeStatus.kt", "diffHunk": "@@ -0,0 +1,18 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.nio.ByteBuffer\n+\n+/*\n+ * Status returned by filters when transmitting or receiving trailers.\n+ */\n+sealed class FilterResumeStatus<T : Headers, U : Headers> {\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDc2NDgz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467076483", "createdAt": "2020-08-13T19:42:39Z", "commit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MjozOVrOHAa-VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MjozOVrOHAa-VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMzk4OQ==", "bodyText": "same as https://github.com/lyft/envoy-mobile/pull/1029/files#r470203669", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470203989", "createdAt": "2020-08-13T19:42:39Z", "author": {"login": "buildbreaker"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterTrailersStatus.kt", "diffHunk": "@@ -1,20 +1,33 @@\n package io.envoyproxy.envoymobile\n \n+import java.nio.ByteBuffer\n+\n /*\n  * Status returned by filters when transmitting or receiving trailers.\n  */\n-// TODO: create abstract Trailers class.\n-sealed class FilterTrailersStatus<T : Headers> {\n+sealed class FilterTrailersStatus<T : Headers, U : Headers> {\n   /**\n    * Continue filter chain iteration, passing the provided trailers through.\n    */\n-  class Continue<T : Headers>(val trailers: T) : FilterTrailersStatus<T>()\n+  class Continue<T : Headers, U : Headers>(val trailers: T) : FilterTrailersStatus<T, U>()\n \n   /**\n    * Do not iterate to any of the remaining filters in the chain with trailers.\n    *\n+   * Because trailers are by definition the last HTTP entity of a request or response, only\n+   * asynchronous filters support resumption after returning StopIteration from on*Trailers.\n    * Calling `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration\n    * is desired.\n    */\n-  class StopIteration<T : Headers>(val trailers: T) : FilterTrailersStatus<T>()\n+  class StopIteration<T : Headers, U : Headers> : FilterTrailersStatus<T, U>()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDc2OTY5", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467076969", "createdAt": "2020-08-13T19:43:31Z", "commit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MzozMVrOHAbADQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MzozMVrOHAbADQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwNDQyOQ==", "bodyText": "same as https://github.com/lyft/envoy-mobile/pull/1029/files#r470203669", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470204429", "createdAt": "2020-08-13T19:43:31Z", "author": {"login": "buildbreaker"}, "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -35,4 +35,14 @@ public enum FilterDataStatus: Equatable {\n   /// This may be called by filters which must parse a larger block of the incoming data before\n   /// continuing processing, and will handle their own buffering.\n   case stopIterationNoBuffer\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDc3MDEw", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467077010", "createdAt": "2020-08-13T19:43:35Z", "commit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MzozNlrOHAbAQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOTo0MzozNlrOHAbAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwNDQ4MA==", "bodyText": "same as https://github.com/lyft/envoy-mobile/pull/1029/files#r470203669", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470204480", "createdAt": "2020-08-13T19:43:36Z", "author": {"login": "buildbreaker"}, "path": "library/swift/src/filters/FilterResumeStatus.swift", "diffHunk": "@@ -0,0 +1,15 @@\n+import Foundation\n+\n+/// Status returned by filters after resuming iteration asynchronously.\n+@frozen\n+public enum FilterResumeStatus<T: Headers, U: Headers>: Equatable {\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers and data, if iteration was\n+   * previously stopped during an on*Headers or on*Data invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MDk4ODYz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467098863", "createdAt": "2020-08-13T20:17:11Z", "commit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDoxNzoxMVrOHAcH0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1Njo0N1rOHAdZ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyMjgwMg==", "bodyText": "What will this be updated to?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470222802", "createdAt": "2020-08-13T20:17:11Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsycRequestFilter.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped.\n+   *\n+   * @return: The resumption status including any previously held entities that remain\n+   *          to be forwarded.\n+   */\n+  fun onResumeRequest(): FilterResumeStatus<RequestHeaders, RequestTrailers>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTIxOQ=="}, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyMjg2Nw==", "bodyText": "+1 to putting this first in the file", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470222867", "createdAt": "2020-08-13T20:17:19Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsycRequestFilter.kt", "diffHunk": "@@ -0,0 +1,23 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped.\n+   *\n+   * @return: The resumption status including any previously held entities that remain\n+   *          to be forwarded.\n+   */\n+  fun onResumeRequest(): FilterResumeStatus<RequestHeaders, RequestTrailers>\n+\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+   fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMTY0OA=="}, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyMzQ4Mw==", "bodyText": "* stopped during an on*Headers invocation. If headers have already been sent, headers should not be passed in the return status.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470223483", "createdAt": "2020-08-13T20:18:33Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -44,5 +44,15 @@ sealed class FilterDataStatus {\n    * This may be called by filters which must parse a larger block of the incoming data before\n    * continuing processing, and will handle their own buffering.\n    */\n-  class StopIterationNoBuffer : FilterDataStatus()\n+  class StopIterationNoBuffer<T : Headers> : FilterDataStatus<T>()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwMzY2OQ=="}, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNDgyOA==", "bodyText": "Shouldn't this be val trailers: U?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470224828", "createdAt": "2020-08-13T20:21:02Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterTrailersStatus.kt", "diffHunk": "@@ -1,20 +1,33 @@\n package io.envoyproxy.envoymobile\n \n+import java.nio.ByteBuffer\n+\n /*\n  * Status returned by filters when transmitting or receiving trailers.\n  */\n-// TODO: create abstract Trailers class.\n-sealed class FilterTrailersStatus<T : Headers> {\n+sealed class FilterTrailersStatus<T : Headers, U : Headers> {\n   /**\n    * Continue filter chain iteration, passing the provided trailers through.\n    */\n-  class Continue<T : Headers>(val trailers: T) : FilterTrailersStatus<T>()\n+  class Continue<T : Headers, U : Headers>(val trailers: T) : FilterTrailersStatus<T, U>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNjA0Nw==", "bodyText": "I think it's worth including details as to why trailers are not specified here, similarly to how you have in the StopIteration case definition", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470226047", "createdAt": "2020-08-13T20:23:25Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -44,5 +44,15 @@ sealed class FilterDataStatus {\n    * This may be called by filters which must parse a larger block of the incoming data before\n    * continuing processing, and will handle their own buffering.\n    */\n-  class StopIterationNoBuffer : FilterDataStatus()\n+  class StopIterationNoBuffer<T : Headers> : FilterDataStatus<T>()\n+\n+  /**\n+   * Resume previously-stopped iteration, possibly forwarding headers, if iteration was previously\n+   * stopped during an on*Headers invocation.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNjYzMA==", "bodyText": "Same suggestion as @buildbreaker above regarding listing this first", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470226630", "createdAt": "2020-08-13T20:24:31Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/AsyncRequestFilter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+import Foundation\n+\n+/// RequestFilter supporting asynchronous resumption.\n+public protocol AsyncRequestFilter: RequestFilter {\n+  /// Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+  /// iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+  /// of any stream state that has not yet been forwarded along the filter chain.\n+  ///\n+  /// - return: The resumption status including any HTTP entities that will be forwarded.\n+  func onResumeRequest(\n+    headers: RequestHeaders?,\n+    data: Data?,\n+    trailers: RequestTrailers?,\n+    endStream: Bool\n+  ) -> FilterResumeStatus<RequestHeaders, RequestTrailers>\n+\n+  /// Called by the filter manager once to initialize the filter callbacks that the filter should\n+  /// use.\n+  ///\n+  /// - parameter callbacks: The callbacks for this filter to use to interact with the chain.\n+  func setRequestFilterCallbacks(_ callbacks: RequestFilterCallbacks)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNzAyNg==", "bodyText": "Same comments in this file", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470227026", "createdAt": "2020-08-13T20:25:15Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/AsyncResponseFilter.swift", "diffHunk": "@@ -0,0 +1,21 @@\n+import Foundation\n+\n+/// ResponseFilter supporting asynchronous resumption.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNzUzNQ==", "bodyText": "When will endStream be true? Will it be true if either there's a data frame with endStream=true or trailers?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470227535", "createdAt": "2020-08-13T20:26:08Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/AsyncRequestFilter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+import Foundation\n+\n+/// RequestFilter supporting asynchronous resumption.\n+public protocol AsyncRequestFilter: RequestFilter {\n+  /// Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+  /// iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+  /// of any stream state that has not yet been forwarded along the filter chain.\n+  ///\n+  /// - return: The resumption status including any HTTP entities that will be forwarded.\n+  func onResumeRequest(\n+    headers: RequestHeaders?,\n+    data: Data?,\n+    trailers: RequestTrailers?,\n+    endStream: Bool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNzc0NA==", "bodyText": "I think it's worth adding - parameter docs for each of these (same with the response filter) to clarify these points", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470227744", "createdAt": "2020-08-13T20:26:29Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/AsyncRequestFilter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+import Foundation\n+\n+/// RequestFilter supporting asynchronous resumption.\n+public protocol AsyncRequestFilter: RequestFilter {\n+  /// Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+  /// iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+  /// of any stream state that has not yet been forwarded along the filter chain.\n+  ///\n+  /// - return: The resumption status including any HTTP entities that will be forwarded.\n+  func onResumeRequest(\n+    headers: RequestHeaders?,\n+    data: Data?,\n+    trailers: RequestTrailers?,\n+    endStream: Bool", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyNzUzNQ=="}, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MTM5Nw==", "bodyText": "Thinking about how users will consume this, I think they'll likely end up force-unwrapping the values they called resume with, which might be a little unwieldy. However, I suppose we can't really make these non-optional since resumeRequest() can be called after headers or data, in which case data will sometimes be nil. Probably nothing actionable here, just thinking out loud (though it might be good to list some examples in docs here)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470241397", "createdAt": "2020-08-13T20:52:07Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/AsyncRequestFilter.swift", "diffHunk": "@@ -0,0 +1,22 @@\n+import Foundation\n+\n+/// RequestFilter supporting asynchronous resumption.\n+public protocol AsyncRequestFilter: RequestFilter {\n+  /// Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+  /// iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+  /// of any stream state that has not yet been forwarded along the filter chain.\n+  ///\n+  /// - return: The resumption status including any HTTP entities that will be forwarded.\n+  func onResumeRequest(\n+    headers: RequestHeaders?,\n+    data: Data?,\n+    trailers: RequestTrailers?,\n+    endStream: Bool\n+  ) -> FilterResumeStatus<RequestHeaders, RequestTrailers>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MjkxMQ==", "bodyText": "Same here", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470242911", "createdAt": "2020-08-13T20:54:55Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/AsyncResponseFilter.swift", "diffHunk": "@@ -0,0 +1,21 @@\n+import Foundation\n+\n+/// ResponseFilter supporting asynchronous resumption.\n+public protocol AsyncResponseFilter: ResponseFilter {\n+  /// Invoked explicitly in response to an asynchronous resumeResponse() callback when filter\n+  /// iteration has been stopped.\n+  ///\n+  /// - return: The resumption status including any HTTP entities that will be forwarded.\n+  func onResumeResponse(\n+    headers: ResponseHeaders?,\n+    data: Data?,\n+    trailers: ResponseTrailers?,\n+    endStream: Bool", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MzgzOA==", "bodyText": "These docstrings are outdated (can you grep for any references to these functions and update please?)", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470243838", "createdAt": "2020-08-13T20:56:47Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/FilterHeadersStatus.swift", "diffHunk": "@@ -9,5 +9,5 @@ public enum FilterHeadersStatus<T: Headers>: Equatable {\n   /// Returning `continue` from `onRequestData()`/`onResponseData()` or calling\n   /// `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caedca6dfd92c731635aa743cfd633ac9a3dae69"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3NzM1NDU0", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467735454", "createdAt": "2020-08-14T17:08:12Z", "commit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "state": "APPROVED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzowODoxMlrOHA8MzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxNzoxODo0OFrOHA8huQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0ODM2NQ==", "bodyText": "\ud83d\udc4f", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470748365", "createdAt": "2020-08-14T17:08:12Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsyncRequestFilter.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)\n+\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+   * of any stream state that has not yet been forwarded along the filter chain.\n+   *\n+   * As with other filter invocations, this will be called on Envoy's main thread, and thus\n+   * no additional synchronization is required between this and other invocations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0OTgyNA==", "bodyText": "Got it, so this will be true for trailers or data, endStream: true \ud83d\udc4d", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470749824", "createdAt": "2020-08-14T17:11:06Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsyncRequestFilter.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)\n+\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+   * of any stream state that has not yet been forwarded along the filter chain.\n+   *\n+   * As with other filter invocations, this will be called on Envoy's main thread, and thus\n+   * no additional synchronization is required between this and other invocations.\n+   *\n+   * @param headers: Headers, if `StopIteration` was returned from `onRequestHeaders`.\n+   * @param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n+   * @param trailers: Trailers, if `StopIteration` was returned from `onRequestTrailers`.\n+   * @param endStream: True, if the stream ended with the previous (and thus, last) invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc0OTg3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                trailrs: RequestTrailers?,\n          \n          \n            \n                trailers: RequestTrailers?,", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470749875", "createdAt": "2020-08-14T17:11:12Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsyncRequestFilter.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * RequestFilter supporting asynchronous resumption.\n+ */\n+interface AsyncRequestFilter : RequestFilter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setRequestFilterCallbacks(callbacks: RequestFilterCallbacks)\n+\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeRequest() callback when filter\n+   * iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+   * of any stream state that has not yet been forwarded along the filter chain.\n+   *\n+   * As with other filter invocations, this will be called on Envoy's main thread, and thus\n+   * no additional synchronization is required between this and other invocations.\n+   *\n+   * @param headers: Headers, if `StopIteration` was returned from `onRequestHeaders`.\n+   * @param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n+   * @param trailers: Trailers, if `StopIteration` was returned from `onRequestTrailers`.\n+   * @param endStream: True, if the stream ended with the previous (and thus, last) invocation.\n+   *\n+   * @return: The resumption status including any HTTP entities that will be forwarded.\n+   */\n+  fun onResumeRequest(\n+    headers: RequestHeaders?,\n+    data: ByteBuffer?,\n+    trailrs: RequestTrailers?,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDAxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                trailrs: ResponseTrailers?,\n          \n          \n            \n                trailers: ResponseTrailers?,", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470750019", "createdAt": "2020-08-14T17:11:32Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/AsyncResponseFilter.kt", "diffHunk": "@@ -0,0 +1,36 @@\n+package io.envoyproxy.envoymobile\n+\n+/*\n+ * ResponseFilter supporting asynchronous resumption.\n+ */\n+interface AsyncResponseFilter : ResponseFilter {\n+  /**\n+   * Called by the filter manager once to initialize the filter callbacks that the filter should\n+   * use.\n+   *\n+   * @param callbacks: The callbacks for this filter to use to interact with the chain.\n+   */\n+  fun setResponseFilterCallbacks(callbacks: ResponseFilterCallbacks)\n+\n+  /**\n+   * Invoked explicitly in response to an asynchronous resumeResponse() callback when filter\n+   * iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+   * of any stream state that has not yet been forwarded along the filter chain.\n+   *\n+   * As with other filter invocations, this will be called on Envoy's main thread, and thus\n+   * no additional synchronization is required between this and other invocations.\n+   *\n+   * @param headers: Headers, if `StopIteration` was returned from `onResponseHeaders`.\n+   * @param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n+   * @param trailers: Trailers, if `StopIteration` was returned from `onReponseTrailers`.\n+   * @param endStream: True, if the stream ended with the previous (and thus, last) invocation.\n+   *\n+   * @return: The resumption status including any HTTP entities that will be forwarded.\n+   */\n+  fun onResumeResponse(\n+    headers: ResponseHeaders?,\n+    data: ByteBuffer?,\n+    trailrs: ResponseTrailers?,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDUwNA==", "bodyText": "Might be worth resolving this while we're here, can also do separately", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470750504", "createdAt": "2020-08-14T17:12:30Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -14,7 +14,7 @@ sealed class FilterDataStatus {\n    * before the entirety is sent to the next filter.\n    * TODO: add param docs. name param in swift.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDcwNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returning `Continue` or `ResumeIteration from another filter invocation or calling\n          \n          \n            \n               * Returning `Continue` or `ResumeIteration` from another filter invocation or calling", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470750705", "createdAt": "2020-08-14T17:12:51Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -29,20 +29,30 @@ sealed class FilterDataStatus {\n    * This should be called by filters which must parse a larger block of the incoming data before\n    * continuing processing.\n    */\n-  class StopIterationAndBuffer(val data: ByteBuffer) : FilterDataStatus()\n+  class StopIterationAndBuffer<T : Headers> : FilterDataStatus<T>()\n \n   /**\n    * Do not iterate to any of the remaining filters in the chain, and do not internally buffer\n    * data.\n    *\n    * This filter will continue to be called with new chunks of data.\n    *\n-   * Returning `Continue` from `onRequestData()`/`onResponseData()` or calling\n-   * `continueRequest()`/`continueResponse()` MUST be called when continued filter iteration is\n+   * Returning `Continue` or `ResumeIteration from another filter invocation or calling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MDg4NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * `resumeRequest()`/`resumeResponse()` MUST be called when continued filter iteration is\n          \n          \n            \n               * `resumeRequest()`/`resumeResponse()` MUST occur when continued filter iteration is", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470750884", "createdAt": "2020-08-14T17:13:10Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterDataStatus.kt", "diffHunk": "@@ -29,20 +29,30 @@ sealed class FilterDataStatus {\n    * This should be called by filters which must parse a larger block of the incoming data before\n    * continuing processing.\n    */\n-  class StopIterationAndBuffer(val data: ByteBuffer) : FilterDataStatus()\n+  class StopIterationAndBuffer<T : Headers> : FilterDataStatus<T>()\n \n   /**\n    * Do not iterate to any of the remaining filters in the chain, and do not internally buffer\n    * data.\n    *\n    * This filter will continue to be called with new chunks of data.\n    *\n-   * Returning `Continue` from `onRequestData()`/`onResponseData()` or calling\n-   * `continueRequest()`/`continueResponse()` MUST be called when continued filter iteration is\n+   * Returning `Continue` or `ResumeIteration from another filter invocation or calling\n+   * `resumeRequest()`/`resumeResponse()` MUST be called when continued filter iteration is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MTI2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returning `Continue` or `ResumeIteration from another filter invocation or calling\n          \n          \n            \n               * Returning `Continue` or `ResumeIteration` from another filter invocation or calling", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470751268", "createdAt": "2020-08-14T17:13:53Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterHeadersStatus.kt", "diffHunk": "@@ -12,9 +12,9 @@ sealed class FilterHeadersStatus<T : Headers> {\n   /**\n    * Do not iterate to any of the remaining filters in the chain with headers.\n    *\n-   * Returning `continue` from `onRequestData()`/`onResponseData()` or calling\n-   * `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration is\n+   * Returning `Continue` or `ResumeIteration from another filter invocation or calling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MTY3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * an error to include data or trailers if endStream was previously sent or if trailers have\n          \n          \n            \n               * an error to include data or trailers if endStream=true was previously sent or if trailers have", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470751677", "createdAt": "2020-08-14T17:14:40Z", "author": {"login": "rebello95"}, "path": "library/kotlin/src/io/envoyproxy/envoymobile/filters/FilterResumeStatus.kt", "diffHunk": "@@ -0,0 +1,24 @@\n+package io.envoyproxy.envoymobile\n+\n+import java.nio.ByteBuffer\n+\n+/*\n+ * Status to be returned by filters after resuming iteration asynchronously.\n+ */\n+sealed class FilterResumeStatus<T : Headers, U : Headers> {\n+  /**\n+   * Resume previously-stopped iteration, potentially forwarding headers, data, and/or trailers\n+   * that have not yet been passed along the filter chain.\n+   *\n+   * It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n+   * an error to include headers if headers have already been forwarded to the next filter\n+   * (i.e. iteration was stopped during an on*Data invocation instead of on*Headers). It is also\n+   * an error to include data or trailers if endStream was previously sent or if trailers have", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1Mjc5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// Returning `continue` or `resumeIteration from another filter invocation or calling\n          \n          \n            \n              /// Returning `continue` or `resumeIteration` from another filter invocation or calling", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470752795", "createdAt": "2020-08-14T17:16:45Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -15,13 +15,13 @@ public enum FilterDataStatus: Equatable {\n   ///\n   /// This filter will continue to be called with new chunks of data.\n   ///\n-  /// Returning `continue` from `onRequestData()`/`onResponseData()` or calling\n-  /// `continueRequest()`/`continueResponse()` MUST be called when continued filter iteration is\n+  /// Returning `continue` or `resumeIteration from another filter invocation or calling", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1Mjg1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// `resumeRequest()`/`resumeResponse()` MUST be called when continued filter iteration is\n          \n          \n            \n              /// `resumeRequest()`/`resumeResponse()` MUST occur when continued filter iteration is", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470752856", "createdAt": "2020-08-14T17:16:53Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -15,13 +15,13 @@ public enum FilterDataStatus: Equatable {\n   ///\n   /// This filter will continue to be called with new chunks of data.\n   ///\n-  /// Returning `continue` from `onRequestData()`/`onResponseData()` or calling\n-  /// `continueRequest()`/`continueResponse()` MUST be called when continued filter iteration is\n+  /// Returning `continue` or `resumeIteration from another filter invocation or calling\n+  /// `resumeRequest()`/`resumeResponse()` MUST be called when continued filter iteration is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MzA1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// - param headers: Headers, if `StopIteration` was returned from `onResponseHeaders`.\n          \n          \n            \n              /// - param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n          \n          \n            \n              /// - param trailers: Trailers, if `StopIteration` was returned from `onReponseTrailers`.\n          \n          \n            \n              /// - param endStream: True, if the stream ended with the previous (and thus, last) invocation.\n          \n          \n            \n              /// - param headers: Headers, if `stopIteration` was returned from `onResponseHeaders`.\n          \n          \n            \n              /// - param data: Any data that has been buffered where `stopIterationAndBuffer` was returned.\n          \n          \n            \n              /// - param trailers: Trailers, if `stopIteration` was returned from `onReponseTrailers`.\n          \n          \n            \n              /// - param endStream: True, if the stream ended with the previous (and thus, last) invocation.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470753054", "createdAt": "2020-08-14T17:17:19Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/AsyncResponseFilter.swift", "diffHunk": "@@ -0,0 +1,30 @@\n+import Foundation\n+\n+/// ResponseFilter supporting asynchronous resumption.\n+public protocol AsyncResponseFilter: ResponseFilter {\n+  /// Called by the filter manager once to initialize the filter callbacks that the filter should\n+  /// use.\n+  ///\n+  /// - parameter callbacks: The callbacks for this filter to use to interact with the chain.\n+  func setResponseFilterCallbacks(_ callbacks: ResponseFilterCallbacks)\n+\n+  /// Invoked explicitly in response to an asynchronous resumeResponse() callback when filter\n+  /// iteration has been stopped. The parameters passed to this invocation will be a snapshot\n+  /// of any stream state that has not yet been forwarded along the filter chain.\n+  ///\n+  /// As with other filter invocations, this will be called on Envoy's main thread, and thus\n+  /// no additional synchronization is required between this and other invocations.\n+  ///\n+  /// - param headers: Headers, if `StopIteration` was returned from `onResponseHeaders`.\n+  /// - param data: Any data that has been buffered where `StopIterationAndBuffer` was returned.\n+  /// - param trailers: Trailers, if `StopIteration` was returned from `onReponseTrailers`.\n+  /// - param endStream: True, if the stream ended with the previous (and thus, last) invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MzU4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// an error to include data or trailers if endStream was previously sent or if trailers have\n          \n          \n            \n              /// an error to include data or trailers if endStream=true was previously sent or if trailers have", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470753581", "createdAt": "2020-08-14T17:18:29Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/FilterResumeStatus.swift", "diffHunk": "@@ -0,0 +1,15 @@\n+import Foundation\n+\n+/// Status returned by filters after resuming iteration asynchronously.\n+@frozen\n+public enum FilterResumeStatus<T: Headers, U: Headers>: Equatable {\n+  /// Resume previously-stopped iteration, potentially forwarding headers, data, and/or trailers\n+  /// that have not yet been passed along the filter chain.\n+  ///\n+  /// It is an error to return resumeIteration if iteration is not currently stopped, and it is\n+  /// an error to include headers if headers have already been forwarded to the next filter\n+  /// (i.e. iteration was stopped during an on*Data invocation instead of on*Headers). It is also\n+  /// an error to include data or trailers if endStream was previously sent or if trailers have", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDc1MzcyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              /// It is an error to return ResumeIteration if iteration is not currently stopped, and it is\n          \n          \n            \n              /// It is an error to return resumeIteration if iteration is not currently stopped, and it is", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470753721", "createdAt": "2020-08-14T17:18:48Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/FilterTrailersStatus.swift", "diffHunk": "@@ -1,12 +1,24 @@\n+import Foundation\n+\n /// Status returned by filters when transmitting or receiving trailers.\n @frozen\n-public enum FilterTrailersStatus<T: Headers>: Equatable {\n+public enum FilterTrailersStatus<T: Headers, U: Headers>: Equatable {\n   /// Continue filter chain iteration, passing the provided trailers through.\n-  case `continue`(T)\n+  case `continue`(U)\n \n   /// Do not iterate to any of the remaining filters in the chain with trailers.\n   ///\n-  /// Calling `continueRequest()`/`continueResponse()` MUST occur when continued filter iteration\n+  /// Because trailers are by definition the last HTTP entity of a request or response, only\n+  /// asynchronous filters support resumption after returning StopIteration from on*Trailers.\n+  /// Calling `resumeRequest()`/`resumeResponse()` MUST occur if continued filter iteration\n   /// is desired.\n-  case stopIteration(T)\n+  case stopIteration\n+\n+  /// Resume previously-stopped iteration, possibly forwarding headers and data if iteration was\n+  /// stopped during an on*Headers or on*Data invocation.\n+  ///\n+  /// It is an error to return ResumeIteration if iteration is not currently stopped, and it is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODA1MTIz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467805123", "createdAt": "2020-08-14T18:49:54Z", "commit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODo0OTo1NFrOHA_7bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODo0OTo1NFrOHA_7bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwOTQ1Mg==", "bodyText": "Something I noticed while testing out these interfaces on a filter migration is that it's not immediately obvious to the consumer that returning .resumeIteration(...) does not call onResumeIteration() - only calling resumeRequest() does. Thoughts on how we could clarify that either through naming or documentation?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#discussion_r470809452", "createdAt": "2020-08-14T18:49:54Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/FilterDataStatus.swift", "diffHunk": "@@ -35,4 +35,12 @@ public enum FilterDataStatus: Equatable {\n   /// This may be called by filters which must parse a larger block of the incoming data before\n   /// continuing processing, and will handle their own buffering.\n   case stopIterationNoBuffer\n+\n+  /// Resume previously-stopped iteration, possibly forwarding headers if iteration was stopped\n+  /// during an on*Headers invocation.\n+  ///\n+  /// It is an error to return `resumeIteration` if iteration is not currently stopped, and it is\n+  /// an error to include headers if headers have already been forwarded to the next filter\n+  /// (i.e. iteration was stopped during an on*Data invocation instead of on*Headers).\n+  case resumeIteration(headers: T? = nil, data: Data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3ff051216c634865382e6744e850f5dc7c1592"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODY4NTY4", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467868568", "createdAt": "2020-08-14T20:53:02Z", "commit": {"oid": "ab091137f03890a5f4e0204085999ad322e56c3a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc73a5e7208c8134b03d2aa4289cbf7620194627", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/dc73a5e7208c8134b03d2aa4289cbf7620194627", "committedDate": "2020-08-15T01:50:53Z", "message": "complex filters: add ResumeIteration status\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0e2410d837741f3a5f8cc50ae5ffd723c16a7f6", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b0e2410d837741f3a5f8cc50ae5ffd723c16a7f6", "committedDate": "2020-08-15T01:50:53Z", "message": "missed removing associated value\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b79b74c6edc9f01046444534668b2364d7f462b9", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b79b74c6edc9f01046444534668b2364d7f462b9", "committedDate": "2020-08-15T01:50:53Z", "message": "add onResume\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eab18226bc4d44ef7f73c669e5a7ff3355f3e1f4", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/eab18226bc4d44ef7f73c669e5a7ff3355f3e1f4", "committedDate": "2020-08-15T01:50:54Z", "message": "introduce async filter interfaces\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f871efe68473cacc49e938322c73c52425260899", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/f871efe68473cacc49e938322c73c52425260899", "committedDate": "2020-08-15T01:50:54Z", "message": "wip updating for onResume handling\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0b047c82a4fae1415cbe848e6c551750ab530ed", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/f0b047c82a4fae1415cbe848e6c551750ab530ed", "committedDate": "2020-08-15T01:50:54Z", "message": "finish updating swift types\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26ea6bd58ebb6b57e74c6484cd262f187457a256", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/26ea6bd58ebb6b57e74c6484cd262f187457a256", "committedDate": "2020-08-15T01:50:54Z", "message": "update kotlin statuses\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d01a4bf2d49f0a2004905aad84715777e4bb394", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/7d01a4bf2d49f0a2004905aad84715777e4bb394", "committedDate": "2020-08-15T01:50:54Z", "message": "import and comment\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac643167b9e344be10a4fdf9472ca7fc241d363e", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/ac643167b9e344be10a4fdf9472ca7fc241d363e", "committedDate": "2020-08-15T01:50:54Z", "message": "kotlin signatures\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "637507df1d2cbdcbad63c1e67e4208eeebb67b8b", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/637507df1d2cbdcbad63c1e67e4208eeebb67b8b", "committedDate": "2020-08-15T01:50:54Z", "message": "swift missing imports\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfaa8e951533db1f8e5697b515e22299e7b9f8b2", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/cfaa8e951533db1f8e5697b515e22299e7b9f8b2", "committedDate": "2020-08-15T01:50:54Z", "message": "swift compiles\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba301d4e2ff9a606e74704e5078edc438d5f02bc", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/ba301d4e2ff9a606e74704e5078edc438d5f02bc", "committedDate": "2020-08-15T01:50:54Z", "message": "kotlin compiles\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33b178e107eb93c3c8b02f70dcad9f8de9f6dc2c", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/33b178e107eb93c3c8b02f70dcad9f8de9f6dc2c", "committedDate": "2020-08-15T01:50:54Z", "message": "improve comments and formatting\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3ba880797b53a8e20f0f1697fe74e40fa9d5068", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/b3ba880797b53a8e20f0f1697fe74e40fa9d5068", "committedDate": "2020-08-15T01:50:54Z", "message": "more docstring updates\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86af2eb3a6c3ff6178c5af355e2f24ec3f95aa6d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/86af2eb3a6c3ff6178c5af355e2f24ec3f95aa6d", "committedDate": "2020-08-15T01:50:54Z", "message": "further docstring updates\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a0b054f3359799f355ef57e9d50daa059a24fdd", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/9a0b054f3359799f355ef57e9d50daa059a24fdd", "committedDate": "2020-08-15T01:50:54Z", "message": "more docstring work\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa6b1226732daf2b3167123bb5c70899eed6818a", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/fa6b1226732daf2b3167123bb5c70899eed6818a", "committedDate": "2020-08-15T01:50:54Z", "message": "fix type\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769451319ae6429270f9e5d5ffc8d49544e63517", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/769451319ae6429270f9e5d5ffc8d49544e63517", "committedDate": "2020-08-15T01:50:54Z", "message": "format and fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f9061088d0a1d07b81c8c88a7d673b871453096", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/1f9061088d0a1d07b81c8c88a7d673b871453096", "committedDate": "2020-08-15T01:50:54Z", "message": "fix Swift example app; updates to comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bef7a2b23aa89b06340b894d9ae5d0d01c810e0", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/1bef7a2b23aa89b06340b894d9ae5d0d01c810e0", "committedDate": "2020-08-15T01:50:54Z", "message": "add parameter documentation to filter statuses\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "677da2cd32226bea00f4d1430e0afc174e2634b6", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/677da2cd32226bea00f4d1430e0afc174e2634b6", "committedDate": "2020-08-15T01:50:54Z", "message": "further updates to docstrings\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd1ee9862a93506e2f305971093c285f765ce392", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/fd1ee9862a93506e2f305971093c285f765ce392", "committedDate": "2020-08-15T01:50:54Z", "message": "minor correction\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ad9c7e2cb9d01e07becac9861a3e4fd7303dc4d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/2ad9c7e2cb9d01e07becac9861a3e4fd7303dc4d", "committedDate": "2020-08-15T01:50:54Z", "message": "trailing whitespace\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6964a48c66a9f22137b42d8cb787ab5cbd2ac1d5", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6964a48c66a9f22137b42d8cb787ab5cbd2ac1d5", "committedDate": "2020-08-15T01:50:54Z", "message": "add missing import\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1953be2d20137e78ca1516be6c04b401208b0b88", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/1953be2d20137e78ca1516be6c04b401208b0b88", "committedDate": "2020-08-15T01:42:09Z", "message": "add missing import\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "6964a48c66a9f22137b42d8cb787ab5cbd2ac1d5", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/6964a48c66a9f22137b42d8cb787ab5cbd2ac1d5", "committedDate": "2020-08-15T01:50:54Z", "message": "add missing import\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e580306ac8620088b2e43c7d1307f3067dcbf85", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/1e580306ac8620088b2e43c7d1307f3067dcbf85", "committedDate": "2020-08-15T01:57:34Z", "message": "fix kotlin demo app\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3OTM5MTA2", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1029#pullrequestreview-467939106", "createdAt": "2020-08-15T02:02:07Z", "commit": {"oid": "1e580306ac8620088b2e43c7d1307f3067dcbf85"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59247793777f651c8f9a67cd4c57eb6bc78a2877", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/59247793777f651c8f9a67cd4c57eb6bc78a2877", "committedDate": "2020-08-15T02:56:39Z", "message": "kotlin lint again\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "343cfbd2fed5059927911177466f8aa69e9baeb6", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/343cfbd2fed5059927911177466f8aa69e9baeb6", "committedDate": "2020-08-15T02:58:13Z", "message": "fix swift app\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4185, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}