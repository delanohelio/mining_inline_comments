{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0MDI2NzEx", "number": 1202, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDowNTo1NFrOFCDSEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTozNDoyMFrOFNYXHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3Njk1MjQ5OnYy", "diffSide": "RIGHT", "path": "examples/swift/hello_world/DemoStringAccessor.swift", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDowNTo1NFrOIBAnrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QyMTo0NzoxOVrOIIKENw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTY0Ng==", "bodyText": "@rebello95 do I need a swift protocol to be able to useEnvoyStringAccessor objc protocol on user defined accessors?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r537929646", "createdAt": "2020-12-08T00:05:54Z", "author": {"login": "junr03"}, "path": "examples/swift/hello_world/DemoStringAccessor.swift", "diffHunk": "@@ -0,0 +1,9 @@\n+import Envoy\n+import Foundation\n+\n+/// Example of a simple HTTP filter that adds a response header.\n+struct DemoStringAccessor: EnvoyStringAccessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e77f97118d3008a0e07d70d3ad1a1048495b0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzNjg4OQ==", "bodyText": "Sorry can you elaborate? I'm not sure what you're asking", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r537936889", "createdAt": "2020-12-08T00:24:27Z", "author": {"login": "rebello95"}, "path": "examples/swift/hello_world/DemoStringAccessor.swift", "diffHunk": "@@ -0,0 +1,9 @@\n+import Envoy\n+import Foundation\n+\n+/// Example of a simple HTTP filter that adds a response header.\n+struct DemoStringAccessor: EnvoyStringAccessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTY0Ng=="}, "originalCommit": {"oid": "f4e77f97118d3008a0e07d70d3ad1a1048495b0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc4NTExOA==", "bodyText": "The high level question is: I want DemoStringAccessor to implement the EnvoyStringAccessor interface, but I am not sure how to import EnvoyStringAccessor to this file.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r538785118", "createdAt": "2020-12-08T20:31:20Z", "author": {"login": "junr03"}, "path": "examples/swift/hello_world/DemoStringAccessor.swift", "diffHunk": "@@ -0,0 +1,9 @@\n+import Envoy\n+import Foundation\n+\n+/// Example of a simple HTTP filter that adds a response header.\n+struct DemoStringAccessor: EnvoyStringAccessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTY0Ng=="}, "originalCommit": {"oid": "f4e77f97118d3008a0e07d70d3ad1a1048495b0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODc5MTE3OQ==", "bodyText": "Ah, you won't be able to do that because we only expose Swift types externally from Envoy.framework. You'd need to declare a public protocol in Swift instead. However, per my comments below I still think we should be registering lambdas/closures instead of a type with a getString() method", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r538791179", "createdAt": "2020-12-08T20:42:02Z", "author": {"login": "rebello95"}, "path": "examples/swift/hello_world/DemoStringAccessor.swift", "diffHunk": "@@ -0,0 +1,9 @@\n+import Envoy\n+import Foundation\n+\n+/// Example of a simple HTTP filter that adds a response header.\n+struct DemoStringAccessor: EnvoyStringAccessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTY0Ng=="}, "originalCommit": {"oid": "f4e77f97118d3008a0e07d70d3ad1a1048495b0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczMzY2OQ==", "bodyText": "@rebello95 finally having the space to come back to this. The idea here is that the EnvoyStringAccessor protocol/interface will eventually be made into a generic getter/setter of arbitrary types across the bridge layer (#1192). So I wanted to have a concrete type rather than free-floating lambdas.\nHowever, I can see us exposing the engine builder API as registering a lambda, and then the objc code builds an object around it. The only friction is that I would need to redo the kotlin code to maintain cross-platform homogeneity.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r544733669", "createdAt": "2020-12-17T01:02:11Z", "author": {"login": "junr03"}, "path": "examples/swift/hello_world/DemoStringAccessor.swift", "diffHunk": "@@ -0,0 +1,9 @@\n+import Envoy\n+import Foundation\n+\n+/// Example of a simple HTTP filter that adds a response header.\n+struct DemoStringAccessor: EnvoyStringAccessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTY0Ng=="}, "originalCommit": {"oid": "f4e77f97118d3008a0e07d70d3ad1a1048495b0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDczODIyNQ==", "bodyText": "Yea personally I'd opt towards the lambda option since that's more consistent with the other APIs Envoy Mobile exposes today (request/response/stream callbacks, for example), and it solves the ambiguity concern around something called getString(). @buildbreaker do you have thoughts?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r544738225", "createdAt": "2020-12-17T01:14:34Z", "author": {"login": "rebello95"}, "path": "examples/swift/hello_world/DemoStringAccessor.swift", "diffHunk": "@@ -0,0 +1,9 @@\n+import Envoy\n+import Foundation\n+\n+/// Example of a simple HTTP filter that adds a response header.\n+struct DemoStringAccessor: EnvoyStringAccessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTY0Ng=="}, "originalCommit": {"oid": "f4e77f97118d3008a0e07d70d3ad1a1048495b0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTM3NzM1Ng==", "bodyText": "@rebello95 Yeah, I remember chatting with @junr03 on this. He wanted to use an object/class here because it allows us to extend/add more accessors for data. Would you be open to a rename of said object instead?\nOne alternative that I just thought about is if we have a lambda like ()->AccessorObject and have the AccessorObject just be the extensible metadata object.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r545377356", "createdAt": "2020-12-17T20:18:27Z", "author": {"login": "buildbreaker"}, "path": "examples/swift/hello_world/DemoStringAccessor.swift", "diffHunk": "@@ -0,0 +1,9 @@\n+import Envoy\n+import Foundation\n+\n+/// Example of a simple HTTP filter that adds a response header.\n+struct DemoStringAccessor: EnvoyStringAccessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTY0Ng=="}, "originalCommit": {"oid": "f4e77f97118d3008a0e07d70d3ad1a1048495b0e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTQyNDQzOQ==", "bodyText": "Talked with @junr03 about this a bit more offline (thank you both for responding). I'm ok with this general approach of allowing the consumer to register instances of different types that conform to this relatively generic protocol, assuming the intent is that those types are registered within specific contexts.\nMaybe the naming of this would help improve a bit?\nprotocol EnvoyStringAccessor: NSObject {\n    func envoyStringValue() -> String\n}\nAlso it sounds like Java is currently exposing this interface up to the platform; we should switch that over to Kotlin", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r545424439", "createdAt": "2020-12-17T21:47:19Z", "author": {"login": "rebello95"}, "path": "examples/swift/hello_world/DemoStringAccessor.swift", "diffHunk": "@@ -0,0 +1,9 @@\n+import Envoy\n+import Foundation\n+\n+/// Example of a simple HTTP filter that adds a response header.\n+struct DemoStringAccessor: EnvoyStringAccessor {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkyOTY0Ng=="}, "originalCommit": {"oid": "f4e77f97118d3008a0e07d70d3ad1a1048495b0e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NzAwNzIxOnYy", "diffSide": "RIGHT", "path": "library/objective-c/EnvoyEngineImpl.m", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDoyNToxN1rOIBBFcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMDoyNToxN1rOIBBFcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzkzNzI2Ng==", "bodyText": "Have we considered registering a lambda/closure that returns a string instead? That'll probably be easier to interact with on the platform layer, since getString() is a little overly generic IMO", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r537937266", "createdAt": "2020-12-08T00:25:17Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -261,6 +268,17 @@ - (int)registerFilterFactory:(EnvoyHTTPFilterFactory *)filterFactory {\n   return kEnvoySuccess;\n }\n \n+- (int)registerStringAccessor:(NSString *)name\n+               stringAccessor:(EnvoyStringAccessor *)stringAccessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4e77f97118d3008a0e07d70d3ad1a1048495b0e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzAxMjg4OnYy", "diffSide": "RIGHT", "path": "library/objective-c/EnvoyEngineImpl.m", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMDo1N1rOII3oWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMDo1N1rOII3oWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MDk2OQ==", "bodyText": "You could use a for loop here like on line 313 above \ud83e\udd37\ud83c\udffd\u200d\u2642\ufe0f", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r546170969", "createdAt": "2020-12-19T01:30:57Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -297,6 +314,10 @@ - (int)runWithConfig:(EnvoyConfiguration *)config\n     [self registerFilterFactory:filterFactory];\n   }\n \n+  [config.stringAccessors enumerateKeysAndObjectsUsingBlock:^(id name, id accessor, BOOL *stop) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01d50feb5d75b591e42363f55e10b67c23f2004"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzAxMjkyOnYy", "diffSide": "RIGHT", "path": "library/objective-c/EnvoyEngineImpl.m", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMTowMVrOII3oYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMTowMVrOII3oYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MDk3OA==", "bodyText": "Same here", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r546170978", "createdAt": "2020-12-19T01:31:01Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -313,6 +334,10 @@ - (int)runWithTemplate:(NSString *)yaml\n     [self registerFilterFactory:filterFactory];\n   }\n \n+  [config.stringAccessors enumerateKeysAndObjectsUsingBlock:^(id name, id accessor, BOOL *stop) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01d50feb5d75b591e42363f55e10b67c23f2004"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzAxNDE1OnYy", "diffSide": "RIGHT", "path": "library/swift/test/EngineBuilderTests.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMjoxNlrOII3pBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMjoxNlrOII3pBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTE0Mg==", "bodyText": "A better test might be doing XCTAssertEqual(\"hello\", config.stringAccessors. getEnvoyString())", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r546171142", "createdAt": "2020-12-19T01:32:16Z", "author": {"login": "rebello95"}, "path": "library/swift/test/EngineBuilderTests.swift", "diffHunk": "@@ -199,6 +199,20 @@ final class EngineBuilderTests: XCTestCase {\n     self.waitForExpectations(timeout: 0.01)\n   }\n \n+  func testAddingStringAccessorToConfigurationWhenRunningEnvoy() throws {\n+    let expectation = self.expectation(description: \"Run called with expected data\")\n+    MockEnvoyEngine.onRunWithConfig = { config, _ in\n+      XCTAssertEqual(1, config.stringAccessors.count)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01d50feb5d75b591e42363f55e10b67c23f2004"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMzAxNDQ3OnYy", "diffSide": "RIGHT", "path": "library/swift/test/EngineBuilderTests.swift", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMjozMFrOII3pLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQwMTozMjozMFrOII3pLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjE3MTE4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  .addStringAccessor(name: \"name\", accessor: { return \"hello\"})\n          \n          \n            \n                  .addStringAccessor(name: \"name\", accessor: { \"hello\" })\n          \n      \n    \n    \n  \n\nThis is equivalent if you want", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r546171181", "createdAt": "2020-12-19T01:32:30Z", "author": {"login": "rebello95"}, "path": "library/swift/test/EngineBuilderTests.swift", "diffHunk": "@@ -199,6 +199,20 @@ final class EngineBuilderTests: XCTestCase {\n     self.waitForExpectations(timeout: 0.01)\n   }\n \n+  func testAddingStringAccessorToConfigurationWhenRunningEnvoy() throws {\n+    let expectation = self.expectation(description: \"Run called with expected data\")\n+    MockEnvoyEngine.onRunWithConfig = { config, _ in\n+      XCTAssertEqual(1, config.stringAccessors.count)\n+      expectation.fulfill()\n+    }\n+\n+    _ = try EngineBuilder()\n+      .addEngineType(MockEnvoyEngine.self)\n+      .addStringAccessor(name: \"name\", accessor: { return \"hello\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01d50feb5d75b591e42363f55e10b67c23f2004"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NTc0OTQxOnYy", "diffSide": "RIGHT", "path": "library/objective-c/EnvoyEngineImpl.m", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxOTozNDoyMFrOIRkMcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQyMjoxODozMVrOIRpeYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4OTcxMw==", "bodyText": "Is this true in the context of a string accessor? Seems like it should be deallocated after usage since this is creating new strings each time it's accessed?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r555289713", "createdAt": "2021-01-11T19:34:20Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -284,6 +291,16 @@ - (int)registerFilterFactory:(EnvoyHTTPFilterFactory *)filterFactory {\n   return kEnvoySuccess;\n }\n \n+- (int)registerStringAccessor:(NSString *)name accessor:(EnvoyStringAccessor *)accessor {\n+  // TODO(goaway): Everything here leaks, but it's all be tied to the life of the engine.\n+  // This will need to be updated for https://github.com/lyft/envoy-mobile/issues/332", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac0cecf40ff943fa3f16ed92f5c9579b08925ea4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM1OTIwNQ==", "bodyText": "yeah, still true. The accessor is the object being leaked, and it should be cleaned up.\nThe strings themselves get managed via the existing bridging utilities; the strings get boxed in envoy_data and that gets managed as an envoy buffer, which in turn cleans everything (all the way to the platform layer) when it is destroyed.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r555359205", "createdAt": "2021-01-11T21:43:44Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -284,6 +291,16 @@ - (int)registerFilterFactory:(EnvoyHTTPFilterFactory *)filterFactory {\n   return kEnvoySuccess;\n }\n \n+- (int)registerStringAccessor:(NSString *)name accessor:(EnvoyStringAccessor *)accessor {\n+  // TODO(goaway): Everything here leaks, but it's all be tied to the life of the engine.\n+  // This will need to be updated for https://github.com/lyft/envoy-mobile/issues/332", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4OTcxMw=="}, "originalCommit": {"oid": "ac0cecf40ff943fa3f16ed92f5c9579b08925ea4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTM3NjIyNw==", "bodyText": "got it, sounds good", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1202#discussion_r555376227", "createdAt": "2021-01-11T22:18:31Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -284,6 +291,16 @@ - (int)registerFilterFactory:(EnvoyHTTPFilterFactory *)filterFactory {\n   return kEnvoySuccess;\n }\n \n+- (int)registerStringAccessor:(NSString *)name accessor:(EnvoyStringAccessor *)accessor {\n+  // TODO(goaway): Everything here leaks, but it's all be tied to the life of the engine.\n+  // This will need to be updated for https://github.com/lyft/envoy-mobile/issues/332", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTI4OTcxMw=="}, "originalCommit": {"oid": "ac0cecf40ff943fa3f16ed92f5c9579b08925ea4"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 538, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}