{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0OTk2ODk5", "number": 967, "title": "filters: instantiate filters on a per-stream basis", "bodyText": "Description: Changes filter instantiation to be a per-stream basis, across the core, bridge, and iOS platform layers. Also improves usage of CFBridge* functions to be better in line with their intent.\nRisk Level: Moderate\nTesting: Local end-to-end", "createdAt": "2020-07-22T09:31:33Z", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967", "merged": true, "mergeCommit": {"oid": "eadd53e2920ba88778131c312c18fee338b56994"}, "closed": true, "closedAt": "2020-07-25T00:30:11Z", "author": {"login": "goaway"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3eFCJAFqTQ1MzUxOTU0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4L2blgFqTQ1NTIxODE2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNTE5NTQz", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#pullrequestreview-453519543", "createdAt": "2020-07-22T17:09:52Z", "commit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzowOTo1MlrOG1sGjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNzoxNDoyNFrOG1sROg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MDI4Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              ASSERT(platform_filter_.instance_context, \"init_filter must be called initially\");\n          \n          \n            \n              ASSERT(platform_filter_.instance_context, \"expected initialized filter context\");", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r458950287", "createdAt": "2020-07-22T17:09:52Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -20,18 +20,31 @@ PlatformBridgeFilterConfig::PlatformBridgeFilterConfig(\n           Api::External::retrieveApi(proto_config.platform_filter_name()))) {}\n \n PlatformBridgeFilter::PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config)\n-    : platform_filter_(config->platform_filter()) {}\n+    : platform_filter_(*config->platform_filter()) {\n+  platform_filter_.instance_context = platform_filter_.init_filter(platform_filter_.static_context);\n+\n+  ASSERT(platform_filter_.instance_context, \"init_filter unsuccessful\");\n+}\n+\n+void PlatformBridgeFilter::onDestroy() {\n+  ASSERT(platform_filter_.instance_context, \"init_filter must be called initially\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MDk3Nw==", "bodyText": "Same below. I think this is a bit clearer since technically init_filter can fail per the above assert", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r458950977", "createdAt": "2020-07-22T17:11:00Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -20,18 +20,31 @@ PlatformBridgeFilterConfig::PlatformBridgeFilterConfig(\n           Api::External::retrieveApi(proto_config.platform_filter_name()))) {}\n \n PlatformBridgeFilter::PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config)\n-    : platform_filter_(config->platform_filter()) {}\n+    : platform_filter_(*config->platform_filter()) {\n+  platform_filter_.instance_context = platform_filter_.init_filter(platform_filter_.static_context);\n+\n+  ASSERT(platform_filter_.instance_context, \"init_filter unsuccessful\");\n+}\n+\n+void PlatformBridgeFilter::onDestroy() {\n+  ASSERT(platform_filter_.instance_context, \"init_filter must be called initially\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MDI4Nw=="}, "originalCommit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MTc0Ng==", "bodyText": "Is this necessary?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r458951746", "createdAt": "2020-07-22T17:12:14Z", "author": {"login": "rebello95"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -66,40 +62,51 @@ static envoy_headers toNativeHeaders(EnvoyHeaders *headers) {\n   return (envoy_headers){length, header_array};\n }\n \n+static const void* ios_http_filter_init(const void *context) {\n+  EnvoyHTTPFilterFactory *filterFactory = (__bridge EnvoyHTTPFilterFactory *)context;\n+  EnvoyHTTPFilter *filter = filterFactory.create();\n+  return CFBridgingRetain(filter);\n+}\n+\n static envoy_filter_headers_status\n-ios_http_filter_on_request_headers(envoy_headers headers, bool end_stream, void *context) {\n+ios_http_filter_on_request_headers(envoy_headers headers, bool end_stream, const void *context) {\n   // TODO(goaway): optimize unmodified case\n-  ios_http_filter_context *c = (ios_http_filter_context *)context;\n-  if (c->filter.onRequestHeaders == nil) {\n+  EnvoyHTTPFilter *filter = (__bridge EnvoyHTTPFilter *)context;\n+  if (filter.onRequestHeaders == nil) {\n     return (envoy_filter_headers_status){/*status*/ kEnvoyFilterHeadersStatusContinue,\n                                          /*headers*/ headers};\n   }\n \n   EnvoyHeaders *platformHeaders = to_ios_headers(headers);\n   release_envoy_headers(headers);\n   // TODO(goaway): consider better solution for compound return\n-  NSArray *result = c->filter.onRequestHeaders(platformHeaders, end_stream);\n+  NSArray *result = filter.onRequestHeaders(platformHeaders, end_stream);\n   return (envoy_filter_headers_status){/*status*/ [result[0] intValue],\n                                        /*headers*/ toNativeHeaders(result[1])};\n }\n \n static envoy_filter_headers_status\n-ios_http_filter_on_response_headers(envoy_headers headers, bool end_stream, void *context) {\n+ios_http_filter_on_response_headers(envoy_headers headers, bool end_stream, const void *context) {\n   // TODO(goaway): optimize unmodified case\n-  ios_http_filter_context *c = (ios_http_filter_context *)context;\n-  if (c->filter.onResponseHeaders == nil) {\n+  EnvoyHTTPFilter *filter = (__bridge EnvoyHTTPFilter *)context;\n+  if (filter.onResponseHeaders == nil) {\n     return (envoy_filter_headers_status){/*status*/ kEnvoyFilterHeadersStatusContinue,\n                                          /*headers*/ headers};\n   }\n \n   EnvoyHeaders *platformHeaders = to_ios_headers(headers);\n   release_envoy_headers(headers);\n   // TODO(goaway): consider better solution for compound return\n-  NSArray *result = c->filter.onResponseHeaders(platformHeaders, end_stream);\n+  NSArray *result = filter.onResponseHeaders(platformHeaders, end_stream);\n   return (envoy_filter_headers_status){/*status*/ [result[0] intValue],\n                                        /*headers*/ toNativeHeaders(result[1])};\n }\n \n+static void ios_http_filter_release(const void *context) {\n+  CFRelease(context);\n+  return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODk1MzAxOA==", "bodyText": "I'd probably remove this and just it below using filterType.init()", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r458953018", "createdAt": "2020-07-22T17:14:24Z", "author": {"login": "rebello95"}, "path": "library/swift/src/filters/Filter.swift", "diffHunk": "@@ -4,14 +4,33 @@ import Foundation\n /// Interface representing a filter. See `RequestFilter` and `ResponseFilter` for more details.\n public protocol Filter {\n   /// A unique name for a filter implementation. Needed for extension registration.\n-  var name: String { get }\n+  static var name: String { get }\n+\n+  /// Required initializer for internal creation.\n+  init()\n+}\n+\n+extension Filter {\n+  static func create() -> EnvoyHTTPFilter {\n+    return EnvoyHTTPFilter(filter: Self.init())\n+  }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzNzE0ODY4", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#pullrequestreview-453714868", "createdAt": "2020-07-22T21:58:31Z", "commit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMTo1ODozMlrOG11thg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQyMjoxNjo0OFrOG12JJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwNzcxOA==", "bodyText": "should this be a const ref to the struct? Ah nvm, I understand now. Each c++ filter instance gets a fresh copy of the struct, and then changes the instance_context_ pointer to point to whatever the init function returns. But all the other fields in the copied struct refer to static fields.\nCan we spell the model a little bit more in inline comments? For posterity, and for our personal reference.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r459107718", "createdAt": "2020-07-22T21:58:32Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.h", "diffHunk": "@@ -50,7 +53,7 @@ class PlatformBridgeFilter final : public Http::PassThroughFilter {\n private:\n   Http::FilterHeadersStatus onHeaders(Http::HeaderMap& headers, bool end_stream,\n                                       envoy_filter_on_headers_f on_headers);\n-  const envoy_http_filter* platform_filter_;\n+  envoy_http_filter platform_filter_;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTEwOTA4NA==", "bodyText": "should we use similar verbs between here and the bridge (init)?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r459109084", "createdAt": "2020-07-22T22:01:44Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngine.h", "diffHunk": "@@ -68,14 +68,22 @@ extern const int kEnvoyFilterHeadersStatusStopAllIterationAndBuffer;\n \n @interface EnvoyHTTPFilter : NSObject\n \n-@property (nonatomic, strong) NSString *name;\n-\n @property (nonatomic, strong) NSArray * (^onRequestHeaders)(EnvoyHeaders *headers, BOOL endStream);\n \n @property (nonatomic, strong) NSArray * (^onResponseHeaders)(EnvoyHeaders *headers, BOOL endStream);\n \n @end\n \n+#pragma mark - EnvoyHTTPFilterFactory\n+\n+@interface EnvoyHTTPFilterFactory : NSObject\n+\n+@property (nonatomic, strong) NSString *filterName;\n+\n+@property (nonatomic, strong) EnvoyHTTPFilter * (^create)();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMDk2OA==", "bodyText": "what does the __bridge in the cast mean?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r459110968", "createdAt": "2020-07-22T22:06:37Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -66,40 +62,51 @@ static envoy_headers toNativeHeaders(EnvoyHeaders *headers) {\n   return (envoy_headers){length, header_array};\n }\n \n+static const void* ios_http_filter_init(const void *context) {\n+  EnvoyHTTPFilterFactory *filterFactory = (__bridge EnvoyHTTPFilterFactory *)context;\n+  EnvoyHTTPFilter *filter = filterFactory.create();\n+  return CFBridgingRetain(filter);\n+}\n+\n static envoy_filter_headers_status\n-ios_http_filter_on_request_headers(envoy_headers headers, bool end_stream, void *context) {\n+ios_http_filter_on_request_headers(envoy_headers headers, bool end_stream, const void *context) {\n   // TODO(goaway): optimize unmodified case\n-  ios_http_filter_context *c = (ios_http_filter_context *)context;\n-  if (c->filter.onRequestHeaders == nil) {\n+  EnvoyHTTPFilter *filter = (__bridge EnvoyHTTPFilter *)context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExMTQ0NA==", "bodyText": "how come the pointer doen't need dereference here?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r459111444", "createdAt": "2020-07-22T22:07:48Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -66,40 +62,51 @@ static envoy_headers toNativeHeaders(EnvoyHeaders *headers) {\n   return (envoy_headers){length, header_array};\n }\n \n+static const void* ios_http_filter_init(const void *context) {\n+  EnvoyHTTPFilterFactory *filterFactory = (__bridge EnvoyHTTPFilterFactory *)context;\n+  EnvoyHTTPFilter *filter = filterFactory.create();\n+  return CFBridgingRetain(filter);\n+}\n+\n static envoy_filter_headers_status\n-ios_http_filter_on_request_headers(envoy_headers headers, bool end_stream, void *context) {\n+ios_http_filter_on_request_headers(envoy_headers headers, bool end_stream, const void *context) {\n   // TODO(goaway): optimize unmodified case\n-  ios_http_filter_context *c = (ios_http_filter_context *)context;\n-  if (c->filter.onRequestHeaders == nil) {\n+  EnvoyHTTPFilter *filter = (__bridge EnvoyHTTPFilter *)context;\n+  if (filter.onRequestHeaders == nil) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTExNDc5MQ==", "bodyText": "I think we talked about it in one of the earlier PRs, but could we delete the duplication and dispatch to common code between request and reply?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r459114791", "createdAt": "2020-07-22T22:16:48Z", "author": {"login": "junr03"}, "path": "library/objective-c/EnvoyEngineImpl.m", "diffHunk": "@@ -66,40 +62,51 @@ static envoy_headers toNativeHeaders(EnvoyHeaders *headers) {\n   return (envoy_headers){length, header_array};\n }\n \n+static const void* ios_http_filter_init(const void *context) {\n+  EnvoyHTTPFilterFactory *filterFactory = (__bridge EnvoyHTTPFilterFactory *)context;\n+  EnvoyHTTPFilter *filter = filterFactory.create();\n+  return CFBridgingRetain(filter);\n+}\n+\n static envoy_filter_headers_status\n-ios_http_filter_on_request_headers(envoy_headers headers, bool end_stream, void *context) {\n+ios_http_filter_on_request_headers(envoy_headers headers, bool end_stream, const void *context) {\n   // TODO(goaway): optimize unmodified case\n-  ios_http_filter_context *c = (ios_http_filter_context *)context;\n-  if (c->filter.onRequestHeaders == nil) {\n+  EnvoyHTTPFilter *filter = (__bridge EnvoyHTTPFilter *)context;\n+  if (filter.onRequestHeaders == nil) {\n     return (envoy_filter_headers_status){/*status*/ kEnvoyFilterHeadersStatusContinue,\n                                          /*headers*/ headers};\n   }\n \n   EnvoyHeaders *platformHeaders = to_ios_headers(headers);\n   release_envoy_headers(headers);\n   // TODO(goaway): consider better solution for compound return\n-  NSArray *result = c->filter.onRequestHeaders(platformHeaders, end_stream);\n+  NSArray *result = filter.onRequestHeaders(platformHeaders, end_stream);\n   return (envoy_filter_headers_status){/*status*/ [result[0] intValue],\n                                        /*headers*/ toNativeHeaders(result[1])};\n }\n \n static envoy_filter_headers_status\n-ios_http_filter_on_response_headers(envoy_headers headers, bool end_stream, void *context) {\n+ios_http_filter_on_response_headers(envoy_headers headers, bool end_stream, const void *context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e37f31065e1ab205385f2dac10785cdc0f2a7ba6"}, "originalPosition": 44}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4712ec1ba358524d7b20d9a7b9b7140c9f0c1f6", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c4712ec1ba358524d7b20d9a7b9b7140c9f0c1f6", "committedDate": "2020-07-22T23:31:30Z", "message": "filters: instantiate filters on a per-stream basis\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c660ed9da21411ad9615f180aa2f59f7bfc79456", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c660ed9da21411ad9615f180aa2f59f7bfc79456", "committedDate": "2020-07-22T23:31:30Z", "message": "update example app\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b443fb7acb0ea2847f3d3f9a302e3d07991fae3", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3b443fb7acb0ea2847f3d3f9a302e3d07991fae3", "committedDate": "2020-07-22T23:31:30Z", "message": "updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a57d22708641b202f18e85b96779f24171e7db4", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3a57d22708641b202f18e85b96779f24171e7db4", "committedDate": "2020-07-22T23:36:19Z", "message": "fix up on_data\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "336d9073749e129f5acb3885c4b78d57a4eb6823", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/336d9073749e129f5acb3885c4b78d57a4eb6823", "committedDate": "2020-07-22T23:25:57Z", "message": "updates for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}, "afterCommit": {"oid": "3a57d22708641b202f18e85b96779f24171e7db4", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/3a57d22708641b202f18e85b96779f24171e7db4", "committedDate": "2020-07-22T23:36:19Z", "message": "fix up on_data\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2e4637239e28276062c56bc37cc84fecc32f24d", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/c2e4637239e28276062c56bc37cc84fecc32f24d", "committedDate": "2020-07-23T00:18:20Z", "message": "format fixes\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdc0af67d3e3dd261e62a1d3914bc2382e446868", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/bdc0af67d3e3dd261e62a1d3914bc2382e446868", "committedDate": "2020-07-24T02:54:20Z", "message": "fix obj-c app and support static implementations\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MTQwMTQx", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#pullrequestreview-455140141", "createdAt": "2020-07-24T19:38:26Z", "commit": {"oid": "bdc0af67d3e3dd261e62a1d3914bc2382e446868"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTozODoyN1rOG27iOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOTo0MTo1MFrOG27oCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MTcwNw==", "bodyText": "Is this a feature we want to support? i.e do we want it to be possible to have static filters? While potentially useful in some cases I worry that giving options might make the entire affair a little more confusing.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r460251707", "createdAt": "2020-07-24T19:38:27Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -21,18 +21,47 @@ PlatformBridgeFilterConfig::PlatformBridgeFilterConfig(\n           Api::External::retrieveApi(proto_config.platform_filter_name()))) {}\n \n PlatformBridgeFilter::PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config)\n-    : platform_filter_(config->platform_filter()) {}\n+    : platform_filter_(*config->platform_filter()) {\n+  // The initialization above sets platform_filter_ to a copy of the struct stored on the config.\n+  // In the typical case, this will represent a filter implementation that needs to be intantiated.\n+  // static_context will contain the necessary platform-specific mechanism to produce a filter\n+  // instance. instance_context will initially be null, but after initialization, set to the\n+  // context needed for actual filter invocations.\n+\n+  // We treat a null initializer as a static implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdc0af67d3e3dd261e62a1d3914bc2382e446868"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MjA2Mw==", "bodyText": "can we interpolate the filter name here? Makes for easier crash debugging", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r460252063", "createdAt": "2020-07-24T19:39:17Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -21,18 +21,47 @@ PlatformBridgeFilterConfig::PlatformBridgeFilterConfig(\n           Api::External::retrieveApi(proto_config.platform_filter_name()))) {}\n \n PlatformBridgeFilter::PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config)\n-    : platform_filter_(config->platform_filter()) {}\n+    : platform_filter_(*config->platform_filter()) {\n+  // The initialization above sets platform_filter_ to a copy of the struct stored on the config.\n+  // In the typical case, this will represent a filter implementation that needs to be intantiated.\n+  // static_context will contain the necessary platform-specific mechanism to produce a filter\n+  // instance. instance_context will initially be null, but after initialization, set to the\n+  // context needed for actual filter invocations.\n+\n+  // We treat a null initializer as a static implementation.\n+  if (platform_filter_.init_filter == nullptr) {\n+    // Make static context available to invocations, in lieu of instatiated context.\n+    platform_filter_.instance_context = platform_filter_.static_context;\n+    return;\n+  }\n+\n+  // Set the instance_context to the result of the initialization call. Cleanup will ultimately\n+  // occur during in the onDestroy() invocation below.\n+  platform_filter_.instance_context = platform_filter_.init_filter(platform_filter_.static_context);\n+\n+  ASSERT(platform_filter_.instance_context, \"init_filter unsuccessful\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdc0af67d3e3dd261e62a1d3914bc2382e446868"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MjQyNA==", "bodyText": "I liked being able to tell that reaching a nullptr here was a programming mistake.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r460252424", "createdAt": "2020-07-24T19:40:06Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -21,18 +21,47 @@ PlatformBridgeFilterConfig::PlatformBridgeFilterConfig(\n           Api::External::retrieveApi(proto_config.platform_filter_name()))) {}\n \n PlatformBridgeFilter::PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config)\n-    : platform_filter_(config->platform_filter()) {}\n+    : platform_filter_(*config->platform_filter()) {\n+  // The initialization above sets platform_filter_ to a copy of the struct stored on the config.\n+  // In the typical case, this will represent a filter implementation that needs to be intantiated.\n+  // static_context will contain the necessary platform-specific mechanism to produce a filter\n+  // instance. instance_context will initially be null, but after initialization, set to the\n+  // context needed for actual filter invocations.\n+\n+  // We treat a null initializer as a static implementation.\n+  if (platform_filter_.init_filter == nullptr) {\n+    // Make static context available to invocations, in lieu of instatiated context.\n+    platform_filter_.instance_context = platform_filter_.static_context;\n+    return;\n+  }\n+\n+  // Set the instance_context to the result of the initialization call. Cleanup will ultimately\n+  // occur during in the onDestroy() invocation below.\n+  platform_filter_.instance_context = platform_filter_.init_filter(platform_filter_.static_context);\n+\n+  ASSERT(platform_filter_.instance_context, \"init_filter unsuccessful\");\n+}\n+\n+void PlatformBridgeFilter::onDestroy() {\n+  // Allow nullptr to act as no-op. Also return if nothing was initialized.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdc0af67d3e3dd261e62a1d3914bc2382e446868"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI1MzE5Mw==", "bodyText": "Awesome this is great.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r460253193", "createdAt": "2020-07-24T19:41:50Z", "author": {"login": "junr03"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -21,18 +21,47 @@ PlatformBridgeFilterConfig::PlatformBridgeFilterConfig(\n           Api::External::retrieveApi(proto_config.platform_filter_name()))) {}\n \n PlatformBridgeFilter::PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config)\n-    : platform_filter_(config->platform_filter()) {}\n+    : platform_filter_(*config->platform_filter()) {\n+  // The initialization above sets platform_filter_ to a copy of the struct stored on the config.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bdc0af67d3e3dd261e62a1d3914bc2382e446868"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "538c8da2d443730d5440dc51c7dadf3b6ef65266", "author": {"user": {"login": "goaway", "name": "Mike Schore"}}, "url": "https://github.com/envoyproxy/envoy-mobile/commit/538c8da2d443730d5440dc51c7dadf3b6ef65266", "committedDate": "2020-07-24T22:25:44Z", "message": "update for comments\n\nSigned-off-by: Mike Schore <mike.schore@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjE4MTYy", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#pullrequestreview-455218162", "createdAt": "2020-07-24T22:33:26Z", "commit": {"oid": "538c8da2d443730d5440dc51c7dadf3b6ef65266"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjozMzoyNlrOG2_brg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQyMjozMzoyNlrOG2_brg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDMxNTU2Ng==", "bodyText": "Any reason not to make this an ASSERT?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/967#discussion_r460315566", "createdAt": "2020-07-24T22:33:26Z", "author": {"login": "rebello95"}, "path": "library/common/extensions/filters/http/platform_bridge/filter.cc", "diffHunk": "@@ -17,34 +17,37 @@ namespace PlatformBridge {\n \n PlatformBridgeFilterConfig::PlatformBridgeFilterConfig(\n     const envoymobile::extensions::filters::http::platform_bridge::PlatformBridge& proto_config)\n-    : platform_filter_(static_cast<envoy_http_filter*>(\n+    : filter_name_(proto_config.platform_filter_name()),\n+      platform_filter_(static_cast<envoy_http_filter*>(\n           Api::External::retrieveApi(proto_config.platform_filter_name()))) {}\n \n PlatformBridgeFilter::PlatformBridgeFilter(PlatformBridgeFilterConfigSharedPtr config)\n-    : platform_filter_(*config->platform_filter()) {\n+    : filter_name_(config->filter_name()), platform_filter_(*config->platform_filter()) {\n   // The initialization above sets platform_filter_ to a copy of the struct stored on the config.\n   // In the typical case, this will represent a filter implementation that needs to be intantiated.\n   // static_context will contain the necessary platform-specific mechanism to produce a filter\n   // instance. instance_context will initially be null, but after initialization, set to the\n   // context needed for actual filter invocations.\n \n-  // We treat a null initializer as a static implementation.\n+  // If init_filter is missing, zero out the rest of the struct for safety.\n   if (platform_filter_.init_filter == nullptr) {\n-    // Make static context available to invocations, in lieu of instatiated context.\n-    platform_filter_.instance_context = platform_filter_.static_context;\n+    ENVOY_LOG(debug, \"platform bridge filter: missing initializer for {}\", filter_name_);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "538c8da2d443730d5440dc51c7dadf3b6ef65266"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4113, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}