{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyODA2NzEy", "number": 1223, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMTo1NTowOVrOFMTrhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMjowMDoyMFrOFMTyCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NDQ5NjY5OnYy", "diffSide": "RIGHT", "path": "library/cc/engine.cc", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMTo1NTowOVrOIP93cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNDozNToyMFrOIRX7cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxMzE3MA==", "bodyText": "I don't think it needs to be a blocker or necessarily changed here, but I might consider putting these in an anonymous namespace instead of using private static functions.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1223#discussion_r553613170", "createdAt": "2021-01-07T21:55:09Z", "author": {"login": "goaway"}, "path": "library/cc/engine.cc", "diffHunk": "@@ -0,0 +1,42 @@\n+#include \"engine.h\"\n+\n+#include \"library/common/main_interface.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+Engine::Engine(envoy_engine_t engine, const std::string& configuration, LogLevel log_level,\n+               std::function<void()> on_engine_running)\n+    : engine_(engine), on_engine_running_(on_engine_running) {\n+  envoy_engine_callbacks callbacks{\n+      .on_engine_running = &Engine::c_on_engine_running,\n+      .on_exit = &Engine::c_on_exit,\n+      .context = this,\n+  };\n+\n+  run_engine(this->engine_, callbacks, configuration.c_str(),\n+             log_level_to_string(log_level).c_str());\n+\n+  this->stream_client_ = std::make_shared<StreamClient>(this->engine_);\n+  this->pulse_client_ = std::make_shared<PulseClient>();\n+}\n+\n+Engine::~Engine() { terminate_engine(this->engine_); }\n+\n+StreamClientSharedPtr Engine::stream_client() { return this->stream_client_; }\n+PulseClientSharedPtr Engine::pulse_client() { return this->pulse_client_; }\n+\n+void Engine::c_on_engine_running(void* context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "001420cc040c8c97a250865fa7fa80e1d517a317"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzY0MTA0OA==", "bodyText": "sounds good with me. to keep this consistent it's either got to be an update across this and #1218 or a fast follow. i'd prefer the latter", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1223#discussion_r553641048", "createdAt": "2021-01-07T22:55:54Z", "author": {"login": "crockeo"}, "path": "library/cc/engine.cc", "diffHunk": "@@ -0,0 +1,42 @@\n+#include \"engine.h\"\n+\n+#include \"library/common/main_interface.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+Engine::Engine(envoy_engine_t engine, const std::string& configuration, LogLevel log_level,\n+               std::function<void()> on_engine_running)\n+    : engine_(engine), on_engine_running_(on_engine_running) {\n+  envoy_engine_callbacks callbacks{\n+      .on_engine_running = &Engine::c_on_engine_running,\n+      .on_exit = &Engine::c_on_exit,\n+      .context = this,\n+  };\n+\n+  run_engine(this->engine_, callbacks, configuration.c_str(),\n+             log_level_to_string(log_level).c_str());\n+\n+  this->stream_client_ = std::make_shared<StreamClient>(this->engine_);\n+  this->pulse_client_ = std::make_shared<PulseClient>();\n+}\n+\n+Engine::~Engine() { terminate_engine(this->engine_); }\n+\n+StreamClientSharedPtr Engine::stream_client() { return this->stream_client_; }\n+PulseClientSharedPtr Engine::pulse_client() { return this->pulse_client_; }\n+\n+void Engine::c_on_engine_running(void* context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxMzE3MA=="}, "originalCommit": {"oid": "001420cc040c8c97a250865fa7fa80e1d517a317"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDAxNTUxOA==", "bodyText": "ohhh actually i remember why i did this in the first place. i wanted to scope the closures for on_engine_running_ and on_exit_ (if ever used) privately under Engine. putting the static methods under Engine allowed them to access those closures.\nis there another pattern that would let me do that w/ an anonymous namespace?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1223#discussion_r554015518", "createdAt": "2021-01-08T15:36:07Z", "author": {"login": "crockeo"}, "path": "library/cc/engine.cc", "diffHunk": "@@ -0,0 +1,42 @@\n+#include \"engine.h\"\n+\n+#include \"library/common/main_interface.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+Engine::Engine(envoy_engine_t engine, const std::string& configuration, LogLevel log_level,\n+               std::function<void()> on_engine_running)\n+    : engine_(engine), on_engine_running_(on_engine_running) {\n+  envoy_engine_callbacks callbacks{\n+      .on_engine_running = &Engine::c_on_engine_running,\n+      .on_exit = &Engine::c_on_exit,\n+      .context = this,\n+  };\n+\n+  run_engine(this->engine_, callbacks, configuration.c_str(),\n+             log_level_to_string(log_level).c_str());\n+\n+  this->stream_client_ = std::make_shared<StreamClient>(this->engine_);\n+  this->pulse_client_ = std::make_shared<PulseClient>();\n+}\n+\n+Engine::~Engine() { terminate_engine(this->engine_); }\n+\n+StreamClientSharedPtr Engine::stream_client() { return this->stream_client_; }\n+PulseClientSharedPtr Engine::pulse_client() { return this->pulse_client_; }\n+\n+void Engine::c_on_engine_running(void* context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxMzE3MA=="}, "originalCommit": {"oid": "001420cc040c8c97a250865fa7fa80e1d517a317"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDEyOTU5Nw==", "bodyText": "Anonymous namespaces are only accessible from the file in which they're declared. The header won't even need to expose that they exist. Is that what you mean?", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1223#discussion_r554129597", "createdAt": "2021-01-08T18:52:05Z", "author": {"login": "goaway"}, "path": "library/cc/engine.cc", "diffHunk": "@@ -0,0 +1,42 @@\n+#include \"engine.h\"\n+\n+#include \"library/common/main_interface.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+Engine::Engine(envoy_engine_t engine, const std::string& configuration, LogLevel log_level,\n+               std::function<void()> on_engine_running)\n+    : engine_(engine), on_engine_running_(on_engine_running) {\n+  envoy_engine_callbacks callbacks{\n+      .on_engine_running = &Engine::c_on_engine_running,\n+      .on_exit = &Engine::c_on_exit,\n+      .context = this,\n+  };\n+\n+  run_engine(this->engine_, callbacks, configuration.c_str(),\n+             log_level_to_string(log_level).c_str());\n+\n+  this->stream_client_ = std::make_shared<StreamClient>(this->engine_);\n+  this->pulse_client_ = std::make_shared<PulseClient>();\n+}\n+\n+Engine::~Engine() { terminate_engine(this->engine_); }\n+\n+StreamClientSharedPtr Engine::stream_client() { return this->stream_client_; }\n+PulseClientSharedPtr Engine::pulse_client() { return this->pulse_client_; }\n+\n+void Engine::c_on_engine_running(void* context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxMzE3MA=="}, "originalCommit": {"oid": "001420cc040c8c97a250865fa7fa80e1d517a317"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTA4ODc1Mg==", "bodyText": "synced offline--going to keep as-is right now because i want to be able to access Engine::on_engine_running_ (the std::function) from inside Engine::c_on_engine_running.\nlong-term vision = move the closure definition into an EngineCallbacks", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1223#discussion_r555088752", "createdAt": "2021-01-11T14:35:20Z", "author": {"login": "crockeo"}, "path": "library/cc/engine.cc", "diffHunk": "@@ -0,0 +1,42 @@\n+#include \"engine.h\"\n+\n+#include \"library/common/main_interface.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+Engine::Engine(envoy_engine_t engine, const std::string& configuration, LogLevel log_level,\n+               std::function<void()> on_engine_running)\n+    : engine_(engine), on_engine_running_(on_engine_running) {\n+  envoy_engine_callbacks callbacks{\n+      .on_engine_running = &Engine::c_on_engine_running,\n+      .on_exit = &Engine::c_on_exit,\n+      .context = this,\n+  };\n+\n+  run_engine(this->engine_, callbacks, configuration.c_str(),\n+             log_level_to_string(log_level).c_str());\n+\n+  this->stream_client_ = std::make_shared<StreamClient>(this->engine_);\n+  this->pulse_client_ = std::make_shared<PulseClient>();\n+}\n+\n+Engine::~Engine() { terminate_engine(this->engine_); }\n+\n+StreamClientSharedPtr Engine::stream_client() { return this->stream_client_; }\n+PulseClientSharedPtr Engine::pulse_client() { return this->pulse_client_; }\n+\n+void Engine::c_on_engine_running(void* context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxMzE3MA=="}, "originalCommit": {"oid": "001420cc040c8c97a250865fa7fa80e1d517a317"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NDUxMTMyOnYy", "diffSide": "RIGHT", "path": "library/cc/engine.cc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMTo1OTo1MlrOIP9_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMTo1OTo1MlrOIP9_1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxNTMxOA==", "bodyText": "nit: since this is static, let's maybe say engine instead of self for clarity.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1223#discussion_r553615318", "createdAt": "2021-01-07T21:59:52Z", "author": {"login": "goaway"}, "path": "library/cc/engine.cc", "diffHunk": "@@ -0,0 +1,42 @@\n+#include \"engine.h\"\n+\n+#include \"library/common/main_interface.h\"\n+#include \"library/common/types/c_types.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+Engine::Engine(envoy_engine_t engine, const std::string& configuration, LogLevel log_level,\n+               std::function<void()> on_engine_running)\n+    : engine_(engine), on_engine_running_(on_engine_running) {\n+  envoy_engine_callbacks callbacks{\n+      .on_engine_running = &Engine::c_on_engine_running,\n+      .on_exit = &Engine::c_on_exit,\n+      .context = this,\n+  };\n+\n+  run_engine(this->engine_, callbacks, configuration.c_str(),\n+             log_level_to_string(log_level).c_str());\n+\n+  this->stream_client_ = std::make_shared<StreamClient>(this->engine_);\n+  this->pulse_client_ = std::make_shared<PulseClient>();\n+}\n+\n+Engine::~Engine() { terminate_engine(this->engine_); }\n+\n+StreamClientSharedPtr Engine::stream_client() { return this->stream_client_; }\n+PulseClientSharedPtr Engine::pulse_client() { return this->pulse_client_; }\n+\n+void Engine::c_on_engine_running(void* context) {\n+  Engine* self = static_cast<Engine*>(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "001420cc040c8c97a250865fa7fa80e1d517a317"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4NDUxMzM5OnYy", "diffSide": "RIGHT", "path": "library/cc/engine_builder.cc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMjowMDoyMFrOIP-A8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QyMjowMDoyMFrOIP-A8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzYxNTYwMg==", "bodyText": "I'd love to improve the performance of this, but this is no worse than what the other platforms are doing right now.", "url": "https://github.com/envoyproxy/envoy-mobile/pull/1223#discussion_r553615602", "createdAt": "2021-01-07T22:00:20Z", "author": {"login": "goaway"}, "path": "library/cc/engine_builder.cc", "diffHunk": "@@ -0,0 +1,96 @@\n+#include \"engine_builder.h\"\n+\n+#include \"library/common/main_interface.h\"\n+\n+namespace Envoy {\n+namespace Platform {\n+\n+EngineBuilder::EngineBuilder() {}\n+\n+EngineBuilder& EngineBuilder::add_log_level(LogLevel log_level) {\n+  this->log_level_ = log_level;\n+  return *this;\n+}\n+\n+EngineBuilder& EngineBuilder::set_on_engine_running(std::function<void()> closure) {\n+  this->on_engine_running_ = closure;\n+  return *this;\n+}\n+\n+EngineBuilder& EngineBuilder::add_stats_domain(const std::string& stats_domain) {\n+  this->stats_domain_ = stats_domain;\n+  return *this;\n+}\n+\n+EngineBuilder& EngineBuilder::add_connect_timeout_seconds(int connect_timeout_seconds) {\n+  this->connect_timeout_seconds_ = connect_timeout_seconds;\n+  return *this;\n+}\n+\n+EngineBuilder& EngineBuilder::add_dns_refresh_seconds(int dns_refresh_seconds) {\n+  this->dns_refresh_seconds_ = dns_refresh_seconds;\n+  return *this;\n+}\n+\n+EngineBuilder& EngineBuilder::add_dns_failure_refresh_seconds(int base, int max) {\n+  this->dns_failure_refresh_seconds_base_ = base;\n+  this->dns_failure_refresh_seconds_max_ = max;\n+  return *this;\n+}\n+\n+EngineBuilder& EngineBuilder::add_stats_flush_seconds(int stats_flush_seconds) {\n+  this->stats_flush_seconds_ = stats_flush_seconds;\n+  return *this;\n+}\n+\n+EngineBuilder& EngineBuilder::set_app_version(const std::string& app_version) {\n+  this->app_version_ = app_version;\n+  return *this;\n+}\n+\n+EngineBuilder& EngineBuilder::set_app_id(const std::string& app_id) {\n+  this->app_id_ = app_id;\n+  return *this;\n+}\n+\n+EngineBuilder& EngineBuilder::add_virtual_clusters(const std::string& virtual_clusters) {\n+  this->virtual_clusters_ = virtual_clusters;\n+  return *this;\n+}\n+\n+EngineSharedPtr EngineBuilder::build() {\n+  std::vector<std::pair<std::string, std::string>> replacements{\n+      {\"{{ app_id }}\", this->app_id_},\n+      {\"{{ app_version }}\", this->app_version_},\n+      {\"{{ connect_timeout_seconds }}\", std::to_string(this->connect_timeout_seconds_)},\n+      {\"{{ device_os }}\", \"python\"},\n+      {\"{{ dns_failure_refresh_rate_seconds_base }}\",\n+       std::to_string(this->dns_failure_refresh_seconds_base_)},\n+      {\"{{ dns_failure_refresh_rate_seconds_max }}\",\n+       std::to_string(this->dns_failure_refresh_seconds_max_)},\n+      {\"{{ dns_refresh_rate_seconds }}\", std::to_string(this->dns_refresh_seconds_)},\n+      {\"{{ native_filter_chain }}\", \"\"},\n+      {\"{{ platform_filter_chain }}\", \"\"},\n+      {\"{{ stats_domain }}\", this->stats_domain_},\n+      {\"{{ stats_flush_interval_seconds }}\", std::to_string(this->stats_flush_seconds_)},\n+      {\"{{ virtual_clusters }}\", this->virtual_clusters_},\n+  };\n+\n+  std::string config_str(config_template);\n+  for (const auto& pair : replacements) {\n+    const auto& key = pair.first;\n+    const auto& value = pair.second;\n+\n+    size_t idx = 0;\n+    while ((idx = config_str.find(key, idx)) != std::string::npos) {\n+      config_str.replace(idx, key.size(), value);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "001420cc040c8c97a250865fa7fa80e1d517a317"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 572, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}