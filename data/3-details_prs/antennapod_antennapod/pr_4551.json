{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NDM1Nzk4", "number": 4551, "title": "Local feeds: Unit tests for LocalFeedUpdater", "bodyText": "Provides unit tests for the class LocalFeedUpdater.\nUses Robolectric and Mockito to run the tests without an Android emulator to make it faster.\nDoes that way of testing fit to the AntennaPod code style? I'm happy to get feedback.\nContributes to #4287.", "createdAt": "2020-10-18T08:35:44Z", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551", "merged": true, "mergeCommit": {"oid": "28ebbedbdf34b72b31c536a118bcf5108b3ea7e5"}, "closed": true, "closedAt": "2020-10-25T16:22:37Z", "author": {"login": "damoasda"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdTrIr0AH2gAyNTA1NDM1Nzk4OjcxZGU0MGViYjEwZDFlZDc0OTAwN2I3ZjliNjRkZmE5ZDgzNGY0YmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVxiBKgH2gAyNTA1NDM1Nzk4OjdmMzhmOWJhNjExMTU0MGVlYmM2NjQzNjU0ZWJjNGM2YWE5NjEwYTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "71de40ebb10d1ed749007b7f9b64dfa9d834f4bd", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/71de40ebb10d1ed749007b7f9b64dfa9d834f4bd", "committedDate": "2020-10-18T08:17:12Z", "message": "Unit tests for LocalFeedUpdater"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40641bf55568f599cc19d6e7506fc46c4ffee764", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/40641bf55568f599cc19d6e7506fc46c4ffee764", "committedDate": "2020-10-18T08:18:02Z", "message": "Changes due to Mockito version upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/214543f905879825dbf7f354b55224bb072b94a3", "committedDate": "2020-10-18T09:24:52Z", "message": "Make checkstyle happy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzMDY1ODI4", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#pullrequestreview-513065828", "createdAt": "2020-10-20T19:31:14Z", "commit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozMToxNFrOHlN0_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozNjo0MlrOHlOAng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NTkxNg==", "bodyText": "Would it be possible to use a test flavour of the assets folder? From my understanding, sampledata is used for layout rendering in Android Studio, not for unit tests.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r508785916", "createdAt": "2020-10-20T19:31:14Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzM2OA==", "bodyText": "Does this need to be emulated manually? I think the default value of gpodder should already be set to \"off\".", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r508787368", "createdAt": "2020-10-20T19:33:56Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODE2NA==", "bodyText": "This looks pretty hacky. What about adding a method directly to PodDbAdapter? Something like PodDbAdapter.tearDownTests()?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r508788164", "createdAt": "2020-10-20T19:35:27Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODg5NA==", "bodyText": "Adding items seems to be pretty repetitive code. How about creating a function for that?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r508788894", "createdAt": "2020-10-20T19:36:42Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer\n+        Field field = PodDBAdapter.class.getDeclaredField(\"db\");\n+        field.setAccessible(true);\n+        field.set(null, null);\n+\n+        for (Class<?> innerClass : PodDBAdapter.class.getDeclaredClasses()) {\n+            if (innerClass.getSimpleName().equals(\"SingletonHolder\")) {\n+                Field dbHelperField = innerClass.getDeclaredField(\"dbHelper\");\n+                dbHelperField.setAccessible(true);\n+                SQLiteOpenHelper dbHelper = (SQLiteOpenHelper) dbHelperField.get(null);\n+                Field databaseField = SQLiteOpenHelper.class.getDeclaredField(\"mDatabase\");\n+                databaseField.setAccessible(true);\n+                databaseField.set(dbHelper, null);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test adding a new local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddNewFeed() {\n+        // verify empty database\n+        List<Feed> feedListBefore = DBReader.getFeedList();\n+        assertTrue(feedListBefore.isEmpty());\n+\n+        DocumentFile documentFile = DocumentFile.fromFile(localFeedDir2);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile);\n+\n+            // call method to test\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }\n+\n+        // verify new feed in database\n+        List<Feed> feedListAfter = DBReader.getFeedList();\n+        assertEquals(1, feedListAfter.size());\n+        Feed feedAfter = feedListAfter.get(0);\n+        assertEquals(FEED_URL, feedAfter.getDownload_url());\n+        List<FeedItem> feedItems = DBReader.getFeedItemList(feedAfter);\n+        assertEquals(2, feedItems.size());\n+    }\n+\n+    /**\n+     * Test adding further items to an existing local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddMoreItems() {\n+        // add local feed with 1 item (localFeedDir1)\n+        DocumentFile documentFile1 = DocumentFile.fromFile(localFeedDir1);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile1);\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c88f84ab77837cd592d40f103ba982e438c6da97", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/c88f84ab77837cd592d40f103ba982e438c6da97", "committedDate": "2020-10-23T20:03:27Z", "message": "Add javax.inject dependency for unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7dd98339d77a8ab3be76be3294f001a69b8b7a8", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/c7dd98339d77a8ab3be76be3294f001a69b8b7a8", "committedDate": "2020-10-24T09:44:32Z", "message": "Add method PodDbAdapter.tearDownTests() to avoid hacky reflection code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e6049cfca0d2b1aefe2de280b035f9a44ba8640", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/9e6049cfca0d2b1aefe2de280b035f9a44ba8640", "committedDate": "2020-10-24T10:17:54Z", "message": "Reduce repetitive code by helper methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5355fd55802ecea17b94ad8191c1b1cb84a7f60e", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/5355fd55802ecea17b94ad8191c1b1cb84a7f60e", "committedDate": "2020-10-24T15:05:15Z", "message": "Move local feed media files from sampledata folder to test/assets folder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/bcbd54b73b64fc639dce6628c30041465267aec2", "committedDate": "2020-10-24T15:27:14Z", "message": "Move local feed media files from sampledata folder to test/assets folder"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Mjk3MTUz", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#pullrequestreview-516297153", "createdAt": "2020-10-24T18:21:24Z", "commit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxODoyMToyNVrOHnzeAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxODoyNjowM1rOHnzfhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTc3Nw==", "bodyText": "Could you please move this to our own namespace, eg. de.danoeh.antennapod.core.storage? The only reason why we have some classes in foreign packages is that we implemented workarounds that require access to package-private members.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511499777", "createdAt": "2020-10-24T18:21:25Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package androidx.documentfile.provider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTg4OA==", "bodyText": "How about using MimeTypeMap.getMimeTypeFromExtension? That would work for more file types, just in case we used the class for more things later.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511499888", "createdAt": "2020-10-24T18:22:52Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package androidx.documentfile.provider;\n+\n+import android.content.res.AssetManager;\n+import android.net.Uri;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.io.IOException;\n+\n+/**\n+ * <p>Wraps an Android assets file or folder as a DocumentFile object.</p>\n+ *\n+ * <p>This is used to emulate access to the external storage.</p>\n+ */\n+public class AssetsDocumentFile extends DocumentFile {\n+\n+    /**\n+     * Absolute file path in the assets folder.\n+     */\n+    @NonNull\n+    private final String fileName;\n+\n+    @NonNull\n+    private final AssetManager assetManager;\n+\n+    public AssetsDocumentFile(@NonNull String fileName, @NonNull AssetManager assetManager) {\n+        super(null);\n+        this.fileName = fileName;\n+        this.assetManager = assetManager;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DocumentFile createFile(@NonNull String mimeType, @NonNull String displayName) {\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DocumentFile createDirectory(@NonNull String displayName) {\n+        return null;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Uri getUri() {\n+        return Uri.parse(fileName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getName() {\n+        int pos = fileName.indexOf('/');\n+        if (pos >= 0) {\n+            return fileName.substring(pos + 1);\n+        } else {\n+            return fileName;\n+        }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getType() {\n+        if (fileName.endsWith(\".mp3\")) {\n+            return \"audio/mp3\";\n+        } else if (fileName.endsWith(\".png\")) {\n+            return \"image/png\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwMDE2NQ==", "bodyText": "Oh my, those callback methods regularly annoy me :D They are a leftover from the time when AntennaPod could be easily white-labelled.\nWould it be possible to only mock applicationCallbacks but not shared preferences?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511500165", "createdAt": "2020-10-24T18:26:03Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzM2OA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 79}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b050b2429039aef5d756390f2e4a113023fa1df", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/4b050b2429039aef5d756390f2e4a113023fa1df", "committedDate": "2020-10-24T20:16:03Z", "message": "Use MimeTypeMap.getMimeTypeFromExtension() to determine mime type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f38f9ba6111540eebc6643654ebc4c6aa9610a7", "author": {"user": {"login": "damoasda", "name": "Herbert Reiter"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/7f38f9ba6111540eebc6643654ebc4c6aa9610a7", "committedDate": "2020-10-24T20:52:09Z", "message": "Do not mock SharedPreferences"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2739, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}