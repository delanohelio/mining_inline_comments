{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNzAyMzc4", "number": 3743, "title": "Show \"mark as read\" rather than \"mark as play\" in case item has no media", "bodyText": "I started toying around with #2682\nAntennaPod now shows \"mark as read\" instead of \"mark as played\" when viewing an item, however there are many more places where this should be changed in order to be fully consistent.\nIn particular FeedItemMenuHandler.java comes to mind in this regard. I will probably have to extend feeditem_options.xml in case we really want that. I'm not sure if we do. Do we?", "createdAt": "2020-01-08T23:32:21Z", "url": "https://github.com/AntennaPod/AntennaPod/pull/3743", "merged": true, "mergeCommit": {"oid": "2c45c4cd10ca23e293755e8a2049bb82e43e882f"}, "closed": true, "closedAt": "2020-01-11T11:47:23Z", "author": {"login": "txtd"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4_wn4gFqTM0MTIwMjY0MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb5Qla7AH2gAyMzYwNzAyMzc4OjdmMWMyNGUyNmM4MzFhOWM3M2M4M2ExNWQwM2Q1MWNjNGExNWY4MWU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQxMjAyNjQx", "url": "https://github.com/AntennaPod/AntennaPod/pull/3743#pullrequestreview-341202641", "createdAt": "2020-01-10T14:39:03Z", "commit": {"oid": "0cd42ecb054ea159d082f53e076b607071d4590f"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDozOTowM1rOFcV8gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxNDo0MTo1OVrOFcWCKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NDAwMg==", "bodyText": "Please add a space here", "url": "https://github.com/AntennaPod/AntennaPod/pull/3743#discussion_r365264002", "createdAt": "2020-01-10T14:39:03Z", "author": {"login": "ByteHamster"}, "path": "app/src/main/java/de/danoeh/antennapod/dialog/EpisodesApplyActionFragment.java", "diffHunk": "@@ -457,8 +457,15 @@ private void updateActionBarTitle() {\n     }\n \n     private void queueChecked() {\n-        DBWriter.addQueueItem(getActivity(), true, checkedIds.toArray());\n-        close(R.plurals.added_to_queue_batch_label, checkedIds.size());\n+        // Check if an episode actually contains any media files before adding it to queue\n+        LongList toQueue = new LongList(checkedIds.size());\n+        for(FeedItem episode : episodes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cd42ecb054ea159d082f53e076b607071d4590f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NDQwOQ==", "bodyText": "This line is really long. Please break.", "url": "https://github.com/AntennaPod/AntennaPod/pull/3743#discussion_r365264409", "createdAt": "2020-01-10T14:39:51Z", "author": {"login": "ByteHamster"}, "path": "app/src/main/java/de/danoeh/antennapod/fragment/QueueFragment.java", "diffHunk": "@@ -550,7 +550,7 @@ public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {\n                     final boolean isRead = item.isPlayed();\n                     DBWriter.markItemPlayed(FeedItem.PLAYED, false, item.getId());\n                     DBWriter.removeQueueItem(getActivity(), true, item);\n-                    Snackbar snackbar = Snackbar.make(root, getString(R.string.marked_as_read_label), Snackbar.LENGTH_LONG);\n+                    Snackbar snackbar = Snackbar.make(root, getString(item.hasMedia() ? R.string.marked_as_read_label: R.string.marked_as_read_no_media_label), Snackbar.LENGTH_LONG);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cd42ecb054ea159d082f53e076b607071d4590f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NTA0Mw==", "bodyText": "I would just call it setItemTitle", "url": "https://github.com/AntennaPod/AntennaPod/pull/3743#discussion_r365265043", "createdAt": "2020-01-10T14:41:10Z", "author": {"login": "ByteHamster"}, "path": "app/src/main/java/de/danoeh/antennapod/menuhandler/FeedItemMenuHandler.java", "diffHunk": "@@ -31,108 +33,133 @@\n     private FeedItemMenuHandler() {\n     }\n \n-    /**\n-     * Used by the MenuHandler to access different types of menus through one\n-     * interface\n-     */\n-    public interface MenuInterface {\n-        /**\n-         * Implementations of this method should call findItem(id) on their\n-         * menu-object and call setVisibility(visibility) on the returned\n-         * MenuItem object.\n-         */\n-        void setItemVisibility(int id, boolean visible);\n-    }\n-\n     /**\n      * This method should be called in the prepare-methods of menus. It changes\n      * the visibility of the menu items depending on a FeedItem's attributes.\n      *\n-     * @param mi               An instance of MenuInterface that the method uses to change a\n-     *                         MenuItem's visibility\n+     * @param menu               An instance of Menu\n      * @param selectedItem     The FeedItem for which the menu is supposed to be prepared\n      * @return Returns true if selectedItem is not null.\n      */\n-    public static boolean onPrepareMenu(MenuInterface mi,\n+    public static boolean onPrepareMenu(Menu menu,\n                                         FeedItem selectedItem) {\n-        if (selectedItem == null) {\n+        if (menu == null || selectedItem == null) {\n             return false;\n         }\n         boolean hasMedia = selectedItem.getMedia() != null;\n         boolean isPlaying = hasMedia && selectedItem.getState() == FeedItem.State.PLAYING;\n \n         if (!isPlaying) {\n-            mi.setItemVisibility(R.id.skip_episode_item, false);\n+            setItemVisibility(menu, R.id.skip_episode_item, false);\n         }\n-\n         boolean isInQueue = selectedItem.isTagged(FeedItem.TAG_QUEUE);\n         if (!isInQueue) {\n-            mi.setItemVisibility(R.id.remove_from_queue_item, false);\n+            setItemVisibility(menu, R.id.remove_from_queue_item, false);\n         }\n         if (!(!isInQueue && selectedItem.getMedia() != null)) {\n-            mi.setItemVisibility(R.id.add_to_queue_item, false);\n+            setItemVisibility(menu, R.id.add_to_queue_item, false);\n         }\n-\n         if (!ShareUtils.hasLinkToShare(selectedItem)) {\n-            mi.setItemVisibility(R.id.visit_website_item, false);\n-            mi.setItemVisibility(R.id.share_link_item, false);\n-            mi.setItemVisibility(R.id.share_link_with_position_item, false);\n+            setItemVisibility(menu, R.id.visit_website_item, false);\n+            setItemVisibility(menu, R.id.share_link_item, false);\n+            setItemVisibility(menu, R.id.share_link_with_position_item, false);\n         }\n         if (!hasMedia || selectedItem.getMedia().getDownload_url() == null) {\n-            mi.setItemVisibility(R.id.share_download_url_item, false);\n-            mi.setItemVisibility(R.id.share_download_url_with_position_item, false);\n+            setItemVisibility(menu, R.id.share_download_url_item, false);\n+            setItemVisibility(menu, R.id.share_download_url_with_position_item, false);\n         }\n         if(!hasMedia || selectedItem.getMedia().getPosition() <= 0) {\n-            mi.setItemVisibility(R.id.share_link_with_position_item, false);\n-            mi.setItemVisibility(R.id.share_download_url_with_position_item, false);\n+            setItemVisibility(menu, R.id.share_download_url_with_position_item, false);\n+            setItemVisibility(menu, R.id.share_link_with_position_item, false);\n         }\n \n         boolean fileDownloaded = hasMedia && selectedItem.getMedia().fileExists();\n-        mi.setItemVisibility(R.id.share_file, fileDownloaded);\n+        setItemVisibility(menu, R.id.share_file, fileDownloaded);\n \n-        mi.setItemVisibility(R.id.remove_new_flag_item, selectedItem.isNew());\n+        setItemVisibility(menu, R.id.remove_new_flag_item, selectedItem.isNew());\n         if (selectedItem.isPlayed()) {\n-            mi.setItemVisibility(R.id.mark_read_item, false);\n+            setItemVisibility(menu, R.id.mark_read_item, false);\n         } else {\n-            mi.setItemVisibility(R.id.mark_unread_item, false);\n+            setItemVisibility(menu, R.id.mark_unread_item, false);\n         }\n \n         if(selectedItem.getMedia() == null || selectedItem.getMedia().getPosition() == 0) {\n-            mi.setItemVisibility(R.id.reset_position, false);\n+            setItemVisibility(menu, R.id.reset_position, false);\n         }\n \n         if(!UserPreferences.isEnableAutodownload() || fileDownloaded) {\n-            mi.setItemVisibility(R.id.activate_auto_download, false);\n-            mi.setItemVisibility(R.id.deactivate_auto_download, false);\n+            setItemVisibility(menu, R.id.activate_auto_download, false);\n+            setItemVisibility(menu, R.id.deactivate_auto_download, false);\n         } else if(selectedItem.getAutoDownload()) {\n-            mi.setItemVisibility(R.id.activate_auto_download, false);\n+            setItemVisibility(menu, R.id.activate_auto_download, false);\n         } else {\n-            mi.setItemVisibility(R.id.deactivate_auto_download, false);\n+            setItemVisibility(menu, R.id.deactivate_auto_download, false);\n+        }\n+\n+        // Display proper strings when item has no media\n+        if (!hasMedia && !selectedItem.isPlayed()) {\n+            changeStringNoMedia(menu, R.id.mark_read_item, R.string.mark_read_no_media_label);\n+        }\n+\n+        if (!hasMedia && selectedItem.isPlayed()) {\n+            changeStringNoMedia(menu, R.id.mark_unread_item, R.string.mark_unread_label_no_media);\n         }\n \n         boolean isFavorite = selectedItem.isTagged(FeedItem.TAG_FAVORITE);\n-        mi.setItemVisibility(R.id.add_to_favorites_item, !isFavorite);\n-        mi.setItemVisibility(R.id.remove_from_favorites_item, isFavorite);\n+        setItemVisibility(menu, R.id.add_to_favorites_item, !isFavorite);\n+        setItemVisibility(menu, R.id.remove_from_favorites_item, isFavorite);\n \n-        mi.setItemVisibility(R.id.remove_item, fileDownloaded);\n+        setItemVisibility(menu, R.id.remove_item, fileDownloaded);\n \n         return true;\n     }\n \n+    /**\n+     * Used to set the viability of a menu item.\n+     * This method also does some null-checking so that neither menu nor the menu item are null\n+     * in order to prevent nullpointer exceptions.\n+     * @param menu The menu that should be used\n+     * @param  menuId The id of the menu item that will be used\n+     * @param visibility The new visibility status of given menu item\n+     * */\n+    private static void setItemVisibility(Menu menu, int menuId, boolean visibility) {\n+        if(menu == null) {\n+            return;\n+        }\n+        MenuItem item = menu.findItem(menuId);\n+        if (item != null) {\n+            item.setVisible(visibility);\n+        }\n+    }\n+\n+    /**\n+     * This method allows to replace to String of a menu item with a different one.\n+     * @param menu Menu item that should be used\n+     * @param id The id of the string that is going to be replaced.\n+     * @param noMedia The id of the new String that is going to be used.\n+     * */\n+    public static void changeStringNoMedia(Menu menu, int id, int noMedia){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cd42ecb054ea159d082f53e076b607071d4590f"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NTIwMg==", "bodyText": "Please add space", "url": "https://github.com/AntennaPod/AntennaPod/pull/3743#discussion_r365265202", "createdAt": "2020-01-10T14:41:30Z", "author": {"login": "ByteHamster"}, "path": "app/src/main/java/de/danoeh/antennapod/menuhandler/FeedItemMenuHandler.java", "diffHunk": "@@ -31,108 +33,133 @@\n     private FeedItemMenuHandler() {\n     }\n \n-    /**\n-     * Used by the MenuHandler to access different types of menus through one\n-     * interface\n-     */\n-    public interface MenuInterface {\n-        /**\n-         * Implementations of this method should call findItem(id) on their\n-         * menu-object and call setVisibility(visibility) on the returned\n-         * MenuItem object.\n-         */\n-        void setItemVisibility(int id, boolean visible);\n-    }\n-\n     /**\n      * This method should be called in the prepare-methods of menus. It changes\n      * the visibility of the menu items depending on a FeedItem's attributes.\n      *\n-     * @param mi               An instance of MenuInterface that the method uses to change a\n-     *                         MenuItem's visibility\n+     * @param menu               An instance of Menu\n      * @param selectedItem     The FeedItem for which the menu is supposed to be prepared\n      * @return Returns true if selectedItem is not null.\n      */\n-    public static boolean onPrepareMenu(MenuInterface mi,\n+    public static boolean onPrepareMenu(Menu menu,\n                                         FeedItem selectedItem) {\n-        if (selectedItem == null) {\n+        if (menu == null || selectedItem == null) {\n             return false;\n         }\n         boolean hasMedia = selectedItem.getMedia() != null;\n         boolean isPlaying = hasMedia && selectedItem.getState() == FeedItem.State.PLAYING;\n \n         if (!isPlaying) {\n-            mi.setItemVisibility(R.id.skip_episode_item, false);\n+            setItemVisibility(menu, R.id.skip_episode_item, false);\n         }\n-\n         boolean isInQueue = selectedItem.isTagged(FeedItem.TAG_QUEUE);\n         if (!isInQueue) {\n-            mi.setItemVisibility(R.id.remove_from_queue_item, false);\n+            setItemVisibility(menu, R.id.remove_from_queue_item, false);\n         }\n         if (!(!isInQueue && selectedItem.getMedia() != null)) {\n-            mi.setItemVisibility(R.id.add_to_queue_item, false);\n+            setItemVisibility(menu, R.id.add_to_queue_item, false);\n         }\n-\n         if (!ShareUtils.hasLinkToShare(selectedItem)) {\n-            mi.setItemVisibility(R.id.visit_website_item, false);\n-            mi.setItemVisibility(R.id.share_link_item, false);\n-            mi.setItemVisibility(R.id.share_link_with_position_item, false);\n+            setItemVisibility(menu, R.id.visit_website_item, false);\n+            setItemVisibility(menu, R.id.share_link_item, false);\n+            setItemVisibility(menu, R.id.share_link_with_position_item, false);\n         }\n         if (!hasMedia || selectedItem.getMedia().getDownload_url() == null) {\n-            mi.setItemVisibility(R.id.share_download_url_item, false);\n-            mi.setItemVisibility(R.id.share_download_url_with_position_item, false);\n+            setItemVisibility(menu, R.id.share_download_url_item, false);\n+            setItemVisibility(menu, R.id.share_download_url_with_position_item, false);\n         }\n         if(!hasMedia || selectedItem.getMedia().getPosition() <= 0) {\n-            mi.setItemVisibility(R.id.share_link_with_position_item, false);\n-            mi.setItemVisibility(R.id.share_download_url_with_position_item, false);\n+            setItemVisibility(menu, R.id.share_download_url_with_position_item, false);\n+            setItemVisibility(menu, R.id.share_link_with_position_item, false);\n         }\n \n         boolean fileDownloaded = hasMedia && selectedItem.getMedia().fileExists();\n-        mi.setItemVisibility(R.id.share_file, fileDownloaded);\n+        setItemVisibility(menu, R.id.share_file, fileDownloaded);\n \n-        mi.setItemVisibility(R.id.remove_new_flag_item, selectedItem.isNew());\n+        setItemVisibility(menu, R.id.remove_new_flag_item, selectedItem.isNew());\n         if (selectedItem.isPlayed()) {\n-            mi.setItemVisibility(R.id.mark_read_item, false);\n+            setItemVisibility(menu, R.id.mark_read_item, false);\n         } else {\n-            mi.setItemVisibility(R.id.mark_unread_item, false);\n+            setItemVisibility(menu, R.id.mark_unread_item, false);\n         }\n \n         if(selectedItem.getMedia() == null || selectedItem.getMedia().getPosition() == 0) {\n-            mi.setItemVisibility(R.id.reset_position, false);\n+            setItemVisibility(menu, R.id.reset_position, false);\n         }\n \n         if(!UserPreferences.isEnableAutodownload() || fileDownloaded) {\n-            mi.setItemVisibility(R.id.activate_auto_download, false);\n-            mi.setItemVisibility(R.id.deactivate_auto_download, false);\n+            setItemVisibility(menu, R.id.activate_auto_download, false);\n+            setItemVisibility(menu, R.id.deactivate_auto_download, false);\n         } else if(selectedItem.getAutoDownload()) {\n-            mi.setItemVisibility(R.id.activate_auto_download, false);\n+            setItemVisibility(menu, R.id.activate_auto_download, false);\n         } else {\n-            mi.setItemVisibility(R.id.deactivate_auto_download, false);\n+            setItemVisibility(menu, R.id.deactivate_auto_download, false);\n+        }\n+\n+        // Display proper strings when item has no media\n+        if (!hasMedia && !selectedItem.isPlayed()) {\n+            changeStringNoMedia(menu, R.id.mark_read_item, R.string.mark_read_no_media_label);\n+        }\n+\n+        if (!hasMedia && selectedItem.isPlayed()) {\n+            changeStringNoMedia(menu, R.id.mark_unread_item, R.string.mark_unread_label_no_media);\n         }\n \n         boolean isFavorite = selectedItem.isTagged(FeedItem.TAG_FAVORITE);\n-        mi.setItemVisibility(R.id.add_to_favorites_item, !isFavorite);\n-        mi.setItemVisibility(R.id.remove_from_favorites_item, isFavorite);\n+        setItemVisibility(menu, R.id.add_to_favorites_item, !isFavorite);\n+        setItemVisibility(menu, R.id.remove_from_favorites_item, isFavorite);\n \n-        mi.setItemVisibility(R.id.remove_item, fileDownloaded);\n+        setItemVisibility(menu, R.id.remove_item, fileDownloaded);\n \n         return true;\n     }\n \n+    /**\n+     * Used to set the viability of a menu item.\n+     * This method also does some null-checking so that neither menu nor the menu item are null\n+     * in order to prevent nullpointer exceptions.\n+     * @param menu The menu that should be used\n+     * @param  menuId The id of the menu item that will be used\n+     * @param visibility The new visibility status of given menu item\n+     * */\n+    private static void setItemVisibility(Menu menu, int menuId, boolean visibility) {\n+        if(menu == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cd42ecb054ea159d082f53e076b607071d4590f"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTI2NTQ1MA==", "bodyText": "Please remove quotation marks", "url": "https://github.com/AntennaPod/AntennaPod/pull/3743#discussion_r365265450", "createdAt": "2020-01-10T14:41:59Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/res/values/strings.xml", "diffHunk": "@@ -179,11 +179,14 @@\n     <string name=\"removed_new_flag_label\">Removed \\\"new\\\" flag</string>\n     <string name=\"mark_read_label\">Mark as played</string>\n     <string name=\"marked_as_read_label\">Marked as played</string>\n+    <string name=\"mark_read_no_media_label\">\"Mark as read\"</string>\n+    <string name=\"marked_as_read_no_media_label\">\"Marked as read\"</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cd42ecb054ea159d082f53e076b607071d4590f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce659f5cb22c4546969b7c544468b5f787e5e2de", "author": {"user": {"login": "txtd", "name": "schlich"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/ce659f5cb22c4546969b7c544468b5f787e5e2de", "committedDate": "2020-01-11T10:26:34Z", "message": "Show mark as read rather than mark as played in case item has no media"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f1c24e26c831a9c73c83a15d03d51cc4a15f81e", "author": {"user": {"login": "txtd", "name": "schlich"}}, "url": "https://github.com/AntennaPod/AntennaPod/commit/7f1c24e26c831a9c73c83a15d03d51cc4a15f81e", "committedDate": "2020-01-11T10:27:58Z", "message": "Make sure episode contain media before adding them to queue"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2880, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}