{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1NDM1Nzk4", "number": 4551, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozMToxNFrOEv8dKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxODoyMjo1MlrOExlRsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzA5MDM1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozMToxNFrOHlN0_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxNToyOTowNVrOHnyf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NTkxNg==", "bodyText": "Would it be possible to use a test flavour of the assets folder? From my understanding, sampledata is used for layout rendering in Android Studio, not for unit tests.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r508785916", "createdAt": "2020-10-20T19:31:14Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1Nzc1OQ==", "bodyText": "Thank you for the hint regarding sampledata, I wasn't aware of that. I will look for an alternative solution in the next days.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511157759", "createdAt": "2020-10-23T21:12:55Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NTkxNg=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ4Mzg4Mg==", "bodyText": "I moved the local feed media files from the sampledata folder to the test/assets folder. For file access context.getAssets() is used. Anything else I can improve?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511483882", "createdAt": "2020-10-24T15:29:05Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NTkxNg=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzA5OTYwOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozMzo1NlrOHlN6qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMDo1NToyM1rOHn0Tfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzM2OA==", "bodyText": "Does this need to be emulated manually? I think the default value of gpodder should already be set to \"off\".", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r508787368", "createdAt": "2020-10-20T19:33:56Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTEzODgzMA==", "bodyText": "The comment is misleading somehow. The core point is that ClientConfig.applicationCallbacks has to be initialized manually to make GpodnetPreferences.loggedIn() return false, otherwise I get a NullPointerException in GpodnetPreferences.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511138830", "createdAt": "2020-10-23T20:24:49Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzM2OA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1OTQ3MA==", "bodyText": "Ah okay. How about calling ClientConfig.initialize? That should deal with initializing PodDbAdapter, user preferences, etc.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511159470", "createdAt": "2020-10-23T21:17:31Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzM2OA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ4NTc5OQ==", "bodyText": "Hmm, ClientConfig.initialize() doesn't set ClientConfig.applicationCallbacks, so I get a NullPointerException in GpodnetPreferences. The only code that currently sets ClientConfig.applicationCallbacks is in the class ClientConfigurator that belongs to the app module. Did I miss something?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511485799", "createdAt": "2020-10-24T15:49:20Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzM2OA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwMDE2NQ==", "bodyText": "Oh my, those callback methods regularly annoy me :D They are a leftover from the time when AntennaPod could be easily white-labelled.\nWould it be possible to only mock applicationCallbacks but not shared preferences?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511500165", "createdAt": "2020-10-24T18:26:03Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzM2OA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMzQ3MA==", "bodyText": "Yes, I could simplify the test code. Now it only mocks the class ApplicationCallbacks but not the classes Application and SharedPreferences.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511513470", "createdAt": "2020-10-24T20:55:23Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4NzM2OA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzEwNDYxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozNToyN1rOHlN9xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQwOTo1MDowMlrOHnri5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODE2NA==", "bodyText": "This looks pretty hacky. What about adding a method directly to PodDbAdapter? Something like PodDbAdapter.tearDownTests()?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r508788164", "createdAt": "2020-10-20T19:35:27Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE0ODY0Mw==", "bodyText": "You're right, it's ugly code. \ud83d\ude2d\nAn approach like PodDbAdapter.tearDownTests() couldn't cover all needs without the help of Mockito as the field SQLiteOpenHelper.mContext is declared as final, but it has to be set to null after each test to avoid the \"Illegal connection pointer\" error when using Robolectric. For more information see the discussion in robolectric/robolectric#1890.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511148643", "createdAt": "2020-10-23T20:48:53Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODE2NA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2MTA2Ng==", "bodyText": "Hmm, okay then I would suggest to at least hide the ugliness somewhere in another class (basically like EspressoTestUtils, just for RobolectricTestUtils)", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511161066", "createdAt": "2020-10-23T21:21:56Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODE2NA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM2OTk1Ng==", "bodyText": "Sorry, my answer is wrong. The field SQLiteOpenHelper.mContext is not touched, instead the field SQLiteOpenHelper.mDatabase has to be reset which is not final. Finally, I could introduce the method PodDbAdapter.tearDownTests() as suggested and replace the hacky reflection code. \ud83d\ude01", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511369956", "createdAt": "2020-10-24T09:50:02Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODE2NA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NzEwOTY1OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxOTozNjo0MlrOHlOAng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxMDoyMjo1NlrOHnsRNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODg5NA==", "bodyText": "Adding items seems to be pretty repetitive code. How about creating a function for that?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r508788894", "createdAt": "2020-10-20T19:36:42Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer\n+        Field field = PodDBAdapter.class.getDeclaredField(\"db\");\n+        field.setAccessible(true);\n+        field.set(null, null);\n+\n+        for (Class<?> innerClass : PodDBAdapter.class.getDeclaredClasses()) {\n+            if (innerClass.getSimpleName().equals(\"SingletonHolder\")) {\n+                Field dbHelperField = innerClass.getDeclaredField(\"dbHelper\");\n+                dbHelperField.setAccessible(true);\n+                SQLiteOpenHelper dbHelper = (SQLiteOpenHelper) dbHelperField.get(null);\n+                Field databaseField = SQLiteOpenHelper.class.getDeclaredField(\"mDatabase\");\n+                databaseField.setAccessible(true);\n+                databaseField.set(dbHelper, null);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test adding a new local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddNewFeed() {\n+        // verify empty database\n+        List<Feed> feedListBefore = DBReader.getFeedList();\n+        assertTrue(feedListBefore.isEmpty());\n+\n+        DocumentFile documentFile = DocumentFile.fromFile(localFeedDir2);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile);\n+\n+            // call method to test\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }\n+\n+        // verify new feed in database\n+        List<Feed> feedListAfter = DBReader.getFeedList();\n+        assertEquals(1, feedListAfter.size());\n+        Feed feedAfter = feedListAfter.get(0);\n+        assertEquals(FEED_URL, feedAfter.getDownload_url());\n+        List<FeedItem> feedItems = DBReader.getFeedItemList(feedAfter);\n+        assertEquals(2, feedItems.size());\n+    }\n+\n+    /**\n+     * Test adding further items to an existing local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddMoreItems() {\n+        // add local feed with 1 item (localFeedDir1)\n+        DocumentFile documentFile1 = DocumentFile.fromFile(localFeedDir1);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile1);\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE1MjI2NA==", "bodyText": "Do you mean to extract a helper method with just the following two lines?\nFeed feed = new Feed(FEED_URL, null);\nLocalFeedUpdater.updateFeed(feed, context);", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511152264", "createdAt": "2020-10-23T20:58:01Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer\n+        Field field = PodDBAdapter.class.getDeclaredField(\"db\");\n+        field.setAccessible(true);\n+        field.set(null, null);\n+\n+        for (Class<?> innerClass : PodDBAdapter.class.getDeclaredClasses()) {\n+            if (innerClass.getSimpleName().equals(\"SingletonHolder\")) {\n+                Field dbHelperField = innerClass.getDeclaredField(\"dbHelper\");\n+                dbHelperField.setAccessible(true);\n+                SQLiteOpenHelper dbHelper = (SQLiteOpenHelper) dbHelperField.get(null);\n+                Field databaseField = SQLiteOpenHelper.class.getDeclaredField(\"mDatabase\");\n+                databaseField.setAccessible(true);\n+                databaseField.set(dbHelper, null);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test adding a new local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddNewFeed() {\n+        // verify empty database\n+        List<Feed> feedListBefore = DBReader.getFeedList();\n+        assertTrue(feedListBefore.isEmpty());\n+\n+        DocumentFile documentFile = DocumentFile.fromFile(localFeedDir2);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile);\n+\n+            // call method to test\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }\n+\n+        // verify new feed in database\n+        List<Feed> feedListAfter = DBReader.getFeedList();\n+        assertEquals(1, feedListAfter.size());\n+        Feed feedAfter = feedListAfter.get(0);\n+        assertEquals(FEED_URL, feedAfter.getDownload_url());\n+        List<FeedItem> feedItems = DBReader.getFeedItemList(feedAfter);\n+        assertEquals(2, feedItems.size());\n+    }\n+\n+    /**\n+     * Test adding further items to an existing local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddMoreItems() {\n+        // add local feed with 1 item (localFeedDir1)\n+        DocumentFile documentFile1 = DocumentFile.fromFile(localFeedDir1);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile1);\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODg5NA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTE2MTczMw==", "bodyText": "I meant the whole thing about mocking external storage and updating the feed. That looks pretty similar for all tests (I have only skimmed the code, though. Maybe I have overlooked something).\n\tDocumentFile documentFile = DocumentFile.fromFile(localFeedDir2);\n        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n            // mock external storage\n            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile);\n\n            // call method to test\n            Feed feed = new Feed(FEED_URL, null);\n            LocalFeedUpdater.updateFeed(feed, context);\n        }", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511161733", "createdAt": "2020-10-23T21:23:58Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer\n+        Field field = PodDBAdapter.class.getDeclaredField(\"db\");\n+        field.setAccessible(true);\n+        field.set(null, null);\n+\n+        for (Class<?> innerClass : PodDBAdapter.class.getDeclaredClasses()) {\n+            if (innerClass.getSimpleName().equals(\"SingletonHolder\")) {\n+                Field dbHelperField = innerClass.getDeclaredField(\"dbHelper\");\n+                dbHelperField.setAccessible(true);\n+                SQLiteOpenHelper dbHelper = (SQLiteOpenHelper) dbHelperField.get(null);\n+                Field databaseField = SQLiteOpenHelper.class.getDeclaredField(\"mDatabase\");\n+                databaseField.setAccessible(true);\n+                databaseField.set(dbHelper, null);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test adding a new local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddNewFeed() {\n+        // verify empty database\n+        List<Feed> feedListBefore = DBReader.getFeedList();\n+        assertTrue(feedListBefore.isEmpty());\n+\n+        DocumentFile documentFile = DocumentFile.fromFile(localFeedDir2);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile);\n+\n+            // call method to test\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }\n+\n+        // verify new feed in database\n+        List<Feed> feedListAfter = DBReader.getFeedList();\n+        assertEquals(1, feedListAfter.size());\n+        Feed feedAfter = feedListAfter.get(0);\n+        assertEquals(FEED_URL, feedAfter.getDownload_url());\n+        List<FeedItem> feedItems = DBReader.getFeedItemList(feedAfter);\n+        assertEquals(2, feedItems.size());\n+    }\n+\n+    /**\n+     * Test adding further items to an existing local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddMoreItems() {\n+        // add local feed with 1 item (localFeedDir1)\n+        DocumentFile documentFile1 = DocumentFile.fromFile(localFeedDir1);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile1);\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODg5NA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTM4MTgxMg==", "bodyText": "Ok, I see what you mean. I extracted repetitive code into helper methods, for mocking external storage as mentioned above, and also the checks for the number of feeds and the number of items in the feed. The test methods look very simple now.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511381812", "createdAt": "2020-10-24T10:22:56Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/de/danoeh/antennapod/core/feed/LocalFeedUpdaterTest.java", "diffHunk": "@@ -0,0 +1,258 @@\n+package de.danoeh.antennapod.core.feed;\n+\n+import android.app.Application;\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.database.sqlite.SQLiteOpenHelper;\n+import android.media.MediaMetadataRetriever;\n+import android.net.Uri;\n+import android.webkit.MimeTypeMap;\n+\n+import androidx.documentfile.provider.DocumentFile;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.shadows.ShadowMediaMetadataRetriever;\n+import org.robolectric.shadows.util.DataSource;\n+\n+import java.io.File;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import de.danoeh.antennapod.core.ApplicationCallbacks;\n+import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.R;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+import de.danoeh.antennapod.core.storage.PodDBAdapter;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.anyInt;\n+import static org.mockito.Mockito.anyString;\n+import static org.mockito.Mockito.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.robolectric.Shadows.shadowOf;\n+\n+/**\n+ * Test local feeds handling in class LocalFeedUpdater.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class LocalFeedUpdaterTest {\n+\n+    /**\n+     * URL to locate the local feed media files on the external storage (SD card).\n+     * The exact URL doesn't matter here as access to external storage is mocked\n+     * (seems not to be supported by Robolectric).\n+     */\n+    private static final String FEED_URL =\n+            \"content://com.android.externalstorage.documents/tree/primary%3ADownload%2Flocal-feed\";\n+\n+    private Context context;\n+    private File localFeedDir1;\n+    private File localFeedDir2;\n+\n+    @Before\n+    public void setUp() {\n+\n+        // Initialize environment\n+        context = InstrumentationRegistry.getInstrumentation().getContext();\n+        UserPreferences.init(context);\n+\n+        // Initialize database\n+        PodDBAdapter.init(context);\n+        PodDBAdapter.deleteDatabase();\n+        PodDBAdapter adapter = PodDBAdapter.getInstance();\n+        adapter.open();\n+        adapter.close();\n+\n+        // Emulate turned off gpodder.net support in SyncService\n+        SharedPreferences spref = mock(SharedPreferences.class);\n+        when(spref.getString(eq(\"prefGpodnetHostname\"), anyString())).thenReturn(\"gpodder.net\");\n+        Application app = mock(Application.class);\n+        when(app.getSharedPreferences(anyString(), anyInt())).thenReturn(spref);\n+        ClientConfig.applicationCallbacks = mock(ApplicationCallbacks.class);\n+        when(ClientConfig.applicationCallbacks.getApplicationInstance()).thenReturn(app);\n+\n+        localFeedDir1 = new File(\"sampledata/local-feed1\");\n+        localFeedDir2 = new File(\"sampledata/local-feed2\");\n+        List<File> files = new ArrayList<>();\n+        Collections.addAll(files, localFeedDir1.listFiles());\n+        Collections.addAll(files, localFeedDir2.listFiles());\n+        for (File file : files) {\n+            DataSource ds = DataSource.toDataSource(context, Uri.fromFile(file));\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_DURATION, \"10\");\n+            ShadowMediaMetadataRetriever.addMetadata(ds, MediaMetadataRetriever.METADATA_KEY_TITLE, file.getName());\n+        }\n+        shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(\"mp3\", \"audio/mp3\");\n+    }\n+\n+    @SuppressWarnings(\"JavaReflectionMemberAccess\")\n+    @After\n+    public void tearDown() throws Exception {\n+        // Workaround for Robolectric issue in ShadowSQLiteConnection: IllegalStateException: Illegal connection pointer\n+        Field field = PodDBAdapter.class.getDeclaredField(\"db\");\n+        field.setAccessible(true);\n+        field.set(null, null);\n+\n+        for (Class<?> innerClass : PodDBAdapter.class.getDeclaredClasses()) {\n+            if (innerClass.getSimpleName().equals(\"SingletonHolder\")) {\n+                Field dbHelperField = innerClass.getDeclaredField(\"dbHelper\");\n+                dbHelperField.setAccessible(true);\n+                SQLiteOpenHelper dbHelper = (SQLiteOpenHelper) dbHelperField.get(null);\n+                Field databaseField = SQLiteOpenHelper.class.getDeclaredField(\"mDatabase\");\n+                databaseField.setAccessible(true);\n+                databaseField.set(dbHelper, null);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Test adding a new local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddNewFeed() {\n+        // verify empty database\n+        List<Feed> feedListBefore = DBReader.getFeedList();\n+        assertTrue(feedListBefore.isEmpty());\n+\n+        DocumentFile documentFile = DocumentFile.fromFile(localFeedDir2);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile);\n+\n+            // call method to test\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }\n+\n+        // verify new feed in database\n+        List<Feed> feedListAfter = DBReader.getFeedList();\n+        assertEquals(1, feedListAfter.size());\n+        Feed feedAfter = feedListAfter.get(0);\n+        assertEquals(FEED_URL, feedAfter.getDownload_url());\n+        List<FeedItem> feedItems = DBReader.getFeedItemList(feedAfter);\n+        assertEquals(2, feedItems.size());\n+    }\n+\n+    /**\n+     * Test adding further items to an existing local feed.\n+     */\n+    @Test\n+    public void testUpdateFeed_AddMoreItems() {\n+        // add local feed with 1 item (localFeedDir1)\n+        DocumentFile documentFile1 = DocumentFile.fromFile(localFeedDir1);\n+        try (MockedStatic<DocumentFile> dfMock = Mockito.mockStatic(DocumentFile.class)) {\n+            // mock external storage\n+            dfMock.when(() -> DocumentFile.fromTreeUri(any(), any())).thenReturn(documentFile1);\n+            Feed feed = new Feed(FEED_URL, null);\n+            LocalFeedUpdater.updateFeed(feed, context);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc4ODg5NA=="}, "originalCommit": {"oid": "214543f905879825dbf7f354b55224bb072b94a3"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDI2MzMyOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxODoyMToyNVrOHnzeAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMDo0NzoxNVrOHn0Qow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTc3Nw==", "bodyText": "Could you please move this to our own namespace, eg. de.danoeh.antennapod.core.storage? The only reason why we have some classes in foreign packages is that we implemented workarounds that require access to package-private members.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511499777", "createdAt": "2020-10-24T18:21:25Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package androidx.documentfile.provider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwNzU4MQ==", "bodyText": "That's exactly the reason why I had to use that package: The constructor of the super class DocumentFile is package-accessible only. If you prefer, I can change back that part of the test code and use Mockito instead.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511507581", "createdAt": "2020-10-24T19:45:41Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package androidx.documentfile.provider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTc3Nw=="}, "originalCommit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMjczOQ==", "bodyText": "\ud83d\udc4d I did not notice that the constructor is protected when having a quick look at the code. So let's keep it like it is :)", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511512739", "createdAt": "2020-10-24T20:47:15Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package androidx.documentfile.provider;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTc3Nw=="}, "originalCommit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNDI2NDE3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQxODoyMjo1MlrOHnzecA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMDo0OTo1MlrOHn0RcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTg4OA==", "bodyText": "How about using MimeTypeMap.getMimeTypeFromExtension? That would work for more file types, just in case we used the class for more things later.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511499888", "createdAt": "2020-10-24T18:22:52Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package androidx.documentfile.provider;\n+\n+import android.content.res.AssetManager;\n+import android.net.Uri;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.io.IOException;\n+\n+/**\n+ * <p>Wraps an Android assets file or folder as a DocumentFile object.</p>\n+ *\n+ * <p>This is used to emulate access to the external storage.</p>\n+ */\n+public class AssetsDocumentFile extends DocumentFile {\n+\n+    /**\n+     * Absolute file path in the assets folder.\n+     */\n+    @NonNull\n+    private final String fileName;\n+\n+    @NonNull\n+    private final AssetManager assetManager;\n+\n+    public AssetsDocumentFile(@NonNull String fileName, @NonNull AssetManager assetManager) {\n+        super(null);\n+        this.fileName = fileName;\n+        this.assetManager = assetManager;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DocumentFile createFile(@NonNull String mimeType, @NonNull String displayName) {\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DocumentFile createDirectory(@NonNull String displayName) {\n+        return null;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Uri getUri() {\n+        return Uri.parse(fileName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getName() {\n+        int pos = fileName.indexOf('/');\n+        if (pos >= 0) {\n+            return fileName.substring(pos + 1);\n+        } else {\n+            return fileName;\n+        }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getType() {\n+        if (fileName.endsWith(\".mp3\")) {\n+            return \"audio/mp3\";\n+        } else if (fileName.endsWith(\".png\")) {\n+            return \"image/png\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMDIyNA==", "bodyText": "Good point. I made the code more generic by using the suggested method.\nNote: When using Robolectric the class MimeTypeMap is replaced by the class ShadowMimeTypeMap that is empty by default. So I had to call the method addExtensionMimeTypMapping() to register the mp3 file extension. I already had that line of code, removed it, and now it is back again. \ud83d\ude01", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511510224", "createdAt": "2020-10-24T20:16:25Z", "author": {"login": "damoasda"}, "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package androidx.documentfile.provider;\n+\n+import android.content.res.AssetManager;\n+import android.net.Uri;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.io.IOException;\n+\n+/**\n+ * <p>Wraps an Android assets file or folder as a DocumentFile object.</p>\n+ *\n+ * <p>This is used to emulate access to the external storage.</p>\n+ */\n+public class AssetsDocumentFile extends DocumentFile {\n+\n+    /**\n+     * Absolute file path in the assets folder.\n+     */\n+    @NonNull\n+    private final String fileName;\n+\n+    @NonNull\n+    private final AssetManager assetManager;\n+\n+    public AssetsDocumentFile(@NonNull String fileName, @NonNull AssetManager assetManager) {\n+        super(null);\n+        this.fileName = fileName;\n+        this.assetManager = assetManager;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DocumentFile createFile(@NonNull String mimeType, @NonNull String displayName) {\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DocumentFile createDirectory(@NonNull String displayName) {\n+        return null;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Uri getUri() {\n+        return Uri.parse(fileName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getName() {\n+        int pos = fileName.indexOf('/');\n+        if (pos >= 0) {\n+            return fileName.substring(pos + 1);\n+        } else {\n+            return fileName;\n+        }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getType() {\n+        if (fileName.endsWith(\".mp3\")) {\n+            return \"audio/mp3\";\n+        } else if (fileName.endsWith(\".png\")) {\n+            return \"image/png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTg4OA=="}, "originalCommit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUxMjk0NQ==", "bodyText": "Oh okay. As you can probably already tell, I have never worked with roboelectric before :) Your change looks good.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4551#discussion_r511512945", "createdAt": "2020-10-24T20:49:52Z", "author": {"login": "ByteHamster"}, "path": "core/src/test/java/androidx/documentfile/provider/AssetsDocumentFile.java", "diffHunk": "@@ -0,0 +1,142 @@\n+package androidx.documentfile.provider;\n+\n+import android.content.res.AssetManager;\n+import android.net.Uri;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.io.IOException;\n+\n+/**\n+ * <p>Wraps an Android assets file or folder as a DocumentFile object.</p>\n+ *\n+ * <p>This is used to emulate access to the external storage.</p>\n+ */\n+public class AssetsDocumentFile extends DocumentFile {\n+\n+    /**\n+     * Absolute file path in the assets folder.\n+     */\n+    @NonNull\n+    private final String fileName;\n+\n+    @NonNull\n+    private final AssetManager assetManager;\n+\n+    public AssetsDocumentFile(@NonNull String fileName, @NonNull AssetManager assetManager) {\n+        super(null);\n+        this.fileName = fileName;\n+        this.assetManager = assetManager;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DocumentFile createFile(@NonNull String mimeType, @NonNull String displayName) {\n+        return null;\n+    }\n+\n+    @Nullable\n+    @Override\n+    public DocumentFile createDirectory(@NonNull String displayName) {\n+        return null;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Uri getUri() {\n+        return Uri.parse(fileName);\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getName() {\n+        int pos = fileName.indexOf('/');\n+        if (pos >= 0) {\n+            return fileName.substring(pos + 1);\n+        } else {\n+            return fileName;\n+        }\n+    }\n+\n+    @Nullable\n+    @Override\n+    public String getType() {\n+        if (fileName.endsWith(\".mp3\")) {\n+            return \"audio/mp3\";\n+        } else if (fileName.endsWith(\".png\")) {\n+            return \"image/png\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTQ5OTg4OA=="}, "originalCommit": {"oid": "bcbd54b73b64fc639dce6628c30041465267aec2"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4699, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}