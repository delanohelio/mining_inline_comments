{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwOTcxNTk5", "number": 4517, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozMDoyMVrOEweFoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1OTowMFrOEw8SOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjYwMDY0OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/de/danoeh/antennapod/PodcastApp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozMDoyMVrOHmDwyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozMDoyMVrOHmDwyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY2OTU3Nw==", "bodyText": "Please revert the unrelated change to keep the git history clean", "url": "https://github.com/AntennaPod/AntennaPod/pull/4517#discussion_r509669577", "createdAt": "2020-10-21T20:30:21Z", "author": {"login": "ByteHamster"}, "path": "app/src/main/java/de/danoeh/antennapod/PodcastApp.java", "diffHunk": "@@ -12,6 +12,7 @@\n import de.danoeh.antennapod.activity.SplashActivity;\n import de.danoeh.antennapod.core.ApCoreEventBusIndex;\n import de.danoeh.antennapod.core.ClientConfig;\n+import de.danoeh.antennapod.core.preferences.UserPreferences;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8893023d081cc67189b50e1e94c0ca233b5ff544"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjYwNTkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/de/danoeh/antennapod/core/preferences/UserPreferences.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozMTo0M1rOHmDz-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozMTo0M1rOHmDz-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3MDM5NA==", "bodyText": "Please add something like \"date\" to the name. It currently sounds like it returns the millis between today and the first install.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4517#discussion_r509670394", "createdAt": "2020-10-21T20:31:43Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/preferences/UserPreferences.java", "diffHunk": "@@ -1057,4 +1059,15 @@ public static void setFeedFilter(String value) {\n                 .apply();\n     }\n \n+    public static long getUsageCountingMillis() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8893023d081cc67189b50e1e94c0ca233b5ff544"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjYyMDQ1OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/de/danoeh/antennapod/fragment/preferences/PlaybackStatisticsFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozNTozMVrOHmD9pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozNTozMVrOHmD9pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3Mjg2OA==", "bodyText": "As a safeguard, could you please move this into the .subscribe lambda? If for whatever reason the database call fails, the date should not be reset. I do not think this will ever happen (or if it happens, users will not care) but it feels somehow more clean to only update after it is actually reset.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4517#discussion_r509672868", "createdAt": "2020-10-21T20:35:31Z", "author": {"login": "ByteHamster"}, "path": "app/src/main/java/de/danoeh/antennapod/fragment/preferences/PlaybackStatisticsFragment.java", "diffHunk": "@@ -156,6 +157,8 @@ private void doResetStatistics() {\n             disposable.dispose();\n         }\n \n+        UserPreferences.resetUsageCounting();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8893023d081cc67189b50e1e94c0ca233b5ff544"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjYyNTc0OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/de/danoeh/antennapod/preferences/PreferenceUpgrader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozNjo0M1rOHmEBPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODozMjoxMFrOHmuucA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3Mzc4OA==", "bodyText": "Why is this \"if\" needed? I think the code should only be called on the very first install. We therefore know that the usage stats are not yet counting. Did I miss something?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4517#discussion_r509673788", "createdAt": "2020-10-21T20:36:43Z", "author": {"login": "ByteHamster"}, "path": "app/src/main/java/de/danoeh/antennapod/preferences/PreferenceUpgrader.java", "diffHunk": "@@ -34,6 +34,10 @@ public static void checkUpgrades(Context context) {\n \n     private static void upgrade(int oldVersion) {\n         if (oldVersion == -1) {\n+            //New installation\n+            if(UserPreferences.getUsageCountingMillis() < 0){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8893023d081cc67189b50e1e94c0ca233b5ff544"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MzQ4OA==", "bodyText": "Yes this is not necessary, but just to be sure ;)", "url": "https://github.com/AntennaPod/AntennaPod/pull/4517#discussion_r510373488", "createdAt": "2020-10-22T18:32:10Z", "author": {"login": "asdoi"}, "path": "app/src/main/java/de/danoeh/antennapod/preferences/PreferenceUpgrader.java", "diffHunk": "@@ -34,6 +34,10 @@ public static void checkUpgrades(Context context) {\n \n     private static void upgrade(int oldVersion) {\n         if (oldVersion == -1) {\n+            //New installation\n+            if(UserPreferences.getUsageCountingMillis() < 0){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3Mzc4OA=="}, "originalCommit": {"oid": "8893023d081cc67189b50e1e94c0ca233b5ff544"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MjYzMDkyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/de/danoeh/antennapod/core/preferences/UserPreferences.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozODowM1rOHmEE1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMDozODowM1rOHmEE1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY3NDcxMA==", "bodyText": "I would combine set/reset to a single method. Can't think of a case where we want to use set without reset.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4517#discussion_r509674710", "createdAt": "2020-10-21T20:38:03Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/preferences/UserPreferences.java", "diffHunk": "@@ -1057,4 +1059,15 @@ public static void setFeedFilter(String value) {\n                 .apply();\n     }\n \n+    public static long getUsageCountingMillis() {\n+        return prefs.getLong(PREF_USAGE_COUNTING_DATE, -1);\n+    }\n+\n+    private static void setUsageCountingMillis(long value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8893023d081cc67189b50e1e94c0ca233b5ff544"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzU0ODEwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/de/danoeh/antennapod/core/preferences/UserPreferences.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo1OTowMFrOHmzmHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNjoxMjozNlrOHnUf0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MzI3Nw==", "bodyText": "This should also be called when a database is imported.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4517#discussion_r510453277", "createdAt": "2020-10-22T20:59:00Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/preferences/UserPreferences.java", "diffHunk": "@@ -1057,4 +1059,12 @@ public static void setFeedFilter(String value) {\n                 .apply();\n     }\n \n+    public static long getUsageCountingDateMillis() {\n+        return prefs.getLong(PREF_USAGE_COUNTING_DATE, -1);\n+    }\n+\n+    public static void resetUsageCountingDate() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b3cbc319ff9b62b2311dbc3532f57e2664ea2f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzMTA4OA==", "bodyText": "Thank you. I forgot this, but should not be the date set to -1 (unset) because we do not know the date the new statistics were counted since?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4517#discussion_r510931088", "createdAt": "2020-10-23T14:39:38Z", "author": {"login": "asdoi"}, "path": "core/src/main/java/de/danoeh/antennapod/core/preferences/UserPreferences.java", "diffHunk": "@@ -1057,4 +1059,12 @@ public static void setFeedFilter(String value) {\n                 .apply();\n     }\n \n+    public static long getUsageCountingDateMillis() {\n+        return prefs.getLong(PREF_USAGE_COUNTING_DATE, -1);\n+    }\n+\n+    public static void resetUsageCountingDate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MzI3Nw=="}, "originalCommit": {"oid": "82b3cbc319ff9b62b2311dbc3532f57e2664ea2f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk5MjMzNg==", "bodyText": "Oh, right. Sorry.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4517#discussion_r510992336", "createdAt": "2020-10-23T16:12:36Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/preferences/UserPreferences.java", "diffHunk": "@@ -1057,4 +1059,12 @@ public static void setFeedFilter(String value) {\n                 .apply();\n     }\n \n+    public static long getUsageCountingDateMillis() {\n+        return prefs.getLong(PREF_USAGE_COUNTING_DATE, -1);\n+    }\n+\n+    public static void resetUsageCountingDate() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ1MzI3Nw=="}, "originalCommit": {"oid": "82b3cbc319ff9b62b2311dbc3532f57e2664ea2f"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4688, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}