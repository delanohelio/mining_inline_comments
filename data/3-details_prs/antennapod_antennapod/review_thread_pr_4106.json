{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyNjE5NTUy", "number": 4106, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowMjoyNFrOD4yVzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToxNzoxN1rOD_J_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODcxNjMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/res/values-ar/strings.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowMjoyNFrOGPtQzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozNDo1NlrOGPthJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMzQwNA==", "bodyText": "Translations are only done on Transifex. Merging changes from GitHub and Transifex is messy, so please remove those. You can later translate on Transifex after merging.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419123404", "createdAt": "2020-05-03T16:02:24Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/res/values-ar/strings.xml", "diffHunk": "@@ -135,6 +135,12 @@\n   <string name=\"exporting_label\">\u062c\u0627\u0631 \u0627\u0644\u062a\u0635\u062f\u064a\u0631 ...</string>\n   <string name=\"export_error_label\">\u062d\u062f\u062b \u062e\u0637\u0623 \u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u062a\u0635\u062f\u064a\u0631</string>\n   <string name=\"export_success_title\">\u062a\u0645 \u0627\u0644\u062a\u0635\u062f\u064a\u0631 \u0628\u0646\u062c\u0627\u062d</string>\n+\n+  <!--Favorites import and export-->\n+  <string name=\"favorites\">\u0627\u0644\u0645\u0641\u0636\u0644\u0627\u062a</string>\n+  <string name=\"favorites_export_label\">\u062a\u0635\u062f\u064a\u0631 \u0627\u0644\u0645\u0641\u0636\u0644\u0627\u062a</string>\n+  <string name=\"favorites_export_summary\">\u062a\u0635\u062f\u064a\u0631 \u0627\u0644\u0645\u0641\u0636\u0644\u0627\u062a \u0627\u0644\u0649 \u0645\u0644\u0641</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzU4OQ==", "bodyText": "I missed that part in CONTRIBUTING.md. Sorry, I'll remove and add them on Transifex.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419127589", "createdAt": "2020-05-03T16:34:56Z", "author": {"login": "malockin"}, "path": "core/src/main/res/values-ar/strings.xml", "diffHunk": "@@ -135,6 +135,12 @@\n   <string name=\"exporting_label\">\u062c\u0627\u0631 \u0627\u0644\u062a\u0635\u062f\u064a\u0631 ...</string>\n   <string name=\"export_error_label\">\u062d\u062f\u062b \u062e\u0637\u0623 \u0623\u062b\u0646\u0627\u0621 \u0627\u0644\u062a\u0635\u062f\u064a\u0631</string>\n   <string name=\"export_success_title\">\u062a\u0645 \u0627\u0644\u062a\u0635\u062f\u064a\u0631 \u0628\u0646\u062c\u0627\u062d</string>\n+\n+  <!--Favorites import and export-->\n+  <string name=\"favorites\">\u0627\u0644\u0645\u0641\u0636\u0644\u0627\u062a</string>\n+  <string name=\"favorites_export_label\">\u062a\u0635\u062f\u064a\u0631 \u0627\u0644\u0645\u0641\u0636\u0644\u0627\u062a</string>\n+  <string name=\"favorites_export_summary\">\u062a\u0635\u062f\u064a\u0631 \u0627\u0644\u0645\u0641\u0636\u0644\u0627\u062a \u0627\u0644\u0649 \u0645\u0644\u0641</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMzQwNA=="}, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODcxNzk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/assets/favorites-export-template.html", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowNDoxMFrOGPtRoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozMzo0NlrOGPtgkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMzYxNg==", "bodyText": "This file is more or less a duplicate of the feed export feature. Could you please use a single file only (maybe with placeholder for the title)? That reduces problems when modifying just one of the files.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419123616", "createdAt": "2020-05-03T16:04:10Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/assets/favorites-export-template.html", "diffHunk": "@@ -0,0 +1,82 @@\n+<?xml version='1.0' encoding='UTF-8' standalone='no' ?>\r\n+<html>\r\n+    <head>\r\n+        <title>AntennaPod Favorites</title>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzQ0MQ==", "bodyText": "Legacy code habits... \"do not touch the arcane code\". But your suggestion is logical :-)", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419127441", "createdAt": "2020-05-03T16:33:46Z", "author": {"login": "malockin"}, "path": "core/src/main/assets/favorites-export-template.html", "diffHunk": "@@ -0,0 +1,82 @@\n+<?xml version='1.0' encoding='UTF-8' standalone='no' ?>\r\n+<html>\r\n+    <head>\r\n+        <title>AntennaPod Favorites</title>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMzYxNg=="}, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODcxODk4OnYy", "diffSide": "RIGHT", "path": "app/src/main/res/xml/preferences_import_export.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowNToxMlrOGPtSJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowNToxMlrOGPtSJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMzc0OA==", "bodyText": "Please use the same indentation as the rest of the file. Wouldn't it make sense to display the item in the HTML category? Otherwise, we have two categories with only one item each.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419123748", "createdAt": "2020-05-03T16:05:12Z", "author": {"login": "ByteHamster"}, "path": "app/src/main/res/xml/preferences_import_export.xml", "diffHunk": "@@ -27,6 +27,13 @@\n                 android:summary=\"@string/opml_import_summary\"/>\n     </PreferenceCategory>\n \n+    <PreferenceCategory android:title=\"@string/favorites\">\n+        <Preference\n+            android:key=\"prefFavoritesExport\"\n+            android:title=\"@string/favorites_export_label\"\n+            android:summary=\"@string/favorites_export_summary\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODcxOTY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowNjowNVrOGPtSgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjozMjozOVrOGPtgBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMzg0Mw==", "bodyText": "Couldn't this be done in a do...while condition?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419123843", "createdAt": "2020-05-03T16:06:05Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"favorites-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        String[] templateParts = template.split(\"\\\\{FAVORITES\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+        writer.append(\"<ul>\");\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(\"</ul>\");\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesPage = DBReader.getFavoriteItemsList(page, PAGE_LIMIT);\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+\n+        while (!favoritesPage.isEmpty()) {\n+            favoritesList.addAll(favoritesPage);\n+\n+            // save a DB call if there are no more items to fetch\n+            if (favoritesPage.size() < PAGE_LIMIT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNzMwMQ==", "bodyText": "Over the years, I've picked up a habit of conveniently forgetting about do...while loops. I'll replace them.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419127301", "createdAt": "2020-05-03T16:32:39Z", "author": {"login": "malockin"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"favorites-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        String[] templateParts = template.split(\"\\\\{FAVORITES\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+        writer.append(\"<ul>\");\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(\"</ul>\");\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesPage = DBReader.getFavoriteItemsList(page, PAGE_LIMIT);\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+\n+        while (!favoritesPage.isEmpty()) {\n+            favoritesList.addAll(favoritesPage);\n+\n+            // save a DB call if there are no more items to fetch\n+            if (favoritesPage.size() < PAGE_LIMIT) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMzg0Mw=="}, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODcyMTY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowNzo1OVrOGPtTeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowNzo1OVrOGPtTeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNDA4OA==", "bodyText": "Nice idea grouping them by feed!", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419124088", "createdAt": "2020-05-03T16:07:59Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"favorites-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        String[] templateParts = template.split(\"\\\\{FAVORITES\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+        writer.append(\"<ul>\");\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(\"</ul>\");\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesPage = DBReader.getFavoriteItemsList(page, PAGE_LIMIT);\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+\n+        while (!favoritesPage.isEmpty()) {\n+            favoritesList.addAll(favoritesPage);\n+\n+            // save a DB call if there are no more items to fetch\n+            if (favoritesPage.size() < PAGE_LIMIT) {\n+                break;\n+            }\n+\n+            ++page;\n+\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+        }\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODcyMzMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowOToxM1rOGPtUNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowOToxM1rOGPtUNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNDI3OA==", "bodyText": "The text \"Favorites\" is already translated somewhere. If you use the already existing string, the translators do not have to do the work again. Additionally, it could lead to confusion when translated differently.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419124278", "createdAt": "2020-05-03T16:09:13Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/res/values/strings.xml", "diffHunk": "@@ -576,6 +576,9 @@\n     <string name=\"import_select_file\">Select file to import</string>\n     <string name=\"import_ok\">Import successful.\\n\\nPlease press OK to restart AntennaPod</string>\n     <string name=\"import_no_downgrade\">This database was exported with a newer version of AntennaPod. Your current installation does not yet know how to handle this file.</string>\n+    <string name=\"favorites\">Favorites</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODcyNDExOnYy", "diffSide": "RIGHT", "path": "core/src/main/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowOTo0OVrOGPtUlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNjowOTo0OVrOGPtUlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyNDM3NA==", "bodyText": "Please use a lower letter e to make it consistent with the other export buttons", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r419124374", "createdAt": "2020-05-03T16:09:49Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/res/values/strings.xml", "diffHunk": "@@ -576,6 +576,9 @@\n     <string name=\"import_select_file\">Select file to import</string>\n     <string name=\"import_ok\">Import successful.\\n\\nPlease press OK to restart AntennaPod</string>\n     <string name=\"import_no_downgrade\">This database was exported with a newer version of AntennaPod. Your current installation does not yet know how to handle this file.</string>\n+    <string name=\"favorites\">Favorites</string>\n+    <string name=\"favorites_export_label\">Favorites Export</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "104704ee5006da027af98c16f06288ca7488f914"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NDExOTcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQyMToyNDo1MlrOGWcugg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxOToyODo0MlrOGZq_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MjUxNA==", "bodyText": "Could you please remove the span and the div with the inline style and use CSS in the template file instead (I think the li should be enough to achieve the same look)? I want to try to mix html and java as little as possible.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r426192514", "createdAt": "2020-05-16T21:24:52Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+        List<FeedItem> favoritesPage;\n+        do {\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+            favoritesList.addAll(favoritesPage);\n+            ++page;\n+        } while (!favoritesPage.isEmpty() && favoritesPage.size() == PAGE_LIMIT);\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {\n+        Map<Long, List<FeedItem>> feedMap = new TreeMap<>();\n+\n+        for (FeedItem item : favoritesList) {\n+            List<FeedItem> feedEpisodes = feedMap.get(item.getFeedId());\n+\n+            if (feedEpisodes == null) {\n+                feedEpisodes = new ArrayList<>();\n+                feedMap.put(item.getFeedId(), feedEpisodes);\n+            }\n+\n+            feedEpisodes.add(item);\n+        }\n+\n+        return feedMap;\n+    }\n+\n+    private void writeFeed(Writer writer, Feed feed) throws IOException {\n+        writer.append(\"<img src=\\\"\");\n+        writer.append(feed.getImageUrl());\n+        writer.append(\"\\\" /><p>\");\n+        writer.append(feed.getTitle());\n+        writer.append(\" <span><a href=\\\"\");\n+        writer.append(feed.getLink());\n+        writer.append(\"\\\">Website</a> \u2022 <a href=\\\"\");\n+        writer.append(feed.getDownload_url());\n+        writer.append(\"\\\">Feed</a></span></p>\");\n+    }\n+\n+    private void writeFavoriteItem(Writer writer, FeedItem item) throws IOException {\n+        writer.append(\"<li><div style=\\\"border-top: 1px solid #eee8e8; padding: 0px; box-shadow: none\\\"><span>\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d74233151a07bde76ae77285e5346b376d23961"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjIzMTcxMQ==", "bodyText": "The <div> and <span> tags are the only way I could find to get it to display the items left-aligned, and with a separating bar. Without them, it would look like the screenshot below. Apparently, the <br> tag is completely ignored as well (Website and Feed should be on a separate line).\nAs for separating HTML and Java - maybe we can use template HTML files for the list items as well, and have placeholders for each segment - like what we have in the HTML export template and {FEEDS}.", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r426231711", "createdAt": "2020-05-17T08:12:41Z", "author": {"login": "malockin"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+        List<FeedItem> favoritesPage;\n+        do {\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+            favoritesList.addAll(favoritesPage);\n+            ++page;\n+        } while (!favoritesPage.isEmpty() && favoritesPage.size() == PAGE_LIMIT);\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {\n+        Map<Long, List<FeedItem>> feedMap = new TreeMap<>();\n+\n+        for (FeedItem item : favoritesList) {\n+            List<FeedItem> feedEpisodes = feedMap.get(item.getFeedId());\n+\n+            if (feedEpisodes == null) {\n+                feedEpisodes = new ArrayList<>();\n+                feedMap.put(item.getFeedId(), feedEpisodes);\n+            }\n+\n+            feedEpisodes.add(item);\n+        }\n+\n+        return feedMap;\n+    }\n+\n+    private void writeFeed(Writer writer, Feed feed) throws IOException {\n+        writer.append(\"<img src=\\\"\");\n+        writer.append(feed.getImageUrl());\n+        writer.append(\"\\\" /><p>\");\n+        writer.append(feed.getTitle());\n+        writer.append(\" <span><a href=\\\"\");\n+        writer.append(feed.getLink());\n+        writer.append(\"\\\">Website</a> \u2022 <a href=\\\"\");\n+        writer.append(feed.getDownload_url());\n+        writer.append(\"\\\">Feed</a></span></p>\");\n+    }\n+\n+    private void writeFavoriteItem(Writer writer, FeedItem item) throws IOException {\n+        writer.append(\"<li><div style=\\\"border-top: 1px solid #eee8e8; padding: 0px; box-shadow: none\\\"><span>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MjUxNA=="}, "originalCommit": {"oid": "4d74233151a07bde76ae77285e5346b376d23961"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzk5NTU0NQ==", "bodyText": "As for separating HTML and Java - maybe we can use template HTML files for the list items as well, and have placeholders for each segment - like what we have in the HTML export template and {FEEDS}.\n\nThat sounds pretty nice (if that's not too much work)\n\nApparently, the  tag is completely ignored as well (Website and Feed should be on a separate line).\n\nMaybe something like ul ul li {clear: left;}?", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r427995545", "createdAt": "2020-05-20T13:09:29Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+        List<FeedItem> favoritesPage;\n+        do {\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+            favoritesList.addAll(favoritesPage);\n+            ++page;\n+        } while (!favoritesPage.isEmpty() && favoritesPage.size() == PAGE_LIMIT);\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {\n+        Map<Long, List<FeedItem>> feedMap = new TreeMap<>();\n+\n+        for (FeedItem item : favoritesList) {\n+            List<FeedItem> feedEpisodes = feedMap.get(item.getFeedId());\n+\n+            if (feedEpisodes == null) {\n+                feedEpisodes = new ArrayList<>();\n+                feedMap.put(item.getFeedId(), feedEpisodes);\n+            }\n+\n+            feedEpisodes.add(item);\n+        }\n+\n+        return feedMap;\n+    }\n+\n+    private void writeFeed(Writer writer, Feed feed) throws IOException {\n+        writer.append(\"<img src=\\\"\");\n+        writer.append(feed.getImageUrl());\n+        writer.append(\"\\\" /><p>\");\n+        writer.append(feed.getTitle());\n+        writer.append(\" <span><a href=\\\"\");\n+        writer.append(feed.getLink());\n+        writer.append(\"\\\">Website</a> \u2022 <a href=\\\"\");\n+        writer.append(feed.getDownload_url());\n+        writer.append(\"\\\">Feed</a></span></p>\");\n+    }\n+\n+    private void writeFavoriteItem(Writer writer, FeedItem item) throws IOException {\n+        writer.append(\"<li><div style=\\\"border-top: 1px solid #eee8e8; padding: 0px; box-shadow: none\\\"><span>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MjUxNA=="}, "originalCommit": {"oid": "4d74233151a07bde76ae77285e5346b376d23961"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3MTk2Ng==", "bodyText": "I've uploaded a version with feed and favorite templates, as well as separated the CSS code into the main template. I hope this is more like what you hand in mind.\nI had to use a bit more elaborate CSS to get it to display properly, but at least it's not in-line now :-)", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r429571966", "createdAt": "2020-05-23T19:28:42Z", "author": {"login": "malockin"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,125 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n+        String template = IOUtils.toString(templateStream, \"UTF-8\");\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+            writer.append(\"<li><div>\");\n+            writeFeed(writer, favorites.get(0).getFeed());\n+\n+            writer.append(\"<ul>\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+        List<FeedItem> favoritesPage;\n+        do {\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+            favoritesList.addAll(favoritesPage);\n+            ++page;\n+        } while (!favoritesPage.isEmpty() && favoritesPage.size() == PAGE_LIMIT);\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {\n+        Map<Long, List<FeedItem>> feedMap = new TreeMap<>();\n+\n+        for (FeedItem item : favoritesList) {\n+            List<FeedItem> feedEpisodes = feedMap.get(item.getFeedId());\n+\n+            if (feedEpisodes == null) {\n+                feedEpisodes = new ArrayList<>();\n+                feedMap.put(item.getFeedId(), feedEpisodes);\n+            }\n+\n+            feedEpisodes.add(item);\n+        }\n+\n+        return feedMap;\n+    }\n+\n+    private void writeFeed(Writer writer, Feed feed) throws IOException {\n+        writer.append(\"<img src=\\\"\");\n+        writer.append(feed.getImageUrl());\n+        writer.append(\"\\\" /><p>\");\n+        writer.append(feed.getTitle());\n+        writer.append(\" <span><a href=\\\"\");\n+        writer.append(feed.getLink());\n+        writer.append(\"\\\">Website</a> \u2022 <a href=\\\"\");\n+        writer.append(feed.getDownload_url());\n+        writer.append(\"\\\">Feed</a></span></p>\");\n+    }\n+\n+    private void writeFavoriteItem(Writer writer, FeedItem item) throws IOException {\n+        writer.append(\"<li><div style=\\\"border-top: 1px solid #eee8e8; padding: 0px; box-shadow: none\\\"><span>\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjE5MjUxNA=="}, "originalCommit": {"oid": "4d74233151a07bde76ae77285e5346b376d23961"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTUwNTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToxNjoxM1rOGZrazA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToxNjoxM1rOGZrazA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3ODk1Ng==", "bodyText": "fatorites: typo :)", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r429578956", "createdAt": "2020-05-23T21:16:13Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    private static final String FAVORITE_TEMPLATE = \"html-export-fatorites-item-template.html\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35dde1fadbd2bfa70ab96c09e8bd332aa9768cd9"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTUwNjAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QyMToxNzoxN1rOGZra8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNToxNDo0N1rOGZss7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3ODk5NA==", "bodyText": "I think replace should be enough here. It also replaces all occurrences but does not use a regex", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r429578994", "createdAt": "2020-05-23T21:17:17Z", "author": {"login": "ByteHamster"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    private static final String FAVORITE_TEMPLATE = \"html-export-fatorites-item-template.html\";\n+    private static final String FEED_TEMPLATE = \"html-export-feed-template.html\";\n+    private static final String UTF_8 = \"UTF-8\";\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n+        String template = IOUtils.toString(templateStream, UTF_8);\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n+\n+        InputStream favTemplateStream = context.getAssets().open(FAVORITE_TEMPLATE);\n+        String favTemplate = IOUtils.toString(favTemplateStream, UTF_8);\n+\n+        InputStream feedTemplateStream = context.getAssets().open(FEED_TEMPLATE);\n+        String feedTemplate = IOUtils.toString(feedTemplateStream, UTF_8);\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+            writer.append(\"<li><div>\\n\");\n+            writeFeed(writer, favorites.get(0).getFeed(), feedTemplate);\n+\n+            writer.append(\"<ul>\\n\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item, favTemplate);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+        List<FeedItem> favoritesPage;\n+        do {\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+            favoritesList.addAll(favoritesPage);\n+            ++page;\n+        } while (!favoritesPage.isEmpty() && favoritesPage.size() == PAGE_LIMIT);\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {\n+        Map<Long, List<FeedItem>> feedMap = new TreeMap<>();\n+\n+        for (FeedItem item : favoritesList) {\n+            List<FeedItem> feedEpisodes = feedMap.get(item.getFeedId());\n+\n+            if (feedEpisodes == null) {\n+                feedEpisodes = new ArrayList<>();\n+                feedMap.put(item.getFeedId(), feedEpisodes);\n+            }\n+\n+            feedEpisodes.add(item);\n+        }\n+\n+        return feedMap;\n+    }\n+\n+    private void writeFeed(Writer writer, Feed feed, String feedTemplate) throws IOException {\n+        String feedInfo = feedTemplate\n+                .replaceAll(\"\\\\{FEED_IMG\\\\}\", feed.getImageUrl())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35dde1fadbd2bfa70ab96c09e8bd332aa9768cd9"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5OTk4MQ==", "bodyText": "done & done :-)", "url": "https://github.com/AntennaPod/AntennaPod/pull/4106#discussion_r429599981", "createdAt": "2020-05-24T05:14:47Z", "author": {"login": "malockin"}, "path": "core/src/main/java/de/danoeh/antennapod/core/export/favorites/FavoritesWriter.java", "diffHunk": "@@ -0,0 +1,132 @@\n+package de.danoeh.antennapod.core.export.favorites;\n+\n+import android.content.Context;\n+import android.util.Log;\n+\n+import org.apache.commons.io.IOUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.Writer;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import de.danoeh.antennapod.core.export.ExportWriter;\n+import de.danoeh.antennapod.core.feed.Feed;\n+import de.danoeh.antennapod.core.feed.FeedItem;\n+import de.danoeh.antennapod.core.storage.DBReader;\n+\n+/** Writes saved favorites to file. */\n+public class FavoritesWriter implements ExportWriter {\n+    private static final String TAG = \"FavoritesWriter\";\n+\n+    private static final int PAGE_LIMIT = 100;\n+\n+    private static final String FAVORITE_TEMPLATE = \"html-export-fatorites-item-template.html\";\n+    private static final String FEED_TEMPLATE = \"html-export-feed-template.html\";\n+    private static final String UTF_8 = \"UTF-8\";\n+\n+    @Override\n+    public void writeDocument(List<Feed> feeds, Writer writer, Context context)\n+            throws IllegalArgumentException, IllegalStateException, IOException {\n+        Log.d(TAG, \"Starting to write document\");\n+\n+        InputStream templateStream = context.getAssets().open(\"html-export-template.html\");\n+        String template = IOUtils.toString(templateStream, UTF_8);\n+        template = template.replaceAll(\"\\\\{TITLE\\\\}\", \"Favorites\");\n+        String[] templateParts = template.split(\"\\\\{FEEDS\\\\}\");\n+\n+        InputStream favTemplateStream = context.getAssets().open(FAVORITE_TEMPLATE);\n+        String favTemplate = IOUtils.toString(favTemplateStream, UTF_8);\n+\n+        InputStream feedTemplateStream = context.getAssets().open(FEED_TEMPLATE);\n+        String feedTemplate = IOUtils.toString(feedTemplateStream, UTF_8);\n+\n+        Map<Long, List<FeedItem>> favoriteByFeed = getFeedMap(getFavorites());\n+\n+        writer.append(templateParts[0]);\n+\n+        for (Long feedId : favoriteByFeed.keySet()) {\n+            List<FeedItem> favorites = favoriteByFeed.get(feedId);\n+            writer.append(\"<li><div>\\n\");\n+            writeFeed(writer, favorites.get(0).getFeed(), feedTemplate);\n+\n+            writer.append(\"<ul>\\n\");\n+            for (FeedItem item : favorites) {\n+                writeFavoriteItem(writer, item, favTemplate);\n+            }\n+            writer.append(\"</ul></div></li>\\n\");\n+        }\n+\n+        writer.append(templateParts[1]);\n+\n+        Log.d(TAG, \"Finished writing document\");\n+    }\n+\n+    private List<FeedItem> getFavorites() {\n+        int page = 0;\n+\n+        List<FeedItem> favoritesList = new ArrayList<>();\n+        List<FeedItem> favoritesPage;\n+        do {\n+            favoritesPage = DBReader.getFavoriteItemsList(page * PAGE_LIMIT, PAGE_LIMIT);\n+            favoritesList.addAll(favoritesPage);\n+            ++page;\n+        } while (!favoritesPage.isEmpty() && favoritesPage.size() == PAGE_LIMIT);\n+\n+        // sort in descending order\n+        Collections.sort(favoritesList, (lhs, rhs) -> rhs.getPubDate().compareTo(lhs.getPubDate()));\n+\n+        return favoritesList;\n+    }\n+\n+    /**\n+     * Group favorite episodes by feed, sorting them by publishing date in descending order.\n+     *\n+     * @param favoritesList {@code List} of all favorite episodes.\n+     * @return A {@code Map} favorite episodes, keyed by feed ID.\n+     */\n+    private Map<Long, List<FeedItem>> getFeedMap(List<FeedItem> favoritesList) {\n+        Map<Long, List<FeedItem>> feedMap = new TreeMap<>();\n+\n+        for (FeedItem item : favoritesList) {\n+            List<FeedItem> feedEpisodes = feedMap.get(item.getFeedId());\n+\n+            if (feedEpisodes == null) {\n+                feedEpisodes = new ArrayList<>();\n+                feedMap.put(item.getFeedId(), feedEpisodes);\n+            }\n+\n+            feedEpisodes.add(item);\n+        }\n+\n+        return feedMap;\n+    }\n+\n+    private void writeFeed(Writer writer, Feed feed, String feedTemplate) throws IOException {\n+        String feedInfo = feedTemplate\n+                .replaceAll(\"\\\\{FEED_IMG\\\\}\", feed.getImageUrl())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU3ODk5NA=="}, "originalCommit": {"oid": "35dde1fadbd2bfa70ab96c09e8bd332aa9768cd9"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4789, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}