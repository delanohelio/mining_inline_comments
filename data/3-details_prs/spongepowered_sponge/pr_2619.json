{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMDQ1Njgx", "number": 2619, "title": "Add pathfinding chunkload optimization", "bodyText": "Noticed pathfinding was causing chunkloading while investigating another issue.\n\nChunks loaded 24   [-945 -1656, -942 -1659, -942 -1656, -946 -1658, -945 -1659, -945 -1656, -944 -1655, -943 -1655, -942 -1655, -942 -1656, -942 -1656, -942 -1655, -942 -1656, -944 -1655, -942 -1656, -942 -1655, -944 -1655, -942 -1656, -943 -1655, -944 -1656, -942 -1656, -942 -1656, -944 -1656, -942 -1656]\n\tat org.spongepowered.common.util.SpongeHooks.logStack(SpongeHooks.java:107) [SpongeHooks.class:1.12.2-2838-7.2.2-RC4027]\n\tat org.spongepowered.common.util.SpongeHooks.logChunkLoad(SpongeHooks.java:206) [SpongeHooks.class:1.12.2-2838-7.2.2-RC4027]\n\tat net.minecraft.world.chunk.Chunk.handler$zmb000$impl$UpdateNeighborsOnLoad(Chunk.java:3551) [axw.class:?]\n\tat net.minecraft.world.chunk.Chunk.onLoad(Chunk.java:863) [axw.class:?]\n\tat net.minecraftforge.common.chunkio.ChunkIOProvider.syncCallback(ChunkIOProvider.java:109) [ChunkIOProvider.class:?]\n\tat net.minecraftforge.common.chunkio.ChunkIOExecutor.syncChunkLoad(ChunkIOExecutor.java:94) [ChunkIOExecutor.class:?]\n\tat net.minecraft.world.gen.ChunkProviderServer.loadChunk(ChunkProviderServer.java:118) [on.class:?]\n\tat net.minecraft.world.gen.ChunkProviderServer.loadChunk(ChunkProviderServer.java:89) [on.class:?]\n\tat net.minecraft.world.gen.ChunkProviderServer.redirect$zme000$impl$ProvideChunkForced(ChunkProviderServer.java:1642) [on.class:?]\n\tat net.minecraft.world.gen.ChunkProviderServer.provideChunk(ChunkProviderServer.java:135) [on.class:?]\n\tat net.minecraft.world.World.getChunk(World.java:310) [amu.class:?]\n\tat net.minecraft.world.World.getChunk(World.java:305) [amu.class:?]\n\tat net.minecraft.world.WorldServer.getBlockState(WorldServer.java:5062) [oo.class:?]\n\tat net.minecraft.pathfinding.PathNavigate.canEntityStandOnPos(SourceFile:335) [ze.class:?]\n\tat net.minecraft.entity.ai.RandomPositionGenerator.generateRandomPos(SourceFile:90) [zl.class:?]\n\tat net.minecraft.entity.ai.RandomPositionGenerator.findRandomTargetBlock(SourceFile:41) [zl.class:?]\n\tat net.minecraft.entity.ai.RandomPositionGenerator.findRandomTargetBlockAwayFrom(SourceFile:36) [zl.class:?]\n\tat forestry.lepidopterology.entities.AIButterflyBase.getRandomDestination(AIButterflyBase.java:37) [AIButterflyBase.class:?]\n\tat forestry.lepidopterology.entities.AIButterflyWander.shouldExecute(AIButterflyWander.java:26) [AIButterflyWander.class:?]\n\tat net.minecraft.entity.ai.EntityAITasks.onUpdateTasks(SourceFile:94) [xf.class:?]\n\tat net.minecraft.entity.EntityLiving.updateEntityActionState(EntityLiving.java:763) [vq.class:?]\n\tat net.minecraft.entity.EntityLivingBase.onLivingUpdate(EntityLivingBase.java:2359) [vp.class:?]\n\tat net.minecraft.entity.EntityLiving.onLivingUpdate(EntityLiving.java:577) [vq.class:?]\n\tat net.minecraft.entity.EntityLivingBase.onUpdate(EntityLivingBase.java:2179) [vp.class:?]\n\tat net.minecraft.entity.EntityLiving.onUpdate(EntityLiving.java:295) [vq.class:?]\n\tat forestry.lepidopterology.entities.EntityButterfly.onUpdate(EntityButterfly.java:457) [EntityButterfly.class:?]\n\tat org.spongepowered.common.event.tracking.TrackingUtil.tickEntity(TrackingUtil.java:167) [!!!!!!!spongeforge-1.12.2-2838-7.2.2-RC4027.jar:1.12.2-2838-7.2.2-RC4027]\n\tat net.minecraft.world.WorldServer.redirect$zlk000$onCallEntityUpdate(WorldServer.java:4738) [oo.class:?]\n\tat net.minecraft.world.World.updateEntityWithOptionalForce(World.java:1996) [amu.class:?]\n\tat net.minecraft.world.WorldServer.updateEntityWithOptionalForce(WorldServer.java:832) [oo.class:?]\n\tat net.minecraft.world.World.updateEntity(World.java:1958) [amu.class:?]\n\tat net.minecraft.world.World.updateEntities(World.java:1762) [amu.class:?]\n\tat net.minecraft.world.WorldServer.updateEntities(WorldServer.java:3928) [oo.class:?]\n\tat net.minecraft.server.MinecraftServer.updateTimeLightAndEntities(MinecraftServer.java:767) [MinecraftServer.class:?]\n\tat net.minecraft.server.dedicated.DedicatedServer.updateTimeLightAndEntities(DedicatedServer.java:397) [nz.class:?]\n\tat net.minecraft.server.MinecraftServer.tick(MinecraftServer.java:668) [MinecraftServer.class:?]\n\tat net.minecraft.server.MinecraftServer.run(MinecraftServer.java:526) [MinecraftServer.class:?]\n\tat java.lang.Thread.run(Thread.java:813) [?:1.8.0_212]", "createdAt": "2020-05-22T16:59:59Z", "url": "https://github.com/SpongePowered/Sponge/pull/2619", "merged": true, "mergeCommit": {"oid": "f11b52a4e696d1a5a56f229b57f776ec1d055172"}, "closed": true, "closedAt": "2020-06-28T10:55:04Z", "author": {"login": "clienthax"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj1_HEAFqTQxNzA4MTM1Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABco_UIwABqjM0MTY4NzQzMzk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDgxMzUz", "url": "https://github.com/SpongePowered/Sponge/pull/2619#pullrequestreview-417081353", "createdAt": "2020-05-22T17:39:05Z", "commit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzozOTowNlrOGZe8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0Mzo1MFrOGZfESw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NDU3Nw==", "bodyText": "No, an overwrite is not the thing to do here. You can easily make this a cancellable injection at the head of the method instead. Overwrites should be used as a last resort.\nAlso, if pos is loaded, pos.down() will be loaded as it'll be in the same chunk, right? You can drop the .down() call in the injection to remove a method call.", "url": "https://github.com/SpongePowered/Sponge/pull/2619#discussion_r429374577", "createdAt": "2020-05-22T17:39:06Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/common/mixin/optimization/pathfinding/PathNavigateMixin_ChunkLoadOptimizations.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.optimization.pathfinding;\n+\n+import net.minecraft.pathfinding.PathNavigate;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+@Mixin(value = PathNavigate.class, priority = 1500)\n+public class PathNavigateMixin_ChunkLoadOptimizations {\n+\n+    @Shadow protected World world;\n+\n+    /**\n+     * Check if a chunk is loaded before attempting to check the state of the block\n+     * return false if the chunk is not loaded\n+     * @author Clienthax\n+     */\n+    @Overwrite\n+    public boolean canEntityStandOnPos(BlockPos pos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NTUxNA==", "bodyText": "Alphabetical order please.", "url": "https://github.com/SpongePowered/Sponge/pull/2619#discussion_r429375514", "createdAt": "2020-05-22T17:41:19Z", "author": {"login": "dualspiral"}, "path": "src/main/resources/mixins.common.optimization.json", "diffHunk": "@@ -27,7 +27,8 @@\n         \"world.gen.ChunkProviderServerMixin_Async_Lighting\",\n         \"world.gen.structure.MapGenStructureMixin_Structure_Saving\",\n         \"world.storage.MapDataMixin_MapOptimization\",\n-        \"world.storage.MapInfoMixin_MapOptimization\"\n+        \"world.storage.MapInfoMixin_MapOptimization\",\n+        \"pathfinding.PathNavigateMixin_ChunkLoadOptimizations\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NjQxMQ==", "bodyText": "Wrap the comment to 60 chars (I think?) as above. Make it a little more explicit as to what the configuration option does, for example (probably needs tweaking further):\n\"In vanilla, pathfinding may result in loading chunks.\\n\nYou can disable that here, which may result in a\\n\nperformance improvement. This may not work well\\n\nwith mods.\"", "url": "https://github.com/SpongePowered/Sponge/pull/2619#discussion_r429376411", "createdAt": "2020-05-22T17:43:26Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/common/config/category/OptimizationCategory.java", "diffHunk": "@@ -119,6 +119,11 @@\n             \"suppress the exceptions printing out in the log.\")\n     private boolean disableFailingAdvancementDeserialization = true;\n \n+    @Setting(value = \"disable-pathfinding-chunk-loads\", comment =\n+            \"In vanilla, pathfinding may result in chunks being loaded, This provides a method to disable chunks from loading during pathing.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NjU4Nw==", "bodyText": "this.world", "url": "https://github.com/SpongePowered/Sponge/pull/2619#discussion_r429376587", "createdAt": "2020-05-22T17:43:50Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/common/mixin/optimization/pathfinding/PathNavigateMixin_ChunkLoadOptimizations.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.optimization.pathfinding;\n+\n+import net.minecraft.pathfinding.PathNavigate;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+@Mixin(value = PathNavigate.class, priority = 1500)\n+public class PathNavigateMixin_ChunkLoadOptimizations {\n+\n+    @Shadow protected World world;\n+\n+    /**\n+     * Check if a chunk is loaded before attempting to check the state of the block\n+     * return false if the chunk is not loaded\n+     * @author Clienthax\n+     */\n+    @Overwrite\n+    public boolean canEntityStandOnPos(BlockPos pos) {\n+        final BlockPos downPos = pos.down();\n+        if (!world.isBlockLoaded(downPos)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14"}, "originalPosition": 47}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14", "author": {"user": {"login": "clienthax", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/caecb2adcf6c36306390f3e738a2e5d7602e4b14", "committedDate": "2020-05-22T16:59:03Z", "message": "Add pathfinding chunkload optimization"}, "afterCommit": {"oid": "c4395dedfbd5c1252315b82efe147eab0be0afda", "author": {"user": {"login": "clienthax", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/c4395dedfbd5c1252315b82efe147eab0be0afda", "committedDate": "2020-05-23T15:02:48Z", "message": "Add pathfinding chunkload optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c4395dedfbd5c1252315b82efe147eab0be0afda", "author": {"user": {"login": "clienthax", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/c4395dedfbd5c1252315b82efe147eab0be0afda", "committedDate": "2020-05-23T15:02:48Z", "message": "Add pathfinding chunkload optimization"}, "afterCommit": {"oid": "2c9d44ddc45da409440c74a2cdd0085c81c0bfd5", "author": {"user": {"login": "clienthax", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/2c9d44ddc45da409440c74a2cdd0085c81c0bfd5", "committedDate": "2020-05-23T15:04:31Z", "message": "Add pathfinding chunkload optimization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODQ5MTgw", "url": "https://github.com/SpongePowered/Sponge/pull/2619#pullrequestreview-417849180", "createdAt": "2020-05-25T19:11:45Z", "commit": {"oid": "2c9d44ddc45da409440c74a2cdd0085c81c0bfd5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "345c47de7a285a87e669735beb370e2d8544917f", "author": {"user": {"login": "clienthax", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/345c47de7a285a87e669735beb370e2d8544917f", "committedDate": "2020-06-07T17:28:46Z", "message": "Add pathfinding chunkload optimization"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c9d44ddc45da409440c74a2cdd0085c81c0bfd5", "author": {"user": {"login": "clienthax", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/2c9d44ddc45da409440c74a2cdd0085c81c0bfd5", "committedDate": "2020-05-23T15:04:31Z", "message": "Add pathfinding chunkload optimization"}, "afterCommit": {"oid": "345c47de7a285a87e669735beb370e2d8544917f", "author": {"user": {"login": "clienthax", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/345c47de7a285a87e669735beb370e2d8544917f", "committedDate": "2020-06-07T17:28:46Z", "message": "Add pathfinding chunkload optimization"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 912, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}