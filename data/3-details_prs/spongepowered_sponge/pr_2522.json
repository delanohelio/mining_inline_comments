{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxOTQ5MDAz", "number": 2522, "title": "Implement API methods for Block/Fluid states and FluidType [API-8]", "bodyText": "Implements all API methods from Block/FluidState and FluidType.\nSome methods may still need to be migrated/adapted from the old BlockState mixin which is now BlockStateMixin_API_Old or belong in the data implementation.", "createdAt": "2020-02-29T21:54:36Z", "url": "https://github.com/SpongePowered/Sponge/pull/2522", "merged": true, "mergeCommit": {"oid": "f4a8218dbf065f09bd233ff928c58779ba7a7011"}, "closed": true, "closedAt": "2020-03-14T18:24:25Z", "author": {"login": "i509VCB"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMhJPYAFqTM2NjgzMjIyOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcNpJypAFqTM3NDc0NDc1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2ODMyMjI5", "url": "https://github.com/SpongePowered/Sponge/pull/2522#pullrequestreview-366832229", "createdAt": "2020-03-01T03:11:52Z", "commit": {"oid": "daf85692881c5dbd3a405702bc6da1be004980e6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMVQwMzoxMTo1MlrOFwMAXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwNjozMDowMlrOF0qjOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjA3MjY2OQ==", "bodyText": "It\u2019s not intrinsic, the return types are completely different (api.FluidState vs nms.FluidState)", "url": "https://github.com/SpongePowered/Sponge/pull/2522#discussion_r386072669", "createdAt": "2020-03-01T03:11:52Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/block/BlockStateMixin_API.java", "diffHunk": "@@ -24,260 +24,44 @@\n  */\n package org.spongepowered.common.mixin.api.mcp.block;\n \n-import com.google.common.base.Joiner;\n-import com.google.common.collect.ImmutableMap;\n-import net.minecraft.block.properties.IProperty;\n+import net.minecraft.block.Block;\n+import net.minecraft.fluid.IFluidState;\n import org.spongepowered.api.block.BlockState;\n import org.spongepowered.api.block.BlockType;\n-import org.spongepowered.api.data.DataManipulator.Immutable;\n-import org.spongepowered.api.data.Key;\n import org.spongepowered.api.data.persistence.DataContainer;\n import org.spongepowered.api.data.persistence.Queries;\n-import org.spongepowered.api.data.property.Property;\n-import org.spongepowered.api.data.value.MergeFunction;\n-import org.spongepowered.api.data.value.Value;\n-import org.spongepowered.api.state.StateProperty;\n-import org.spongepowered.api.util.Cycleable;\n-import org.spongepowered.api.util.Direction;\n-import org.spongepowered.api.world.Location;\n-import org.spongepowered.api.world.World;\n+import org.spongepowered.api.fluid.FluidState;\n+import org.spongepowered.asm.mixin.Intrinsic;\n import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.common.mixin.api.mcp.state.StateHolderMixin_API;\n import org.spongepowered.common.util.Constants;\n-import org.spongepowered.common.util.VecHelper;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.function.Function;\n \n @Mixin(net.minecraft.block.BlockState.class)\n-public interface BlockStateMixin_API extends net.minecraft.block.BlockState, BlockState {\n-\n-    @Override\n-    default BlockType getType() {\n-        return (BlockType) this.getBlock();\n-    }\n-\n-    @Override\n-    default BlockState withExtendedProperties(final Location<World> location) {\n-        return (BlockState) this.getActualState((net.minecraft.world.World) location.getExtent(), VecHelper.toBlockPos(location));\n-\n-    }\n-\n-    @Override\n-    default BlockState cycleValue(final Key<? extends Value<? extends Cycleable<?>>> key) {\n-        return this;\n-    }\n-\n-\n-    @SuppressWarnings({\"unchecked\"})\n-    @Override\n-    default <T extends Comparable<T>> Optional<T> getTraitValue(final StateProperty<T> blockTrait) {\n-        for (final Map.Entry<IProperty<?>, Comparable<?>> entry : this.getProperties().entrySet()) {\n-            //noinspection EqualsBetweenInconvertibleTypes\n-            if (entry.getKey() == blockTrait) {\n-                return Optional.of((T) entry.getValue());\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    @SuppressWarnings(\"rawtypes\")\n-    @Override\n-    default Optional<StateProperty<?>> getTrait(final String blockTrait) {\n-        for (final IProperty property : this.getProperties().keySet()) {\n-            if (property.getName().equalsIgnoreCase(blockTrait)) {\n-                return Optional.of((StateProperty<?>) property);\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    @SuppressWarnings({\"rawtypes\", \"unchecked\", \"RedundantCast\"})\n-    @Override\n-    default Optional<BlockState> withTrait(final StateProperty<?> trait, final Object value) {\n-        if (value instanceof String) {\n-            Comparable foundValue = null;\n-            for (final Comparable comparable : trait.getPossibleValues()) {\n-                if (comparable.toString().equals(value)) {\n-                    foundValue = comparable;\n-                    break;\n-                }\n-            }\n-            if (foundValue != null) {\n-                return Optional.of((BlockState) this.withProperty((IProperty) trait, foundValue));\n-            }\n-        }\n-        if (value instanceof Comparable) {\n-            if (this.getProperties().containsKey((IProperty) trait) && ((IProperty) trait).getAllowedValues().contains(value)) {\n-                return Optional.of((BlockState) this.withProperty((IProperty) trait, (Comparable) value));\n-            }\n-        }\n-        return Optional.empty();\n-    }\n-\n-    @Override\n-    default Collection<StateProperty<?>> getTraits() {\n-        return this.getTraitMap().keySet();\n-    }\n+public abstract class BlockStateMixin_API extends StateHolderMixin_API<BlockState, net.minecraft.block.BlockState> implements BlockState {\n \n-    @Override\n-    default Collection<?> getTraitValues() {\n-        return this.getTraitMap().values();\n-    }\n-\n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    @Override\n-    default Map<StateProperty<?>, ?> getTraitMap() {\n-        return (ImmutableMap) this.getProperties();\n-    }\n-\n-    @Override\n-    default String getId() {\n-        final StringBuilder builder = new StringBuilder();\n-        builder.append(((BlockType) this.getBlock()).getId());\n-        final ImmutableMap<IProperty<?>, Comparable<?>> properties =  this.getProperties();\n-        if (!properties.isEmpty()) {\n-            builder.append('[');\n-            final Joiner joiner = Joiner.on(',');\n-            final List<String> propertyValues = new ArrayList<>();\n-            for (final Map.Entry<IProperty<?>, Comparable<?>> entry : properties.entrySet()) {\n-                propertyValues.add(entry.getKey().getName() + \"=\" + entry.getValue());\n-            }\n-            builder.append(joiner.join(propertyValues));\n-            builder.append(']');\n-        }\n-        return builder.toString();\n-    }\n-\n-    @Override\n-    default String getName() {\n-        return this.getId();\n-    }\n+    @Shadow public abstract Block shadow$getBlock();\n+    @Shadow public abstract IFluidState shadow$getFluidState();\n \n     @Override\n-    default <T extends Property<?, ?>> Optional<T> getProperty(final Direction direction, final Class<T> clazz) {\n-        return Optional.empty();\n+    public BlockType getType() {\n+        return (BlockType) this.shadow$getBlock();\n     }\n \n-    @Override\n-    default List<Immutable<?, ?>> getManipulators() {\n-        return Collections.emptyList();\n+    @Intrinsic", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf85692881c5dbd3a405702bc6da1be004980e6"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NjM3Mg==", "bodyText": "Not intrinsic either, it's an API construct, not the net.minecraft.FluidState.", "url": "https://github.com/SpongePowered/Sponge/pull/2522#discussion_r390766372", "createdAt": "2020-03-11T06:26:05Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/fluid/FluidMixin_API.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.api.mcp.fluid;\n+\n+import com.google.common.collect.ImmutableList;\n+import net.minecraft.fluid.Fluid;\n+import net.minecraft.fluid.IFluidState;\n+import org.spongepowered.api.fluid.FluidState;\n+import org.spongepowered.api.fluid.FluidType;\n+import org.spongepowered.api.state.StateProperty;\n+import org.spongepowered.asm.mixin.Intrinsic;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+@Mixin(Fluid.class)\n+public abstract class FluidMixin_API implements FluidType {\n+\n+    @Shadow public abstract net.minecraft.state.StateContainer<Fluid, IFluidState> shadow$getStateContainer();\n+    @Shadow public abstract net.minecraft.fluid.IFluidState shadow$getDefaultState();\n+\n+    @Override\n+    public ImmutableList<FluidState> getValidStates() {\n+        return (ImmutableList) this.shadow$getStateContainer().getValidStates();\n+    }\n+\n+    @Intrinsic\n+    public FluidState getDefaultState() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf85692881c5dbd3a405702bc6da1be004980e6"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NjcwOA==", "bodyText": "If this is intrinsic (which it seems like it very well is in dev time), you need to prefix with a prefix for the\n@Implements(iface = ...) on the mixing itself as well.", "url": "https://github.com/SpongePowered/Sponge/pull/2522#discussion_r390766708", "createdAt": "2020-03-11T06:27:22Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/fluid/IFluidStateMixin_API.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.api.mcp.fluid;\n+\n+import net.minecraft.fluid.Fluid;\n+import net.minecraft.fluid.IFluidState;\n+import org.spongepowered.api.block.BlockState;\n+import org.spongepowered.api.fluid.FluidState;\n+import org.spongepowered.api.fluid.FluidType;\n+import org.spongepowered.asm.mixin.Intrinsic;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+@Mixin(IFluidState.class)\n+public interface IFluidStateMixin_API extends FluidState {\n+\n+    @Shadow Fluid shadow$getFluid();\n+    @Shadow net.minecraft.block.BlockState getBlockState();\n+    @Shadow boolean shadow$isEmpty();\n+\n+    @Override\n+    default FluidType getType() {\n+        return (FluidType) this.shadow$getFluid();\n+    }\n+\n+    @Override\n+    default BlockState getBlock() {\n+        return (BlockState) this.getBlockState();\n+    }\n+\n+    @Intrinsic\n+    default boolean isEmpty() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf85692881c5dbd3a405702bc6da1be004980e6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NzE4Ng==", "bodyText": "What's this _Old? is it being retained? Is it still being applied?", "url": "https://github.com/SpongePowered/Sponge/pull/2522#discussion_r390767186", "createdAt": "2020-03-11T06:29:02Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/invalid/api/mcp/block/BlockStateMixin_API_Old.java", "diffHunk": "@@ -0,0 +1,283 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.invalid.api.mcp.block;\n+\n+import com.google.common.base.Joiner;\n+import com.google.common.collect.ImmutableMap;\n+import net.minecraft.block.properties.IProperty;\n+import org.spongepowered.api.block.BlockState;\n+import org.spongepowered.api.block.BlockType;\n+import org.spongepowered.api.data.DataManipulator.Immutable;\n+import org.spongepowered.api.data.Key;\n+import org.spongepowered.api.data.persistence.DataContainer;\n+import org.spongepowered.api.data.persistence.Queries;\n+import org.spongepowered.api.data.property.Property;\n+import org.spongepowered.api.data.value.MergeFunction;\n+import org.spongepowered.api.data.value.Value;\n+import org.spongepowered.api.state.StateProperty;\n+import org.spongepowered.api.util.Cycleable;\n+import org.spongepowered.api.util.Direction;\n+import org.spongepowered.api.world.Location;\n+import org.spongepowered.api.world.World;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.common.util.Constants;\n+import org.spongepowered.common.util.VecHelper;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+@Mixin(net.minecraft.block.BlockState.class)\n+public interface BlockStateMixin_API_Old extends net.minecraft.block.BlockState, BlockState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf85692881c5dbd3a405702bc6da1be004980e6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NzI3MA==", "bodyText": "It shouldn't be.", "url": "https://github.com/SpongePowered/Sponge/pull/2522#discussion_r390767270", "createdAt": "2020-03-11T06:29:27Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/invalid/api/mcp/block/state/StateImplementationMixin_API.java", "diffHunk": "@@ -68,7 +68,7 @@\n import javax.annotation.Nullable;\n \n /**\n- * This shares implementation with {@link BlockStateMixin_API}, since this\n+ * This shares implementation with {@link BlockStateMixin_API_Old}, since this", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf85692881c5dbd3a405702bc6da1be004980e6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NzM3NA==", "bodyText": "Unrelated, just undo for now. the licenses can be fixed outside the PR.", "url": "https://github.com/SpongePowered/Sponge/pull/2522#discussion_r390767374", "createdAt": "2020-03-11T06:29:51Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/registry/builtin/supplier/ContainerTypeSupplier.java", "diffHunk": "@@ -1,3 +1,27 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf85692881c5dbd3a405702bc6da1be004980e6"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDc2NzQxNg==", "bodyText": "Undo for now, licenses should be fixed outside the PR.", "url": "https://github.com/SpongePowered/Sponge/pull/2522#discussion_r390767416", "createdAt": "2020-03-11T06:30:02Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/inventory/api/container/ContainerTypeMixin_API.java", "diffHunk": "@@ -1,3 +1,27 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "daf85692881c5dbd3a405702bc6da1be004980e6"}, "originalPosition": 24}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "daf85692881c5dbd3a405702bc6da1be004980e6", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/daf85692881c5dbd3a405702bc6da1be004980e6", "committedDate": "2020-02-29T21:43:54Z", "message": "Implement API methods for Block/Fluid states and FluidType"}, "afterCommit": {"oid": "1a95f324dac3db9fd188b6743132556149b3105f", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/1a95f324dac3db9fd188b6743132556149b3105f", "committedDate": "2020-03-11T15:37:11Z", "message": "Implement API methods for Block/Fluid states and FluidType"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e63c3770ae819dea20369791b5be063f07be71e", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/3e63c3770ae819dea20369791b5be063f07be71e", "committedDate": "2020-03-11T15:39:00Z", "message": "Implement API methods for Block/Fluid states and FluidType"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1a95f324dac3db9fd188b6743132556149b3105f", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/1a95f324dac3db9fd188b6743132556149b3105f", "committedDate": "2020-03-11T15:37:11Z", "message": "Implement API methods for Block/Fluid states and FluidType"}, "afterCommit": {"oid": "3e63c3770ae819dea20369791b5be063f07be71e", "author": {"user": {"login": "i509VCB", "name": null}}, "url": "https://github.com/SpongePowered/Sponge/commit/3e63c3770ae819dea20369791b5be063f07be71e", "committedDate": "2020-03-11T15:39:00Z", "message": "Implement API methods for Block/Fluid states and FluidType"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMjgzNDU0", "url": "https://github.com/SpongePowered/Sponge/pull/2522#pullrequestreview-373283454", "createdAt": "2020-03-12T05:16:16Z", "commit": {"oid": "3e63c3770ae819dea20369791b5be063f07be71e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxNjoxN1rOF1Rf9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNToxNjo1N1rOF1RglQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTU1Ng==", "bodyText": "What is C? Is this from an implementation's target?", "url": "https://github.com/SpongePowered/Sponge/pull/2522#discussion_r391405556", "createdAt": "2020-03-12T05:16:17Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/state/StateHolderMixin_API.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.api.mcp.state;\n+\n+import net.minecraft.state.IProperty;\n+import net.minecraft.state.StateHolder;\n+import org.spongepowered.api.state.State;\n+import org.spongepowered.api.state.StateProperty;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+import java.util.Optional;\n+\n+@Mixin(StateHolder.class)\n+public abstract class StateHolderMixin_API<S extends State<S>, C> implements IStateHolderMixin_API<S> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e63c3770ae819dea20369791b5be063f07be71e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTcxNw==", "bodyText": "This is a case where the class needs javadocs explaining the diamonding of generic types.", "url": "https://github.com/SpongePowered/Sponge/pull/2522#discussion_r391405717", "createdAt": "2020-03-12T05:16:57Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/api/mcp/state/StateHolderMixin_API.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.api.mcp.state;\n+\n+import net.minecraft.state.IProperty;\n+import net.minecraft.state.StateHolder;\n+import org.spongepowered.api.state.State;\n+import org.spongepowered.api.state.StateProperty;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+import java.util.Optional;\n+\n+@Mixin(StateHolder.class)\n+public abstract class StateHolderMixin_API<S extends State<S>, C> implements IStateHolderMixin_API<S> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQwNTU1Ng=="}, "originalCommit": {"oid": "3e63c3770ae819dea20369791b5be063f07be71e"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0NzQ0NzUx", "url": "https://github.com/SpongePowered/Sponge/pull/2522#pullrequestreview-374744751", "createdAt": "2020-03-14T18:23:54Z", "commit": {"oid": "3e63c3770ae819dea20369791b5be063f07be71e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 860, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}