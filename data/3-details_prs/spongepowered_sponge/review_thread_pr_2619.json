{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMDQ1Njgx", "number": 2619, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzozOTowNlrOD_BmSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0Mzo1MFrOD_BrHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDEzMDY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/optimization/pathfinding/PathNavigateMixin_ChunkLoadOptimizations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzozOTowNlrOGZe8cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzozOTowNlrOGZe8cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NDU3Nw==", "bodyText": "No, an overwrite is not the thing to do here. You can easily make this a cancellable injection at the head of the method instead. Overwrites should be used as a last resort.\nAlso, if pos is loaded, pos.down() will be loaded as it'll be in the same chunk, right? You can drop the .down() call in the injection to remove a method call.", "url": "https://github.com/SpongePowered/Sponge/pull/2619#discussion_r429374577", "createdAt": "2020-05-22T17:39:06Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/common/mixin/optimization/pathfinding/PathNavigateMixin_ChunkLoadOptimizations.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.optimization.pathfinding;\n+\n+import net.minecraft.pathfinding.PathNavigate;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+@Mixin(value = PathNavigate.class, priority = 1500)\n+public class PathNavigateMixin_ChunkLoadOptimizations {\n+\n+    @Shadow protected World world;\n+\n+    /**\n+     * Check if a chunk is loaded before attempting to check the state of the block\n+     * return false if the chunk is not loaded\n+     * @author Clienthax\n+     */\n+    @Overwrite\n+    public boolean canEntityStandOnPos(BlockPos pos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDEzNjQ2OnYy", "diffSide": "RIGHT", "path": "src/main/resources/mixins.common.optimization.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0MToxOVrOGZfAGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0MToxOVrOGZfAGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NTUxNA==", "bodyText": "Alphabetical order please.", "url": "https://github.com/SpongePowered/Sponge/pull/2619#discussion_r429375514", "createdAt": "2020-05-22T17:41:19Z", "author": {"login": "dualspiral"}, "path": "src/main/resources/mixins.common.optimization.json", "diffHunk": "@@ -27,7 +27,8 @@\n         \"world.gen.ChunkProviderServerMixin_Async_Lighting\",\n         \"world.gen.structure.MapGenStructureMixin_Structure_Saving\",\n         \"world.storage.MapDataMixin_MapOptimization\",\n-        \"world.storage.MapInfoMixin_MapOptimization\"\n+        \"world.storage.MapInfoMixin_MapOptimization\",\n+        \"pathfinding.PathNavigateMixin_ChunkLoadOptimizations\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDE0MTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/config/category/OptimizationCategory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0MzoyNlrOGZfDmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0MzoyNlrOGZfDmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NjQxMQ==", "bodyText": "Wrap the comment to 60 chars (I think?) as above. Make it a little more explicit as to what the configuration option does, for example (probably needs tweaking further):\n\"In vanilla, pathfinding may result in loading chunks.\\n\nYou can disable that here, which may result in a\\n\nperformance improvement. This may not work well\\n\nwith mods.\"", "url": "https://github.com/SpongePowered/Sponge/pull/2619#discussion_r429376411", "createdAt": "2020-05-22T17:43:26Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/common/config/category/OptimizationCategory.java", "diffHunk": "@@ -119,6 +119,11 @@\n             \"suppress the exceptions printing out in the log.\")\n     private boolean disableFailingAdvancementDeserialization = true;\n \n+    @Setting(value = \"disable-pathfinding-chunk-loads\", comment =\n+            \"In vanilla, pathfinding may result in chunks being loaded, This provides a method to disable chunks from loading during pathing.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDE0MzAyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/optimization/pathfinding/PathNavigateMixin_ChunkLoadOptimizations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0Mzo1MFrOGZfESw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzo0Mzo1MFrOGZfESw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM3NjU4Nw==", "bodyText": "this.world", "url": "https://github.com/SpongePowered/Sponge/pull/2619#discussion_r429376587", "createdAt": "2020-05-22T17:43:50Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/common/mixin/optimization/pathfinding/PathNavigateMixin_ChunkLoadOptimizations.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.optimization.pathfinding;\n+\n+import net.minecraft.pathfinding.PathNavigate;\n+import net.minecraft.util.math.BlockPos;\n+import net.minecraft.world.World;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+\n+@Mixin(value = PathNavigate.class, priority = 1500)\n+public class PathNavigateMixin_ChunkLoadOptimizations {\n+\n+    @Shadow protected World world;\n+\n+    /**\n+     * Check if a chunk is loaded before attempting to check the state of the block\n+     * return false if the chunk is not loaded\n+     * @author Clienthax\n+     */\n+    @Overwrite\n+    public boolean canEntityStandOnPos(BlockPos pos) {\n+        final BlockPos downPos = pos.down();\n+        if (!world.isBlockLoaded(downPos)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caecb2adcf6c36306390f3e738a2e5d7602e4b14"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2652, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}