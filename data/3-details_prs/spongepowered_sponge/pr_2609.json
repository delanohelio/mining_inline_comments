{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTMwNjY2", "number": 2609, "title": "API8 fixes", "bodyText": "a bunch of fixes for the API8 implementation", "createdAt": "2020-05-12T19:41:48Z", "url": "https://github.com/SpongePowered/Sponge/pull/2609", "merged": true, "mergeCommit": {"oid": "9466952d6b3dc1fb092e1a9b71653078d50a47d4"}, "closed": true, "closedAt": "2020-05-18T00:41:28Z", "author": {"login": "Faithcaio"}, "timelineItems": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgm_StgH2gAyNDE2OTMwNjY2OjcyN2IxNDkyZGViNTc5NDgxMThkNGZhZDgxOGYxMzJmMzUzODY4Njc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABch7Gq2ABqjMzNDM4NTA4Mjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "727b1492deb57948118d4fad818f132f35386867", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/727b1492deb57948118d4fad818f132f35386867", "committedDate": "2020-05-12T16:37:11Z", "message": "fix SqlServiceImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a275e0d51bc421019fa4106c63edce5d16c1425", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/5a275e0d51bc421019fa4106c63edce5d16c1425", "committedDate": "2020-05-12T16:37:11Z", "message": "fix incompatible types compile errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b72c3a17d66dac42b5a2c7f0890a041a0260e488", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/b72c3a17d66dac42b5a2c7f0890a041a0260e488", "committedDate": "2020-05-12T16:37:11Z", "message": "fix SpongeTriggerBuilder missing from()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd1d9c0706c33e126a132b7a603e9f1c729f81d5", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/cd1d9c0706c33e126a132b7a603e9f1c729f81d5", "committedDate": "2020-05-12T16:37:11Z", "message": "Block DyeColors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ab27d55513581256e15df4da3d5cdaa7a728e9c", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/0ab27d55513581256e15df4da3d5cdaa7a728e9c", "committedDate": "2020-05-12T18:34:52Z", "message": "fix most EntityUtil compile errors\nTeleport code still needs a thorough check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8e281caacd7d10acf93bcdb34ccbdf380162080", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/b8e281caacd7d10acf93bcdb34ccbdf380162080", "committedDate": "2020-05-12T18:37:35Z", "message": "fix Tracker PhaseStates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab5ddcf472505037671b20a83ecb30c30ce78da3", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/ab5ddcf472505037671b20a83ecb30c30ce78da3", "committedDate": "2020-05-12T18:58:53Z", "message": "fix PacketPhaseUtil main hand slot restoration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1605c180062e3d3e3144cbc654c68bfc160ebed", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/e1605c180062e3d3e3144cbc654c68bfc160ebed", "committedDate": "2020-05-12T19:15:32Z", "message": "fix SpongeEntityDamageSourceBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114ecf0142e7d251731ee967790e4eb4a42935be", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/114ecf0142e7d251731ee967790e4eb4a42935be", "committedDate": "2020-05-12T19:18:23Z", "message": "notifier is data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTQ4NjM1", "url": "https://github.com/SpongePowered/Sponge/pull/2609#pullrequestreview-410548635", "createdAt": "2020-05-13T02:37:22Z", "commit": {"oid": "114ecf0142e7d251731ee967790e4eb4a42935be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozNzoyMlrOGUfeOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwMjozNzoyMlrOGUfeOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE0MDM0Ng==", "bodyText": "this is negotiated based on the mixin  and damage source to type provider.", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424140346", "createdAt": "2020-05-13T02:37:22Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/event/damage/SpongeEntityDamageSourceBuilder.java", "diffHunk": "@@ -49,8 +49,8 @@ public SpongeEntityDamageSourceBuilder entity(final Entity entity) {\n     public EntityDamageSource build() throws IllegalStateException {\n         checkState(this.damageType != null, \"Damage type cannot be null!\");\n         checkState(this.reference.get() != null);\n-        final net.minecraft.util.EntityDamageSource damageSource =\n-            new net.minecraft.util.EntityDamageSource(this.damageType.getId(), (net.minecraft.entity.Entity) this.reference.get());\n+        final net.minecraft.util.EntityDamageSource damageSource = // TODO damageType String is used for the translation key!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "114ecf0142e7d251731ee967790e4eb4a42935be"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87f12af8187c1c0012793f93a53f23f1498a9e21", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/87f12af8187c1c0012793f93a53f23f1498a9e21", "committedDate": "2020-05-13T18:09:54Z", "message": "fix SmeltingRecipe mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80c816e1aead47c32b5ffd84e03fd99f4a75a8f5", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/80c816e1aead47c32b5ffd84e03fd99f4a75a8f5", "committedDate": "2020-05-13T18:10:18Z", "message": "remove SpongeUser raw data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/6160b635c9b939b79f879290c1eda656df7f0bbe", "committedDate": "2020-05-13T19:55:20Z", "message": "a bunch of easy mixin fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDc3NzIx", "url": "https://github.com/SpongePowered/Sponge/pull/2609#pullrequestreview-411477721", "createdAt": "2020-05-14T05:38:25Z", "commit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozODoyNVrOGVMt2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozODoyNVrOGVMt2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MTYyNA==", "bodyText": "Do we not even have one of these from before?", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424881624", "createdAt": "2020-05-14T05:38:25Z", "author": {"login": "gabizou"}, "path": "src/accessors/java/org/spongepowered/common/accessor/entity/player/ServerPlayerEntityAccessor.java", "diffHunk": "@@ -22,33 +22,15 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.common.mixin.api.mcp.item;\n+package org.spongepowered.common.accessor.entity.player;\n \n-import net.minecraft.entity.merchant.IMerchant;\n-import net.minecraft.item.MerchantOffer;\n-import net.minecraft.item.MerchantOffers;\n-import org.spongepowered.api.item.merchant.Merchant;\n-import org.spongepowered.api.item.merchant.TradeOffer;\n-import org.spongepowered.api.item.merchant.TradeOfferListMutator;\n+import net.minecraft.entity.player.ServerPlayerEntity;\n+import net.minecraft.util.math.Vec3d;\n import org.spongepowered.asm.mixin.Mixin;\n-import org.spongepowered.common.item.util.TradeOfferUtil;\n-import java.util.List;\n-import java.util.Random;\n+import org.spongepowered.asm.mixin.gen.Accessor;\n \n-@Mixin(MerchantOffers.class)\n-public interface MerchantOffersMixin_API extends TradeOfferListMutator {\n-\n-    @Override\n-    default void accept(final Merchant owner, final List<TradeOffer> tradeOffers, final Random random) {\n-        final MerchantOffers tempList = new MerchantOffers();\n-        for (final TradeOffer offer : tradeOffers) {\n-            tempList.add(TradeOfferUtil.toNative(offer));\n-        }\n-        addMerchantRecipe((IMerchant) owner, tempList, random);\n-        tradeOffers.clear();\n-        for (final MerchantOffer recipe : tempList) {\n-            tradeOffers.add(TradeOfferUtil.fromNative(recipe));\n-        }\n-    }\n+@Mixin(ServerPlayerEntity.class)\n+public interface ServerPlayerEntityAccessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDc4MDQ0", "url": "https://github.com/SpongePowered/Sponge/pull/2609#pullrequestreview-411478044", "createdAt": "2020-05-14T05:39:15Z", "commit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTozOToxNlrOGVMuxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNTo0NjoxMlrOGVM2hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MTg2MA==", "bodyText": "I'd rather\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Nullable DyeColor bridge$getDyeColor();\n          \n          \n            \n                Optional<DyeColor> bridge$getDyeColor();", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424881860", "createdAt": "2020-05-14T05:39:16Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/bridge/block/DyeColorBlockBridge.java", "diffHunk": "@@ -26,7 +26,10 @@\n \n import net.minecraft.item.DyeColor;\n \n-public interface DyeableBlockBridge {\n+import javax.annotation.Nullable;\n+\n+public interface DyeColorBlockBridge {\n \n     void bridge$setDyeColor(DyeColor dyeColor);\n+    @Nullable DyeColor bridge$getDyeColor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjA2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Stream<DataProvider> stream = this.dataProviders.keySet().stream()\n          \n          \n            \n                    final Stream<DataProvider> stream = this.dataProviders.keySet().stream()", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424882069", "createdAt": "2020-05-14T05:40:03Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/provider/DataProviderRegistry.java", "diffHunk": "@@ -100,10 +101,10 @@ private static boolean filterHolderType(DataProvider<?,?> provider, Class<?> hol\n     }\n \n     private DataProviderLookup loadProviderLookup(Class<?> holderType) {\n-        return new DataProviderLookup(this.dataProviders.keySet().stream()\n-                .map(key -> this.getProvider(key, holderType))\n-                .filter(provider -> !(provider instanceof EmptyDataProvider))\n-                .collect(Collectors.toMap(DataProvider::getKey, Function.identity())));\n+        Stream<DataProvider> stream = this.dataProviders.keySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjQ5Mw==", "bodyText": "This is really janky to read. Either collect on the stream above or declare a new variable to pass in.", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424882493", "createdAt": "2020-05-14T05:41:26Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/provider/DataProviderRegistry.java", "diffHunk": "@@ -100,10 +101,10 @@ private static boolean filterHolderType(DataProvider<?,?> provider, Class<?> hol\n     }\n \n     private DataProviderLookup loadProviderLookup(Class<?> holderType) {\n-        return new DataProviderLookup(this.dataProviders.keySet().stream()\n-                .map(key -> this.getProvider(key, holderType))\n-                .filter(provider -> !(provider instanceof EmptyDataProvider))\n-                .collect(Collectors.toMap(DataProvider::getKey, Function.identity())));\n+        Stream<DataProvider> stream = this.dataProviders.keySet().stream()\n+                .map(key -> this.getProvider((Key) key, holderType))\n+                .filter(provider -> !(provider instanceof EmptyDataProvider));\n+        return new DataProviderLookup(stream.collect(Collectors.toMap(p -> (Key<?>) p.getKey(), p -> (DataProvider<?, ?>) p)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjUyNw==", "bodyText": "final", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424882527", "createdAt": "2020-05-14T05:41:34Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/provider/DataProviderRegistry.java", "diffHunk": "@@ -143,10 +144,9 @@ public DataProviderLookup getProviderLookup(Class<?> dataHolderType) {\n      */\n     public DataProviderLookup buildLookup(Predicate<DataProvider<?,?>> predicate) {\n         //noinspection unchecked,rawtypes\n-        final Map<Key<?>, DataProvider<?,?>> dataProviders = this.dataProviders.keySet().stream()\n-                .map(key -> buildDelegateProvider(key, (List) this.dataProviders.get(key).stream().filter(predicate)))\n-                .collect(Collectors.toMap(DataProvider::getKey, Function.identity()));\n-        return new DataProviderLookup(dataProviders);\n+        Stream<DataProvider> stream = this.dataProviders.keySet().stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjU2OA==", "bodyText": "Same as before, janky to read..", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424882568", "createdAt": "2020-05-14T05:41:43Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/provider/DataProviderRegistry.java", "diffHunk": "@@ -143,10 +144,9 @@ public DataProviderLookup getProviderLookup(Class<?> dataHolderType) {\n      */\n     public DataProviderLookup buildLookup(Predicate<DataProvider<?,?>> predicate) {\n         //noinspection unchecked,rawtypes\n-        final Map<Key<?>, DataProvider<?,?>> dataProviders = this.dataProviders.keySet().stream()\n-                .map(key -> buildDelegateProvider(key, (List) this.dataProviders.get(key).stream().filter(predicate)))\n-                .collect(Collectors.toMap(DataProvider::getKey, Function.identity()));\n-        return new DataProviderLookup(dataProviders);\n+        Stream<DataProvider> stream = this.dataProviders.keySet().stream()\n+                .map(key -> buildDelegateProvider((Key) key, (List) this.dataProviders.get(key).stream().filter(predicate)));\n+        return new DataProviderLookup(stream.collect(Collectors.toMap(p -> (Key<?>) p.getKey(), p -> (DataProvider<?, ?>) p)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MjkxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Item item = dataHolder.getItem();\n          \n          \n            \n                    if (item instanceof BlockItem) {\n          \n          \n            \n                        Block block = ((BlockItem) item).getBlock();\n          \n          \n            \n                        net.minecraft.item.DyeColor color = ((DyeColorBlockBridge) block).bridge$getDyeColor();\n          \n          \n            \n                        return Optional.ofNullable((DyeColor) (Object) color);\n          \n          \n            \n                    final Item item = dataHolder.getItem();\n          \n          \n            \n                    if (item instanceof BlockItem) {\n          \n          \n            \n                        final Block block = ((BlockItem) item).getBlock();\n          \n          \n            \n                        return ((DyeColorBlockBridge) block)..bridge$getDyeColor();\n          \n      \n    \n    \n  \n\nThis way you have the optional already provided by the bridge implementation", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424882914", "createdAt": "2020-05-14T05:42:49Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/provider/item/stack/ItemStackDyeColorProvider.java", "diffHunk": "@@ -40,17 +41,19 @@ public ItemStackDyeColorProvider() {\n         super(Keys.DYE_COLOR);\n     }\n \n-    /**\n-     * Maybe try mixin injection in {@link Block.Properties#create(Material, net.minecraft.item.DyeColor)}\n-     * to capture DyeColor.\n-     */\n     @Override\n     protected Optional<DyeColor> getFrom(ItemStack dataHolder) {\n-        return ((DyeColorItemBrige)dataHolder).bridge$getDyeColor();\n+        Item item = dataHolder.getItem();\n+        if (item instanceof BlockItem) {\n+            Block block = ((BlockItem) item).getBlock();\n+            net.minecraft.item.DyeColor color = ((DyeColorBlockBridge) block).bridge$getDyeColor();\n+            return Optional.ofNullable((DyeColor) (Object) color);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MzA3OA==", "bodyText": "Gonna need a class level suppress warnings for raw usage", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424883078", "createdAt": "2020-05-14T05:43:24Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/util/StateHelper.java", "diffHunk": "@@ -35,7 +35,7 @@\n     public static <O, S extends StateHolder<O, S>> S copyStatesFrom(S original, StateHolder<?,?> from) {\n         for (final Map.Entry<IProperty<?>, Comparable<?>> entry : from.getValues().entrySet()) {\n             if (original.has(entry.getKey())) {\n-                original = (S) original.with(entry.getKey(), (Comparable) entry.getValue());\n+                original = (S) original.with((IProperty) entry.getKey(), (Comparable) entry.getValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MzI3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        DimensionType fromType = fromWorld.getDimension().getType();\n          \n          \n            \n                        DimensionType toType = toWorld.getDimension().getType();\n          \n          \n            \n                        final DimensionType fromType = fromWorld.getDimension().getType();\n          \n          \n            \n                        final DimensionType toType = toWorld.getDimension().getType();", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424883273", "createdAt": "2020-05-14T05:44:06Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/entity/EntityUtil.java", "diffHunk": "@@ -406,72 +407,69 @@ public static ServerPlayerEntity transferPlayerToWorld(final ServerPlayerEntity\n             toWorld = (ServerWorld) event.getToWorld();\n         }\n \n-        final int dimensionId;\n+        final DimensionType dimensionId;\n \n         if (!((ServerPlayerEntityBridge) player).bridge$usesCustomClient()) {\n \n             // Check if the world we're going to matches our provider type. if so, we need to send a fake respawn packet to clear chunks\n-            final int fromClientDimId = WorldManager.getClientDimensionId(player, fromWorld);\n-            final int toClientDimId = WorldManager.getClientDimensionId(player, toWorld);\n+            DimensionType fromType = fromWorld.getDimension().getType();\n+            DimensionType toType = toWorld.getDimension().getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MzQ0Mg==", "bodyText": "@Zidane is this right with dimension handling? I'd imagine the type could be the same but the dimension id assigned by the WorldManager could be different?", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424883442", "createdAt": "2020-05-14T05:44:41Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/entity/EntityUtil.java", "diffHunk": "@@ -406,72 +407,69 @@ public static ServerPlayerEntity transferPlayerToWorld(final ServerPlayerEntity\n             toWorld = (ServerWorld) event.getToWorld();\n         }\n \n-        final int dimensionId;\n+        final DimensionType dimensionId;\n \n         if (!((ServerPlayerEntityBridge) player).bridge$usesCustomClient()) {\n \n             // Check if the world we're going to matches our provider type. if so, we need to send a fake respawn packet to clear chunks\n-            final int fromClientDimId = WorldManager.getClientDimensionId(player, fromWorld);\n-            final int toClientDimId = WorldManager.getClientDimensionId(player, toWorld);\n+            DimensionType fromType = fromWorld.getDimension().getType();\n+            DimensionType toType = toWorld.getDimension().getType();\n \n-            if (fromClientDimId == toClientDimId) {\n-                final int fakeDimId;\n-                switch (fromClientDimId) {\n+            if (fromType == toType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MzUyMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Vec3d enteredNetherPosition = ((ServerPlayerEntityAccessor) player).accessor$getEnteredNetherPosition();\n          \n          \n            \n                        final Vec3d enteredNetherPosition = ((ServerPlayerEntityAccessor) player).accessor$getEnteredNetherPosition();", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424883521", "createdAt": "2020-05-14T05:44:58Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/entity/EntityUtil.java", "diffHunk": "@@ -406,72 +407,69 @@ public static ServerPlayerEntity transferPlayerToWorld(final ServerPlayerEntity\n             toWorld = (ServerWorld) event.getToWorld();\n         }\n \n-        final int dimensionId;\n+        final DimensionType dimensionId;\n \n         if (!((ServerPlayerEntityBridge) player).bridge$usesCustomClient()) {\n \n             // Check if the world we're going to matches our provider type. if so, we need to send a fake respawn packet to clear chunks\n-            final int fromClientDimId = WorldManager.getClientDimensionId(player, fromWorld);\n-            final int toClientDimId = WorldManager.getClientDimensionId(player, toWorld);\n+            DimensionType fromType = fromWorld.getDimension().getType();\n+            DimensionType toType = toWorld.getDimension().getType();\n \n-            if (fromClientDimId == toClientDimId) {\n-                final int fakeDimId;\n-                switch (fromClientDimId) {\n+            if (fromType == toType) {\n+                final DimensionType fakeDim;\n+                switch (fromType.getId()) {\n                     case 1:\n-                        fakeDimId = -1;\n+                        fakeDim = DimensionType.THE_NETHER;\n                         break;\n                     case 0:\n-                        fakeDimId = 1;\n+                        fakeDim = DimensionType.THE_END;\n                         break;\n                     default:\n-                        fakeDimId = 0;\n+                        fakeDim = DimensionType.OVERWORLD;\n                         break;\n                 }\n \n-                player.connection.sendPacket(new SRespawnPacket(fakeDimId, toWorld.getDifficulty(), toWorld.getWorldType(),\n-                        player.interactionManager.getGameType()));\n+                player.connection.sendPacket(new SRespawnPacket(fakeDim, toWorld.getWorldType(), player.interactionManager.getGameType()));\n             }\n \n-            dimensionId = toClientDimId;\n+            dimensionId = toType;\n         } else {\n             // We're a custom client, their problem to handle the client provider\n-            WorldManager.sendDimensionRegistration(player, toWorld.dimension);\n+            NetworkUtil.sendDimensionRegistration(player, toWorld.dimension);\n \n-            dimensionId = ((ServerWorldBridge) toWorld).bridge$getDimensionId();\n+            dimensionId = toWorld.getDimension().getType();\n         }\n \n-        player.connection.sendPacket(new SRespawnPacket(dimensionId, toWorld.getDifficulty(), toWorld.getWorldType(),\n-            player.interactionManager.getGameType()));\n+        player.connection.sendPacket(new SRespawnPacket(dimensionId, toWorld.getWorldType(), player.interactionManager.getGameType()));\n+\n \n-        player.dimension = ((ServerWorldBridge) toWorld).bridge$getDimensionId(); // If a Vanilla client, dimensionId could be a provider id.\n+        player.dimension = toWorld.getDimension().getType(); // If a Vanilla client, dimensionId could be a provider id.\n         player.setWorld(toWorld);\n \n         playerList.updatePermissionLevel(player);\n \n-        fromWorld.removeEntityDangerously(player);\n+        fromWorld.removePlayer(player);\n         player.removed = false;\n \n         final Vector3d position = toTransform.getPosition();\n         player.setLocationAndAngles(position.getX(), position.getY(), position.getZ(), (float) toTransform.getYaw(), (float) toTransform.getPitch());\n \n         try (final PhaseContext<?> ignored = EntityPhase.State.CHANGING_DIMENSION.createPhaseContext(PhaseTracker.SERVER).setTargetWorld(toWorld).buildAndSwitch()) {\n-            toWorld.addEntity0(player);\n-            toWorld.updateEntityWithOptionalForce(player, false);\n+            toWorld.addEntity(player);\n+            toWorld.updateEntity(player);\n         }\n \n-        // preparePlayer\n-        fromWorld.getPlayerChunkMap().removePlayer(player);\n-        toWorld.getPlayerChunkMap().addPlayer(player);\n+        toWorld.chunkCheck(player);\n \n-        final Vector3i toChunkPosition = toTransform.getLocation().getChunkPosition();\n-        toWorld.getChunkProvider().provideChunk(toChunkPosition.getX(), toChunkPosition.getZ());\n+        toWorld.getChunkAt(VecHelper.toBlockPos(toTransform.getPosition()));\n \n         if (event instanceof MoveEntityEvent.Teleport.Portal) {\n             CriteriaTriggers.CHANGED_DIMENSION.trigger(player, fromWorld.dimension.getType(), toWorld.dimension.getType());\n \n-            if (fromWorld.dimension.getType() == DimensionType.NETHER && toWorld.dimension.getType() == DimensionType.OVERWORLD\n-                && player.getEnteredNetherPosition() != null) {\n-                CriteriaTriggers.NETHER_TRAVEL.trigger(player, player.getEnteredNetherPosition());\n+            Vec3d enteredNetherPosition = ((ServerPlayerEntityAccessor) player).accessor$getEnteredNetherPosition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MzYwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        CatalogKey key = ((DimensionTypeBridge) toWorld.dimension.getType()).bridge$getKey();\n          \n          \n            \n                        final CatalogKey key = ((DimensionTypeBridge) toWorld.dimension.getType()).bridge$getKey();", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424883600", "createdAt": "2020-05-14T05:45:17Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/entity/EntityUtil.java", "diffHunk": "@@ -520,30 +516,22 @@ private static InvokingTeleporterContext createInvokingTeleporterPhase(final Ent\n         final Transform fromTransform = sEntity.getTransform();\n         final ServerWorld fromWorld = ((ServerWorld) entity.world);\n \n-        int toDimensionId = ((ServerWorldBridge) toWorld).bridge$getDimensionId();\n-\n-        // Entering End Portal in End goes to Overworld in Vanilla\n-        if (toDimensionId == 1 && fromWorld.dimension instanceof EndDimension) {\n-            toDimensionId = 0;\n-        }\n-\n-        toWorld = mcServer.getWorld(toDimensionId);\n-\n         final Map<String, String> portalAgents =\n             ((WorldInfoBridge) fromWorld.getWorldInfo()).bridge$getConfigAdapter().getConfig().getWorld().getPortalAgents();\n         final String worldName;\n \n         // Check if we're to use a different teleporter for this world\n         if (teleporter.getClass().getName().equals(\"net.minecraft.world.Teleporter\")) {\n-            worldName = portalAgents.get(\"minecraft:default_\" + toWorld.dimension.getType().getName().toLowerCase(Locale.ENGLISH));\n+            CatalogKey key = ((DimensionTypeBridge) toWorld.dimension.getType()).bridge$getKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4MzY3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    World world = ((org.spongepowered.api.entity.Entity) entityIn).getWorld();\n          \n          \n            \n                    final World world = ((org.spongepowered.api.entity.Entity) entityIn).getWorld();", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424883676", "createdAt": "2020-05-14T05:45:34Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/entity/EntityUtil.java", "diffHunk": "@@ -661,18 +649,19 @@ public static boolean isEntityDead(final net.minecraft.entity.Entity entity) {\n \n     public static MoveEntityEvent.Teleport handleDisplaceEntityTeleportEvent(final Entity entityIn, final Location location) {\n         final Transform fromTransform = ((org.spongepowered.api.entity.Entity) entityIn).getTransform();\n-        final Transform toTransform = fromTransform.withPosition(location.getPosition()).withRotation(location.get).setRotation(new Vector3d(entityIn.rotationPitch, entityIn.rotationYaw, 0));\n-        return handleDisplaceEntityTeleportEvent(entityIn, fromTransform, toTransform);\n+        final Transform toTransform = fromTransform.withPosition(location.getPosition()).withRotation(new Vector3d(entityIn.rotationPitch, entityIn.rotationYaw, 0));\n+        return handleDisplaceEntityTeleportEvent(entityIn, fromTransform, toTransform, ((org.spongepowered.api.entity.Entity) entityIn).getWorld(), location.getWorld());\n     }\n \n     public static MoveEntityEvent.Teleport handleDisplaceEntityTeleportEvent(final Entity entityIn, final double posX, final double posY, final double posZ, final float yaw, final float pitch) {\n+        World world = ((org.spongepowered.api.entity.Entity) entityIn).getWorld();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 283}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg4Mzg0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                ListenerPhaseContext(final IPhaseState<L> state, PhaseTracker tracker) {\n          \n          \n            \n                ListenerPhaseContext(final IPhaseState<L> state, final PhaseTracker tracker) {", "url": "https://github.com/SpongePowered/Sponge/pull/2609#discussion_r424883845", "createdAt": "2020-05-14T05:46:12Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/event/tracking/phase/plugin/ListenerPhaseContext.java", "diffHunk": "@@ -43,7 +44,7 @@\n     Object object;\n     private CapturePlayer capturePlayer;\n \n-    ListenerPhaseContext(final IPhaseState<L> state) {\n+    ListenerPhaseContext(final IPhaseState<L> state, PhaseTracker tracker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6160b635c9b939b79f879290c1eda656df7f0bbe"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22abade9a6ebffdfc2b24cae1d331f938a856e6e", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/22abade9a6ebffdfc2b24cae1d331f938a856e6e", "committedDate": "2020-05-14T15:21:00Z", "message": "pr comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f3d592b8ccd3cf7f05133fb9c59e54830f487b91", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/f3d592b8ccd3cf7f05133fb9c59e54830f487b91", "committedDate": "2020-05-14T15:12:39Z", "message": "pr comments"}, "afterCommit": {"oid": "22abade9a6ebffdfc2b24cae1d331f938a856e6e", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/22abade9a6ebffdfc2b24cae1d331f938a856e6e", "committedDate": "2020-05-14T15:21:00Z", "message": "pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "693c009d60c2010baa4349cf589fb4ec1269b63d", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/693c009d60c2010baa4349cf589fb4ec1269b63d", "committedDate": "2020-05-14T15:37:12Z", "message": "fix furnace toContainer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b58b6e1ab60c010752d1e40e6015d1cd7d9be1", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/02b58b6e1ab60c010752d1e40e6015d1cd7d9be1", "committedDate": "2020-05-14T15:46:51Z", "message": "fix jukebox mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a54af90024b937b1e027c0d7194ed72ffbae2260", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/a54af90024b937b1e027c0d7194ed72ffbae2260", "committedDate": "2020-05-14T15:59:18Z", "message": "fix sign TE mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8236a01a7502a90c7154e5a8e559ca03548e832", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/f8236a01a7502a90c7154e5a8e559ca03548e832", "committedDate": "2020-05-14T15:59:37Z", "message": "fix SoundEvent Mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "020ab7a80eca516a0e3dbc7c266d1f2fce1cf519", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/020ab7a80eca516a0e3dbc7c266d1f2fce1cf519", "committedDate": "2020-05-14T16:15:00Z", "message": "move invalid Text mixins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1253924e4907b6c7960f9a61429b15554f043785", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/1253924e4907b6c7960f9a61429b15554f043785", "committedDate": "2020-05-14T16:19:42Z", "message": "fix dyecolor again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7203d7d054d91fa47cc94e00b38a05e36f61c3e5", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/7203d7d054d91fa47cc94e00b38a05e36f61c3e5", "committedDate": "2020-05-14T16:44:50Z", "message": "fix FallingBlock mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97120df10a41979a21b2ca9c8a9b98daec871b7e", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/97120df10a41979a21b2ca9c8a9b98daec871b7e", "committedDate": "2020-05-14T16:47:32Z", "message": "fix FarmlandBlock mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ef04f9cdf580d283ebfeb06c342b67c82ab2a629", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/ef04f9cdf580d283ebfeb06c342b67c82ab2a629", "committedDate": "2020-05-14T16:50:25Z", "message": "fix FireBlock mixin targets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad4216283b34338c7c86b5ea898c1a865bcb97b2", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/ad4216283b34338c7c86b5ea898c1a865bcb97b2", "committedDate": "2020-05-14T16:53:42Z", "message": "fix TNTBlock mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e533bd74948068470b1961b9a1cb7c80515a0e90", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/e533bd74948068470b1961b9a1cb7c80515a0e90", "committedDate": "2020-05-14T16:57:57Z", "message": "fix SpongeUser mixin\nother DataCompoundHolder impls are gone?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87fa11d8511652754f8d6ea0e1e615ec66b19e6", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/e87fa11d8511652754f8d6ea0e1e615ec66b19e6", "committedDate": "2020-05-14T16:59:08Z", "message": "fix ProjectileDispenseBehavior mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44d37326a08a9dd4a47b1a6c930935ab2b9cdfed", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/44d37326a08a9dd4a47b1a6c930935ab2b9cdfed", "committedDate": "2020-05-14T17:25:18Z", "message": "fix ArmorStandEntity overwrite"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d87e625bd68b6b9b8b2c2854a8d31eef02e477b", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/5d87e625bd68b6b9b8b2c2854a8d31eef02e477b", "committedDate": "2020-05-14T17:31:17Z", "message": "not invalid anymore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34286350a0e48dce562d967a8508ed2de6cf0d84", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/34286350a0e48dce562d967a8508ed2de6cf0d84", "committedDate": "2020-05-14T17:49:03Z", "message": "partial fix CreeperEntity mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5449564533f935e92943eace33a22620b7be2d33", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/5449564533f935e92943eace33a22620b7be2d33", "committedDate": "2020-05-14T18:21:34Z", "message": "fix FishingBobberEntity mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "809075ce746194f68ad656747a1bb1fb84901364", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/809075ce746194f68ad656747a1bb1fb84901364", "committedDate": "2020-05-14T18:28:23Z", "message": "fix projectile mixins\ntrying to fix explosion mixins (smoking parameter does not exist)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfcddd90acbb87762aadf08de6c80d9d4fa896df", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/dfcddd90acbb87762aadf08de6c80d9d4fa896df", "committedDate": "2020-05-14T18:30:05Z", "message": "was this a performance fix?"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ab55fedc8188c92ebd13a7d66672079306f643a", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/2ab55fedc8188c92ebd13a7d66672079306f643a", "committedDate": "2020-05-14T18:33:33Z", "message": "fix SScoreboardObjectivePacket mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "182abdb9d09a10bde33bf0f0fc4866eb38895596", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/182abdb9d09a10bde33bf0f0fc4866eb38895596", "committedDate": "2020-05-14T18:53:04Z", "message": "mostly fix Scoreboard mixins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81a3af757159b5491d27f48cc4053a58c55c46e5", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/81a3af757159b5491d27f48cc4053a58c55c46e5", "committedDate": "2020-05-16T15:09:13Z", "message": "fix BeaconTileEntity mixin"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83f15d870f3c2e61ad566eb29aaf2c0904b91054", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/83f15d870f3c2e61ad566eb29aaf2c0904b91054", "committedDate": "2020-05-16T16:18:32Z", "message": "removed it"}, "afterCommit": {"oid": "6a7baa6a6efe8ab0e250c86849ae1ecf063f3500", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/6a7baa6a6efe8ab0e250c86849ae1ecf063f3500", "committedDate": "2020-05-16T16:49:45Z", "message": "fix id -> key usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a14e5287372e63db7f47e70fb212a5047d92cc1", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/2a14e5287372e63db7f47e70fb212a5047d92cc1", "committedDate": "2020-05-16T17:32:40Z", "message": "Update/Fix tileentity ticking optimization based on PaperMC patch:\n\nhttps://github.com/PaperMC/Paper/blob/master/Spigot-Server-Patches/0022-Optimize-TileEntity-Ticking.patch\n\nand move it to the optimization module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1093821ba7f8d9b8846ba447de1d16c65fdb5812", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/1093821ba7f8d9b8846ba447de1d16c65fdb5812", "committedDate": "2020-05-16T17:32:40Z", "message": "fix HopperTileEntity mixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1454e4db43d8cda3671b8e9387058cfbacf5d1ee", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/1454e4db43d8cda3671b8e9387058cfbacf5d1ee", "committedDate": "2020-05-16T17:32:40Z", "message": "removed it"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80df9d4eba3aa5ee8600218d60e3fd68a06334af", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/80df9d4eba3aa5ee8600218d60e3fd68a06334af", "committedDate": "2020-05-16T17:32:40Z", "message": "fix some Text mixins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e9ecb252c90c73da628c9322123f208936e252c", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/0e9ecb252c90c73da628c9322123f208936e252c", "committedDate": "2020-05-16T17:32:40Z", "message": "fix id -> key usage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "857aaff4b86dc9eb899eaa3841d65765cc513be1", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/857aaff4b86dc9eb899eaa3841d65765cc513be1", "committedDate": "2020-05-16T17:32:40Z", "message": "fix entity collision mixins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eaf1cbe012bfef2988541c90bc86f83509cb2cd8", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/eaf1cbe012bfef2988541c90bc86f83509cb2cd8", "committedDate": "2020-05-16T17:32:40Z", "message": "fix WorkbenchContainerMixin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a8b9f10f075475e6659e9199aab607166284b06", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/0a8b9f10f075475e6659e9199aab607166284b06", "committedDate": "2020-05-16T17:32:40Z", "message": "fix ItemFrameEntityMixin_Optimization_Map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11d9861c4e4f4aef3bd98b38efd8c3d15c40f326", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/11d9861c4e4f4aef3bd98b38efd8c3d15c40f326", "committedDate": "2020-05-16T17:32:40Z", "message": "fix FilledMapItem_Optimization_Map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf9e6d3deb63fbd2478f84875595de3ce3e7239f", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/bf9e6d3deb63fbd2478f84875595de3ce3e7239f", "committedDate": "2020-05-16T17:32:40Z", "message": "fix collision optimization mixinw"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a59a31a7701e0f95f9bc36474deb1e790b8e54e", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/9a59a31a7701e0f95f9bc36474deb1e790b8e54e", "committedDate": "2020-05-16T17:19:52Z", "message": "fix collision optimization mixinw"}, "afterCommit": {"oid": "bf9e6d3deb63fbd2478f84875595de3ce3e7239f", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/bf9e6d3deb63fbd2478f84875595de3ce3e7239f", "committedDate": "2020-05-16T17:32:40Z", "message": "fix collision optimization mixinw"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cb8f1e36f294a45525617bec3f04cb69eed3d00", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/3cb8f1e36f294a45525617bec3f04cb69eed3d00", "committedDate": "2020-05-16T17:53:25Z", "message": "fix real time mixins"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f3a029b61ce3342938278f7d751f32bda76d1d9", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/5f3a029b61ce3342938278f7d751f32bda76d1d9", "committedDate": "2020-05-16T17:57:33Z", "message": "fix ServerPlayerEntityMixin_Tracker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8a4a77f14ccda87b96ad10a1dbb4326fde87057", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/f8a4a77f14ccda87b96ad10a1dbb4326fde87057", "committedDate": "2020-05-16T18:37:05Z", "message": "fix tracker mixins\n@gabizou unsure about the ChunkManagerMixin_Tracker\nwhere the target is a lambda"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0fffb15fde13326f015a71cdbf604d606e5e68a", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/c0fffb15fde13326f015a71cdbf604d606e5e68a", "committedDate": "2020-05-16T18:27:39Z", "message": "fix tracker mixins\n@gabizou unsure about the ChunkManagerMixin_Tracker\nwhere the target is a lambda"}, "afterCommit": {"oid": "f8a4a77f14ccda87b96ad10a1dbb4326fde87057", "author": {"user": {"login": "Faithcaio", "name": "Faithcaio"}}, "url": "https://github.com/SpongePowered/Sponge/commit/f8a4a77f14ccda87b96ad10a1dbb4326fde87057", "committedDate": "2020-05-16T18:37:05Z", "message": "fix tracker mixins\n@gabizou unsure about the ChunkManagerMixin_Tracker\nwhere the target is a lambda"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 904, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}