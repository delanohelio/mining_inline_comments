{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4NzY5NzEw", "number": 2454, "reviewThreads": {"totalCount": 36, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxODoxMDo0NlrODV2pZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjozNzozOFrOEAYLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0MjQyMDIwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNVQxODoxMDo0N1rOFaSYfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMzo0NDo0MlrOFqPH_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwODQ3OQ==", "bodyText": "this.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r363108479", "createdAt": "2020-01-05T18:10:47Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$mkdirs(File dir) {\n+        if (WorldManager.NO_FILE_CREATION) {\n+            impl$directoriesToCreate.add(dir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a65d7632a0af47b40d95d4824a3ebe96c5d5b532"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEyNTczMw==", "bodyText": "That basically means \"if the SerializationBehavior is ever switched from NONE to something else, create these directories before saving anything.\" I'll change the name to something more descriptive.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r363125733", "createdAt": "2020-01-05T23:40:46Z", "author": {"login": "JBYoshi"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$mkdirs(File dir) {\n+        if (WorldManager.NO_FILE_CREATION) {\n+            impl$directoriesToCreate.add(dir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwODQ3OQ=="}, "originalCommit": {"oid": "a65d7632a0af47b40d95d4824a3ebe96c5d5b532"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMjMxOA==", "bodyText": "I feeel silly for commenting on this much later on... but he means turn this line into this.impl$directoriesToCreate.add(dir);", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r379832318", "createdAt": "2020-02-15T13:44:42Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$mkdirs(File dir) {\n+        if (WorldManager.NO_FILE_CREATION) {\n+            impl$directoriesToCreate.add(dir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzEwODQ3OQ=="}, "originalCommit": {"oid": "a65d7632a0af47b40d95d4824a3ebe96c5d5b532"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MDQ5Mzg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMzo1OTozNlrOFqPLLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNzo1NVrOGT53_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMzEzMw==", "bodyText": "I don't like that this is an overwrite, to be honest, but I see why you've done it.\n@Zidane Should we prefer head injection and cancel in this case? I know you've done that in the past. Could also replace with a Redirect followed by a cancellable injection - but that then wanders into LVT land.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r379833133", "createdAt": "2020-02-15T13:59:36Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.world.chunk.storage;\n+\n+import net.minecraft.world.chunk.storage.RegionFile;\n+import net.minecraft.world.chunk.storage.RegionFileCache;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import java.io.DataInputStream;\n+import java.io.File;\n+\n+@Mixin(RegionFileCache.class)\n+public abstract class RegionFileCacheMixin {\n+\n+    @Shadow public static RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ) {return null;}\n+\n+    /**\n+     * @author JBYoshi\n+     * @reason Support for ChunkSerializationBehaviors that don't save chunks:\n+     * don't create files if they aren't necessary. (The original method\n+     * already returns null if the chunk doesn't exist.)\n+     */\n+    @Overwrite\n+    public static DataInputStream getChunkInputStream(File worldDir, int chunkX, int chunkZ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjU0Nw==", "bodyText": "If it's been done where we're only checking that the region file is null and if it is, returning null as a fail fast, then it should be a cancellable injection at HEAD.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396547", "createdAt": "2020-02-21T04:52:15Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.world.chunk.storage;\n+\n+import net.minecraft.world.chunk.storage.RegionFile;\n+import net.minecraft.world.chunk.storage.RegionFileCache;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import java.io.DataInputStream;\n+import java.io.File;\n+\n+@Mixin(RegionFileCache.class)\n+public abstract class RegionFileCacheMixin {\n+\n+    @Shadow public static RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ) {return null;}\n+\n+    /**\n+     * @author JBYoshi\n+     * @reason Support for ChunkSerializationBehaviors that don't save chunks:\n+     * don't create files if they aren't necessary. (The original method\n+     * already returns null if the chunk doesn't exist.)\n+     */\n+    @Overwrite\n+    public static DataInputStream getChunkInputStream(File worldDir, int chunkX, int chunkZ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMzEzMw=="}, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5MTg4NA==", "bodyText": "It would also need a redirect - the original method calls createOrLoadRegionFile instead of getRegionFileIfExists. Is that enough to merit an overwrite, or should I use the redirect and injection?", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r383491884", "createdAt": "2020-02-24T20:18:27Z", "author": {"login": "JBYoshi"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.world.chunk.storage;\n+\n+import net.minecraft.world.chunk.storage.RegionFile;\n+import net.minecraft.world.chunk.storage.RegionFileCache;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import java.io.DataInputStream;\n+import java.io.File;\n+\n+@Mixin(RegionFileCache.class)\n+public abstract class RegionFileCacheMixin {\n+\n+    @Shadow public static RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ) {return null;}\n+\n+    /**\n+     * @author JBYoshi\n+     * @reason Support for ChunkSerializationBehaviors that don't save chunks:\n+     * don't create files if they aren't necessary. (The original method\n+     * already returns null if the chunk doesn't exist.)\n+     */\n+    @Overwrite\n+    public static DataInputStream getChunkInputStream(File worldDir, int chunkX, int chunkZ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMzEzMw=="}, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDM0OA==", "bodyText": "I'd say the overwrite is fine.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524348", "createdAt": "2020-05-12T07:37:55Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.world.chunk.storage;\n+\n+import net.minecraft.world.chunk.storage.RegionFile;\n+import net.minecraft.world.chunk.storage.RegionFileCache;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import java.io.DataInputStream;\n+import java.io.File;\n+\n+@Mixin(RegionFileCache.class)\n+public abstract class RegionFileCacheMixin {\n+\n+    @Shadow public static RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ) {return null;}\n+\n+    /**\n+     * @author JBYoshi\n+     * @reason Support for ChunkSerializationBehaviors that don't save chunks:\n+     * don't create files if they aren't necessary. (The original method\n+     * already returns null if the chunk doesn't exist.)\n+     */\n+    @Overwrite\n+    public static DataInputStream getChunkInputStream(File worldDir, int chunkX, int chunkZ) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgzMzEzMw=="}, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxMDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/AdvancementManagerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1MDo1NVrOFsrnfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1MDo1NVrOFsrnfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjI4NQ==", "bodyText": "s/listFiles/impl$listFilesIfDirectoryExists", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396285", "createdAt": "2020-02-21T04:50:55Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/AdvancementManagerMixin.java", "diffHunk": "@@ -24,19 +24,40 @@\n  */\n package org.spongepowered.common.mixin.core.advancements;\n \n+import com.google.common.collect.ImmutableSet;\n import net.minecraft.advancements.AdvancementManager;\n+import org.apache.commons.io.FileUtils;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.common.SpongeImpl;\n import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n \n @Mixin(AdvancementManager.class)\n public class AdvancementManagerMixin {\n \n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$createDirectory(File dir) {\n+        return WorldManager.mkdirsIfSaveable(dir);\n+    }\n+\n     @Inject(method = \"reload\", at = @At(\"RETURN\"))\n     private void impl$reloadAdvancementProgressforPlayerList(final CallbackInfo ci) {\n         ((PlayerListBridge) SpongeImpl.getServer().getPlayerList()).bridge$reloadAdvancementProgress();\n     }\n+\n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\",\n+            target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))\n+    private Collection<File> listFiles(File directory, String[] extensions, boolean recursive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxMDk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/FunctionManagerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1MToxN1rOFsrnrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1MToxN1rOFsrnrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjMzNQ==", "bodyText": "Same here", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396335", "createdAt": "2020-02-21T04:51:17Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/FunctionManagerMixin.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.advancements;\n+\n+import com.google.common.collect.ImmutableSet;\n+import net.minecraft.advancements.FunctionManager;\n+import org.apache.commons.io.FileUtils;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.SpongeImpl;\n+import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n+\n+@Mixin(FunctionManager.class)\n+public abstract class FunctionManagerMixin {\n+    @Redirect(method = \"loadFunctions\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$createDirectory(File dir) {\n+        return WorldManager.mkdirsIfSaveable(dir);\n+    }\n+\n+    @Redirect(method = \"loadFunctions\", at = @At(value = \"INVOKE\",\n+            target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))\n+    private Collection<File> listFiles(File directory, String[] extensions, boolean recursive) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxMzgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1MzowOVrOFsrpXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1MzowOVrOFsrpXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5Njc2NQ==", "bodyText": "prefix with shadow$ ( I get that this is in maintenance, and api-8 branch is moving towards prefixing shadows always, but I'd like to keep it in line here as well).", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396765", "createdAt": "2020-02-21T04:53:09Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -92,6 +93,8 @@\n     @Shadow protected abstract void saveChunkExtraData(Chunk chunkIn);\n     @Shadow protected abstract void saveChunkData(Chunk chunkIn);\n \n+    @Shadow public abstract boolean canSave();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxNDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1Mzo0M1rOFsrp5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1Mzo0M1rOFsrp5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NjkwMg==", "bodyText": "variable can be final.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382396902", "createdAt": "2020-02-21T04:53:43Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -250,7 +253,14 @@ public void queueUnload(final Chunk chunkIn)\n     @Overwrite\n     public boolean tick()\n     {\n-        if (!this.world.disableLevelSaving && !((WorldBridge) this.world).bridge$isFake())\n+        // Sponge start\n+        SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxNTYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NDozMVrOFsrqcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NDozMVrOFsrqcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzA0Mg==", "bodyText": "method name needs to reflect what it's actually doing. impl$checkSerializationBehaviorForCanSave or something", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397042", "createdAt": "2020-02-21T04:54:31Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -325,4 +335,20 @@ public boolean tick()\n         this.loadedChunks.remove(ChunkPos.asLong(chunk.x, chunk.z));\n         ((ChunkBridge) chunk).bridge$setScheduledForUnload(-1);\n     }\n+\n+    // This still returns true for METADATA_ONLY because other places (e.g. WorldServer) use it.\n+    @Inject(method = \"canSave\", at = @At(\"HEAD\"), cancellable = true)\n+    public void onCanSave(CallbackInfoReturnable<Boolean> cir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxNTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NDozOFrOFsrqhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NDozOFrOFsrqhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzA2Mg==", "bodyText": "Same here", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397062", "createdAt": "2020-02-21T04:54:38Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -325,4 +335,20 @@ public boolean tick()\n         this.loadedChunks.remove(ChunkPos.asLong(chunk.x, chunk.z));\n         ((ChunkBridge) chunk).bridge$setScheduledForUnload(-1);\n     }\n+\n+    // This still returns true for METADATA_ONLY because other places (e.g. WorldServer) use it.\n+    @Inject(method = \"canSave\", at = @At(\"HEAD\"), cancellable = true)\n+    public void onCanSave(CallbackInfoReturnable<Boolean> cir) {\n+        if (((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior() == SerializationBehaviors.NONE) {\n+            cir.setReturnValue(false);\n+        }\n+    }\n+\n+    @Inject(method = \"saveChunks\", at = @At(\"HEAD\"), cancellable = true)\n+    public void onSaveChunks(CallbackInfoReturnable<Boolean> cir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxNTkyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NDo0OFrOFsrqpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NDo0OFrOFsrqpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzA5Mg==", "bodyText": "Prefix with shadow$", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397092", "createdAt": "2020-02-21T04:54:48Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxNjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NToyN1rOFsrrJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NToyN1rOFsrrJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzIyMA==", "bodyText": "mkdirs should be actually named what we're doing on top of making directories.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397220", "createdAt": "2020-02-21T04:55:27Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$mkdirs(File dir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxNzk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NjowNFrOFsrrwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NjowNFrOFsrrwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzM3OA==", "bodyText": "change onCheckSessionLock to actually mean what this method is doing.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397378", "createdAt": "2020-02-21T04:56:04Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +77,45 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$mkdirs(File dir) {\n+        if (WorldManager.NO_FILE_CREATION) {\n+            impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    private void impl$onSetSessionLock(SaveHandler self) {\n+        if (!WorldManager.NO_FILE_CREATION) {\n+            this.setSessionLock();\n+        }\n+    }\n+\n+    @Redirect(method = \"checkSessionLock\",\n+        at = @At(value = \"NEW\", target = \"java/io/FileInputStream\", remap = false))\n+    private FileInputStream impl$onCheckSessionLock(File file) throws FileNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMxOTcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NzoxNlrOFsrstA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1NzoxNlrOFsrstA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzYyMA==", "bodyText": "I really don't like this sort of static flag flip and check. Is it possible to add this check through an IPhaseState.allowsFileCreation() method and switching in?", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397620", "createdAt": "2020-02-21T04:57:16Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -432,7 +436,14 @@ public static WorldProperties createWorldProperties(final String folderName, fin\n             return optWorldProperties.get();\n         }\n \n-        final ISaveHandler saveHandler = new AnvilSaveHandler(WorldManager.getCurrentSavesDirectory().get().toFile(), folderName, true, ((MinecraftServerAccessor) SpongeImpl.getServer()).accessor$getDataFixer());\n+        NO_FILE_CREATION = archetype.getSerializationBehavior() == SerializationBehaviors.NONE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMyMDc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1ODowMlrOFsrtUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1ODowMlrOFsrtUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5Nzc3OA==", "bodyText": "Same with here.. Especially since later you do a try block with finally. It screams that the state should be switching in.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397778", "createdAt": "2020-02-21T04:58:02Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -623,12 +636,19 @@ public static void saveWorld(final WorldServer worldServer, final boolean flush)\n         }\n \n         final Path worldFolder = currentSavesDir.resolve(worldName);\n-        if (!Files.isDirectory(worldFolder)) {\n+        if (!Files.isDirectory(worldFolder) && properties.getSerializationBehavior() != SerializationBehaviors.NONE) {\n             SpongeImpl.getLogger().error(\"Unable to load world [{}]. We cannot find its folder under [{}].\", worldFolder, currentSavesDir);\n             return Optional.empty();\n         }\n \n-        final ISaveHandler saveHandler = new AnvilSaveHandler(currentSavesDir.toFile(), worldName, true, ((MinecraftServerAccessor) SpongeImpl.getServer()).accessor$getDataFixer());\n+        NO_FILE_CREATION = properties.getSerializationBehavior() == SerializationBehaviors.NONE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMyMTY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1ODo0MlrOFsrt2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwNTowODo1NFrOFtVz_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzkxNA==", "bodyText": "Does this method have to be public?", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382397914", "createdAt": "2020-02-21T04:58:42Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -893,6 +911,39 @@ private static WorldServer createWorldFromProperties(\n         }\n     }\n \n+    public static boolean mkdirsIfSaveable(File dir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzA4NzYxNA==", "bodyText": "It's used in several mixins in both SpongeCommon and SpongeForge, so making it public is the best option I can see.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r383087614", "createdAt": "2020-02-24T05:08:54Z", "author": {"login": "JBYoshi"}, "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -893,6 +911,39 @@ private static WorldServer createWorldFromProperties(\n         }\n     }\n \n+    public static boolean mkdirsIfSaveable(File dir) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5NzkxNA=="}, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMyMjQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1OToxN1rOFsruUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQyMDoxNDoxMlrOFtuX3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODAzNA==", "bodyText": "If you do end up making this a PhaseTracker.getCurrentState().allowsFileCreation() check, is there a case where this should be checked for threadedness?", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398034", "createdAt": "2020-02-21T04:59:17Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -893,6 +911,39 @@ private static WorldServer createWorldFromProperties(\n         }\n     }\n \n+    public static boolean mkdirsIfSaveable(File dir) {\n+        if (NO_FILE_CREATION) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ5MDAxNA==", "bodyText": "Potentially (if a mod decides to save a world from another thread), although it's very unlikely. I'll add in a check for now, just in case.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r383490014", "createdAt": "2020-02-24T20:14:12Z", "author": {"login": "JBYoshi"}, "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -893,6 +911,39 @@ private static WorldServer createWorldFromProperties(\n         }\n     }\n \n+    public static boolean mkdirsIfSaveable(File dir) {\n+        if (NO_FILE_CREATION) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODAzNA=="}, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMyMjcyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1OTozMVrOFsrudg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDo1OTozMVrOFsrudg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODA3MA==", "bodyText": "Variable should be final", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398070", "createdAt": "2020-02-21T04:59:31Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/world/WorldManager.java", "diffHunk": "@@ -1299,8 +1350,8 @@ public static NBTTagCompound saveDimensionDataMap() {\n         if (optWorldServer.isPresent()) {\n             return Optional.of(optWorldServer.get().getSaveHandler().getWorldDirectory().toPath());\n         } else if (SpongeImpl.getGame().getState().ordinal() >= GameState.SERVER_ABOUT_TO_START.ordinal()) {\n-            final SaveHandler saveHandler = (SaveHandler) SpongeImpl.getServer().getActiveAnvilConverter().getSaveLoader(SpongeImpl.getServer().getFolderName(), false);\n-            return Optional.of(saveHandler.getWorldDirectory().toPath());\n+            MinecraftServer server = SpongeImpl.getServer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMyMzUyOnYy", "diffSide": "RIGHT", "path": "testplugins/src/main/java/org/spongepowered/test/MultiWorldTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowMDowOFrOFsru8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowMDowOFrOFsru8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODE5Mw==", "bodyText": "Pull out the Sponge.getServer() as a local variable at this point with how many times it's being called.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398193", "createdAt": "2020-02-21T05:00:08Z", "author": {"login": "gabizou"}, "path": "testplugins/src/main/java/org/spongepowered/test/MultiWorldTest.java", "diffHunk": "@@ -40,22 +40,38 @@\n \n     @Override\n     public void disable(CommandSource src) {\n-        Sponge.getServer().getWorld(\"temp\").ifPresent(world -> Sponge.getServer().unloadWorld(world));\n+        Sponge.getServer().getWorld(\"no-save\").ifPresent(world -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMyMzg0OnYy", "diffSide": "RIGHT", "path": "testplugins/src/main/java/org/spongepowered/test/MultiWorldTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowMDoyN1rOFsrvIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowMDoyN1rOFsrvIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODI0Mw==", "bodyText": "Why the change?", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398243", "createdAt": "2020-02-21T05:00:27Z", "author": {"login": "gabizou"}, "path": "testplugins/src/main/java/org/spongepowered/test/MultiWorldTest.java", "diffHunk": "@@ -40,22 +40,38 @@\n \n     @Override\n     public void disable(CommandSource src) {\n-        Sponge.getServer().getWorld(\"temp\").ifPresent(world -> Sponge.getServer().unloadWorld(world));\n+        Sponge.getServer().getWorld(\"no-save\").ifPresent(world -> {\n+            Sponge.getServer().unloadWorld(world);\n+            Sponge.getServer().deleteWorld(world.getProperties());\n+        });\n+        Sponge.getServer().getWorld(\"metadata-only\").ifPresent(world -> {\n+            Sponge.getServer().unloadWorld(world);\n+            Sponge.getServer().deleteWorld(world.getProperties());\n+        });\n     }\n \n     @Override\n     public void enable(CommandSource src) {\n         try {\n-            final WorldArchetype archetype = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overnether\").orElse(\n+            final WorldArchetype archetype1 = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overnether\").orElseGet(() ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NzMyNTY5OnYy", "diffSide": "RIGHT", "path": "testplugins/src/main/java/org/spongepowered/test/MultiWorldTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowMTozN1rOFsrwHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNTowMTozN1rOFsrwHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5ODQ5NQ==", "bodyText": "Should be explicit with the types here for variable names, if there's an \"original\" and \"re-generated\" or \"nonSerializedArchetype\" make it so, otherwise this looks like obfuscated smurf naming..", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r382398495", "createdAt": "2020-02-21T05:01:37Z", "author": {"login": "gabizou"}, "path": "testplugins/src/main/java/org/spongepowered/test/MultiWorldTest.java", "diffHunk": "@@ -40,22 +40,38 @@\n \n     @Override\n     public void disable(CommandSource src) {\n-        Sponge.getServer().getWorld(\"temp\").ifPresent(world -> Sponge.getServer().unloadWorld(world));\n+        Sponge.getServer().getWorld(\"no-save\").ifPresent(world -> {\n+            Sponge.getServer().unloadWorld(world);\n+            Sponge.getServer().deleteWorld(world.getProperties());\n+        });\n+        Sponge.getServer().getWorld(\"metadata-only\").ifPresent(world -> {\n+            Sponge.getServer().unloadWorld(world);\n+            Sponge.getServer().deleteWorld(world.getProperties());\n+        });\n     }\n \n     @Override\n     public void enable(CommandSource src) {\n         try {\n-            final WorldArchetype archetype = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overnether\").orElse(\n+            final WorldArchetype archetype1 = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overnether\").orElseGet(() ->\n                 WorldArchetype.builder().\n                     from(WorldArchetypes.THE_NETHER)\n                     .serializationBehavior(SerializationBehaviors.NONE)\n                     .generator(GeneratorTypes.OVERWORLD)\n                     .build(\"multi-world-test:overnether\", \"Overnether\")\n             );\n-            final WorldProperties worldProperties = Sponge.getServer().createWorldProperties(\"temp\", archetype);\n+            final WorldProperties world1 = Sponge.getServer().createWorldProperties(\"no-save\", archetype1);\n+            Sponge.getServer().loadWorld(world1);\n \n-            Sponge.getServer().loadWorld(worldProperties);\n+            final WorldArchetype archetype2 = Sponge.getRegistry().getType(WorldArchetype.class, \"multi-world-test:overend\").orElseGet(() ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d05bf2390c934dc21d9ea74696fd3240a8ea1e77"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ0NjU0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/event/tracking/phase/general/SaveHandlerCreationPhase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNDozMlrOGT5www==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQyMjo0MzoxN1rOGZFTBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMjQ5OQ==", "bodyText": "Can this potentially be pooled?", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423522499", "createdAt": "2020-05-12T07:34:32Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/event/tracking/phase/general/SaveHandlerCreationPhase.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.event.tracking.phase.general;\n+\n+public class SaveHandlerCreationPhase extends GeneralState<SaveHandlerCreationContext> {\n+\n+    @Override\n+    protected SaveHandlerCreationContext createNewContext() {\n+        return new SaveHandlerCreationContext(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk1NDM3NQ==", "bodyText": "I think so. The only state in there is whether files should be created or not, and that's reset every time. I've changed the phase to extend PooledPhaseState.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r428954375", "createdAt": "2020-05-21T22:43:17Z", "author": {"login": "JBYoshi"}, "path": "src/main/java/org/spongepowered/common/event/tracking/phase/general/SaveHandlerCreationPhase.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.event.tracking.phase.general;\n+\n+public class SaveHandlerCreationPhase extends GeneralState<SaveHandlerCreationContext> {\n+\n+    @Override\n+    protected SaveHandlerCreationContext createNewContext() {\n+        return new SaveHandlerCreationContext(this);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMjQ5OQ=="}, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ0ODYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/AdvancementManagerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNToxMVrOGT5yHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNToxMVrOGT5yHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMjg0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n          \n          \n            \n                @Redirect(method = \"loadCustomAdvancements\",\n          \n          \n            \n                      at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false)\n          \n          \n            \n                )", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423522847", "createdAt": "2020-05-12T07:35:11Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/AdvancementManagerMixin.java", "diffHunk": "@@ -24,19 +24,40 @@\n  */\n package org.spongepowered.common.mixin.core.advancements;\n \n+import com.google.common.collect.ImmutableSet;\n import net.minecraft.advancements.AdvancementManager;\n+import org.apache.commons.io.FileUtils;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.common.SpongeImpl;\n import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n \n @Mixin(AdvancementManager.class)\n public class AdvancementManagerMixin {\n \n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ1NDY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/AdvancementManagerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjo1M1rOGT514g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNjo1M1rOGT514g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMzgxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\",\n          \n          \n            \n                        target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))\n          \n          \n            \n                @Redirect(method = \"loadCustomAdvancements\", \n          \n          \n            \n                    at = @At(value = \"INVOKE\",\n          \n          \n            \n                         target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\",\n          \n          \n            \n                         remap = false\n          \n          \n            \n                    )\n          \n          \n            \n                )", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423523810", "createdAt": "2020-05-12T07:36:53Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/AdvancementManagerMixin.java", "diffHunk": "@@ -24,19 +24,40 @@\n  */\n package org.spongepowered.common.mixin.core.advancements;\n \n+import com.google.common.collect.ImmutableSet;\n import net.minecraft.advancements.AdvancementManager;\n+import org.apache.commons.io.FileUtils;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.injection.At;\n import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n import org.spongepowered.common.SpongeImpl;\n import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n \n @Mixin(AdvancementManager.class)\n public class AdvancementManagerMixin {\n \n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$createDirectory(File dir) {\n+        return WorldManager.mkdirsIfSaveable(dir);\n+    }\n+\n     @Inject(method = \"reload\", at = @At(\"RETURN\"))\n     private void impl$reloadAdvancementProgressforPlayerList(final CallbackInfo ci) {\n         ((PlayerListBridge) SpongeImpl.getServer().getPlayerList()).bridge$reloadAdvancementProgress();\n     }\n+\n+    @Redirect(method = \"loadCustomAdvancements\", at = @At(value = \"INVOKE\",\n+            target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ1NjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/FunctionManagerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNzoyNFrOGT523w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozNzoyNFrOGT523w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDA2Mw==", "bodyText": "indentation", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524063", "createdAt": "2020-05-12T07:37:24Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/advancements/FunctionManagerMixin.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.advancements;\n+\n+import com.google.common.collect.ImmutableSet;\n+import net.minecraft.advancements.FunctionManager;\n+import org.apache.commons.io.FileUtils;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.SpongeImpl;\n+import org.spongepowered.common.bridge.server.management.PlayerListBridge;\n+import org.spongepowered.common.world.WorldManager;\n+\n+import java.io.File;\n+import java.util.Collection;\n+\n+@Mixin(FunctionManager.class)\n+public abstract class FunctionManagerMixin {\n+    @Redirect(method = \"loadFunctions\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    private boolean impl$createDirectory(File dir) {\n+        return WorldManager.mkdirsIfSaveable(dir);\n+    }\n+\n+    @Redirect(method = \"loadFunctions\", at = @At(value = \"INVOKE\",\n+            target = \"Lorg/apache/commons/io/FileUtils;listFiles(Ljava/io/File;[Ljava/lang/String;Z)Ljava/util/Collection;\", remap = false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ1ODk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozODoxMVrOGT54iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozODoxMVrOGT54iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDQ4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @author JBYoshi\n          \n          \n            \n                 * @author JBYoshi - February xx, 2020 - Minecraft 1.12.2", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524489", "createdAt": "2020-05-12T07:38:11Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.world.chunk.storage;\n+\n+import net.minecraft.world.chunk.storage.RegionFile;\n+import net.minecraft.world.chunk.storage.RegionFileCache;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import java.io.DataInputStream;\n+import java.io.File;\n+\n+@Mixin(RegionFileCache.class)\n+public abstract class RegionFileCacheMixin {\n+\n+    @Shadow public static RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ) {return null;}\n+\n+    /**\n+     * @author JBYoshi", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ1OTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozODoyNFrOGT54-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozODoyNFrOGT54-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDYwMg==", "bodyText": "empty line.", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524602", "createdAt": "2020-05-12T07:38:24Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -92,6 +93,8 @@\n     @Shadow protected abstract void saveChunkExtraData(Chunk chunkIn);\n     @Shadow protected abstract void saveChunkData(Chunk chunkIn);\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2MTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozODo1M1rOGT55-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozODo1M1rOGT55-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNDg1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    if (serializationBehavior != SerializationBehaviors.AUTOMATIC) {\n          \n          \n            \n                    final SerializationBehavior behavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    if (behavior != SerializationBehaviors.AUTOMATIC) {", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423524858", "createdAt": "2020-05-12T07:38:53Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -250,7 +253,14 @@ public void queueUnload(final Chunk chunkIn)\n     @Overwrite\n     public boolean tick()\n     {\n-        if (!this.world.disableLevelSaving && !((WorldBridge) this.world).bridge$isFake())\n+        // Sponge start\n+        final SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n+        if (serializationBehavior != SerializationBehaviors.AUTOMATIC) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2MjQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozOToyMFrOGT56zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozOToyMFrOGT56zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTA2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    final SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525068", "createdAt": "2020-05-12T07:39:20Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -325,4 +335,20 @@ public boolean tick()\n         this.loadedChunks.remove(ChunkPos.asLong(chunk.x, chunk.z));\n         ((ChunkBridge) chunk).bridge$setScheduledForUnload(-1);\n     }\n+\n+    // This still returns true for METADATA_ONLY because other places (e.g. WorldServer) use it.\n+    @Inject(method = \"canSave\", at = @At(\"HEAD\"), cancellable = true)\n+    public void impl$checkSerializationBehaviorForCanSave(CallbackInfoReturnable<Boolean> cir) {\n+        if (((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior() == SerializationBehaviors.NONE) {\n+            cir.setReturnValue(false);\n+        }\n+    }\n+\n+    @Inject(method = \"saveChunks\", at = @At(\"HEAD\"), cancellable = true)\n+    public void impl$checkSerializationBehaviorForSaveChunks(CallbackInfoReturnable<Boolean> cir) {\n+        SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2MzQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozOTozOFrOGT57bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozOTozOFrOGT57bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTIyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    if (serializationBehavior == SerializationBehaviors.NONE || serializationBehavior == SerializationBehaviors.METADATA_ONLY) {\n          \n          \n            \n                    final SerializationBehavior behavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n          \n          \n            \n                    if (behavior == SerializationBehaviors.NONE || behavior == SerializationBehaviors.METADATA_ONLY) {", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525229", "createdAt": "2020-05-12T07:39:38Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/gen/ChunkProviderServerMixin.java", "diffHunk": "@@ -325,4 +335,20 @@ public boolean tick()\n         this.loadedChunks.remove(ChunkPos.asLong(chunk.x, chunk.z));\n         ((ChunkBridge) chunk).bridge$setScheduledForUnload(-1);\n     }\n+\n+    // This still returns true for METADATA_ONLY because other places (e.g. WorldServer) use it.\n+    @Inject(method = \"canSave\", at = @At(\"HEAD\"), cancellable = true)\n+    public void impl$checkSerializationBehaviorForCanSave(CallbackInfoReturnable<Boolean> cir) {\n+        if (((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior() == SerializationBehaviors.NONE) {\n+            cir.setReturnValue(false);\n+        }\n+    }\n+\n+    @Inject(method = \"saveChunks\", at = @At(\"HEAD\"), cancellable = true)\n+    public void impl$checkSerializationBehaviorForSaveChunks(CallbackInfoReturnable<Boolean> cir) {\n+        SerializationBehavior serializationBehavior = ((WorldProperties) this.world.getWorldInfo()).getSerializationBehavior();\n+        if (serializationBehavior == SerializationBehaviors.NONE || serializationBehavior == SerializationBehaviors.METADATA_ONLY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2NTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MDowN1rOGT58qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MDowN1rOGT58qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTU0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n          \n          \n            \n                    final IPhaseState state = PhaseTracker.getInstance().getCurrentState();", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525546", "createdAt": "2020-05-12T07:40:07Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2NTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MDoxNVrOGT588A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MDoxNVrOGT588A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTYxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n          \n          \n            \n                    final IPhaseState state = PhaseTracker.getInstance().getCurrentState();", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525616", "createdAt": "2020-05-12T07:40:15Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2NzIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MDozOFrOGT590A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MDozOFrOGT590A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNTg0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n          \n          \n            \n                @Redirect(method = \"<init>\", \n          \n          \n            \n                    at = @At(value = \"INVOKE\", \n          \n          \n            \n                        target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"\n          \n          \n            \n                    )\n          \n          \n            \n                )", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423525840", "createdAt": "2020-05-12T07:40:38Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2ODQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MDo1N1rOGT5-iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MDo1N1rOGT5-iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjAyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        WorldProperties props = Sponge.getServer().getWorldProperties(this.worldDirectory.getName()).get();\n          \n          \n            \n                        final WorldProperties props = Sponge.getServer().getWorldProperties(this.worldDirectory.getName()).get();", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423526025", "createdAt": "2020-05-12T07:40:57Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.shadow$setSessionLock();\n+        }\n+    }\n+\n+    @Redirect(method = \"checkSessionLock\",\n+        at = @At(value = \"NEW\", target = \"java/io/FileInputStream\", remap = false))\n+    private FileInputStream impl$createSessionLockAndCreateDirectories(File file) throws FileNotFoundException {\n+        if (!file.exists()) {\n+            WorldProperties props = Sponge.getServer().getWorldProperties(this.worldDirectory.getName()).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2ODk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MTowOFrOGT5-7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MTowOFrOGT5-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjEyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private FileInputStream impl$createSessionLockAndCreateDirectories(File file) throws FileNotFoundException {\n          \n          \n            \n                private FileInputStream impl$createSessionLockAndCreateDirectories(final File file) throws FileNotFoundException {", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423526127", "createdAt": "2020-05-12T07:41:08Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.shadow$setSessionLock();\n+        }\n+    }\n+\n+    @Redirect(method = \"checkSessionLock\",\n+        at = @At(value = \"NEW\", target = \"java/io/FileInputStream\", remap = false))\n+    private FileInputStream impl$createSessionLockAndCreateDirectories(File file) throws FileNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2OTMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MToxNVrOGT5_LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MToxNVrOGT5_LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjE4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {\n          \n          \n            \n                private void impl$setSessionLockIfCreatingFiles(final SaveHandler self) {", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423526189", "createdAt": "2020-05-12T07:41:15Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {\n+        IPhaseState state = PhaseTracker.getInstance().getCurrentState();\n+        if (!state.shouldCreateWorldDirectories(PhaseTracker.getInstance().getCurrentContext())) {\n+            this.impl$directoriesToCreate.add(dir);\n+            return false;\n+        }\n+        return dir.mkdirs();\n+    }\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Lnet/minecraft/world/storage/SaveHandler;setSessionLock()V\"))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private void impl$setSessionLockIfCreatingFiles(SaveHandler self) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzQ2OTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MToyNFrOGT5_iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzo0MToyNFrOGT5_iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyNjI4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private boolean impl$createDirectoryIfSavingFiles(File dir) {\n          \n          \n            \n                private boolean impl$createDirectoryIfSavingFiles(final File dir) {", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r423526281", "createdAt": "2020-05-12T07:41:24Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/storage/SaveHandlerMixin.java", "diffHunk": "@@ -70,9 +79,49 @@\n \n     @Shadow @Final private File worldDirectory;\n \n+    @Shadow protected abstract void shadow$setSessionLock();\n+\n     @Nullable private Exception impl$capturedException;\n     // player join stuff\n     @Nullable private Path impl$file;\n+    private Set<File> impl$directoriesToCreate = new HashSet<>();\n+\n+    @Redirect(method = \"<init>\", at = @At(value = \"INVOKE\", target = \"Ljava/io/File;mkdirs()Z\", remap = false))\n+    @SuppressWarnings({\"rawtypes\", \"unchecked\"})\n+    private boolean impl$createDirectoryIfSavingFiles(File dir) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e535caf428760e2cb428fe2e2386cf1df4e243f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4ODMxNjkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjozNzozOFrOGbnf6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwNjozNzozOFrOGbnf6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTYxMTg4MA==", "bodyText": "Note the MC Version (in case this can be updated for 1.14 or gets lost in transition)", "url": "https://github.com/SpongePowered/Sponge/pull/2454#discussion_r431611880", "createdAt": "2020-05-28T06:37:38Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/mixin/core/world/chunk/storage/RegionFileCacheMixin.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.mixin.core.world.chunk.storage;\n+\n+import net.minecraft.world.chunk.storage.RegionFile;\n+import net.minecraft.world.chunk.storage.RegionFileCache;\n+import org.spongepowered.asm.mixin.Mixin;\n+import org.spongepowered.asm.mixin.Overwrite;\n+import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Redirect;\n+\n+import java.io.DataInputStream;\n+import java.io.File;\n+\n+@Mixin(RegionFileCache.class)\n+public abstract class RegionFileCacheMixin {\n+\n+    @Shadow public static RegionFile getRegionFileIfExists(File worldDir, int chunkX, int chunkZ) {return null;}\n+\n+    /**\n+     * @author JBYoshi - January 2, 2020", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "934311b4d88dff87cad2d67ff36e408a0e4a72d4"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2675, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}