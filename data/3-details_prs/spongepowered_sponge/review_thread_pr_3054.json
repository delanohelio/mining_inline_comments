{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NzUxMDUy", "number": 3054, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1MTozMVrOEOXdNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMTo0NVrOEOXtQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNDk5ODMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/command/brigadier/dispatcher/SpongeNodePermissionCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1MTozMVrOGxet_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1MTozMVrOGxet_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzNjcwMA==", "bodyText": "Can be avoided by checking if get return null", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454536700", "createdAt": "2020-07-14T17:51:31Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/command/brigadier/dispatcher/SpongeNodePermissionCache.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.command.brigadier.dispatcher;\n+\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.tree.CommandNode;\n+import com.mojang.brigadier.tree.RootCommandNode;\n+import net.minecraft.command.CommandSource;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.entity.living.player.server.ServerPlayer;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.bridge.command.CommandSourceBridge;\n+import org.spongepowered.common.command.brigadier.tree.SpongePermissionWrappedLiteralCommandNode;\n+import org.spongepowered.common.service.permission.SpongePermissions;\n+\n+import java.util.Collection;\n+import java.util.Locale;\n+import java.util.WeakHashMap;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class SpongeNodePermissionCache {\n+\n+    private final static Pattern ILLEGAL_CHARS = Pattern.compile(\"[^a-zA-Z0-9]\");\n+    private final static WeakHashMap<CommandNode<CommandSource>, Supplier<String>> PERMISSION_MAP = new WeakHashMap<>();\n+\n+    public static boolean canUse(\n+            final boolean isRoot,\n+            final CommandDispatcher<CommandSource> dispatcher,\n+            final CommandNode<CommandSource> node,\n+            final CommandSource source\n+    ) {\n+        final Supplier<String> supplier;\n+        if (SpongeNodePermissionCache.PERMISSION_MAP.containsKey(node)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTAwMTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/command/brigadier/dispatcher/SpongeNodePermissionCache.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1MjoxMlrOGxev2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1MjoxMlrOGxev2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzNzE3Nw==", "bodyText": "Same as above", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454537177", "createdAt": "2020-07-14T17:52:12Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/command/brigadier/dispatcher/SpongeNodePermissionCache.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.command.brigadier.dispatcher;\n+\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.tree.CommandNode;\n+import com.mojang.brigadier.tree.RootCommandNode;\n+import net.minecraft.command.CommandSource;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.entity.living.player.server.ServerPlayer;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.bridge.command.CommandSourceBridge;\n+import org.spongepowered.common.command.brigadier.tree.SpongePermissionWrappedLiteralCommandNode;\n+import org.spongepowered.common.service.permission.SpongePermissions;\n+\n+import java.util.Collection;\n+import java.util.Locale;\n+import java.util.WeakHashMap;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class SpongeNodePermissionCache {\n+\n+    private final static Pattern ILLEGAL_CHARS = Pattern.compile(\"[^a-zA-Z0-9]\");\n+    private final static WeakHashMap<CommandNode<CommandSource>, Supplier<String>> PERMISSION_MAP = new WeakHashMap<>();\n+\n+    public static boolean canUse(\n+            final boolean isRoot,\n+            final CommandDispatcher<CommandSource> dispatcher,\n+            final CommandNode<CommandSource> node,\n+            final CommandSource source\n+    ) {\n+        final Supplier<String> supplier;\n+        if (SpongeNodePermissionCache.PERMISSION_MAP.containsKey(node)) {\n+            supplier = SpongeNodePermissionCache.PERMISSION_MAP.get(node);\n+        } else {\n+            supplier = new CachingStringSupplier(() -> SpongeNodePermissionCache.createFromNode(dispatcher, node));\n+        }\n+        try {\n+            ((CommandSourceBridge) source).bridge$setPotentialPermissionNode(supplier);\n+            final boolean result = node.canUse(source);\n+            if (isRoot && node instanceof SpongePermissionWrappedLiteralCommandNode\n+                    && ((CommandSourceBridge) source).bridge$getICommandSource() instanceof ServerPlayer) {\n+                // If the entity is a player, then we should try to add it anyway.\n+                SpongePermissions.registerPermission(supplier.get(), 0);\n+            }\n+            return result;\n+        } finally {\n+            ((CommandSourceBridge) source).bridge$setPotentialPermissionNode(null);\n+        }\n+    }\n+\n+    public static String createFromNode(\n+            final CommandDispatcher<CommandSource> dispatcher,\n+            final CommandNode<CommandSource> node) {\n+        final String permission;\n+        if (node.getRedirect() != null && !(node.getRedirect() instanceof RootCommandNode) && node.getCommand() == null) {\n+            if (!SpongeNodePermissionCache.PERMISSION_MAP.containsKey(node)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTAyMjM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/command/manager/SpongeCommandManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1NzozMlrOGxe86w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1NzozMlrOGxe86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MDUyMw==", "bodyText": "Collections#addAll to avoid list creation", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454540523", "createdAt": "2020-07-14T17:57:32Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/command/manager/SpongeCommandManager.java", "diffHunk": "@@ -134,7 +140,11 @@ public CommandMapping registerAlias(\n             @NonNull final String primaryAlias,\n             @NonNull final String @NonNull ... secondaryAliases)\n             throws CommandFailedRegistrationException {\n-        final CommandMapping mapping = this.registerAliasInternal(registrar, container, primaryAlias, secondaryAliases);\n+        final List<String> aliases = new ArrayList<>();\n+        aliases.add(primaryAlias);\n+        aliases.addAll(Arrays.asList(secondaryAliases));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTAyOTU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/service/permission/SpongePermissions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1OToyOFrOGxfBXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1OToyOFrOGxfBXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTY2MQ==", "bodyText": "if (!contains) add -> if (add)", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454541661", "createdAt": "2020-07-14T17:59:28Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/service/permission/SpongePermissions.java", "diffHunk": "@@ -65,4 +68,22 @@ public static void populateNonCommandPermissions(final SubjectData data, final B\n         }\n     }\n \n+    public static void registerPermission(final String permissionNode, final int opLevel) {\n+        if (!REGISTERED_PERMISSIONS.contains(permissionNode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTAzOTM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/command/brigadier/tree/SpongeArgumentCommandNode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMTo0NVrOGxfHGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMTo1NTo1NlrOGxmyBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzEyOA==", "bodyText": "This is returning a mutable collection but SpongeRootCommandNode is returning an immutable one. Is it intended ?", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454543128", "createdAt": "2020-07-14T18:01:45Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/command/brigadier/tree/SpongeArgumentCommandNode.java", "diffHunk": "@@ -201,4 +206,14 @@ public final void parse(final StringReader reader, final CommandContextBuilder<C\n         return this.parser.getExamples();\n     }\n \n+    @Override\n+    public void addChild(final CommandNode<CommandSource> node) {\n+        super.addChild(node);\n+        this.childNodes.add(node);\n+    }\n+\n+    @Override\n+    public Collection<CommandNode<CommandSource>> getUnsortedChildren() {\n+        return this.childNodes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY2ODgwNQ==", "bodyText": "The intention was to just return the mutable collection for the simple reason that it's only being used in an iteration in one of the mixins to therefore avoid a copy of what could end up being a large collection. I may wrap it in Collections.unmodifiableCollection(...) or something.\nAs for the root collection, probably me in auto-mode.", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454668805", "createdAt": "2020-07-14T21:55:56Z", "author": {"login": "dualspiral"}, "path": "src/main/java/org/spongepowered/common/command/brigadier/tree/SpongeArgumentCommandNode.java", "diffHunk": "@@ -201,4 +206,14 @@ public final void parse(final StringReader reader, final CommandContextBuilder<C\n         return this.parser.getExamples();\n     }\n \n+    @Override\n+    public void addChild(final CommandNode<CommandSource> node) {\n+        super.addChild(node);\n+        this.childNodes.add(node);\n+    }\n+\n+    @Override\n+    public Collection<CommandNode<CommandSource>> getUnsortedChildren() {\n+        return this.childNodes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzEyOA=="}, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2534, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}