{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTk0NjYx", "number": 2558, "title": "Fix small compile errors in API mixins", "bodyText": "", "createdAt": "2020-04-08T02:33:38Z", "url": "https://github.com/SpongePowered/Sponge/pull/2558", "merged": true, "mergeCommit": {"oid": "dfef521bbc26c11c02c641f40493690ab4b16213"}, "closed": true, "closedAt": "2020-04-26T03:54:44Z", "author": {"login": "TheGlitch76"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVehc_gH2gAyNDAwNTk0NjYxOjc5MmIxOWJjNWIxOTE5Y2Y0ZWE2MDNjNmY4ZTA4MzM4Nzg3ZGQ5MWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXvMCzAH2gAyNDAwNTk0NjYxOmU2ZWYyNGVmN2JmM2RmYzA0MWJlYzBhYThiMzEyM2JlOTJlNjY3M2E=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "792b19bc5b1919cf4ea603c6f8e08338787dd91b", "author": {"user": {"login": "TheGlitch76", "name": "Glitch"}}, "url": "https://github.com/SpongePowered/Sponge/commit/792b19bc5b1919cf4ea603c6f8e08338787dd91b", "committedDate": "2020-04-08T02:32:11Z", "message": "Fix small compile errors in API mixins"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjE5ODgz", "url": "https://github.com/SpongePowered/Sponge/pull/2558#pullrequestreview-389619883", "createdAt": "2020-04-08T02:52:03Z", "commit": {"oid": "792b19bc5b1919cf4ea603c6f8e08338787dd91b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1MjowM1rOGCdLxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1MjowM1rOGCdLxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyODQ4NQ==", "bodyText": "So funny enough, this is not implemented correctly in API 7...\nhttps://github.com/SpongePowered/SpongeAPI/blob/api-8/src/main/java/org/spongepowered/api/entity/living/player/User.java#L95\nIt is supposed to NEVER load a world. It queries if the World is online and bombs if it isn't.", "url": "https://github.com/SpongePowered/Sponge/pull/2558#discussion_r405228485", "createdAt": "2020-04-08T02:52:03Z", "author": {"login": "Zidane"}, "path": "src/mixins/java/org/spongepowered/common/mixin/api/mcp/entity/player/ServerPlayerEntityMixin_API.java", "diffHunk": "@@ -448,7 +449,13 @@ public void remove() {\n     @Override\n     public boolean setLocation(final Vector3d position, final UUID world) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792b19bc5b1919cf4ea603c6f8e08338787dd91b"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjE5OTk5", "url": "https://github.com/SpongePowered/Sponge/pull/2558#pullrequestreview-389619999", "createdAt": "2020-04-08T02:52:24Z", "commit": {"oid": "792b19bc5b1919cf4ea603c6f8e08338787dd91b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1MjoyNFrOGCdMJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1MjoyNFrOGCdMJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyODU4MQ==", "bodyText": "Minor niptick\nthis.\nThanks", "url": "https://github.com/SpongePowered/Sponge/pull/2558#discussion_r405228581", "createdAt": "2020-04-08T02:52:24Z", "author": {"login": "Zidane"}, "path": "src/mixins/java/org/spongepowered/common/mixin/api/mcp/scoreboard/ScoreCriteria_RenderTypeMixin_API.java", "diffHunk": "@@ -25,24 +25,28 @@\n package org.spongepowered.common.mixin.api.mcp.scoreboard;\n \n import net.minecraft.scoreboard.ScoreCriteria;\n+import org.spongepowered.api.CatalogKey;\n import org.spongepowered.api.scoreboard.objective.displaymode.ObjectiveDisplayMode;\n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.SpongeImplHooks;\n \n @Mixin(ScoreCriteria.RenderType.class)\n public abstract class ScoreCriteria_RenderTypeMixin_API implements ObjectiveDisplayMode {\n+    @Inject(method = \"<init>\", at = @At(\"TAIL\"))\n+    private void api$setKey(CallbackInfo ci) {\n+        api$key = SpongeImplHooks.getActiveModContainer().createCatalogKey(this.shadow$getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792b19bc5b1919cf4ea603c6f8e08338787dd91b"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjIwMTgx", "url": "https://github.com/SpongePowered/Sponge/pull/2558#pullrequestreview-389620181", "createdAt": "2020-04-08T02:53:07Z", "commit": {"oid": "792b19bc5b1919cf4ea603c6f8e08338787dd91b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1MzowOFrOGCdM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1MzowOFrOGCdM5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyODc3NQ==", "bodyText": "Whereas you are correct (and is the case for names on both sides of the field)...don't leave comments in the code for these. Just adds noise.", "url": "https://github.com/SpongePowered/Sponge/pull/2558#discussion_r405228775", "createdAt": "2020-04-08T02:53:08Z", "author": {"login": "Zidane"}, "path": "src/mixins/java/org/spongepowered/common/mixin/api/mcp/tileentity/CommandBlockTileEntityMixin_API.java", "diffHunk": "@@ -59,8 +59,8 @@ public DataContainer toContainer() {\n         container.set(Constants.TileEntity.CommandBlock.STORED_COMMAND, this.getCommandBlockLogic().getCommand());\n         container.set(Constants.TileEntity.CommandBlock.SUCCESS_COUNT, this.getCommandBlockLogic().getSuccessCount());\n         container.set(Constants.TileEntity.CUSTOM_NAME, this.getCommandBlockLogic().getName());\n-        container.set(Constants.TileEntity.CommandBlock.DOES_TRACK_OUTPUT, this.getCommandBlockLogic().shouldTrackOutput());\n-        if (this.getCommandBlockLogic().shouldTrackOutput()) {\n+        container.set(Constants.TileEntity.CommandBlock.DOES_TRACK_OUTPUT, this.getCommandBlockLogic().shouldReceiveErrors()); // bad MCP name for shouldTrackOutput", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792b19bc5b1919cf4ea603c6f8e08338787dd91b"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjIwMzMy", "url": "https://github.com/SpongePowered/Sponge/pull/2558#pullrequestreview-389620332", "createdAt": "2020-04-08T02:53:41Z", "commit": {"oid": "792b19bc5b1919cf4ea603c6f8e08338787dd91b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1Mzo0MVrOGCdNdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMjo1Mzo0MVrOGCdNdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIyODkxNw==", "bodyText": "Same as above. Leave the comments out for these.", "url": "https://github.com/SpongePowered/Sponge/pull/2558#discussion_r405228917", "createdAt": "2020-04-08T02:53:41Z", "author": {"login": "Zidane"}, "path": "src/mixins/java/org/spongepowered/common/mixin/api/mcp/world/raid/Raid_StatusMixin_API.java", "diffHunk": "@@ -42,7 +42,7 @@\n         api$key = SpongeImplHooks.getActiveModContainer().createCatalogKey(this.shadow$func_221277_a());\n     }\n \n-    @Shadow public abstract String shadow$func_221277_a();\n+    @Shadow public abstract String shadow$func_221277_a(); // MCP 1.15.2: getName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "792b19bc5b1919cf4ea603c6f8e08338787dd91b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3e25d1b0710ba567665b10a374fd70e23f3725", "author": {"user": {"login": "TheGlitch76", "name": "Glitch"}}, "url": "https://github.com/SpongePowered/Sponge/commit/cf3e25d1b0710ba567665b10a374fd70e23f3725", "committedDate": "2020-04-08T03:06:51Z", "message": "Fix style for reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb", "author": {"user": {"login": "TheGlitch76", "name": "Glitch"}}, "url": "https://github.com/SpongePowered/Sponge/commit/1a4242a42677580ea024a7eda4514202fd7a47bb", "committedDate": "2020-04-08T03:19:16Z", "message": "Correct the implementation of Player.setLocation\n\nUser.setLocation() is not supposed to load worlds."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDIxMjkz", "url": "https://github.com/SpongePowered/Sponge/pull/2558#pullrequestreview-393421293", "createdAt": "2020-04-15T02:45:28Z", "commit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0NToyOFrOGFn1-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0NToyOFrOGFn1-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0ODg1Ng==", "bodyText": "this.", "url": "https://github.com/SpongePowered/Sponge/pull/2558#discussion_r408548856", "createdAt": "2020-04-15T02:45:28Z", "author": {"login": "Zidane"}, "path": "src/mixins/java/org/spongepowered/common/mixin/api/mcp/util/SoundCategoryMixin_API.java", "diffHunk": "@@ -25,30 +25,28 @@\n package org.spongepowered.common.mixin.api.mcp.util;\n \n import net.minecraft.util.SoundCategory;\n-import org.spongepowered.asm.mixin.Implements;\n-import org.spongepowered.asm.mixin.Interface;\n-import org.spongepowered.asm.mixin.Intrinsic;\n+import org.spongepowered.api.CatalogKey;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.SpongeImplHooks;\n \n @Mixin(SoundCategory.class)\n-@Implements(@Interface(iface = org.spongepowered.api.effect.sound.SoundCategory.class, prefix = \"category$\"))\n public abstract class SoundCategoryMixin_API implements org.spongepowered.api.effect.sound.SoundCategory {\n \n+    @Inject(method = \"<init>\", at = @At(\"TAIL\"))\n+    private void api$setKey(CallbackInfo ci) {\n+        api$key = SpongeImplHooks.getActiveModContainer().createCatalogKey(this.shadow$getName());\n+    }\n+\n     @Shadow public abstract String shadow$getName();\n \n-    private String id;\n+    private CatalogKey api$key;\n \n     @Override\n-    public String getId() {\n-        if (this.id == null) {\n-            this.id = \"minecraft:\" + this.shadow$getName();\n-        }\n-        return this.id;\n-    }\n-\n-    @Intrinsic\n-    public String category$getName() {\n-        return this.shadow$getName();\n+    public CatalogKey getKey() {\n+        return api$key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDIxMzQ2", "url": "https://github.com/SpongePowered/Sponge/pull/2558#pullrequestreview-393421346", "createdAt": "2020-04-15T02:45:39Z", "commit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0NTozOVrOGFn2Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0NTozOVrOGFn2Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0ODkwNw==", "bodyText": "this.", "url": "https://github.com/SpongePowered/Sponge/pull/2558#discussion_r408548907", "createdAt": "2020-04-15T02:45:39Z", "author": {"login": "Zidane"}, "path": "src/mixins/java/org/spongepowered/common/mixin/api/mcp/scoreboard/ScoreCriteria_RenderTypeMixin_API.java", "diffHunk": "@@ -25,24 +25,28 @@\n package org.spongepowered.common.mixin.api.mcp.scoreboard;\n \n import net.minecraft.scoreboard.ScoreCriteria;\n+import org.spongepowered.api.CatalogKey;\n import org.spongepowered.api.scoreboard.objective.displaymode.ObjectiveDisplayMode;\n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.SpongeImplHooks;\n \n @Mixin(ScoreCriteria.RenderType.class)\n public abstract class ScoreCriteria_RenderTypeMixin_API implements ObjectiveDisplayMode {\n+    @Inject(method = \"<init>\", at = @At(\"TAIL\"))\n+    private void api$setKey(CallbackInfo ci) {\n+        this.api$key = SpongeImplHooks.getActiveModContainer().createCatalogKey(this.shadow$getId());\n+    }\n \n-    @Shadow @Final private String renderType;\n+    @Shadow public abstract String shadow$getId();\n \n-    @Override\n-    public String getId() {\n-        return this.renderType;\n-    }\n+    private CatalogKey api$key;\n \n     @Override\n-    public String getName() {\n-        return this.renderType;\n+    public CatalogKey getKey() {\n+        return api$key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDIxNDc1", "url": "https://github.com/SpongePowered/Sponge/pull/2558#pullrequestreview-393421475", "createdAt": "2020-04-15T02:46:05Z", "commit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0NjowNVrOGFn2ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0NjowNVrOGFn2ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTAyMg==", "bodyText": "Only final change is to not throw an exception here. Simply return false. Shouldn't bring the server down.", "url": "https://github.com/SpongePowered/Sponge/pull/2558#discussion_r408549022", "createdAt": "2020-04-15T02:46:05Z", "author": {"login": "Zidane"}, "path": "src/mixins/java/org/spongepowered/common/mixin/api/mcp/entity/player/ServerPlayerEntityMixin_API.java", "diffHunk": "@@ -447,9 +448,9 @@ public void remove() {\n \n     @Override\n     public boolean setLocation(final Vector3d position, final UUID world) {\n-        final WorldProperties prop = Sponge.getServer().getWorldManager().getProperties(world).orElseThrow(() -> new IllegalArgumentException(\"Invalid World: No world found for UUID\"));\n-        final World loaded = Sponge.getServer().getWorldManager().loadWorld(prop).orElseThrow(() -> new IllegalArgumentException(\"Invalid World: Could not load world for UUID\"));\n-        return this.setLocation(Location.of(loaded, position));\n+        final World targetWorld = Sponge.getServer().getWorldManager().getWorld(world).orElseThrow(() -> new IllegalArgumentException(\"Invalid World: No loaded world found for UUID\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDIyMTMx", "url": "https://github.com/SpongePowered/Sponge/pull/2558#pullrequestreview-393422131", "createdAt": "2020-04-15T02:48:29Z", "commit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0ODozMFrOGFn4-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0ODozMFrOGFn4-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU0OTYyNA==", "bodyText": "Sorry, nope. If you're adding injections, belongs in a specific mixin in core. It does clutter some things up because it basically means calling the getKey() will call a bridge method to the mixin that adds the field.\nBUT because all you're doing is initializing the field, you can just call the methods to initialize the field, without an injection point.", "url": "https://github.com/SpongePowered/Sponge/pull/2558#discussion_r408549624", "createdAt": "2020-04-15T02:48:30Z", "author": {"login": "gabizou"}, "path": "src/mixins/java/org/spongepowered/common/mixin/api/mcp/scoreboard/ScoreCriteria_RenderTypeMixin_API.java", "diffHunk": "@@ -25,24 +25,28 @@\n package org.spongepowered.common.mixin.api.mcp.scoreboard;\n \n import net.minecraft.scoreboard.ScoreCriteria;\n+import org.spongepowered.api.CatalogKey;\n import org.spongepowered.api.scoreboard.objective.displaymode.ObjectiveDisplayMode;\n-import org.spongepowered.asm.mixin.Final;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.SpongeImplHooks;\n \n @Mixin(ScoreCriteria.RenderType.class)\n public abstract class ScoreCriteria_RenderTypeMixin_API implements ObjectiveDisplayMode {\n+    @Inject(method = \"<init>\", at = @At(\"TAIL\"))\n+    private void api$setKey(CallbackInfo ci) {\n+        this.api$key = SpongeImplHooks.getActiveModContainer().createCatalogKey(this.shadow$getId());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzNDIyNTMw", "url": "https://github.com/SpongePowered/Sponge/pull/2558#pullrequestreview-393422530", "createdAt": "2020-04-15T02:49:53Z", "commit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0OTo1M1rOGFn6kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwMjo0OTo1M1rOGFn6kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU1MDAzMg==", "bodyText": "Same with this.", "url": "https://github.com/SpongePowered/Sponge/pull/2558#discussion_r408550032", "createdAt": "2020-04-15T02:49:53Z", "author": {"login": "gabizou"}, "path": "src/mixins/java/org/spongepowered/common/mixin/api/mcp/util/SoundCategoryMixin_API.java", "diffHunk": "@@ -25,30 +25,28 @@\n package org.spongepowered.common.mixin.api.mcp.util;\n \n import net.minecraft.util.SoundCategory;\n-import org.spongepowered.asm.mixin.Implements;\n-import org.spongepowered.asm.mixin.Interface;\n-import org.spongepowered.asm.mixin.Intrinsic;\n+import org.spongepowered.api.CatalogKey;\n import org.spongepowered.asm.mixin.Mixin;\n import org.spongepowered.asm.mixin.Shadow;\n+import org.spongepowered.asm.mixin.injection.At;\n+import org.spongepowered.asm.mixin.injection.Inject;\n+import org.spongepowered.asm.mixin.injection.callback.CallbackInfo;\n+import org.spongepowered.common.SpongeImplHooks;\n \n @Mixin(SoundCategory.class)\n-@Implements(@Interface(iface = org.spongepowered.api.effect.sound.SoundCategory.class, prefix = \"category$\"))\n public abstract class SoundCategoryMixin_API implements org.spongepowered.api.effect.sound.SoundCategory {\n \n+    @Inject(method = \"<init>\", at = @At(\"TAIL\"))\n+    private void api$setKey(CallbackInfo ci) {\n+        api$key = SpongeImplHooks.getActiveModContainer().createCatalogKey(this.shadow$getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a4242a42677580ea024a7eda4514202fd7a47bb"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2595f77cd00679a140ea1832f91d937b397615dc", "author": {"user": {"login": "TheGlitch76", "name": "Glitch"}}, "url": "https://github.com/SpongePowered/Sponge/commit/2595f77cd00679a140ea1832f91d937b397615dc", "committedDate": "2020-04-15T02:54:25Z", "message": "Zidane reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e14b21bf09db72e4f99eb679f14987bac14cbcc", "author": {"user": {"login": "TheGlitch76", "name": "Glitch"}}, "url": "https://github.com/SpongePowered/Sponge/commit/5e14b21bf09db72e4f99eb679f14987bac14cbcc", "committedDate": "2020-04-15T03:00:24Z", "message": "Gabizou reviews"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6ef24ef7bf3dfc041bec0aa8b3123be92e6673a", "author": {"user": {"login": "TheGlitch76", "name": "Glitch"}}, "url": "https://github.com/SpongePowered/Sponge/commit/e6ef24ef7bf3dfc041bec0aa8b3123be92e6673a", "committedDate": "2020-04-15T03:05:02Z", "message": "Zidane reviews, pt 2."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 874, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}