{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MDg1NDAw", "number": 3090, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo1MTo1OFrOER4CwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowMDowMVrOER4OoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTc5NDU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/config/common/CommonConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo1MTo1OFrOG20rpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo1MTo1OFrOG20rpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzOTQyOA==", "bodyText": "SQL manager", "url": "https://github.com/SpongePowered/Sponge/pull/3090#discussion_r460139428", "createdAt": "2020-07-24T15:51:58Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/common/config/common/CommonConfig.java", "diffHunk": "@@ -22,41 +22,38 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.common.config.type;\n+package org.spongepowered.common.config.common;\n \n-import com.google.common.base.Function;\n-import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n import com.google.common.collect.ImmutableMap;\n import com.google.common.collect.Maps;\n import ninja.leaping.configurate.objectmapping.Setting;\n-import org.spongepowered.common.config.category.BrokenModCategory;\n-import org.spongepowered.common.config.category.BungeeCordCategory;\n-import org.spongepowered.common.config.category.PhaseTrackerCategory;\n-import org.spongepowered.common.config.category.CommandsCategory;\n-import org.spongepowered.common.config.category.ExploitCategory;\n-import org.spongepowered.common.config.category.GlobalGeneralCategory;\n-import org.spongepowered.common.config.category.GlobalWorldCategory;\n-import org.spongepowered.common.config.category.ModuleCategory;\n-import org.spongepowered.common.config.category.MovementChecksCategory;\n-import org.spongepowered.common.config.category.OptimizationCategory;\n-import org.spongepowered.common.config.category.PermissionCategory;\n-import org.spongepowered.common.config.category.ServicesCategory;\n-import org.spongepowered.common.config.category.SqlCategory;\n-import org.spongepowered.common.config.category.MetricsCategory;\n-import org.spongepowered.common.config.category.TeleportHelperCategory;\n+import org.spongepowered.common.config.Config;\n import org.spongepowered.common.util.IpSet;\n \n import java.net.InetAddress;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.function.Predicate;\n \n-import javax.annotation.Nullable;\n+/**\n+ * Sponge's core configuration.\n+ *\n+ * <p>The options in this file are non-inheritable.</p>\n+ *\n+ * <p>Because of how early in the engine lifecycle this configuration is loaded,\n+ * the configuration and its categories <em>may not reference\n+ * Minecraft classes</em></p>\n+ */\n+public class CommonConfig implements Config {\n+\n+    public static final String FILE_NAME = \"sponge.conf\";\n \n-public class GlobalConfig extends GeneralConfigBase {\n+    @Setting\n+    private GeneralCategory general = new GeneralCategory();\n \n-    @Setting(comment = \"Configuration options related to the Sql service, including connection aliases etc\")\n+    @Setting(comment = \"Configuration options related to the SQL service, including connection aliases etc\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dfd08f78a148e3a8d1fcc81abda320cb4b6d605"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTgyNDk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/world/SpongeWorldArchetypeBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowMDowMVrOG20-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowMDowMVrOG20-KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NDE2OQ==", "bodyText": "This is actually a fine change with no TODO needed. DimensionType specifying if I'll generate spawn on load is just a Forge feature. This call will likely be changed to do...\nModWorldHooks.shouldGenerateSpawnOnLoad(DimensionType dimensionType);", "url": "https://github.com/SpongePowered/Sponge/pull/3090#discussion_r460144169", "createdAt": "2020-07-24T16:00:01Z", "author": {"login": "Zidane"}, "path": "src/main/java/org/spongepowered/common/world/SpongeWorldArchetypeBuilder.java", "diffHunk": "@@ -266,7 +266,7 @@ public SpongeWorldArchetypeBuilder reset() {\n         this.enabled = true;\n         this.loadOnStartup = true;\n         this.keepSpawnLoaded = null;\n-        this.generateSpawnOnLoad = this.dimensionType.getConfigAdapter().getConfig().getWorld().getGenerateSpawnOnLoad();\n+        this.generateSpawnOnLoad = true; // TODO this.dimensionType.getConfigAdapter().getConfig().getWorld().getGenerateSpawnOnLoad();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dfd08f78a148e3a8d1fcc81abda320cb4b6d605"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2553, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}