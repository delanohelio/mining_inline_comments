{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MzkyNTU1", "number": 3192, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowNTowMFrOExD2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozODozNVrOExEkPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODc4Njc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/bridge/data/CustomDataHolderBridge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowNTowMFrOHm_W8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowNTowMFrOHm_W8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0NjAwMQ==", "bodyText": "the object can't be final?", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510646001", "createdAt": "2020-10-23T06:05:00Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/bridge/data/CustomDataHolderBridge.java", "diffHunk": "@@ -25,18 +25,148 @@\n package org.spongepowered.common.bridge.data;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.reflect.TypeToken;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import org.spongepowered.api.ResourceKey;\n+import org.spongepowered.api.data.DataHolder;\n import org.spongepowered.api.data.DataManipulator;\n import org.spongepowered.api.data.DataTransactionResult;\n import org.spongepowered.api.data.Key;\n+import org.spongepowered.api.data.persistence.DataContainer;\n+import org.spongepowered.api.data.persistence.DataContentUpdater;\n+import org.spongepowered.api.data.persistence.DataStore;\n import org.spongepowered.api.data.persistence.DataView;\n+import org.spongepowered.api.data.persistence.Queries;\n import org.spongepowered.api.data.value.Value;\n import org.spongepowered.common.data.SpongeDataManager;\n+import org.spongepowered.common.data.persistence.NbtTranslator;\n+import org.spongepowered.common.util.Constants;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n public interface CustomDataHolderBridge {\n \n+    static void serializeCustomData(DataCompoundHolder object) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODc4ODcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/bridge/data/CustomDataHolderBridge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowNToyMFrOHm_YMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowNToyMFrOHm_YMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0NjMyMg==", "bodyText": "move map to the next line", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510646322", "createdAt": "2020-10-23T06:05:20Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/bridge/data/CustomDataHolderBridge.java", "diffHunk": "@@ -25,18 +25,148 @@\n package org.spongepowered.common.bridge.data;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.reflect.TypeToken;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import org.spongepowered.api.ResourceKey;\n+import org.spongepowered.api.data.DataHolder;\n import org.spongepowered.api.data.DataManipulator;\n import org.spongepowered.api.data.DataTransactionResult;\n import org.spongepowered.api.data.Key;\n+import org.spongepowered.api.data.persistence.DataContainer;\n+import org.spongepowered.api.data.persistence.DataContentUpdater;\n+import org.spongepowered.api.data.persistence.DataStore;\n import org.spongepowered.api.data.persistence.DataView;\n+import org.spongepowered.api.data.persistence.Queries;\n import org.spongepowered.api.data.value.Value;\n import org.spongepowered.common.data.SpongeDataManager;\n+import org.spongepowered.common.data.persistence.NbtTranslator;\n+import org.spongepowered.common.util.Constants;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n public interface CustomDataHolderBridge {\n \n+    static void serializeCustomData(DataCompoundHolder object) {\n+        final CompoundNBT compound = object.data$getCompound();\n+        if (!(object instanceof CustomDataHolderBridge)) {\n+            return;\n+        }\n+\n+        final DataManipulator.Mutable manipulator = ((CustomDataHolderBridge) object).bridge$getManipulator();\n+        final DataHolder dataHolder = object;\n+        final TypeToken<? extends DataHolder> dataHolderType = TypeToken.of(dataHolder.getClass());\n+\n+        final Set<DataStore> dataStores = manipulator.getKeys().stream().map(key -> SpongeDataManager.getDatastoreRegistry().getDataStore(key, dataHolderType))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODc5Mzg0OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/bridge/data/CustomDataHolderBridge.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowNjoyMFrOHm_b1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowNjoyMFrOHm_b1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0NzI1Mg==", "bodyText": "Can the object be final?", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510647252", "createdAt": "2020-10-23T06:06:20Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/bridge/data/CustomDataHolderBridge.java", "diffHunk": "@@ -25,18 +25,148 @@\n package org.spongepowered.common.bridge.data;\n \n import com.google.common.collect.ImmutableList;\n+import com.google.common.reflect.TypeToken;\n+import net.minecraft.nbt.CompoundNBT;\n+import net.minecraft.nbt.ListNBT;\n+import org.spongepowered.api.ResourceKey;\n+import org.spongepowered.api.data.DataHolder;\n import org.spongepowered.api.data.DataManipulator;\n import org.spongepowered.api.data.DataTransactionResult;\n import org.spongepowered.api.data.Key;\n+import org.spongepowered.api.data.persistence.DataContainer;\n+import org.spongepowered.api.data.persistence.DataContentUpdater;\n+import org.spongepowered.api.data.persistence.DataStore;\n import org.spongepowered.api.data.persistence.DataView;\n+import org.spongepowered.api.data.persistence.Queries;\n import org.spongepowered.api.data.value.Value;\n import org.spongepowered.common.data.SpongeDataManager;\n+import org.spongepowered.common.data.persistence.NbtTranslator;\n+import org.spongepowered.common.util.Constants;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n \n public interface CustomDataHolderBridge {\n \n+    static void serializeCustomData(DataCompoundHolder object) {\n+        final CompoundNBT compound = object.data$getCompound();\n+        if (!(object instanceof CustomDataHolderBridge)) {\n+            return;\n+        }\n+\n+        final DataManipulator.Mutable manipulator = ((CustomDataHolderBridge) object).bridge$getManipulator();\n+        final DataHolder dataHolder = object;\n+        final TypeToken<? extends DataHolder> dataHolderType = TypeToken.of(dataHolder.getClass());\n+\n+        final Set<DataStore> dataStores = manipulator.getKeys().stream().map(key -> SpongeDataManager.getDatastoreRegistry().getDataStore(key, dataHolderType))\n+                                                                        .collect(Collectors.toSet());\n+        for (DataStore dataStore : dataStores) {\n+            final CompoundNBT serialized = NbtTranslator.getInstance().translate(dataStore.serialize(manipulator));\n+            compound.merge(serialized);\n+        }\n+\n+        final List<DataView> failedData = ((CustomDataHolderBridge) object).bridge$getFailedData();\n+        if (!failedData.isEmpty()) {\n+            final ListNBT failedList = new ListNBT();\n+            for (final DataView failedDatum : failedData) {\n+                failedList.add(NbtTranslator.getInstance().translate(failedDatum));\n+            }\n+            compound.put(Constants.Sponge.FAILED_CUSTOM_DATA, failedList);\n+        } else {\n+            compound.remove(Constants.Sponge.FAILED_CUSTOM_DATA);\n+        }\n+    }\n+\n+    static void deserializeCustomData(DataCompoundHolder object) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODgwMzUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/bridge/data/DataCompoundHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowODoxOVrOHm_irw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDozMTo0MVrOHnQbPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0OTAwNw==", "bodyText": "I'd prefer bridges not extend their API counterparts, is this required for the compiler?", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510649007", "createdAt": "2020-10-23T06:08:19Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/bridge/data/DataCompoundHolder.java", "diffHunk": "@@ -25,9 +25,11 @@\n package org.spongepowered.common.bridge.data;\n \n import net.minecraft.nbt.CompoundNBT;\n+import org.spongepowered.api.data.DataHolder;\n+import org.spongepowered.common.data.provider.nbt.NBTDataType;\n import org.spongepowered.common.util.Constants;\n \n-public interface DataCompoundHolder {\n+public interface DataCompoundHolder extends DataHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyNTYyOA==", "bodyText": "not required but it removed a few unchecked casts", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510925628", "createdAt": "2020-10-23T14:31:41Z", "author": {"login": "Faithcaio"}, "path": "src/main/java/org/spongepowered/common/bridge/data/DataCompoundHolder.java", "diffHunk": "@@ -25,9 +25,11 @@\n package org.spongepowered.common.bridge.data;\n \n import net.minecraft.nbt.CompoundNBT;\n+import org.spongepowered.api.data.DataHolder;\n+import org.spongepowered.common.data.provider.nbt.NBTDataType;\n import org.spongepowered.common.util.Constants;\n \n-public interface DataCompoundHolder {\n+public interface DataCompoundHolder extends DataHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0OTAwNw=="}, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODgwNTcxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/bridge/data/DataCompoundHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowODo0MVrOHm_kPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowODo0MVrOHm_kPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0OTQwNQ==", "bodyText": "If this is a bridge method, prefix it.", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510649405", "createdAt": "2020-10-23T06:08:41Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/bridge/data/DataCompoundHolder.java", "diffHunk": "@@ -78,4 +79,12 @@\n             }\n         }\n     }\n+\n+    /**\n+     * Gets the {@link NBTDataType} which this\n+     * nbt data holder contains data for.\n+     *\n+     * @return The nbt data type\n+     */\n+    NBTDataType getNbtDataType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODgwNzg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/bridge/data/DataContainerHolder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowOTowM1rOHm_log==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjowOTowM1rOHm_log==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY0OTc2Mg==", "bodyText": "Same with this in respect to bridges.", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510649762", "createdAt": "2020-10-23T06:09:03Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/bridge/data/DataContainerHolder.java", "diffHunk": "@@ -22,5 +22,20 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-@org.checkerframework.framework.qual.DefaultQualifier(org.checkerframework.checker.nullness.qual.NonNull.class)\n-package org.spongepowered.common.data.holder.nbt;\n+package org.spongepowered.common.bridge.data;\n+\n+import org.spongepowered.api.data.DataHolder;\n+import org.spongepowered.api.data.persistence.DataContainer;\n+\n+public interface DataContainerHolder extends DataHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODgxMzQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/data/AbstractArchetype.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMDowMlrOHm_pdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo1MjozNFrOHnRTvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1MDc0Mw==", "bodyText": "This can honestly be initialized statically or lazily, no? We don't need to make this call more than once for the entire VM's lifecycle.", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510650743", "createdAt": "2020-10-23T06:10:02Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/AbstractArchetype.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.data;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableList;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.data.DataProvider;\n+import org.spongepowered.api.data.Key;\n+import org.spongepowered.api.data.persistence.DataView;\n+import org.spongepowered.api.data.persistence.InvalidDataException;\n+import org.spongepowered.api.data.value.Value;\n+import org.spongepowered.api.world.Archetype;\n+import org.spongepowered.api.world.LocatableSnapshot;\n+import org.spongepowered.common.bridge.data.DataCompoundHolder;\n+import org.spongepowered.common.data.holder.SpongeMutableDataHolder;\n+import org.spongepowered.common.data.nbt.validation.DelegateDataValidator;\n+import org.spongepowered.common.data.nbt.validation.RawDataValidator;\n+import org.spongepowered.common.data.nbt.validation.ValidationType;\n+import org.spongepowered.common.data.persistence.NbtTranslator;\n+import org.spongepowered.common.data.provider.DataProviderLookup;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+\n+public abstract class AbstractArchetype<C extends CatalogType, S extends LocatableSnapshot<S>, E> implements Archetype<S, E>,\n+        SpongeMutableDataHolder {\n+\n+    protected final C type;\n+    protected CompoundNBT data;\n+    private final DataProviderLookup lookup = SpongeDataManager.getProviderRegistry().getProviderLookup(this.getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0MDA5NQ==", "bodyText": "well at least once for every Archetype extending this", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510940095", "createdAt": "2020-10-23T14:52:34Z", "author": {"login": "Faithcaio"}, "path": "src/main/java/org/spongepowered/common/data/AbstractArchetype.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.data;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.collect.ImmutableList;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.spongepowered.api.CatalogType;\n+import org.spongepowered.api.data.DataProvider;\n+import org.spongepowered.api.data.Key;\n+import org.spongepowered.api.data.persistence.DataView;\n+import org.spongepowered.api.data.persistence.InvalidDataException;\n+import org.spongepowered.api.data.value.Value;\n+import org.spongepowered.api.world.Archetype;\n+import org.spongepowered.api.world.LocatableSnapshot;\n+import org.spongepowered.common.bridge.data.DataCompoundHolder;\n+import org.spongepowered.common.data.holder.SpongeMutableDataHolder;\n+import org.spongepowered.common.data.nbt.validation.DelegateDataValidator;\n+import org.spongepowered.common.data.nbt.validation.RawDataValidator;\n+import org.spongepowered.common.data.nbt.validation.ValidationType;\n+import org.spongepowered.common.data.persistence.NbtTranslator;\n+import org.spongepowered.common.data.provider.DataProviderLookup;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+\n+public abstract class AbstractArchetype<C extends CatalogType, S extends LocatableSnapshot<S>, E> implements Archetype<S, E>,\n+        SpongeMutableDataHolder {\n+\n+    protected final C type;\n+    protected CompoundNBT data;\n+    private final DataProviderLookup lookup = SpongeDataManager.getProviderRegistry().getProviderLookup(this.getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1MDc0Mw=="}, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODgyNDY5OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/data/SpongeDataManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMjowNFrOHm_xYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo0NDoxOFrOHnQ9YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1Mjc3MA==", "bodyText": "Avoid adding more dependencies/additions to using Preconditions as we're moving away from Guava explicitly in several aspects. Also, needs an error message instead of just a random IllegalStateException.", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510652770", "createdAt": "2020-10-23T06:12:04Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/SpongeDataManager.java", "diffHunk": "@@ -289,147 +298,81 @@ public DataContainer createContainer(DataView.SafetyMode safety) {\n         return new MemoryDataContainer(safety);\n     }\n \n-    void validateRegistration(SpongeDataRegistration registration) {\n-        Preconditions.checkState(allowRegistrations);\n-\n-        // TODO do we want this?\n-        Preconditions.checkState(registration.key.getNamespace().equals(registration.plugin.getMetadata().getId()), \"Registration namespace not matching plugin id {}\", registration.key);\n-\n-        // Make sure the Keys are not already registered\n-        Preconditions.checkState(Collections.disjoint(this.registrationByKey.keySet(), registration.keys), \"Duplicate key registration {}\", registration.key);\n-        Preconditions.checkState(Collections.disjoint(this.registrationByKey.keySet(), registration.dataProviderMap.keySet()), \"Duplicate key registration {}\", registration.key);\n-    }\n-\n     public static boolean areRegistrationsComplete() {\n-        return !allowRegistrations;\n+        return !SpongeDataManager.allowRegistrations;\n     }\n \n     public <E extends DataHolder> void registerKeyListener(KeyBasedDataListener<E> keyListener) {\n-        if (areRegistrationsComplete()) { // TODO do we need actually to wait for listener registration?\n+        if (SpongeDataManager.areRegistrationsComplete()) { // TODO do we need actually to wait for listener registration?\n             this.registerKeyListener(keyListener);\n         } else {\n             this.keyListeners.add(keyListener);\n         }\n     }\n \n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    public void registerDataRegistration(SpongeDataRegistration registration) {\n-        this.validateRegistration(registration);\n+    public void registerCustomDataRegistration(SpongeDataRegistration registration) {\n+        Preconditions.checkState(SpongeDataManager.allowRegistrations);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkzNDM2OQ==", "bodyText": "23cd5ef#diff-c702aaa65caf08a9f02f691cb6dd3b97c301e6a2b366cdf22fa2044141012f50R338", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510934369", "createdAt": "2020-10-23T14:44:18Z", "author": {"login": "Faithcaio"}, "path": "src/main/java/org/spongepowered/common/data/SpongeDataManager.java", "diffHunk": "@@ -289,147 +298,81 @@ public DataContainer createContainer(DataView.SafetyMode safety) {\n         return new MemoryDataContainer(safety);\n     }\n \n-    void validateRegistration(SpongeDataRegistration registration) {\n-        Preconditions.checkState(allowRegistrations);\n-\n-        // TODO do we want this?\n-        Preconditions.checkState(registration.key.getNamespace().equals(registration.plugin.getMetadata().getId()), \"Registration namespace not matching plugin id {}\", registration.key);\n-\n-        // Make sure the Keys are not already registered\n-        Preconditions.checkState(Collections.disjoint(this.registrationByKey.keySet(), registration.keys), \"Duplicate key registration {}\", registration.key);\n-        Preconditions.checkState(Collections.disjoint(this.registrationByKey.keySet(), registration.dataProviderMap.keySet()), \"Duplicate key registration {}\", registration.key);\n-    }\n-\n     public static boolean areRegistrationsComplete() {\n-        return !allowRegistrations;\n+        return !SpongeDataManager.allowRegistrations;\n     }\n \n     public <E extends DataHolder> void registerKeyListener(KeyBasedDataListener<E> keyListener) {\n-        if (areRegistrationsComplete()) { // TODO do we need actually to wait for listener registration?\n+        if (SpongeDataManager.areRegistrationsComplete()) { // TODO do we need actually to wait for listener registration?\n             this.registerKeyListener(keyListener);\n         } else {\n             this.keyListeners.add(keyListener);\n         }\n     }\n \n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    public void registerDataRegistration(SpongeDataRegistration registration) {\n-        this.validateRegistration(registration);\n+    public void registerCustomDataRegistration(SpongeDataRegistration registration) {\n+        Preconditions.checkState(SpongeDataManager.allowRegistrations);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1Mjc3MA=="}, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODgzMjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/data/SpongeDataManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMzoyM1rOHm_21A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMzoyM1rOHm_21A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1NDE2NA==", "bodyText": "can be final", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510654164", "createdAt": "2020-10-23T06:13:23Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/SpongeDataManager.java", "diffHunk": "@@ -289,147 +298,81 @@ public DataContainer createContainer(DataView.SafetyMode safety) {\n         return new MemoryDataContainer(safety);\n     }\n \n-    void validateRegistration(SpongeDataRegistration registration) {\n-        Preconditions.checkState(allowRegistrations);\n-\n-        // TODO do we want this?\n-        Preconditions.checkState(registration.key.getNamespace().equals(registration.plugin.getMetadata().getId()), \"Registration namespace not matching plugin id {}\", registration.key);\n-\n-        // Make sure the Keys are not already registered\n-        Preconditions.checkState(Collections.disjoint(this.registrationByKey.keySet(), registration.keys), \"Duplicate key registration {}\", registration.key);\n-        Preconditions.checkState(Collections.disjoint(this.registrationByKey.keySet(), registration.dataProviderMap.keySet()), \"Duplicate key registration {}\", registration.key);\n-    }\n-\n     public static boolean areRegistrationsComplete() {\n-        return !allowRegistrations;\n+        return !SpongeDataManager.allowRegistrations;\n     }\n \n     public <E extends DataHolder> void registerKeyListener(KeyBasedDataListener<E> keyListener) {\n-        if (areRegistrationsComplete()) { // TODO do we need actually to wait for listener registration?\n+        if (SpongeDataManager.areRegistrationsComplete()) { // TODO do we need actually to wait for listener registration?\n             this.registerKeyListener(keyListener);\n         } else {\n             this.keyListeners.add(keyListener);\n         }\n     }\n \n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    public void registerDataRegistration(SpongeDataRegistration registration) {\n-        this.validateRegistration(registration);\n+    public void registerCustomDataRegistration(SpongeDataRegistration registration) {\n+        Preconditions.checkState(SpongeDataManager.allowRegistrations);\n+\n+        Preconditions.checkState(registration.key.getNamespace().equals(registration.plugin.getMetadata().getId()), \"Registration namespace (%s) is not matching plugin id (%s)\", registration.key, registration.plugin.getMetadata().getId());\n+\n+        this.registrations.put(registration.getKey(), registration);\n+        this.registrationByPluginContainerId.computeIfAbsent(registration.getPluginContainer().getMetadata().getId(), k -> new ArrayList<>()).add(registration);\n \n-        this.pluginRegistrations.computeIfAbsent(registration.getPluginContainer(), k -> new ArrayList<>()).add(registration);\n-        for (Key<?> key : registration.getKeys()) {\n-            this.registrationByKey.put(key, registration);\n+        for (DataStore dataStore : registration.getDataStores()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODgzMzY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/data/SpongeDataManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMzo0MFrOHm_37A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoxMzo0MFrOHm_37A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY1NDQ0NA==", "bodyText": "Arguments can be final", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510654444", "createdAt": "2020-10-23T06:13:40Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/SpongeDataManager.java", "diffHunk": "@@ -289,147 +298,81 @@ public DataContainer createContainer(DataView.SafetyMode safety) {\n         return new MemoryDataContainer(safety);\n     }\n \n-    void validateRegistration(SpongeDataRegistration registration) {\n-        Preconditions.checkState(allowRegistrations);\n-\n-        // TODO do we want this?\n-        Preconditions.checkState(registration.key.getNamespace().equals(registration.plugin.getMetadata().getId()), \"Registration namespace not matching plugin id {}\", registration.key);\n-\n-        // Make sure the Keys are not already registered\n-        Preconditions.checkState(Collections.disjoint(this.registrationByKey.keySet(), registration.keys), \"Duplicate key registration {}\", registration.key);\n-        Preconditions.checkState(Collections.disjoint(this.registrationByKey.keySet(), registration.dataProviderMap.keySet()), \"Duplicate key registration {}\", registration.key);\n-    }\n-\n     public static boolean areRegistrationsComplete() {\n-        return !allowRegistrations;\n+        return !SpongeDataManager.allowRegistrations;\n     }\n \n     public <E extends DataHolder> void registerKeyListener(KeyBasedDataListener<E> keyListener) {\n-        if (areRegistrationsComplete()) { // TODO do we need actually to wait for listener registration?\n+        if (SpongeDataManager.areRegistrationsComplete()) { // TODO do we need actually to wait for listener registration?\n             this.registerKeyListener(keyListener);\n         } else {\n             this.keyListeners.add(keyListener);\n         }\n     }\n \n     @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-    public void registerDataRegistration(SpongeDataRegistration registration) {\n-        this.validateRegistration(registration);\n+    public void registerCustomDataRegistration(SpongeDataRegistration registration) {\n+        Preconditions.checkState(SpongeDataManager.allowRegistrations);\n+\n+        Preconditions.checkState(registration.key.getNamespace().equals(registration.plugin.getMetadata().getId()), \"Registration namespace (%s) is not matching plugin id (%s)\", registration.key, registration.plugin.getMetadata().getId());\n+\n+        this.registrations.put(registration.getKey(), registration);\n+        this.registrationByPluginContainerId.computeIfAbsent(registration.getPluginContainer().getMetadata().getId(), k -> new ArrayList<>()).add(registration);\n \n-        this.pluginRegistrations.computeIfAbsent(registration.getPluginContainer(), k -> new ArrayList<>()).add(registration);\n-        for (Key<?> key : registration.getKeys()) {\n-            this.registrationByKey.put(key, registration);\n+        for (DataStore dataStore : registration.getDataStores()) {\n+            this.dataStoreRegistry.register(dataStore, registration.getKeys());\n         }\n \n         for (Key key : registration.getKeys()) {\n-            registerForKey(registration, key);\n+            this.registerCustomDataProviderForKey(registration, key);\n         }\n     }\n \n-    private static <V extends Value<E>, E> void registerForKey(SpongeDataRegistration registration, Key<V> key) {\n-        final DataProviderRegistry dataProviderRegistry = DataProviderRegistry.get();\n-        final Optional<DataProvider<V, E>> provider = registration.getProviderFor(key);\n-        if (provider.isPresent()) {\n-            dataProviderRegistry.register(provider.get());\n-        } else {\n-            dataProviderRegistry.register(new CustomDataProvider<>(key));\n+    private <V extends Value<E>, E> void registerCustomDataProviderForKey(SpongeDataRegistration registration, Key<V> key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODg3NDEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/data/holder/SimpleNbtDataHolder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjoyNTo0MFrOHnAQ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDo1NzoyNlrOHnRgeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2MDgzOQ==", "bodyText": "I'd personally prefer this is always copied in.", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510660839", "createdAt": "2020-10-23T06:25:40Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/holder/SimpleNbtDataHolder.java", "diffHunk": "@@ -22,27 +22,37 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.common.data.holder.nbt;\n+package org.spongepowered.common.data.holder;\n \n import net.minecraft.nbt.CompoundNBT;\n-import org.spongepowered.common.data.holder.SpongeDataHolder;\n+import org.spongepowered.common.bridge.data.DataCompoundHolder;\n import org.spongepowered.common.data.provider.nbt.NBTDataType;\n \n-public interface NbtCompoundDataHolder extends SpongeDataHolder {\n+/**\n+ * Simple mutable data holder wrapper around a nbt compound. {@link org.spongepowered.common.bridge.data.CustomDataHolderBridge} is mixed in.\n+ * Used for preparing data for Immutable data holders like {@link org.spongepowered.api.entity.EntitySnapshot}\n+ */\n+public class SimpleNbtDataHolder implements DataCompoundHolder, SpongeMutableDataHolder {\n+    private CompoundNBT nbt;\n+    private final NBTDataType dataType;\n+\n+    public SimpleNbtDataHolder(CompoundNBT nbt, NBTDataType dataType) {\n+        this.nbt = nbt;\n+        this.dataType = dataType;\n+    }\n+\n+    @Override\n+    public CompoundNBT data$getCompound() {\n+        return this.nbt;\n+    }\n \n-    /**\n-     * The NBT compound which contains backing\n-     * data for this data holder.\n-     *\n-     * @return The nbt compound\n-     */\n-    CompoundNBT getNbtCompound();\n+    @Override \n+    public void data$setCompound(CompoundNBT nbt) {\n+        this.nbt = nbt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk0MzM1Mw==", "bodyText": "This is basicly just a helper DataHolder for building Immutable Dataholders.\nOnly usage atm. SpongeEntitySnapshotBuilder\n            final SimpleNbtDataHolder dataHolder = new SimpleNbtDataHolder(this.compound, NBTDataTypes.ENTITY);\n            dataHolder.copyFrom(this.manipulator);\n            this.compound = dataHolder.data$getCompound();\n\nAnd the compound is then always copied when the builder builds the EntitySnapshot", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510943353", "createdAt": "2020-10-23T14:57:26Z", "author": {"login": "Faithcaio"}, "path": "src/main/java/org/spongepowered/common/data/holder/SimpleNbtDataHolder.java", "diffHunk": "@@ -22,27 +22,37 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n  * THE SOFTWARE.\n  */\n-package org.spongepowered.common.data.holder.nbt;\n+package org.spongepowered.common.data.holder;\n \n import net.minecraft.nbt.CompoundNBT;\n-import org.spongepowered.common.data.holder.SpongeDataHolder;\n+import org.spongepowered.common.bridge.data.DataCompoundHolder;\n import org.spongepowered.common.data.provider.nbt.NBTDataType;\n \n-public interface NbtCompoundDataHolder extends SpongeDataHolder {\n+/**\n+ * Simple mutable data holder wrapper around a nbt compound. {@link org.spongepowered.common.bridge.data.CustomDataHolderBridge} is mixed in.\n+ * Used for preparing data for Immutable data holders like {@link org.spongepowered.api.entity.EntitySnapshot}\n+ */\n+public class SimpleNbtDataHolder implements DataCompoundHolder, SpongeMutableDataHolder {\n+    private CompoundNBT nbt;\n+    private final NBTDataType dataType;\n+\n+    public SimpleNbtDataHolder(CompoundNBT nbt, NBTDataType dataType) {\n+        this.nbt = nbt;\n+        this.dataType = dataType;\n+    }\n+\n+    @Override\n+    public CompoundNBT data$getCompound() {\n+        return this.nbt;\n+    }\n \n-    /**\n-     * The NBT compound which contains backing\n-     * data for this data holder.\n-     *\n-     * @return The nbt compound\n-     */\n-    CompoundNBT getNbtCompound();\n+    @Override \n+    public void data$setCompound(CompoundNBT nbt) {\n+        this.nbt = nbt;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2MDgzOQ=="}, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODg4NDUyOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/data/provider/entity/EntityData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozMDowMVrOHnAXIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozMDowMVrOHnAXIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2MjQzMw==", "bodyText": "If you're going to multiline, indent with some explicits, this looks weird otherwise.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    registrator.newDataStore(SpongeEntitySnapshot.class, SpongeEntityArchetype.class)\n          \n          \n            \n                            .dataStore(Keys.DISPLAY_NAME,\n          \n          \n            \n                            (dv, v) -> dv.set(Constants.Entity.CUSTOM_NAME, SpongeAdventure.json(v)),\n          \n          \n            \n                            dv -> dv.getString(Constants.Entity.CUSTOM_NAME).map(SpongeAdventure::json));\n          \n          \n            \n                    registrator.newDataStore(SpongeEntitySnapshot.class, SpongeEntityArchetype.class)\n          \n          \n            \n                            .dataStore(\n          \n          \n            \n                                Keys.DISPLAY_NAME,\n          \n          \n            \n                                (dv, v) -> dv.set(Constants.Entity.CUSTOM_NAME, SpongeAdventure.json(v)),\n          \n          \n            \n                                dv -> dv.getString(Constants.Entity.CUSTOM_NAME).map(SpongeAdventure::json)\n          \n          \n            \n                            );", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510662433", "createdAt": "2020-10-23T06:30:01Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/provider/entity/EntityData.java", "diffHunk": "@@ -169,6 +174,13 @@ public static void register(final DataProviderRegistrator registrator) {\n                         .get(EntityBridge::bridge$getDisplayNameText)\n                         .set(EntityBridge::bridge$setDisplayName)\n                         .delete(h -> h.bridge$setDisplayName(null));\n+\n+        registrator.newDataStore(SpongeEntitySnapshot.class, SpongeEntityArchetype.class)\n+                .dataStore(Keys.DISPLAY_NAME,\n+                (dv, v) -> dv.set(Constants.Entity.CUSTOM_NAME, SpongeAdventure.json(v)),\n+                dv -> dv.getString(Constants.Entity.CUSTOM_NAME).map(SpongeAdventure::json));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODg4NjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/data/provider/inventory/InventoryDataProviders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozMDo0M1rOHnAYLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozMDo0M1rOHnAYLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2MjcwMA==", "bodyText": "Having all of these string constants, I almost want to refer to them through o.s.c.util.Constants", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510662700", "createdAt": "2020-10-23T06:30:43Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/provider/inventory/InventoryDataProviders.java", "diffHunk": "@@ -25,16 +25,15 @@\n package org.spongepowered.common.data.provider.inventory;\n \n import org.spongepowered.common.data.provider.DataProviderRegistratorBuilder;\n-import org.spongepowered.common.data.provider.DataProviderRegistry;\n \n public final class InventoryDataProviders extends DataProviderRegistratorBuilder {\n \n-    public InventoryDataProviders(final DataProviderRegistry registry) {\n-        super(registry);\n+    public InventoryDataProviders() {\n+        super(\"inventory\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODg4OTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/data/util/DataUtil.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozMjoxM1rOHnAaSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozMjoxM1rOHnAaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2MzI0MQ==", "bodyText": "qualify the dataNotFound()", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510663241", "createdAt": "2020-10-23T06:32:13Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/data/util/DataUtil.java", "diffHunk": "@@ -72,4 +72,12 @@ public static Vector3i getPosition3i(final DataView view) {\n     private static Supplier<InvalidDataException> dataNotFound() {\n         return () -> new InvalidDataException(\"not found\");\n     }\n+\n+    public static Vector3d getPosition3d(final DataView view, @Nullable final DataQuery query) {\n+        final DataView internal = query == null ? view : view.getView(query).orElseThrow(dataNotFound());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODg5MjE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/entity/SpongeEntityArchetype.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozMzoxOFrOHnAbng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozMzoxOFrOHnAbng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2MzU4Mg==", "bodyText": "Probably want to validate we're on the main thread to do this.", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510663582", "createdAt": "2020-10-23T06:33:18Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/entity/SpongeEntityArchetype.java", "diffHunk": "@@ -95,67 +106,73 @@ public CompoundNBT getData() {\n         }\n     }\n \n+    @Override\n+    public DataContainer data$getDataContainer() {\n+        return this.getEntityData();\n+    }\n+\n+    @Override\n+    public void data$setDataContainer(DataContainer container) {\n+        this.data = NbtTranslator.getInstance().translate(container);\n+    }\n+\n     @Override\n     public DataContainer getEntityData() {\n         return NbtTranslator.getInstance().translateFrom(this.data);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n     public Optional<org.spongepowered.api.entity.Entity> apply(ServerLocation location) {\n-        final Vector3d position = location.getPosition();\n-        final double x = position.getX();\n-        final double y = position.getY();\n-        final double z = position.getZ();\n-        final BlockPos blockPos = new BlockPos(x, y, z);\n-        final World world = location.getWorld();\n-        final ServerWorld worldServer = (ServerWorld) world;\n-\n-        Entity entity = null;\n-\n-        try {\n-            Class<? extends Entity> oclass = (Class<? extends Entity>) this.type.getEntityClass();\n-            if (oclass != null) {\n-                entity = oclass.getConstructor(net.minecraft.world.World.class).newInstance(world);\n-            }\n-        } catch (Exception exception) {\n-            exception.printStackTrace();\n-        }\n+        final org.spongepowered.api.world.server.ServerWorld spongeWorld = location.getWorld();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODg5NzYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/entity/SpongeEntityArchetype.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozNToxOFrOHnAeuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozNToxOFrOHnAeuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2NDM3Nw==", "bodyText": "can be final", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510664377", "createdAt": "2020-10-23T06:35:18Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/entity/SpongeEntityArchetype.java", "diffHunk": "@@ -166,15 +183,24 @@ public EntitySnapshot toSnapshot(ServerLocation location) {\n         final SpongeEntitySnapshotBuilder builder = new SpongeEntitySnapshotBuilder();\n         builder.entityType = this.type;\n         CompoundNBT newCompound = this.data.copy();\n-        newCompound.put(\"Pos\", Constants.NBT\n-                .newDoubleNBTList(new double[] { location.getPosition().getX(), location.getPosition().getY(), location.getPosition().getZ() }));\n-        newCompound.putInt(\"Dimension\", ((WorldInfoBridge) location.getWorld().getProperties()).bridge$getDimensionId());\n+        final Vector3d pos = location.getPosition();\n+        newCompound.put(Constants.Entity.ENTITY_POSITION, Constants.NBT.newDoubleNBTList(pos.getX(), pos.getY(), pos.getZ()));\n+        newCompound.putInt(Constants.Entity.ENTITY_DIMENSION, ((WorldInfoBridge) location.getWorld().getProperties()).bridge$getDimensionId());\n         builder.compound = newCompound;\n-        builder.worldId = location.getWorld().getProperties().getUniqueId();\n-        builder.position = location.getPosition();\n+        builder.worldKey = location.getWorld().getProperties().getKey();\n+        builder.position = pos;\n+        builder.rotation = this.getRotation();\n+        builder.scale = Vector3d.ONE;\n         return builder.build();\n     }\n \n+    private Vector3d getRotation() {\n+        ListNBT listnbt3 = this.data.getList(\"Rotation\", 5);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODkwMTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/entity/SpongeEntityArchetypeBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozNjo0OFrOHnAg7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozNjo0OFrOHnAg7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2NDk0Mw==", "bodyText": "Honestly shouldn't need to, on reading the entity data if the archetype is queried, it's fine to re-generate the manipulators from nbt. It's difficult to make the nbt \"change watched\" to invalidate the manipulators otherwise.", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510664943", "createdAt": "2020-10-23T06:36:48Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/entity/SpongeEntityArchetypeBuilder.java", "diffHunk": "@@ -39,33 +35,37 @@\n import org.spongepowered.api.entity.Entity;\n import org.spongepowered.api.entity.EntityArchetype;\n import org.spongepowered.api.entity.EntityType;\n-import org.spongepowered.api.entity.EntityTypes;\n-import org.spongepowered.common.data.util.DataUtil;\n+import org.spongepowered.common.data.nbt.validation.DelegateDataValidator;\n+import org.spongepowered.common.data.nbt.validation.Validations;\n import org.spongepowered.common.util.Constants;\n \n+import java.util.Objects;\n import java.util.Optional;\n \n public class SpongeEntityArchetypeBuilder extends AbstractDataBuilder<EntityArchetype> implements EntityArchetype.Builder {\n \n-    EntityType entityType = EntityTypes;\n+    EntityType entityType = null;\n     DataContainer entityData;\n     CompoundNBT compound;\n+    DataManipulator.Mutable manipulator;\n \n     public SpongeEntityArchetypeBuilder() {\n         super(EntityArchetype.class, Constants.Sponge.EntityArchetype.BASE_VERSION);\n     }\n \n     @Override\n     public EntityArchetype.Builder reset() {\n-        this.entityType = UNKNOWN;\n+        this.entityType = null;\n         this.entityData = null;\n+        this.manipulator = null;\n         return this;\n     }\n \n     @Override\n     public EntityArchetype.Builder from(final EntityArchetype value) {\n         this.entityType = value.getType();\n         this.entityData = value.getEntityData();\n+        this.manipulator = null; // TODO get cached values if present", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5ODkwNDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/org/spongepowered/common/entity/SpongeEntitySnapshot.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNjozODozNVrOHnAjTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxNDoyODozN1rOHnQTBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2NTU0OA==", "bodyText": "eh? can you explain a little more?", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510665548", "createdAt": "2020-10-23T06:38:35Z", "author": {"login": "gabizou"}, "path": "src/main/java/org/spongepowered/common/entity/SpongeEntitySnapshot.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.entity;\n+\n+import com.google.common.base.MoreObjects;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.spongepowered.api.ResourceKey;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.data.persistence.DataContainer;\n+import org.spongepowered.api.data.persistence.DataView;\n+import org.spongepowered.api.data.persistence.InvalidDataException;\n+import org.spongepowered.api.data.persistence.Queries;\n+import org.spongepowered.api.entity.Entity;\n+import org.spongepowered.api.entity.EntityArchetype;\n+import org.spongepowered.api.entity.EntitySnapshot;\n+import org.spongepowered.api.entity.EntityType;\n+import org.spongepowered.api.event.CauseStackManager.StackFrame;\n+import org.spongepowered.api.event.EventContextKeys;\n+import org.spongepowered.api.event.cause.entity.SpawnTypes;\n+import org.spongepowered.api.util.Transform;\n+import org.spongepowered.api.world.ServerLocation;\n+import org.spongepowered.api.world.server.ServerWorld;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.bridge.data.CustomDataHolderBridge;\n+import org.spongepowered.common.bridge.data.DataContainerHolder;\n+import org.spongepowered.common.bridge.world.storage.WorldInfoBridge;\n+import org.spongepowered.common.data.holder.SpongeImmutableDataHolder;\n+import org.spongepowered.common.data.persistence.NbtTranslator;\n+import org.spongepowered.common.event.tracking.PhaseTracker;\n+import org.spongepowered.common.util.Constants;\n+import org.spongepowered.math.vector.Vector3d;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nullable;\n+\n+public class SpongeEntitySnapshot implements EntitySnapshot, SpongeImmutableDataHolder<EntitySnapshot>, DataContainerHolder.Immutable<EntitySnapshot> {\n+\n+    @Nullable private final UUID entityUuid;\n+    private final ResourceKey worldKey;\n+    private final EntityType<?> entityType;\n+    private final Vector3d position;\n+    private final Vector3d rotation;\n+    private final Vector3d scale;\n+    @Nullable private final CompoundNBT compound;\n+    @Nullable private final WeakReference<Entity> entityReference;\n+\n+    // for entities during events.\n+    private boolean isDirty = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDkyMzUyNA==", "bodyText": "no can you? 90407b0", "url": "https://github.com/SpongePowered/Sponge/pull/3192#discussion_r510923524", "createdAt": "2020-10-23T14:28:37Z", "author": {"login": "Faithcaio"}, "path": "src/main/java/org/spongepowered/common/entity/SpongeEntitySnapshot.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.entity;\n+\n+import com.google.common.base.MoreObjects;\n+import net.minecraft.nbt.CompoundNBT;\n+import org.spongepowered.api.ResourceKey;\n+import org.spongepowered.api.Sponge;\n+import org.spongepowered.api.data.persistence.DataContainer;\n+import org.spongepowered.api.data.persistence.DataView;\n+import org.spongepowered.api.data.persistence.InvalidDataException;\n+import org.spongepowered.api.data.persistence.Queries;\n+import org.spongepowered.api.entity.Entity;\n+import org.spongepowered.api.entity.EntityArchetype;\n+import org.spongepowered.api.entity.EntitySnapshot;\n+import org.spongepowered.api.entity.EntityType;\n+import org.spongepowered.api.event.CauseStackManager.StackFrame;\n+import org.spongepowered.api.event.EventContextKeys;\n+import org.spongepowered.api.event.cause.entity.SpawnTypes;\n+import org.spongepowered.api.util.Transform;\n+import org.spongepowered.api.world.ServerLocation;\n+import org.spongepowered.api.world.server.ServerWorld;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.bridge.data.CustomDataHolderBridge;\n+import org.spongepowered.common.bridge.data.DataContainerHolder;\n+import org.spongepowered.common.bridge.world.storage.WorldInfoBridge;\n+import org.spongepowered.common.data.holder.SpongeImmutableDataHolder;\n+import org.spongepowered.common.data.persistence.NbtTranslator;\n+import org.spongepowered.common.event.tracking.PhaseTracker;\n+import org.spongepowered.common.util.Constants;\n+import org.spongepowered.math.vector.Vector3d;\n+import org.spongepowered.math.vector.Vector3i;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import javax.annotation.Nullable;\n+\n+public class SpongeEntitySnapshot implements EntitySnapshot, SpongeImmutableDataHolder<EntitySnapshot>, DataContainerHolder.Immutable<EntitySnapshot> {\n+\n+    @Nullable private final UUID entityUuid;\n+    private final ResourceKey worldKey;\n+    private final EntityType<?> entityType;\n+    private final Vector3d position;\n+    private final Vector3d rotation;\n+    private final Vector3d scale;\n+    @Nullable private final CompoundNBT compound;\n+    @Nullable private final WeakReference<Entity> entityReference;\n+\n+    // for entities during events.\n+    private boolean isDirty = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY2NTU0OA=="}, "originalCommit": {"oid": "44afcf7ee884c861de2381cc982b21c393a8c76e"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2508, "cost": 1, "resetAt": "2021-11-13T12:26:42Z"}}}