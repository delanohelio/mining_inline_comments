{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4NzUxMDUy", "number": 3054, "title": "Create permission nodes for commands that do op checks.", "bodyText": "(aka I never thought I'd miss the canUseCommand(String) method)\nAs it says in the title, what this attempts to do is determine permissions for given commands based on their node path and if a permission level check is made.\nUnlike in API-7 which just slaps a permission on a command, we have to think about this some more. Because of Brig's node like structure, any node (so, parameter) could do a check. We therefore need to make sure we have permissions for all nodes. I do this by just incorporating the node path into the permission path. /execute has some pretty long permission nodes. Illegal characters in node names are stripped, and if the entire string was illegal (e.g. <=) I just replace it with node.\nAs it stands, if you have /foo bar owned by baz and they both have permission checks, using the current scheme as a base, you get:\n/foo -> baz.command.foo\n/foo bar -> baz.command.foo.bar\n...which is a problem because if you grant /foo, you grant /foo bar, but you need /foo's permission to get to /foo bar anyway, making the second permission useless unless you're willing to go ungrant swathes of permissions. So we need to alter the scheme slightly, we'll have to add an identifier at the end of the string to avoid this from happening. If we were to take a leaf out of Nucleus' playbook, we'd go for base, so you get:\n/foo -> baz.command.foo.base\n/foo bar -> baz.command.foo.bar.base\nand now, granting /foo does not grant /foo bar.\nPermissions are calculated the first time an op check is made, then cached on a per node basis. They are logged to info, this will get downgraded to debug once this looks okay.\nAt the moment, it looks like non-minecraft permissions are reporting true on the integrated server. I need to have a look as to why that is. It seems things are running fine for Minecraft commands though - op levels seem to be respected there so the right subject collections are being read. I forgot to assign permissions to nodes, that's fixed here.\nThoughts, people?\n\nIn other fixes:\n\nSetting up redirects for client completion depends on alphabetical order of the nodes in vanilla. This causes no end of problems. We patch that to become insertion order dependent, though I will likely replace that so that redirect nodes get sorted last (but this works for now).\nSome commands/redirects that we build pointed to nodes not actually in the tree. The BrigadierCommandRegistrar has been fixed to do it properly now.\n\n\nOther things we need to think about - particularly for SF:\n\nWhat happens when a mod does a permission value check outside of commands - what pemission do we use then? We may need to just use permissions like modid.level.<x> (0 <= x <=4). I assume we get the mod out of the cause stack.\nWhat if a mod does a core mod transformation and does an op level check without going through their own classes? That might be a little harder to do.\nI need to see if Forge has a permissions handler like they did in 1.12 - we'll want to hook into that.\n\nMuch of this is worst case scenarios, but it's worth thinking about them.", "createdAt": "2020-07-14T09:05:22Z", "url": "https://github.com/SpongePowered/Sponge/pull/3054", "merged": true, "mergeCommit": {"oid": "ac08b8dbaacd35f86af5a17bd2e3373c9fcf4c95"}, "closed": true, "closedAt": "2020-07-18T14:17:08Z", "author": {"login": "dualspiral"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc059asgFqTQ0ODMzMjk0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2JIrYgBqjM1NjExNjkzNjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MzMyOTQ1", "url": "https://github.com/SpongePowered/Sponge/pull/3054#pullrequestreview-448332945", "createdAt": "2020-07-14T17:51:31Z", "commit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxNzo1MTozMVrOGxet_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODowMTo0NVrOGxfHGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzNjcwMA==", "bodyText": "Can be avoided by checking if get return null", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454536700", "createdAt": "2020-07-14T17:51:31Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/command/brigadier/dispatcher/SpongeNodePermissionCache.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.command.brigadier.dispatcher;\n+\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.tree.CommandNode;\n+import com.mojang.brigadier.tree.RootCommandNode;\n+import net.minecraft.command.CommandSource;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.entity.living.player.server.ServerPlayer;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.bridge.command.CommandSourceBridge;\n+import org.spongepowered.common.command.brigadier.tree.SpongePermissionWrappedLiteralCommandNode;\n+import org.spongepowered.common.service.permission.SpongePermissions;\n+\n+import java.util.Collection;\n+import java.util.Locale;\n+import java.util.WeakHashMap;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class SpongeNodePermissionCache {\n+\n+    private final static Pattern ILLEGAL_CHARS = Pattern.compile(\"[^a-zA-Z0-9]\");\n+    private final static WeakHashMap<CommandNode<CommandSource>, Supplier<String>> PERMISSION_MAP = new WeakHashMap<>();\n+\n+    public static boolean canUse(\n+            final boolean isRoot,\n+            final CommandDispatcher<CommandSource> dispatcher,\n+            final CommandNode<CommandSource> node,\n+            final CommandSource source\n+    ) {\n+        final Supplier<String> supplier;\n+        if (SpongeNodePermissionCache.PERMISSION_MAP.containsKey(node)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDUzNzE3Nw==", "bodyText": "Same as above", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454537177", "createdAt": "2020-07-14T17:52:12Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/command/brigadier/dispatcher/SpongeNodePermissionCache.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * This file is part of Sponge, licensed under the MIT License (MIT).\n+ *\n+ * Copyright (c) SpongePowered <https://www.spongepowered.org>\n+ * Copyright (c) contributors\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in\n+ * all copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n+ * THE SOFTWARE.\n+ */\n+package org.spongepowered.common.command.brigadier.dispatcher;\n+\n+import com.mojang.brigadier.CommandDispatcher;\n+import com.mojang.brigadier.tree.CommandNode;\n+import com.mojang.brigadier.tree.RootCommandNode;\n+import net.minecraft.command.CommandSource;\n+import org.checkerframework.checker.nullness.qual.Nullable;\n+import org.spongepowered.api.entity.living.player.server.ServerPlayer;\n+import org.spongepowered.common.SpongeCommon;\n+import org.spongepowered.common.bridge.command.CommandSourceBridge;\n+import org.spongepowered.common.command.brigadier.tree.SpongePermissionWrappedLiteralCommandNode;\n+import org.spongepowered.common.service.permission.SpongePermissions;\n+\n+import java.util.Collection;\n+import java.util.Locale;\n+import java.util.WeakHashMap;\n+import java.util.function.Supplier;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+public final class SpongeNodePermissionCache {\n+\n+    private final static Pattern ILLEGAL_CHARS = Pattern.compile(\"[^a-zA-Z0-9]\");\n+    private final static WeakHashMap<CommandNode<CommandSource>, Supplier<String>> PERMISSION_MAP = new WeakHashMap<>();\n+\n+    public static boolean canUse(\n+            final boolean isRoot,\n+            final CommandDispatcher<CommandSource> dispatcher,\n+            final CommandNode<CommandSource> node,\n+            final CommandSource source\n+    ) {\n+        final Supplier<String> supplier;\n+        if (SpongeNodePermissionCache.PERMISSION_MAP.containsKey(node)) {\n+            supplier = SpongeNodePermissionCache.PERMISSION_MAP.get(node);\n+        } else {\n+            supplier = new CachingStringSupplier(() -> SpongeNodePermissionCache.createFromNode(dispatcher, node));\n+        }\n+        try {\n+            ((CommandSourceBridge) source).bridge$setPotentialPermissionNode(supplier);\n+            final boolean result = node.canUse(source);\n+            if (isRoot && node instanceof SpongePermissionWrappedLiteralCommandNode\n+                    && ((CommandSourceBridge) source).bridge$getICommandSource() instanceof ServerPlayer) {\n+                // If the entity is a player, then we should try to add it anyway.\n+                SpongePermissions.registerPermission(supplier.get(), 0);\n+            }\n+            return result;\n+        } finally {\n+            ((CommandSourceBridge) source).bridge$setPotentialPermissionNode(null);\n+        }\n+    }\n+\n+    public static String createFromNode(\n+            final CommandDispatcher<CommandSource> dispatcher,\n+            final CommandNode<CommandSource> node) {\n+        final String permission;\n+        if (node.getRedirect() != null && !(node.getRedirect() instanceof RootCommandNode) && node.getCommand() == null) {\n+            if (!SpongeNodePermissionCache.PERMISSION_MAP.containsKey(node)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MDUyMw==", "bodyText": "Collections#addAll to avoid list creation", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454540523", "createdAt": "2020-07-14T17:57:32Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/command/manager/SpongeCommandManager.java", "diffHunk": "@@ -134,7 +140,11 @@ public CommandMapping registerAlias(\n             @NonNull final String primaryAlias,\n             @NonNull final String @NonNull ... secondaryAliases)\n             throws CommandFailedRegistrationException {\n-        final CommandMapping mapping = this.registerAliasInternal(registrar, container, primaryAlias, secondaryAliases);\n+        final List<String> aliases = new ArrayList<>();\n+        aliases.add(primaryAlias);\n+        aliases.addAll(Arrays.asList(secondaryAliases));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MTY2MQ==", "bodyText": "if (!contains) add -> if (add)", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454541661", "createdAt": "2020-07-14T17:59:28Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/service/permission/SpongePermissions.java", "diffHunk": "@@ -65,4 +68,22 @@ public static void populateNonCommandPermissions(final SubjectData data, final B\n         }\n     }\n \n+    public static void registerPermission(final String permissionNode, final int opLevel) {\n+        if (!REGISTERED_PERMISSIONS.contains(permissionNode)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU0MzEyOA==", "bodyText": "This is returning a mutable collection but SpongeRootCommandNode is returning an immutable one. Is it intended ?", "url": "https://github.com/SpongePowered/Sponge/pull/3054#discussion_r454543128", "createdAt": "2020-07-14T18:01:45Z", "author": {"login": "ImMorpheus"}, "path": "src/main/java/org/spongepowered/common/command/brigadier/tree/SpongeArgumentCommandNode.java", "diffHunk": "@@ -201,4 +206,14 @@ public final void parse(final StringReader reader, final CommandContextBuilder<C\n         return this.parser.getExamples();\n     }\n \n+    @Override\n+    public void addChild(final CommandNode<CommandSource> node) {\n+        super.addChild(node);\n+        this.childNodes.add(node);\n+    }\n+\n+    @Override\n+    public Collection<CommandNode<CommandSource>> getUnsortedChildren() {\n+        return this.childNodes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987"}, "originalPosition": 40}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba926b223a3a6747860f13bd6435f3e38314b987", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/ba926b223a3a6747860f13bd6435f3e38314b987", "committedDate": "2020-07-14T17:25:23Z", "message": "Another class, another final..."}, "afterCommit": {"oid": "5cc6448a6e3c62605818f58f69a64644db7e92ff", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/5cc6448a6e3c62605818f58f69a64644db7e92ff", "committedDate": "2020-07-14T21:24:39Z", "message": "Another class, another final..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5cc6448a6e3c62605818f58f69a64644db7e92ff", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/5cc6448a6e3c62605818f58f69a64644db7e92ff", "committedDate": "2020-07-14T21:24:39Z", "message": "Another class, another final..."}, "afterCommit": {"oid": "db8f55b4ddb7d7e80f4838f105b0b8966c1023f3", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/db8f55b4ddb7d7e80f4838f105b0b8966c1023f3", "committedDate": "2020-07-14T21:49:06Z", "message": "Another class, another final..."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3582da1ec3c33fe8edcbbccecca00b594b000f89", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/3582da1ec3c33fe8edcbbccecca00b594b000f89", "committedDate": "2020-07-14T22:10:19Z", "message": "Slight tidy up"}, "afterCommit": {"oid": "9a75da58281f25928a44f646bf34da462e961075", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/9a75da58281f25928a44f646bf34da462e961075", "committedDate": "2020-07-14T22:16:39Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a535944bcb8383c73385c1aac67117c38578e6f0", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/a535944bcb8383c73385c1aac67117c38578e6f0", "committedDate": "2020-07-15T14:11:40Z", "message": "Hopefully now I'll pass my finals..."}, "afterCommit": {"oid": "b90b6c73011b95da5578d1e336770f82eba3727a", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/b90b6c73011b95da5578d1e336770f82eba3727a", "committedDate": "2020-07-15T17:09:44Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b90b6c73011b95da5578d1e336770f82eba3727a", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/b90b6c73011b95da5578d1e336770f82eba3727a", "committedDate": "2020-07-15T17:09:44Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created"}, "afterCommit": {"oid": "094bd46140a65f909ad659ef3d99c0a41a0cda8a", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/094bd46140a65f909ad659ef3d99c0a41a0cda8a", "committedDate": "2020-07-15T17:16:29Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "094bd46140a65f909ad659ef3d99c0a41a0cda8a", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/094bd46140a65f909ad659ef3d99c0a41a0cda8a", "committedDate": "2020-07-15T17:16:29Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created"}, "afterCommit": {"oid": "8a3869ae50334d35a332a65746223dd91d2e5a00", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/8a3869ae50334d35a332a65746223dd91d2e5a00", "committedDate": "2020-07-15T17:57:00Z", "message": "Drop these to debug level messages"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "63d2194a2bc71bc3bef7c2867f3ebac3499b7d8a", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/63d2194a2bc71bc3bef7c2867f3ebac3499b7d8a", "committedDate": "2020-07-16T18:11:14Z", "message": "Move entry"}, "afterCommit": {"oid": "5be5c1b970d628c961f40d6df2498837be70de8a", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/5be5c1b970d628c961f40d6df2498837be70de8a", "committedDate": "2020-07-17T08:24:14Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5be5c1b970d628c961f40d6df2498837be70de8a", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/5be5c1b970d628c961f40d6df2498837be70de8a", "committedDate": "2020-07-17T08:24:14Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again"}, "afterCommit": {"oid": "82b1652424cea8dc99baecd31afad751aad852de", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/82b1652424cea8dc99baecd31afad751aad852de", "committedDate": "2020-07-17T08:44:32Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "82b1652424cea8dc99baecd31afad751aad852de", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/82b1652424cea8dc99baecd31afad751aad852de", "committedDate": "2020-07-17T08:44:32Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again"}, "afterCommit": {"oid": "8add6e8a8082fb5a3b6eeac33b580dd30aff82aa", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/8add6e8a8082fb5a3b6eeac33b580dd30aff82aa", "committedDate": "2020-07-17T19:47:49Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac08b8dbaacd35f86af5a17bd2e3373c9fcf4c95", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/ac08b8dbaacd35f86af5a17bd2e3373c9fcf4c95", "committedDate": "2020-07-18T14:13:31Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8add6e8a8082fb5a3b6eeac33b580dd30aff82aa", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/8add6e8a8082fb5a3b6eeac33b580dd30aff82aa", "committedDate": "2020-07-17T19:47:49Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again"}, "afterCommit": {"oid": "ac08b8dbaacd35f86af5a17bd2e3373c9fcf4c95", "author": {"user": {"login": "dualspiral", "name": "Daniel Naylor"}}, "url": "https://github.com/SpongePowered/Sponge/commit/ac08b8dbaacd35f86af5a17bd2e3373c9fcf4c95", "committedDate": "2020-07-18T14:13:31Z", "message": "First stab at associating permissions with commands\n\nStill need to decide what to do with other calls to permission level. It'll probably just be \"sponge.oplevel.<modid>.<level>\", but we'll see what we can do.\n\n* Fix bug where some redirects were not actually in the tree.\n* Bypass Mojang sorting their argument nodes for client completions.\n* Permissions now work for Command.Parameterized commands/subcommands\n* Ensure that the correct cause is on the command source if the CommandCause is Sponge created\n* Add base to permission nodes so granting a root command permission does not grant its subcommands\n* Command blocks use permissions again"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 797, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}