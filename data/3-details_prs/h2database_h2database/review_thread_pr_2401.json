{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMTIyODY5", "number": 2401, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODoxODoxMVrODark7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODoxODoxMVrODark7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzAzNTMyOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/value/Value.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxODoxODoxMVrOFhw2nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQxMDozNTo1OVrOFhzWZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0Nzc0MA==", "bodyText": "surely the logic here and below should be <= rather than == ?\ni.e. if the number of bytes is <= than the destination scalar type, then convert the  bytes by zero extension?", "url": "https://github.com/h2database/h2database/pull/2401#discussion_r370947740", "createdAt": "2020-01-25T18:18:11Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/value/Value.java", "diffHunk": "@@ -882,8 +882,13 @@ private ValueByte convertToByte(Object column) {\n         case REAL:\n         case DOUBLE:\n             return ValueByte.get(convertToByte(convertToLong(getDouble(), column), column));\n-        case VARBINARY:\n-            return ValueByte.get((byte) Integer.parseInt(getString(), 16));\n+        case VARBINARY: {\n+            byte[] bytes = getBytesNoCopy();\n+            if (bytes.length == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e68ae1b88e1ed7d7900249865b88ca0c89bc3f1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MjI3NA==", "bodyText": "I have no idea why H2 allows conversion between numeric and binary string data types, such conversion has a very low meaning. The current implementation here only ensures that conversion from TINYINT to VARBINARY and then back to TINYINT will return the same TINYINT value. Old implementation was insane: some overflows were silently truncated, some were not with a weird exception.\nIf you need a more advanced logic here, please, describe it in more clear way with all corner cases.", "url": "https://github.com/h2database/h2database/pull/2401#discussion_r370972274", "createdAt": "2020-01-26T04:11:32Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/value/Value.java", "diffHunk": "@@ -882,8 +882,13 @@ private ValueByte convertToByte(Object column) {\n         case REAL:\n         case DOUBLE:\n             return ValueByte.get(convertToByte(convertToLong(getDouble(), column), column));\n-        case VARBINARY:\n-            return ValueByte.get((byte) Integer.parseInt(getString(), 16));\n+        case VARBINARY: {\n+            byte[] bytes = getBytesNoCopy();\n+            if (bytes.length == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0Nzc0MA=="}, "originalCommit": {"oid": "2e68ae1b88e1ed7d7900249865b88ca0c89bc3f1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk4ODY0Nw==", "bodyText": "Then we should rather just remove the conversion logic for VARBINARY->all_integer_types.\nI also cannot imagine that this is being used anywhere useful", "url": "https://github.com/h2database/h2database/pull/2401#discussion_r370988647", "createdAt": "2020-01-26T10:35:59Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/value/Value.java", "diffHunk": "@@ -882,8 +882,13 @@ private ValueByte convertToByte(Object column) {\n         case REAL:\n         case DOUBLE:\n             return ValueByte.get(convertToByte(convertToLong(getDouble(), column), column));\n-        case VARBINARY:\n-            return ValueByte.get((byte) Integer.parseInt(getString(), 16));\n+        case VARBINARY: {\n+            byte[] bytes = getBytesNoCopy();\n+            if (bytes.length == 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0Nzc0MA=="}, "originalCommit": {"oid": "2e68ae1b88e1ed7d7900249865b88ca0c89bc3f1"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2198, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}