{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDAxOTYw", "number": 2577, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDoyNDo1MVrOD0jVVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjoyODozNVrOD1Dyfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDMxNDQ0OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDoyNDo1MVrOGJivGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzowNzo0OFrOGKPfMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1OTQ4MA==", "bodyText": "I think this function is expected to be deterministic and in the PostgreSQL it has variable number of arguments.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412659480", "createdAt": "2020-04-22T04:24:51Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -101,6 +105,8 @@\n                 PG_TABLE_IS_VISIBLE, 1, Value.BOOLEAN, true, false, true, false));\n         FUNCTIONS.put(\"SET_CONFIG\", new FunctionInfo(\"SET_CONFIG\", //\n                 SET_CONFIG, 3, Value.VARCHAR, true, false, true, false));\n+        FUNCTIONS.put(\"ARRAY_TO_STRING\", new FunctionInfo(\"ARRAY_TO_STRING\", //\n+                ARRAY_TO_STRING, 2, Value.VARCHAR, true, false, true, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjc2NDM4MQ==", "bodyText": "added 3rd arg optional_null_string, refer to https://www.postgresql.org/docs/9.1/functions-admin.html", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412764381", "createdAt": "2020-04-22T08:06:37Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -101,6 +105,8 @@\n                 PG_TABLE_IS_VISIBLE, 1, Value.BOOLEAN, true, false, true, false));\n         FUNCTIONS.put(\"SET_CONFIG\", new FunctionInfo(\"SET_CONFIG\", //\n                 SET_CONFIG, 3, Value.VARCHAR, true, false, true, false));\n+        FUNCTIONS.put(\"ARRAY_TO_STRING\", new FunctionInfo(\"ARRAY_TO_STRING\", //\n+                ARRAY_TO_STRING, 2, Value.VARCHAR, true, false, true, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1OTQ4MA=="}, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyOTcxOQ==", "bodyText": "It should use false, true, true, false because it doesn't return NULL on any NULL parameter and because it is deterministic.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413029719", "createdAt": "2020-04-22T14:25:45Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -101,6 +105,8 @@\n                 PG_TABLE_IS_VISIBLE, 1, Value.BOOLEAN, true, false, true, false));\n         FUNCTIONS.put(\"SET_CONFIG\", new FunctionInfo(\"SET_CONFIG\", //\n                 SET_CONFIG, 3, Value.VARCHAR, true, false, true, false));\n+        FUNCTIONS.put(\"ARRAY_TO_STRING\", new FunctionInfo(\"ARRAY_TO_STRING\", //\n+                ARRAY_TO_STRING, 2, Value.VARCHAR, true, false, true, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1OTQ4MA=="}, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjY4OA==", "bodyText": "fixed", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413392688", "createdAt": "2020-04-22T23:07:48Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -101,6 +105,8 @@\n                 PG_TABLE_IS_VISIBLE, 1, Value.BOOLEAN, true, false, true, false));\n         FUNCTIONS.put(\"SET_CONFIG\", new FunctionInfo(\"SET_CONFIG\", //\n                 SET_CONFIG, 3, Value.VARCHAR, true, false, true, false));\n+        FUNCTIONS.put(\"ARRAY_TO_STRING\", new FunctionInfo(\"ARRAY_TO_STRING\", //\n+                ARRAY_TO_STRING, 2, Value.VARCHAR, true, false, true, false));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1OTQ4MA=="}, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDMyMTMwOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDoyNzo0NFrOGJiyyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzowODowNVrOGKPfqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDQyNg==", "bodyText": "Such conversion to untyped array will be rejected in the future and PostgreSQL doesn't really accept values of other data types here. You need to check getValueType() and throw DbException.getInvalidValueException(\u2026) if passed value is not an array.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412660426", "createdAt": "2020-04-22T04:27:44Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxNzU4NQ==", "bodyText": "added type check", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413017585", "createdAt": "2020-04-22T14:11:08Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDQyNg=="}, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyNjA2Ng==", "bodyText": "Please, remove convertTo() invocation.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413026066", "createdAt": "2020-04-22T14:21:30Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDQyNg=="}, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5MjgwOA==", "bodyText": "removed", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413392808", "createdAt": "2020-04-22T23:08:05Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDQyNg=="}, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDMyOTMyOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDozMToxMFrOGJi3Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoxMzo0NlrOGJ4uew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MTUxMQ==", "bodyText": "Why v != null is needed here?\n\n\nUse v == ValueNull.INSTANCE for a null check.\n\n\nIf an optional third argument is specified, it should be used as replacement for null values.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412661511", "createdAt": "2020-04-22T04:31:10Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);\n+            for (Value v : va.getList()) {\n+                if (v != null && !(v instanceof ValueNull)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAxOTc3MQ==", "bodyText": "fixed null check and added 3rd arg replacement", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413019771", "createdAt": "2020-04-22T14:13:46Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);\n+            for (Value v : va.getList()) {\n+                if (v != null && !(v instanceof ValueNull)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MTUxMQ=="}, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDM0Njk3OnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDozODo0NVrOGJjAlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoxNzo0MlrOGJ47Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2Mzk1OQ==", "bodyText": "We prefer pure SQL tests for such functions, see TestScript and .sql files.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412663959", "createdAt": "2020-04-22T04:38:45Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -270,6 +270,14 @@ private void testPgClient() throws SQLException {\n         rs.next();\n         assertEquals(1, rs.getInt(1));\n \n+        rs = stat.executeQuery(\"select array_to_string(array[null, 0, 1, null, 2], ',')\");\n+        rs.next();\n+        assertEquals(\"0,1,2\", rs.getString(1));\n+\n+        rs = stat.executeQuery(\"select array_to_string(array['a', null, '', 'b', null], ',')\");\n+        rs.next();\n+        assertEquals(\"a,,b\", rs.getString(1));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyMzA3NA==", "bodyText": "moved to array-to-string.sql", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413023074", "createdAt": "2020-04-22T14:17:42Z", "author": {"login": "auntyellow"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -270,6 +270,14 @@ private void testPgClient() throws SQLException {\n         rs.next();\n         assertEquals(1, rs.getInt(1));\n \n+        rs = stat.executeQuery(\"select array_to_string(array[null, 0, 1, null, 2], ',')\");\n+        rs.next();\n+        assertEquals(\"0,1,2\", rs.getString(1));\n+\n+        rs = stat.executeQuery(\"select array_to_string(array['a', null, '', 'b', null], ',')\");\n+        rs.next();\n+        assertEquals(\"a,,b\", rs.getString(1));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2Mzk1OQ=="}, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Njc0NjU0OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoyMDozN1rOGJ5ESw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzoxMzoxOFrOGKPn5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyNTM1NQ==", "bodyText": "Third argument may also be NULL. I think there is no reason to bother with its data type, you can use something like that:\nString nullValue = null;\nif (v2 != null) {\n    nullValue = v2.getString();\n}", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413025355", "createdAt": "2020-04-22T14:20:37Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,27 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type < Value.CHAR || v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzM5NDkxOA==", "bodyText": "Fixed.\nIn real PostgreSQL 12, however, 3rd arg can only be NULL or String-like.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413394918", "createdAt": "2020-04-22T23:13:18Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,27 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type < Value.CHAR || v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyNTM1NQ=="}, "originalCommit": {"oid": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTYyMzczOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjoyNToxMlrOGKTsrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwMTo1MDo0M1rOGLC8mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA==", "bodyText": "You need to return ValueNull.INSTANCE if v0 or v1 are equal to ValueNull.INSTANCE before this condition, because this function now processes nulls by itself.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413461678", "createdAt": "2020-04-23T02:25:12Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NjcyMQ==", "bodyText": "Please, also add test cases for NULL values in the first and second arguments to ensure correctness of the new condition.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413466721", "createdAt": "2020-04-23T02:40:41Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4OTc3Mg==", "bodyText": "I adjusted test cases:\n\narray_to_string(null, ?, ?) -> null\narray_to_string(?, null, ?) -> null\narray_to_string(not-array, ?, ?) -> invalid\n\nAlthough PostgreSQL regards array_to_string(null, <string>) as invalid.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414189772", "createdAt": "2020-04-23T23:27:09Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIwOTYyNw==", "bodyText": "You need to add an explicit cast to array data type when you test NULL array in the PostgreSQL, it rejects untyped NULL only.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414209627", "createdAt": "2020-04-24T00:21:15Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIxMzg2MA==", "bodyText": "You mean array_to_string(null::array, ',') should be considered?", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414213860", "createdAt": "2020-04-24T00:33:45Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIyMDMwMQ==", "bodyText": "int array or some other valid array type. In our tests it isn't needed, I meant only how you can test it in the real PostgreSQL correctly.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414220301", "createdAt": "2020-04-24T00:55:38Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDIzNTgwMg==", "bodyText": "select array_to_string(array[1, null, 3], 0, 2);\nselect array_to_string(null, 0, 2);\nselect array_to_string(array[1, null, 3], null, 2);\nselect array_to_string(0, ',');\n\nThese are rejected as function does not exist by PostgreSQL 12.  Seems PG matches function by name and type.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414235802", "createdAt": "2020-04-24T01:50:43Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA=="}, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTYzMTk4OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjoyODozNVrOGKTxLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozOToxNVrOGLAbDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgzMA==", "bodyText": "What do you want from its value type and why this condition may accept random data types? These constants aren't fixed in H2, they may be modified at any time.\nUse\nString nullString = null;\nif (v2 != null) {\n    nullString = v2.getString();\n}\nas it was suggested earlier. Additional checks not worth here.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413462830", "createdAt": "2020-04-23T02:28:35Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NDA2Ng==", "bodyText": "But if you want them for a some reason, use DataType.isCharacterStringType() and preserve special case for NULL.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413464066", "createdAt": "2020-04-23T02:32:22Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgzMA=="}, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2NjUzNw==", "bodyText": "PostgreSQL also doesn't accept other data types in the second argument, but you don't check it, so I don't understand why you want to check the optional third argument.\nFirst argument is very special and special check for it simplifies implementation, others are simple string arguments, from my point of view these additional conditions for them aren't required. H2 is not designed to validate SQL for other databases anyway.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413466537", "createdAt": "2020-04-23T02:40:07Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgzMA=="}, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NDQ0NQ==", "bodyText": "I just forgot to add 2nd arg type check before. Now 3rd arg type check removed, which made code simpler : - )", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r414194445", "createdAt": "2020-04-23T23:39:15Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgzMA=="}, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2161, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}