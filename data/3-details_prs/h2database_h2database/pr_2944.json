{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTY2MTM1", "number": 2944, "title": "Unicode identifiers and literals and fixes for comparison operations and long literals", "bodyText": "Regression with parsing of long binary string literals, binary geometry literals, and binary JSON literals is fixed. Now they may have up to 2^20 bytes as expected. After length limitation Parser was able to read only 2^19 bytes due to hex encoding with 2 chars per byte. Note that long textual geometry literals may still have problems, but H2 by itself exports them in binary form and this form is fixed here.\n\n\nSQL:2003 Unicode character string literals are now supported and H2 now exports string literals with national and special characters in this standard format for better portability of SQL scripts. Previously H2 used non-portable STRINGDECODE() function. This change also fixes regression with parsing of long character string literals with control or non-ASCII characters, their encoded form was larger than 2^20 characters. Parser accepts Unicode literals up to 2^20 characters even when their encoded form is longer.\n\n\nSQL:2003 Unicode identifiers are now supported.\n\n\nVarious comparison operations don't create incorrect index conditions for column with different ordering rules. Closes #2812.", "createdAt": "2020-11-01T06:24:25Z", "url": "https://github.com/h2database/h2database/pull/2944", "merged": true, "mergeCommit": {"oid": "724b11f8c01f114efd2bedd8eae4930ebc1b7168"}, "closed": true, "closedAt": "2020-11-01T09:00:19Z", "author": {"login": "katzyn"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdX8ko4gH2gAyNTEzNTY2MTM1OmI4MGFiNGUyMWM1MGRiMzNkOTc4MmNhY2ZhN2U2MGY4NjM2ZDY0NDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYOkV3gFqTUyMTIxNjc5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b80ab4e21c50db33d9782cacfa7e60f8636d6442", "author": {"user": {"login": "katzyn", "name": "Evgenij Ryazanov"}}, "url": "https://github.com/h2database/h2database/commit/b80ab4e21c50db33d9782cacfa7e60f8636d6442", "committedDate": "2020-10-31T14:51:49Z", "message": "Refactor string literals parsing code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eed9456644a1ee6d772e8e23d8a852671708dedc", "author": {"user": {"login": "katzyn", "name": "Evgenij Ryazanov"}}, "url": "https://github.com/h2database/h2database/commit/eed9456644a1ee6d772e8e23d8a852671708dedc", "committedDate": "2020-11-01T04:00:52Z", "message": "Add standard Unicode character string literals and identifiers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47c328859efee5f7714b51f6b006646c96178b79", "author": {"user": {"login": "katzyn", "name": "Evgenij Ryazanov"}}, "url": "https://github.com/h2database/h2database/commit/47c328859efee5f7714b51f6b006646c96178b79", "committedDate": "2020-11-01T05:50:14Z", "message": "Prevent incorrect index conditions with incompatible ordering rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e6fdc84acc60ded2d035bc790d3c3fb3f9b62e7", "author": {"user": {"login": "katzyn", "name": "Evgenij Ryazanov"}}, "url": "https://github.com/h2database/h2database/commit/4e6fdc84acc60ded2d035bc790d3c3fb3f9b62e7", "committedDate": "2020-11-01T07:21:56Z", "message": "Optimize Parser.readRawString() for common case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjE2NjYx", "url": "https://github.com/h2database/h2database/pull/2944#pullrequestreview-521216661", "createdAt": "2020-11-01T11:47:50Z", "commit": {"oid": "47c328859efee5f7714b51f6b006646c96178b79"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMTo0Nzo1MFrOHrucXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMTo0Nzo1MFrOHrucXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTc0Mg==", "bodyText": "What about if col has type\nROW(VARCHAR, VARCHAR, INT)\nand query has type\nROW(VARCHAR, VARCHAR)\nthen the index would still be usable because the col ordering requirements are strictly a superset of the query ordering requirements\n?", "url": "https://github.com/h2database/h2database/pull/2944#discussion_r515611742", "createdAt": "2020-11-01T11:47:50Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/value/TypeInfo.java", "diffHunk": "@@ -824,6 +824,87 @@ private static boolean areComparable(TypeInfo t1, TypeInfo t2) {\n         return false;\n     }\n \n+    /**\n+     * Determines whether two specified types have the same ordering rules.\n+     *\n+     * @param t1\n+     *            first data type\n+     * @param t2\n+     *            second data type\n+     * @return whether types are comparable\n+     */\n+    public static boolean haveSameOrdering(TypeInfo t1, TypeInfo t2) {\n+        int vt1 = (t1 = t1.unwrapRow()).getValueType(), vt2 = (t2 = t2.unwrapRow()).getValueType();\n+        if (vt1 > vt2) {\n+            int vt = vt1;\n+            vt1 = vt2;\n+            vt2 = vt;\n+            TypeInfo t = t1;\n+            t1 = t2;\n+            t2 = t;\n+        }\n+        if (vt1 <= Value.NULL) {\n+            return true;\n+        }\n+        if (vt1 == vt2) {\n+            switch (vt1) {\n+            case Value.ARRAY:\n+                return haveSameOrdering((TypeInfo) t1.getExtTypeInfo(), (TypeInfo) t2.getExtTypeInfo());\n+            case Value.ROW: {\n+                Set<Entry<String, TypeInfo>> f1 = ((ExtTypeInfoRow) t1.getExtTypeInfo()).getFields();\n+                Set<Entry<String, TypeInfo>> f2 = ((ExtTypeInfoRow) t2.getExtTypeInfo()).getFields();\n+                int degree = f1.size();\n+                if (f2.size() != degree) {\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47c328859efee5f7714b51f6b006646c96178b79"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMjE2Nzkw", "url": "https://github.com/h2database/h2database/pull/2944#pullrequestreview-521216790", "createdAt": "2020-11-01T11:49:46Z", "commit": {"oid": "4e6fdc84acc60ded2d035bc790d3c3fb3f9b62e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMTo0OTo0NlrOHrudEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxMTo0OTo0NlrOHrudEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTYxMTkyMg==", "bodyText": "might possibly be more efficient here to construct the StringBuilder with size\n   result.size() + sqlCommand.size()\n\nto avoid some re-allocations", "url": "https://github.com/h2database/h2database/pull/2944#discussion_r515611922", "createdAt": "2020-11-01T11:49:46Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -6360,15 +6360,23 @@ private void readString(int i, char[] chars, int[] types) {\n     }\n \n     private String readRawString(int i, char[] chars, int[] types) {\n-        StringBuilder result = new StringBuilder();\n+        String result = null;\n+        StringBuilder builder = null;\n         for (;; i++) {\n             boolean next = false;\n             for (;; i++) {\n                 int begin = i;\n                 while (chars[i] != '\\'') {\n                     i++;\n                 }\n-                result.append(sqlCommand, next ? begin - 1 : begin, i);\n+                if (result == null) {\n+                    result = sqlCommand.substring(begin, i);\n+                } else {\n+                    if (builder == null) {\n+                        builder = new StringBuilder(result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e6fdc84acc60ded2d035bc790d3c3fb3f9b62e7"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4262, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}