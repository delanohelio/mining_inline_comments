{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTA0NDI2", "number": 2527, "title": "Feature: allow @ meta commands from Console", "bodyText": "I've moved getMetaResultSet() and split() to JdbcUtils so that it can be easily called from both WebApp and Console. This will allow @ meta commands to be executed from Console too making it useful as pure JDBC CLI. I'm using this for Emacs JDBC connection https://youtu.be/dUbqdY0KU0U . Let me know if this adds value.", "createdAt": "2020-03-28T14:39:00Z", "url": "https://github.com/h2database/h2database/pull/2527", "merged": true, "mergeCommit": {"oid": "cb52d890035f8fcb6dfacea067e2a614816c15e2"}, "closed": true, "closedAt": "2020-03-30T14:23:27Z", "author": {"login": "atamariya"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQXqsNgH2gAyMzk1MTA0NDI2OjhhMjdlYTA3YTcyODMwMTM5YjU2ZjA1ZjhiZDg1YzNmMjg1MWQ3ZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSoijoAH2gAyMzk1MTA0NDI2OmFjZDc5YTZkMWVjMzM1YTMyNDY2ZjE2MTNhN2EzZjk1N2ZmNGYzMDM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8a27ea07a72830139b56f05f8bd85c3f2851d7dc", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/8a27ea07a72830139b56f05f8bd85c3f2851d7dc", "committedDate": "2020-03-23T05:43:19Z", "message": "Use JdbcUtils.load() to load appropriate drivers\n\nDriver specification via -driver is usually redundant as JdbcUtils.load() properly caters to that."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1268632e182c76952cb06a1d7426b54d898c1a1f", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/1268632e182c76952cb06a1d7426b54d898c1a1f", "committedDate": "2020-03-23T09:33:04Z", "message": "Corrected driver name for derby"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f895a43189a41b24bb57f2e1132dd1b7199a3f94", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/f895a43189a41b24bb57f2e1132dd1b7199a3f94", "committedDate": "2020-03-27T10:49:56Z", "message": "Allow @ meta commands in shell"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/f6ecaab208f5bfde45257b3e0947968f4c3a1460", "committedDate": "2020-03-28T14:29:27Z", "message": "Removed duplicate code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzE5NDA4", "url": "https://github.com/h2database/h2database/pull/2527#pullrequestreview-383319408", "createdAt": "2020-03-28T14:53:58Z", "commit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDo1Mzo1OFrOF9J-aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNTowMDoyM1rOF9KBdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDg4OA==", "bodyText": "Why you need it?\nBTW, this file is not used in H2 anywhere and it should not be normally used to build H2 from its sources, it is experimental only.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399670888", "createdAt": "2020-03-28T14:53:58Z", "author": {"login": "katzyn"}, "path": "h2/pom.xml", "diffHunk": "@@ -212,6 +212,13 @@\n     </testResource>\n     </testResources>\n     <plugins>\n+      <plugin>\n+\t<artifactId>maven-compiler-plugin</artifactId>\n+\t<version>3.6.0</version>\n+\t<configuration>\n+\t  <useIncrementalCompilation>false</useIncrementalCompilation>\n+\t</configuration>\n+      </plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTMyMQ==", "bodyText": "This change is wrong. Each web session must use an own profiler as it was before your changes. You need to find some other way to deal with it.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399671321", "createdAt": "2020-03-28T14:57:25Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -83,6 +88,7 @@\n \n     private static boolean allowAllClasses;\n     private static HashSet<String> allowedClassNames;\n+    private static Profiler profiler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTYzMg==", "bodyText": "Do you really need them?", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399671632", "createdAt": "2020-03-28T15:00:03Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,156 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.storesUpperCaseIdentifiers\", Boolean.toString(meta.storesUpperCaseIdentifiers()));\n+            rs.addRow(\"conn.storesLowerCaseIdentifiers\", Boolean.toString(meta.storesLowerCaseIdentifiers()));\n+            rs.addRow(\"conn.storesMixedCaseIdentifiers\", Boolean.toString(meta.storesMixedCaseIdentifiers()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTY2OQ==", "bodyText": "Why this line was commented?", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399671669", "createdAt": "2020-03-28T15:00:23Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,156 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.storesUpperCaseIdentifiers\", Boolean.toString(meta.storesUpperCaseIdentifiers()));\n+            rs.addRow(\"conn.storesLowerCaseIdentifiers\", Boolean.toString(meta.storesLowerCaseIdentifiers()));\n+            rs.addRow(\"conn.storesMixedCaseIdentifiers\", Boolean.toString(meta.storesMixedCaseIdentifiers()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@prof_stop\")) {\n+            if (profiler != null) {\n+                profiler.stopCollecting();\n+                SimpleResultSet rs = new SimpleResultSet();\n+                rs.addColumn(\"Top Stack Trace(s)\", Types.VARCHAR, 0, 0);\n+                rs.addRow(profiler.getTop(3));\n+                profiler = null;\n+                return rs;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void addDatabaseMetaData(SimpleResultSet rs,\n+            DatabaseMetaData meta) {\n+        Method[] methods = DatabaseMetaData.class.getDeclaredMethods();\n+        //Arrays.sort(methods, Comparator.comparing(Method::toString));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e4885c04001cee7b637054d16b6c3e54d510db1", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/0e4885c04001cee7b637054d16b6c3e54d510db1", "committedDate": "2020-03-29T02:56:18Z", "message": "Movded Profiler to method param"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32708a6c3397d3f61265f3a788a5376a1c29bb0a", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/32708a6c3397d3f61265f3a788a5376a1c29bb0a", "committedDate": "2020-03-29T03:19:05Z", "message": "Uncommented sort"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzcyMDcw", "url": "https://github.com/h2database/h2database/pull/2527#pullrequestreview-383372070", "createdAt": "2020-03-29T04:28:31Z", "commit": {"oid": "32708a6c3397d3f61265f3a788a5376a1c29bb0a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwNDoyODozMlrOF9Oazg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwNDoyODozMlrOF9Oazg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0MzY5NA==", "bodyText": "Old implementation also sets WebApp.profiler to null.\nI think you can move the whole condition for @prof_stop from this method into WebApp.getResult(), because there is no need in @prof_stop without @prof_start.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399743694", "createdAt": "2020-03-29T04:28:32Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +605,152 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql, Profiler profiler)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@prof_stop\")) {\n+            if (profiler != null) {\n+                profiler.stopCollecting();\n+                SimpleResultSet rs = new SimpleResultSet();\n+                rs.addColumn(\"Top Stack Trace(s)\", Types.VARCHAR, 0, 0);\n+                rs.addRow(profiler.getTop(3));\n+                return rs;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32708a6c3397d3f61265f3a788a5376a1c29bb0a"}, "originalPosition": 135}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a13033d5e74f97e842e5659380d492131db8784", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/7a13033d5e74f97e842e5659380d492131db8784", "committedDate": "2020-03-29T04:55:27Z", "message": "Moved @prof_stop to WebApp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59ede052e532a4e6f011ae807a3fbc8374ceb1ce", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/59ede052e532a4e6f011ae807a3fbc8374ceb1ce", "committedDate": "2020-03-29T12:20:27Z", "message": "Fix compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee212e3d432b617a45d9ca769d7d009abe964e04", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/ee212e3d432b617a45d9ca769d7d009abe964e04", "committedDate": "2020-03-29T12:40:42Z", "message": "Fix compilation error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db7727d7602ca70aa824fc64ab248d6495c12b30", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/db7727d7602ca70aa824fc64ab248d6495c12b30", "committedDate": "2020-03-29T14:15:03Z", "message": "Fix compilation error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTMzMzkx", "url": "https://github.com/h2database/h2database/pull/2527#pullrequestreview-383533391", "createdAt": "2020-03-30T05:08:17Z", "commit": {"oid": "db7727d7602ca70aa824fc64ab248d6495c12b30"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTowODoxN1rOF9ZyLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTowODoxN1rOF9ZyLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyOTkwMA==", "bodyText": "Now you have two copies of this method, one of them needs to be removed.\nIt would be better to place this method in StringUtils class instead with some generic name, such as startsWithIgnoreCase(String string, String prefix).\nPlease also send a license statement as described here\nhttps://h2database.com/html/build.html#providing_patches\nto our mailing list:\nhttps://groups.google.com/forum/#!forum/h2-database", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399929900", "createdAt": "2020-03-30T05:08:17Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,144 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        }\n+        return null;\n+    }\n+\n+    private static void addDatabaseMetaData(SimpleResultSet rs,\n+            DatabaseMetaData meta) {\n+        Method[] methods = DatabaseMetaData.class.getDeclaredMethods();\n+        Arrays.sort(methods, Comparator.comparing(Method::toString));\n+        for (Method m : methods) {\n+            if (m.getParameterTypes().length == 0) {\n+                try {\n+                    Object o = m.invoke(meta);\n+                    rs.addRow(\"meta.\" + m.getName(), String.valueOf(o));\n+                } catch (InvocationTargetException e) {\n+                    rs.addRow(\"meta.\" + m.getName(), e.getTargetException().toString());\n+                } catch (Exception e) {\n+                    rs.addRow(\"meta.\" + m.getName(), e.toString());\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean isBuiltIn(String sql, String builtIn) {\n+        return sql.regionMatches(true, 0, builtIn, 0, builtIn.length());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db7727d7602ca70aa824fc64ab248d6495c12b30"}, "originalPosition": 160}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd79a6d1ec335a32466f1613a7a3f957ff4f303", "author": {"user": {"login": "atamariya", "name": null}}, "url": "https://github.com/h2database/h2database/commit/acd79a6d1ec335a32466f1613a7a3f957ff4f303", "committedDate": "2020-03-30T06:30:40Z", "message": "Removed redundant isBuiltin from WebApp"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3849, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}