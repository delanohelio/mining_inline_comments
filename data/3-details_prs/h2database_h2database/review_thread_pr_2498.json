{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjIyMzIy", "number": 2498, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDozOTo1NFrODmU1Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyMDowNVrODmrKrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTEzNzg2OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDozOTo1NFrOFzraBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjozNjozMVrOF0M7gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ==", "bodyText": "This code should be used only in PostgreSQL compatibility mode.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389732871", "createdAt": "2020-03-09T14:39:54Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7697,6 +7697,9 @@ private void readIfEqualOrTo() {\n     }\n \n     private Prepared parseSet() {\n+        if (readIf(\"SESSION\") || readIf(\"LOCAL\")) {\n+            // for PostgreSQL compatibility\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0NTgyOA==", "bodyText": "And even in the PostgreSQL compatibility mode this code should not break SET SESSION CHARACTERISTICS \u2026, this command is a part of the SQL Standard and it is supported by PostgreSQL too.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389745828", "createdAt": "2020-03-09T14:58:12Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7697,6 +7697,9 @@ private void readIfEqualOrTo() {\n     }\n \n     private Prepared parseSet() {\n+        if (readIf(\"SESSION\") || readIf(\"LOCAL\")) {\n+            // for PostgreSQL compatibility\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ=="}, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MjExMw==", "bodyText": "removed from this PR", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390282113", "createdAt": "2020-03-10T12:36:31Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7697,6 +7697,9 @@ private void readIfEqualOrTo() {\n     }\n \n     private Prepared parseSet() {\n+        if (readIf(\"SESSION\") || readIf(\"LOCAL\")) {\n+            // for PostgreSQL compatibility\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ=="}, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTE0MDg4OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0MDozMlrOFzrb4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0MDozMlrOFzrb4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMzM0NQ==", "bodyText": "This code too, we already have too many non-standard stuff that is incorrectly accepted in all compatibility modes.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389733345", "createdAt": "2020-03-09T14:40:32Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7883,6 +7886,11 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             read();\n             return new NoOperation(session);\n+        } else if (readIf(\"JOIN_COLLAPSE_LIMIT\")) {\n+            // for PostgreSQL compatibility\n+            readIfEqualOrTo();\n+            read();\n+            return new NoOperation(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTE1ODA0OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0NDoyMFrOFzrmTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0NDoyMFrOFzrmTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjAxMg==", "bodyText": "Don't use Value.getObject() in functions, objects returned by it aren't required to return something useful from their toString() methods.\nFor this specific function getString() is a more reasonable method.\nThis function also needs some tests.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389736012", "createdAt": "2020-03-09T14:44:20Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -235,6 +247,13 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n+            for (Value v : ((ValueArray) v0).getList()) {\n+                joiner.add(String.valueOf(v.getObject()));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTE3ODUzOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/Regclass.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0OTowNFrOFzrzBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTo0OTo0MlrOF0Hy9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA==", "bodyText": "This expression has declared type INTEGER and may return only ValueNull.INSTANCE and instances of ValueInteger.\nYou can use convertToInt(null), but most likely the 32-bit unsigned values need special handling here to avoid NUMERIC_VALUE_OUT_OF_RANGE_2 error.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389739270", "createdAt": "2020-03-09T14:49:04Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/Regclass.java", "diffHunk": "@@ -39,6 +39,10 @@ public Value getValue(Session session) {\n         if (value == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n+        int valueType = value.getValueType();\n+        if (valueType >= Value.TINYINT && valueType <= Value.BIGINT) {\n+            return value;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MDUxNw==", "bodyText": "Can we just truncate to lower-32-bit INTEGER for BIGINT?\n        if (valueType >= Value.TINYINT && valueType <= Value.INTEGER) {\n            return value.convertToInt(null);\n        }\n        if (valueType == Value.BIGINT) {\n            return ValueInteger.get((int) value.getLong());\n        }", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390190517", "createdAt": "2020-03-10T09:36:36Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/Regclass.java", "diffHunk": "@@ -39,6 +39,10 @@ public Value getValue(Session session) {\n         if (value == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n+        int valueType = value.getValueType();\n+        if (valueType >= Value.TINYINT && valueType <= Value.BIGINT) {\n+            return value;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA=="}, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5ODAwNA==", "bodyText": "I think we can.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390198004", "createdAt": "2020-03-10T09:49:42Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/Regclass.java", "diffHunk": "@@ -39,6 +39,10 @@ public Value getValue(Session session) {\n         if (value == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n+        int valueType = value.getValueType();\n+        if (valueType >= Value.TINYINT && valueType <= Value.BIGINT) {\n+            return value;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA=="}, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTIwNzcwOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NTo0NFrOFzsFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMjozOToxNlrOF0NA1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0Mzk2NQ==", "bodyText": "You need to convert the type to Value.ARRAY first with v0.convertTo(TypeInfo.TYPE_ARRAY) or something like it.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389743965", "createdAt": "2020-03-09T14:55:44Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -235,6 +247,13 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n+            for (Value v : ((ValueArray) v0).getList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDI4MzQ3Nw==", "bodyText": "array_to_string is removed from this PR", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390283477", "createdAt": "2020-03-10T12:39:16Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -235,6 +247,13 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n+            for (Value v : ((ValueArray) v0).getList()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0Mzk2NQ=="}, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxODc5NzI0OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyMDowNVrOF0OZZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNDo1MjozNFrOF0SgHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNjE1MQ==", "bodyText": "::regclass and ::oid are different things in PostgreSQL and this additional condition doesn't look like a proper implementation.\nH2 has an incorrect mapping for OID data type to a BLOB in DataType class. I think this mapping should be removed from it (and from help.csv), and a new mapping to INTEGER should be created in the Mode class.\ndt = DataType.getDataType(Value.INTEGER);\nmode.typeByNameMap.put(\"OID\", dt);\nWith such change ::oid will be processed just like any other type cast. Currently this cast is broken, because it tries to cast a numeric value to a BLOB.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390306151", "createdAt": "2020-03-10T13:20:05Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -4721,7 +4721,7 @@ private Expression readTerm() {\n                     read(\"PG_CATALOG\");\n                     read(DOT);\n                 }\n-                if (readIf(\"REGCLASS\")) {\n+                if (readIf(\"REGCLASS\") || readIf(\"OID\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDM3MzQwNw==", "bodyText": "This really works :-)", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390373407", "createdAt": "2020-03-10T14:52:34Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -4721,7 +4721,7 @@ private Expression readTerm() {\n                     read(\"PG_CATALOG\");\n                     read(DOT);\n                 }\n-                if (readIf(\"REGCLASS\")) {\n+                if (readIf(\"REGCLASS\") || readIf(\"OID\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNjE1MQ=="}, "originalCommit": {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2142, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}