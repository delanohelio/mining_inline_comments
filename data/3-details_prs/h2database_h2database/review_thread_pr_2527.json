{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTA0NDI2", "number": 2527, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDo1Mzo1OFrODsUpGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTowODoxN1rODsgy4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODAyMTM2OnYy", "diffSide": "RIGHT", "path": "h2/pom.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDo1Mzo1OFrOF9J-aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQxNDo1MTowNVrOF9SXUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDg4OA==", "bodyText": "Why you need it?\nBTW, this file is not used in H2 anywhere and it should not be normally used to build H2 from its sources, it is experimental only.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399670888", "createdAt": "2020-03-28T14:53:58Z", "author": {"login": "katzyn"}, "path": "h2/pom.xml", "diffHunk": "@@ -212,6 +212,13 @@\n     </testResource>\n     </testResources>\n     <plugins>\n+      <plugin>\n+\t<artifactId>maven-compiler-plugin</artifactId>\n+\t<version>3.6.0</version>\n+\t<configuration>\n+\t  <useIncrementalCompilation>false</useIncrementalCompilation>\n+\t</configuration>\n+      </plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNTMxNg==", "bodyText": "It's a maven java compiler setting for incremental compilation.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399735316", "createdAt": "2020-03-29T02:33:08Z", "author": {"login": "atamariya"}, "path": "h2/pom.xml", "diffHunk": "@@ -212,6 +212,13 @@\n     </testResource>\n     </testResources>\n     <plugins>\n+      <plugin>\n+\t<artifactId>maven-compiler-plugin</artifactId>\n+\t<version>3.6.0</version>\n+\t<configuration>\n+\t  <useIncrementalCompilation>false</useIncrementalCompilation>\n+\t</configuration>\n+      </plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDg4OA=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0Mzc3Mw==", "bodyText": "And why you need this setting?", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399743773", "createdAt": "2020-03-29T04:29:29Z", "author": {"login": "katzyn"}, "path": "h2/pom.xml", "diffHunk": "@@ -212,6 +212,13 @@\n     </testResource>\n     </testResources>\n     <plugins>\n+      <plugin>\n+\t<artifactId>maven-compiler-plugin</artifactId>\n+\t<version>3.6.0</version>\n+\t<configuration>\n+\t  <useIncrementalCompilation>false</useIncrementalCompilation>\n+\t</configuration>\n+      </plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDg4OA=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4NjgwMw==", "bodyText": "This speeds up the build and hence development cycle. Thought it would be nice to have.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399786803", "createdAt": "2020-03-29T11:53:48Z", "author": {"login": "atamariya"}, "path": "h2/pom.xml", "diffHunk": "@@ -212,6 +212,13 @@\n     </testResource>\n     </testResources>\n     <plugins>\n+      <plugin>\n+\t<artifactId>maven-compiler-plugin</artifactId>\n+\t<version>3.6.0</version>\n+\t<configuration>\n+\t  <useIncrementalCompilation>false</useIncrementalCompilation>\n+\t</configuration>\n+      </plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDg4OA=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc4Nzk2NQ==", "bodyText": "Once again, this file is not used and should not be used to build H2 from its sources, it can't do this work properly. It is an unfinished experiment.\nNormal building procedure is described here:\nhttps://h2database.com/html/build.html#building\nDuring development process you can simply use your IDE, there is no need to build jar after each change.\nYour code doesn't compile, BTW. Take a look on Travis CI logs:\nhttps://travis-ci.org/github/h2database/h2database/builds/668272621", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399787965", "createdAt": "2020-03-29T12:03:39Z", "author": {"login": "katzyn"}, "path": "h2/pom.xml", "diffHunk": "@@ -212,6 +212,13 @@\n     </testResource>\n     </testResources>\n     <plugins>\n+      <plugin>\n+\t<artifactId>maven-compiler-plugin</artifactId>\n+\t<version>3.6.0</version>\n+\t<configuration>\n+\t  <useIncrementalCompilation>false</useIncrementalCompilation>\n+\t</configuration>\n+      </plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDg4OA=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTgwODMzOA==", "bodyText": "Removed this section. Tests are passing now.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399808338", "createdAt": "2020-03-29T14:51:05Z", "author": {"login": "atamariya"}, "path": "h2/pom.xml", "diffHunk": "@@ -212,6 +212,13 @@\n     </testResource>\n     </testResources>\n     <plugins>\n+      <plugin>\n+\t<artifactId>maven-compiler-plugin</artifactId>\n+\t<version>3.6.0</version>\n+\t<configuration>\n+\t  <useIncrementalCompilation>false</useIncrementalCompilation>\n+\t</configuration>\n+      </plugin>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MDg4OA=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODAyNDkxOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/util/JdbcUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNDo1NzoyNVrOF9KAGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwNDoxNjoyNFrOF9OXXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTMyMQ==", "bodyText": "This change is wrong. Each web session must use an own profiler as it was before your changes. You need to find some other way to deal with it.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399671321", "createdAt": "2020-03-28T14:57:25Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -83,6 +88,7 @@\n \n     private static boolean allowAllClasses;\n     private static HashSet<String> allowedClassNames;\n+    private static Profiler profiler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNjY0Mw==", "bodyText": "Can I add this to method param?", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399736643", "createdAt": "2020-03-29T02:52:29Z", "author": {"login": "atamariya"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -83,6 +88,7 @@\n \n     private static boolean allowAllClasses;\n     private static HashSet<String> allowedClassNames;\n+    private static Profiler profiler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTMyMQ=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzA0Mw==", "bodyText": "That sounds reasonable.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399737043", "createdAt": "2020-03-29T02:57:53Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -83,6 +88,7 @@\n \n     private static boolean allowAllClasses;\n     private static HashSet<String> allowedClassNames;\n+    private static Profiler profiler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTMyMQ=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzQzMw==", "bodyText": "But most likely you need a some reference to its owner, because this field is modified in the methods.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399737433", "createdAt": "2020-03-29T03:03:29Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -83,6 +88,7 @@\n \n     private static boolean allowAllClasses;\n     private static HashSet<String> allowedClassNames;\n+    private static Profiler profiler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTMyMQ=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0MjgxMw==", "bodyText": "Changed in new commit.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399742813", "createdAt": "2020-03-29T04:16:24Z", "author": {"login": "atamariya"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -83,6 +88,7 @@\n \n     private static boolean allowAllClasses;\n     private static HashSet<String> allowedClassNames;\n+    private static Profiler profiler;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTMyMQ=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODAyNzQyOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/util/JdbcUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNTowMDowM1rOF9KBUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMjozMzo1NFrOF9N6Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTYzMg==", "bodyText": "Do you really need them?", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399671632", "createdAt": "2020-03-28T15:00:03Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,156 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.storesUpperCaseIdentifiers\", Boolean.toString(meta.storesUpperCaseIdentifiers()));\n+            rs.addRow(\"conn.storesLowerCaseIdentifiers\", Boolean.toString(meta.storesLowerCaseIdentifiers()));\n+            rs.addRow(\"conn.storesMixedCaseIdentifiers\", Boolean.toString(meta.storesMixedCaseIdentifiers()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNTM5MA==", "bodyText": "Useful from API completeness perspective.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399735390", "createdAt": "2020-03-29T02:33:54Z", "author": {"login": "atamariya"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,156 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.storesUpperCaseIdentifiers\", Boolean.toString(meta.storesUpperCaseIdentifiers()));\n+            rs.addRow(\"conn.storesLowerCaseIdentifiers\", Boolean.toString(meta.storesLowerCaseIdentifiers()));\n+            rs.addRow(\"conn.storesMixedCaseIdentifiers\", Boolean.toString(meta.storesMixedCaseIdentifiers()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTYzMg=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODAyNzczOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/util/JdbcUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNTowMDoyM1rOF9KBdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMzoxMzo0MVrOF9OFAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTY2OQ==", "bodyText": "Why this line was commented?", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399671669", "createdAt": "2020-03-28T15:00:23Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,156 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.storesUpperCaseIdentifiers\", Boolean.toString(meta.storesUpperCaseIdentifiers()));\n+            rs.addRow(\"conn.storesLowerCaseIdentifiers\", Boolean.toString(meta.storesLowerCaseIdentifiers()));\n+            rs.addRow(\"conn.storesMixedCaseIdentifiers\", Boolean.toString(meta.storesMixedCaseIdentifiers()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@prof_stop\")) {\n+            if (profiler != null) {\n+                profiler.stopCollecting();\n+                SimpleResultSet rs = new SimpleResultSet();\n+                rs.addColumn(\"Top Stack Trace(s)\", Types.VARCHAR, 0, 0);\n+                rs.addRow(profiler.getTop(3));\n+                profiler = null;\n+                return rs;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void addDatabaseMetaData(SimpleResultSet rs,\n+            DatabaseMetaData meta) {\n+        Method[] methods = DatabaseMetaData.class.getDeclaredMethods();\n+        //Arrays.sort(methods, Comparator.comparing(Method::toString));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNTg0MQ==", "bodyText": "This makes console more useful as it maintains backward compatibility. The only cost here is - we will miss out on sorted result.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399735841", "createdAt": "2020-03-29T02:40:05Z", "author": {"login": "atamariya"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,156 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.storesUpperCaseIdentifiers\", Boolean.toString(meta.storesUpperCaseIdentifiers()));\n+            rs.addRow(\"conn.storesLowerCaseIdentifiers\", Boolean.toString(meta.storesLowerCaseIdentifiers()));\n+            rs.addRow(\"conn.storesMixedCaseIdentifiers\", Boolean.toString(meta.storesMixedCaseIdentifiers()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@prof_stop\")) {\n+            if (profiler != null) {\n+                profiler.stopCollecting();\n+                SimpleResultSet rs = new SimpleResultSet();\n+                rs.addColumn(\"Top Stack Trace(s)\", Types.VARCHAR, 0, 0);\n+                rs.addRow(profiler.getTop(3));\n+                profiler = null;\n+                return rs;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void addDatabaseMetaData(SimpleResultSet rs,\n+            DatabaseMetaData meta) {\n+        Method[] methods = DatabaseMetaData.class.getDeclaredMethods();\n+        //Arrays.sort(methods, Comparator.comparing(Method::toString));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTY2OQ=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzIxMg==", "bodyText": "Backward compatibility with what?", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399737212", "createdAt": "2020-03-29T02:59:51Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,156 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.storesUpperCaseIdentifiers\", Boolean.toString(meta.storesUpperCaseIdentifiers()));\n+            rs.addRow(\"conn.storesLowerCaseIdentifiers\", Boolean.toString(meta.storesLowerCaseIdentifiers()));\n+            rs.addRow(\"conn.storesMixedCaseIdentifiers\", Boolean.toString(meta.storesMixedCaseIdentifiers()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@prof_stop\")) {\n+            if (profiler != null) {\n+                profiler.stopCollecting();\n+                SimpleResultSet rs = new SimpleResultSet();\n+                rs.addColumn(\"Top Stack Trace(s)\", Types.VARCHAR, 0, 0);\n+                rs.addRow(profiler.getTop(3));\n+                profiler = null;\n+                return rs;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void addDatabaseMetaData(SimpleResultSet rs,\n+            DatabaseMetaData meta) {\n+        Method[] methods = DatabaseMetaData.class.getDeclaredMethods();\n+        //Arrays.sort(methods, Comparator.comparing(Method::toString));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTY2OQ=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNzc2NQ==", "bodyText": "Older JDKs.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399737765", "createdAt": "2020-03-29T03:08:31Z", "author": {"login": "atamariya"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,156 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.storesUpperCaseIdentifiers\", Boolean.toString(meta.storesUpperCaseIdentifiers()));\n+            rs.addRow(\"conn.storesLowerCaseIdentifiers\", Boolean.toString(meta.storesLowerCaseIdentifiers()));\n+            rs.addRow(\"conn.storesMixedCaseIdentifiers\", Boolean.toString(meta.storesMixedCaseIdentifiers()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@prof_stop\")) {\n+            if (profiler != null) {\n+                profiler.stopCollecting();\n+                SimpleResultSet rs = new SimpleResultSet();\n+                rs.addColumn(\"Top Stack Trace(s)\", Types.VARCHAR, 0, 0);\n+                rs.addRow(profiler.getTop(3));\n+                profiler = null;\n+                return rs;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void addDatabaseMetaData(SimpleResultSet rs,\n+            DatabaseMetaData meta) {\n+        Method[] methods = DatabaseMetaData.class.getDeclaredMethods();\n+        //Arrays.sort(methods, Comparator.comparing(Method::toString));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTY2OQ=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczODExMw==", "bodyText": "Current H2 requires Java 8+.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399738113", "createdAt": "2020-03-29T03:13:41Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,156 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.storesUpperCaseIdentifiers\", Boolean.toString(meta.storesUpperCaseIdentifiers()));\n+            rs.addRow(\"conn.storesLowerCaseIdentifiers\", Boolean.toString(meta.storesLowerCaseIdentifiers()));\n+            rs.addRow(\"conn.storesMixedCaseIdentifiers\", Boolean.toString(meta.storesMixedCaseIdentifiers()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@prof_stop\")) {\n+            if (profiler != null) {\n+                profiler.stopCollecting();\n+                SimpleResultSet rs = new SimpleResultSet();\n+                rs.addColumn(\"Top Stack Trace(s)\", Types.VARCHAR, 0, 0);\n+                rs.addRow(profiler.getTop(3));\n+                profiler = null;\n+                return rs;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static void addDatabaseMetaData(SimpleResultSet rs,\n+            DatabaseMetaData meta) {\n+        Method[] methods = DatabaseMetaData.class.getDeclaredMethods();\n+        //Arrays.sort(methods, Comparator.comparing(Method::toString));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY3MTY2OQ=="}, "originalCommit": {"oid": "f6ecaab208f5bfde45257b3e0947968f4c3a1460"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODYxMjYzOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/util/JdbcUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwNDoyODozMlrOF9Oazg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwNDo1Njo1OFrOF9OiIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0MzY5NA==", "bodyText": "Old implementation also sets WebApp.profiler to null.\nI think you can move the whole condition for @prof_stop from this method into WebApp.getResult(), because there is no need in @prof_stop without @prof_start.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399743694", "createdAt": "2020-03-29T04:28:32Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +605,152 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql, Profiler profiler)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@prof_stop\")) {\n+            if (profiler != null) {\n+                profiler.stopCollecting();\n+                SimpleResultSet rs = new SimpleResultSet();\n+                rs.addColumn(\"Top Stack Trace(s)\", Types.VARCHAR, 0, 0);\n+                rs.addRow(profiler.getTop(3));\n+                return rs;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32708a6c3397d3f61265f3a788a5376a1c29bb0a"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0NTU3MQ==", "bodyText": "Sounds right. Done.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399745571", "createdAt": "2020-03-29T04:56:58Z", "author": {"login": "atamariya"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +605,152 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql, Profiler profiler)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@prof_stop\")) {\n+            if (profiler != null) {\n+                profiler.stopCollecting();\n+                SimpleResultSet rs = new SimpleResultSet();\n+                rs.addColumn(\"Top Stack Trace(s)\", Types.VARCHAR, 0, 0);\n+                rs.addRow(profiler.getTop(3));\n+                return rs;\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTc0MzY5NA=="}, "originalCommit": {"oid": "32708a6c3397d3f61265f3a788a5376a1c29bb0a"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDAxMjQ4OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/util/JdbcUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNTowODoxN1rOF9ZyLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNjozMjo0MlrOF9bSvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyOTkwMA==", "bodyText": "Now you have two copies of this method, one of them needs to be removed.\nIt would be better to place this method in StringUtils class instead with some generic name, such as startsWithIgnoreCase(String string, String prefix).\nPlease also send a license statement as described here\nhttps://h2database.com/html/build.html#providing_patches\nto our mailing list:\nhttps://groups.google.com/forum/#!forum/h2-database", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399929900", "createdAt": "2020-03-30T05:08:17Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,144 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        }\n+        return null;\n+    }\n+\n+    private static void addDatabaseMetaData(SimpleResultSet rs,\n+            DatabaseMetaData meta) {\n+        Method[] methods = DatabaseMetaData.class.getDeclaredMethods();\n+        Arrays.sort(methods, Comparator.comparing(Method::toString));\n+        for (Method m : methods) {\n+            if (m.getParameterTypes().length == 0) {\n+                try {\n+                    Object o = m.invoke(meta);\n+                    rs.addRow(\"meta.\" + m.getName(), String.valueOf(o));\n+                } catch (InvocationTargetException e) {\n+                    rs.addRow(\"meta.\" + m.getName(), e.getTargetException().toString());\n+                } catch (Exception e) {\n+                    rs.addRow(\"meta.\" + m.getName(), e.toString());\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean isBuiltIn(String sql, String builtIn) {\n+        return sql.regionMatches(true, 0, builtIn, 0, builtIn.length());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db7727d7602ca70aa824fc64ab248d6495c12b30"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk1NDYyMw==", "bodyText": "Since this is not a generic method, let's maintain it as is in JdbcUtils.\nI've sent out the license agreement to the mailing list.", "url": "https://github.com/h2database/h2database/pull/2527#discussion_r399954623", "createdAt": "2020-03-30T06:32:42Z", "author": {"login": "atamariya"}, "path": "h2/src/main/org/h2/util/JdbcUtils.java", "diffHunk": "@@ -600,4 +606,144 @@ private static void setLob(PreparedStatement prep, int parameterIndex, ValueLob\n         }\n     }\n \n+    public static ResultSet getMetaResultSet(Connection conn, String sql)\n+            throws SQLException {\n+        DatabaseMetaData meta = conn.getMetaData();\n+        if (isBuiltIn(sql, \"@best_row_identifier\")) {\n+            String[] p = split(sql);\n+            int scale = p[4] == null ? 0 : Integer.parseInt(p[4]);\n+            boolean nullable = Boolean.parseBoolean(p[5]);\n+            return meta.getBestRowIdentifier(p[1], p[2], p[3], scale, nullable);\n+        } else if (isBuiltIn(sql, \"@catalogs\")) {\n+            return meta.getCatalogs();\n+        } else if (isBuiltIn(sql, \"@columns\")) {\n+            String[] p = split(sql);\n+            return meta.getColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@column_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getColumnPrivileges(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@cross_references\")) {\n+            String[] p = split(sql);\n+            return meta.getCrossReference(p[1], p[2], p[3], p[4], p[5], p[6]);\n+        } else if (isBuiltIn(sql, \"@exported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getExportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@imported_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getImportedKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@index_info\")) {\n+            String[] p = split(sql);\n+            boolean unique = Boolean.parseBoolean(p[4]);\n+            boolean approx = Boolean.parseBoolean(p[5]);\n+            return meta.getIndexInfo(p[1], p[2], p[3], unique, approx);\n+        } else if (isBuiltIn(sql, \"@primary_keys\")) {\n+            String[] p = split(sql);\n+            return meta.getPrimaryKeys(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedures\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedures(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@procedure_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getProcedureColumns(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@schemas\")) {\n+            return meta.getSchemas();\n+        } else if (isBuiltIn(sql, \"@tables\")) {\n+            String[] p = split(sql);\n+            String[] types = p[4] == null ? null : StringUtils.arraySplit(p[4], ',', false);\n+            return meta.getTables(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@table_privileges\")) {\n+            String[] p = split(sql);\n+            return meta.getTablePrivileges(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@table_types\")) {\n+            return meta.getTableTypes();\n+        } else if (isBuiltIn(sql, \"@type_info\")) {\n+            return meta.getTypeInfo();\n+        } else if (isBuiltIn(sql, \"@udts\")) {\n+            String[] p = split(sql);\n+            int[] types;\n+            if (p[4] == null) {\n+                types = null;\n+            } else {\n+                String[] t = StringUtils.arraySplit(p[4], ',', false);\n+                types = new int[t.length];\n+                for (int i = 0; i < t.length; i++) {\n+                    types[i] = Integer.parseInt(t[i]);\n+                }\n+            }\n+            return meta.getUDTs(p[1], p[2], p[3], types);\n+        } else if (isBuiltIn(sql, \"@version_columns\")) {\n+            String[] p = split(sql);\n+            return meta.getVersionColumns(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@memory\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"Type\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"KB\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"Used Memory\", Integer.toString(Utils.getMemoryUsed()));\n+            rs.addRow(\"Free Memory\", Integer.toString(Utils.getMemoryFree()));\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@info\")) {\n+            SimpleResultSet rs = new SimpleResultSet();\n+            rs.addColumn(\"KEY\", Types.VARCHAR, 0, 0);\n+            rs.addColumn(\"VALUE\", Types.VARCHAR, 0, 0);\n+            rs.addRow(\"conn.getCatalog\", conn.getCatalog());\n+            rs.addRow(\"conn.getAutoCommit\", Boolean.toString(conn.getAutoCommit()));\n+            rs.addRow(\"conn.getTransactionIsolation\", Integer.toString(conn.getTransactionIsolation()));\n+            rs.addRow(\"conn.getWarnings\", String.valueOf(conn.getWarnings()));\n+            String map;\n+            try {\n+                map = String.valueOf(conn.getTypeMap());\n+            } catch (SQLException e) {\n+                map = e.toString();\n+            }\n+            rs.addRow(\"conn.getTypeMap\", map);\n+            rs.addRow(\"conn.isReadOnly\", Boolean.toString(conn.isReadOnly()));\n+            rs.addRow(\"conn.getHoldability\", Integer.toString(conn.getHoldability()));\n+            addDatabaseMetaData(rs, meta);\n+            return rs;\n+        } else if (isBuiltIn(sql, \"@attributes\")) {\n+            String[] p = split(sql);\n+            return meta.getAttributes(p[1], p[2], p[3], p[4]);\n+        } else if (isBuiltIn(sql, \"@super_tables\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTables(p[1], p[2], p[3]);\n+        } else if (isBuiltIn(sql, \"@super_types\")) {\n+            String[] p = split(sql);\n+            return meta.getSuperTypes(p[1], p[2], p[3]);\n+        }\n+        return null;\n+    }\n+\n+    private static void addDatabaseMetaData(SimpleResultSet rs,\n+            DatabaseMetaData meta) {\n+        Method[] methods = DatabaseMetaData.class.getDeclaredMethods();\n+        Arrays.sort(methods, Comparator.comparing(Method::toString));\n+        for (Method m : methods) {\n+            if (m.getParameterTypes().length == 0) {\n+                try {\n+                    Object o = m.invoke(meta);\n+                    rs.addRow(\"meta.\" + m.getName(), String.valueOf(o));\n+                } catch (InvocationTargetException e) {\n+                    rs.addRow(\"meta.\" + m.getName(), e.getTargetException().toString());\n+                } catch (Exception e) {\n+                    rs.addRow(\"meta.\" + m.getName(), e.toString());\n+                }\n+            }\n+        }\n+    }\n+\n+    private static boolean isBuiltIn(String sql, String builtIn) {\n+        return sql.regionMatches(true, 0, builtIn, 0, builtIn.length());\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTkyOTkwMA=="}, "originalCommit": {"oid": "db7727d7602ca70aa824fc64ab248d6495c12b30"}, "originalPosition": 160}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2147, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}