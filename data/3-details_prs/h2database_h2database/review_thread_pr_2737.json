{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MjQ3Mzc1", "number": 2737, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0MDoyMFrOEL-sDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0MDoyMFrOEL-sDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwOTk2ODc2OnYy", "diffSide": "LEFT", "path": "h2/src/test/org/h2/test/jdbc/TestPreparedStatement.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwODo0MDoyMFrOGt0siA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QwOTozNzozMVrOGt2yjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjQ3Mg==", "bodyText": "I think you broke a valid use-case of scope_identity(), which this test was checking .e.g see\nhttps://stackoverflow.com/a/1920640/6591", "url": "https://github.com/h2database/h2database/pull/2737#discussion_r450702472", "createdAt": "2020-07-07T08:40:20Z", "author": {"login": "grandinj"}, "path": "h2/src/test/org/h2/test/jdbc/TestPreparedStatement.java", "diffHunk": "@@ -564,49 +562,6 @@ private void testUUIDAsJavaObject(Connection conn) throws SQLException {\n         stat.execute(\"drop table test_uuid\");\n     }\n \n-    /**\n-     * A trigger that creates a sequence value.\n-     */\n-    public static class SequenceTrigger implements Trigger {\n-\n-        @Override\n-        public void fire(Connection conn, Object[] oldRow, Object[] newRow)\n-                throws SQLException {\n-            conn.setAutoCommit(false);\n-            conn.createStatement().execute(\"call next value for seq\");\n-        }\n-\n-        @Override\n-        public void init(Connection conn, String schemaName,\n-                String triggerName, String tableName, boolean before, int type) {\n-            // ignore\n-        }\n-\n-    }\n-\n-    private void testScopedGeneratedKey(Connection conn) throws SQLException {\n-        Statement stat = conn.createStatement();\n-        stat.execute(\"create table test(id identity)\");\n-        stat.execute(\"create sequence seq start with 1000\");\n-        stat.execute(\"create trigger test_ins after insert on test call \\\"\" +\n-                SequenceTrigger.class.getName() + \"\\\"\");\n-        stat.execute(\"insert into test values(null)\", Statement.RETURN_GENERATED_KEYS);\n-        ResultSet rs = stat.getGeneratedKeys();\n-        rs.next();\n-        // Generated key\n-        assertEquals(1, rs.getLong(1));\n-        stat.execute(\"insert into test values(100)\");\n-        rs = stat.getGeneratedKeys();\n-        // No generated keys\n-        assertFalse(rs.next());\n-        // Value from sequence from trigger\n-        rs = stat.executeQuery(\"select scope_identity()\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b93aa2335edf4ce59acda7a1ab509de16610e5d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMDc3OQ==", "bodyText": "This test case ensures incorrect (according to our own documentation) behavior:\nhttps://h2database.com/html/functions.html#scope_identity\n\nChanges within triggers and Java functions are ignored.\n\nThis test case shouldn't see anything from the trigger.\nIn the real SQL Server, SCOPE_IDENTITY() actually returns NULL in the similar test case with sequence called in the trigger.\nOur implementations of IDENTITY() and SCOPE_IDENTITY() in general aren't fully compatible with anything. In the SQL Server they are about inserted values, not about called sequences.", "url": "https://github.com/h2database/h2database/pull/2737#discussion_r450720779", "createdAt": "2020-07-07T09:10:28Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/jdbc/TestPreparedStatement.java", "diffHunk": "@@ -564,49 +562,6 @@ private void testUUIDAsJavaObject(Connection conn) throws SQLException {\n         stat.execute(\"drop table test_uuid\");\n     }\n \n-    /**\n-     * A trigger that creates a sequence value.\n-     */\n-    public static class SequenceTrigger implements Trigger {\n-\n-        @Override\n-        public void fire(Connection conn, Object[] oldRow, Object[] newRow)\n-                throws SQLException {\n-            conn.setAutoCommit(false);\n-            conn.createStatement().execute(\"call next value for seq\");\n-        }\n-\n-        @Override\n-        public void init(Connection conn, String schemaName,\n-                String triggerName, String tableName, boolean before, int type) {\n-            // ignore\n-        }\n-\n-    }\n-\n-    private void testScopedGeneratedKey(Connection conn) throws SQLException {\n-        Statement stat = conn.createStatement();\n-        stat.execute(\"create table test(id identity)\");\n-        stat.execute(\"create sequence seq start with 1000\");\n-        stat.execute(\"create trigger test_ins after insert on test call \\\"\" +\n-                SequenceTrigger.class.getName() + \"\\\"\");\n-        stat.execute(\"insert into test values(null)\", Statement.RETURN_GENERATED_KEYS);\n-        ResultSet rs = stat.getGeneratedKeys();\n-        rs.next();\n-        // Generated key\n-        assertEquals(1, rs.getLong(1));\n-        stat.execute(\"insert into test values(100)\");\n-        rs = stat.getGeneratedKeys();\n-        // No generated keys\n-        assertFalse(rs.next());\n-        // Value from sequence from trigger\n-        rs = stat.executeQuery(\"select scope_identity()\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjQ3Mg=="}, "originalCommit": {"oid": "b93aa2335edf4ce59acda7a1ab509de16610e5d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcyMjUwOQ==", "bodyText": "Hmmm. OK.\nIn our case, inserting a value will effectively call a sequence to generate a new ID. So the test was really testing for the SQL Server behaviour.\nBut in general, SCOPE_IDENTITY is a pain anyhow, so this change is OK.", "url": "https://github.com/h2database/h2database/pull/2737#discussion_r450722509", "createdAt": "2020-07-07T09:13:33Z", "author": {"login": "grandinj"}, "path": "h2/src/test/org/h2/test/jdbc/TestPreparedStatement.java", "diffHunk": "@@ -564,49 +562,6 @@ private void testUUIDAsJavaObject(Connection conn) throws SQLException {\n         stat.execute(\"drop table test_uuid\");\n     }\n \n-    /**\n-     * A trigger that creates a sequence value.\n-     */\n-    public static class SequenceTrigger implements Trigger {\n-\n-        @Override\n-        public void fire(Connection conn, Object[] oldRow, Object[] newRow)\n-                throws SQLException {\n-            conn.setAutoCommit(false);\n-            conn.createStatement().execute(\"call next value for seq\");\n-        }\n-\n-        @Override\n-        public void init(Connection conn, String schemaName,\n-                String triggerName, String tableName, boolean before, int type) {\n-            // ignore\n-        }\n-\n-    }\n-\n-    private void testScopedGeneratedKey(Connection conn) throws SQLException {\n-        Statement stat = conn.createStatement();\n-        stat.execute(\"create table test(id identity)\");\n-        stat.execute(\"create sequence seq start with 1000\");\n-        stat.execute(\"create trigger test_ins after insert on test call \\\"\" +\n-                SequenceTrigger.class.getName() + \"\\\"\");\n-        stat.execute(\"insert into test values(null)\", Statement.RETURN_GENERATED_KEYS);\n-        ResultSet rs = stat.getGeneratedKeys();\n-        rs.next();\n-        // Generated key\n-        assertEquals(1, rs.getLong(1));\n-        stat.execute(\"insert into test values(100)\");\n-        rs = stat.getGeneratedKeys();\n-        // No generated keys\n-        assertFalse(rs.next());\n-        // Value from sequence from trigger\n-        rs = stat.executeQuery(\"select scope_identity()\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjQ3Mg=="}, "originalCommit": {"oid": "b93aa2335edf4ce59acda7a1ab509de16610e5d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczMjczNA==", "bodyText": "Actually this PR doesn't break existing compatibility with SQL Server:\n-- MS SQL\nCREATE TABLE M(ID BIGINT IDENTITY(1, 1) PRIMARY KEY, VALUE INT);\nINSERT INTO M VALUES (10);\nCREATE TABLE T(ID BIGINT IDENTITY(1, 1) PRIMARY KEY, VALUE INT);\nCREATE TRIGGER TT ON M FOR INSERT AS BEGIN INSERT INTO T VALUES (30); END;\nINSERT INTO M VALUES (20);\nSELECT @@IDENTITY AS [IDENTITY], SCOPE_IDENTITY() AS [SCOPE_IDENTITY];\n> 1 2\n-- H2 (with and without these changes):\nCREATE TABLE M(ID IDENTITY PRIMARY KEY, V INT);\nINSERT INTO M(V) VALUES 10;\nCREATE TABLE T(ID IDENTITY PRIMARY KEY, V INT);\nCREATE TRIGGER TT AFTER INSERT ON M AS\n'org.h2.api.Trigger create() {\n    return new org.h2.api.Trigger() {\n        public void fire(Connection conn, Object[] oldRow, Object[] newRow) throws SQLException {\n            conn.setAutoCommit(false);\n            conn.createStatement().execute(\"INSERT INTO T(V) VALUES 30\");\n        }\n    };\n}';\nINSERT INTO M(V) VALUES 20;\nSELECT IDENTITY(), SCOPE_IDENTITY();\n> 1 2", "url": "https://github.com/h2database/h2database/pull/2737#discussion_r450732734", "createdAt": "2020-07-07T09:30:33Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/jdbc/TestPreparedStatement.java", "diffHunk": "@@ -564,49 +562,6 @@ private void testUUIDAsJavaObject(Connection conn) throws SQLException {\n         stat.execute(\"drop table test_uuid\");\n     }\n \n-    /**\n-     * A trigger that creates a sequence value.\n-     */\n-    public static class SequenceTrigger implements Trigger {\n-\n-        @Override\n-        public void fire(Connection conn, Object[] oldRow, Object[] newRow)\n-                throws SQLException {\n-            conn.setAutoCommit(false);\n-            conn.createStatement().execute(\"call next value for seq\");\n-        }\n-\n-        @Override\n-        public void init(Connection conn, String schemaName,\n-                String triggerName, String tableName, boolean before, int type) {\n-            // ignore\n-        }\n-\n-    }\n-\n-    private void testScopedGeneratedKey(Connection conn) throws SQLException {\n-        Statement stat = conn.createStatement();\n-        stat.execute(\"create table test(id identity)\");\n-        stat.execute(\"create sequence seq start with 1000\");\n-        stat.execute(\"create trigger test_ins after insert on test call \\\"\" +\n-                SequenceTrigger.class.getName() + \"\\\"\");\n-        stat.execute(\"insert into test values(null)\", Statement.RETURN_GENERATED_KEYS);\n-        ResultSet rs = stat.getGeneratedKeys();\n-        rs.next();\n-        // Generated key\n-        assertEquals(1, rs.getLong(1));\n-        stat.execute(\"insert into test values(100)\");\n-        rs = stat.getGeneratedKeys();\n-        // No generated keys\n-        assertFalse(rs.next());\n-        // Value from sequence from trigger\n-        rs = stat.executeQuery(\"select scope_identity()\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjQ3Mg=="}, "originalCommit": {"oid": "b93aa2335edf4ce59acda7a1ab509de16610e5d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDczNjc4MA==", "bodyText": "But this removed test case tested the wrong behavior that was fixed here.\nWe have other test for generated keys from the trigger, so I don't see a reason for adjustments in this one.", "url": "https://github.com/h2database/h2database/pull/2737#discussion_r450736780", "createdAt": "2020-07-07T09:37:31Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/jdbc/TestPreparedStatement.java", "diffHunk": "@@ -564,49 +562,6 @@ private void testUUIDAsJavaObject(Connection conn) throws SQLException {\n         stat.execute(\"drop table test_uuid\");\n     }\n \n-    /**\n-     * A trigger that creates a sequence value.\n-     */\n-    public static class SequenceTrigger implements Trigger {\n-\n-        @Override\n-        public void fire(Connection conn, Object[] oldRow, Object[] newRow)\n-                throws SQLException {\n-            conn.setAutoCommit(false);\n-            conn.createStatement().execute(\"call next value for seq\");\n-        }\n-\n-        @Override\n-        public void init(Connection conn, String schemaName,\n-                String triggerName, String tableName, boolean before, int type) {\n-            // ignore\n-        }\n-\n-    }\n-\n-    private void testScopedGeneratedKey(Connection conn) throws SQLException {\n-        Statement stat = conn.createStatement();\n-        stat.execute(\"create table test(id identity)\");\n-        stat.execute(\"create sequence seq start with 1000\");\n-        stat.execute(\"create trigger test_ins after insert on test call \\\"\" +\n-                SequenceTrigger.class.getName() + \"\\\"\");\n-        stat.execute(\"insert into test values(null)\", Statement.RETURN_GENERATED_KEYS);\n-        ResultSet rs = stat.getGeneratedKeys();\n-        rs.next();\n-        // Generated key\n-        assertEquals(1, rs.getLong(1));\n-        stat.execute(\"insert into test values(100)\");\n-        rs = stat.getGeneratedKeys();\n-        // No generated keys\n-        assertFalse(rs.next());\n-        // Value from sequence from trigger\n-        rs = stat.executeQuery(\"select scope_identity()\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDcwMjQ3Mg=="}, "originalCommit": {"oid": "b93aa2335edf4ce59acda7a1ab509de16610e5d3"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2108, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}