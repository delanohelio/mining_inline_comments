{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MTI5MDU5", "number": 2890, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTo1ODozOVrOEkT_Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTo1ODozOVrOEkT_Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTExNzExOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/engine/Database.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwMTo1ODozOVrOHTLkXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjo1MToyM1rOHTT1mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg3NDUyNg==", "bodyText": "Thank you for your contribution!\nJust replace 0 with 1 here, 50 can be unreasonably large for systems that support small wait values properly.", "url": "https://github.com/h2database/h2database/pull/2890#discussion_r489874526", "createdAt": "2020-09-17T01:58:39Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/engine/Database.java", "diffHunk": "@@ -1270,9 +1270,11 @@ private synchronized void closeAllSessionsExcept(SessionLocal except) {\n \n         int timeout = 2 * getLockTimeout();\n         long start = System.currentTimeMillis();\n+        // 'sleep' should be strictly greater than zero, otherwise real time is not taken into consideration\n+        // and the thread simply waits until notified\n+        long sleep = Math.max(timeout / 20, 50);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a830b9a1faed59acabdb4a61086c3319393889b7"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAxMDAwOA==", "bodyText": "OK.", "url": "https://github.com/h2database/h2database/pull/2890#discussion_r490010008", "createdAt": "2020-09-17T06:51:23Z", "author": {"login": "Silvmike"}, "path": "h2/src/main/org/h2/engine/Database.java", "diffHunk": "@@ -1270,9 +1270,11 @@ private synchronized void closeAllSessionsExcept(SessionLocal except) {\n \n         int timeout = 2 * getLockTimeout();\n         long start = System.currentTimeMillis();\n+        // 'sleep' should be strictly greater than zero, otherwise real time is not taken into consideration\n+        // and the thread simply waits until notified\n+        long sleep = Math.max(timeout / 20, 50);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTg3NDUyNg=="}, "originalCommit": {"oid": "a830b9a1faed59acabdb4a61086c3319393889b7"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2091, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}