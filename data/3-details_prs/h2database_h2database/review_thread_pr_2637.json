{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjQzMjk2", "number": 2637, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTozMjoyOVrOD-zRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxOTo1N1rOD-_MGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTc4NDM5OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/api/ErrorCode.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTozMjoyOVrOGZH-9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo1Mzo0MVrOGZaGmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5ODM4OQ==", "bodyText": "_1 suffix almost everywhere means that error code has one parameter. Use different names for exceptions. They are also expected to be self-descriptive.\n\n\nVendor-specific codes can't start with '0', '1', '2', '3', '4', 'A', 'B', 'C', 'D', 'E', 'F', 'G', or 'H'. Don't use 42S here, add some plain 90*** codes instead.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r428998389", "createdAt": "2020-05-22T01:32:29Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/api/ErrorCode.java", "diffHunk": "@@ -2229,6 +2255,8 @@ public static String getState(int errorCode) {\n         // 42: syntax error or access rule violation\n         case TABLE_OR_VIEW_ALREADY_EXISTS_1: return \"42S01\";\n         case TABLE_OR_VIEW_NOT_FOUND_1: return \"42S02\";\n+        case TABLE_OR_VIEW_NOT_FOUND_2: return \"42S03\";\n+        case TABLE_OR_VIEW_NOT_FOUND_3: return \"42S04\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAzNzA0NQ==", "bodyText": "On the other hand, subclasses (last three characters) may be vendor-specific too. Standard class 42 means syntax error or access rule violation, but the most of such error states have vendor-specific class 90 in H2.\n@grandinj\nMaybe you have some opinion about these error codes / SQL states?", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429037045", "createdAt": "2020-05-22T04:30:37Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/api/ErrorCode.java", "diffHunk": "@@ -2229,6 +2255,8 @@ public static String getState(int errorCode) {\n         // 42: syntax error or access rule violation\n         case TABLE_OR_VIEW_ALREADY_EXISTS_1: return \"42S01\";\n         case TABLE_OR_VIEW_NOT_FOUND_1: return \"42S02\";\n+        case TABLE_OR_VIEW_NOT_FOUND_2: return \"42S03\";\n+        case TABLE_OR_VIEW_NOT_FOUND_3: return \"42S04\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5ODM4OQ=="}, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTA4MTQ5Nw==", "bodyText": "I've never seen anybody even try to interpret these codes, so I largely don't care which ones we choose.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429081497", "createdAt": "2020-05-22T07:15:16Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/api/ErrorCode.java", "diffHunk": "@@ -2229,6 +2255,8 @@ public static String getState(int errorCode) {\n         // 42: syntax error or access rule violation\n         case TABLE_OR_VIEW_ALREADY_EXISTS_1: return \"42S01\";\n         case TABLE_OR_VIEW_NOT_FOUND_1: return \"42S02\";\n+        case TABLE_OR_VIEW_NOT_FOUND_2: return \"42S03\";\n+        case TABLE_OR_VIEW_NOT_FOUND_3: return \"42S04\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5ODM4OQ=="}, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxNzc5Nw==", "bodyText": "If I were to interpret the error codes in my source code then I would expect to get standard codes where possible.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429217797", "createdAt": "2020-05-22T12:30:21Z", "author": {"login": "resident-uhlig"}, "path": "h2/src/main/org/h2/api/ErrorCode.java", "diffHunk": "@@ -2229,6 +2255,8 @@ public static String getState(int errorCode) {\n         // 42: syntax error or access rule violation\n         case TABLE_OR_VIEW_ALREADY_EXISTS_1: return \"42S01\";\n         case TABLE_OR_VIEW_NOT_FOUND_1: return \"42S02\";\n+        case TABLE_OR_VIEW_NOT_FOUND_2: return \"42S03\";\n+        case TABLE_OR_VIEW_NOT_FOUND_3: return \"42S04\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5ODM4OQ=="}, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIxOTg1Nw==", "bodyText": "Please, improve names of these constants. We can think about error codes later.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429219857", "createdAt": "2020-05-22T12:35:04Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/api/ErrorCode.java", "diffHunk": "@@ -2229,6 +2255,8 @@ public static String getState(int errorCode) {\n         // 42: syntax error or access rule violation\n         case TABLE_OR_VIEW_ALREADY_EXISTS_1: return \"42S01\";\n         case TABLE_OR_VIEW_NOT_FOUND_1: return \"42S02\";\n+        case TABLE_OR_VIEW_NOT_FOUND_2: return \"42S03\";\n+        case TABLE_OR_VIEW_NOT_FOUND_3: return \"42S04\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5ODM4OQ=="}, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5NTI1Ng==", "bodyText": "I have renamed the two new constants. There is actually a place where the error code is checked in H2 itself. See 0f5d162 for example.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429295256", "createdAt": "2020-05-22T14:53:41Z", "author": {"login": "resident-uhlig"}, "path": "h2/src/main/org/h2/api/ErrorCode.java", "diffHunk": "@@ -2229,6 +2255,8 @@ public static String getState(int errorCode) {\n         // 42: syntax error or access rule violation\n         case TABLE_OR_VIEW_ALREADY_EXISTS_1: return \"42S01\";\n         case TABLE_OR_VIEW_NOT_FOUND_1: return \"42S02\";\n+        case TABLE_OR_VIEW_NOT_FOUND_2: return \"42S03\";\n+        case TABLE_OR_VIEW_NOT_FOUND_3: return \"42S04\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5ODM4OQ=="}, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTc4NjQyOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTozMzo1NlrOGZIAPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTozMzo1NlrOGZIAPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5ODcxNw==", "bodyText": "This field (unlike fields above) is not expected to be read when database is null, to we don't need it. Setting can be read from the database only when necessary.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r428998717", "createdAt": "2020-05-22T01:33:56Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -739,6 +744,11 @@\n      */\n     private final boolean identifiersToUpper;\n \n+    /**\n+     * @see org.h2.engine.DbSettings#caseInsensitiveIdentifiers\n+     */\n+    private final boolean caseInsensitiveIdentifiers;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTc4OTE5OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTozNTo0MlrOGZIB2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDo0ODo1NlrOGZZ8HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5OTEyOQ==", "bodyText": "Please, remove this list, additional complications for the main code path are unwanted. You can build a list only if nothing was found.\nPass  name of the schema when known as String to getTableOrViewNotFoundDbException(), and pass null to it when unknown to iterate over getCurrentSchemaName() and getSchemaSearchPath() in that method.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r428999129", "createdAt": "2020-05-22T01:35:42Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -8601,14 +8613,16 @@ private Table readTableOrView() {\n     }\n \n     private Table readTableOrView(String tableName) {\n+        final List<Schema> schemas = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI5MjU3Mg==", "bodyText": "I refactored it a little differently, please have a look", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429292572", "createdAt": "2020-05-22T14:48:56Z", "author": {"login": "resident-uhlig"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -8601,14 +8613,16 @@ private Table readTableOrView() {\n     }\n \n     private Table readTableOrView(String tableName) {\n+        final List<Schema> schemas = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5OTEyOQ=="}, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTc5MTI1OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTozNjo0OVrOGZIDEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTozNjo0OVrOGZIDEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk5OTQ0MQ==", "bodyText": "Don't use streams here, they are slow (it doesn't matter here) and unreadable when there are multiple operations at once.\nIt looks like you can use Database.getFirstUserTable() here.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r428999441", "createdAt": "2020-05-22T01:36:49Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -8620,13 +8634,46 @@ private Table readTableOrView(String tableName) {\n                     if (table != null) {\n                         return table;\n                     }\n+                    schemas.add(s);\n                 }\n             }\n         }\n         if (isDualTable(tableName)) {\n             return new DualTable(database);\n         }\n-        throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n+\n+        throw getTableOrViewNotFoundDbException(schemas, tableName);\n+    }\n+\n+    private DbException getTableOrViewNotFoundDbException(final List<Schema> schemas, final String tableName) {\n+        if (schemas.stream().map(Schema::getAllTablesAndViews).noneMatch(not(Collection::isEmpty))) {\n+            return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_3, tableName);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTc5ODE1OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0MToxNFrOGZIHBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0MToxNFrOGZIHBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwMDQ1Mg==", "bodyText": "Don't use streams here too, nobody will ever try to review it.\nAlso use StringUtils.toUpperEnglish(String) here, that's how H2 works in case-insensitive mode, this code is expected to be compatible with it. Conversions to lower/upper case can be unequal due to large amount of specially handled characters in Unicode, and, unfortunately, conversions are locale-specific even for some ASCII characters.\nI also don't understand what are you trying to do with ` characters.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429000452", "createdAt": "2020-05-22T01:41:14Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -8620,13 +8634,46 @@ private Table readTableOrView(String tableName) {\n                     if (table != null) {\n                         return table;\n                     }\n+                    schemas.add(s);\n                 }\n             }\n         }\n         if (isDualTable(tableName)) {\n             return new DualTable(database);\n         }\n-        throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n+\n+        throw getTableOrViewNotFoundDbException(schemas, tableName);\n+    }\n+\n+    private DbException getTableOrViewNotFoundDbException(final List<Schema> schemas, final String tableName) {\n+        if (schemas.stream().map(Schema::getAllTablesAndViews).noneMatch(not(Collection::isEmpty))) {\n+            return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_3, tableName);\n+        }\n+\n+        final java.util.Set<String> candidates =\n+            caseInsensitiveIdentifiers ?\n+                Collections.emptySet() :\n+                findQuotedTableNameCandidates(schemas, tableName);\n+\n+        if (candidates.isEmpty()) {\n+            return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n+        }\n+\n+        return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_2,\n+            tableName,\n+            String.join(\", \", candidates));\n+    }\n+\n+    private java.util.Set<String> findQuotedTableNameCandidates(final List<Schema> schemas, final String tableName) {\n+        final String lcTableName = tableName.toLowerCase();\n+        return schemas.stream()\n+            .map(Schema::getAllTablesAndViews)\n+            .flatMap(Collection::stream)\n+            .map(Table::getName)\n+            .filter(c -> lcTableName.equals(c.toLowerCase()))\n+            .sorted()\n+            .map(c -> \"`\" + c + \"`\")\n+            .collect(Collectors.toCollection(TreeSet::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTgwMDgwOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/res/_messages_en.prop", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0Mjo1NlrOGZIIpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMjo1MDozNFrOGZV7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwMDg2OQ==", "bodyText": "Add ERROR_CODE=#ENGLISH_MESSAGE to all remaining localization files.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429000869", "createdAt": "2020-05-22T01:42:56Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/res/_messages_en.prop", "diffHunk": "@@ -29,6 +29,8 @@\n 42602=Invalid name {0}\n 42S01=Table {0} already exists\n 42S02=Table {0} not found\n+42S03=Table {0} not found (candidates are: {1})\n+42S04=Table {0} not found (this database is empty)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNTA5MQ==", "bodyText": "Sure, I'll do this. I see that there are some other messages in the German file which aren't translated. Would you mind if I translate them in a separate PR?", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429225091", "createdAt": "2020-05-22T12:46:36Z", "author": {"login": "resident-uhlig"}, "path": "h2/src/main/org/h2/res/_messages_en.prop", "diffHunk": "@@ -29,6 +29,8 @@\n 42602=Invalid name {0}\n 42S01=Table {0} already exists\n 42S02=Table {0} not found\n+42S03=Table {0} not found (candidates are: {1})\n+42S04=Table {0} not found (this database is empty)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwMDg2OQ=="}, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTIyNzAwNA==", "bodyText": "Good idea.\nPlease, also take a look on h2/src/main/org/h2/server/web/res/_text_de.prop, it has a few missing entries too.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429227004", "createdAt": "2020-05-22T12:50:34Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/res/_messages_en.prop", "diffHunk": "@@ -29,6 +29,8 @@\n 42602=Invalid name {0}\n 42S01=Table {0} already exists\n 42S02=Table {0} not found\n+42S03=Table {0} not found (candidates are: {1})\n+42S04=Table {0} not found (this database is empty)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwMDg2OQ=="}, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTgwMTc1OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/util/StreamUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0MzozNFrOGZIJPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0MzozNFrOGZIJPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwMTAyMw==", "bodyText": "Please, remove this class, we don't need it in the main code.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429001023", "createdAt": "2020-05-22T01:43:34Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/util/StreamUtils.java", "diffHunk": "@@ -0,0 +1,13 @@\n+package org.h2.util;\r\n+\r\n+import java.util.function.Predicate;\r\n+\r\n+public abstract class StreamUtils {\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTgwMzM5OnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/db/TestAlterTableNotFound.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0NDo0MVrOGZIKOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0NDo0MVrOGZIKOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwMTI3NA==", "bodyText": "Add a copyright header:\n/*\n * Copyright 2004-2020 H2 Group. Multiple-Licensed under the MPL 2.0,\n * and the EPL 1.0 (https://h2database.com/html/license.html).\n * Initial Developer: H2 Group\n */", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429001274", "createdAt": "2020-05-22T01:44:41Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/db/TestAlterTableNotFound.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.h2.test.db;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTgwNDEyOnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/db/TestAlterTableNotFound.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0NToxMVrOGZIKtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0NToxMVrOGZIKtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwMTM5Nw==", "bodyText": "Use 4 character for indentation (8 for wrapped lines).", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429001397", "createdAt": "2020-05-22T01:45:11Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/db/TestAlterTableNotFound.java", "diffHunk": "@@ -0,0 +1,170 @@\n+package org.h2.test.db;\r\n+\r\n+import java.sql.Connection;\r\n+import java.sql.SQLException;\r\n+import java.sql.Statement;\r\n+import org.h2.jdbc.JdbcConnection;\r\n+import org.h2.test.TestBase;\r\n+import org.h2.test.TestDb;\r\n+\r\n+public class TestAlterTableNotFound extends TestDb {\r\n+\r\n+  /**\r\n+   * Run just this test.\r\n+   *\r\n+   * @param a ignored\r\n+   */\r\n+  public static void main(String... a) throws Exception {\r\n+    TestBase.createCaller().init().testFromMain();\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTgwNDg2OnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/db/TestSelectTableNotFound.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0NTozMVrOGZILIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMTo0NTozMVrOGZILIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTAwMTUwNQ==", "bodyText": "Header, indentation.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429001505", "createdAt": "2020-05-22T01:45:31Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/db/TestSelectTableNotFound.java", "diffHunk": "@@ -0,0 +1,177 @@\n+package org.h2.test.db;\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e68e6084669a55c94b6b2ef3df1f62c72fba822"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzY5MDQxOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowNTo1OFrOGZahSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowNTo1OFrOGZahSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMjA5MQ==", "bodyText": "Please, don't use final modifiers for fields and local variables.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429302091", "createdAt": "2020-05-22T15:05:58Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -8626,7 +8629,68 @@ private Table readTableOrView(String tableName) {\n         if (isDualTable(tableName)) {\n             return new DualTable(database);\n         }\n-        throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n+\n+        throw getTableOrViewNotFoundDbException(tableName);\n+    }\n+\n+    private DbException getTableOrViewNotFoundDbException(final String tableName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d944b9792b09446cfbeb55e71860c1f9b9e60fbf"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzY5NzU5OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowODoxMFrOGZal0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowODoxMFrOGZal0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMzI1MA==", "bodyText": "Pass candidates to findTableNameCandidates() instead of allocation of own set it in.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429303250", "createdAt": "2020-05-22T15:08:10Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -8626,7 +8629,68 @@ private Table readTableOrView(String tableName) {\n         if (isDualTable(tableName)) {\n             return new DualTable(database);\n         }\n-        throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n+\n+        throw getTableOrViewNotFoundDbException(tableName);\n+    }\n+\n+    private DbException getTableOrViewNotFoundDbException(final String tableName) {\n+        if (schemaName != null) {\n+            return getTableOrViewNotFoundDbException(schemaName, tableName);\n+        }\n+\n+        final String currentSchemaName = session.getCurrentSchemaName();\n+        final String[] schemaSearchPath = session.getSchemaSearchPath();\n+        if (schemaSearchPath == null) {\n+            return getTableOrViewNotFoundDbException(Collections.singleton(currentSchemaName), tableName);\n+        }\n+\n+        final LinkedHashSet<String> schemaNames = new LinkedHashSet<>();\n+        schemaNames.add(currentSchemaName);\n+        schemaNames.addAll(Arrays.asList(schemaSearchPath));\n+        return getTableOrViewNotFoundDbException(schemaNames, tableName);\n+    }\n+\n+    private DbException getTableOrViewNotFoundDbException(final String schemaName, final String tableName) {\n+        return getTableOrViewNotFoundDbException(Collections.singleton(schemaName), tableName);\n+    }\n+\n+    private DbException getTableOrViewNotFoundDbException(\n+            final java.util.Set<String> schemaNames, final String tableName) {\n+        if (database == null || database.getFirstUserTable() == null) {\n+            return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_DATABASE_EMPTY_1, tableName);\n+        }\n+\n+        if (database.getSettings().caseInsensitiveIdentifiers) {\n+            return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n+        }\n+\n+        final java.util.Set<String> candidates = new TreeSet<>();\n+        for (final String schemaName : schemaNames) {\n+            candidates.addAll(findTableNameCandidates(schemaName, tableName));\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d944b9792b09446cfbeb55e71860c1f9b9e60fbf"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzY5Nzg2OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowODoxNVrOGZamBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowODoxNVrOGZamBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMzMwMw==", "bodyText": "Wrapped lines are indented with 8 spaces in sources of H2.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429303303", "createdAt": "2020-05-22T15:08:15Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -8626,7 +8629,68 @@ private Table readTableOrView(String tableName) {\n         if (isDualTable(tableName)) {\n             return new DualTable(database);\n         }\n-        throw DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n+\n+        throw getTableOrViewNotFoundDbException(tableName);\n+    }\n+\n+    private DbException getTableOrViewNotFoundDbException(final String tableName) {\n+        if (schemaName != null) {\n+            return getTableOrViewNotFoundDbException(schemaName, tableName);\n+        }\n+\n+        final String currentSchemaName = session.getCurrentSchemaName();\n+        final String[] schemaSearchPath = session.getSchemaSearchPath();\n+        if (schemaSearchPath == null) {\n+            return getTableOrViewNotFoundDbException(Collections.singleton(currentSchemaName), tableName);\n+        }\n+\n+        final LinkedHashSet<String> schemaNames = new LinkedHashSet<>();\n+        schemaNames.add(currentSchemaName);\n+        schemaNames.addAll(Arrays.asList(schemaSearchPath));\n+        return getTableOrViewNotFoundDbException(schemaNames, tableName);\n+    }\n+\n+    private DbException getTableOrViewNotFoundDbException(final String schemaName, final String tableName) {\n+        return getTableOrViewNotFoundDbException(Collections.singleton(schemaName), tableName);\n+    }\n+\n+    private DbException getTableOrViewNotFoundDbException(\n+            final java.util.Set<String> schemaNames, final String tableName) {\n+        if (database == null || database.getFirstUserTable() == null) {\n+            return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_DATABASE_EMPTY_1, tableName);\n+        }\n+\n+        if (database.getSettings().caseInsensitiveIdentifiers) {\n+            return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n+        }\n+\n+        final java.util.Set<String> candidates = new TreeSet<>();\n+        for (final String schemaName : schemaNames) {\n+            candidates.addAll(findTableNameCandidates(schemaName, tableName));\n+        }\n+\n+        if (candidates.isEmpty()) {\n+            return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_1, tableName);\n+        }\n+\n+        return DbException.get(ErrorCode.TABLE_OR_VIEW_NOT_FOUND_WITH_CANDIDATES_2,\n+            tableName,\n+            String.join(\", \", candidates));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d944b9792b09446cfbeb55e71860c1f9b9e60fbf"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzcwMTE3OnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/db/TestAlterTableNotFound.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowOToyNFrOGZaoPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTowOToyNFrOGZaoPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwMzg3MA==", "bodyText": "DATABASE_TO_UPPER=FALSE is enough.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429303870", "createdAt": "2020-05-22T15:09:24Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/db/TestAlterTableNotFound.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2004-2020 H2 Group. Multiple-Licensed under the MPL 2.0,\n+ * and the EPL 1.0 (https://h2database.com/html/license.html).\n+ * Initial Developer: H2 Group\n+ */\n+package org.h2.test.db;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import org.h2.jdbc.JdbcConnection;\n+import org.h2.test.TestBase;\n+import org.h2.test.TestDb;\n+\n+public class TestAlterTableNotFound extends TestDb {\n+\n+    /**\n+     * Run just this test.\n+     *\n+     * @param a ignored\n+     */\n+    public static void main(String... a) throws Exception {\n+        TestBase.createCaller().init().testFromMain();\n+    }\n+\n+    @Override\n+    public void test() throws Exception {\n+        testWithoutAnyCandidate();\n+        testWithoutAnyCandidateWhenDatabaseToLower();\n+        testWithoutAnyCandidateWhenDatabaseToUpper();\n+        testWithoutAnyCandidateWhenCaseInsensitiveIdentifiers();\n+        testWithOneCandidate();\n+        testWithOneCandidateWhenDatabaseToLower();\n+        testWithOneCandidateWhenDatabaseToUpper();\n+        testWithOneCandidateWhenCaseInsensitiveIdentifiers();\n+        testWithTwoCandidates();\n+    }\n+\n+    private void testWithoutAnyCandidate() throws SQLException {\n+        deleteDb(getTestName());\n+        final Connection conn = getJdbcConnection(\"DATABASE_TO_LOWER=false;DATABASE_TO_UPPER=false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d944b9792b09446cfbeb55e71860c1f9b9e60fbf"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzcwNjcwOnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/db/TestAlterTableNotFound.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxMTowM1rOGZarsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxMTowM1rOGZarsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwNDc1Mw==", "bodyText": "DATABASE_TO_LOWER=TRUE is enough.", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429304753", "createdAt": "2020-05-22T15:11:03Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/db/TestAlterTableNotFound.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2004-2020 H2 Group. Multiple-Licensed under the MPL 2.0,\n+ * and the EPL 1.0 (https://h2database.com/html/license.html).\n+ * Initial Developer: H2 Group\n+ */\n+package org.h2.test.db;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import org.h2.jdbc.JdbcConnection;\n+import org.h2.test.TestBase;\n+import org.h2.test.TestDb;\n+\n+public class TestAlterTableNotFound extends TestDb {\n+\n+    /**\n+     * Run just this test.\n+     *\n+     * @param a ignored\n+     */\n+    public static void main(String... a) throws Exception {\n+        TestBase.createCaller().init().testFromMain();\n+    }\n+\n+    @Override\n+    public void test() throws Exception {\n+        testWithoutAnyCandidate();\n+        testWithoutAnyCandidateWhenDatabaseToLower();\n+        testWithoutAnyCandidateWhenDatabaseToUpper();\n+        testWithoutAnyCandidateWhenCaseInsensitiveIdentifiers();\n+        testWithOneCandidate();\n+        testWithOneCandidateWhenDatabaseToLower();\n+        testWithOneCandidateWhenDatabaseToUpper();\n+        testWithOneCandidateWhenCaseInsensitiveIdentifiers();\n+        testWithTwoCandidates();\n+    }\n+\n+    private void testWithoutAnyCandidate() throws SQLException {\n+        deleteDb(getTestName());\n+        final Connection conn = getJdbcConnection(\"DATABASE_TO_LOWER=false;DATABASE_TO_UPPER=false\");\n+        final Statement stat = conn.createStatement();\n+        stat.execute(\"CREATE TABLE T2 ( ID INT IDENTITY )\");\n+        try {\n+            stat.execute(\"ALTER TABLE t1 DROP COLUMN ID\");\n+            fail(\"Table `t1` was accessible but should not have been.\");\n+        } catch (SQLException e) {\n+            final String message = e.getMessage();\n+            assertContains(message, \"Table \\\"t1\\\" not found;\");\n+        }\n+\n+        conn.close();\n+        deleteDb(getTestName());\n+    }\n+\n+    private void testWithoutAnyCandidateWhenDatabaseToLower() throws SQLException {\n+        deleteDb(getTestName());\n+        final Connection conn = getJdbcConnection(\"DATABASE_TO_LOWER=true;DATABASE_TO_UPPER=false\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d944b9792b09446cfbeb55e71860c1f9b9e60fbf"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzczNTk0OnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/db/TestSelectTableNotFound.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxOTo1N1rOGZa-RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxOTo1N1rOGZa-RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwOTUwOA==", "bodyText": "Use SQL command here.\nhttps://h2database.com/html/commands.html#set_schema_search_path", "url": "https://github.com/h2database/h2database/pull/2637#discussion_r429309508", "createdAt": "2020-05-22T15:19:57Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/db/TestSelectTableNotFound.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 2004-2020 H2 Group. Multiple-Licensed under the MPL 2.0,\n+ * and the EPL 1.0 (https://h2database.com/html/license.html).\n+ * Initial Developer: H2 Group\n+ */\n+package org.h2.test.db;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.sql.Statement;\n+import org.h2.engine.Session;\n+import org.h2.jdbc.JdbcConnection;\n+import org.h2.test.TestBase;\n+import org.h2.test.TestDb;\n+\n+public class TestSelectTableNotFound extends TestDb {\n+\n+    /**\n+     * Run just this test.\n+     *\n+     * @param a ignored\n+     */\n+    public static void main(String... a) throws Exception {\n+        TestBase.createCaller().init().testFromMain();\n+    }\n+\n+    @Override\n+    public void test() throws Exception {\n+        testWithoutAnyCandidate();\n+        testWithOneCandidate();\n+        testWithTwoCandidates();\n+        testWithSchema();\n+        testWithSchemaSearchPath();\n+        testWhenSchemaIsEmpty();\n+        testWithSchemaWhenSchemaIsEmpty();\n+        testWithSchemaSearchPathWhenSchemaIsEmpty();\n+    }\n+\n+    private void testWithoutAnyCandidate() throws SQLException {\n+        deleteDb(getTestName());\n+        final Connection conn = getJdbcConnection();\n+        final Statement stat = conn.createStatement();\n+        stat.execute(\"CREATE TABLE T2 ( ID INT IDENTITY )\");\n+        try {\n+            stat.executeQuery(\"SELECT 1 FROM t1\");\n+            fail(\"Table `t1` was accessible but should not have been.\");\n+        } catch (SQLException e) {\n+            final String message = e.getMessage();\n+            assertContains(message, \"Table \\\"t1\\\" not found;\");\n+        }\n+\n+        conn.close();\n+        deleteDb(getTestName());\n+    }\n+\n+    private void testWithOneCandidate() throws SQLException {\n+        deleteDb(getTestName());\n+        final Connection conn = getJdbcConnection();\n+        final Statement stat = conn.createStatement();\n+        stat.execute(\"CREATE TABLE T1 ( ID INT IDENTITY )\");\n+        try {\n+            stat.executeQuery(\"SELECT 1 FROM t1\");\n+            fail(\"Table `t1` was accessible but should not have been.\");\n+        } catch (SQLException e) {\n+            final String message = e.getMessage();\n+            assertContains(message, \"Table \\\"t1\\\" not found (candidates are: \\\"T1\\\")\");\n+        }\n+\n+        conn.close();\n+        deleteDb(getTestName());\n+    }\n+\n+    private void testWithTwoCandidates() throws SQLException {\n+        deleteDb(getTestName());\n+        final Connection conn = getJdbcConnection();\n+        final Statement stat = conn.createStatement();\n+        stat.execute(\"CREATE TABLE Toast ( ID INT IDENTITY )\");\n+        stat.execute(\"CREATE TABLE TOAST ( ID INT IDENTITY )\");\n+        try {\n+            stat.executeQuery(\"SELECT 1 FROM toast\");\n+            fail(\"Table `toast` was accessible but should not have been.\");\n+        } catch (SQLException e) {\n+            final String message = e.getMessage();\n+            assertContains(message, \"Table \\\"toast\\\" not found (candidates are: \\\"TOAST, Toast\\\")\");\n+        }\n+\n+        conn.close();\n+        deleteDb(getTestName());\n+    }\n+\n+    private void testWithSchema() throws SQLException {\n+        deleteDb(getTestName());\n+        final Connection conn = getJdbcConnection();\n+        final Statement stat = conn.createStatement();\n+        stat.execute(\"CREATE TABLE T1 ( ID INT IDENTITY )\");\n+        try {\n+            stat.executeQuery(\"SELECT 1 FROM PUBLIC.t1\");\n+            fail(\"Table `t1` was accessible but should not have been.\");\n+        } catch (SQLException e) {\n+            final String message = e.getMessage();\n+            assertContains(message, \"Table \\\"t1\\\" not found (candidates are: \\\"T1\\\")\");\n+        }\n+\n+        conn.close();\n+        deleteDb(getTestName());\n+    }\n+\n+    private void testWithSchemaSearchPath() throws SQLException {\n+        deleteDb(getTestName());\n+        final JdbcConnection conn = getJdbcConnection();\n+        final Session session = (Session) conn.getSession();\n+        session.setSchemaSearchPath(new String[]{ \"PUBLIC\" });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d944b9792b09446cfbeb55e71860c1f9b9e60fbf"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2178, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}