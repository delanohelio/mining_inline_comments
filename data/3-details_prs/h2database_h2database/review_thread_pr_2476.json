{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMTY1MzMy", "number": 2476, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxNDoxNlrODkKaww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyMzoxNVrODkO1PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjQ2MDE5OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxNDoxNlrOFwVZRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxMzozMVrOFwb27g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjUwMg==", "bodyText": "All PostgreSQL-specific logic here should be restricted to PostgreSQL compatibility mode.", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386226502", "createdAt": "2020-03-02T07:14:16Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,29 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n+            boolean hasPgCatalog = false;\n             do {\n-                list.add(readAliasIdentifier());\n+                // some PG clients will send single-quoted alias\n+                String s = currentTokenType == LITERAL ?\n+                        readString() : readAliasIdentifier();\n+                if (\"$USER\".equalsIgnoreCase(s)) {\n+                    continue;\n+                }\n+                if (\"PG_CATALOG\".equalsIgnoreCase(s)) {\n+                    hasPgCatalog = true;\n+                }\n+                list.add(s);\n             } while (readIf(COMMA));\n+            // for PostgreSQL compatibility\n+            // If \"pg_catalog\" is not in the path then it will be searched before\n+            // searching any of the path items. See\n+            // https://www.postgresql.org/docs/8.2/runtime-config-client.html\n+            if (!hasPgCatalog) {\n+                String pgCatalog = database.sysIdentifier(\"PG_CATALOG\");\n+                if (database.findSchema(pgCatalog) != null) {\n+                    list.add(0, pgCatalog);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "323d4749656b2f6888dba32916c42662fe0f43c4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzMjM5OA==", "bodyText": "fixed", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386332398", "createdAt": "2020-03-02T11:13:31Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,29 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n+            boolean hasPgCatalog = false;\n             do {\n-                list.add(readAliasIdentifier());\n+                // some PG clients will send single-quoted alias\n+                String s = currentTokenType == LITERAL ?\n+                        readString() : readAliasIdentifier();\n+                if (\"$USER\".equalsIgnoreCase(s)) {\n+                    continue;\n+                }\n+                if (\"PG_CATALOG\".equalsIgnoreCase(s)) {\n+                    hasPgCatalog = true;\n+                }\n+                list.add(s);\n             } while (readIf(COMMA));\n+            // for PostgreSQL compatibility\n+            // If \"pg_catalog\" is not in the path then it will be searched before\n+            // searching any of the path items. See\n+            // https://www.postgresql.org/docs/8.2/runtime-config-client.html\n+            if (!hasPgCatalog) {\n+                String pgCatalog = database.sysIdentifier(\"PG_CATALOG\");\n+                if (database.findSchema(pgCatalog) != null) {\n+                    list.add(0, pgCatalog);\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjUwMg=="}, "originalCommit": {"oid": "323d4749656b2f6888dba32916c42662fe0f43c4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MjQ2MjMxOnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQwNzoxNTozNFrOFwVagQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxMzoxNlrOFwb2XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjgxNw==", "bodyText": "Please, remove this commented out code.", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386226817", "createdAt": "2020-03-02T07:15:34Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -666,6 +666,35 @@ private void testOtherPgClients() throws SQLException {\n                     \"WHERE \\\"n\\\".\\\"nspname\\\"='public';\")) {\n                 assertFalse(rs.next()); // \"pg_proc\" always empty\n             }\n+            try (ResultSet rs = stat.executeQuery(\"SELECT DISTINCT a.attname AS column_name, \" +\n+                    \"a.attnum, a.atttypid, FORMAT_TYPE(a.atttypid, a.atttypmod) AS data_type, \" +\n+                    \"CASE a.attnotnull WHEN false THEN 'YES' ELSE 'NO' END AS IS_NULLABLE, \" +\n+                    \"com.description AS column_comment, pg_get_expr(def.adbin, def.adrelid) AS column_default, \" +\n+                    \"NULL AS character_maximum_length FROM pg_attribute AS a \" +\n+                    \"JOIN pg_class AS pgc ON pgc.oid = a.attrelid \" +\n+                    \"LEFT JOIN pg_description AS com ON (pgc.oid = com.objoid AND a.attnum = com.objsubid) \" +\n+                    \"LEFT JOIN pg_attrdef AS def ON (a.attrelid = def.adrelid AND a.attnum = def.adnum) \" +\n+                    \"WHERE a.attnum > 0 AND pgc.oid = a.attrelid AND pg_table_is_visible(pgc.oid) \" +\n+                    \"AND NOT a.attisdropped AND pgc.relname = 'test' ORDER BY a.attnum\")) {\n+                assertTrue(rs.next());\n+                assertEquals(\"id\", rs.getString(\"column_name\"));\n+                assertTrue(rs.next());\n+                assertEquals(\"x1\", rs.getString(\"column_name\"));\n+                assertFalse(rs.next());\n+            }\n+            /* TODO\n+            try (ResultSet rs = stat.executeQuery(\"SELECT \\\"c\\\".\\\"conname\\\" AS \\\"CONSTRAINT_NAME\\\", \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "323d4749656b2f6888dba32916c42662fe0f43c4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzMjI1Mw==", "bodyText": "removed", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386332253", "createdAt": "2020-03-02T11:13:16Z", "author": {"login": "auntyellow"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -666,6 +666,35 @@ private void testOtherPgClients() throws SQLException {\n                     \"WHERE \\\"n\\\".\\\"nspname\\\"='public';\")) {\n                 assertFalse(rs.next()); // \"pg_proc\" always empty\n             }\n+            try (ResultSet rs = stat.executeQuery(\"SELECT DISTINCT a.attname AS column_name, \" +\n+                    \"a.attnum, a.atttypid, FORMAT_TYPE(a.atttypid, a.atttypmod) AS data_type, \" +\n+                    \"CASE a.attnotnull WHEN false THEN 'YES' ELSE 'NO' END AS IS_NULLABLE, \" +\n+                    \"com.description AS column_comment, pg_get_expr(def.adbin, def.adrelid) AS column_default, \" +\n+                    \"NULL AS character_maximum_length FROM pg_attribute AS a \" +\n+                    \"JOIN pg_class AS pgc ON pgc.oid = a.attrelid \" +\n+                    \"LEFT JOIN pg_description AS com ON (pgc.oid = com.objoid AND a.attnum = com.objsubid) \" +\n+                    \"LEFT JOIN pg_attrdef AS def ON (a.attrelid = def.adrelid AND a.attnum = def.adnum) \" +\n+                    \"WHERE a.attnum > 0 AND pgc.oid = a.attrelid AND pg_table_is_visible(pgc.oid) \" +\n+                    \"AND NOT a.attisdropped AND pgc.relname = 'test' ORDER BY a.attnum\")) {\n+                assertTrue(rs.next());\n+                assertEquals(\"id\", rs.getString(\"column_name\"));\n+                assertTrue(rs.next());\n+                assertEquals(\"x1\", rs.getString(\"column_name\"));\n+                assertFalse(rs.next());\n+            }\n+            /* TODO\n+            try (ResultSet rs = stat.executeQuery(\"SELECT \\\"c\\\".\\\"conname\\\" AS \\\"CONSTRAINT_NAME\\\", \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjIyNjgxNw=="}, "originalCommit": {"oid": "323d4749656b2f6888dba32916c42662fe0f43c4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE2OTA5OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxODowMFrOFwb-Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToxODowMFrOFwb-Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNDI5MQ==", "bodyText": "PostgreSQL treats only lowercase $user in the special way.", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386334291", "createdAt": "2020-03-02T11:18:00Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,34 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n-            do {\n-                list.add(readAliasIdentifier());\n-            } while (readIf(COMMA));\n+            if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                boolean hasPgCatalog = false;\n+                do {\n+                    // some PG clients will send single-quoted alias\n+                    String s = currentTokenType == LITERAL ?\n+                            readString() : readAliasIdentifier();\n+                    if (\"$USER\".equalsIgnoreCase(s)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3988c6502f4837fe2dd07d95a57950ec7832c63a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5MzE4MzMzOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMToyMzoxNVrOFwcHIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyOToxOFrOFw1ZVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNjU0Nw==", "bodyText": "I think you need to check for exact name here too. The real PostgreSQL does not process its own pg_catalog before specified schemas only when pg_catalog is specified in the proper case in the search path.\npgCatalog.equals(s)", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386336547", "createdAt": "2020-03-02T11:23:15Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,34 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n-            do {\n-                list.add(readAliasIdentifier());\n-            } while (readIf(COMMA));\n+            if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                boolean hasPgCatalog = false;\n+                do {\n+                    // some PG clients will send single-quoted alias\n+                    String s = currentTokenType == LITERAL ?\n+                            readString() : readAliasIdentifier();\n+                    if (\"$USER\".equalsIgnoreCase(s)) {\n+                        continue;\n+                    }\n+                    if (\"PG_CATALOG\".equalsIgnoreCase(s)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3988c6502f4837fe2dd07d95a57950ec7832c63a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQyNDMzMg==", "bodyText": "I tested on real PG and a schema with upper-case PG_CATALOG can be created, which can miss really lower-case pg_catalog if use case-insensitive check.\nI think database.sysIdentifier(\"$USER\") and database.sysIdentifier(\"PG_CATALOG\") might work well in this special senario.", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386424332", "createdAt": "2020-03-02T14:29:05Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,34 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n-            do {\n-                list.add(readAliasIdentifier());\n-            } while (readIf(COMMA));\n+            if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                boolean hasPgCatalog = false;\n+                do {\n+                    // some PG clients will send single-quoted alias\n+                    String s = currentTokenType == LITERAL ?\n+                            readString() : readAliasIdentifier();\n+                    if (\"$USER\".equalsIgnoreCase(s)) {\n+                        continue;\n+                    }\n+                    if (\"PG_CATALOG\".equalsIgnoreCase(s)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNjU0Nw=="}, "originalCommit": {"oid": "3988c6502f4837fe2dd07d95a57950ec7832c63a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjQzMzcxNg==", "bodyText": "Of course in can be created in both PostgreSQL and H2. These databases are case-sensitive. (Case sensitivity of H2 is actually configurable, but this feature should not be used in PostgreSQL compatibility mode.) database.sysIdentifier(\"PG_CATALOG\") should be fine.\nBut $user should be simply hardcoded in lower case, it's not a schema name and the real PostgreSQL does not treat it in special way in any other case.", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386433716", "createdAt": "2020-03-02T14:44:54Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,34 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n-            do {\n-                list.add(readAliasIdentifier());\n-            } while (readIf(COMMA));\n+            if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                boolean hasPgCatalog = false;\n+                do {\n+                    // some PG clients will send single-quoted alias\n+                    String s = currentTokenType == LITERAL ?\n+                            readString() : readAliasIdentifier();\n+                    if (\"$USER\".equalsIgnoreCase(s)) {\n+                        continue;\n+                    }\n+                    if (\"PG_CATALOG\".equalsIgnoreCase(s)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNjU0Nw=="}, "originalCommit": {"oid": "3988c6502f4837fe2dd07d95a57950ec7832c63a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc1MDgwNQ==", "bodyText": "Fixed. And, database.sysIdentifier(\"$USER\") cannot pass test (with -ea VM option) :-P", "url": "https://github.com/h2database/h2database/pull/2476#discussion_r386750805", "createdAt": "2020-03-03T01:29:18Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7866,9 +7866,34 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             Set command = new Set(session, SetTypes.SCHEMA_SEARCH_PATH);\n             ArrayList<String> list = Utils.newSmallArrayList();\n-            do {\n-                list.add(readAliasIdentifier());\n-            } while (readIf(COMMA));\n+            if (database.getMode().getEnum() == Mode.ModeEnum.PostgreSQL) {\n+                boolean hasPgCatalog = false;\n+                do {\n+                    // some PG clients will send single-quoted alias\n+                    String s = currentTokenType == LITERAL ?\n+                            readString() : readAliasIdentifier();\n+                    if (\"$USER\".equalsIgnoreCase(s)) {\n+                        continue;\n+                    }\n+                    if (\"PG_CATALOG\".equalsIgnoreCase(s)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjMzNjU0Nw=="}, "originalCommit": {"oid": "3988c6502f4837fe2dd07d95a57950ec7832c63a"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2137, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}