{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjc5NDgz", "number": 2644, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoxNDozNFrOD_Iqmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoxOTo0N1rOD_IrmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI4ODU5OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoxNDozNFrOGZpolw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNTowNjo0OVrOGZp4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0OTcxOQ==", "bodyText": "I don't see any special treatment for , and } characters, but I guess it should be here.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429549719", "createdAt": "2020-05-23T14:14:34Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "diffHunk": "@@ -582,6 +583,21 @@ private void writeDataColumn(JdbcResultSet rs, int column, int pgType, boolean t\n                 write(data);\n                 break;\n             }\n+            case PgServer.PG_TYPE_TEXTARRAY:\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                baos.write('{');\n+                Value[] values = ((ValueArray) v).getList();\n+                Charset encoding = getEncoding();\n+                for (int i = 0; i < values.length; i++) {\n+                    if (i > 0) {\n+                        baos.write(',');\n+                    }\n+                    baos.write(values[i].getString().getBytes(encoding));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MzcyMQ==", "bodyText": "Sorry for my carelessness. Should quote for \",{} and escape \".", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429553721", "createdAt": "2020-05-23T15:06:49Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "diffHunk": "@@ -582,6 +583,21 @@ private void writeDataColumn(JdbcResultSet rs, int column, int pgType, boolean t\n                 write(data);\n                 break;\n             }\n+            case PgServer.PG_TYPE_TEXTARRAY:\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                baos.write('{');\n+                Value[] values = ((ValueArray) v).getList();\n+                Charset encoding = getEncoding();\n+                for (int i = 0; i < values.length; i++) {\n+                    if (i > 0) {\n+                        baos.write(',');\n+                    }\n+                    baos.write(values[i].getString().getBytes(encoding));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0OTcxOQ=="}, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI4OTUxOnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoxNjoyMFrOGZppGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoxNjoyMFrOGZppGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0OTg0OA==", "bodyText": "This import should be removed.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429549848", "createdAt": "2020-05-23T14:16:20Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -32,6 +34,7 @@\n import org.h2.test.TestDb;\n import org.h2.tools.Server;\n import org.h2.util.DateTimeUtils;\n+import org.postgresql.jdbc.PgArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI5MDM2OnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoxODowMlrOGZppiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNToxMjo0NFrOGZp57g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0OTk2Mw==", "bodyText": "If you want to test INTEGER ARRAY, you need to add some support for it first. Currently all arrays are incorrectly mapped to PG_TYPE_TEXTARRAY, but they should be mapped to different types of PostgreSQL, this type is suitable only for VARCHAR ARRAY.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429549963", "createdAt": "2020-05-23T14:18:02Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -695,4 +699,34 @@ private void testOtherPgClients() throws SQLException {\n             conn0.close();\n         }\n     }\n+\n+    private void testArray() throws Exception {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        try (\n+                Connection conn = DriverManager.getConnection(\n+                        \"jdbc:postgresql://localhost:5535/pgserver\", \"sa\", \"sa\");\n+                Statement stat = conn.createStatement();\n+        ) {\n+            stat.execute(\"CREATE TABLE test (id int primary key, x1 int array, x2 varchar array)\");\n+            stat.execute(\"INSERT INTO test (id, x1, x2) VALUES (1, ARRAY[2, 3], ARRAY['4', '5'])\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1NDE1OA==", "bodyText": "Just test VARCHAR ARRAY only. Will add support for INTEGER ARRAY later. Some types may be added, like:\npublic static final int PG_TYPE_BOOLARRAY = 1000; \npublic static final int PG_TYPE_INT2ARRAY = 1005; \npublic static final int PG_TYPE_INT4ARRAY = 1007;\npublic static final int PG_TYPE_INT8ARRAY = 1016;\npublic static final int PG_TYPE_FLOAT4ARRAY = 1021;\npublic static final int PG_TYPE_FLOAT8ARRAY = 1022;\n...", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429554158", "createdAt": "2020-05-23T15:12:44Z", "author": {"login": "auntyellow"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -695,4 +699,34 @@ private void testOtherPgClients() throws SQLException {\n             conn0.close();\n         }\n     }\n+\n+    private void testArray() throws Exception {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        try (\n+                Connection conn = DriverManager.getConnection(\n+                        \"jdbc:postgresql://localhost:5535/pgserver\", \"sa\", \"sa\");\n+                Statement stat = conn.createStatement();\n+        ) {\n+            stat.execute(\"CREATE TABLE test (id int primary key, x1 int array, x2 varchar array)\");\n+            stat.execute(\"INSERT INTO test (id, x1, x2) VALUES (1, ARRAY[2, 3], ARRAY['4', '5'])\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0OTk2Mw=="}, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTI5MTEzOnYy", "diffSide": "RIGHT", "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoxOTo0N1rOGZpp_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjoxMDo1NFrOGZsPYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDA3OQ==", "bodyText": "Please, add tests for special characters and for array assignments via parameters of PreparedStatement and all necessary code for them.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429550079", "createdAt": "2020-05-23T14:19:47Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -695,4 +699,34 @@ private void testOtherPgClients() throws SQLException {\n             conn0.close();\n         }\n     }\n+\n+    private void testArray() throws Exception {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        try (\n+                Connection conn = DriverManager.getConnection(\n+                        \"jdbc:postgresql://localhost:5535/pgserver\", \"sa\", \"sa\");\n+                Statement stat = conn.createStatement();\n+        ) {\n+            stat.execute(\"CREATE TABLE test (id int primary key, x1 int array, x2 varchar array)\");\n+            stat.execute(\"INSERT INTO test (id, x1, x2) VALUES (1, ARRAY[2, 3], ARRAY['4', '5'])\");\n+            try (ResultSet rs = stat.executeQuery(\n+                    \"SELECT x1, x2 FROM test WHERE id = 1\")) {\n+                assertTrue(rs.next());\n+                Object[] arr = (Object[]) rs.getArray(1).getArray();\n+                assertEquals(\"2\", arr[0]);\n+                assertEquals(\"3\", arr[1]);\n+                arr = (Object[]) rs.getArray(2).getArray();\n+                assertEquals(\"4\", arr[0]);\n+                assertEquals(\"5\", arr[1]);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1NTAyOQ==", "bodyText": "Prepare statement for an Array does not work like\nPreparedStatement ps = conn.prepareStatement(\"INSERT INTO test (id, x1) VALUES (1, ?)\")\nArray arr = conn.createArrayOf(\"VARCHAR\", new Object[] {\"'a'b'c'\", \"d\\\"e\", \"{,}\"});\n\npg-jdbc seems to generate an SQL that H2 does not support:\nSELECT t.oid, t.typname   FROM pg_catalog.pg_type t  JOIN pg_catalog.pg_namespace n ON t.typnamespace = n.oid WHERE t.typelem = (SELECT oid FROM pg_catalog.pg_type WHERE typname = $1) AND substring(t.typname, 1, 1) = '_' AND t.typlen = -1 AND (n.nspname = $2 OR $3 AND n.nspname = ANY (current_schemas(true))) ORDER BY t.typelem DESC LIMIT 1", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429555029", "createdAt": "2020-05-23T15:24:21Z", "author": {"login": "auntyellow"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -695,4 +699,34 @@ private void testOtherPgClients() throws SQLException {\n             conn0.close();\n         }\n     }\n+\n+    private void testArray() throws Exception {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        try (\n+                Connection conn = DriverManager.getConnection(\n+                        \"jdbc:postgresql://localhost:5535/pgserver\", \"sa\", \"sa\");\n+                Statement stat = conn.createStatement();\n+        ) {\n+            stat.execute(\"CREATE TABLE test (id int primary key, x1 int array, x2 varchar array)\");\n+            stat.execute(\"INSERT INTO test (id, x1, x2) VALUES (1, ARRAY[2, 3], ARRAY['4', '5'])\");\n+            try (ResultSet rs = stat.executeQuery(\n+                    \"SELECT x1, x2 FROM test WHERE id = 1\")) {\n+                assertTrue(rs.next());\n+                Object[] arr = (Object[]) rs.getArray(1).getArray();\n+                assertEquals(\"2\", arr[0]);\n+                assertEquals(\"3\", arr[1]);\n+                arr = (Object[]) rs.getArray(2).getArray();\n+                assertEquals(\"4\", arr[0]);\n+                assertEquals(\"5\", arr[1]);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDA3OQ=="}, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1NTk2MQ==", "bodyText": "Does it work with setObject(column, Object[] or String[])?", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429555961", "createdAt": "2020-05-23T15:36:33Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -695,4 +699,34 @@ private void testOtherPgClients() throws SQLException {\n             conn0.close();\n         }\n     }\n+\n+    private void testArray() throws Exception {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        try (\n+                Connection conn = DriverManager.getConnection(\n+                        \"jdbc:postgresql://localhost:5535/pgserver\", \"sa\", \"sa\");\n+                Statement stat = conn.createStatement();\n+        ) {\n+            stat.execute(\"CREATE TABLE test (id int primary key, x1 int array, x2 varchar array)\");\n+            stat.execute(\"INSERT INTO test (id, x1, x2) VALUES (1, ARRAY[2, 3], ARRAY['4', '5'])\");\n+            try (ResultSet rs = stat.executeQuery(\n+                    \"SELECT x1, x2 FROM test WHERE id = 1\")) {\n+                assertTrue(rs.next());\n+                Object[] arr = (Object[]) rs.getArray(1).getArray();\n+                assertEquals(\"2\", arr[0]);\n+                assertEquals(\"3\", arr[1]);\n+                arr = (Object[]) rs.getArray(2).getArray();\n+                assertEquals(\"4\", arr[0]);\n+                assertEquals(\"5\", arr[1]);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDA3OQ=="}, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1ODMyMA==", "bodyText": "setObject(column, String[], Types.ARRAY) works, and send:\nINSERT INTO test (id, x1) VALUES (1, $1)\n$1 = {\"'a'b'c'\", \"d\\\"e\", \"{,}\"}\n\nBut H2 gets an array with one element {\"{\\\"'a'b'c'\\\", \\\"d\\\\\\\"e\\\", \\\"{,}\\\"}\"}.\nAnd PostgreSQL 12 works correct.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429558320", "createdAt": "2020-05-23T16:08:19Z", "author": {"login": "auntyellow"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -695,4 +699,34 @@ private void testOtherPgClients() throws SQLException {\n             conn0.close();\n         }\n     }\n+\n+    private void testArray() throws Exception {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        try (\n+                Connection conn = DriverManager.getConnection(\n+                        \"jdbc:postgresql://localhost:5535/pgserver\", \"sa\", \"sa\");\n+                Statement stat = conn.createStatement();\n+        ) {\n+            stat.execute(\"CREATE TABLE test (id int primary key, x1 int array, x2 varchar array)\");\n+            stat.execute(\"INSERT INTO test (id, x1, x2) VALUES (1, ARRAY[2, 3], ARRAY['4', '5'])\");\n+            try (ResultSet rs = stat.executeQuery(\n+                    \"SELECT x1, x2 FROM test WHERE id = 1\")) {\n+                assertTrue(rs.next());\n+                Object[] arr = (Object[]) rs.getArray(1).getArray();\n+                assertEquals(\"2\", arr[0]);\n+                assertEquals(\"3\", arr[1]);\n+                arr = (Object[]) rs.getArray(2).getArray();\n+                assertEquals(\"4\", arr[0]);\n+                assertEquals(\"5\", arr[1]);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDA3OQ=="}, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5MjQxNg==", "bodyText": "Hypothetically PgServerThread.setParameter() can parse PG_TYPE_TEXTARRAY parameters in that way.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429592416", "createdAt": "2020-05-24T02:10:54Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -695,4 +699,34 @@ private void testOtherPgClients() throws SQLException {\n             conn0.close();\n         }\n     }\n+\n+    private void testArray() throws Exception {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        try (\n+                Connection conn = DriverManager.getConnection(\n+                        \"jdbc:postgresql://localhost:5535/pgserver\", \"sa\", \"sa\");\n+                Statement stat = conn.createStatement();\n+        ) {\n+            stat.execute(\"CREATE TABLE test (id int primary key, x1 int array, x2 varchar array)\");\n+            stat.execute(\"INSERT INTO test (id, x1, x2) VALUES (1, ARRAY[2, 3], ARRAY['4', '5'])\");\n+            try (ResultSet rs = stat.executeQuery(\n+                    \"SELECT x1, x2 FROM test WHERE id = 1\")) {\n+                assertTrue(rs.next());\n+                Object[] arr = (Object[]) rs.getArray(1).getArray();\n+                assertEquals(\"2\", arr[0]);\n+                assertEquals(\"3\", arr[1]);\n+                arr = (Object[]) rs.getArray(2).getArray();\n+                assertEquals(\"4\", arr[0]);\n+                assertEquals(\"5\", arr[1]);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDA3OQ=="}, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2179, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}