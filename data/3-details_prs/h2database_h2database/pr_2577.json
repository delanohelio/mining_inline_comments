{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MDAxOTYw", "number": 2577, "title": "PgServer: `array_to_string()` and `set join_collapse_limit`", "bodyText": "Some PostgreSQL compatibility features mentioned in issue #2450", "createdAt": "2020-04-22T02:16:51Z", "url": "https://github.com/h2database/h2database/pull/2577", "merged": true, "mergeCommit": {"oid": "f3b092acfef9a28c0068c1d9312e44c7dadc5054"}, "closed": true, "closedAt": "2020-04-24T00:06:44Z", "author": {"login": "auntyellow"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ_60LgBqjMyNTg3MDM2MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcalW6xABqjMyNjcyNDM0MTQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fd7161f22c36d1a331fe001f902a0c7c33c7648f", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/fd7161f22c36d1a331fe001f902a0c7c33c7648f", "committedDate": "2020-04-22T02:10:47Z", "message": "array_to_string() and set join_collapse_limit"}, "afterCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "committedDate": "2020-04-22T03:42:01Z", "message": "array_to_string() and set join_collapse_limit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODM0MDM0", "url": "https://github.com/h2database/h2database/pull/2577#pullrequestreview-397834034", "createdAt": "2020-04-22T04:24:51Z", "commit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDoyNDo1MVrOGJivGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNDozODo0NVrOGJjAlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY1OTQ4MA==", "bodyText": "I think this function is expected to be deterministic and in the PostgreSQL it has variable number of arguments.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412659480", "createdAt": "2020-04-22T04:24:51Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -101,6 +105,8 @@\n                 PG_TABLE_IS_VISIBLE, 1, Value.BOOLEAN, true, false, true, false));\n         FUNCTIONS.put(\"SET_CONFIG\", new FunctionInfo(\"SET_CONFIG\", //\n                 SET_CONFIG, 3, Value.VARCHAR, true, false, true, false));\n+        FUNCTIONS.put(\"ARRAY_TO_STRING\", new FunctionInfo(\"ARRAY_TO_STRING\", //\n+                ARRAY_TO_STRING, 2, Value.VARCHAR, true, false, true, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MDQyNg==", "bodyText": "Such conversion to untyped array will be rejected in the future and PostgreSQL doesn't really accept values of other data types here. You need to check getValueType() and throw DbException.getInvalidValueException(\u2026) if passed value is not an array.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412660426", "createdAt": "2020-04-22T04:27:44Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2MTUxMQ==", "bodyText": "Why v != null is needed here?\n\n\nUse v == ValueNull.INSTANCE for a null check.\n\n\nIf an optional third argument is specified, it should be used as replacement for null values.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412661511", "createdAt": "2020-04-22T04:31:10Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +227,16 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            ValueArray va = (ValueArray) v0.convertTo(TypeInfo.TYPE_ARRAY);\n+            for (Value v : va.getList()) {\n+                if (v != null && !(v instanceof ValueNull)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY2Mzk1OQ==", "bodyText": "We prefer pure SQL tests for such functions, see TestScript and .sql files.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r412663959", "createdAt": "2020-04-22T04:38:45Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -270,6 +270,14 @@ private void testPgClient() throws SQLException {\n         rs.next();\n         assertEquals(1, rs.getInt(1));\n \n+        rs = stat.executeQuery(\"select array_to_string(array[null, 0, 1, null, 2], ',')\");\n+        rs.next();\n+        assertEquals(\"0,1,2\", rs.getString(1));\n+\n+        rs = stat.executeQuery(\"select array_to_string(array['a', null, '', 'b', null], ',')\");\n+        rs.next();\n+        assertEquals(\"a,,b\", rs.getString(1));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/0fc92febf585144ab69cb1a2a5bbdd74bf856dee", "committedDate": "2020-04-22T03:42:01Z", "message": "array_to_string() and set join_collapse_limit"}, "afterCommit": {"oid": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "committedDate": "2020-04-22T13:59:39Z", "message": "array_to_string() and set join_collapse_limit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjQxNjI3", "url": "https://github.com/h2database/h2database/pull/2577#pullrequestreview-398241627", "createdAt": "2020-04-22T14:20:37Z", "commit": {"oid": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoyMDozN1rOGJ5ESw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoyMDozN1rOGJ5ESw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAyNTM1NQ==", "bodyText": "Third argument may also be NULL. I think there is no reason to bother with its data type, you can use something like that:\nString nullValue = null;\nif (v2 != null) {\n    nullValue = v2.getString();\n}", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413025355", "createdAt": "2020-04-22T14:20:37Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,27 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type < Value.CHAR || v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/d1e6b847ec04d0a07f9dee4518b5cf367fc212dd", "committedDate": "2020-04-22T13:59:39Z", "message": "array_to_string() and set join_collapse_limit"}, "afterCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/4bb82ff6aa715d2ef73072cb5532ee253137b326", "committedDate": "2020-04-22T23:06:17Z", "message": "array_to_string() and set join_collapse_limit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzE1Nzgy", "url": "https://github.com/h2database/h2database/pull/2577#pullrequestreview-398715782", "createdAt": "2020-04-23T02:25:12Z", "commit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjoyNToxMlrOGKTsrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMjoyODozNVrOGKTxLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MTY3OA==", "bodyText": "You need to return ValueNull.INSTANCE if v0 or v1 are equal to ValueNull.INSTANCE before this condition, because this function now processes nulls by itself.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413461678", "createdAt": "2020-04-23T02:25:12Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ2MjgzMA==", "bodyText": "What do you want from its value type and why this condition may accept random data types? These constants aren't fixed in H2, they may be modified at any time.\nUse\nString nullString = null;\nif (v2 != null) {\n    nullString = v2.getString();\n}\nas it was suggested earlier. Additional checks not worth here.", "url": "https://github.com/h2database/h2database/pull/2577#discussion_r413462830", "createdAt": "2020-04-23T02:28:35Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -221,6 +231,29 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(v1.getString());\n+            if (v0.getValueType() != Value.ARRAY) {\n+                throw DbException.getInvalidValueException(\"ARRAY_TO_STRING array\", v0);\n+            }\n+            if (v2 != null) {\n+                int v2Type = v2.getValueType();\n+                if (v2Type > Value.VARCHAR_IGNORECASE) {\n+                    throw DbException.getInvalidValueException(\"ARRAY_TO_STRING optional_null_string\", v2);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "committedDate": "2020-04-23T23:19:16Z", "message": "array_to_string() and set join_collapse_limit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4bb82ff6aa715d2ef73072cb5532ee253137b326", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/4bb82ff6aa715d2ef73072cb5532ee253137b326", "committedDate": "2020-04-22T23:06:17Z", "message": "array_to_string() and set join_collapse_limit"}, "afterCommit": {"oid": "a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/a76f7e7fc7ea2f75ac00289d0d7cf246db5c35ea", "committedDate": "2020-04-23T23:19:16Z", "message": "array_to_string() and set join_collapse_limit"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3859, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}