{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0Njg2MDAx", "number": 2406, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNzozOToxMlrODarfTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNzozOToyOFrODarfUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzAyMDkzOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/value/Value.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNzozOToxMlrOFhwvFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNDoxMzowOFrOFhyWpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0NTgxNA==", "bodyText": "for to -> to", "url": "https://github.com/h2database/h2database/pull/2406#discussion_r370945814", "createdAt": "2020-01-25T17:39:12Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/value/Value.java", "diffHunk": "@@ -702,17 +702,73 @@ public final Value convertTo(int targetType, CastDataProvider provider) {\n     }\n \n     /**\n-     * Convert a value to the specified type.\n+     * Convert a value to the specified type without taking scale and precision\n+     * into account.\n      *\n-     * @param targetType the type of the returned value\n-     * @param provider the cast information provider\n-     * @param column the column (if any), used for to improve the error message if conversion fails\n+     * @param targetType\n+     *            the type of the returned value\n+     * @param provider\n+     *            the cast information provider\n+     * @return the converted value\n+     */\n+    public final Value convertTo(TypeInfo targetType, CastDataProvider provider) {\n+        return convertTo(targetType.getValueType(), targetType.getExtTypeInfo(), provider, null);\n+    }\n+\n+    /**\n+     * Convert a value to the specified type without taking scale and precision\n+     * into account.\n+     *\n+     * @param targetType\n+     *            the type of the returned value\n+     * @param provider\n+     *            the cast information provider\n+     * @param column\n+     *            the column, used for to improve the error message if", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00a9e4a106fca2195bf6923dcc7e808b89b62b74"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MjMyNA==", "bodyText": "4e615c5", "url": "https://github.com/h2database/h2database/pull/2406#discussion_r370972324", "createdAt": "2020-01-26T04:13:08Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/value/Value.java", "diffHunk": "@@ -702,17 +702,73 @@ public final Value convertTo(int targetType, CastDataProvider provider) {\n     }\n \n     /**\n-     * Convert a value to the specified type.\n+     * Convert a value to the specified type without taking scale and precision\n+     * into account.\n      *\n-     * @param targetType the type of the returned value\n-     * @param provider the cast information provider\n-     * @param column the column (if any), used for to improve the error message if conversion fails\n+     * @param targetType\n+     *            the type of the returned value\n+     * @param provider\n+     *            the cast information provider\n+     * @return the converted value\n+     */\n+    public final Value convertTo(TypeInfo targetType, CastDataProvider provider) {\n+        return convertTo(targetType.getValueType(), targetType.getExtTypeInfo(), provider, null);\n+    }\n+\n+    /**\n+     * Convert a value to the specified type without taking scale and precision\n+     * into account.\n+     *\n+     * @param targetType\n+     *            the type of the returned value\n+     * @param provider\n+     *            the cast information provider\n+     * @param column\n+     *            the column, used for to improve the error message if", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0NTgxNA=="}, "originalCommit": {"oid": "00a9e4a106fca2195bf6923dcc7e808b89b62b74"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MzAyMDk3OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/value/Value.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNVQxNzozOToyOFrOFhwvHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNlQwNDoxMzoxNFrOFhyWrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0NTgyMg==", "bodyText": "to a -> to the", "url": "https://github.com/h2database/h2database/pull/2406#discussion_r370945822", "createdAt": "2020-01-25T17:39:28Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/value/Value.java", "diffHunk": "@@ -702,17 +702,73 @@ public final Value convertTo(int targetType, CastDataProvider provider) {\n     }\n \n     /**\n-     * Convert a value to the specified type.\n+     * Convert a value to the specified type without taking scale and precision\n+     * into account.\n      *\n-     * @param targetType the type of the returned value\n-     * @param provider the cast information provider\n-     * @param column the column (if any), used for to improve the error message if conversion fails\n+     * @param targetType\n+     *            the type of the returned value\n+     * @param provider\n+     *            the cast information provider\n+     * @return the converted value\n+     */\n+    public final Value convertTo(TypeInfo targetType, CastDataProvider provider) {\n+        return convertTo(targetType.getValueType(), targetType.getExtTypeInfo(), provider, null);\n+    }\n+\n+    /**\n+     * Convert a value to the specified type without taking scale and precision\n+     * into account.\n+     *\n+     * @param targetType\n+     *            the type of the returned value\n+     * @param provider\n+     *            the cast information provider\n+     * @param column\n+     *            the column, used for to improve the error message if\n+     *            conversion fails\n      * @return the converted value\n      */\n     public final Value convertTo(TypeInfo targetType, CastDataProvider provider, Object column) {\n         return convertTo(targetType.getValueType(), targetType.getExtTypeInfo(), provider, column);\n     }\n \n+    /**\n+     * Cast a value to the specified type. The scale is set if applicable. The\n+     * value is truncated to a required precision.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00a9e4a106fca2195bf6923dcc7e808b89b62b74"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk3MjMzMw==", "bodyText": "4e615c5", "url": "https://github.com/h2database/h2database/pull/2406#discussion_r370972333", "createdAt": "2020-01-26T04:13:14Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/value/Value.java", "diffHunk": "@@ -702,17 +702,73 @@ public final Value convertTo(int targetType, CastDataProvider provider) {\n     }\n \n     /**\n-     * Convert a value to the specified type.\n+     * Convert a value to the specified type without taking scale and precision\n+     * into account.\n      *\n-     * @param targetType the type of the returned value\n-     * @param provider the cast information provider\n-     * @param column the column (if any), used for to improve the error message if conversion fails\n+     * @param targetType\n+     *            the type of the returned value\n+     * @param provider\n+     *            the cast information provider\n+     * @return the converted value\n+     */\n+    public final Value convertTo(TypeInfo targetType, CastDataProvider provider) {\n+        return convertTo(targetType.getValueType(), targetType.getExtTypeInfo(), provider, null);\n+    }\n+\n+    /**\n+     * Convert a value to the specified type without taking scale and precision\n+     * into account.\n+     *\n+     * @param targetType\n+     *            the type of the returned value\n+     * @param provider\n+     *            the cast information provider\n+     * @param column\n+     *            the column, used for to improve the error message if\n+     *            conversion fails\n      * @return the converted value\n      */\n     public final Value convertTo(TypeInfo targetType, CastDataProvider provider, Object column) {\n         return convertTo(targetType.getValueType(), targetType.getExtTypeInfo(), provider, column);\n     }\n \n+    /**\n+     * Cast a value to the specified type. The scale is set if applicable. The\n+     * value is truncated to a required precision.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDk0NTgyMg=="}, "originalCommit": {"oid": "00a9e4a106fca2195bf6923dcc7e808b89b62b74"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2203, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}