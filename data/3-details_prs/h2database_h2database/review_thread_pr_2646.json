{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMzUzNzUx", "number": 2646, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjo1MTowMlrOD_KusQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNDo0OTozNVrOD_K9ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTYyNjczOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/mode/PgCatalogTable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMjo1MTowMlrOGZsWKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMzowNDozNlrOGZsYMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NDE1Mg==", "bodyText": "constraintType.getSqlName() is more reliable than toString().", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429594152", "createdAt": "2020-05-24T02:51:02Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/PgCatalogTable.java", "diffHunk": "@@ -351,6 +368,34 @@ public PgCatalogTable(Schema schema, int id, int type) {\n             break;\n         case PG_AUTHID:\n             break;\n+        case PG_CONSTRAINT:\n+            for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTRAINT)) {\n+                Constraint constraint = (Constraint) obj;\n+                Constraint.Type constraintType = constraint.getConstraintType();\n+                if (constraintType == Constraint.Type.DOMAIN) {\n+                    continue;\n+                }\n+                Table table = constraint.getTable();\n+                if (hideTable(table, session)) {\n+                    continue;\n+                }\n+                Table refTable = constraint.getRefTable();\n+                add(session,\n+                        rows,\n+                        // OID\n+                        ValueInteger.get(constraint.getId()),\n+                        // CONNAME\n+                        constraint.getName(),\n+                        // CONTYPE\n+                        StringUtils.toLowerEnglish(constraintType.toString().substring(0, 1)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c388347232f6b93ddc3daa34a178bb2dc0d8dfc9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NDY3Mg==", "bodyText": "Yes, fixed. Foreign key should return f but not r.", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429594672", "createdAt": "2020-05-24T03:04:36Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/mode/PgCatalogTable.java", "diffHunk": "@@ -351,6 +368,34 @@ public PgCatalogTable(Schema schema, int id, int type) {\n             break;\n         case PG_AUTHID:\n             break;\n+        case PG_CONSTRAINT:\n+            for (SchemaObject obj : database.getAllSchemaObjects(DbObject.CONSTRAINT)) {\n+                Constraint constraint = (Constraint) obj;\n+                Constraint.Type constraintType = constraint.getConstraintType();\n+                if (constraintType == Constraint.Type.DOMAIN) {\n+                    continue;\n+                }\n+                Table table = constraint.getTable();\n+                if (hideTable(table, session)) {\n+                    continue;\n+                }\n+                Table refTable = constraint.getRefTable();\n+                add(session,\n+                        rows,\n+                        // OID\n+                        ValueInteger.get(constraint.getId()),\n+                        // CONNAME\n+                        constraint.getName(),\n+                        // CONTYPE\n+                        StringUtils.toLowerEnglish(constraintType.toString().substring(0, 1)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NDE1Mg=="}, "originalCommit": {"oid": "c388347232f6b93ddc3daa34a178bb2dc0d8dfc9"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTYzNTI3OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMzoxODo1OFrOGZsaVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwMzoyMDo1MlrOGZsaug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTIyMw==", "bodyText": "You need to double ' characters here. Use StringUtils.quoteStringSQL(StringBuilder, String) for it.\n\n\nSome schema names need to be enclosed into \" characters. Take a look on Parser.quoteIdentifier(). If you don't want to quote all of them for a some reason, you can't use this method directly, but you can do something similar with real databaseToUpper and databaseToLower flags passed to ParserUtil.isSimpleIdentifier().", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429595223", "createdAt": "2020-05-24T03:18:58Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -1572,6 +1572,9 @@ private Prepared parseShow() {\n         } else if (readIf(\"DATESTYLE\")) {\n             // for PostgreSQL compatibility\n             buff.append(\"'ISO' DATESTYLE\");\n+        } else if (readIf(\"SEARCH_PATH\")) {\n+            // for PostgreSQL compatibility\n+            buff.append('\\'').append(String.join(\", \", session.getSchemaSearchPath())).append('\\'');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c59672029882323f72096283f6356372a2c268d0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTMyMg==", "bodyText": "session.getSchemaSearchPath() may return null and this situation should be handled too.", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429595322", "createdAt": "2020-05-24T03:20:52Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -1572,6 +1572,9 @@ private Prepared parseShow() {\n         } else if (readIf(\"DATESTYLE\")) {\n             // for PostgreSQL compatibility\n             buff.append(\"'ISO' DATESTYLE\");\n+        } else if (readIf(\"SEARCH_PATH\")) {\n+            // for PostgreSQL compatibility\n+            buff.append('\\'').append(String.join(\", \", session.getSchemaSearchPath())).append('\\'');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5NTIyMw=="}, "originalCommit": {"oid": "c59672029882323f72096283f6356372a2c268d0"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTY2MDE1OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNDozNjo0OVrOGZsmQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNDo0ODowOVrOGZsoPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODI3Mw==", "bodyText": "If you want to return null here, use buff.append(\"CAST(NULL AS VARCHAR)\"). Maybe empty string (buff.append(\"''\")) should be used instead, I don't know how to test it in the real PostgreSQL. I don't see any way to clear the path in it.", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429598273", "createdAt": "2020-05-24T04:36:49Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -1572,6 +1572,22 @@ private Prepared parseShow() {\n         } else if (readIf(\"DATESTYLE\")) {\n             // for PostgreSQL compatibility\n             buff.append(\"'ISO' DATESTYLE\");\n+        } else if (readIf(\"SEARCH_PATH\")) {\n+            // for PostgreSQL compatibility\n+            String[] searchPath = session.getSchemaSearchPath();\n+            if (searchPath == null || searchPath.length == 0) {\n+                StringUtils.quoteStringSQL(buff, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58c6c1d5bdb66d4c3322060c763535f3dd07987a"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODc4MA==", "bodyText": "I just leave empty string for session.getSchemaSearchPath() == null, although this seems never happen.", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429598780", "createdAt": "2020-05-24T04:48:09Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -1572,6 +1572,22 @@ private Prepared parseShow() {\n         } else if (readIf(\"DATESTYLE\")) {\n             // for PostgreSQL compatibility\n             buff.append(\"'ISO' DATESTYLE\");\n+        } else if (readIf(\"SEARCH_PATH\")) {\n+            // for PostgreSQL compatibility\n+            String[] searchPath = session.getSchemaSearchPath();\n+            if (searchPath == null || searchPath.length == 0) {\n+                StringUtils.quoteStringSQL(buff, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODI3Mw=="}, "originalCommit": {"oid": "58c6c1d5bdb66d4c3322060c763535f3dd07987a"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NTY2NDQyOnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/command/Parser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNDo0OTozNVrOGZsoYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNFQwNDo1NDozM1rOGZspNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODgxNg==", "bodyText": "if searchPath == null an invalid SQL is generated (SELECT SEARCH_PATH) instead of expected SELECT '' SEARCH_PATH. Either append '' explicitly (and move searchPathBuff into if), or move StringUtils.quoteStringSQL(buff, searchPathBuff.toString()); outside of if.", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429598816", "createdAt": "2020-05-24T04:49:35Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -1572,6 +1572,20 @@ private Prepared parseShow() {\n         } else if (readIf(\"DATESTYLE\")) {\n             // for PostgreSQL compatibility\n             buff.append(\"'ISO' DATESTYLE\");\n+        } else if (readIf(\"SEARCH_PATH\")) {\n+            // for PostgreSQL compatibility\n+            String[] searchPath = session.getSchemaSearchPath();\n+            StringBuilder searchPathBuff = new StringBuilder();\n+            if (searchPath != null) {\n+                for (int i = 0; i < searchPath.length; i ++) {\n+                    if (i > 0) {\n+                        searchPathBuff.append(\", \");\n+                    }\n+                    quoteIdentifier(searchPathBuff, searchPath[i], HasSQL.QUOTE_ONLY_WHEN_REQUIRED);\n+                }\n+                StringUtils.quoteStringSQL(buff, searchPathBuff.toString());\n+            }\n+            buff.append(\" SEARCH_PATH\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bafd7f83991fab6ec18e457876ca5d32103059d2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5OTAzMQ==", "bodyText": "Sorry for the misplacement of StringUtils.quoteStringSQL() : - (", "url": "https://github.com/h2database/h2database/pull/2646#discussion_r429599031", "createdAt": "2020-05-24T04:54:33Z", "author": {"login": "auntyellow"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -1572,6 +1572,20 @@ private Prepared parseShow() {\n         } else if (readIf(\"DATESTYLE\")) {\n             // for PostgreSQL compatibility\n             buff.append(\"'ISO' DATESTYLE\");\n+        } else if (readIf(\"SEARCH_PATH\")) {\n+            // for PostgreSQL compatibility\n+            String[] searchPath = session.getSchemaSearchPath();\n+            StringBuilder searchPathBuff = new StringBuilder();\n+            if (searchPath != null) {\n+                for (int i = 0; i < searchPath.length; i ++) {\n+                    if (i > 0) {\n+                        searchPathBuff.append(\", \");\n+                    }\n+                    quoteIdentifier(searchPathBuff, searchPath[i], HasSQL.QUOTE_ONLY_WHEN_REQUIRED);\n+                }\n+                StringUtils.quoteStringSQL(buff, searchPathBuff.toString());\n+            }\n+            buff.append(\" SEARCH_PATH\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU5ODgxNg=="}, "originalCommit": {"oid": "bafd7f83991fab6ec18e457876ca5d32103059d2"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2183, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}