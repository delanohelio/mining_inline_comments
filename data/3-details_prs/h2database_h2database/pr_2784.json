{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDQ5MjYx", "number": 2784, "title": "Oracle REGEXP_REPLACE support", "bodyText": "Added Oracle REGEXP_REPLACE support\nAdded possibility to override functions in mode-specific classes", "createdAt": "2020-07-30T10:19:26Z", "url": "https://github.com/h2database/h2database/pull/2784", "merged": true, "mergeCommit": {"oid": "bbac9b8fca41876c997106253849f6a3fff3c542"}, "closed": true, "closedAt": "2020-07-30T16:14:01Z", "author": {"login": "RomanBoyars"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc596QEABqjM2MDMzNzA1MTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5_xSOgBqjM2MDM4ODQ3ODQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b2986db9f6bb2d1cb88b8249f5f07e3d5fa260a", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/8b2986db9f6bb2d1cb88b8249f5f07e3d5fa260a", "committedDate": "2020-07-30T11:26:18Z", "message": "test cases"}, "afterCommit": {"oid": "20ce1eed562c4235b7bd9ca560f2037dddda3469", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/20ce1eed562c4235b7bd9ca560f2037dddda3469", "committedDate": "2020-07-30T11:27:12Z", "message": "Added Oracle REGEXP_REPLACE support\nAdded possibility to override functions in mode-specific classes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzExMDEx", "url": "https://github.com/h2database/h2database/pull/2784#pullrequestreview-458311011", "createdAt": "2020-07-30T11:23:44Z", "commit": {"oid": "c45412fc8001d4274cfab99655a59ee64ea58fb4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToyMzo0NFrOG5e8eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMToyNToxMlrOG5e_QQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyOTAxNg==", "bodyText": "You can simply compare result of getString() with null, there is no need to check value type.", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462929016", "createdAt": "2020-07-30T11:23:44Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsOracle.java", "diffHunk": "@@ -128,10 +142,40 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n         case TO_TIMESTAMP_TZ:\n             result = ToDateParser.toTimestampTz(session, v0.getString(), v1 == null ? null : v1.getString());\n             break;\n+        case REGEXP_REPLACE:\n+            Boolean replaceBackslashRefs = session.getMode().regexpReplaceBackslashReferences;\n+            String regexpResult = regexpReplace(replaceBackslashRefs, v0, v1, v2, v3, v4, v5);\n+            result = ValueVarchar.get(regexpResult, session);\n+            break;\n         default:\n             throw DbException.throwInternalError(\"type=\" + info.type);\n         }\n         return result;\n     }\n \n+    private static String regexpReplace(Boolean replaceBackslashRefs, Value ... args) {\n+        String input = args[0].getString();\n+        String regexp = args[1].getValueType() != Value.NULL ? args[1].getString() : \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45412fc8001d4274cfab99655a59ee64ea58fb4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjkyOTcyOQ==", "bodyText": "What are you trying to do here? Fourth argument may only be integer in Oracle, or I'm missing something?", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462929729", "createdAt": "2020-07-30T11:25:12Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsOracle.java", "diffHunk": "@@ -128,10 +142,40 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n         case TO_TIMESTAMP_TZ:\n             result = ToDateParser.toTimestampTz(session, v0.getString(), v1 == null ? null : v1.getString());\n             break;\n+        case REGEXP_REPLACE:\n+            Boolean replaceBackslashRefs = session.getMode().regexpReplaceBackslashReferences;\n+            String regexpResult = regexpReplace(replaceBackslashRefs, v0, v1, v2, v3, v4, v5);\n+            result = ValueVarchar.get(regexpResult, session);\n+            break;\n         default:\n             throw DbException.throwInternalError(\"type=\" + info.type);\n         }\n         return result;\n     }\n \n+    private static String regexpReplace(Boolean replaceBackslashRefs, Value ... args) {\n+        String input = args[0].getString();\n+        String regexp = args[1].getValueType() != Value.NULL ? args[1].getString() : \"\";\n+        String replacement = args[2].getValueType() != Value.NULL ? args[2].getString() : \"\";\n+        if (replaceBackslashRefs) {\n+            replacement = StringUtils.replaceBackslashReferences(replacement);\n+        }\n+        int position = 1;\n+        int occurrence = 0;\n+        String regexpMode = \"\";\n+\n+        if (args[3] != null) {\n+            if (args[3].getValueType() == Value.VARCHAR) {\n+                regexpMode = args[3].getString() == null ? args[3].getString() : \"\";\n+            } else if (args[3].getValueType() == Value.INTEGER) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c45412fc8001d4274cfab99655a59ee64ea58fb4"}, "originalPosition": 82}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20ce1eed562c4235b7bd9ca560f2037dddda3469", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/20ce1eed562c4235b7bd9ca560f2037dddda3469", "committedDate": "2020-07-30T11:27:12Z", "message": "Added Oracle REGEXP_REPLACE support\nAdded possibility to override functions in mode-specific classes"}, "afterCommit": {"oid": "4b3f13f4b9e9884cf846b9d953f16c8d13b82109", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/4b3f13f4b9e9884cf846b9d953f16c8d13b82109", "committedDate": "2020-07-30T12:06:22Z", "message": "Added Oracle REGEXP_REPLACE support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4b3f13f4b9e9884cf846b9d953f16c8d13b82109", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/4b3f13f4b9e9884cf846b9d953f16c8d13b82109", "committedDate": "2020-07-30T12:06:22Z", "message": "Added Oracle REGEXP_REPLACE support"}, "afterCommit": {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/37ea132f0b85c245548b26cfda55e3fce4a32b86", "committedDate": "2020-07-30T12:11:52Z", "message": "Added Oracle REGEXP_REPLACE support"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4MzQ3MTM2", "url": "https://github.com/h2database/h2database/pull/2784#pullrequestreview-458347136", "createdAt": "2020-07-30T12:22:13Z", "commit": {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjoyMjoxM1rOG5gpFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0ODoyOVrOG5hgpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1NjgyMA==", "bodyText": "Use == instead of equals() for enumerations.", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462956820", "createdAt": "2020-07-30T12:22:13Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -776,8 +776,20 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n             String input = v0.getString();\n             String regexp = v1.getString();\n             String replacement = v2.getString();\n-            String regexpMode = v3 != null ? v3.getString() : null;\n-            result = regexpReplace(session, input, regexp, replacement, regexpMode);\n+\n+            if (ModeEnum.Oracle.equals(session.getMode().getEnum())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1OTEzNQ==", "bodyText": "if (v4 != null) {\n    throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2, info.name, \"3..4\");\n}\nif (v0 == ValueNull.INSTANCE || v1 == ValueNull.INSTANCE || v2 == ValueNull.INSTANCE || v3 == ValueNull.INSTANCE) {\n    result = ValueNull.INSTANCE;\n} else {\n    \u2026\n}", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462959135", "createdAt": "2020-07-30T12:26:37Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -776,8 +776,20 @@ protected Value getValueWithArgs(SessionLocal session, Expression[] args) {\n             String input = v0.getString();\n             String regexp = v1.getString();\n             String replacement = v2.getString();\n-            String regexpMode = v3 != null ? v3.getString() : null;\n-            result = regexpReplace(session, input, regexp, replacement, regexpMode);\n+\n+            if (ModeEnum.Oracle.equals(session.getMode().getEnum())) {\n+                if (replacement == null) {\n+                    replacement = \"\";\n+                }\n+                int position = v3 != null ? v3.getInt() : 1;\n+                int occurrence = v4 != null ? v4.getInt() : 0;\n+                String regexpMode = v5 != null ? v5.getString() : null;\n+                result = regexpReplace(session, input, regexp, replacement, position, occurrence,\n+                        regexpMode);\n+            } else {\n+                String regexpMode = v3 != null ? v3.getString() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk1OTU1MQ==", "bodyText": "Please, indent wrapped lines with 8 additional spaces. Don't align arguments, such alignment breaks code style checks.", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462959551", "createdAt": "2020-07-30T12:27:24Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1513,8 +1525,9 @@ private static MessageDigest hashImpl(Value value, MessageDigest md) {\n         }\n     }\n \n-    private static Value regexpReplace(SessionLocal session, String input, String regexp, String replacement,\n-            String regexpMode) {\n+    private static Value regexpReplace(SessionLocal session, String input, String regexp,\n+                                       String replacement, int position, int occurrence,\n+                                       String regexpMode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2MzgwOA==", "bodyText": "You need to additionally test your implementation with 5 and 6 arguments and with empty strings in other arguments too.\nIf your IDE has some built-in code coverage tool, run it with TestScript class and make sure that all new conditions are covered with tests.", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462963808", "createdAt": "2020-07-30T12:35:26Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/scripts/functions/string/regex-replace.sql", "diffHunk": "@@ -15,6 +15,18 @@ select regexp_replace('Sylvain', 'S..', 'TOTO', 'mni');\n set mode oracle;\n > ok\n \n+select regexp_replace('.1.2.3.4', '[^0-9]', '', 1, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2OTc0OA==", "bodyText": "I guess you need to check result of find() method.", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462969748", "createdAt": "2020-07-30T12:46:14Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,11 +1547,21 @@ private static Value regexpReplace(SessionLocal session, String input, String re\n         }\n         boolean isInPostgreSqlMode = Mode.ModeEnum.PostgreSQL.equals(mode.getEnum());\n         int flags = makeRegexpFlags(regexpMode, isInPostgreSqlMode);\n+        if (isInPostgreSqlMode && ( regexpMode == null || regexpMode.isEmpty() || !regexpMode.contains(\"g\"))) {\n+            occurrence = 1;\n+        }\n         try {\n-            Matcher matcher = Pattern.compile(regexp, flags).matcher(input);\n-            return ValueVarchar.get(isInPostgreSqlMode && (regexpMode == null || regexpMode.indexOf('g') < 0) ?\n-                    matcher.replaceFirst(replacement) : matcher.replaceAll(replacement),\n-                    session);\n+            Matcher matcher = Pattern.compile(regexp, flags).matcher(input).region(position - 1, input.length());\n+            if (occurrence == 0) {\n+                return ValueVarchar.get(matcher.replaceAll(replacement), session);\n+            } else {\n+                for(int i = 0; i < occurrence; i++) {\n+                    matcher.find();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk3MTA0Nw==", "bodyText": "Please, don't compile a new Pattern for the same regular expression here. Try to use an existing Matcher directly.", "url": "https://github.com/h2database/h2database/pull/2784#discussion_r462971047", "createdAt": "2020-07-30T12:48:29Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/expression/function/Function.java", "diffHunk": "@@ -1534,11 +1547,21 @@ private static Value regexpReplace(SessionLocal session, String input, String re\n         }\n         boolean isInPostgreSqlMode = Mode.ModeEnum.PostgreSQL.equals(mode.getEnum());\n         int flags = makeRegexpFlags(regexpMode, isInPostgreSqlMode);\n+        if (isInPostgreSqlMode && ( regexpMode == null || regexpMode.isEmpty() || !regexpMode.contains(\"g\"))) {\n+            occurrence = 1;\n+        }\n         try {\n-            Matcher matcher = Pattern.compile(regexp, flags).matcher(input);\n-            return ValueVarchar.get(isInPostgreSqlMode && (regexpMode == null || regexpMode.indexOf('g') < 0) ?\n-                    matcher.replaceFirst(replacement) : matcher.replaceAll(replacement),\n-                    session);\n+            Matcher matcher = Pattern.compile(regexp, flags).matcher(input).region(position - 1, input.length());\n+            if (occurrence == 0) {\n+                return ValueVarchar.get(matcher.replaceAll(replacement), session);\n+            } else {\n+                for(int i = 0; i < occurrence; i++) {\n+                    matcher.find();\n+                }\n+                int startIndex = matcher.start();\n+                return ValueVarchar.get(input.substring(0, startIndex) + input.substring(startIndex).replaceFirst(regexp,\n+                        replacement), session);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86"}, "originalPosition": 66}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "37ea132f0b85c245548b26cfda55e3fce4a32b86", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/37ea132f0b85c245548b26cfda55e3fce4a32b86", "committedDate": "2020-07-30T12:11:52Z", "message": "Added Oracle REGEXP_REPLACE support"}, "afterCommit": {"oid": "f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "committedDate": "2020-07-30T13:23:47Z", "message": "Added Oracle REGEXP_REPLACE support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52414e75e3bd51d6dee25255043a975210b9d91c", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/52414e75e3bd51d6dee25255043a975210b9d91c", "committedDate": "2020-07-30T13:37:15Z", "message": "Added Oracle REGEXP_REPLACE support"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/f6e1c232ef8cf7a548d39a8cfed45ab403d2655d", "committedDate": "2020-07-30T13:23:47Z", "message": "Added Oracle REGEXP_REPLACE support"}, "afterCommit": {"oid": "52414e75e3bd51d6dee25255043a975210b9d91c", "author": {"user": null}, "url": "https://github.com/h2database/h2database/commit/52414e75e3bd51d6dee25255043a975210b9d91c", "committedDate": "2020-07-30T13:37:15Z", "message": "Added Oracle REGEXP_REPLACE support"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4287, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}