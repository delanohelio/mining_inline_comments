{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMjc1ODAw", "number": 2976, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzozNzo0MVrOFBoyAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzozODo0MFrOFBozTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjYxMDU5OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/engine/Engine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzozNzo0MVrOIAZdiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzozNzo0MVrOIAZdiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4ODA3Mg==", "bodyText": "extra semicolon", "url": "https://github.com/h2database/h2database/pull/2976#discussion_r537288072", "createdAt": "2020-12-07T07:37:41Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/engine/Engine.java", "diffHunk": "@@ -52,65 +52,75 @@ private static SessionLocal openSession(ConnectionInfo ci, boolean ifExists, boo\n         boolean openNew = ci.getProperty(\"OPEN_NEW\", false);\n         boolean opened = false;\n         User user = null;\n-        synchronized (DATABASES) {\n-            if (openNew || ci.isUnnamedInMemory()) {\n-                database = null;\n-            } else {\n-                database = DATABASES.get(name);\n+        DatabaseHolder databaseHolder = new DatabaseHolder();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92708b40851abdb5fbf342e98ba943cef8ee597a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjYxMzg4OnYy", "diffSide": "RIGHT", "path": "h2/src/main/org/h2/engine/Engine.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNzozODo0MFrOIAZfUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzowMjowOVrOIBEvwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4ODUyOA==", "bodyText": "this is a double-checked locking pattern, which always make me nervouse. Given that this is a rather infrequent operation, let's just do the simple thing and always lock the databasHolder?", "url": "https://github.com/h2database/h2database/pull/2976#discussion_r537288528", "createdAt": "2020-12-07T07:38:40Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/engine/Engine.java", "diffHunk": "@@ -52,65 +52,75 @@ private static SessionLocal openSession(ConnectionInfo ci, boolean ifExists, boo\n         boolean openNew = ci.getProperty(\"OPEN_NEW\", false);\n         boolean opened = false;\n         User user = null;\n-        synchronized (DATABASES) {\n-            if (openNew || ci.isUnnamedInMemory()) {\n-                database = null;\n-            } else {\n-                database = DATABASES.get(name);\n+        DatabaseHolder databaseHolder = new DatabaseHolder();;\n+        if (!ci.isUnnamedInMemory()) {\n+            synchronized (DATABASES) {\n+                if (openNew) {\n+                    DATABASES.put(name, databaseHolder);\n+                } else {\n+                    databaseHolder = DATABASES.computeIfAbsent(name, (key) -> new DatabaseHolder());\n+                }\n             }\n-            if (database == null) {\n-                if (ci.isPersistent()) {\n-                    String p = ci.getProperty(\"MV_STORE\");\n-                    String fileName;\n-                    if (p == null) {\n-                        fileName = name + Constants.SUFFIX_MV_FILE;\n-                        if (!FileUtils.exists(fileName)) {\n-                            fileName = name + Constants.SUFFIX_PAGE_FILE;\n-                            if (FileUtils.exists(fileName)) {\n-                                ci.setProperty(\"MV_STORE\", \"false\");\n-                            } else {\n-                                throwNotFound(ifExists, forbidCreation, name);\n-                                fileName = name + Constants.SUFFIX_OLD_DATABASE_FILE;\n+        }\n+        database = databaseHolder.database;\n+        if (database == null) {\n+            synchronized (databaseHolder) {\n+                database = databaseHolder.database;\n+                if (database == null) {\n+                    if (ci.isPersistent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92708b40851abdb5fbf342e98ba943cef8ee597a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU1NzMxNA==", "bodyText": "I was born long before double-checking locking has been invented and then condemned, so that's one of a few things about Java, I still remember (and love as an interview question).\nThis is not exactly it, because the field is volatile, therefore there is no reason to be nervous.  \ud83d\ude04\nI agree, it's infrequent enough indeed, but if database has been created already there is absolutely no reason for two concurrent new sessions to block each other.", "url": "https://github.com/h2database/h2database/pull/2976#discussion_r537557314", "createdAt": "2020-12-07T14:39:24Z", "author": {"login": "andreitokar"}, "path": "h2/src/main/org/h2/engine/Engine.java", "diffHunk": "@@ -52,65 +52,75 @@ private static SessionLocal openSession(ConnectionInfo ci, boolean ifExists, boo\n         boolean openNew = ci.getProperty(\"OPEN_NEW\", false);\n         boolean opened = false;\n         User user = null;\n-        synchronized (DATABASES) {\n-            if (openNew || ci.isUnnamedInMemory()) {\n-                database = null;\n-            } else {\n-                database = DATABASES.get(name);\n+        DatabaseHolder databaseHolder = new DatabaseHolder();;\n+        if (!ci.isUnnamedInMemory()) {\n+            synchronized (DATABASES) {\n+                if (openNew) {\n+                    DATABASES.put(name, databaseHolder);\n+                } else {\n+                    databaseHolder = DATABASES.computeIfAbsent(name, (key) -> new DatabaseHolder());\n+                }\n             }\n-            if (database == null) {\n-                if (ci.isPersistent()) {\n-                    String p = ci.getProperty(\"MV_STORE\");\n-                    String fileName;\n-                    if (p == null) {\n-                        fileName = name + Constants.SUFFIX_MV_FILE;\n-                        if (!FileUtils.exists(fileName)) {\n-                            fileName = name + Constants.SUFFIX_PAGE_FILE;\n-                            if (FileUtils.exists(fileName)) {\n-                                ci.setProperty(\"MV_STORE\", \"false\");\n-                            } else {\n-                                throwNotFound(ifExists, forbidCreation, name);\n-                                fileName = name + Constants.SUFFIX_OLD_DATABASE_FILE;\n+        }\n+        database = databaseHolder.database;\n+        if (database == null) {\n+            synchronized (databaseHolder) {\n+                database = databaseHolder.database;\n+                if (database == null) {\n+                    if (ci.isPersistent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4ODUyOA=="}, "originalCommit": {"oid": "92708b40851abdb5fbf342e98ba943cef8ee597a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY3NjE5OA==", "bodyText": "DCL is not technically wrong e.g. here. Although it was wrong when I started writing Java with version 1.1.8, since that predated the memory model by a long way.\nIt's just an esoteric thing that is hard to read and hard to reason about, and therefore makes bad programming practice, especially when used somewhere it is completely unnecessary.", "url": "https://github.com/h2database/h2database/pull/2976#discussion_r537676198", "createdAt": "2020-12-07T17:09:52Z", "author": {"login": "grandinj"}, "path": "h2/src/main/org/h2/engine/Engine.java", "diffHunk": "@@ -52,65 +52,75 @@ private static SessionLocal openSession(ConnectionInfo ci, boolean ifExists, boo\n         boolean openNew = ci.getProperty(\"OPEN_NEW\", false);\n         boolean opened = false;\n         User user = null;\n-        synchronized (DATABASES) {\n-            if (openNew || ci.isUnnamedInMemory()) {\n-                database = null;\n-            } else {\n-                database = DATABASES.get(name);\n+        DatabaseHolder databaseHolder = new DatabaseHolder();;\n+        if (!ci.isUnnamedInMemory()) {\n+            synchronized (DATABASES) {\n+                if (openNew) {\n+                    DATABASES.put(name, databaseHolder);\n+                } else {\n+                    databaseHolder = DATABASES.computeIfAbsent(name, (key) -> new DatabaseHolder());\n+                }\n             }\n-            if (database == null) {\n-                if (ci.isPersistent()) {\n-                    String p = ci.getProperty(\"MV_STORE\");\n-                    String fileName;\n-                    if (p == null) {\n-                        fileName = name + Constants.SUFFIX_MV_FILE;\n-                        if (!FileUtils.exists(fileName)) {\n-                            fileName = name + Constants.SUFFIX_PAGE_FILE;\n-                            if (FileUtils.exists(fileName)) {\n-                                ci.setProperty(\"MV_STORE\", \"false\");\n-                            } else {\n-                                throwNotFound(ifExists, forbidCreation, name);\n-                                fileName = name + Constants.SUFFIX_OLD_DATABASE_FILE;\n+        }\n+        database = databaseHolder.database;\n+        if (database == null) {\n+            synchronized (databaseHolder) {\n+                database = databaseHolder.database;\n+                if (database == null) {\n+                    if (ci.isPersistent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4ODUyOA=="}, "originalCommit": {"oid": "92708b40851abdb5fbf342e98ba943cef8ee597a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NjI4OQ==", "bodyText": "Yes, it was wrong (and still is in it's classic incarnation) since JDK 1.0.2, nevertheless it was promoted everywhere since at least 1996. I do not find it particularly hard to read (i.e. compare with streams) or esoteric, because every Java developer have heard of it by now (or he/she is not a Java developer).\nIn that particular instance it's truly \"optional\", so if you have such a strong opinion, i'll remove it.", "url": "https://github.com/h2database/h2database/pull/2976#discussion_r537876289", "createdAt": "2020-12-07T22:19:43Z", "author": {"login": "andreitokar"}, "path": "h2/src/main/org/h2/engine/Engine.java", "diffHunk": "@@ -52,65 +52,75 @@ private static SessionLocal openSession(ConnectionInfo ci, boolean ifExists, boo\n         boolean openNew = ci.getProperty(\"OPEN_NEW\", false);\n         boolean opened = false;\n         User user = null;\n-        synchronized (DATABASES) {\n-            if (openNew || ci.isUnnamedInMemory()) {\n-                database = null;\n-            } else {\n-                database = DATABASES.get(name);\n+        DatabaseHolder databaseHolder = new DatabaseHolder();;\n+        if (!ci.isUnnamedInMemory()) {\n+            synchronized (DATABASES) {\n+                if (openNew) {\n+                    DATABASES.put(name, databaseHolder);\n+                } else {\n+                    databaseHolder = DATABASES.computeIfAbsent(name, (key) -> new DatabaseHolder());\n+                }\n             }\n-            if (database == null) {\n-                if (ci.isPersistent()) {\n-                    String p = ci.getProperty(\"MV_STORE\");\n-                    String fileName;\n-                    if (p == null) {\n-                        fileName = name + Constants.SUFFIX_MV_FILE;\n-                        if (!FileUtils.exists(fileName)) {\n-                            fileName = name + Constants.SUFFIX_PAGE_FILE;\n-                            if (FileUtils.exists(fileName)) {\n-                                ci.setProperty(\"MV_STORE\", \"false\");\n-                            } else {\n-                                throwNotFound(ifExists, forbidCreation, name);\n-                                fileName = name + Constants.SUFFIX_OLD_DATABASE_FILE;\n+        }\n+        database = databaseHolder.database;\n+        if (database == null) {\n+            synchronized (databaseHolder) {\n+                database = databaseHolder.database;\n+                if (database == null) {\n+                    if (ci.isPersistent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4ODUyOA=="}, "originalCommit": {"oid": "92708b40851abdb5fbf342e98ba943cef8ee597a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzk5NzI0OA==", "bodyText": "I learned something from your discussion. Thank you, appreciate it.", "url": "https://github.com/h2database/h2database/pull/2976#discussion_r537997248", "createdAt": "2020-12-08T03:02:09Z", "author": {"login": "manticore-projects"}, "path": "h2/src/main/org/h2/engine/Engine.java", "diffHunk": "@@ -52,65 +52,75 @@ private static SessionLocal openSession(ConnectionInfo ci, boolean ifExists, boo\n         boolean openNew = ci.getProperty(\"OPEN_NEW\", false);\n         boolean opened = false;\n         User user = null;\n-        synchronized (DATABASES) {\n-            if (openNew || ci.isUnnamedInMemory()) {\n-                database = null;\n-            } else {\n-                database = DATABASES.get(name);\n+        DatabaseHolder databaseHolder = new DatabaseHolder();;\n+        if (!ci.isUnnamedInMemory()) {\n+            synchronized (DATABASES) {\n+                if (openNew) {\n+                    DATABASES.put(name, databaseHolder);\n+                } else {\n+                    databaseHolder = DATABASES.computeIfAbsent(name, (key) -> new DatabaseHolder());\n+                }\n             }\n-            if (database == null) {\n-                if (ci.isPersistent()) {\n-                    String p = ci.getProperty(\"MV_STORE\");\n-                    String fileName;\n-                    if (p == null) {\n-                        fileName = name + Constants.SUFFIX_MV_FILE;\n-                        if (!FileUtils.exists(fileName)) {\n-                            fileName = name + Constants.SUFFIX_PAGE_FILE;\n-                            if (FileUtils.exists(fileName)) {\n-                                ci.setProperty(\"MV_STORE\", \"false\");\n-                            } else {\n-                                throwNotFound(ifExists, forbidCreation, name);\n-                                fileName = name + Constants.SUFFIX_OLD_DATABASE_FILE;\n+        }\n+        database = databaseHolder.database;\n+        if (database == null) {\n+            synchronized (databaseHolder) {\n+                database = databaseHolder.database;\n+                if (database == null) {\n+                    if (ci.isPersistent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI4ODUyOA=="}, "originalCommit": {"oid": "92708b40851abdb5fbf342e98ba943cef8ee597a"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2100, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}