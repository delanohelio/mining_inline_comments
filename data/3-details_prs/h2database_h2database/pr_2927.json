{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MTE2NDg5", "number": 2927, "title": "Binary NUMERIC type support for Npgsql", "bodyText": "PgServer supports most common types in binary format, which make it possible for C# to access PgServer via Npgsql (Npgsql uses binary format by default).  Not commonly used NUMERIC type is necessary because SUM(BIGINT) returns NUMERIC. Here is an example:\nusing System;\nusing Npgsql;\n\nnamespace sample1\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            Console.WriteLine(\"Testing Npgsql ...\");\n            var connString = \"Host=localhost;Port=5432;Username=sa;Password=sa;Database=test\";\n\n            var conn = new NpgsqlConnection(connString);\n            // Here we need to hack something to pass pg_type queries, either in H2 or in Npgsql\n            conn.Open();\n\n            using (var cmd = new NpgsqlCommand(\"DROP TABLE IF EXISTS test\", conn)) {\n                cmd.ExecuteNonQuery();\n            }\n            using (var cmd = new NpgsqlCommand(CREATE TABLE test(x1 BIGINT)\", conn)) {\n                cmd.ExecuteNonQuery();\n            }\n            using (var cmd = new NpgsqlCommand(\"INSERT INTO test (x1) VALUES (@p), (@q)\", conn)) {\n                cmd.Parameters.AddWithValue(\"p\", 1111222233334444);\n                cmd.Parameters.AddWithValue(\"q\", 1234123412341234);\n                cmd.ExecuteNonQuery();\n            }\n\n            using (var cmd = new NpgsqlCommand(\"SELECT SUM(x1) FROM test\", conn)) {\n                using (var reader = cmd.ExecuteReader()) {\n                    while (reader.Read()) {\n                        Console.WriteLine(reader.GetDecimal(0)); // expects 2345345645675678\n                    }\n                }\n            }\n        }\n    }\n}\n\nbtw, formatCode (text or binary) for Parameter needs to be consistent with formatCode for RowDescription: if only one formatCode, it applies to all parameters.", "createdAt": "2020-10-15T13:44:46Z", "url": "https://github.com/h2database/h2database/pull/2927", "merged": true, "mergeCommit": {"oid": "17372ab2e1646b5a40bd155378b6a0c102404022"}, "closed": true, "closedAt": "2020-10-21T01:55:31Z", "author": {"login": "auntyellow"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdS8tifgFqTUwOTk1NTY1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdUazvZAH2gAyNTA0MTE2NDg5OjFjNGNkZjk1OTA2Yjc4NDRlZTk4ZWIyOGRjZmVjMTRkNjJlZWIwMzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5OTU1NjU0", "url": "https://github.com/h2database/h2database/pull/2927#pullrequestreview-509955654", "createdAt": "2020-10-16T01:37:44Z", "commit": {"oid": "53cd55b956c49b022ccee4b601d45435d50f63bd"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMTozNzo0NFrOHih9IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwMjoxMTowNlrOHii4Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk2OTk1Mw==", "bodyText": "Why you convert short to int and then to Integer here and below?", "url": "https://github.com/h2database/h2database/pull/2927#discussion_r505969953", "createdAt": "2020-10-16T01:37:44Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "diffHunk": "@@ -734,6 +739,57 @@ private void writeDataColumn(Value v, int pgType, boolean text) throws IOExcepti\n         }\n     }\n \n+    private static final int[] POWERS10 = {1, 10, 100, 1000, 10000};\n+    private static final int MAX_GROUP_SCALE = 4;\n+    private static final int MAX_GROUP_SIZE = POWERS10[4];\n+\n+    private static int divide(BigInteger[] unscaled, int divisor) {\n+        BigInteger[] bi = unscaled[0].divideAndRemainder(BigInteger.valueOf(divisor));\n+        unscaled[0] = bi[0];\n+        return bi[1].shortValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53cd55b956c49b022ccee4b601d45435d50f63bd"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk3NjIxNQ==", "bodyText": "Such hyperlink is useless, because this file can be changed in the main branch at any moment, you need to use the exact commit, but it would be better not to use third-party resources at all. PostgreSQL has own documentation.", "url": "https://github.com/h2database/h2database/pull/2927#discussion_r505976215", "createdAt": "2020-10-16T01:51:51Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "diffHunk": "@@ -734,6 +739,57 @@ private void writeDataColumn(Value v, int pgType, boolean text) throws IOExcepti\n         }\n     }\n \n+    private static final int[] POWERS10 = {1, 10, 100, 1000, 10000};\n+    private static final int MAX_GROUP_SCALE = 4;\n+    private static final int MAX_GROUP_SIZE = POWERS10[4];\n+\n+    private static int divide(BigInteger[] unscaled, int divisor) {\n+        BigInteger[] bi = unscaled[0].divideAndRemainder(BigInteger.valueOf(divisor));\n+        unscaled[0] = bi[0];\n+        return bi[1].shortValue();\n+    }\n+\n+    // https://www.npgsql.org/dev/types.html\n+    // https://github.com/npgsql/npgsql/blob/main/src/Npgsql/TypeHandlers/NumericHandlers/NumericHandler.cs#L167", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53cd55b956c49b022ccee4b601d45435d50f63bd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4MjMyMg==", "bodyText": "groups.size() can be extracted into a new variable.", "url": "https://github.com/h2database/h2database/pull/2927#discussion_r505982322", "createdAt": "2020-10-16T02:05:09Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "diffHunk": "@@ -734,6 +739,57 @@ private void writeDataColumn(Value v, int pgType, boolean text) throws IOExcepti\n         }\n     }\n \n+    private static final int[] POWERS10 = {1, 10, 100, 1000, 10000};\n+    private static final int MAX_GROUP_SCALE = 4;\n+    private static final int MAX_GROUP_SIZE = POWERS10[4];\n+\n+    private static int divide(BigInteger[] unscaled, int divisor) {\n+        BigInteger[] bi = unscaled[0].divideAndRemainder(BigInteger.valueOf(divisor));\n+        unscaled[0] = bi[0];\n+        return bi[1].shortValue();\n+    }\n+\n+    // https://www.npgsql.org/dev/types.html\n+    // https://github.com/npgsql/npgsql/blob/main/src/Npgsql/TypeHandlers/NumericHandlers/NumericHandler.cs#L167\n+    private void writeNumericBinary(BigDecimal value) throws IOException {\n+        int weight = 0;\n+        List<Integer> groups = new ArrayList<>();\n+        int scale = value.scale();\n+        int signum = value.signum();\n+        if (signum != 0) {\n+            BigInteger[] unscaled = new BigInteger[] {value.unscaledValue()};\n+            if (signum < 0) {\n+                unscaled[0] = unscaled[0].negate();\n+            }\n+            weight = -scale / MAX_GROUP_SCALE - 1;\n+            int remainder = 0;\n+            int scaleChunk = scale % MAX_GROUP_SCALE;\n+            if (scaleChunk > 0) {\n+                remainder = divide(unscaled, POWERS10[scaleChunk]) * POWERS10[MAX_GROUP_SCALE - scaleChunk];\n+                if (remainder != 0) {\n+                    weight--;\n+                }\n+            }\n+            if (remainder == 0) {\n+                while ((remainder = divide(unscaled, MAX_GROUP_SIZE)) == 0) {\n+                    weight++;\n+                }\n+            }\n+            groups.add(remainder);\n+            while (unscaled[0].signum() != 0) {\n+                groups.add(divide(unscaled, MAX_GROUP_SIZE));\n+            }\n+        }\n+        writeInt(8 + groups.size() * 2);\n+        writeShort(groups.size());\n+        writeShort(groups.size() + weight);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53cd55b956c49b022ccee4b601d45435d50f63bd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTk4NTA0Nw==", "bodyText": "And here we have another problem with scale. SELECT 1E-100000 and SELECT 1E-60000 throw\nException in thread \"main\" java.lang.IllegalArgumentException: invalid scale in \"numeric\" value\n\tat org.postgresql.util.ByteConverter.numeric(ByteConverter.java:183)\n\tat org.postgresql.util.ByteConverter.numeric(ByteConverter.java:147)\n\tat org.postgresql.jdbc.PgResultSet.getNumeric(PgResultSet.java:2355)\n\tat org.postgresql.jdbc.PgResultSet.getBigDecimal(PgResultSet.java:2332)\n\tat org.postgresql.jdbc.PgResultSet.getBigDecimal(PgResultSet.java:390)\n\nSELECT 1E-70000 returns 0E-4464.\nI think behavior should be consistent, for example, scale can be normalized to the supported by PosgreSQL range.", "url": "https://github.com/h2database/h2database/pull/2927#discussion_r505985047", "createdAt": "2020-10-16T02:11:06Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "diffHunk": "@@ -734,6 +739,57 @@ private void writeDataColumn(Value v, int pgType, boolean text) throws IOExcepti\n         }\n     }\n \n+    private static final int[] POWERS10 = {1, 10, 100, 1000, 10000};\n+    private static final int MAX_GROUP_SCALE = 4;\n+    private static final int MAX_GROUP_SIZE = POWERS10[4];\n+\n+    private static int divide(BigInteger[] unscaled, int divisor) {\n+        BigInteger[] bi = unscaled[0].divideAndRemainder(BigInteger.valueOf(divisor));\n+        unscaled[0] = bi[0];\n+        return bi[1].shortValue();\n+    }\n+\n+    // https://www.npgsql.org/dev/types.html\n+    // https://github.com/npgsql/npgsql/blob/main/src/Npgsql/TypeHandlers/NumericHandlers/NumericHandler.cs#L167\n+    private void writeNumericBinary(BigDecimal value) throws IOException {\n+        int weight = 0;\n+        List<Integer> groups = new ArrayList<>();\n+        int scale = value.scale();\n+        int signum = value.signum();\n+        if (signum != 0) {\n+            BigInteger[] unscaled = new BigInteger[] {value.unscaledValue()};\n+            if (signum < 0) {\n+                unscaled[0] = unscaled[0].negate();\n+            }\n+            weight = -scale / MAX_GROUP_SCALE - 1;\n+            int remainder = 0;\n+            int scaleChunk = scale % MAX_GROUP_SCALE;\n+            if (scaleChunk > 0) {\n+                remainder = divide(unscaled, POWERS10[scaleChunk]) * POWERS10[MAX_GROUP_SCALE - scaleChunk];\n+                if (remainder != 0) {\n+                    weight--;\n+                }\n+            }\n+            if (remainder == 0) {\n+                while ((remainder = divide(unscaled, MAX_GROUP_SIZE)) == 0) {\n+                    weight++;\n+                }\n+            }\n+            groups.add(remainder);\n+            while (unscaled[0].signum() != 0) {\n+                groups.add(divide(unscaled, MAX_GROUP_SIZE));\n+            }\n+        }\n+        writeInt(8 + groups.size() * 2);\n+        writeShort(groups.size());\n+        writeShort(groups.size() + weight);\n+        writeShort(signum < 0 ? 16384 : 0);\n+        writeShort(scale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "53cd55b956c49b022ccee4b601d45435d50f63bd"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17052cb3a3785a5887dfd944c9fcd44201d469c5", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/17052cb3a3785a5887dfd944c9fcd44201d469c5", "committedDate": "2020-10-17T14:09:31Z", "message": "binary numeric for Npgsql\n\nbinary bool bugfix\nbinary formatCode bugfix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "53cd55b956c49b022ccee4b601d45435d50f63bd", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/53cd55b956c49b022ccee4b601d45435d50f63bd", "committedDate": "2020-10-15T13:14:42Z", "message": "binary formatCode for Npgsql"}, "afterCommit": {"oid": "17052cb3a3785a5887dfd944c9fcd44201d469c5", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/17052cb3a3785a5887dfd944c9fcd44201d469c5", "committedDate": "2020-10-17T14:09:31Z", "message": "binary numeric for Npgsql\n\nbinary bool bugfix\nbinary formatCode bugfix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwOTkxNzk2", "url": "https://github.com/h2database/h2database/pull/2927#pullrequestreview-510991796", "createdAt": "2020-10-17T15:00:51Z", "commit": {"oid": "17052cb3a3785a5887dfd944c9fcd44201d469c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxNTowMDo1MlrOHjd3vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxNTowMDo1MlrOHjd3vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk1MTYxNQ==", "bodyText": "SELECT 1E1 works with PostgreSQL/PgJDBC well, getBigDecimal() returns 10 as expected. I think you need to normalize scale in your implementation too.", "url": "https://github.com/h2database/h2database/pull/2927#discussion_r506951615", "createdAt": "2020-10-17T15:00:52Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -521,6 +526,44 @@ private void testTextualAndBinaryTypes(boolean binary) throws SQLException {\n         }\n     }\n \n+    private void testBinaryNumeric() throws SQLException {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        supportedBinaryOids.add(1700);\n+        try {\n+            Properties props = new Properties();\n+            props.setProperty(\"user\", \"sa\");\n+            props.setProperty(\"password\", \"sa\");\n+            // force binary\n+            props.setProperty(\"prepareThreshold\", \"-1\");\n+\n+            Connection conn = DriverManager.getConnection(\n+                    \"jdbc:postgresql://localhost:5535/pgserver\", props);\n+            Statement stat = conn.createStatement();\n+\n+            try (ResultSet rs = stat.executeQuery(\"SELECT 1E-16383, 1E-16384, 1E+1\")) {\n+                rs.next();\n+                assertEquals(new BigDecimal(\"1E-16383\"), rs.getBigDecimal(1));\n+                for (int i = 2; i <= 3; i ++) {\n+                    try {\n+                        rs.getBigDecimal(i);\n+                        fail();\n+                    } catch (IllegalArgumentException e) {\n+                        // PgJDBC doesn't support scale greater than 16383 or negative scale\n+                    }\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17052cb3a3785a5887dfd944c9fcd44201d469c5"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dda63349520cd44ad35c38891f1d9303c03c9369", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/dda63349520cd44ad35c38891f1d9303c03c9369", "committedDate": "2020-10-18T13:12:07Z", "message": "normalize scale for binary numeric"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExMTUzMzc5", "url": "https://github.com/h2database/h2database/pull/2927#pullrequestreview-511153379", "createdAt": "2020-10-18T15:05:47Z", "commit": {"oid": "dda63349520cd44ad35c38891f1d9303c03c9369"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNTowNTo0N1rOHjrdlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOFQxNTowODowMVrOHjrelQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3NDI5NQ==", "bodyText": "This assertion is useless due to logic above.", "url": "https://github.com/h2database/h2database/pull/2927#discussion_r507174295", "createdAt": "2020-10-18T15:05:47Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "diffHunk": "@@ -734,6 +739,66 @@ private void writeDataColumn(Value v, int pgType, boolean text) throws IOExcepti\n         }\n     }\n \n+    private static final int[] POWERS10 = {1, 10, 100, 1000, 10000};\n+    private static final int MAX_GROUP_SCALE = 4;\n+    private static final int MAX_GROUP_SIZE = POWERS10[4];\n+\n+    private static int divide(BigInteger[] unscaled, int divisor) {\n+        BigInteger[] bi = unscaled[0].divideAndRemainder(BigInteger.valueOf(divisor));\n+        unscaled[0] = bi[0];\n+        return bi[1].intValue();\n+    }\n+\n+    // https://www.npgsql.org/dev/types.html\n+    // https://github.com/npgsql/npgsql/blob/8a479081f707784b5040747b23102c3d6371b9d3/\n+    //         src/Npgsql/TypeHandlers/NumericHandlers/NumericHandler.cs#L166\n+    private void writeNumericBinary(BigDecimal value) throws IOException {\n+        int weight = 0;\n+        List<Integer> groups = new ArrayList<>();\n+        int scale = value.scale();\n+        int signum = value.signum();\n+        if (signum != 0) {\n+            BigInteger[] unscaled = {null};\n+            if (scale < 0) {\n+                unscaled[0] = value.setScale(0).unscaledValue();\n+                scale = 0;\n+            } else {\n+                unscaled[0] = value.unscaledValue();\n+            }\n+            if (signum < 0) {\n+                unscaled[0] = unscaled[0].negate();\n+            }\n+            weight = -scale / MAX_GROUP_SCALE - 1;\n+            int remainder = 0;\n+            int scaleChunk = scale % MAX_GROUP_SCALE;\n+            if (scaleChunk > 0) {\n+                remainder = divide(unscaled, POWERS10[scaleChunk]) * POWERS10[MAX_GROUP_SCALE - scaleChunk];\n+                if (remainder != 0) {\n+                    weight--;\n+                }\n+            }\n+            if (remainder == 0) {\n+                while ((remainder = divide(unscaled, MAX_GROUP_SIZE)) == 0) {\n+                    weight++;\n+                }\n+            }\n+            groups.add(remainder);\n+            while (unscaled[0].signum() != 0) {\n+                groups.add(divide(unscaled, MAX_GROUP_SIZE));\n+            }\n+        }\n+        int groupCount = groups.size();\n+        writeInt(8 + groupCount * 2);\n+        writeShort(groupCount);\n+        writeShort(groupCount + weight);\n+        writeShort(signum < 0 ? 16384 : 0);\n+        assert scale >= 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda63349520cd44ad35c38891f1d9303c03c9369"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzE3NDU0OQ==", "bodyText": "I don't understand this condition. When scale is too large this code simply writes an incorrect scale? Why?\nIt looks like it should throw an exception instead.", "url": "https://github.com/h2database/h2database/pull/2927#discussion_r507174549", "createdAt": "2020-10-18T15:08:01Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "diffHunk": "@@ -734,6 +739,66 @@ private void writeDataColumn(Value v, int pgType, boolean text) throws IOExcepti\n         }\n     }\n \n+    private static final int[] POWERS10 = {1, 10, 100, 1000, 10000};\n+    private static final int MAX_GROUP_SCALE = 4;\n+    private static final int MAX_GROUP_SIZE = POWERS10[4];\n+\n+    private static int divide(BigInteger[] unscaled, int divisor) {\n+        BigInteger[] bi = unscaled[0].divideAndRemainder(BigInteger.valueOf(divisor));\n+        unscaled[0] = bi[0];\n+        return bi[1].intValue();\n+    }\n+\n+    // https://www.npgsql.org/dev/types.html\n+    // https://github.com/npgsql/npgsql/blob/8a479081f707784b5040747b23102c3d6371b9d3/\n+    //         src/Npgsql/TypeHandlers/NumericHandlers/NumericHandler.cs#L166\n+    private void writeNumericBinary(BigDecimal value) throws IOException {\n+        int weight = 0;\n+        List<Integer> groups = new ArrayList<>();\n+        int scale = value.scale();\n+        int signum = value.signum();\n+        if (signum != 0) {\n+            BigInteger[] unscaled = {null};\n+            if (scale < 0) {\n+                unscaled[0] = value.setScale(0).unscaledValue();\n+                scale = 0;\n+            } else {\n+                unscaled[0] = value.unscaledValue();\n+            }\n+            if (signum < 0) {\n+                unscaled[0] = unscaled[0].negate();\n+            }\n+            weight = -scale / MAX_GROUP_SCALE - 1;\n+            int remainder = 0;\n+            int scaleChunk = scale % MAX_GROUP_SCALE;\n+            if (scaleChunk > 0) {\n+                remainder = divide(unscaled, POWERS10[scaleChunk]) * POWERS10[MAX_GROUP_SCALE - scaleChunk];\n+                if (remainder != 0) {\n+                    weight--;\n+                }\n+            }\n+            if (remainder == 0) {\n+                while ((remainder = divide(unscaled, MAX_GROUP_SIZE)) == 0) {\n+                    weight++;\n+                }\n+            }\n+            groups.add(remainder);\n+            while (unscaled[0].signum() != 0) {\n+                groups.add(divide(unscaled, MAX_GROUP_SIZE));\n+            }\n+        }\n+        int groupCount = groups.size();\n+        writeInt(8 + groupCount * 2);\n+        writeShort(groupCount);\n+        writeShort(groupCount + weight);\n+        writeShort(signum < 0 ? 16384 : 0);\n+        assert scale >= 0;\n+        writeShort(scale > Short.MAX_VALUE ? Short.MAX_VALUE : scale);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dda63349520cd44ad35c38891f1d9303c03c9369"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c4cdf95906b7844ee98eb28dcfec14d62eeb037", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/1c4cdf95906b7844ee98eb28dcfec14d62eeb037", "committedDate": "2020-10-20T15:49:46Z", "message": "throws 22003 if binary numeric scale or weight too large"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4259, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}