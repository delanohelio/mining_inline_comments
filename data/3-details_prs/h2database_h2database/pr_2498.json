{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NjIyMzIy", "number": 2498, "title": "Add some PostgreSQL compatibility features mentioned in issue #2450", "bodyText": "column \"pg_roles\".\"rolsuper\"\ntype cast ::oid\n<integer>::regclass should return integer\nfunction has_schema_privilege()\nfunction array_to_string()\nSET [SESSION | LOCAL] ...\nSET join_collapse_limit", "createdAt": "2020-03-09T14:30:48Z", "url": "https://github.com/h2database/h2database/pull/2498", "merged": true, "mergeCommit": {"oid": "b463e27567db183fb07ff6aa7b7a5a3036c0ed3a"}, "closed": true, "closedAt": "2020-03-11T04:46:23Z", "author": {"login": "auntyellow"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcL_Hw-gFqTM3MTI0MDA0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMTaHtAH2gAyMzg1NjIyMzIyOjUxZTAzYTYyNTA2NTY3ZDY4ZGU2ZTgyZDkyNGMzNDMxZWI3NWM2ZTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjQwMDQ2", "url": "https://github.com/h2database/h2database/pull/2498#pullrequestreview-371240046", "createdAt": "2020-03-09T14:39:54Z", "commit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDozOTo1NFrOFzraBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo0OTowNFrOFzrzBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMjg3MQ==", "bodyText": "This code should be used only in PostgreSQL compatibility mode.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389732871", "createdAt": "2020-03-09T14:39:54Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7697,6 +7697,9 @@ private void readIfEqualOrTo() {\n     }\n \n     private Prepared parseSet() {\n+        if (readIf(\"SESSION\") || readIf(\"LOCAL\")) {\n+            // for PostgreSQL compatibility\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczMzM0NQ==", "bodyText": "This code too, we already have too many non-standard stuff that is incorrectly accepted in all compatibility modes.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389733345", "createdAt": "2020-03-09T14:40:32Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -7883,6 +7886,11 @@ private Prepared parseSet() {\n             readIfEqualOrTo();\n             read();\n             return new NoOperation(session);\n+        } else if (readIf(\"JOIN_COLLAPSE_LIMIT\")) {\n+            // for PostgreSQL compatibility\n+            readIfEqualOrTo();\n+            read();\n+            return new NoOperation(session);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczNjAxMg==", "bodyText": "Don't use Value.getObject() in functions, objects returned by it aren't required to return something useful from their toString() methods.\nFor this specific function getString() is a more reasonable method.\nThis function also needs some tests.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389736012", "createdAt": "2020-03-09T14:44:20Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -235,6 +247,13 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n+            for (Value v : ((ValueArray) v0).getList()) {\n+                joiner.add(String.valueOf(v.getObject()));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTczOTI3MA==", "bodyText": "This expression has declared type INTEGER and may return only ValueNull.INSTANCE and instances of ValueInteger.\nYou can use convertToInt(null), but most likely the 32-bit unsigned values need special handling here to avoid NUMERIC_VALUE_OUT_OF_RANGE_2 error.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389739270", "createdAt": "2020-03-09T14:49:04Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/Regclass.java", "diffHunk": "@@ -39,6 +39,10 @@ public Value getValue(Session session) {\n         if (value == ValueNull.INSTANCE) {\n             return ValueNull.INSTANCE;\n         }\n+        int valueType = value.getValueType();\n+        if (valueType >= Value.TINYINT && valueType <= Value.BIGINT) {\n+            return value;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxMjU0MjYw", "url": "https://github.com/h2database/h2database/pull/2498#pullrequestreview-371254260", "createdAt": "2020-03-09T14:55:43Z", "commit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NTo0NFrOFzsFXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NTo0NFrOFzsFXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0Mzk2NQ==", "bodyText": "You need to convert the type to Value.ARRAY first with v0.convertTo(TypeInfo.TYPE_ARRAY) or something like it.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r389743965", "createdAt": "2020-03-09T14:55:44Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/mode/FunctionsPostgreSQL.java", "diffHunk": "@@ -235,6 +247,13 @@ protected Value getValueWithArgs(Session session, Expression[] args) {\n             // Not implemented\n             result = v1.convertTo(Value.VARCHAR);\n             break;\n+        case ARRAY_TO_STRING:\n+            StringJoiner joiner = new StringJoiner(String.valueOf(v1.getObject()));\n+            for (Value v : ((ValueArray) v0).getList()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "committedDate": "2020-03-10T12:29:25Z", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\ncolumn \"pg_roles\".\"rolsuper\"\ntype cast `::oid`\n<integer>::regclass should return integer\nfunction has_schema_privilege()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a89eb8c64c986879699f0b683870e10f6c927c99", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/a89eb8c64c986879699f0b683870e10f6c927c99", "committedDate": "2020-03-09T14:27:58Z", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\ncolumn \"pg_roles\".\"rolsuper\"\ntype cast `::oid`\n<integer>::regclass should return integer\nfunction has_schema_privilege()\nfunction array_to_string()\nSET [SESSION | LOCAL] ...\nSET join_collapse_limit"}, "afterCommit": {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/34407ca09f30e6216f1b3e1303f7d2ff509c50b1", "committedDate": "2020-03-10T12:29:25Z", "message": "Add some PostgreSQL compatibility features mentioned in issue #2450\n\ncolumn \"pg_roles\".\"rolsuper\"\ntype cast `::oid`\n<integer>::regclass should return integer\nfunction has_schema_privilege()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxOTQxOTMx", "url": "https://github.com/h2database/h2database/pull/2498#pullrequestreview-371941931", "createdAt": "2020-03-10T13:20:05Z", "commit": {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyMDowNVrOF0OZZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMzoyMDowNVrOF0OZZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDMwNjE1MQ==", "bodyText": "::regclass and ::oid are different things in PostgreSQL and this additional condition doesn't look like a proper implementation.\nH2 has an incorrect mapping for OID data type to a BLOB in DataType class. I think this mapping should be removed from it (and from help.csv), and a new mapping to INTEGER should be created in the Mode class.\ndt = DataType.getDataType(Value.INTEGER);\nmode.typeByNameMap.put(\"OID\", dt);\nWith such change ::oid will be processed just like any other type cast. Currently this cast is broken, because it tries to cast a numeric value to a BLOB.", "url": "https://github.com/h2database/h2database/pull/2498#discussion_r390306151", "createdAt": "2020-03-10T13:20:05Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/command/Parser.java", "diffHunk": "@@ -4721,7 +4721,7 @@ private Expression readTerm() {\n                     read(\"PG_CATALOG\");\n                     read(DOT);\n                 }\n-                if (readIf(\"REGCLASS\")) {\n+                if (readIf(\"REGCLASS\") || readIf(\"OID\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34407ca09f30e6216f1b3e1303f7d2ff509c50b1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51e03a62506567d68de6e82d924c3431eb75c6e2", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/51e03a62506567d68de6e82d924c3431eb75c6e2", "committedDate": "2020-03-10T14:29:54Z", "message": "map OID to INTEGER"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3843, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}