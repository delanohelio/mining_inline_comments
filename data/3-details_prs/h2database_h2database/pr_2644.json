{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjc5NDgz", "number": 2644, "title": "Send PG_TYPE_TEXTARRAY values to ODBC drivers properly", "bodyText": "fixes #2643", "createdAt": "2020-05-23T14:11:05Z", "url": "https://github.com/h2database/h2database/pull/2644", "merged": true, "mergeCommit": {"oid": "a9e8a5c8fa7911b860ba27d37cf5ecfa3f1db1ef"}, "closed": true, "closedAt": "2020-05-24T02:05:30Z", "author": {"login": "auntyellow"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckHnnrAFqTQxNzI4MjAyNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABckJW20ABqjMzNjcxOTc5MTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjgyMDI1", "url": "https://github.com/h2database/h2database/pull/2644#pullrequestreview-417282025", "createdAt": "2020-05-23T14:14:33Z", "commit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoxNDozNFrOGZpolw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QxNDoxOTo0N1rOGZpp_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0OTcxOQ==", "bodyText": "I don't see any special treatment for , and } characters, but I guess it should be here.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429549719", "createdAt": "2020-05-23T14:14:34Z", "author": {"login": "katzyn"}, "path": "h2/src/main/org/h2/server/pg/PgServerThread.java", "diffHunk": "@@ -582,6 +583,21 @@ private void writeDataColumn(JdbcResultSet rs, int column, int pgType, boolean t\n                 write(data);\n                 break;\n             }\n+            case PgServer.PG_TYPE_TEXTARRAY:\n+                ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                baos.write('{');\n+                Value[] values = ((ValueArray) v).getList();\n+                Charset encoding = getEncoding();\n+                for (int i = 0; i < values.length; i++) {\n+                    if (i > 0) {\n+                        baos.write(',');\n+                    }\n+                    baos.write(values[i].getString().getBytes(encoding));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0OTg0OA==", "bodyText": "This import should be removed.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429549848", "createdAt": "2020-05-23T14:16:20Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -32,6 +34,7 @@\n import org.h2.test.TestDb;\n import org.h2.tools.Server;\n import org.h2.util.DateTimeUtils;\n+import org.postgresql.jdbc.PgArray;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU0OTk2Mw==", "bodyText": "If you want to test INTEGER ARRAY, you need to add some support for it first. Currently all arrays are incorrectly mapped to PG_TYPE_TEXTARRAY, but they should be mapped to different types of PostgreSQL, this type is suitable only for VARCHAR ARRAY.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429549963", "createdAt": "2020-05-23T14:18:02Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -695,4 +699,34 @@ private void testOtherPgClients() throws SQLException {\n             conn0.close();\n         }\n     }\n+\n+    private void testArray() throws Exception {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        try (\n+                Connection conn = DriverManager.getConnection(\n+                        \"jdbc:postgresql://localhost:5535/pgserver\", \"sa\", \"sa\");\n+                Statement stat = conn.createStatement();\n+        ) {\n+            stat.execute(\"CREATE TABLE test (id int primary key, x1 int array, x2 varchar array)\");\n+            stat.execute(\"INSERT INTO test (id, x1, x2) VALUES (1, ARRAY[2, 3], ARRAY['4', '5'])\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTU1MDA3OQ==", "bodyText": "Please, add tests for special characters and for array assignments via parameters of PreparedStatement and all necessary code for them.", "url": "https://github.com/h2database/h2database/pull/2644#discussion_r429550079", "createdAt": "2020-05-23T14:19:47Z", "author": {"login": "katzyn"}, "path": "h2/src/test/org/h2/test/unit/TestPgServer.java", "diffHunk": "@@ -695,4 +699,34 @@ private void testOtherPgClients() throws SQLException {\n             conn0.close();\n         }\n     }\n+\n+    private void testArray() throws Exception {\n+        if (!getPgJdbcDriver()) {\n+            return;\n+        }\n+\n+        Server server = createPgServer(\n+                \"-ifNotExists\", \"-pgPort\", \"5535\", \"-pgDaemon\", \"-key\", \"pgserver\", \"mem:pgserver\");\n+        try (\n+                Connection conn = DriverManager.getConnection(\n+                        \"jdbc:postgresql://localhost:5535/pgserver\", \"sa\", \"sa\");\n+                Statement stat = conn.createStatement();\n+        ) {\n+            stat.execute(\"CREATE TABLE test (id int primary key, x1 int array, x2 varchar array)\");\n+            stat.execute(\"INSERT INTO test (id, x1, x2) VALUES (1, ARRAY[2, 3], ARRAY['4', '5'])\");\n+            try (ResultSet rs = stat.executeQuery(\n+                    \"SELECT x1, x2 FROM test WHERE id = 1\")) {\n+                assertTrue(rs.next());\n+                Object[] arr = (Object[]) rs.getArray(1).getArray();\n+                assertEquals(\"2\", arr[0]);\n+                assertEquals(\"3\", arr[1]);\n+                arr = (Object[]) rs.getArray(2).getArray();\n+                assertEquals(\"4\", arr[0]);\n+                assertEquals(\"5\", arr[1]);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70292b515628952ae2d9014f6550a5340f305596", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/70292b515628952ae2d9014f6550a5340f305596", "committedDate": "2020-05-23T14:09:45Z", "message": "fixes #2643"}, "afterCommit": {"oid": "34a094a7cfe20eb27c2a984286f9837d59ff685f", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/34a094a7cfe20eb27c2a984286f9837d59ff685f", "committedDate": "2020-05-23T15:04:54Z", "message": "fixes #2643"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eef6a0354b22d7bf6e20ef4687b1dadf7e6182ed", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/eef6a0354b22d7bf6e20ef4687b1dadf7e6182ed", "committedDate": "2020-05-23T16:21:13Z", "message": "fixes #2643"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34a094a7cfe20eb27c2a984286f9837d59ff685f", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/34a094a7cfe20eb27c2a984286f9837d59ff685f", "committedDate": "2020-05-23T15:04:54Z", "message": "fixes #2643"}, "afterCommit": {"oid": "eef6a0354b22d7bf6e20ef4687b1dadf7e6182ed", "author": {"user": {"login": "auntyellow", "name": null}}, "url": "https://github.com/h2database/h2database/commit/eef6a0354b22d7bf6e20ef4687b1dadf7e6182ed", "committedDate": "2020-05-23T16:21:13Z", "message": "fixes #2643"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3874, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}