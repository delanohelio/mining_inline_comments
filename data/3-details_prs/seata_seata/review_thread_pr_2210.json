{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0NjQ2MjQ3", "number": 2210, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDoxMzoyOVrODZOQJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDoxOToyMFrODZOXjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Nzc0NTAzOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDoxMzoyOVrOFffmtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMzowNzo1NVrOFgPbag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2Nzk4OQ==", "bodyText": "only clean in memory, how about root.data?", "url": "https://github.com/seata/seata/pull/2210#discussion_r368567989", "createdAt": "2020-01-20T14:13:29Z", "author": {"login": "zjinlei"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -136,45 +135,46 @@ public void test_handleRetryRollbacking() throws TransactionException, Interrupt\n     }\n \n     @Test\n-    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n+    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException {\n         defaultCoordinator = new DefaultCoordinator(serverMessageSender);\n         String xid = core.begin(applicationId, txServiceGroup, txName, 10);\n         Long branchId = core.branchRegister(BranchType.AT, \"abcd\", clientId, xid, applicationData, lockKeys_2);\n \n         GlobalSession globalSession = SessionHolder.findGlobalSession(xid);\n         Assertions.assertNotNull(globalSession);\n         Assertions.assertNotNull(globalSession.getBranchSessions());\n+        Assertions.assertNotNull(branchId);\n \n-        Thread.sleep(100);\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"MAX_ROLLBACK_RETRY_TIMEOUT\", Duration.ofMillis(10));\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"ROLLBACK_RETRY_TIMEOUT_UNLOCK_ENABLE\", false);\n+        TimeUnit.MILLISECONDS.sleep(100);\n         defaultCoordinator.timeoutCheck();\n         defaultCoordinator.handleRetryRollbacking();\n         int lockSize = globalSession.getBranchSessions().get(0).getLockHolder().size();\n         try {\n             Assertions.assertTrue(lockSize > 0);\n         } finally {\n-            core.setResourceManagerInbound(defaultCoordinator);\n-            core.doGlobalRollback(globalSession, true);\n+            globalSession.closeAndClean();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b95d88d897ea1c5572fdb973237b4fbe3837d10b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTMyNjc4Nw==", "bodyText": "Local test case fails because local root.data is reused.", "url": "https://github.com/seata/seata/pull/2210#discussion_r369326787", "createdAt": "2020-01-22T01:11:42Z", "author": {"login": "zjinlei"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -136,45 +135,46 @@ public void test_handleRetryRollbacking() throws TransactionException, Interrupt\n     }\n \n     @Test\n-    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n+    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException {\n         defaultCoordinator = new DefaultCoordinator(serverMessageSender);\n         String xid = core.begin(applicationId, txServiceGroup, txName, 10);\n         Long branchId = core.branchRegister(BranchType.AT, \"abcd\", clientId, xid, applicationData, lockKeys_2);\n \n         GlobalSession globalSession = SessionHolder.findGlobalSession(xid);\n         Assertions.assertNotNull(globalSession);\n         Assertions.assertNotNull(globalSession.getBranchSessions());\n+        Assertions.assertNotNull(branchId);\n \n-        Thread.sleep(100);\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"MAX_ROLLBACK_RETRY_TIMEOUT\", Duration.ofMillis(10));\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"ROLLBACK_RETRY_TIMEOUT_UNLOCK_ENABLE\", false);\n+        TimeUnit.MILLISECONDS.sleep(100);\n         defaultCoordinator.timeoutCheck();\n         defaultCoordinator.handleRetryRollbacking();\n         int lockSize = globalSession.getBranchSessions().get(0).getLockHolder().size();\n         try {\n             Assertions.assertTrue(lockSize > 0);\n         } finally {\n-            core.setResourceManagerInbound(defaultCoordinator);\n-            core.doGlobalRollback(globalSession, true);\n+            globalSession.closeAndClean();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2Nzk4OQ=="}, "originalCommit": {"oid": "b95d88d897ea1c5572fdb973237b4fbe3837d10b"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MTUzMA==", "bodyText": "fix by deleting the file each time.", "url": "https://github.com/seata/seata/pull/2210#discussion_r369351530", "createdAt": "2020-01-22T03:07:55Z", "author": {"login": "slievrly"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -136,45 +135,46 @@ public void test_handleRetryRollbacking() throws TransactionException, Interrupt\n     }\n \n     @Test\n-    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n+    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException {\n         defaultCoordinator = new DefaultCoordinator(serverMessageSender);\n         String xid = core.begin(applicationId, txServiceGroup, txName, 10);\n         Long branchId = core.branchRegister(BranchType.AT, \"abcd\", clientId, xid, applicationData, lockKeys_2);\n \n         GlobalSession globalSession = SessionHolder.findGlobalSession(xid);\n         Assertions.assertNotNull(globalSession);\n         Assertions.assertNotNull(globalSession.getBranchSessions());\n+        Assertions.assertNotNull(branchId);\n \n-        Thread.sleep(100);\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"MAX_ROLLBACK_RETRY_TIMEOUT\", Duration.ofMillis(10));\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"ROLLBACK_RETRY_TIMEOUT_UNLOCK_ENABLE\", false);\n+        TimeUnit.MILLISECONDS.sleep(100);\n         defaultCoordinator.timeoutCheck();\n         defaultCoordinator.handleRetryRollbacking();\n         int lockSize = globalSession.getBranchSessions().get(0).getLockHolder().size();\n         try {\n             Assertions.assertTrue(lockSize > 0);\n         } finally {\n-            core.setResourceManagerInbound(defaultCoordinator);\n-            core.doGlobalRollback(globalSession, true);\n+            globalSession.closeAndClean();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU2Nzk4OQ=="}, "originalCommit": {"oid": "b95d88d897ea1c5572fdb973237b4fbe3837d10b"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Nzc2Mzk4OnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNDoxOToyMFrOFffx3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwMzoxMDowM1rOFgPc9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3MDg0Nw==", "bodyText": "\"Assertions.assertNotNull(globalSession.getBranchSessions())\", is it enough?", "url": "https://github.com/seata/seata/pull/2210#discussion_r368570847", "createdAt": "2020-01-20T14:19:20Z", "author": {"login": "zjinlei"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -136,45 +135,46 @@ public void test_handleRetryRollbacking() throws TransactionException, Interrupt\n     }\n \n     @Test\n-    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n+    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException {\n         defaultCoordinator = new DefaultCoordinator(serverMessageSender);\n         String xid = core.begin(applicationId, txServiceGroup, txName, 10);\n         Long branchId = core.branchRegister(BranchType.AT, \"abcd\", clientId, xid, applicationData, lockKeys_2);\n \n         GlobalSession globalSession = SessionHolder.findGlobalSession(xid);\n         Assertions.assertNotNull(globalSession);\n         Assertions.assertNotNull(globalSession.getBranchSessions());\n+        Assertions.assertNotNull(branchId);\n \n-        Thread.sleep(100);\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"MAX_ROLLBACK_RETRY_TIMEOUT\", Duration.ofMillis(10));\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"ROLLBACK_RETRY_TIMEOUT_UNLOCK_ENABLE\", false);\n+        TimeUnit.MILLISECONDS.sleep(100);\n         defaultCoordinator.timeoutCheck();\n         defaultCoordinator.handleRetryRollbacking();\n         int lockSize = globalSession.getBranchSessions().get(0).getLockHolder().size();\n         try {\n             Assertions.assertTrue(lockSize > 0);\n         } finally {\n-            core.setResourceManagerInbound(defaultCoordinator);\n-            core.doGlobalRollback(globalSession, true);\n+            globalSession.closeAndClean();\n             ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"MAX_ROLLBACK_RETRY_TIMEOUT\",\n                 ConfigurationFactory.getInstance().getDuration(ConfigurationKeys.MAX_ROLLBACK_RETRY_TIMEOUT, DurationUtil.DEFAULT_DURATION, 100));\n         }\n     }\n \n     @Test\n     public void test_handleRetryRollbackingTimeOut_unlock() throws TransactionException, InterruptedException,\n-        NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n+        NoSuchFieldException, IllegalAccessException {\n         defaultCoordinator = new DefaultCoordinator(serverMessageSender);\n         String xid = core.begin(applicationId, txServiceGroup, txName, 10);\n         Long branchId = core.branchRegister(BranchType.AT, \"abcd\", clientId, xid, applicationData, lockKeys_2);\n \n         GlobalSession globalSession = SessionHolder.findGlobalSession(xid);\n         Assertions.assertNotNull(globalSession);\n         Assertions.assertNotNull(globalSession.getBranchSessions());\n+        Assertions.assertNotNull(branchId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b95d88d897ea1c5572fdb973237b4fbe3837d10b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTM1MTkyNg==", "bodyText": "The branchRegister is on the business side and the globalSession is on the TC side.", "url": "https://github.com/seata/seata/pull/2210#discussion_r369351926", "createdAt": "2020-01-22T03:10:03Z", "author": {"login": "slievrly"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -136,45 +135,46 @@ public void test_handleRetryRollbacking() throws TransactionException, Interrupt\n     }\n \n     @Test\n-    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n+    public void test_handleRetryRollbackingTimeOut() throws TransactionException, InterruptedException, NoSuchFieldException, IllegalAccessException {\n         defaultCoordinator = new DefaultCoordinator(serverMessageSender);\n         String xid = core.begin(applicationId, txServiceGroup, txName, 10);\n         Long branchId = core.branchRegister(BranchType.AT, \"abcd\", clientId, xid, applicationData, lockKeys_2);\n \n         GlobalSession globalSession = SessionHolder.findGlobalSession(xid);\n         Assertions.assertNotNull(globalSession);\n         Assertions.assertNotNull(globalSession.getBranchSessions());\n+        Assertions.assertNotNull(branchId);\n \n-        Thread.sleep(100);\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"MAX_ROLLBACK_RETRY_TIMEOUT\", Duration.ofMillis(10));\n         ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"ROLLBACK_RETRY_TIMEOUT_UNLOCK_ENABLE\", false);\n+        TimeUnit.MILLISECONDS.sleep(100);\n         defaultCoordinator.timeoutCheck();\n         defaultCoordinator.handleRetryRollbacking();\n         int lockSize = globalSession.getBranchSessions().get(0).getLockHolder().size();\n         try {\n             Assertions.assertTrue(lockSize > 0);\n         } finally {\n-            core.setResourceManagerInbound(defaultCoordinator);\n-            core.doGlobalRollback(globalSession, true);\n+            globalSession.closeAndClean();\n             ReflectionUtil.modifyStaticFinalField(defaultCoordinator.getClass(), \"MAX_ROLLBACK_RETRY_TIMEOUT\",\n                 ConfigurationFactory.getInstance().getDuration(ConfigurationKeys.MAX_ROLLBACK_RETRY_TIMEOUT, DurationUtil.DEFAULT_DURATION, 100));\n         }\n     }\n \n     @Test\n     public void test_handleRetryRollbackingTimeOut_unlock() throws TransactionException, InterruptedException,\n-        NoSuchFieldException, IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n+        NoSuchFieldException, IllegalAccessException {\n         defaultCoordinator = new DefaultCoordinator(serverMessageSender);\n         String xid = core.begin(applicationId, txServiceGroup, txName, 10);\n         Long branchId = core.branchRegister(BranchType.AT, \"abcd\", clientId, xid, applicationData, lockKeys_2);\n \n         GlobalSession globalSession = SessionHolder.findGlobalSession(xid);\n         Assertions.assertNotNull(globalSession);\n         Assertions.assertNotNull(globalSession.getBranchSessions());\n+        Assertions.assertNotNull(branchId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU3MDg0Nw=="}, "originalCommit": {"oid": "b95d88d897ea1c5572fdb973237b4fbe3837d10b"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1602, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}