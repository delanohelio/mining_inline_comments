{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDk5Mjcw", "number": 2667, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzo0Mjo0MFrOEHazpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNTo1MTo1NFrOFJ71mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjE0Njk1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/store/DruidDataSourceGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMzo0Mjo0MFrOGmxF4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNzo0ODowM1rOGm1dIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMzM5Mw==", "bodyText": "if the filter is necessary?", "url": "https://github.com/seata/seata/pull/2667#discussion_r443303393", "createdAt": "2020-06-22T03:42:40Z", "author": {"login": "slievrly"}, "path": "server/src/main/java/io/seata/server/store/DruidDataSourceGenerator.java", "diffHunk": "@@ -29,13 +38,30 @@\n  */\n @LoadLevel(name = \"druid\")\n public class DruidDataSourceGenerator extends AbstractDataSourceGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DruidDataSourceGenerator.class);\n+\n     @Override\n     public DataSource generateDataSource() {\n         DruidDataSource ds = new DruidDataSource();\n         ds.setDriverClassName(getDriverClassName());\n         ds.setDriverClassLoader(getDriverClassLoader());\n         ds.setUrl(getUrl());\n         ds.setUsername(getUser());\n+        String publicKey = getPublicKey();\n+        if (StringUtils.isNotBlank(publicKey)) {\n+            try {\n+                ds.setFilters(\"config\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf4a8376cb63574adb913c220c42495255f572f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzM3NDg4Mw==", "bodyText": "if the filter is necessary?\n\nok", "url": "https://github.com/seata/seata/pull/2667#discussion_r443374883", "createdAt": "2020-06-22T07:48:03Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/store/DruidDataSourceGenerator.java", "diffHunk": "@@ -29,13 +38,30 @@\n  */\n @LoadLevel(name = \"druid\")\n public class DruidDataSourceGenerator extends AbstractDataSourceGenerator {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DruidDataSourceGenerator.class);\n+\n     @Override\n     public DataSource generateDataSource() {\n         DruidDataSource ds = new DruidDataSource();\n         ds.setDriverClassName(getDriverClassName());\n         ds.setDriverClassLoader(getDriverClassLoader());\n         ds.setUrl(getUrl());\n         ds.setUsername(getUser());\n+        String publicKey = getPublicKey();\n+        if (StringUtils.isNotBlank(publicKey)) {\n+            try {\n+                ds.setFilters(\"config\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMwMzM5Mw=="}, "originalCommit": {"oid": "8bf4a8376cb63574adb913c220c42495255f572f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjQ5NjQ1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/store/db/AbstractDataSourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxNTo1MTowM1rOGp2nlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNDoxMToyOVrOGp9t-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzOTY2OQ==", "bodyText": "The error log does not need to add this judgment.", "url": "https://github.com/seata/seata/pull/2667#discussion_r446539669", "createdAt": "2020-06-27T15:51:03Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/store/db/AbstractDataSourceProvider.java", "diffHunk": "@@ -195,6 +202,18 @@ protected String getUser() {\n      */\n     protected String getPassword() {\n         String password = CONFIG.getConfig(ConfigurationKeys.STORE_DB_PASSWORD);\n+        String publicKey = getPublicKey();\n+        if (StringUtils.isNotBlank(publicKey)) {\n+            try {\n+                password = ConfigTools.decrypt(publicKey, password);\n+            } catch (Exception e) {\n+                if (LOGGER.isErrorEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "496b4264467b553a50c2caa3a58302b26617d4bd"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1NTk5Mg==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2667#discussion_r446655992", "createdAt": "2020-06-28T14:11:29Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/store/db/AbstractDataSourceProvider.java", "diffHunk": "@@ -195,6 +202,18 @@ protected String getUser() {\n      */\n     protected String getPassword() {\n         String password = CONFIG.getConfig(ConfigurationKeys.STORE_DB_PASSWORD);\n+        String publicKey = getPublicKey();\n+        if (StringUtils.isNotBlank(publicKey)) {\n+            try {\n+                password = ConfigTools.decrypt(publicKey, password);\n+            } catch (Exception e) {\n+                if (LOGGER.isErrorEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjUzOTY2OQ=="}, "originalCommit": {"oid": "496b4264467b553a50c2caa3a58302b26617d4bd"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjkwODQyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/constants/ConfigurationKeys.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMTo0MDo1NlrOGp5jiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNDoxMToyN1rOGp9t9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Nzc4NA==", "bodyText": "KER or KEY?", "url": "https://github.com/seata/seata/pull/2667#discussion_r446587784", "createdAt": "2020-06-28T01:40:56Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/constants/ConfigurationKeys.java", "diffHunk": "@@ -229,6 +229,11 @@\n      */\n     public static final String STORE_DB_LOG_QUERY_LIMIT = STORE_DB_PREFIX + \"queryLimit\";\n \n+    /**\n+     * The constant STORE_DB_PUBLIC_KER.\n+     */\n+    public static final String STORE_DB_PUBLIC_KER = STORE_DB_PREFIX + \"publicKey\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "496b4264467b553a50c2caa3a58302b26617d4bd"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1NTk4OQ==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2667#discussion_r446655989", "createdAt": "2020-06-28T14:11:27Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/constants/ConfigurationKeys.java", "diffHunk": "@@ -229,6 +229,11 @@\n      */\n     public static final String STORE_DB_LOG_QUERY_LIMIT = STORE_DB_PREFIX + \"queryLimit\";\n \n+    /**\n+     * The constant STORE_DB_PUBLIC_KER.\n+     */\n+    public static final String STORE_DB_PUBLIC_KER = STORE_DB_PREFIX + \"publicKey\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU4Nzc4NA=="}, "originalCommit": {"oid": "496b4264467b553a50c2caa3a58302b26617d4bd"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjkzOTQ2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/store/db/AbstractDataSourceProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMjozNzo1MlrOGp5xxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNDoxMToyNFrOGp9t6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MTQyOQ==", "bodyText": "ConfigTools is the class of druid. Is any problem when use other? And this is the abstract class, I think you should override the method of\ngetPassword()", "url": "https://github.com/seata/seata/pull/2667#discussion_r446591429", "createdAt": "2020-06-28T02:37:52Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/store/db/AbstractDataSourceProvider.java", "diffHunk": "@@ -195,6 +202,18 @@ protected String getUser() {\n      */\n     protected String getPassword() {\n         String password = CONFIG.getConfig(ConfigurationKeys.STORE_DB_PASSWORD);\n+        String publicKey = getPublicKey();\n+        if (StringUtils.isNotBlank(publicKey)) {\n+            try {\n+                password = ConfigTools.decrypt(publicKey, password);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "496b4264467b553a50c2caa3a58302b26617d4bd"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1NTk3Ng==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2667#discussion_r446655976", "createdAt": "2020-06-28T14:11:24Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/store/db/AbstractDataSourceProvider.java", "diffHunk": "@@ -195,6 +202,18 @@ protected String getUser() {\n      */\n     protected String getPassword() {\n         String password = CONFIG.getConfig(ConfigurationKeys.STORE_DB_PASSWORD);\n+        String publicKey = getPublicKey();\n+        if (StringUtils.isNotBlank(publicKey)) {\n+            try {\n+                password = ConfigTools.decrypt(publicKey, password);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MTQyOQ=="}, "originalCommit": {"oid": "496b4264467b553a50c2caa3a58302b26617d4bd"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mjk1NDkyOnYy", "diffSide": "RIGHT", "path": "server/src/main/resources/file.conf", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQwMzowNjowN1rOGp55QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNDoxMToxNVrOGp9tyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MzM0NA==", "bodyText": "write a comment for publicKey", "url": "https://github.com/seata/seata/pull/2667#discussion_r446593344", "createdAt": "2020-06-28T03:06:07Z", "author": {"login": "jsbxyyx"}, "path": "server/src/main/resources/file.conf", "diffHunk": "@@ -37,6 +37,7 @@ store {\n     lockTable = \"lock_table\"\n     queryLimit = 100\n     maxWait = 5000\n+    publicKey = \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "496b4264467b553a50c2caa3a58302b26617d4bd"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1NTk0Nw==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2667#discussion_r446655947", "createdAt": "2020-06-28T14:11:15Z", "author": {"login": "a364176773"}, "path": "server/src/main/resources/file.conf", "diffHunk": "@@ -37,6 +37,7 @@ store {\n     lockTable = \"lock_table\"\n     queryLimit = 100\n     maxWait = 5000\n+    publicKey = \"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU5MzM0NA=="}, "originalCommit": {"oid": "496b4264467b553a50c2caa3a58302b26617d4bd"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMTE1MTk0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/ConfigTools.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwNjozMjoyMlrOGslM-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxNTozMzozNlrOGszocA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMDA1OQ==", "bodyText": "use java.util.Base64", "url": "https://github.com/seata/seata/pull/2667#discussion_r449400059", "createdAt": "2020-07-03T06:32:22Z", "author": {"login": "jsbxyyx"}, "path": "common/src/main/java/io/seata/common/util/ConfigTools.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+import java.io.IOException;\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Scanner;\n+\n+import javax.crypto.Cipher;\n+\n+import sun.misc.BASE64Decoder;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b8ee3f817a694f8f24b33beb8b5b4733b10bd34"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTYzNjQ2NA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2667#discussion_r449636464", "createdAt": "2020-07-03T15:33:36Z", "author": {"login": "a364176773"}, "path": "common/src/main/java/io/seata/common/util/ConfigTools.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+import java.io.IOException;\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Scanner;\n+\n+import javax.crypto.Cipher;\n+\n+import sun.misc.BASE64Decoder;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQwMDA1OQ=="}, "originalCommit": {"oid": "5b8ee3f817a694f8f24b33beb8b5b4733b10bd34"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODg0NDU5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/ConfigTools.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxNjozMjo1N1rOHfg9Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQwMzo0OToxNlrOHj6fMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwNzg2Mw==", "bodyText": "\u8fd9\u4e2a\u7c7b\u91cc\u9762\u7684\u4e00\u4e9b\u65b9\u6cd5\u5176\u5b9e\u662f\u4e0d\u4f1a\u629b\u51fa\u5f02\u5e38\u7684\uff0c\u6bd4\u5982getKeyPair\uff1b\u9664\u6b64\u4e4b\u5916\uff0c\u5176\u4ed6\u6709\u8dd1\u5f02\u5e38\u7684\u65b9\u6cd5\uff0c\u611f\u89c9\u90fd\u53ef\u4ee5\u8f6c\u6362\u6210ShouldNeverHappenException\n\u7136\u540e\u8fd8\u6709 \"RSA\", \"UTF-8\"\u611f\u89c9\u6539\u6210\u5e38\u91cf\u4f1a\u597d\u70b9 StandardCharsets.UTF_8", "url": "https://github.com/seata/seata/pull/2667#discussion_r502807863", "createdAt": "2020-10-10T16:32:57Z", "author": {"login": "caohdgege"}, "path": "common/src/main/java/io/seata/common/util/ConfigTools.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+import java.util.Scanner;\n+import javax.crypto.Cipher;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigTools {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4483ed4085ba4ff5ff6e455ea6a830757fb965a1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzQyMDQ2Nw==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2667#discussion_r507420467", "createdAt": "2020-10-19T03:49:16Z", "author": {"login": "a364176773"}, "path": "common/src/main/java/io/seata/common/util/ConfigTools.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+import java.util.Scanner;\n+import javax.crypto.Cipher;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigTools {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjgwNzg2Mw=="}, "originalCommit": {"oid": "4483ed4085ba4ff5ff6e455ea6a830757fb965a1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxODM4NjgzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/ConfigTools.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTozMjowNFrOH4mUow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwMTozMjowNFrOH4mUow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTExMDE3OQ==", "bodyText": "please remove the main", "url": "https://github.com/seata/seata/pull/2667#discussion_r529110179", "createdAt": "2020-11-24T01:32:04Z", "author": {"login": "l81893521"}, "path": "common/src/main/java/io/seata/common/util/ConfigTools.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.util;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.security.spec.X509EncodedKeySpec;\n+import java.util.Base64;\n+import java.util.Scanner;\n+import javax.crypto.Cipher;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigTools {\n+\n+    // generate key pair\n+    public static KeyPair getKeyPair() throws Exception {\n+        KeyPairGenerator keyPairGenerator = KeyPairGenerator.getInstance(\"RSA\");\n+        keyPairGenerator.initialize(2048);\n+        KeyPair keyPair = keyPairGenerator.generateKeyPair();\n+        return keyPair;\n+    }\n+\n+    // obtain the public key (Base64 encoding)\n+    public static String getPublicKey(KeyPair keyPair) {\n+        PublicKey publicKey = keyPair.getPublic();\n+        byte[] bytes = publicKey.getEncoded();\n+        return byte2Base64(bytes);\n+    }\n+\n+    // obtain the private key (Base64 encoding)\n+    public static String getPrivateKey(KeyPair keyPair) {\n+        PrivateKey privateKey = keyPair.getPrivate();\n+        byte[] bytes = privateKey.getEncoded();\n+        return byte2Base64(bytes);\n+    }\n+\n+    // convert Base64 encoded public key to PublicKey object\n+    public static PublicKey string2PublicKey(String pubStr) throws Exception {\n+        byte[] keyBytes = base642Byte(pubStr);\n+        X509EncodedKeySpec keySpec = new X509EncodedKeySpec(keyBytes);\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PublicKey publicKey = keyFactory.generatePublic(keySpec);\n+        return publicKey;\n+    }\n+\n+    // convert Base64 encoded private key to PrivateKey object\n+    public static PrivateKey string2PrivateKey(String priStr) throws Exception {\n+        byte[] keyBytes = base642Byte(priStr);\n+        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(keyBytes);\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"RSA\");\n+        PrivateKey privateKey = keyFactory.generatePrivate(keySpec);\n+        return privateKey;\n+    }\n+\n+    // public key encryption\n+    public static String publicEncrypt(String content, String pubStr) throws Exception {\n+        PublicKey publicKey = string2PublicKey(pubStr);\n+        Cipher cipher = Cipher.getInstance(\"RSA\");\n+        cipher.init(Cipher.ENCRYPT_MODE, publicKey);\n+        byte[] bytes = cipher.doFinal(content.getBytes());\n+        return byte2Base64(bytes);\n+    }\n+\n+    // public key decryption\n+    public static String publicDecrypt(String content, String pubStr) throws Exception {\n+        PublicKey publicKey = string2PublicKey(pubStr);\n+        Cipher cipher = Cipher.getInstance(\"RSA\");\n+        cipher.init(Cipher.DECRYPT_MODE, publicKey);\n+        byte[] bytes = cipher.doFinal(base642Byte(content));\n+        return new String(bytes, StandardCharsets.UTF_8);\n+    }\n+\n+    // private key encryption\n+    public static String privateEncrypt(String content, String priStr) throws Exception {\n+        PrivateKey privateKey = string2PrivateKey(priStr);\n+        Cipher cipher = Cipher.getInstance(\"RSA\");\n+        cipher.init(Cipher.ENCRYPT_MODE, privateKey);\n+        byte[] bytes = cipher.doFinal(content.getBytes());\n+        return byte2Base64(bytes);\n+    }\n+\n+    // private key decryption\n+    public static String privateDecrypt(String content, String priStr) throws Exception {\n+        PrivateKey privateKey = string2PrivateKey(priStr);\n+        Cipher cipher = Cipher.getInstance(\"RSA\");\n+        cipher.init(Cipher.DECRYPT_MODE, privateKey);\n+        byte[] bytes = cipher.doFinal(base642Byte(content));\n+        return new String(bytes, StandardCharsets.UTF_8);\n+    }\n+\n+    // byte array to Base64 encoding\n+    public static String byte2Base64(byte[] bytes) {\n+        return new String(Base64.getEncoder().encode(bytes), StandardCharsets.UTF_8);\n+    }\n+\n+    // Base64 encoding to byte array\n+    public static byte[] base642Byte(String base64Key) {\n+        return Base64.getDecoder().decode(base64Key);\n+    }\n+\n+    public static void main(String[] args) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41f6e42be719d9cb77c47f211ee4655c532d8f14"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1OTYxODgxOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/storage/redis/JedisPooledFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNTo1MTo1NFrOIMd4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0zMFQwNjozMDo1N1rOIMeR4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0MzM3OQ==", "bodyText": "password is null string. ignore?", "url": "https://github.com/seata/seata/pull/2667#discussion_r549943379", "createdAt": "2020-12-30T05:51:54Z", "author": {"login": "jsbxyyx"}, "path": "server/src/main/java/io/seata/server/storage/redis/JedisPooledFactory.java", "diffHunk": "@@ -74,8 +77,19 @@ public static JedisPoolAbstract getJedisPoolInstance(JedisPoolAbstract... jedisP\n                         jedisPool = jedisPools[0];\n                     } else {\n                         String password = CONFIGURATION.getConfig(ConfigurationKeys.STORE_REDIS_PASSWORD);\n-                        if (StringUtils.isBlank(password)) {\n+                        if (StringUtils.isBlank(password) || StringUtils.equalsIgnoreCase(password, DEFAULT_PASSWORD)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01a51c83f67f1d8bfda27c9c591846ee3da05ff8"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0OTkyMw==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2667#discussion_r549949923", "createdAt": "2020-12-30T06:30:57Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/redis/JedisPooledFactory.java", "diffHunk": "@@ -74,8 +77,19 @@ public static JedisPoolAbstract getJedisPoolInstance(JedisPoolAbstract... jedisP\n                         jedisPool = jedisPools[0];\n                     } else {\n                         String password = CONFIGURATION.getConfig(ConfigurationKeys.STORE_REDIS_PASSWORD);\n-                        if (StringUtils.isBlank(password)) {\n+                        if (StringUtils.isBlank(password) || StringUtils.equalsIgnoreCase(password, DEFAULT_PASSWORD)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTk0MzM3OQ=="}, "originalCommit": {"oid": "01a51c83f67f1d8bfda27c9c591846ee3da05ff8"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1583, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}