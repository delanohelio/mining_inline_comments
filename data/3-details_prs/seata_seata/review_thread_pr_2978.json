{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMjg4NzQ5", "number": 2978, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo1MDoyMlrOEWFlWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyMzo1OFrOEWG8HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNTk1NjA5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/session/GlobalSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo1MDoyMlrOG9NU3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNTo1MDoyMlrOG9NU3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjgzNDY1Mw==", "bodyText": "there will be a ConcurrentModificationException\uff0cIterators should be used", "url": "https://github.com/seata/seata/pull/2978#discussion_r466834653", "createdAt": "2020-08-07T05:50:22Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/session/GlobalSession.java", "diffHunk": "@@ -106,15 +109,54 @@ public boolean remove(BranchSession branchSession) {\n      *\n      * @return the boolean\n      */\n+    @Override\n     public boolean canBeCommittedAsync() {\n         for (BranchSession branchSession : branchSessions) {\n-            if (branchSession.getBranchType() == BranchType.TCC || branchSession.getBranchType() == BranchType.XA) {\n+            if (!branchSession.canBeCommittedAsync()) {\n                 return false;\n             }\n         }\n         return true;\n     }\n \n+    /**\n+     * Take out branch sessions that can be committed async.\n+     *\n+     * @return the branch sessions that can be committed async\n+     */\n+    public ArrayList<BranchSession> takeOutBranchSessionsCanBeCommittedAsync() {\n+        ArrayList<BranchSession> branchSessionsCanBeCommittedAsync = new ArrayList<>();\n+\n+        BranchSession branchSession;\n+        for (int i = 0; i < branchSessions.size(); i++) {\n+            branchSession = branchSessions.get(i);\n+            if (branchSession.getBranchType() == BranchType.AT) {\n+                branchSessions.remove(i);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4921b3db32c9a7f2bcbedc3b73b1be15b690539b"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjE3ODIwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/session/GlobalSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyMzo1OFrOG9PWlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwNzoyMzo1OFrOG9PWlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Njg2Nzg2MQ==", "bodyText": "branchSessionsCanBeCommittedAsync   -> branchSessions \uff1f", "url": "https://github.com/seata/seata/pull/2978#discussion_r466867861", "createdAt": "2020-08-07T07:23:58Z", "author": {"login": "slievrly"}, "path": "server/src/main/java/io/seata/server/session/GlobalSession.java", "diffHunk": "@@ -106,15 +110,54 @@ public boolean remove(BranchSession branchSession) {\n      *\n      * @return the boolean\n      */\n+    @Override\n     public boolean canBeCommittedAsync() {\n         for (BranchSession branchSession : branchSessions) {\n-            if (branchSession.getBranchType() == BranchType.TCC || branchSession.getBranchType() == BranchType.XA) {\n+            if (!branchSession.canBeCommittedAsync()) {\n                 return false;\n             }\n         }\n         return true;\n     }\n \n+    /**\n+     * Take out branch sessions that can be committed async.\n+     *\n+     * @return the branch sessions that can be committed async\n+     */\n+    public ArrayList<BranchSession> takeOutBranchSessionsCanBeCommittedAsync() {\n+        ArrayList<BranchSession> branchSessionsCanBeCommittedAsync = new ArrayList<>();\n+\n+        BranchSession branchSession;\n+        Iterator<BranchSession> iter = branchSessions.iterator();\n+        while (iter.hasNext()) {\n+            branchSession = iter.next();\n+            if (branchSession.getBranchType() == BranchType.AT) {\n+                iter.remove();\n+                branchSessionsCanBeCommittedAsync.add(branchSession);\n+            }\n+        }\n+\n+        if (branchSessionsCanBeCommittedAsync.size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "238fa7516b6045285838d7faf07eb918a4ea437b"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1395, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}