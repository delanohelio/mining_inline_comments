{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjY1MzE2", "number": 2217, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODoyNzoyMVrODZvx9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTozNjowMFrODdN1-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4MzIzODI5OnYy", "diffSide": "RIGHT", "path": "script/client/spring/application.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODoyNzoyMVrOFgTwVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQwODozMDoyMFrOFgT06g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyMjQyMA==", "bodyText": "Is it ok to just write log here?", "url": "https://github.com/seata/seata/pull/2217#discussion_r369422420", "createdAt": "2020-01-22T08:27:21Z", "author": {"login": "slievrly"}, "path": "script/client/spring/application.yml", "diffHunk": "@@ -5,21 +5,22 @@ seata:\n   enable-auto-data-source-proxy: true\n   use-jdk-proxy: false\n   client:\n-    rm-async-commit-buffer-limit: 1000\n-    rm-report-retry-count: 5\n-    rm-table-meta-check-enable: false\n-    rm-report-success-enable: true\n     rm:\n+      sync-commit-buffer-limit: 1000\n+      report-retry-count: 5\n+      table-meta-check-enable: false\n+      report-success-enable: true\n       lock:\n-        lock-retry-interval: 10\n-        lock-retry-times: 30\n-        lock-retry-policy-branch-rollback-on-conflict: true\n-    tm-commit-retry-count: 5\n-    tm-rollback-retry-count: 5\n+        retry-interval: 10\n+        retry-times: 30\n+        retry-policy-branch-rollback-on-conflict: true\n+    tm:\n+      commit-retry-count: 5\n+      rollback-retry-count: 5\n     undo:\n-      undo-data-validation: true\n-      undo-log-serialization: jackson\n-      undo-log-table: undo_log\n+      data-validation: true\n+      log-serialization: jackson\n+      log-table: undo_log\n     client:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e6e6362482b4e524a259ad9802cd1bcfd0e7c97"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyMzU5NA==", "bodyText": "It's my mistake.", "url": "https://github.com/seata/seata/pull/2217#discussion_r369423594", "createdAt": "2020-01-22T08:30:20Z", "author": {"login": "xingfudeshi"}, "path": "script/client/spring/application.yml", "diffHunk": "@@ -5,21 +5,22 @@ seata:\n   enable-auto-data-source-proxy: true\n   use-jdk-proxy: false\n   client:\n-    rm-async-commit-buffer-limit: 1000\n-    rm-report-retry-count: 5\n-    rm-table-meta-check-enable: false\n-    rm-report-success-enable: true\n     rm:\n+      sync-commit-buffer-limit: 1000\n+      report-retry-count: 5\n+      table-meta-check-enable: false\n+      report-success-enable: true\n       lock:\n-        lock-retry-interval: 10\n-        lock-retry-times: 30\n-        lock-retry-policy-branch-rollback-on-conflict: true\n-    tm-commit-retry-count: 5\n-    tm-rollback-retry-count: 5\n+        retry-interval: 10\n+        retry-times: 30\n+        retry-policy-branch-rollback-on-conflict: true\n+    tm:\n+      commit-retry-count: 5\n+      rollback-retry-count: 5\n     undo:\n-      undo-data-validation: true\n-      undo-log-serialization: jackson\n-      undo-log-table: undo_log\n+      data-validation: true\n+      log-serialization: jackson\n+      log-table: undo_log\n     client:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTQyMjQyMA=="}, "originalCommit": {"oid": "6e6e6362482b4e524a259ad9802cd1bcfd0e7c97"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjM4NTg3OnYy", "diffSide": "RIGHT", "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNToyMTo0M1rOFju6Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwNzoyMzoxOFrOFkoKPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMzA5NA==", "bodyText": "minusToCamel?", "url": "https://github.com/seata/seata/pull/2217#discussion_r373013094", "createdAt": "2020-01-30T15:21:43Z", "author": {"login": "slievrly"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -114,42 +125,46 @@ private Object get(String dataId) throws IllegalAccessException {\n      */\n     private String convertDataId(String rawDataId) {\n         if (rawDataId.startsWith(SPECIAL_KEY_VGROUP_MAPPING)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_VGROUP_MAPPING;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_VGROUP_MAPPING;\n         }\n         if (rawDataId.endsWith(SPECIAL_KEY_GROUPLIST)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_GROUPLIST;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_GROUPLIST;\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_UNDO)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_UNDO);\n-            return StarterConstants.UNDO_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+            return UNDO_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_LOCK)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_LOCK);\n-            return StarterConstants.LOCK_PREFIX + \".\" + StringFormatUtils.minusToCamel(\n+            return LOCK_PREFIX + DOT + StringFormatUtils.minusToCamel(\n                 StringFormatUtils.dotToCamel(suffix));\n         }\n-        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT)) {\n-            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT);\n-            return StarterConstants.CLIENT_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_RM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_RM);\n+            return CLIENT_RM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f549510d3679a87cdd9e6d481637c03a7c5ea19"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwNTgzOA==", "bodyText": "Not required.", "url": "https://github.com/seata/seata/pull/2217#discussion_r373305838", "createdAt": "2020-01-31T03:49:48Z", "author": {"login": "xingfudeshi"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -114,42 +125,46 @@ private Object get(String dataId) throws IllegalAccessException {\n      */\n     private String convertDataId(String rawDataId) {\n         if (rawDataId.startsWith(SPECIAL_KEY_VGROUP_MAPPING)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_VGROUP_MAPPING;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_VGROUP_MAPPING;\n         }\n         if (rawDataId.endsWith(SPECIAL_KEY_GROUPLIST)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_GROUPLIST;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_GROUPLIST;\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_UNDO)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_UNDO);\n-            return StarterConstants.UNDO_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+            return UNDO_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_LOCK)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_LOCK);\n-            return StarterConstants.LOCK_PREFIX + \".\" + StringFormatUtils.minusToCamel(\n+            return LOCK_PREFIX + DOT + StringFormatUtils.minusToCamel(\n                 StringFormatUtils.dotToCamel(suffix));\n         }\n-        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT)) {\n-            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT);\n-            return StarterConstants.CLIENT_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_RM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_RM);\n+            return CLIENT_RM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMzA5NA=="}, "originalCommit": {"oid": "5f549510d3679a87cdd9e6d481637c03a7c5ea19"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc4Nzc0Mw==", "bodyText": "Will the hyphen code style change to camel?", "url": "https://github.com/seata/seata/pull/2217#discussion_r373787743", "createdAt": "2020-02-01T16:14:45Z", "author": {"login": "slievrly"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -114,42 +125,46 @@ private Object get(String dataId) throws IllegalAccessException {\n      */\n     private String convertDataId(String rawDataId) {\n         if (rawDataId.startsWith(SPECIAL_KEY_VGROUP_MAPPING)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_VGROUP_MAPPING;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_VGROUP_MAPPING;\n         }\n         if (rawDataId.endsWith(SPECIAL_KEY_GROUPLIST)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_GROUPLIST;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_GROUPLIST;\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_UNDO)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_UNDO);\n-            return StarterConstants.UNDO_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+            return UNDO_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_LOCK)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_LOCK);\n-            return StarterConstants.LOCK_PREFIX + \".\" + StringFormatUtils.minusToCamel(\n+            return LOCK_PREFIX + DOT + StringFormatUtils.minusToCamel(\n                 StringFormatUtils.dotToCamel(suffix));\n         }\n-        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT)) {\n-            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT);\n-            return StarterConstants.CLIENT_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_RM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_RM);\n+            return CLIENT_RM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMzA5NA=="}, "originalCommit": {"oid": "5f549510d3679a87cdd9e6d481637c03a7c5ea19"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxNzIzOQ==", "bodyText": "When read item from yml/properties files spring-boot will do the conversion automatically.", "url": "https://github.com/seata/seata/pull/2217#discussion_r373817239", "createdAt": "2020-02-02T03:54:15Z", "author": {"login": "xingfudeshi"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -114,42 +125,46 @@ private Object get(String dataId) throws IllegalAccessException {\n      */\n     private String convertDataId(String rawDataId) {\n         if (rawDataId.startsWith(SPECIAL_KEY_VGROUP_MAPPING)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_VGROUP_MAPPING;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_VGROUP_MAPPING;\n         }\n         if (rawDataId.endsWith(SPECIAL_KEY_GROUPLIST)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_GROUPLIST;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_GROUPLIST;\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_UNDO)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_UNDO);\n-            return StarterConstants.UNDO_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+            return UNDO_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_LOCK)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_LOCK);\n-            return StarterConstants.LOCK_PREFIX + \".\" + StringFormatUtils.minusToCamel(\n+            return LOCK_PREFIX + DOT + StringFormatUtils.minusToCamel(\n                 StringFormatUtils.dotToCamel(suffix));\n         }\n-        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT)) {\n-            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT);\n-            return StarterConstants.CLIENT_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_RM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_RM);\n+            return CLIENT_RM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMzA5NA=="}, "originalCommit": {"oid": "5f549510d3679a87cdd9e6d481637c03a7c5ea19"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzgxNzQ0Ng==", "bodyText": "minusToCamel is used to convert the items read from original configuration.", "url": "https://github.com/seata/seata/pull/2217#discussion_r373817446", "createdAt": "2020-02-02T04:00:38Z", "author": {"login": "xingfudeshi"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -114,42 +125,46 @@ private Object get(String dataId) throws IllegalAccessException {\n      */\n     private String convertDataId(String rawDataId) {\n         if (rawDataId.startsWith(SPECIAL_KEY_VGROUP_MAPPING)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_VGROUP_MAPPING;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_VGROUP_MAPPING;\n         }\n         if (rawDataId.endsWith(SPECIAL_KEY_GROUPLIST)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_GROUPLIST;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_GROUPLIST;\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_UNDO)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_UNDO);\n-            return StarterConstants.UNDO_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+            return UNDO_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_LOCK)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_LOCK);\n-            return StarterConstants.LOCK_PREFIX + \".\" + StringFormatUtils.minusToCamel(\n+            return LOCK_PREFIX + DOT + StringFormatUtils.minusToCamel(\n                 StringFormatUtils.dotToCamel(suffix));\n         }\n-        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT)) {\n-            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT);\n-            return StarterConstants.CLIENT_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_RM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_RM);\n+            return CLIENT_RM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMzA5NA=="}, "originalCommit": {"oid": "5f549510d3679a87cdd9e6d481637c03a7c5ea19"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzk1MTAzNw==", "bodyText": "In the code is actually read the dot between configuration items, I wrong thought is a hyphen interval.", "url": "https://github.com/seata/seata/pull/2217#discussion_r373951037", "createdAt": "2020-02-03T07:23:18Z", "author": {"login": "slievrly"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -114,42 +125,46 @@ private Object get(String dataId) throws IllegalAccessException {\n      */\n     private String convertDataId(String rawDataId) {\n         if (rawDataId.startsWith(SPECIAL_KEY_VGROUP_MAPPING)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_VGROUP_MAPPING;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_VGROUP_MAPPING;\n         }\n         if (rawDataId.endsWith(SPECIAL_KEY_GROUPLIST)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_GROUPLIST;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_GROUPLIST;\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_UNDO)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_UNDO);\n-            return StarterConstants.UNDO_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+            return UNDO_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_LOCK)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_LOCK);\n-            return StarterConstants.LOCK_PREFIX + \".\" + StringFormatUtils.minusToCamel(\n+            return LOCK_PREFIX + DOT + StringFormatUtils.minusToCamel(\n                 StringFormatUtils.dotToCamel(suffix));\n         }\n-        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT)) {\n-            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT);\n-            return StarterConstants.CLIENT_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_RM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_RM);\n+            return CLIENT_RM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMzA5NA=="}, "originalCommit": {"oid": "5f549510d3679a87cdd9e6d481637c03a7c5ea19"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNjM4NjY1OnYy", "diffSide": "RIGHT", "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNToyMTo1MlrOFju60g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQwMzo1MDo1OVrOFkAysQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMzIwMg==", "bodyText": "minusToCamel?", "url": "https://github.com/seata/seata/pull/2217#discussion_r373013202", "createdAt": "2020-01-30T15:21:52Z", "author": {"login": "slievrly"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -114,42 +125,46 @@ private Object get(String dataId) throws IllegalAccessException {\n      */\n     private String convertDataId(String rawDataId) {\n         if (rawDataId.startsWith(SPECIAL_KEY_VGROUP_MAPPING)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_VGROUP_MAPPING;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_VGROUP_MAPPING;\n         }\n         if (rawDataId.endsWith(SPECIAL_KEY_GROUPLIST)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_GROUPLIST;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_GROUPLIST;\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_UNDO)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_UNDO);\n-            return StarterConstants.UNDO_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+            return UNDO_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_LOCK)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_LOCK);\n-            return StarterConstants.LOCK_PREFIX + \".\" + StringFormatUtils.minusToCamel(\n+            return LOCK_PREFIX + DOT + StringFormatUtils.minusToCamel(\n                 StringFormatUtils.dotToCamel(suffix));\n         }\n-        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT)) {\n-            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT);\n-            return StarterConstants.CLIENT_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_RM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_RM);\n+            return CLIENT_RM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n+        }\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_TM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_TM);\n+            return CLIENT_TM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f549510d3679a87cdd9e6d481637c03a7c5ea19"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzMwNjAzMw==", "bodyText": "Not required.\ntm {\ncommit.retry.count = 5\nrollback.retry.count = 5\n}", "url": "https://github.com/seata/seata/pull/2217#discussion_r373306033", "createdAt": "2020-01-31T03:50:59Z", "author": {"login": "xingfudeshi"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -114,42 +125,46 @@ private Object get(String dataId) throws IllegalAccessException {\n      */\n     private String convertDataId(String rawDataId) {\n         if (rawDataId.startsWith(SPECIAL_KEY_VGROUP_MAPPING)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_VGROUP_MAPPING;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_VGROUP_MAPPING;\n         }\n         if (rawDataId.endsWith(SPECIAL_KEY_GROUPLIST)) {\n-            return StarterConstants.SERVICE_PREFIX + \".\" + NORMALIZED_KEY_GROUPLIST;\n+            return SERVICE_PREFIX + DOT + NORMALIZED_KEY_GROUPLIST;\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_UNDO)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_UNDO);\n-            return StarterConstants.UNDO_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+            return UNDO_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n         }\n         if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_LOCK)) {\n             String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_LOCK);\n-            return StarterConstants.LOCK_PREFIX + \".\" + StringFormatUtils.minusToCamel(\n+            return LOCK_PREFIX + DOT + StringFormatUtils.minusToCamel(\n                 StringFormatUtils.dotToCamel(suffix));\n         }\n-        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT)) {\n-            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT);\n-            return StarterConstants.CLIENT_PREFIX + \".\" + StringFormatUtils.dotToCamel(suffix);\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_RM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_RM);\n+            return CLIENT_RM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);\n+        }\n+        if (rawDataId.startsWith(SPECIAL_KEY_CLIENT_TM)) {\n+            String suffix = StringUtils.removeStart(rawDataId, SPECIAL_KEY_CLIENT_TM);\n+            return CLIENT_TM_PREFIX + DOT + StringFormatUtils.dotToCamel(suffix);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzAxMzIwMg=="}, "originalCommit": {"oid": "5f549510d3679a87cdd9e6d481637c03a7c5ea19"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTYyMTA1OnYy", "diffSide": "RIGHT", "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTozNjowMFrOFlsRNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNTozOToyNlrOFlsUEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NjkzNA==", "bodyText": "please check the import", "url": "https://github.com/seata/seata/pull/2217#discussion_r375066934", "createdAt": "2020-02-05T05:36:00Z", "author": {"login": "l81893521"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -23,26 +23,37 @@\n \n import io.seata.config.Configuration;\n import io.seata.config.ExtConfigurationProvider;\n-import io.seata.spring.boot.autoconfigure.StarterConstants;\n import io.seata.spring.boot.autoconfigure.util.SpringUtils;\n import io.seata.spring.boot.autoconfigure.util.StringFormatUtils;\n import org.apache.commons.lang.StringUtils;\n import org.springframework.cglib.proxy.Enhancer;\n import org.springframework.cglib.proxy.MethodInterceptor;\n import org.springframework.cglib.proxy.MethodProxy;\n \n+import static com.alipay.lookout.common.LookoutConstants.DOT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79b41db9cb27d1db9d091f5e7fd36eff3864c359"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NzY2NA==", "bodyText": "fixed", "url": "https://github.com/seata/seata/pull/2217#discussion_r375067664", "createdAt": "2020-02-05T05:39:26Z", "author": {"login": "xingfudeshi"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/provider/SpringBootConfigurationProvider.java", "diffHunk": "@@ -23,26 +23,37 @@\n \n import io.seata.config.Configuration;\n import io.seata.config.ExtConfigurationProvider;\n-import io.seata.spring.boot.autoconfigure.StarterConstants;\n import io.seata.spring.boot.autoconfigure.util.SpringUtils;\n import io.seata.spring.boot.autoconfigure.util.StringFormatUtils;\n import org.apache.commons.lang.StringUtils;\n import org.springframework.cglib.proxy.Enhancer;\n import org.springframework.cglib.proxy.MethodInterceptor;\n import org.springframework.cglib.proxy.MethodProxy;\n \n+import static com.alipay.lookout.common.LookoutConstants.DOT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA2NjkzNA=="}, "originalCommit": {"oid": "79b41db9cb27d1db9d091f5e7fd36eff3864c359"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1604, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}