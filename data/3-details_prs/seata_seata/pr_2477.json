{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTE2MTMx", "number": 2477, "title": "optimize: refactor client handle request process logic from server", "bodyText": "\u2160. Describe what this PR did\n\nadd netty processor,  in order to separate the processing business from netty.\nadd client processor\uff1a\nClientHeartbeatProcessor\nClientOnResponseProcessor\nRmBranchCommitProcessor\nRmBranchRollbackProcessor\nRmUndoLogProcessor\nremove interfaces:\nClientMessageSender\nRegisterMsgListener\nClientMessageListener\nadd RemotingBootstrap interface.\n\n\u2161. Does this pull request fix one issue?\nrefactoring tasks: #2313\nIII.Processor call flow.\nserver -> client\n\nIV. TODO\n\nadd server processor.\nrefactoring rpc request method.", "createdAt": "2020-03-28T16:08:15Z", "url": "https://github.com/seata/seata/pull/2477", "merged": true, "mergeCommit": {"oid": "c5e5c6f0b4d9f7629d4de1c845f8b9a1bcc6a855"}, "closed": true, "closedAt": "2020-05-18T14:35:46Z", "author": {"login": "objcoding"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSHf11AH2gAyMzk1MTE2MTMxOjAxYjFkZWI1ZWYwZTAyMzE1MmIwNWZiMWIxYTJmM2Q4NDQ2NmMwOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcieRuOgH2gAyMzk1MTE2MTMxOjAyNTA5NDlhMmEwMGQ3OWFiMTkzYzk1MzllYjExYTIxYTZkODc2MmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "01b1deb5ef0e023152b05fb1b1a2f3d84466c08c", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/01b1deb5ef0e023152b05fb1b1a2f3d84466c08c", "committedDate": "2020-03-28T16:00:50Z", "message": "optimize: refactoring rpc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5841bb98cfcefe566728496ffaf362034f73feee", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/5841bb98cfcefe566728496ffaf362034f73feee", "committedDate": "2020-03-28T16:24:56Z", "message": "fix MessageFutureTest#testFieldSetGet."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "969a50f01eb86626726f78d64804d92fa15ce95c", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/969a50f01eb86626726f78d64804d92fa15ce95c", "committedDate": "2020-03-28T16:29:05Z", "message": "fix RpcMessageTest#testFieldGetSetFromJson."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4719ec127b755c64326846c3cdb4e1d1a550775f", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/4719ec127b755c64326846c3cdb4e1d1a550775f", "committedDate": "2020-03-29T05:48:48Z", "message": "fix NullPointException when pair is null."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f738b5339c177bcf2318a3c75c71737096a812da", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/f738b5339c177bcf2318a3c75c71737096a812da", "committedDate": "2020-03-29T06:35:46Z", "message": "get type comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7706cfabca17dcd2353fd23790a33bb3818875de", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/7706cfabca17dcd2353fd23790a33bb3818875de", "committedDate": "2020-03-30T16:00:45Z", "message": "1.fix remoting lock;2.add HeartbeatMessage processor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dd8486c66c2f31990ab85fa68344830ce798b6d", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/7dd8486c66c2f31990ab85fa68344830ce798b6d", "committedDate": "2020-04-01T04:06:40Z", "message": "optimize process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b7b0d2b62abcda60af841db82dc625b72cb1804", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/1b7b0d2b62abcda60af841db82dc625b72cb1804", "committedDate": "2020-04-01T04:10:33Z", "message": "optimize process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab2406e177ec7150128f5188882412c83db4b88f", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/ab2406e177ec7150128f5188882412c83db4b88f", "committedDate": "2020-04-01T04:13:21Z", "message": "optimize process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e626fe9b5c9926a24b14470da05ba46d3c498621", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/e626fe9b5c9926a24b14470da05ba46d3c498621", "committedDate": "2020-04-01T04:41:09Z", "message": "optimize process"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cbaee14d8d718b83487db88536e19ca58a6468d", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/0cbaee14d8d718b83487db88536e19ca58a6468d", "committedDate": "2020-04-01T04:54:54Z", "message": "Add Heartbeat MessageType."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b64e4a2971ccf1fc922f85a961fb027a6b49bd4", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/1b64e4a2971ccf1fc922f85a961fb027a6b49bd4", "committedDate": "2020-04-01T06:52:54Z", "message": "optimize do process logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8accee14e63adb5bdd868740b460b206ff8c89d", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/e8accee14e63adb5bdd868740b460b206ff8c89d", "committedDate": "2020-04-01T07:02:34Z", "message": "optimize do process logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28ab6dddd6f0a5e8d8e1530dd051337cbc12aa2b", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/28ab6dddd6f0a5e8d8e1530dd051337cbc12aa2b", "committedDate": "2020-04-01T07:18:36Z", "message": "fix ClientHeartbeatMessageProcessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69dafb9b4b15b38f5b6f8647c12273374855b4db", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/69dafb9b4b15b38f5b6f8647c12273374855b4db", "committedDate": "2020-04-01T13:28:24Z", "message": "registry processor before init client."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a0daf2095d13833a400729d6a554db7cc0fad6", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/43a0daf2095d13833a400729d6a554db7cc0fad6", "committedDate": "2020-04-03T09:13:52Z", "message": "rm processor comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba00a8d73be8fa0a233d7d0724fa050395e7abbb", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/ba00a8d73be8fa0a233d7d0724fa050395e7abbb", "committedDate": "2020-04-10T11:48:40Z", "message": "Merge branch 'develop' into refactoring-rpc-phase2\n\n# Conflicts:\n#\tcore/src/main/java/io/seata/core/rpc/netty/RpcClientBootstrap.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c07c40dd9703a3b116b741cff6c22c84e0df344", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/7c07c40dd9703a3b116b741cff6c22c84e0df344", "committedDate": "2020-05-02T11:18:48Z", "message": "Merge branch 'develop' into refactoring-rpc-phase2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48480c6f448126311cc401890028a29012d47ee9", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/48480c6f448126311cc401890028a29012d47ee9", "committedDate": "2020-05-05T14:14:02Z", "message": "Merge branch 'develop' into refactoring-rpc-phase2"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NzMyMzMw", "url": "https://github.com/seata/seata/pull/2477#pullrequestreview-408732330", "createdAt": "2020-05-10T10:51:37Z", "commit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMDo1MTozN1rOGTDFsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTo1MzoxNlrOGTDjGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNjczOA==", "bodyText": "too structured, whether to encapsulate objects to increase readability.", "url": "https://github.com/seata/seata/pull/2477#discussion_r422626738", "createdAt": "2020-05-10T10:51:37Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java", "diffHunk": "@@ -119,9 +124,19 @@ public void setApplicationId(String applicationId) {\n     public void setTransactionServiceGroup(String transactionServiceGroup) {\n         this.transactionServiceGroup = transactionServiceGroup;\n     }\n+\n+    public void setTmProcessor(Map<Integer, Pair<NettyProcessor, Boolean>> processorMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNzM3Ng==", "bodyText": "ImmutablePair", "url": "https://github.com/seata/seata/pull/2477#discussion_r422627376", "createdAt": "2020-05-10T10:56:25Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/Pair.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor;\n+\n+/**\n+ * Currently used to associate object1 and object2\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class Pair<T1, T2> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODA1OA==", "bodyText": "interface type", "url": "https://github.com/seata/seata/pull/2477#discussion_r422628058", "createdAt": "2020-05-10T11:02:13Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/MergeResultMessageProcessor.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.MergeMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.rpc.netty.processor.NettyProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * handle TC response about process merge message.\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class MergeResultMessageProcessor implements NettyProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MergeResultMessageProcessor.class);\n+\n+    /**\n+     * The Merge msg map from AbstractRpcRemoting.\n+     */\n+    private Map<Integer, MergeMessage> mergeMsgMap;\n+\n+    /**\n+     * The Futures from AbstractRpcRemoting.\n+     */\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTg4NQ==", "bodyText": "Why is the exception handling different from RmHandleBranchCommitProcessor?", "url": "https://github.com/seata/seata/pull/2477#discussion_r422629885", "createdAt": "2020-05-10T11:17:35Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/RmHandleBranchRollbackProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.netty.processor.NettyProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The rm client handle branch commit processor\n+ * <p>\n+ * handle TC do global rollback command.\n+ * {@link BranchRollbackRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class RmHandleBranchRollbackProcessor implements NettyProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmHandleBranchRollbackProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmHandleBranchRollbackProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm handle branch rollback process:\" + msg);\n+        }\n+        handleBranchRollback(rpcMessage, remoteAddress, (BranchRollbackRequest) msg);\n+    }\n+\n+    private void handleBranchRollback(RpcMessage request, String serverAddress, BranchRollbackRequest branchRollbackRequest) {\n+        BranchRollbackResponse resultMessage;\n+        resultMessage = (BranchRollbackResponse) handler.onRequest(branchRollbackRequest, null);\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"branch rollback result:\" + resultMessage);\n+        }\n+        try {\n+            this.remotingClient.sendResponse(request, serverAddress, resultMessage);\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"send response error: {}\", throwable.getMessage(), throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMDg5OQ==", "bodyText": "remove", "url": "https://github.com/seata/seata/pull/2477#discussion_r422630899", "createdAt": "2020-05-10T11:25:34Z", "author": {"login": "slievrly"}, "path": "rm/src/main/java/io/seata/rm/RMClient.java", "diffHunk": "@@ -34,7 +44,32 @@\n     public static void init(String applicationId, String transactionServiceGroup) {\n         RmRpcClient rmRpcClient = RmRpcClient.getInstance(applicationId, transactionServiceGroup);\n         rmRpcClient.setResourceManager(DefaultResourceManager.get());\n-        rmRpcClient.setClientMessageListener(new RmMessageListener(DefaultRMHandler.get(), rmRpcClient));\n+        AbstractRMHandler handler = DefaultRMHandler.get();\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchCommitProcessor =\n+            new Pair<>(new RmHandleBranchCommitProcessor(handler, rmRpcClient), true);\n+        processorMap.put((int) MessageType.TYPE_BRANCH_COMMIT, branchCommitProcessor);\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchRollbackProcessor =\n+            new Pair<>(new RmHandleBranchRollbackProcessor(handler, rmRpcClient), true);\n+        processorMap.put((int) MessageType.TYPE_BRANCH_ROLLBACK, branchRollbackProcessor);\n+        // rm handler undo log processor\n+        Pair<NettyProcessor, Boolean> deleteUndoLogProcessor =\n+            new Pair<>(new RmHandleUndoLogProcessor(handler), true);\n+        processorMap.put((int) MessageType.TYPE_RM_DELETE_UNDOLOG, deleteUndoLogProcessor);\n+        // handle TC response about process merge message\n+        Pair<NettyProcessor, Boolean> mergeMsgProcessor =\n+            new Pair<>(new MergeResultMessageProcessor(rmRpcClient.getMergeMsgMap(), rmRpcClient.getFutures()), false);\n+        processorMap.put((int) MessageType.TYPE_SEATA_MERGE_RESULT, mergeMsgProcessor);\n+        rmRpcClient.setRmProcessor(processorMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMTEwMA==", "bodyText": "remove", "url": "https://github.com/seata/seata/pull/2477#discussion_r422631100", "createdAt": "2020-05-10T11:27:26Z", "author": {"login": "slievrly"}, "path": "tm/src/main/java/io/seata/tm/TMClient.java", "diffHunk": "@@ -32,6 +40,18 @@\n      */\n     public static void init(String applicationId, String transactionServiceGroup) {\n         TmRpcClient tmRpcClient = TmRpcClient.getInstance(applicationId, transactionServiceGroup);\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // handle TC response about process merge message\n+        Pair<NettyProcessor, Boolean> mergeMsgProcessor =\n+            new Pair<>(new MergeResultMessageProcessor(tmRpcClient.getMergeMsgMap(), tmRpcClient.getFutures()), false);\n+        processorMap.put((int) MessageType.TYPE_SEATA_MERGE_RESULT, mergeMsgProcessor);\n+        tmRpcClient.setTmProcessor(processorMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzNDI2NQ==", "bodyText": "Whether or not to use a user thread pool can be determined based on the request/response type?", "url": "https://github.com/seata/seata/pull/2477#discussion_r422634265", "createdAt": "2020-05-10T11:53:16Z", "author": {"login": "slievrly"}, "path": "rm/src/main/java/io/seata/rm/RMClient.java", "diffHunk": "@@ -34,7 +44,32 @@\n     public static void init(String applicationId, String transactionServiceGroup) {\n         RmRpcClient rmRpcClient = RmRpcClient.getInstance(applicationId, transactionServiceGroup);\n         rmRpcClient.setResourceManager(DefaultResourceManager.get());\n-        rmRpcClient.setClientMessageListener(new RmMessageListener(DefaultRMHandler.get(), rmRpcClient));\n+        AbstractRMHandler handler = DefaultRMHandler.get();\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchCommitProcessor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f4caefb49a4fa77380502ab4abed6262cb1db2c", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/0f4caefb49a4fa77380502ab4abed6262cb1db2c", "committedDate": "2020-05-13T12:55:30Z", "message": "Merge branch 'develop' into refactoring-rpc-phase2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ced671c549dc7dc74c011392f25259eac4e90d", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/67ced671c549dc7dc74c011392f25259eac4e90d", "committedDate": "2020-05-13T12:56:09Z", "message": "Merge branch 'refactoring-rpc-phase2' of https://github.com/objcoding/seata into refactoring-rpc-phase2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "250fc6473de1235feb441a56b2f7d3991aca58c2", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/250fc6473de1235feb441a56b2f7d3991aca58c2", "committedDate": "2020-05-13T13:45:33Z", "message": "Related optimization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a742796329616b487fbc8fc83c863cd19859911", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/6a742796329616b487fbc8fc83c863cd19859911", "committedDate": "2020-05-13T13:46:06Z", "message": "Merge branch 'develop' into refactoring-rpc-phase2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d33d110bbb78f1c8978c435264f37bfa31e9447", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/9d33d110bbb78f1c8978c435264f37bfa31e9447", "committedDate": "2020-05-13T14:11:58Z", "message": "fix MessageFutureTest and RpcMessageTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1111b017ef85efa4ccc43372660cfa16b30a304", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/d1111b017ef85efa4ccc43372660cfa16b30a304", "committedDate": "2020-05-13T15:04:45Z", "message": "interface type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab2372e22ede90ba2ec066f6316acd6ae15c2061", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/ab2372e22ede90ba2ec066f6316acd6ae15c2061", "committedDate": "2020-05-13T15:05:17Z", "message": "remove useless import class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17a7a811b2ab16f35e27b08866b99b394c48feef", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/17a7a811b2ab16f35e27b08866b99b394c48feef", "committedDate": "2020-05-13T15:08:38Z", "message": "remove useless class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09716537939fdebab3f04adb0120d1ac35966082", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/09716537939fdebab3f04adb0120d1ac35966082", "committedDate": "2020-05-13T15:17:29Z", "message": "ImmutablePair"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f87a030d8f2f651a49a18da9ab40a497424049fd", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/f87a030d8f2f651a49a18da9ab40a497424049fd", "committedDate": "2020-05-13T15:28:02Z", "message": "Unified BranchCommit and BranchRollback processing logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/a56d04edf01f24ab1d229070c04e9c47f7364e4f", "committedDate": "2020-05-14T01:24:57Z", "message": "checkstyle"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDg4Nzg3", "url": "https://github.com/seata/seata/pull/2477#pullrequestreview-411488787", "createdAt": "2020-05-14T06:08:19Z", "commit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjowODoyMFrOGVNRQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjowODozOFrOGVNRsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDY5MA==", "bodyText": "If need to handle exceptions on the outer layer here?", "url": "https://github.com/seata/seata/pull/2477#discussion_r424890690", "createdAt": "2020-05-14T06:08:20Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchCommitProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * process TC global commit command.\n+ * <p>\n+ * process message type:\n+ * {@link BranchCommitRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class RmBranchCommitProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmBranchCommitProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmBranchCommitProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm client handle branch commit process:\" + msg);\n+        }\n+        handleBranchCommit(rpcMessage, remoteAddress, (BranchCommitRequest) msg);\n+    }\n+\n+    private void handleBranchCommit(RpcMessage request, String serverAddress, BranchCommitRequest branchCommitRequest) {\n+        BranchCommitResponse resultMessage;\n+        resultMessage = (BranchCommitResponse) handler.onRequest(branchCommitRequest, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDgwMw==", "bodyText": "same as above", "url": "https://github.com/seata/seata/pull/2477#discussion_r424890803", "createdAt": "2020-05-14T06:08:38Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchRollbackProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * process TC do global rollback command.\n+ * <p>\n+ * process message type:\n+ * {@link BranchRollbackRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class RmBranchRollbackProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmBranchRollbackProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmBranchRollbackProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm handle branch rollback process:\" + msg);\n+        }\n+        handleBranchRollback(rpcMessage, remoteAddress, (BranchRollbackRequest) msg);\n+    }\n+\n+    private void handleBranchRollback(RpcMessage request, String serverAddress, BranchRollbackRequest branchRollbackRequest) {\n+        BranchRollbackResponse resultMessage;\n+        resultMessage = (BranchRollbackResponse) handler.onRequest(branchRollbackRequest, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExNDk5ODM0", "url": "https://github.com/seata/seata/pull/2477#pullrequestreview-411499834", "createdAt": "2020-05-14T06:32:28Z", "commit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzMwMjUw", "url": "https://github.com/seata/seata/pull/2477#pullrequestreview-413330250", "createdAt": "2020-05-18T07:23:10Z", "commit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzoyMzoxMVrOGWqaXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzoyMzoxMVrOGWqaXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjczMw==", "bodyText": "I think this 'if' can be removed.", "url": "https://github.com/seata/seata/pull/2477#discussion_r426416733", "createdAt": "2020-05-18T07:23:11Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/rpc/processor/client/ClientOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RegisterRMResponse;\n+import io.seata.core.protocol.RegisterTMResponse;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRegisterResponse;\n+import io.seata.core.protocol.transaction.BranchReportResponse;\n+import io.seata.core.protocol.transaction.GlobalBeginResponse;\n+import io.seata.core.protocol.transaction.GlobalCommitResponse;\n+import io.seata.core.protocol.transaction.GlobalLockQueryResponse;\n+import io.seata.core.protocol.transaction.GlobalReportResponse;\n+import io.seata.core.protocol.transaction.GlobalRollbackResponse;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * process TC response message.\n+ * <p>\n+ * process message type:\n+ * RM:\n+ * 1) {@link MergeResultMessage}\n+ * 2) {@link RegisterRMResponse}\n+ * 3) {@link BranchRegisterResponse}\n+ * 4) {@link BranchReportResponse}\n+ * 5) {@link GlobalLockQueryResponse}\n+ * TM:\n+ * 1) {@link MergeResultMessage}\n+ * 2) {@link RegisterTMResponse}\n+ * 3) {@link GlobalBeginResponse}\n+ * 4) {@link GlobalCommitResponse}\n+ * 5) {@link GlobalReportResponse}\n+ * 6) {@link GlobalRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ClientOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientOnResponseProcessor.class);\n+\n+    /**\n+     * The Merge msg map from io.seata.core.rpc.netty.AbstractNettyRemotingClient#mergeMsgMap.\n+     */\n+    private Map<Integer, MergeMessage> mergeMsgMap;\n+\n+    /**\n+     * The Futures from io.seata.core.rpc.netty.AbstractNettyRemoting#futures\n+     */\n+    private ConcurrentMap<Integer, MessageFuture> futures;\n+\n+    /**\n+     * To handle the received RPC message on upper level.\n+     */\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    public ClientOnResponseProcessor(Map<Integer, MergeMessage> mergeMsgMap,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures,\n+                                     TransactionMessageHandler transactionMessageHandler) {\n+        this.mergeMsgMap = mergeMsgMap;\n+        this.futures = futures;\n+        this.transactionMessageHandler = transactionMessageHandler;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        if (rpcMessage.getBody() instanceof MergeResultMessage) {\n+            MergeResultMessage results = (MergeResultMessage) rpcMessage.getBody();\n+            MergedWarpMessage mergeMessage = (MergedWarpMessage) mergeMsgMap.remove(rpcMessage.getId());\n+            for (int i = 0; i < mergeMessage.msgs.size(); i++) {\n+                int msgId = mergeMessage.msgIds.get(i);\n+                MessageFuture future = futures.remove(msgId);\n+                if (future == null) {\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"msg: {} is not found in futures.\", msgId);\n+                    }\n+                } else {\n+                    future.setResultMessage(results.getMsgs()[i]);\n+                }\n+            }\n+        } else {\n+            MessageFuture messageFuture = null;\n+            if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMzQ3OTkw", "url": "https://github.com/seata/seata/pull/2477#pullrequestreview-413347990", "createdAt": "2020-05-18T07:50:22Z", "commit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzo1MDoyMlrOGWrSIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzo1MDoyMlrOGWrSIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzMTAxMQ==", "bodyText": "why some registerProcessor have 'super.' and some have not.", "url": "https://github.com/seata/seata/pull/2477#discussion_r426431011", "createdAt": "2020-05-18T07:50:22Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/rpc/netty/RmRpcClient.java", "diffHunk": "@@ -247,4 +256,27 @@ public String getMergedResourceKeys() {\n         }\n         return null;\n     }\n+\n+    private void registerProcessor() {\n+        // 1.registry rm client handle branch commit processor\n+        RmBranchCommitProcessor rmBranchCommitProcessor = new RmBranchCommitProcessor(getTransactionMessageHandler(), this);\n+        registerProcessor(MessageType.TYPE_BRANCH_COMMIT, rmBranchCommitProcessor, messageExecutor);\n+        // 2.registry rm client handle branch commit processor\n+        RmBranchRollbackProcessor rmBranchRollbackProcessor = new RmBranchRollbackProcessor(getTransactionMessageHandler(), this);\n+        registerProcessor(MessageType.TYPE_BRANCH_ROLLBACK, rmBranchRollbackProcessor, messageExecutor);\n+        // 3.registry rm handler undo log processor\n+        RmUndoLogProcessor rmUndoLogProcessor = new RmUndoLogProcessor(getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_RM_DELETE_UNDOLOG, rmUndoLogProcessor, messageExecutor);\n+        // 4.registry TC response processor\n+        ClientOnResponseProcessor onResponseProcessor =\n+            new ClientOnResponseProcessor(mergeMsgMap, super.getFutures(), getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_SEATA_MERGE_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_BRANCH_REGISTER_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_BRANCH_STATUS_REPORT_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_GLOBAL_LOCK_QUERY_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_REG_RM_RESULT, onResponseProcessor, null);\n+        // 5.registry heartbeat message processor\n+        ClientHeartbeatProcessor clientHeartbeatProcessor = new ClientHeartbeatProcessor();\n+        super.registerProcessor(MessageType.TYPE_HEARTBEAT_MSG, clientHeartbeatProcessor, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 165}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e4defa1237e44a70602477fa89a09ffe6f3e7ab", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/5e4defa1237e44a70602477fa89a09ffe6f3e7ab", "committedDate": "2020-05-18T07:54:33Z", "message": "super"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae52cfd6a978822a0a52eab120675c63c21e1350", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/ae52cfd6a978822a0a52eab120675c63c21e1350", "committedDate": "2020-05-18T08:21:17Z", "message": "remove useless if logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzNDE3NjEw", "url": "https://github.com/seata/seata/pull/2477#pullrequestreview-413417610", "createdAt": "2020-05-18T09:21:56Z", "commit": {"oid": "ae52cfd6a978822a0a52eab120675c63c21e1350"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0250949a2a00d79ab193c9539eb11a21a6d8762a", "author": {"user": {"login": "objcoding", "name": "zhangchenghui"}}, "url": "https://github.com/seata/seata/commit/0250949a2a00d79ab193c9539eb11a21a6d8762a", "committedDate": "2020-05-18T11:36:01Z", "message": "fix pair"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3850, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}