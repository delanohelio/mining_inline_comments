{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1ODUxMTE2", "number": 2676, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDowMDoyOVrOD9ugRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTo0ODo0OFrOEdJU1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MDUxNjU0OnYy", "diffSide": "RIGHT", "path": "discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/LeastActiveLoadBalance.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDowMDoyOVrOGXZCqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMDowMDoyOVrOGXZCqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzE4MDcxNQ==", "bodyText": "Least Active", "url": "https://github.com/seata/seata/pull/2676#discussion_r427180715", "createdAt": "2020-05-19T10:00:29Z", "author": {"login": "xingfudeshi"}, "path": "discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/LeastActiveLoadBalance.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.discovery.loadbalance;\n+\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.common.rpc.RpcStatus;\n+\n+/**\n+ * The type Random load balance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbda0facdc91f5aef0cad5779e6d026c7aef64b6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk4NjIyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/rpc/RpcStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzoyOToyMlrOGZnM-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxMzowMTo0NlrOGaAaUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTg4Mw==", "bodyText": "Never used except the test case, is the active always equals 1 for each address ?", "url": "https://github.com/seata/seata/pull/2676#discussion_r429509883", "createdAt": "2020-05-23T03:29:22Z", "author": {"login": "l81893521"}, "path": "common/src/main/java/io/seata/common/rpc/RpcStatus.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.rpc;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.LongAdder;\n+\n+/**\n+ * The state statistics.\n+ *\n+ * @author ph3636\n+ */\n+public class RpcStatus {\n+\n+    private static final ConcurrentMap<String, RpcStatus> SERVICE_STATUS_MAP = new ConcurrentHashMap<>();\n+    private final AtomicInteger active = new AtomicInteger();\n+    private final LongAdder total = new LongAdder();\n+\n+    private RpcStatus() {\n+    }\n+\n+    /**\n+     * get the RpcStatus of this service\n+     *\n+     * @param service the service\n+     * @return RpcStatus\n+     */\n+    public static RpcStatus getStatus(String service) {\n+        return SERVICE_STATUS_MAP.computeIfAbsent(service, key -> new RpcStatus());\n+    }\n+\n+    /**\n+     * remove the RpcStatus of this service\n+     *\n+     * @param service the service\n+     */\n+    public static void removeStatus(String service) {\n+        SERVICE_STATUS_MAP.remove(service);\n+    }\n+\n+    /**\n+     * begin count\n+     *\n+     * @param service the service\n+     */\n+    public static void beginCount(String service) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20c46d3b7fa6b50dd6fd358bcd72a3b12894b7d6"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTkyMjg5Ng==", "bodyText": "This PR is incomplete. Please refer to the details", "url": "https://github.com/seata/seata/pull/2676#discussion_r429922896", "createdAt": "2020-05-25T13:01:46Z", "author": {"login": "ph3636"}, "path": "common/src/main/java/io/seata/common/rpc/RpcStatus.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.common.rpc;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.LongAdder;\n+\n+/**\n+ * The state statistics.\n+ *\n+ * @author ph3636\n+ */\n+public class RpcStatus {\n+\n+    private static final ConcurrentMap<String, RpcStatus> SERVICE_STATUS_MAP = new ConcurrentHashMap<>();\n+    private final AtomicInteger active = new AtomicInteger();\n+    private final LongAdder total = new LongAdder();\n+\n+    private RpcStatus() {\n+    }\n+\n+    /**\n+     * get the RpcStatus of this service\n+     *\n+     * @param service the service\n+     * @return RpcStatus\n+     */\n+    public static RpcStatus getStatus(String service) {\n+        return SERVICE_STATUS_MAP.computeIfAbsent(service, key -> new RpcStatus());\n+    }\n+\n+    /**\n+     * remove the RpcStatus of this service\n+     *\n+     * @param service the service\n+     */\n+    public static void removeStatus(String service) {\n+        SERVICE_STATUS_MAP.remove(service);\n+    }\n+\n+    /**\n+     * begin count\n+     *\n+     * @param service the service\n+     */\n+    public static void beginCount(String service) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUwOTg4Mw=="}, "originalCommit": {"oid": "20c46d3b7fa6b50dd6fd358bcd72a3b12894b7d6"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NDk4OTE2OnYy", "diffSide": "RIGHT", "path": "discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/LeastActiveLoadBalance.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzozNDo0NlrOGZnOZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwMzozNDo0NlrOGZnOZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxMDI0NA==", "bodyText": "Please change the note.", "url": "https://github.com/seata/seata/pull/2676#discussion_r429510244", "createdAt": "2020-05-23T03:34:46Z", "author": {"login": "l81893521"}, "path": "discovery/seata-discovery-core/src/main/java/io/seata/discovery/loadbalance/LeastActiveLoadBalance.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.discovery.loadbalance;\n+\n+import java.util.List;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.common.rpc.RpcStatus;\n+\n+/**\n+ * The type Random load balance.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20c46d3b7fa6b50dd6fd358bcd72a3b12894b7d6"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4OTk2OTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemoting.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwOTo0ODo0OFrOHIIzZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwODowNjoxNFrOHIuyHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5NDg4Ng==", "bodyText": "Where is the corresponding doAfterRpcHooks  ?", "url": "https://github.com/seata/seata/pull/2676#discussion_r478294886", "createdAt": "2020-08-27T09:48:48Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemoting.java", "diffHunk": "@@ -209,6 +219,9 @@ protected void sendAsync(Channel channel, RpcMessage rpcMessage) {\n             LOGGER.debug(\"write message:\" + rpcMessage.getBody() + \", channel:\" + channel + \",active?\"\n                 + channel.isActive() + \",writable?\" + channel.isWritable() + \",isopen?\" + channel.isOpen());\n         }\n+\n+        doBeforeRpcHooks(ChannelUtil.getAddressFromChannel(channel), rpcMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "625e53d906a14935989f0f3c64bc6a508a0ee2ec"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODkxNzE0OA==", "bodyText": "There is no way to locate the result of the asynchronous message, so it is not added. Of course, only the send is added. It is the same for each address and does not affect the result.", "url": "https://github.com/seata/seata/pull/2676#discussion_r478917148", "createdAt": "2020-08-28T08:06:14Z", "author": {"login": "ph3636"}, "path": "core/src/main/java/io/seata/core/rpc/netty/AbstractNettyRemoting.java", "diffHunk": "@@ -209,6 +219,9 @@ protected void sendAsync(Channel channel, RpcMessage rpcMessage) {\n             LOGGER.debug(\"write message:\" + rpcMessage.getBody() + \", channel:\" + channel + \",active?\"\n                 + channel.isActive() + \",writable?\" + channel.isWritable() + \",isopen?\" + channel.isOpen());\n         }\n+\n+        doBeforeRpcHooks(ChannelUtil.getAddressFromChannel(channel), rpcMessage);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODI5NDg4Ng=="}, "originalCommit": {"oid": "625e53d906a14935989f0f3c64bc6a508a0ee2ec"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1589, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}