{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NjYyODY2", "number": 2398, "title": "feature: support multi pk for mysql", "bodyText": "\u2160. Describe what this PR did\npr content: To support multiple primary key.\nIt's a lot of work to support multiple primary keys for seata. Because this related to the base structure of seata.\nI spend one month to do it. But It just works fine in mysql so far.\nBecause I don't have the time to compatible the seata with postgresql or oracle. And I\u2018m not good at PostgreSQL and oracle. I tried to compatible the seata with PostgreSQL and oracle, But I met some problems.\nSo I gave up.\nIt would be wonderful if someone can continue my work.\nThere are several bugs that I found when I implement this future. This fix is breaking changes.\n1, Rollback will not work if update SQL changed the pk value. So I forbid the execution of this SQL.\n2, We can't obtain the auto-increment value if the program run batch inserts SQL in the form of the statement. So I also forbid the execution of this SQL.\n\u2161. Does this pull request fix one issue?\n\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews", "createdAt": "2020-03-13T08:56:49Z", "url": "https://github.com/seata/seata/pull/2398", "merged": true, "mergeCommit": {"oid": "ba8a9b606a5f0cfdea287d05b7b25654f257a73c"}, "closed": true, "closedAt": "2020-07-03T02:51:26Z", "author": {"login": "0000005"}, "timelineItems": {"totalCount": 72, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFDQO8gH2gAyMzg3NjYyODY2Ojk2ZmIxMDBhYTZhYzE0ZTc4OWY4YTI5MzQ0ZjU1NDY0ODBmMDk0Mzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxKlIpgFqTQ0MjEyMDk0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "96fb100aa6ac14e789f8a29344f5546480f09439", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/96fb100aa6ac14e789f8a29344f5546480f09439", "committedDate": "2020-02-17T01:43:09Z", "message": "\u65b0\u589e\u5168\u5c40\u56de\u8c03"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ade5100bc7b4d951ccf18504af74e6235ecc3d41", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/ade5100bc7b4d951ccf18504af74e6235ecc3d41", "committedDate": "2020-02-18T01:30:03Z", "message": "\u65b0\u589e\u5168\u5c40\u56de\u8c03"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d5f1456dee19e82811cca645c91e5103c367d86", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/6d5f1456dee19e82811cca645c91e5103c367d86", "committedDate": "2020-02-28T10:03:32Z", "message": "multi-pk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08ed030798e44046de737ef35ff63bdcd1dd1b26", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/08ed030798e44046de737ef35ff63bdcd1dd1b26", "committedDate": "2020-03-05T09:47:35Z", "message": "stage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca8db9c038ae930b8136f751af0dad411fa5f846", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/ca8db9c038ae930b8136f751af0dad411fa5f846", "committedDate": "2020-03-10T08:54:46Z", "message": "stage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eb03a77e6ac329e004ba96e2c7dc86565a0b5f2", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/7eb03a77e6ac329e004ba96e2c7dc86565a0b5f2", "committedDate": "2020-03-10T10:32:47Z", "message": "\u5904\u7406sql\u5173\u952e\u5b57\u7684\u95ee\u9898"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d36978f25cf83f480a05af328452b10b75e21bf", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/5d36978f25cf83f480a05af328452b10b75e21bf", "committedDate": "2020-03-12T00:42:47Z", "message": "Merge remote-tracking branch 'origin/1.1.0' into mulp-pk_based_on_1.0.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "420f5b2751ee6df6748dd6844b2b913f78be0181", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/420f5b2751ee6df6748dd6844b2b913f78be0181", "committedDate": "2020-03-12T00:43:19Z", "message": "Merge remote-tracking branch 'origin/1.1.0' into mulp-pk_based_on_1.0.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29687f4a3fbabedf6582cadaf81d7a8f31e2a58d", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/29687f4a3fbabedf6582cadaf81d7a8f31e2a58d", "committedDate": "2020-03-13T08:26:15Z", "message": "change oracle and postgresql"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2efeb4ec02ce5756fb0cf8c50177e92034caeb7a", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/2efeb4ec02ce5756fb0cf8c50177e92034caeb7a", "committedDate": "2020-03-13T08:32:26Z", "message": "Merge remote-tracking branch 'origin/develop' into multi-pk_based_on_1.1.0\n\n# Conflicts:\n#\tpom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dadb0882dbcc1e2570783264aadcf967b848c9a", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/7dadb0882dbcc1e2570783264aadcf967b848c9a", "committedDate": "2020-03-14T09:31:43Z", "message": "fix wrong code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "651fcce8e109b36af41b320794ce1ecc9883992e", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/651fcce8e109b36af41b320794ce1ecc9883992e", "committedDate": "2020-03-16T06:03:29Z", "message": "fix text cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f56dbc723f206159f7b1e9ae88cc33a61cbdab8", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/1f56dbc723f206159f7b1e9ae88cc33a61cbdab8", "committedDate": "2020-04-28T07:52:40Z", "message": "Merge remote-tracking branch 'origin/develop' into multi-pk_based_on_1.3.0\n\n# Conflicts:\n#\trm-datasource/src/main/java/io/seata/rm/datasource/AbstractConnectionProxy.java\n#\trm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java\n#\trm-datasource/src/test/java/io/seata/rm/datasource/exec/InsertExecutorTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb3a261120e08877d96790f150a2d8cb54b28df7", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/eb3a261120e08877d96790f150a2d8cb54b28df7", "committedDate": "2020-05-06T03:53:00Z", "message": "catch up 1.3.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3f30a824d7914b30e1a22e1285a69ec21aa3b0a", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/b3f30a824d7914b30e1a22e1285a69ec21aa3b0a", "committedDate": "2020-05-06T06:08:29Z", "message": "Merge remote-tracking branch 'origin/develop' into multi-pk_based_on_1.1.0\n\n# Conflicts:\n#\trm-datasource/src/main/java/io/seata/rm/datasource/exec/MultiUpdateExecutor.java\n#\trm-datasource/src/main/java/io/seata/rm/datasource/exec/UpdateExecutor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ea8f142f432db41bafd12423e0a07625801dfbf", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/0ea8f142f432db41bafd12423e0a07625801dfbf", "committedDate": "2020-05-06T06:56:05Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61b65c7f0cc78da041c89fc5db4dc5a9fd49ad12", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/61b65c7f0cc78da041c89fc5db4dc5a9fd49ad12", "committedDate": "2020-05-06T07:08:39Z", "message": "revert file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c2c83f41526ff7c53c3d81840d681d4389626be", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/3c2c83f41526ff7c53c3d81840d681d4389626be", "committedDate": "2020-05-06T07:42:49Z", "message": "fix code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333d7ef0358d25a1e7b007684416e9f2b03fd0d1", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/333d7ef0358d25a1e7b007684416e9f2b03fd0d1", "committedDate": "2020-05-09T02:24:33Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba7c237a4ee1ca63b83db10847868d8248fed34", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/6ba7c237a4ee1ca63b83db10847868d8248fed34", "committedDate": "2020-05-09T04:22:59Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b1851741983ffc133eef7d70f039244a86bdba8", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/8b1851741983ffc133eef7d70f039244a86bdba8", "committedDate": "2020-06-01T01:31:57Z", "message": "Merge remote-tracking branch 'origin/develop' into multi-pk_based_on_1.1.0\n\n# Conflicts:\n#\trm-datasource/src/main/java/io/seata/rm/datasource/exec/InsertExecutor.java\n#\trm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java\n#\trm-datasource/src/test/java/io/seata/rm/datasource/exec/BatchInsertExecutorTest.java\n#\trm-datasource/src/test/java/io/seata/rm/datasource/exec/OracleInsertExecutorTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fbbe87a2fd38ea0bbb347704845a2651cb1429d", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/7fbbe87a2fd38ea0bbb347704845a2651cb1429d", "committedDate": "2020-06-02T03:17:40Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "384cbd9d29c60802857b0617d9b6c56c50c85ad7", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/384cbd9d29c60802857b0617d9b6c56c50c85ad7", "committedDate": "2020-06-02T03:18:01Z", "message": "Merge remote-tracking branch 'myGithub/multi-pk_based_on_1.1.0' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d89153096a6859d9dfe36b7480333b675c7251b3", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/d89153096a6859d9dfe36b7480333b675c7251b3", "committedDate": "2020-06-02T03:51:43Z", "message": "fix code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "154ca49773b149f87777c3a3858ba77d963e4b71", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/154ca49773b149f87777c3a3858ba77d963e4b71", "committedDate": "2020-06-03T05:54:48Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDQyOTcy", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-424042972", "createdAt": "2020-06-04T01:34:40Z", "commit": {"oid": "154ca49773b149f87777c3a3858ba77d963e4b71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTozNDo0MFrOGey15w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTozNDo0MFrOGey15w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0MzQ2Mw==", "bodyText": "How about remove the GlobalTransactionHookManager, and make it to other pr?", "url": "https://github.com/seata/seata/pull/2398#discussion_r434943463", "createdAt": "2020-06-04T01:34:40Z", "author": {"login": "l81893521"}, "path": "rm/src/main/java/io/seata/rm/AbstractRMHandler.java", "diffHunk": "@@ -105,6 +105,13 @@ protected void doBranchCommit(BranchCommitRequest request, BranchCommitResponse\n             LOGGER.info(\"Branch commit result: \" + status);\n         }\n \n+        for (GlobalTransactionHook hook : GlobalTransactionHookManager.popHooks(xid)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca49773b149f87777c3a3858ba77d963e4b71"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MDQ0NTQ4", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-424044548", "createdAt": "2020-06-04T01:39:37Z", "commit": {"oid": "154ca49773b149f87777c3a3858ba77d963e4b71"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTozOTozOFrOGey7GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwMTozOTozOFrOGey7GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk0NDc5Mw==", "bodyText": "I think here keep it origin would be better.", "url": "https://github.com/seata/seata/pull/2398#discussion_r434944793", "createdAt": "2020-06-04T01:39:38Z", "author": {"login": "l81893521"}, "path": "rm/src/main/java/io/seata/rm/DefaultResourceManager.java", "diffHunk": "@@ -121,7 +121,7 @@ public void unregisterResource(Resource resource) {\n \n     @Override\n     public Map<String, Resource> getManagedResources() {\n-        Map<String, Resource> allResource = new HashMap<>();\n+        Map<String, Resource> allResource = new HashMap<>(10);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154ca49773b149f87777c3a3858ba77d963e4b71"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a98d41411deefc0a9a1acc52e8313edb556e25d3", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/a98d41411deefc0a9a1acc52e8313edb556e25d3", "committedDate": "2020-06-04T03:56:10Z", "message": "add not support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a99b4aaa5610888ea6dd963f5bb110ded58de2e", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/7a99b4aaa5610888ea6dd963f5bb110ded58de2e", "committedDate": "2020-06-04T07:03:01Z", "message": "Merge remote-tracking branch 'origin/develop' into multi-pk_based_on_1.1.0\n\n# Conflicts:\n#\trm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseInsertExecutor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b53d53c38da8f919d002f6a7c348e6ed70b9297", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/5b53d53c38da8f919d002f6a7c348e6ed70b9297", "committedDate": "2020-06-09T09:01:19Z", "message": "fix bugs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94b2d3b2efeec7c4e1e6f7463de5adadcc4ca04a", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/94b2d3b2efeec7c4e1e6f7463de5adadcc4ca04a", "committedDate": "2020-06-09T09:02:02Z", "message": "Merge remote-tracking branch 'myGithub/multi-pk_based_on_1.1.0' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74eb5f5cb2f0f5ea917734c62e25c0832ebf4616", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/74eb5f5cb2f0f5ea917734c62e25c0832ebf4616", "committedDate": "2020-06-09T09:05:59Z", "message": "remove GlobalTransactionHook"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "610bdee2e388a2b6f77ad3e34a3d1b5f0f83e5e3", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/610bdee2e388a2b6f77ad3e34a3d1b5f0f83e5e3", "committedDate": "2020-06-09T09:13:12Z", "message": "Merge remote-tracking branch 'origin/develop' into multi-pk_based_on_1.1.0\n\n# Conflicts:\n#\trm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseInsertExecutor.java\n#\trm-datasource/src/test/java/io/seata/rm/datasource/exec/MySQLInsertExecutorTest.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ae3d8fd7e8b1e4a85b2287f4f7d618450d4af20", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/6ae3d8fd7e8b1e4a85b2287f4f7d618450d4af20", "committedDate": "2020-06-09T09:37:52Z", "message": "fix test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58", "committedDate": "2020-06-09T09:40:15Z", "message": "code optimize"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDIyOTA4", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-429422908", "createdAt": "2020-06-12T02:31:01Z", "commit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozMTowMVrOGi1Fpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozMTowMVrOGi1Fpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NDU2Ng==", "bodyText": "Why getPrimaryKeyOnlyName() here will be orderd?", "url": "https://github.com/seata/seata/pull/2398#discussion_r439174566", "createdAt": "2020-06-12T02:31:01Z", "author": {"login": "l81893521"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java", "diffHunk": "@@ -306,27 +316,106 @@ protected TableRecords queryCurrentRecords(Connection conn) throws SQLException\n         return currentRecords;\n     }\n \n+    protected List<Field> getOrderedPkList(TableRecords image,Row row,String dbType) {\n+        List<Field> pkFields = new ArrayList<>();\n+        // To ensure the order of the pk, the order should based on getPrimaryKeyOnlyName.\n+        List<String> pkColumnNameListByOrder = image.getTableMeta().getPrimaryKeyOnlyName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDI0MDQ2", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-429424046", "createdAt": "2020-06-12T02:35:13Z", "commit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozNToxNFrOGi1JSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwMjozNToxNFrOGi1JSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTE3NTQ5OA==", "bodyText": "How about remove this? And create a new pr to support H2 keyword checker?", "url": "https://github.com/seata/seata/pull/2398#discussion_r439175498", "createdAt": "2020-06-12T02:35:14Z", "author": {"login": "l81893521"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/KeywordCheckerFactory.java", "diffHunk": "@@ -36,6 +37,10 @@\n      * @return keyword checker\n      */\n     public static KeywordChecker getKeywordChecker(String dbType) {\n+        if (JdbcConstants.H2.equalsIgnoreCase(dbType)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NDM5MzI5", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-429439329", "createdAt": "2020-06-12T03:33:15Z", "commit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjI0NDEy", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-429624412", "createdAt": "2020-06-12T10:13:54Z", "commit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxMzo1NFrOGi-spg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoxMzo1NFrOGi-spg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzMjAwNg==", "bodyText": "How about change to\ntmeta.getPrimaryKeyMap().containsKey(colName)", "url": "https://github.com/seata/seata/pull/2398#discussion_r439332006", "createdAt": "2020-06-12T10:13:54Z", "author": {"login": "l81893521"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableRecords.java", "diffHunk": "@@ -190,7 +193,7 @@ public static TableRecords buildRecords(TableMeta tmeta, ResultSet resultSet) th\n                 int dataType = col.getDataType();\n                 Field field = new Field();\n                 field.setName(col.getColumnName());\n-                if (tmeta.getPkName().equalsIgnoreCase(field.getName())) {\n+                if (tmeta.getPrimaryKeyOnlyName().stream().anyMatch(e -> field.getName().equalsIgnoreCase(e))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjMxMzUw", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-429631350", "createdAt": "2020-06-12T10:25:56Z", "commit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyNTo1NlrOGi_AxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMDoyNTo1NlrOGi_AxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTMzNzE1Nw==", "bodyText": "How about change to\nfinal Map<String, ColumnMeta> primaryKeyMap = getTableMeta().getPrimaryKeyMap();\n...\nif (primaryKeyMap.containsKey(field.getName())) {", "url": "https://github.com/seata/seata/pull/2398#discussion_r439337157", "createdAt": "2020-06-12T10:25:56Z", "author": {"login": "l81893521"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/sql/struct/TableRecords.java", "diffHunk": "@@ -133,19 +135,20 @@ public void add(Row row) {\n     /**\n      * Pk rows list.\n      *\n-     * @return the list\n+     * @return return a list. each element of list is a map,the map hold the pk column name as a key and field as the value\n      */\n-    public List<Field> pkRows() {\n-        final String pkName = getTableMeta().getPkName();\n-        List<Field> pkRows = new ArrayList<>();\n+    public List<Map<String,Field>> pkRows() {\n+        final List<String> pkNameList = getTableMeta().getPrimaryKeyOnlyName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34d7f9bd6e8c25dbb662bf56f1265c7063b6ac58"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af3cfb043af10b5c82758abbfaedec910794744d", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/af3cfb043af10b5c82758abbfaedec910794744d", "committedDate": "2020-06-19T07:20:01Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3870bb6f0670c28b25f36a87e9802bef3f7b2321", "author": {"user": {"login": "l81893521", "name": "will"}}, "url": "https://github.com/seata/seata/commit/3870bb6f0670c28b25f36a87e9802bef3f7b2321", "committedDate": "2020-06-23T02:17:02Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "746f6dcf83991422cf5769b4ca873b6b45875832", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/746f6dcf83991422cf5769b4ca873b6b45875832", "committedDate": "2020-06-23T07:42:27Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0151f38efaf13359ae97aab147152193fcc646e", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/c0151f38efaf13359ae97aab147152193fcc646e", "committedDate": "2020-06-24T07:52:44Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15685c6f0fd62277cf98106be371b5edefd4f2a7", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/15685c6f0fd62277cf98106be371b5edefd4f2a7", "committedDate": "2020-06-28T13:59:43Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4Nzk0MjEx", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-438794211", "createdAt": "2020-06-28T16:24:47Z", "commit": {"oid": "15685c6f0fd62277cf98106be371b5edefd4f2a7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNjoyNDo0N1rOGp-leg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNzoyOToyNFrOGp--Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3MDIwMg==", "bodyText": "sqlUndoLog.getTableName() always has escape.", "url": "https://github.com/seata/seata/pull/2398#discussion_r446670202", "createdAt": "2020-06-28T16:24:47Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java", "diffHunk": "@@ -273,30 +280,33 @@ protected boolean dataValidationAndGoOn(Connection conn) throws SQLException {\n     protected TableRecords queryCurrentRecords(Connection conn) throws SQLException {\n         TableRecords undoRecords = getUndoRows();\n         TableMeta tableMeta = undoRecords.getTableMeta();\n-        String pkName = tableMeta.getPkName();\n-        int pkType = tableMeta.getColumnMeta(pkName).getDataType();\n+        //the order of element matters\n+        List<String> pkNameList = tableMeta.getPrimaryKeyOnlyName();\n \n         // pares pk values\n-        Object[] pkValues = parsePkValues(getUndoRows());\n-        if (pkValues.length == 0) {\n+        Map<String,List<Field>> pkRowValues = parsePkValues(getUndoRows());\n+        if (pkRowValues.size() == 0) {\n             return TableRecords.empty(tableMeta);\n         }\n-        StringBuilder replace = new StringBuilder();\n-        for (int i = 0; i < pkValues.length; i++) {\n-            replace.append(\"?,\");\n-        }\n         // build check sql\n         String dbType = getDbType(conn);\n-        String checkSQL = String.format(CHECK_SQL_TEMPLATE, sqlUndoLog.getTableName(),\n-            tableMeta.getEscapePkName(dbType), replace.substring(0, replace.length() - 1));\n+        String checkSQL = String.format(CHECK_SQL_TEMPLATE, ColumnUtils.addEscape(sqlUndoLog.getTableName(), dbType),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15685c6f0fd62277cf98106be371b5edefd4f2a7"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3MzQ5NQ==", "bodyText": "When comparing should ignore case", "url": "https://github.com/seata/seata/pull/2398#discussion_r446673495", "createdAt": "2020-06-28T16:59:40Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java", "diffHunk": "@@ -306,27 +316,106 @@ protected TableRecords queryCurrentRecords(Connection conn) throws SQLException\n         return currentRecords;\n     }\n \n+    protected List<Field> getOrderedPkList(TableRecords image,Row row,String dbType) {\n+        List<Field> pkFields = new ArrayList<>();\n+        // To ensure the order of the pk, the order should based on getPrimaryKeyOnlyName.\n+        List<String> pkColumnNameListByOrder = image.getTableMeta().getPrimaryKeyOnlyName();\n+        List<String> pkColumnNameListNoOrder = row.primaryKeys()\n+                .stream()\n+                .map(e -> ColumnUtils.delEscape(e.getName(),dbType))\n+                .collect(Collectors.toList());\n+        pkColumnNameListByOrder.forEach(pkName -> {\n+            int pkIndex = pkColumnNameListNoOrder.indexOf(pkName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15685c6f0fd62277cf98106be371b5edefd4f2a7"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3NTkxMA==", "bodyText": "(a1 and b1) or ( a1 and b2 ) or (a2 and b2)  <=>  A in (a1,a2) and B in (b1,b2) ?", "url": "https://github.com/seata/seata/pull/2398#discussion_r446675910", "createdAt": "2020-06-28T17:23:49Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java", "diffHunk": "@@ -306,27 +316,106 @@ protected TableRecords queryCurrentRecords(Connection conn) throws SQLException\n         return currentRecords;\n     }\n \n+    protected List<Field> getOrderedPkList(TableRecords image,Row row,String dbType) {\n+        List<Field> pkFields = new ArrayList<>();\n+        // To ensure the order of the pk, the order should based on getPrimaryKeyOnlyName.\n+        List<String> pkColumnNameListByOrder = image.getTableMeta().getPrimaryKeyOnlyName();\n+        List<String> pkColumnNameListNoOrder = row.primaryKeys()\n+                .stream()\n+                .map(e -> ColumnUtils.delEscape(e.getName(),dbType))\n+                .collect(Collectors.toList());\n+        pkColumnNameListByOrder.forEach(pkName -> {\n+            int pkIndex = pkColumnNameListNoOrder.indexOf(pkName);\n+            if (pkIndex != -1) {\n+                // add PK to the last of the list.\n+                pkFields.add(row.primaryKeys().get(pkIndex));\n+            }\n+        });\n+        return pkFields;\n+    }\n+\n+    /**\n+     * each pk is a condition.the result will like :\" id =? and userCode =?\"\n+     * @param pkNameList\n+     * @return return where condition sql string.the sql can just search one related record.\n+     */\n+    protected String buildWhereConditionByPKs(List<String> pkNameList,KeywordChecker keywordChecker) {\n+        StringBuilder whereStr = new StringBuilder();\n+        //we must consider the situation of composite primary key\n+        for (int i = 0;i < pkNameList.size(); i++) {\n+            if (i > 0) {\n+                whereStr.append(\" and \");\n+            }\n+            String pkName = pkNameList.get(i);\n+            whereStr.append(keywordChecker.checkAndReplace(pkName));\n+            whereStr.append(\" = ? \");\n+        }\n+        return whereStr.toString();\n+\n+    }\n+    /**\n+     * each pk is a condition.the result will like :\" id in (?,?,?) and userCode in (?,?,?)\"\n+     * @param pkNameList\n+     * @param pkRowValues  the kye of map is pk name ,and value of map is pk's value\n+     * @return return where condition sql string.the sql can search all related records not just one.\n+     */\n+    protected String buildWhereConditionByPKs(List<String> pkNameList,Map<String,List<Field>> pkRowValues,Connection conn) throws SQLException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15685c6f0fd62277cf98106be371b5edefd4f2a7"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY3NjUxOA==", "bodyText": "ignoreCasesEqual?", "url": "https://github.com/seata/seata/pull/2398#discussion_r446676518", "createdAt": "2020-06-28T17:29:24Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/AbstractUndoExecutor.java", "diffHunk": "@@ -306,27 +316,106 @@ protected TableRecords queryCurrentRecords(Connection conn) throws SQLException\n         return currentRecords;\n     }\n \n+    protected List<Field> getOrderedPkList(TableRecords image,Row row,String dbType) {\n+        List<Field> pkFields = new ArrayList<>();\n+        // To ensure the order of the pk, the order should based on getPrimaryKeyOnlyName.\n+        List<String> pkColumnNameListByOrder = image.getTableMeta().getPrimaryKeyOnlyName();\n+        List<String> pkColumnNameListNoOrder = row.primaryKeys()\n+                .stream()\n+                .map(e -> ColumnUtils.delEscape(e.getName(),dbType))\n+                .collect(Collectors.toList());\n+        pkColumnNameListByOrder.forEach(pkName -> {\n+            int pkIndex = pkColumnNameListNoOrder.indexOf(pkName);\n+            if (pkIndex != -1) {\n+                // add PK to the last of the list.\n+                pkFields.add(row.primaryKeys().get(pkIndex));\n+            }\n+        });\n+        return pkFields;\n+    }\n+\n+    /**\n+     * each pk is a condition.the result will like :\" id =? and userCode =?\"\n+     * @param pkNameList\n+     * @return return where condition sql string.the sql can just search one related record.\n+     */\n+    protected String buildWhereConditionByPKs(List<String> pkNameList,KeywordChecker keywordChecker) {\n+        StringBuilder whereStr = new StringBuilder();\n+        //we must consider the situation of composite primary key\n+        for (int i = 0;i < pkNameList.size(); i++) {\n+            if (i > 0) {\n+                whereStr.append(\" and \");\n+            }\n+            String pkName = pkNameList.get(i);\n+            whereStr.append(keywordChecker.checkAndReplace(pkName));\n+            whereStr.append(\" = ? \");\n+        }\n+        return whereStr.toString();\n+\n+    }\n+    /**\n+     * each pk is a condition.the result will like :\" id in (?,?,?) and userCode in (?,?,?)\"\n+     * @param pkNameList\n+     * @param pkRowValues  the kye of map is pk name ,and value of map is pk's value\n+     * @return return where condition sql string.the sql can search all related records not just one.\n+     */\n+    protected String buildWhereConditionByPKs(List<String> pkNameList,Map<String,List<Field>> pkRowValues,Connection conn) throws SQLException {\n+        StringBuilder whereStr = new StringBuilder();\n+        //we must consider the situation of composite primary key\n+        for (int i = 0;i < pkNameList.size(); i++) {\n+            if (i > 0) {\n+                whereStr.append(\" and \");\n+            }\n+            String pkName = pkNameList.get(i);\n+            whereStr.append(ColumnUtils.addEscape(pkName,getDbType(conn)));\n+            whereStr.append(\" in ( \");\n+            List<Field> valueList = pkRowValues.get(pkName);\n+            StringBuffer pkValueStr = new StringBuffer();\n+            for (int r = 0;r < valueList.size(); r++) {\n+                if (r > 0) {\n+                    pkValueStr.append(\",\");\n+                }\n+                pkValueStr.append(\"?\");\n+            }\n+            whereStr.append(pkValueStr);\n+            whereStr.append(\" )\");\n+        }\n+\n+        return whereStr.toString();\n+\n+    }\n+\n     /**\n-     * Parse pk values object [ ].\n+     * Parse pk values Field List.\n      *\n      * @param records the records\n-     * @return the object [ ]\n+     * @return List<List<Field>>   each element represents a row. And inside a row list contains pk columns(Field).\n+     */\n+    protected Map<String,List<Field>> parsePkValues(TableRecords records) {\n+        return parsePkValues(records.getRows(),records.getTableMeta().getPrimaryKeyOnlyName());\n+    }\n+\n+    /**\n+     * Parse pk values Field List.\n+     *\n+     * @param rows  pk rows\n+     * @param pkNameList  pk column name\n+     * @return List<List<Field>>   each element represents a row. And inside a row list contains pk columns(Field).\n      */\n-    protected Object[] parsePkValues(TableRecords records) {\n-        String pkName = records.getTableMeta().getPkName();\n-        List<Row> undoRows = records.getRows();\n-        Object[] pkValues = new Object[undoRows.size()];\n-        for (int i = 0; i < undoRows.size(); i++) {\n-            List<Field> fields = undoRows.get(i).getFields();\n+    protected Map<String,List<Field>> parsePkValues(List<Row> rows, List<String> pkNameList) {\n+        List<Field> pkFieldList = new ArrayList<>();\n+        for (int i = 0; i < rows.size(); i++) {\n+            List<Field> fields = rows.get(i).getFields();\n             if (fields != null) {\n                 for (Field field : fields) {\n-                    if (StringUtils.equalsIgnoreCase(pkName, field.getName())) {\n-                        pkValues[i] = field.getValue();\n+                    if (pkNameList.stream().anyMatch(e -> field.getName().equals(e))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15685c6f0fd62277cf98106be371b5edefd4f2a7"}, "originalPosition": 235}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4OTE3ODM4", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-438917838", "createdAt": "2020-06-29T06:31:38Z", "commit": {"oid": "15685c6f0fd62277cf98106be371b5edefd4f2a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjozMTozOVrOGqGfxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwNjozMTozOVrOGqGfxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njc5OTgxNA==", "bodyText": "break\uff0c mysql can only have one auto-inc col", "url": "https://github.com/seata/seata/pull/2398#discussion_r446799814", "createdAt": "2020-06-29T06:31:39Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/mysql/MySQLInsertExecutor.java", "diffHunk": "@@ -63,19 +68,55 @@ public MySQLInsertExecutor(StatementProxy statementProxy, StatementCallback stat\n     }\n \n     @Override\n-    public List<Object> getPkValues() throws SQLException {\n-        return containsPK() ? getPkValuesByColumn() :\n-                (containsColumns() ? getPkValuesByAuto() : getPkValuesByColumn());\n+    public Map<String,List<Object>> getPkValues() throws SQLException {\n+        Map<String,List<Object>> pkValuesMap = null;\n+        List<String> pkColumnNameList = getTableMeta().getPrimaryKeyOnlyName();\n+        Boolean isContainsPk = containsPK();\n+        //when there is only one pk in the table\n+        if (getTableMeta().getPrimaryKeyOnlyName().size() == 1) {\n+            if (isContainsPk) {\n+                pkValuesMap = getPkValuesByColumn();\n+            }\n+            else if (containsColumns()) {\n+                pkValuesMap = getPkValuesByAuto();\n+            }\n+            else {\n+                pkValuesMap = getPkValuesByColumn();\n+            }\n+        } else {\n+            //when there is multiple pk in the table\n+            //1,all pk columns are filled value.\n+            //2,the auto increment pk column value is null, and other pk value are not null.\n+            pkValuesMap = getPkValuesByColumn();\n+            for (String columnName:pkColumnNameList) {\n+                if (!pkValuesMap.containsKey(columnName)) {\n+                    ColumnMeta pkColumnMeta = getTableMeta().getColumnMeta(columnName);\n+                    if (Objects.nonNull(pkColumnMeta) && pkColumnMeta.isAutoincrement()) {\n+                        //3,the auto increment pk column is not exits in sql, and other pk are exits also the value is not null.\n+                        pkValuesMap.putAll(getPkValuesByAuto());\n+                    }\n+                }\n+            }\n+        }\n+        return pkValuesMap;\n     }\n \n     /**\n      * the modify for test\n      */\n-    public List<Object> getPkValuesByAuto() throws SQLException {\n+    public Map<String, List<Object>> getPkValuesByAuto() throws SQLException {\n         // PK is just auto generated\n+        Map<String, List<Object>> pkValuesMap = new HashMap<>(8);\n         Map<String, ColumnMeta> pkMetaMap = getTableMeta().getPrimaryKeyMap();\n-        ColumnMeta pkMeta = pkMetaMap.values().iterator().next();\n-        if (!pkMeta.isAutoincrement()) {\n+        String autoColumnName = \"\";\n+        for (String pkColumnName : pkMetaMap.keySet()) {\n+            if (pkMetaMap.get(pkColumnName).isAutoincrement())\n+            {\n+                autoColumnName = pkColumnName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15685c6f0fd62277cf98106be371b5edefd4f2a7"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8b106c334c830be6a9dc77fa86bbb3db5b29cd4", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/a8b106c334c830be6a9dc77fa86bbb3db5b29cd4", "committedDate": "2020-06-30T01:31:44Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893", "committedDate": "2020-06-30T10:18:46Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTEzODgx", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-439913881", "createdAt": "2020-06-30T11:15:18Z", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNToxOVrOGq3m2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNToxOVrOGq3m2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwNDQ0Mw==", "bodyText": "sqlUndoLog.getTableName() always has escape.", "url": "https://github.com/seata/seata/pull/2398#discussion_r447604443", "createdAt": "2020-06-30T11:15:19Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoInsertExecutor.java", "diffHunk": "@@ -54,18 +56,26 @@ protected String buildUndoSQL() {\n         if (CollectionUtils.isEmpty(afterImageRows)) {\n             throw new ShouldNeverHappenException(\"Invalid UNDO LOG\");\n         }\n-        Row row = afterImageRows.get(0);\n-        Field pkField = row.primaryKeys().get(0);\n-        // insert sql undo log after image all field come from table meta, need add escape.\n-        // see BaseTransactionalExecutor#buildTableRecords\n-        return String.format(DELETE_SQL_TEMPLATE, sqlUndoLog.getTableName(),\n-                             ColumnUtils.addEscape(pkField.getName(), JdbcConstants.MYSQL));\n+        return generateDeleteSql(afterImageRows,afterImage);\n     }\n \n     @Override\n-    protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValues, Field pkValue)\n-        throws SQLException {\n-        undoPST.setObject(1, pkValue.getValue(), pkValue.getType());\n+    protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValues, List<Field> pkValueList)\n+            throws SQLException {\n+        int undoIndex = 0;\n+        for (Field pkField:pkValueList) {\n+            undoIndex++;\n+            undoPST.setObject(undoIndex, pkField.getValue(), pkField.getType());\n+        }\n+    }\n+\n+    private String generateDeleteSql(List<Row> rows,TableRecords afterImage) {\n+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);\n+        List<String> pkNameList = getOrderedPkList(afterImage,rows.get(0),JdbcConstants.MYSQL)\n+                .stream().map(e -> e.getName())\n+                .collect(Collectors.toList());\n+        String whereSql = buildWhereConditionByPKs(pkNameList,keywordChecker);\n+        return String.format(DELETE_SQL_TEMPLATE,keywordChecker.checkAndReplace(sqlUndoLog.getTableName()), whereSql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTE0MDg5", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-439914089", "createdAt": "2020-06-30T11:15:38Z", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNTozOVrOGq3nig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNTozOVrOGq3nig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwNDYxOA==", "bodyText": "sqlUndoLog.getTableName() always has escape.", "url": "https://github.com/seata/seata/pull/2398#discussion_r447604618", "createdAt": "2020-06-30T11:15:39Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/mysql/MySQLUndoUpdateExecutor.java", "diffHunk": "@@ -47,21 +49,27 @@\n      */\n     @Override\n     protected String buildUndoSQL() {\n+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.MYSQL);\n         TableRecords beforeImage = sqlUndoLog.getBeforeImage();\n         List<Row> beforeImageRows = beforeImage.getRows();\n         if (CollectionUtils.isEmpty(beforeImageRows)) {\n             throw new ShouldNeverHappenException(\"Invalid UNDO LOG\"); // TODO\n         }\n         Row row = beforeImageRows.get(0);\n-        Field pkField = row.primaryKeys().get(0);\n+\n         List<Field> nonPkFields = row.nonPrimaryKeys();\n         // update sql undo log before image all field come from table meta. need add escape.\n         // see BaseTransactionalExecutor#buildTableRecords\n         String updateColumns = nonPkFields.stream()\n             .map(field -> ColumnUtils.addEscape(field.getName(), JdbcConstants.MYSQL) + \" = ?\")\n             .collect(Collectors.joining(\", \"));\n-        return String.format(UPDATE_SQL_TEMPLATE, sqlUndoLog.getTableName(), updateColumns,\n-                ColumnUtils.addEscape(pkField.getName(), JdbcConstants.MYSQL));\n+\n+        List<String> pkNameList = getOrderedPkList(beforeImage,row,JdbcConstants.MYSQL)\n+                .stream().map(e -> e.getName())\n+                .collect(Collectors.toList());\n+        String whereSql = buildWhereConditionByPKs(pkNameList,keywordChecker);\n+\n+        return String.format(UPDATE_SQL_TEMPLATE, keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),updateColumns, whereSql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTE0NDAw", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-439914400", "createdAt": "2020-06-30T11:16:07Z", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNjowN1rOGq3okQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNjowN1rOGq3okQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwNDg4MQ==", "bodyText": "sqlUndoLog.getTableName() always has escape.", "url": "https://github.com/seata/seata/pull/2398#discussion_r447604881", "createdAt": "2020-06-30T11:16:07Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoInsertExecutor.java", "diffHunk": "@@ -49,18 +51,27 @@ protected String buildUndoSQL() {\n         if (CollectionUtils.isEmpty(afterImageRows)) {\n             throw new ShouldNeverHappenException(\"Invalid UNDO LOG\");\n         }\n-        Row row = afterImageRows.get(0);\n-        Field pkField = row.primaryKeys().get(0);\n-        // insert sql undo log after image all field come from table meta, need add escape.\n-        // see BaseTransactionalExecutor#buildTableRecords\n-        return String.format(DELETE_SQL_TEMPLATE, sqlUndoLog.getTableName(),\n-                ColumnUtils.addEscape(pkField.getName(), JdbcConstants.ORACLE));\n+        return generateDeleteSql(afterImageRows,afterImage);\n     }\n \n     @Override\n-    protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValues, Field pkValue)\n-        throws SQLException {\n-        undoPST.setObject(1, pkValue.getValue(), pkValue.getType());\n+    protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValues, List<Field> pkValueList)\n+            throws SQLException {\n+        int undoIndex = 0;\n+        for (Field pkField:pkValueList) {\n+            undoIndex++;\n+            undoPST.setObject(undoIndex, pkField.getValue(), pkField.getType());\n+        }\n+    }\n+\n+\n+    private String generateDeleteSql(List<Row> rows,TableRecords afterImage) {\n+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.ORACLE);\n+        List<String> pkNameList = getOrderedPkList(afterImage,rows.get(0),JdbcConstants.ORACLE)\n+                .stream().map(e -> e.getName())\n+                .collect(Collectors.toList());\n+        String whereSql = buildWhereConditionByPKs(pkNameList,keywordChecker);\n+        return String.format(DELETE_SQL_TEMPLATE,keywordChecker.checkAndReplace(sqlUndoLog.getTableName()), whereSql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTE0NTUx", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-439914551", "createdAt": "2020-06-30T11:16:20Z", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNjoyMFrOGq3pBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNjoyMFrOGq3pBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwNDk5OA==", "bodyText": "sqlUndoLog.getTableName() always has escape.", "url": "https://github.com/seata/seata/pull/2398#discussion_r447604998", "createdAt": "2020-06-30T11:16:20Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/oracle/OracleUndoUpdateExecutor.java", "diffHunk": "@@ -36,28 +38,33 @@\n public class OracleUndoUpdateExecutor extends AbstractUndoExecutor {\n \n     /**\n-     * UPDATE a SET x = ?, y = ?, z = ? WHERE pk = ?\n+     * UPDATE a SET x = ?, y = ?, z = ? WHERE pk1 in (?) pk2 in (?)\n      */\n     private static final String UPDATE_SQL_TEMPLATE = \"UPDATE %s SET %s WHERE %s = ?\";\n \n     @Override\n     protected String buildUndoSQL() {\n+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.ORACLE);\n         TableRecords beforeImage = sqlUndoLog.getBeforeImage();\n         List<Row> beforeImageRows = beforeImage.getRows();\n         if (CollectionUtils.isEmpty(beforeImageRows)) {\n             throw new ShouldNeverHappenException(\"Invalid UNDO LOG\"); // TODO\n         }\n-\n         Row row = beforeImageRows.get(0);\n-        Field pkField = row.primaryKeys().get(0);\n+\n         List<Field> nonPkFields = row.nonPrimaryKeys();\n-        // update sql undo log before image all field name come from table meta, need add escape.\n+        // update sql undo log before image all field come from table meta. need add escape.\n         // see BaseTransactionalExecutor#buildTableRecords\n         String updateColumns = nonPkFields.stream()\n-            .map(field -> ColumnUtils.addEscape(field.getName(), JdbcConstants.ORACLE) + \" = ?\")\n-            .collect(Collectors.joining(\", \"));\n-        return String.format(UPDATE_SQL_TEMPLATE, sqlUndoLog.getTableName(), updateColumns,\n-                ColumnUtils.addEscape(pkField.getName(), JdbcConstants.ORACLE));\n+                .map(field -> ColumnUtils.addEscape(field.getName(), JdbcConstants.ORACLE) + \" = ?\")\n+                .collect(Collectors.joining(\", \"));\n+\n+        List<String> pkNameList = getOrderedPkList(beforeImage,row,JdbcConstants.ORACLE)\n+                .stream().map(e -> e.getName())\n+                .collect(Collectors.toList());\n+        String whereSql = buildWhereConditionByPKs(pkNameList,keywordChecker);\n+\n+        return String.format(UPDATE_SQL_TEMPLATE, keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),updateColumns, whereSql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTE0NjQ2", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-439914646", "createdAt": "2020-06-30T11:16:30Z", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNjozMVrOGq3pWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNjozMVrOGq3pWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwNTA4MA==", "bodyText": "sqlUndoLog.getTableName() always has escape.", "url": "https://github.com/seata/seata/pull/2398#discussion_r447605080", "createdAt": "2020-06-30T11:16:31Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/postgresql/PostgresqlUndoInsertExecutor.java", "diffHunk": "@@ -49,18 +51,26 @@ protected String buildUndoSQL() {\n         if (CollectionUtils.isEmpty(afterImageRows)) {\n             throw new ShouldNeverHappenException(\"Invalid UNDO LOG\");\n         }\n-        Row row = afterImageRows.get(0);\n-        Field pkField = row.primaryKeys().get(0);\n-        // insert sql undo log after image all field come from table meta, need add escape.\n-        // see BaseTransactionalExecutor#buildTableRecords\n-        return String.format(DELETE_SQL_TEMPLATE, sqlUndoLog.getTableName(),\n-                ColumnUtils.addEscape(pkField.getName(), JdbcConstants.POSTGRESQL));\n+        return generateDeleteSql(afterImageRows,afterImage);\n     }\n \n     @Override\n-    protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValues,\n-                               Field pkValue) throws SQLException {\n-        undoPST.setObject(1, pkValue.getValue(), pkValue.getType());\n+    protected void undoPrepare(PreparedStatement undoPST, ArrayList<Field> undoValues, List<Field> pkValueList) throws SQLException {\n+        int undoIndex = 0;\n+        for (Field pkField:pkValueList) {\n+            undoIndex++;\n+            undoPST.setObject(undoIndex, pkField.getValue(), pkField.getType());\n+        }\n+    }\n+\n+\n+    private String generateDeleteSql(List<Row> rows,TableRecords afterImage) {\n+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.POSTGRESQL);\n+        List<String> pkNameList = getOrderedPkList(afterImage,rows.get(0),JdbcConstants.POSTGRESQL)\n+                .stream().map(e -> e.getName())\n+                .collect(Collectors.toList());\n+        String whereSql = buildWhereConditionByPKs(pkNameList,keywordChecker);\n+        return String.format(DELETE_SQL_TEMPLATE,keywordChecker.checkAndReplace(sqlUndoLog.getTableName()), whereSql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTE0NzUw", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-439914750", "createdAt": "2020-06-30T11:16:39Z", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNjo0MFrOGq3plQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMToxNjo0MFrOGq3plQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYwNTE0MQ==", "bodyText": "sqlUndoLog.getTableName() always has escape.", "url": "https://github.com/seata/seata/pull/2398#discussion_r447605141", "createdAt": "2020-06-30T11:16:40Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/undo/postgresql/PostgresqlUndoUpdateExecutor.java", "diffHunk": "@@ -34,27 +36,33 @@\n public class PostgresqlUndoUpdateExecutor extends AbstractUndoExecutor {\n \n     /**\n-     * UPDATE a SET x = ?, y = ?, z = ? WHERE pk = ?\n+     * UPDATE a SET x = ?, y = ?, z = ? WHERE pk1 in (?) pk2 in (?)\n      */\n-    private static final String UPDATE_SQL_TEMPLATE = \"UPDATE %s SET %s WHERE %s = ?\";\n+    private static final String UPDATE_SQL_TEMPLATE = \"UPDATE %s SET %s WHERE %s \";\n \n     @Override\n     protected String buildUndoSQL() {\n+        KeywordChecker keywordChecker = KeywordCheckerFactory.getKeywordChecker(JdbcConstants.POSTGRESQL);\n         TableRecords beforeImage = sqlUndoLog.getBeforeImage();\n         List<Row> beforeImageRows = beforeImage.getRows();\n         if (CollectionUtils.isEmpty(beforeImageRows)) {\n             throw new ShouldNeverHappenException(\"Invalid UNDO LOG\"); // TODO\n         }\n         Row row = beforeImageRows.get(0);\n-        Field pkField = row.primaryKeys().get(0);\n+\n         List<Field> nonPkFields = row.nonPrimaryKeys();\n         // update sql undo log before image all field come from table meta. need add escape.\n         // see BaseTransactionalExecutor#buildTableRecords\n         String updateColumns = nonPkFields.stream()\n                 .map(field -> ColumnUtils.addEscape(field.getName(), JdbcConstants.POSTGRESQL) + \" = ?\")\n                 .collect(Collectors.joining(\", \"));\n-        return String.format(UPDATE_SQL_TEMPLATE, sqlUndoLog.getTableName(), updateColumns,\n-                ColumnUtils.addEscape(pkField.getName(), JdbcConstants.POSTGRESQL));\n+\n+        List<String> pkNameList = getOrderedPkList(beforeImage,row,JdbcConstants.POSTGRESQL)\n+                .stream().map(e -> e.getName())\n+                .collect(Collectors.toList());\n+        String whereSql = buildWhereConditionByPKs(pkNameList,keywordChecker);\n+\n+        return String.format(UPDATE_SQL_TEMPLATE, keywordChecker.checkAndReplace(sqlUndoLog.getTableName()),updateColumns, whereSql);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTQ0ODMy", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-439944832", "createdAt": "2020-06-30T12:03:13Z", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowMzoxM1rOGq5HSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjowMzoxM1rOGq5HSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzYyOTEyOA==", "bodyText": "same  as  another buildWhereConditionByPKs", "url": "https://github.com/seata/seata/pull/2398#discussion_r447629128", "createdAt": "2020-06-30T12:03:13Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java", "diffHunk": "@@ -120,18 +124,34 @@ public T execute(Object... args) throws Throwable {\n     protected abstract T doExecute(Object... args) throws Throwable;\n \n     /**\n-     * Build where condition by p ks string.\n+     * Build where condition by pks string.\n      *\n      * @param pkRows the pk rows\n      * @return the string\n      * @throws SQLException the sql exception\n      */\n-    protected String buildWhereConditionByPKs(List<Field> pkRows) throws SQLException {\n-        StringJoiner whereConditionAppender = new StringJoiner(\",\", getColumnNameInSQL(pkRows.get(0).getName()) + \" in (\", \")\");\n-        for (Field field : pkRows) {\n-            whereConditionAppender.add(\"?\");\n+    protected String buildWhereConditionByPKs(List<Map<String,Field>> pkRows) throws SQLException {\n+        StringBuilder sql = new StringBuilder();\n+        List<String> pkColumnNameList = getTableMeta().getPrimaryKeyOnlyName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5OTYwMTcz", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-439960173", "createdAt": "2020-06-30T12:24:47Z", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjoyNDo0N1rOGq52lA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxMjoyNDo0N1rOGq52lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzY0MTIzNg==", "bodyText": "same as another buildWhereConditionByPKs", "url": "https://github.com/seata/seata/pull/2398#discussion_r447641236", "createdAt": "2020-06-30T12:24:47Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseTransactionalExecutor.java", "diffHunk": "@@ -331,22 +388,45 @@ protected TableRecords buildTableRecords(TableMeta tableMeta, String selectSQL,\n     /**\n      * build TableRecords\n      *\n-     * @param pkValues the pkValues\n+     * @param pkValuesMap the pkValuesMap\n      * @return return TableRecords;\n      * @throws SQLException\n      */\n-    protected TableRecords buildTableRecords(List<Object> pkValues) throws SQLException {\n-        String pk = getTableMeta().getEscapePkName(getDbType());\n-        StringJoiner pkValuesJoiner = new StringJoiner(\" , \",\n-                \"SELECT * FROM \" + getFromTableInSQL() + \" WHERE \" + pk + \" in (\", \")\");\n-        for (Object pkValue : pkValues) {\n-            pkValuesJoiner.add(\"?\");\n+    protected TableRecords buildTableRecords(Map<String,List<Object>> pkValuesMap) throws SQLException {\n+        TableRecords afterImage;\n+        StringBuilder sql =  new StringBuilder()\n+                .append(\"SELECT * FROM \")\n+                .append(getFromTableInSQL())\n+                .append(\" WHERE \");\n+\n+        List<String> pkColumnNameList = getTableMeta().getPrimaryKeyOnlyName();\n+        for (int i = 0;i < pkColumnNameList.size();i++)\n+        {\n+            if (i > 0)\n+            {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "originalPosition": 184}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMDY2MTE0", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-440066114", "createdAt": "2020-06-30T14:21:15Z", "commit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyMToxNlrOGq-xNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNDoyMToxNlrOGq-xNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzcyMTc4Mw==", "bodyText": "StringUtils.empty", "url": "https://github.com/seata/seata/pull/2398#discussion_r447721783", "createdAt": "2020-06-30T14:21:16Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/DataCompareUtils.java", "diffHunk": "@@ -180,20 +182,28 @@ private static void convertType(Field f0, Field f1) {\n         return Result.ok();\n     }\n \n-    private static Map<String, Map<String, Field>> rowListToMap(List<Row> rowList, String primaryKey) {\n+    private static Map<String, Map<String, Field>> rowListToMap(List<Row> rowList, List<String> primaryKeyList) {\n         // {value of primaryKey, value of all columns}\n         Map<String, Map<String, Field>> rowMap = new HashMap<>();\n         for (Row row : rowList) {\n+            //ensure the order of column\n+            List<Field> rowFieldList = row.getFields().stream()\n+                    .sorted(Comparator.comparing(Field::getName))\n+                    .collect(Collectors.toList());\n             // {uppercase fieldName : field}\n             Map<String, Field> colsMap = new HashMap<>();\n-            String rowKey = null;\n-            for (int j = 0; j < row.getFields().size(); j++) {\n-                Field field = row.getFields().get(j);\n-                if (field.getName().equalsIgnoreCase(primaryKey)) {\n-                    rowKey = String.valueOf(field.getValue());\n+            String rowKey = new String();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f553f4d2ecbf4a351d7bbc39b5e5b6c2f224d893"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8028e31eba42784d1eb57b5d5616023f00918a2", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/b8028e31eba42784d1eb57b5d5616023f00918a2", "committedDate": "2020-07-01T07:02:47Z", "message": "resolve review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a1f98ea4d72bbd38a8011d8e55495e393ca2666", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/7a1f98ea4d72bbd38a8011d8e55495e393ca2666", "committedDate": "2020-07-01T07:03:41Z", "message": "Merge remote-tracking branch 'myGithub/multi-pk_based_on_1.1.0' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3351b566bfb9a66a4fe211c7893b04c255f618e", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/d3351b566bfb9a66a4fe211c7893b04c255f618e", "committedDate": "2020-07-01T07:09:02Z", "message": "optimize import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76eaaf169a6c3b5dd459c9f42018ce28085ff5aa", "author": {"user": {"login": "l81893521", "name": "will"}}, "url": "https://github.com/seata/seata/commit/76eaaf169a6c3b5dd459c9f42018ce28085ff5aa", "committedDate": "2020-07-01T07:57:56Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "473b6703a5a3147bc4a1dd9bf520f1160e3bd8fd", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/473b6703a5a3147bc4a1dd9bf520f1160e3bd8fd", "committedDate": "2020-07-01T08:50:42Z", "message": "fix test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "813020914058e4a043a5b9ec21525b4e5b2d5638", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/813020914058e4a043a5b9ec21525b4e5b2d5638", "committedDate": "2020-07-01T08:51:22Z", "message": "Merge remote-tracking branch 'myGithub/multi-pk_based_on_1.1.0' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d755a20d7352b030195e161830f355c9022aa96", "author": {"user": {"login": "0000005", "name": "JerryYin"}}, "url": "https://github.com/seata/seata/commit/7d755a20d7352b030195e161830f355c9022aa96", "committedDate": "2020-07-01T09:17:22Z", "message": "fix oracle build sql\nfix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ac27435fedb86a2e82381878d628d55c84f0758", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/7ac27435fedb86a2e82381878d628d55c84f0758", "committedDate": "2020-07-01T09:24:42Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NTIxODk1", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-435521895", "createdAt": "2020-06-23T07:42:47Z", "commit": {"oid": "3870bb6f0670c28b25f36a87e9802bef3f7b2321"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0MzoyMlrOGndLlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwNzo0MzoyMlrOGndLlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDAyNTc0OA==", "bodyText": "You can not use\nrecognizer.getInsertColumns()\n\nfor key of the map from sqlRecognizer.\nBecause they come from users, they may look different from different time, for example the column name 'stock', it would like below\n`stock`\nstock\nStock\nSTOCK", "url": "https://github.com/seata/seata/pull/2398#discussion_r444025748", "createdAt": "2020-06-23T07:43:22Z", "author": {"login": "l81893521"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/BaseInsertExecutor.java", "diffHunk": "@@ -94,102 +99,122 @@ protected boolean containsColumns() {\n     }\n \n     /**\n-     * get primary key column index.\n-     * @return -1: not found.\n+     * get pk index\n+     * @return the key is pk column name and the value is index of the pk column\n      */\n-    protected int getPkIndex() {\n+    protected Map<String,Integer> getPkIndex() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "746f6dcf83991422cf5769b4ca873b6b45875832"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee2ed8f5936f35e34c4d0638de3bdb77782a9bfe", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/ee2ed8f5936f35e34c4d0638de3bdb77782a9bfe", "committedDate": "2020-07-02T12:31:01Z", "message": "Merge branch 'develop' into multi-pk_based_on_1.1.0"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjUwNTc1", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-441650575", "createdAt": "2020-07-02T12:56:19Z", "commit": {"oid": "ee2ed8f5936f35e34c4d0638de3bdb77782a9bfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo1NjoxOVrOGsLnOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMjo1NjoxOVrOGsLnOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4MDc5Mg==", "bodyText": "why only  mysql?", "url": "https://github.com/seata/seata/pull/2398#discussion_r448980792", "createdAt": "2020-07-02T12:56:19Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/exec/AbstractDMLBaseExecutor.java", "diffHunk": "@@ -83,6 +85,10 @@ public T doExecute(Object... args) throws Throwable {\n      * @throws Exception the exception\n      */\n     protected T executeAutoCommitFalse(Object[] args) throws Exception {\n+        if (!JdbcConstants.MYSQL.equalsIgnoreCase(getDbType()) && getTableMeta().getPrimaryKeyOnlyName().size() > 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2ed8f5936f35e34c4d0638de3bdb77782a9bfe"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjY3NTEw", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-441667510", "createdAt": "2020-07-02T13:16:28Z", "commit": {"oid": "ee2ed8f5936f35e34c4d0638de3bdb77782a9bfe"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzoxNjoyOFrOGsMZ3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzoxOToxM1rOGsMgyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5Mzc1OQ==", "bodyText": "Is it in the wrong place?", "url": "https://github.com/seata/seata/pull/2398#discussion_r448993759", "createdAt": "2020-07-02T13:16:28Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/test/java/io/seata/rm/datasource/undo/h2/keyword/H2KeywordChecker.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package io.seata.rm.datasource.undo.h2.keyword;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.rm.datasource.undo.mysql.keyword.MySQLKeywordChecker;\n+import io.seata.sqlparser.util.JdbcConstants;\n+\n+/**\n+ * @author JerryYin\n+ */\n+@LoadLevel(name = JdbcConstants.H2)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2ed8f5936f35e34c4d0638de3bdb77782a9bfe"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk5NTUzMA==", "bodyText": "remove guava dependency\uff0c cause  rm already add.", "url": "https://github.com/seata/seata/pull/2398#discussion_r448995530", "createdAt": "2020-07-02T13:19:13Z", "author": {"login": "slievrly"}, "path": "rm-datasource/pom.xml", "diffHunk": "@@ -83,7 +83,6 @@\n         <dependency>\n             <groupId>com.google.guava</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee2ed8f5936f35e34c4d0638de3bdb77782a9bfe"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNzI3ODI0", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-441727824", "createdAt": "2020-07-02T14:22:56Z", "commit": {"oid": "ee2ed8f5936f35e34c4d0638de3bdb77782a9bfe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyMTIwOTQ0", "url": "https://github.com/seata/seata/pull/2398#pullrequestreview-442120944", "createdAt": "2020-07-03T03:07:59Z", "commit": {"oid": "ee2ed8f5936f35e34c4d0638de3bdb77782a9bfe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4088, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}