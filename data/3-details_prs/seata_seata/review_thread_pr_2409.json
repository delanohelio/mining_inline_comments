{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MDIzNTQy", "number": 2409, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMjozMTo0NFrODxDD-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMTo1NDo1M1rODxOFGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzU2OTg3OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionProxy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxMjozMTo0NVrOGEVAiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwMDo1OToxN1rOGEaHUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MTY5MQ==", "bodyText": "lack throw new SQLException(ex);", "url": "https://github.com/seata/seata/pull/2409#discussion_r407191691", "createdAt": "2020-04-12T12:31:45Z", "author": {"login": "zjinlei"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionProxy.java", "diffHunk": "@@ -211,23 +211,32 @@ private void processLocalCommitWithGlobalLocks() throws SQLException {\n     }\n \n     private void processGlobalTransactionCommit() throws SQLException {\n-        try {\n-            register();\n-        } catch (TransactionException e) {\n-            recognizeLockKeyConflictException(e, context.buildLockKeys());\n-        }\n-\n-        try {\n-            if (context.hasUndoLog()) {\n+        boolean hasUndoLog = context.hasUndoLog();\n+        if (hasUndoLog) {\n+            try {\n+                register();\n+            } catch (TransactionException e) {\n+                recognizeLockKeyConflictException(e, context.buildLockKeys());\n+            }\n+            try {\n                 UndoLogManagerFactory.getUndoLogManager(this.getDbType()).flushUndoLogs(this);\n+            } catch (SQLException sqlEx) {\n+                LOGGER.error(\"add undoLog error:{}\", sqlEx.getMessage(), sqlEx);\n+                throw new SQLException(sqlEx);\n             }\n+        }\n+        try {\n             targetConnection.commit();\n         } catch (Throwable ex) {\n-            LOGGER.error(\"process connectionProxy commit error: {}\", ex.getMessage(), ex);\n-            report(false);\n-            throw new SQLException(ex);\n+            if (hasUndoLog) {\n+                LOGGER.error(\"process connectionProxy commit error: {}\", ex.getMessage(), ex);\n+                report(false);\n+                throw new SQLException(ex);\n+            } else {\n+                LOGGER.error(\"process connectionProxy commit error: {},and the undolog is null\", ex.getMessage(), ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13ac802cf582a202dca63ebe63d64fefc263a5bd"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzI3NTM0Nw==", "bodyText": "ok,i will fix", "url": "https://github.com/seata/seata/pull/2409#discussion_r407275347", "createdAt": "2020-04-13T00:59:17Z", "author": {"login": "lightClouds917"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionProxy.java", "diffHunk": "@@ -211,23 +211,32 @@ private void processLocalCommitWithGlobalLocks() throws SQLException {\n     }\n \n     private void processGlobalTransactionCommit() throws SQLException {\n-        try {\n-            register();\n-        } catch (TransactionException e) {\n-            recognizeLockKeyConflictException(e, context.buildLockKeys());\n-        }\n-\n-        try {\n-            if (context.hasUndoLog()) {\n+        boolean hasUndoLog = context.hasUndoLog();\n+        if (hasUndoLog) {\n+            try {\n+                register();\n+            } catch (TransactionException e) {\n+                recognizeLockKeyConflictException(e, context.buildLockKeys());\n+            }\n+            try {\n                 UndoLogManagerFactory.getUndoLogManager(this.getDbType()).flushUndoLogs(this);\n+            } catch (SQLException sqlEx) {\n+                LOGGER.error(\"add undoLog error:{}\", sqlEx.getMessage(), sqlEx);\n+                throw new SQLException(sqlEx);\n             }\n+        }\n+        try {\n             targetConnection.commit();\n         } catch (Throwable ex) {\n-            LOGGER.error(\"process connectionProxy commit error: {}\", ex.getMessage(), ex);\n-            report(false);\n-            throw new SQLException(ex);\n+            if (hasUndoLog) {\n+                LOGGER.error(\"process connectionProxy commit error: {}\", ex.getMessage(), ex);\n+                report(false);\n+                throw new SQLException(ex);\n+            } else {\n+                LOGGER.error(\"process connectionProxy commit error: {},and the undolog is null\", ex.getMessage(), ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzE5MTY5MQ=="}, "originalCommit": {"oid": "13ac802cf582a202dca63ebe63d64fefc263a5bd"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTM3NDk4OnYy", "diffSide": "RIGHT", "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxMTo1NDo1M1rOGEkauQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzowODo1N1rOGE8jxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0NDE1Mw==", "bodyText": "I think it's better to put it in registers and flushUndoLogs.\nif there is no undolog why flushUndoLogs method execution without judgment", "url": "https://github.com/seata/seata/pull/2409#discussion_r407444153", "createdAt": "2020-04-13T11:54:53Z", "author": {"login": "slievrly"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionProxy.java", "diffHunk": "@@ -211,24 +211,30 @@ private void processLocalCommitWithGlobalLocks() throws SQLException {\n     }\n \n     private void processGlobalTransactionCommit() throws SQLException {\n-        try {\n-            register();\n-        } catch (TransactionException e) {\n-            recognizeLockKeyConflictException(e, context.buildLockKeys());\n-        }\n-\n-        try {\n-            if (context.hasUndoLog()) {\n+        if (context.hasUndoLog()) {\n+            try {\n+                register();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "758e046fef9bbeff878f692beecc9144e2299992"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzgzOTY4NA==", "bodyText": "I have finish it.PTAL", "url": "https://github.com/seata/seata/pull/2409#discussion_r407839684", "createdAt": "2020-04-14T03:08:57Z", "author": {"login": "lightClouds917"}, "path": "rm-datasource/src/main/java/io/seata/rm/datasource/ConnectionProxy.java", "diffHunk": "@@ -211,24 +211,30 @@ private void processLocalCommitWithGlobalLocks() throws SQLException {\n     }\n \n     private void processGlobalTransactionCommit() throws SQLException {\n-        try {\n-            register();\n-        } catch (TransactionException e) {\n-            recognizeLockKeyConflictException(e, context.buildLockKeys());\n-        }\n-\n-        try {\n-            if (context.hasUndoLog()) {\n+        if (context.hasUndoLog()) {\n+            try {\n+                register();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzQ0NDE1Mw=="}, "originalCommit": {"oid": "758e046fef9bbeff878f692beecc9144e2299992"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1703, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}