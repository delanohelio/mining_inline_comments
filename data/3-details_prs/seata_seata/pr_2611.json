{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NjEwNzE1", "number": 2611, "title": "optimize: increase the cache of configuration values", "bodyText": "\u2160. Describe what this PR did\noptimize: increase the cache of configuration values\n\u5927\u5e76\u53d1\u4e0b\u6027\u80fd\u76f8\u5bf91.2\u63d0\u5347\u53ef\u8fbe90%+\nSEATA 1.3(#2611) \u6027\u80fd\u6d4b\u8bd5\u62a5\u544a\n\u65b9\u5f0f\u8bf4\u660e\nnacos\u505a\u914d\u7f6e&\u6ce8\u518c\u4e2d\u5fc3.\n\u5bf940\u6761\u6570\u636e\u968f\u673aforupdate\u8bfb\u53d6\u540e,update.\u8bbe\u7f6e\u6700\u9ad8\u5e76\u53d1200,\u8bf7\u6c42\u6570400,\u6bcf\u79cd\u65b9\u5f0f4\u6b21\u6d4b\u8bd5\nDubbo\u4e0b\u6d4b\u8bd5: \u6682\u65e0.\nSpringCloud\u4e0b\u6d4b\u8bd5: 678ms  431ms 500ms 427ms  (\u5168\u90e8\u6b63\u5e38\u54cd\u5e94)\nFile\u914d\u7f6e\u4e2d\u5fc3\u4e0b\u6d4b\u8bd5: 358ms 553ms 421ms 387ms (\u5168\u90e8\u6b63\u5e38\u54cd\u5e94)\n\u672c\u5730\u4e8b\u52a1\u4e0b\u6d4b\u8bd5: 191ms 214ms 109ms 154ms (\u5168\u90e8\u6b63\u5e38\u54cd\u5e94)\nSEATA 1.2\u4e0b\u6d4b\u8bd5: 10289ms 13931ms 11118ms 12792ms (70%+\u7684\u8bf7\u6c42\u63a5\u53e3\u54cd\u5e94\u5168\u90e8\u8d85\u65f6)\n\u6d4b\u8bd5\u73af\u5883\n\u786c\u4ef6\u73af\u5883: CPU: i5-8300\n\u5185\u5b58: 8G\n\u786c\u76d8\uff1a1TB SSD\n\u8f6f\u4ef6\u73af\u5883:\n\u7cfb\u7edf:win10 64\nJAVA: 1.8.0_181\nMysql: 5.7.23\nNacos: 1.2.1\n\u6d4b\u8bd5\u6a21\u5757\n\u6d4b\u8bd5\u7528\u4f8b\n\u6d4b\u8bd5\u5de5\u5177\n\u2161. Does this pull request fix one issue?\n\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews", "createdAt": "2020-04-24T15:14:42Z", "url": "https://github.com/seata/seata/pull/2611", "merged": true, "mergeCommit": {"oid": "73724a9d2500c38efc23684965b2ac18bd1fdd26"}, "closed": true, "closedAt": "2020-06-22T03:09:22Z", "author": {"login": "a364176773"}, "timelineItems": {"totalCount": 85, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcay9zGAH2gAyNDA4NjEwNzE1Ojc2MWFkMzNlNzQ5NzNkMzc4MjE1ZWE2NjFjNGEzOGYwNTQ2ZGY2OWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctn-dwAFqTQzNDU3NzgwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "761ad33e74973d378215ea661c4a38f0546df69b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/761ad33e74973d378215ea661c4a38f0546df69b", "committedDate": "2020-04-24T15:10:52Z", "message": "add config cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4cddac3be1ceef88e51b112d17cf6e8b88f7e84", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b4cddac3be1ceef88e51b112d17cf6e8b88f7e84", "committedDate": "2020-04-24T15:20:08Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7d35489480e4c26c1b867167c8e0c4a526eaa63", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a7d35489480e4c26c1b867167c8e0c4a526eaa63", "committedDate": "2020-04-24T16:53:35Z", "message": "real time reading of current value"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75a38d88e439137801e2aaa5e0a15740500dcf14", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/75a38d88e439137801e2aaa5e0a15740500dcf14", "committedDate": "2020-04-25T03:43:42Z", "message": "optimize code structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed50977df81c71c065b68b9013d22986ead2863d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ed50977df81c71c065b68b9013d22986ead2863d", "committedDate": "2020-04-25T13:43:45Z", "message": "read the current value from the configuration center when the cache read is empty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "596fb4c89d8a790fd26a44f47c778e3e2a53b976", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/596fb4c89d8a790fd26a44f47c778e3e2a53b976", "committedDate": "2020-04-25T13:50:11Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4acaafcd6429d8ff15fd1bc5fcc5ccbfefb6ca85", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/4acaafcd6429d8ff15fd1bc5fcc5ccbfefb6ca85", "committedDate": "2020-04-25T14:28:33Z", "message": "add dcl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5297c55ce0da24029dc660a9020ede303d57ecc2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5297c55ce0da24029dc660a9020ede303d57ecc2", "committedDate": "2020-04-25T14:50:14Z", "message": "fix bug"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDU0OTUy", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-400454952", "createdAt": "2020-04-26T03:50:35Z", "commit": {"oid": "5297c55ce0da24029dc660a9020ede303d57ecc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1MDozNlrOGL-LQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1MDozNlrOGL-LQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjIxMA==", "bodyText": "The scope of the lock is too big.", "url": "https://github.com/seata/seata/pull/2611#discussion_r415206210", "createdAt": "2020-04-26T03:50:36Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/AbstractConfiguration.java", "diffHunk": "@@ -127,13 +136,36 @@ public String getConfig(String dataId) {\n         return getConfig(dataId, DEFAULT_CONFIG_TIMEOUT);\n     }\n \n+    @Override\n+    public String getConfig(String dataId, String content, long timeoutMills) {\n+        Object result = CONFIG_CACHE.get(dataId, mappingFunction -> {\n+            return null;\n+        });\n+        if (null == result) {\n+            synchronized (AbstractConfiguration.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5297c55ce0da24029dc660a9020ede303d57ecc2"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ad856f082e89c512357c4967f6923e58db17fb0", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1ad856f082e89c512357c4967f6923e58db17fb0", "committedDate": "2020-04-26T03:52:35Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDYwNTQ1", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-400460545", "createdAt": "2020-04-26T05:30:38Z", "commit": {"oid": "5297c55ce0da24029dc660a9020ede303d57ecc2"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "357413a87824eb450c9e80306ef06400217a934e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/357413a87824eb450c9e80306ef06400217a934e", "committedDate": "2020-04-26T07:20:40Z", "message": "processing cache by aspect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33d8f1683be22c3b3f9bd9a72382af0c7dc3ef0d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/33d8f1683be22c3b3f9bd9a72382af0c7dc3ef0d", "committedDate": "2020-04-26T07:44:00Z", "message": "format code"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcfe3adf71767fbf831d538e7f5cf657001c519c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/fcfe3adf71767fbf831d538e7f5cf657001c519c", "committedDate": "2020-04-26T07:46:20Z", "message": "format code"}, "afterCommit": {"oid": "33d8f1683be22c3b3f9bd9a72382af0c7dc3ef0d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/33d8f1683be22c3b3f9bd9a72382af0c7dc3ef0d", "committedDate": "2020-04-26T07:44:00Z", "message": "format code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c82448b55ff2525f178bb30d3de7d2dc5da06aa", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0c82448b55ff2525f178bb30d3de7d2dc5da06aa", "committedDate": "2020-04-26T07:48:28Z", "message": "format code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "806061dbfc657e58337fa9e1c0f488951f1a759a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/806061dbfc657e58337fa9e1c0f488951f1a759a", "committedDate": "2020-04-26T09:36:11Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2318724b187dded6cc685d973c6ad04f3331fa", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8d2318724b187dded6cc685d973c6ad04f3331fa", "committedDate": "2020-04-26T15:22:45Z", "message": "optimize code structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b83fbb76970154bcbe452f2598fbf30a3b4cf181", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b83fbb76970154bcbe452f2598fbf30a3b4cf181", "committedDate": "2020-04-26T15:39:17Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad11c27d8918258dc91d9fad6aa5b199be3fb6ae", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ad11c27d8918258dc91d9fad6aa5b199be3fb6ae", "committedDate": "2020-04-27T02:58:38Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "861da1fdde55ccb7590c96f8f2e23790c7b19f14", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/861da1fdde55ccb7590c96f8f2e23790c7b19f14", "committedDate": "2020-04-27T03:10:11Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e764c586862e977a61d569952ab4f718012a6af", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5e764c586862e977a61d569952ab4f718012a6af", "committedDate": "2020-04-27T05:43:38Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "144b19b76ea5caa6166043c631059b985d05ea6a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/144b19b76ea5caa6166043c631059b985d05ea6a", "committedDate": "2020-04-27T07:29:29Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba688487f3f01a118e7d5f7daab190a32c110c49", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ba688487f3f01a118e7d5f7daab190a32c110c49", "committedDate": "2020-04-27T07:50:22Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97a5b9a98e7e1ee26919ed7ecd513f55c420c550", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/97a5b9a98e7e1ee26919ed7ecd513f55c420c550", "committedDate": "2020-04-27T08:09:31Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0bc2bbecd1d91060aa188278219195a372a8126", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c0bc2bbecd1d91060aa188278219195a372a8126", "committedDate": "2020-04-27T08:10:41Z", "message": "Merge branch 'add_config_cache' of https://github.com/a364176773/seata into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ccebfd93639eadb281bf22c1f6293f5ef4a92b2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8ccebfd93639eadb281bf22c1f6293f5ef4a92b2", "committedDate": "2020-04-27T09:34:30Z", "message": "modify test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec9e9f52e3fcdc181dc91c2d55592346aad4a447", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ec9e9f52e3fcdc181dc91c2d55592346aad4a447", "committedDate": "2020-04-28T02:18:36Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66f53f038914041b87bc9d7fda41ab5e9915d9ec", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/66f53f038914041b87bc9d7fda41ab5e9915d9ec", "committedDate": "2020-05-06T05:28:41Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bd29f88f8d69970c0bae18a5507fc5f31b69765", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/6bd29f88f8d69970c0bae18a5507fc5f31b69765", "committedDate": "2020-05-06T13:07:22Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa2ffcc0712bbbd92a318c30555d3356f5c6e831", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/aa2ffcc0712bbbd92a318c30555d3356f5c6e831", "committedDate": "2020-05-06T14:07:18Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a73386bddd785218138064f02bb383e0eb6ffd2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/7a73386bddd785218138064f02bb383e0eb6ffd2", "committedDate": "2020-05-06T14:10:00Z", "message": "Merge branch 'add_config_cache' of github.com:a364176773/seata into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb6b9684d949ce489917d03dedce720c858a1012", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/eb6b9684d949ce489917d03dedce720c858a1012", "committedDate": "2020-05-06T14:59:51Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8f8d93f463f533a5422a3cd568ef44034838f1a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f8f8d93f463f533a5422a3cd568ef44034838f1a", "committedDate": "2020-05-07T01:30:05Z", "message": "format code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5533eebe50fdfeb24ad32a649374c59c5e57dccd", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5533eebe50fdfeb24ad32a649374c59c5e57dccd", "committedDate": "2020-05-09T09:11:09Z", "message": "resolving code conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63310309940c42c4461201104c36c8272561fd54", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/63310309940c42c4461201104c36c8272561fd54", "committedDate": "2020-05-09T09:16:42Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca1797e630f7db70d992850bb200d5e13b84cfe1", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ca1797e630f7db70d992850bb200d5e13b84cfe1", "committedDate": "2020-05-09T09:20:38Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8688da98f3f2e5f91293655ab720d24525e0af13", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8688da98f3f2e5f91293655ab720d24525e0af13", "committedDate": "2020-05-09T09:21:26Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05593d050233536aeff0f2878bed29eae8eacd69", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/05593d050233536aeff0f2878bed29eae8eacd69", "committedDate": "2020-05-09T09:23:39Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53971f9ef6fd21996c65ac169606586a53961b12", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/53971f9ef6fd21996c65ac169606586a53961b12", "committedDate": "2020-05-09T09:24:23Z", "message": "fix bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01df42b843a02c0e93a8013a0775b176be1a0b68", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/01df42b843a02c0e93a8013a0775b176be1a0b68", "committedDate": "2020-05-10T03:45:16Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a51a70ba58c82cd18b69fa347a334d1d5384dcc", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1a51a70ba58c82cd18b69fa347a334d1d5384dcc", "committedDate": "2020-05-12T06:13:45Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "312594e544965996092823f3e099ca298d984e9b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/312594e544965996092823f3e099ca298d984e9b", "committedDate": "2020-05-12T08:13:37Z", "message": "merge develop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5ODYyMzgx", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-409862381", "createdAt": "2020-05-12T09:27:43Z", "commit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToyNzo0M1rOGT-Gig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzowNjo0NlrOGUFoXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5MzYxMA==", "bodyText": "more accurate name", "url": "https://github.com/seata/seata/pull/2611#discussion_r423593610", "createdAt": "2020-05-12T09:27:43Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/Configuration.java", "diffHunk": "@@ -206,6 +206,15 @@\n      */\n     boolean putConfig(String dataId, String content, long timeoutMills);\n \n+    /**\n+     *\n+     * @param dataId       the data id\n+     * @param defaultValue the default value\n+     * @param timeoutMills the timeout mills\n+     * @return the config now\n+     */\n+    String getConfigNow(String dataId, String defaultValue, long timeoutMills);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwMTE5Ng==", "bodyText": "Use the getConfig method name directly", "url": "https://github.com/seata/seata/pull/2611#discussion_r423701196", "createdAt": "2020-05-12T12:42:19Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationCacheProvider, ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_CONFIG_NOW = METHOD_PREFIX + \"ConfigNow\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+    \n+    @Override\n+    public Configuration provide(Configuration originalConfiguration) {\n+        return (Configuration)Enhancer.create(Configuration.class,\n+            (MethodInterceptor)(proxy, method, args, methodProxy) -> {\n+                if (method.getName().startsWith(METHOD_PREFIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwNzIwNw==", "bodyText": "newValue is null->remove,  the oldValue in nacos always is null.", "url": "https://github.com/seata/seata/pull/2611#discussion_r423707207", "createdAt": "2020-05-12T12:51:59Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationCacheProvider, ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_CONFIG_NOW = METHOD_PREFIX + \"ConfigNow\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+    \n+    @Override\n+    public Configuration provide(Configuration originalConfiguration) {\n+        return (Configuration)Enhancer.create(Configuration.class,\n+            (MethodInterceptor)(proxy, method, args, methodProxy) -> {\n+                if (method.getName().startsWith(METHOD_PREFIX)\n+                    && !method.getName().equalsIgnoreCase(METHOD_CONFIG_NOW)) {\n+                    String rawDataId = (String)args[0];\n+                    Object result = CONFIG_CACHE.get(rawDataId);\n+                    if (null == result) {\n+                        result = method.invoke(originalConfiguration, args);\n+                        if (result != null) {\n+                            CONFIG_CACHE.put(rawDataId, result);\n+                        }\n+                    }\n+                    if (method.getReturnType().equals(String.class)) {\n+                        return String.valueOf(result);\n+                    }\n+                    return result;\n+                }\n+                return method.invoke(originalConfiguration, args);\n+            });\n+    }\n+\n+    @Override\n+    public void onChangeEvent(ConfigurationChangeEvent event) {\n+        Object oldValue = CONFIG_CACHE.get(event.getDataId());\n+        if (null == oldValue || !oldValue.equals(event.getNewValue())) {\n+            CONFIG_CACHE.put(event.getDataId(), event.getNewValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTg2Mg==", "bodyText": "dataId", "url": "https://github.com/seata/seata/pull/2611#discussion_r423709862", "createdAt": "2020-05-12T12:56:12Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMjAxMA==", "bodyText": "extConfiguration?", "url": "https://github.com/seata/seata/pull/2611#discussion_r423712010", "createdAt": "2020-05-12T12:59:21Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {\n+        if (StringUtils.isBlank(key) || LISTENER_KEYS.contains(key)) {\n+            return;\n+        }\n+        getInstance().addConfigListener(key,\n+            (ConfigurationChangeListener)SeataConfigurationCacheProvider.getInstance());\n+        LISTENER_KEYS.add(key);\n+    }\n+\n     private static Configuration buildConfiguration() {\n         ConfigType configType;\n         String configTypeName = null;\n         try {\n-            configTypeName = CURRENT_FILE_INSTANCE.getConfig(\n-                ConfigurationKeys.FILE_ROOT_CONFIG + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR\n-                    + ConfigurationKeys.FILE_ROOT_TYPE);\n+            configTypeName = CURRENT_FILE_INSTANCE.getConfig(ConfigurationKeys.FILE_ROOT_CONFIG\n+                + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR + ConfigurationKeys.FILE_ROOT_TYPE);\n             configType = ConfigType.getType(configTypeName);\n         } catch (Exception e) {\n             throw new NotSupportYetException(\"not support register type: \" + configTypeName, e);\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+            } else {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);\n+            }\n+            if (null != configurationCache) {\n+                extConfiguration = configurationCache;\n+            }\n+        } catch (EnhancedServiceNotFoundException ignore) {\n+\n+        } catch (Exception e) {\n+            LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNTQ0OA==", "bodyText": "CacheListener", "url": "https://github.com/seata/seata/pull/2611#discussion_r423715448", "createdAt": "2020-05-12T13:04:21Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTg2Mg=="}, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNjk1OQ==", "bodyText": "How do I customize a listener\uff1f", "url": "https://github.com/seata/seata/pull/2611#discussion_r423716959", "createdAt": "2020-05-12T13:06:46Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "diffHunk": "@@ -219,7 +218,7 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n                     if (interceptor == null) {\n                         if (globalTransactionalInterceptor == null) {\n                             globalTransactionalInterceptor = new GlobalTransactionalInterceptor(failureHandlerHook);\n-                            ConfigurationFactory.getInstance().addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, (ConfigurationChangeListener) globalTransactionalInterceptor);\n+                            ConfigurationFactory.addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35f9d8b7714994642195c4d8154fbb2e9edc53a1", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/35f9d8b7714994642195c4d8154fbb2e9edc53a1", "committedDate": "2020-05-12T14:59:05Z", "message": "optimized code logic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "deb3aa0d82cc9fb3d674f74d87e94f8b066ab746", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/deb3aa0d82cc9fb3d674f74d87e94f8b066ab746", "committedDate": "2020-05-12T15:17:10Z", "message": "modify parameter name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "65a58d16a8c5c28d94e6c73bff26006376d74550", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/65a58d16a8c5c28d94e6c73bff26006376d74550", "committedDate": "2020-05-14T13:10:41Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aaab09d97eb5d009153b6afc21138aa18f14f86f", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/aaab09d97eb5d009153b6afc21138aa18f14f86f", "committedDate": "2020-05-21T01:21:31Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20badbd20d7e613cce6b0eac9370e3a38059abfd", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/20badbd20d7e613cce6b0eac9370e3a38059abfd", "committedDate": "2020-05-21T01:58:01Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1097ed45022062568327417290cddc058c8c575d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1097ed45022062568327417290cddc058c8c575d", "committedDate": "2020-05-21T02:03:18Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cb2b4b6b8e5ad421e48313a3e5bbf5e0a87d334", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0cb2b4b6b8e5ad421e48313a3e5bbf5e0a87d334", "committedDate": "2020-05-25T08:17:02Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/07f4c67a412d77aa2df3674c547387c195e80ca1", "committedDate": "2020-06-02T15:16:15Z", "message": "Merge branch develop into add_config_cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMTc1NTI5", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-423175529", "createdAt": "2020-06-03T02:22:17Z", "commit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMjoyMjoxN1rOGeJ5Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMzowMjoxN1rOGeKdYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3MjU2Ng==", "bodyText": "Why not use the existing ExtConfigurationProvider directly?", "url": "https://github.com/seata/seata/pull/2611#discussion_r434272566", "createdAt": "2020-06-03T02:22:17Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+/**\n+ * @author funkye\n+ */\n+public interface ConfigurationCacheProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTQwMA==", "bodyText": "Use ExtConfigurationProvider, and then specify the type.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434281400", "createdAt": "2020-06-03T03:00:33Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTQ1Ng==", "bodyText": "Use ExtConfigurationProvider, and then specify the type.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434281456", "createdAt": "2020-06-03T03:00:47Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+            } else {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTgyNA==", "bodyText": "ExtConfigurationProvider will have multiple implementation classes, here you need to specify which extension classes to load.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434281824", "createdAt": "2020-06-03T03:02:17Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb08bf41674828bf752caa14167ae1c5fee756c5", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/fb08bf41674828bf752caa14167ae1c5fee756c5", "committedDate": "2020-06-03T03:28:48Z", "message": "remove redundant code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2356cc9b562a2e703b8939567785c606947950a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f2356cc9b562a2e703b8939567785c606947950a", "committedDate": "2020-06-03T04:49:24Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a24ca8fd13514b4248585a31eddadd8345c66373", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a24ca8fd13514b4248585a31eddadd8345c66373", "committedDate": "2020-06-03T04:54:31Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e68ebae60f0ff1f6b6824c16412aa3891e94be7d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e68ebae60f0ff1f6b6824c16412aa3891e94be7d", "committedDate": "2020-06-03T05:41:51Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2def30347ac5afb5923816dec2c1803d619b1d41", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/2def30347ac5afb5923816dec2c1803d619b1d41", "committedDate": "2020-06-03T12:53:54Z", "message": "reduce redundant code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac6af757179eee9c5d40354e382d9f66cf343f4a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ac6af757179eee9c5d40354e382d9f66cf343f4a", "committedDate": "2020-06-03T12:55:30Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzNTI4MTMw", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-423528130", "createdAt": "2020-06-03T13:02:14Z", "commit": {"oid": "ac6af757179eee9c5d40354e382d9f66cf343f4a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzowMjoxNFrOGeawew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzowMjoyN1rOGeaxDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0ODg1OQ==", "bodyText": "Would it be better to call it SeataConfigurationCacheProxy? Or you think of a better name.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434548859", "createdAt": "2020-06-03T13:02:14Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationChangeListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac6af757179eee9c5d40354e382d9f66cf343f4a"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0OTAwNQ==", "bodyText": "Would it be better to call it proxy? Or you think of a better name.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434549005", "createdAt": "2020-06-03T13:02:27Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new CopyOnWriteArraySet<>();\n+\n+    public Configuration provide(Configuration originalConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac6af757179eee9c5d40354e382d9f66cf343f4a"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dabc8d64ca2f57672746bd64324173644335d3d", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1dabc8d64ca2f57672746bd64324173644335d3d", "committedDate": "2020-06-04T13:25:05Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e10c41335f64ce9586617f55b0b367cc9ac7d2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/50e10c41335f64ce9586617f55b0b367cc9ac7d2", "committedDate": "2020-06-04T13:41:11Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "141d3617bbc51841d9e68956aca52e62f436e5e4", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/141d3617bbc51841d9e68956aca52e62f436e5e4", "committedDate": "2020-06-05T03:20:38Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDIwNzUz", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-425420753", "createdAt": "2020-06-05T15:49:05Z", "commit": {"oid": "141d3617bbc51841d9e68956aca52e62f436e5e4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0OTowNlrOGfz7cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0OTowNlrOGfz7cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwOTg0MA==", "bodyText": "Since addConfigListener uses synchronized block, just use HashSet here.", "url": "https://github.com/seata/seata/pull/2611#discussion_r436009840", "createdAt": "2020-06-05T15:49:06Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "141d3617bbc51841d9e68956aca52e62f436e5e4"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "678d3be7631ad2356a7ace770b14854d19e156a2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/678d3be7631ad2356a7ace770b14854d19e156a2", "committedDate": "2020-06-05T16:35:15Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6716fce79362225edc13ea67eea3e0678a5b043", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f6716fce79362225edc13ea67eea3e0678a5b043", "committedDate": "2020-06-06T05:00:24Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b9ef30c479a901cff13394b9e3dc1625b3a4ccf", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1b9ef30c479a901cff13394b9e3dc1625b3a4ccf", "committedDate": "2020-06-06T06:42:55Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f63461f7fe4e7410634e3ec8bac27af821ecd918", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f63461f7fe4e7410634e3ec8bac27af821ecd918", "committedDate": "2020-06-07T15:21:16Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4", "committedDate": "2020-06-08T02:47:17Z", "message": "bug fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NzQ3NjU4", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-428747658", "createdAt": "2020-06-11T09:33:59Z", "commit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozMzo1OVrOGiVzkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo0NzowM1rOGiWPow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MjAzMw==", "bodyText": "just hashMap.", "url": "https://github.com/seata/seata/pull/2611#discussion_r438662033", "createdAt": "2020-06-11T09:33:59Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MzA1NQ==", "bodyText": "For code elegance may use foreach would be better.", "url": "https://github.com/seata/seata/pull/2611#discussion_r438663055", "createdAt": "2020-06-11T09:35:49Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =\n+        new ConcurrentHashMap<>();\n+\n+    public static void addConfigListener(String dataId, ConfigurationChangeListener... listeners) {\n+        if (StringUtils.isBlank(dataId)) {\n+            return;\n+        }\n+        synchronized (ConfigurationCache.class) {\n+            if (!LISTENER_KEYS.contains(dataId)) {\n+                ConfigurationFactory.getInstance().addConfigListener(dataId, getInstance());\n+                LISTENER_KEYS.add(dataId);\n+            }\n+            if (null != listeners && listeners.length > 0) {\n+                HashSet<ConfigurationChangeListener> listenerHashSet = null;\n+                try {\n+                    listenerHashSet = getInstance().configListenersMap.get(dataId);\n+                    if (CollectionUtils.isEmpty(listenerHashSet)) {\n+                        listenerHashSet = new HashSet<>();\n+                    }\n+                    for (int i = 0; i < listeners.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2OTIxOQ==", "bodyText": "if (null != listeners && listeners.length > 0) {\n                HashSet<ConfigurationChangeListener> listenerHashSet =\n                    getInstance().configListenersMap.computeIfAbsent(dataId, k -> new HashSet<>());\n                if (CollectionUtils.isEmpty(listenerHashSet)) {\n                    listenerHashSet = new HashSet<>();\n                }\n                for (ConfigurationChangeListener listener : listeners) {\n                    ConfigurationChangeListener listener = listeners[i];\n                    if (!listenerHashSet.contains(listener)) {\n                        listenerHashSet.add(listener);\n                        ConfigurationFactory.getInstance().addConfigListener(dataId, listener);\n                    }\n                }\n            }", "url": "https://github.com/seata/seata/pull/2611#discussion_r438669219", "createdAt": "2020-06-11T09:47:03Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =\n+        new ConcurrentHashMap<>();\n+\n+    public static void addConfigListener(String dataId, ConfigurationChangeListener... listeners) {\n+        if (StringUtils.isBlank(dataId)) {\n+            return;\n+        }\n+        synchronized (ConfigurationCache.class) {\n+            if (!LISTENER_KEYS.contains(dataId)) {\n+                ConfigurationFactory.getInstance().addConfigListener(dataId, getInstance());\n+                LISTENER_KEYS.add(dataId);\n+            }\n+            if (null != listeners && listeners.length > 0) {\n+                HashSet<ConfigurationChangeListener> listenerHashSet = null;\n+                try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "originalPosition": 55}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1f83df63529ca45b802cbb0862b517d5fe4167a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f1f83df63529ca45b802cbb0862b517d5fe4167a", "committedDate": "2020-06-11T14:06:34Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4OTY5ODI5", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-428969829", "createdAt": "2020-06-11T14:29:38Z", "commit": {"oid": "f1f83df63529ca45b802cbb0862b517d5fe4167a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c38605a34f5f2b8a391e06c57b4b82f2e3475b81", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c38605a34f5f2b8a391e06c57b4b82f2e3475b81", "committedDate": "2020-06-11T14:36:59Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/08f79b559c5c2186a3660651ca55a05cd03f56c8", "committedDate": "2020-06-12T03:22:54Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTM1OTIy", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-430135922", "createdAt": "2020-06-13T12:25:03Z", "commit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoyNTowM1rOGjXUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoyNTowM1rOGjXUFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNTMxOA==", "bodyText": "check the code logic.", "url": "https://github.com/seata/seata/pull/2611#discussion_r439735318", "createdAt": "2020-06-13T12:25:03Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +111,43 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache = ConfigurationCache.getInstance().proxy(configuration);\n+            } else {\n+                configurationCache = ConfigurationCache.getInstance().proxy(configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b949556aa3e3aac3258df28e5c75371dbf2cacb", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/4b949556aa3e3aac3258df28e5c75371dbf2cacb", "committedDate": "2020-06-13T12:33:49Z", "message": "bug fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwMTQxNTc4", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-430141578", "createdAt": "2020-06-13T14:03:27Z", "commit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDowMzoyOFrOGjXsVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDowNToxNlrOGjXs3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTUyNA==", "bodyText": "why delete disable process logic?", "url": "https://github.com/seata/seata/pull/2611#discussion_r439741524", "createdAt": "2020-06-13T14:03:28Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -195,62 +235,23 @@ public TransactionInfo getTransactionInfo() {\n                     throw new ShouldNeverHappenException(String.format(\"Unknown TransactionalExecutor.Code: %s\", code));\n             }\n         } finally {\n+            final boolean degradeCheck = ConfigurationFactory.getInstance()\n+                .getBoolean(ConfigurationKeys.CLIENT_DEGRADE_CHECK, DEFAULT_TM_DEGRADE_CHECK);\n             if (degradeCheck) {\n                 onDegradeCheck(succeed);\n             }\n         }\n     }\n \n-    public <T extends Annotation> T getAnnotation(Method method, Class<?> targetClass, Class<T> annotationClass) {\n-        return Optional.ofNullable(method).map(m -> m.getAnnotation(annotationClass))\n-            .orElse(Optional.ofNullable(targetClass).map(t -> t.getAnnotation(annotationClass)).orElse(null));\n-    }\n-\n-    private String formatMethod(Method method) {\n-        StringBuilder sb = new StringBuilder(method.getName()).append(\"(\");\n-\n-        Class<?>[] params = method.getParameterTypes();\n-        int in = 0;\n-        for (Class<?> clazz : params) {\n-            sb.append(clazz.getName());\n-            if (++in < params.length) {\n-                sb.append(\", \");\n-            }\n-        }\n-        return sb.append(\")\").toString();\n-    }\n-\n     @Override\n     public void onChangeEvent(ConfigurationChangeEvent event) {\n-        if (ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION.equals(event.getDataId())) {\n-            LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n-                disable, event.getNewValue());\n-            disable = Boolean.parseBoolean(event.getNewValue().trim());\n-        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n-            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n-            if (!degradeCheck) {\n+        if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            if (!Boolean.parseBoolean(event.getNewValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTU5NQ==", "bodyText": "Why local variables?", "url": "https://github.com/seata/seata/pull/2611#discussion_r439741595", "createdAt": "2020-06-13T14:04:34Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -107,6 +136,10 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n             final GlobalTransactional globalTransactionalAnnotation =\n                 getAnnotation(method, targetClass, GlobalTransactional.class);\n             final GlobalLock globalLockAnnotation = getAnnotation(method, targetClass, GlobalLock.class);\n+            final boolean disable = ConfigurationFactory.getInstance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTY2MA==", "bodyText": "What happens if the disable configuration item does not exist?", "url": "https://github.com/seata/seata/pull/2611#discussion_r439741660", "createdAt": "2020-06-13T14:05:16Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -107,6 +136,10 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n             final GlobalTransactional globalTransactionalAnnotation =\n                 getAnnotation(method, targetClass, GlobalTransactional.class);\n             final GlobalLock globalLockAnnotation = getAnnotation(method, targetClass, GlobalLock.class);\n+            final boolean disable = ConfigurationFactory.getInstance()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTU5NQ=="}, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6aae26fbc6f0ad19abbc68feeaf4be736b737a5b", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/6aae26fbc6f0ad19abbc68feeaf4be736b737a5b", "committedDate": "2020-06-17T04:20:17Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdee0cc5ab977db3294b8c403d6e1ea974c6c51f", "author": {"user": {"login": "slievrly", "name": "jimin"}}, "url": "https://github.com/seata/seata/commit/bdee0cc5ab977db3294b8c403d6e1ea974c6c51f", "committedDate": "2020-06-18T03:23:54Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1fc7880e650767e91a0c59822494ad86eb4ea6f", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a1fc7880e650767e91a0c59822494ad86eb4ea6f", "committedDate": "2020-06-19T14:44:10Z", "message": "Merge branch 'develop' into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11c5815efa64fc783674ef9806b344473ae5fe8a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/11c5815efa64fc783674ef9806b344473ae5fe8a", "committedDate": "2020-06-21T11:28:18Z", "message": "rollback code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a5e33789ca32c9444aee906a30868d60db2086a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0a5e33789ca32c9444aee906a30868d60db2086a", "committedDate": "2020-06-21T11:29:02Z", "message": "Merge branch 'add_config_cache' of github.com:a364176773/seata into add_config_cache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f20658b31dd1935f8cea4eac7c1b46f701a75345", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f20658b31dd1935f8cea4eac7c1b46f701a75345", "committedDate": "2020-06-21T11:33:03Z", "message": "rollback code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87259654adff3926318bc713351a3f8387adcb85", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/87259654adff3926318bc713351a3f8387adcb85", "committedDate": "2020-06-21T11:38:20Z", "message": "formatting code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTc0NjIy", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-434574622", "createdAt": "2020-06-22T02:52:43Z", "commit": {"oid": "87259654adff3926318bc713351a3f8387adcb85"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTc3ODAy", "url": "https://github.com/seata/seata/pull/2611#pullrequestreview-434577802", "createdAt": "2020-06-22T03:07:12Z", "commit": {"oid": "87259654adff3926318bc713351a3f8387adcb85"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3931, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}