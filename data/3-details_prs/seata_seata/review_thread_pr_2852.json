{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDMwNTQ5", "number": 2852, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNDoyNDoyM1rOENd5cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTo1NzozN1rOENnC7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTU2Nzg1OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ScopeBeansScannerExcluder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNDoyNDoyM1rOGwKSrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNTowMzo0MVrOGwKeLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1MzQ1NQ==", "bodyText": "Please define constants for those names.", "url": "https://github.com/seata/seata/pull/2852#discussion_r453153455", "createdAt": "2020-07-11T04:24:23Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ScopeBeansScannerExcluder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.scannerexcluders;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.spring.annotation.GlobalLock;\n+import io.seata.spring.annotation.GlobalTransactionScanner;\n+import io.seata.spring.annotation.GlobalTransactional;\n+import io.seata.spring.annotation.ScannerExcluder;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.scope.ScopedProxyFactoryBean;\n+import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Scope scanner excluder.\n+ *\n+ * @author wang.liang\n+ */\n+@LoadLevel(name = \"ScopeBeans\", order = 200)\n+public class ScopeBeansScannerExcluder implements ScannerExcluder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScopeBeansScannerExcluder.class);\n+    private static final Set<String> EXCLUDE_SCOPE_SET = Collections.synchronizedSet(new HashSet<>());\n+\n+    static {\n+        EXCLUDE_SCOPE_SET.add(\"request\");\n+        EXCLUDE_SCOPE_SET.add(\"session\");\n+        EXCLUDE_SCOPE_SET.add(\"step\");\n+        EXCLUDE_SCOPE_SET.add(\"job\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d85da94ec076ddc3efc8ab2f3eb3cec5cafc79"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NjM5OA==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2852#discussion_r453156398", "createdAt": "2020-07-11T05:03:41Z", "author": {"login": "wangliang181230"}, "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ScopeBeansScannerExcluder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.scannerexcluders;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.spring.annotation.GlobalLock;\n+import io.seata.spring.annotation.GlobalTransactionScanner;\n+import io.seata.spring.annotation.GlobalTransactional;\n+import io.seata.spring.annotation.ScannerExcluder;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.scope.ScopedProxyFactoryBean;\n+import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Scope scanner excluder.\n+ *\n+ * @author wang.liang\n+ */\n+@LoadLevel(name = \"ScopeBeans\", order = 200)\n+public class ScopeBeansScannerExcluder implements ScannerExcluder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScopeBeansScannerExcluder.class);\n+    private static final Set<String> EXCLUDE_SCOPE_SET = Collections.synchronizedSet(new HashSet<>());\n+\n+    static {\n+        EXCLUDE_SCOPE_SET.add(\"request\");\n+        EXCLUDE_SCOPE_SET.add(\"session\");\n+        EXCLUDE_SCOPE_SET.add(\"step\");\n+        EXCLUDE_SCOPE_SET.add(\"job\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1MzQ1NQ=="}, "originalCommit": {"oid": "c4d85da94ec076ddc3efc8ab2f3eb3cec5cafc79"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTU3MDgxOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ScopeBeansScannerExcluder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNDoyODozMFrOGwKUEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNTowMzozMlrOGwKeIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1MzgxMA==", "bodyText": "Missing '@OverRide'.", "url": "https://github.com/seata/seata/pull/2852#discussion_r453153810", "createdAt": "2020-07-11T04:28:30Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ScopeBeansScannerExcluder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.scannerexcluders;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.spring.annotation.GlobalLock;\n+import io.seata.spring.annotation.GlobalTransactionScanner;\n+import io.seata.spring.annotation.GlobalTransactional;\n+import io.seata.spring.annotation.ScannerExcluder;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.scope.ScopedProxyFactoryBean;\n+import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Scope scanner excluder.\n+ *\n+ * @author wang.liang\n+ */\n+@LoadLevel(name = \"ScopeBeans\", order = 200)\n+public class ScopeBeansScannerExcluder implements ScannerExcluder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScopeBeansScannerExcluder.class);\n+    private static final Set<String> EXCLUDE_SCOPE_SET = Collections.synchronizedSet(new HashSet<>());\n+\n+    static {\n+        EXCLUDE_SCOPE_SET.add(\"request\");\n+        EXCLUDE_SCOPE_SET.add(\"session\");\n+        EXCLUDE_SCOPE_SET.add(\"step\");\n+        EXCLUDE_SCOPE_SET.add(\"job\");\n+    }\n+\n+    /**\n+     * Add more exclude scopes.\n+     *\n+     * @param scopeNames the scope names\n+     */\n+    public static void addExcludeScopes(String... scopeNames) {\n+        if (ArrayUtils.isNotEmpty(scopeNames)) {\n+            for (String scopeName : scopeNames) {\n+                if (StringUtils.isNotBlank(scopeName)) {\n+                    EXCLUDE_SCOPE_SET.add(scopeName.trim().toLowerCase());\n+                }\n+            }\n+        }\n+    }\n+\n+\n+    public boolean isMatch(Object bean, String beanName, BeanDefinition beanDefinition) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d85da94ec076ddc3efc8ab2f3eb3cec5cafc79"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NjM4Nw==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2852#discussion_r453156387", "createdAt": "2020-07-11T05:03:32Z", "author": {"login": "wangliang181230"}, "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ScopeBeansScannerExcluder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.scannerexcluders;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.spring.annotation.GlobalLock;\n+import io.seata.spring.annotation.GlobalTransactionScanner;\n+import io.seata.spring.annotation.GlobalTransactional;\n+import io.seata.spring.annotation.ScannerExcluder;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.scope.ScopedProxyFactoryBean;\n+import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Scope scanner excluder.\n+ *\n+ * @author wang.liang\n+ */\n+@LoadLevel(name = \"ScopeBeans\", order = 200)\n+public class ScopeBeansScannerExcluder implements ScannerExcluder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScopeBeansScannerExcluder.class);\n+    private static final Set<String> EXCLUDE_SCOPE_SET = Collections.synchronizedSet(new HashSet<>());\n+\n+    static {\n+        EXCLUDE_SCOPE_SET.add(\"request\");\n+        EXCLUDE_SCOPE_SET.add(\"session\");\n+        EXCLUDE_SCOPE_SET.add(\"step\");\n+        EXCLUDE_SCOPE_SET.add(\"job\");\n+    }\n+\n+    /**\n+     * Add more exclude scopes.\n+     *\n+     * @param scopeNames the scope names\n+     */\n+    public static void addExcludeScopes(String... scopeNames) {\n+        if (ArrayUtils.isNotEmpty(scopeNames)) {\n+            for (String scopeName : scopeNames) {\n+                if (StringUtils.isNotBlank(scopeName)) {\n+                    EXCLUDE_SCOPE_SET.add(scopeName.trim().toLowerCase());\n+                }\n+            }\n+        }\n+    }\n+\n+\n+    public boolean isMatch(Object bean, String beanName, BeanDefinition beanDefinition) throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1MzgxMA=="}, "originalCommit": {"oid": "c4d85da94ec076ddc3efc8ab2f3eb3cec5cafc79"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTU3MDk3OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ConfigBeansScannerExcluder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNDoyODo0MVrOGwKUJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNTowMzoyMVrOGwKeEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1MzgzMA==", "bodyText": "Missing '@OverRide'.", "url": "https://github.com/seata/seata/pull/2852#discussion_r453153830", "createdAt": "2020-07-11T04:28:41Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ConfigBeansScannerExcluder.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.scannerexcluders;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.spring.annotation.ScannerExcluder;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+\n+/**\n+ * Config scanner excluder.\n+ *\n+ * @author wang.liang\n+ */\n+@LoadLevel(name = \"ConfigBeans\", order = 100)\n+public class ConfigBeansScannerExcluder implements ScannerExcluder {\n+\n+    public boolean isMatch(Object bean, String beanName, BeanDefinition beanDefinition) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d85da94ec076ddc3efc8ab2f3eb3cec5cafc79"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NjM3MA==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2852#discussion_r453156370", "createdAt": "2020-07-11T05:03:21Z", "author": {"login": "wangliang181230"}, "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ConfigBeansScannerExcluder.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.scannerexcluders;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.spring.annotation.ScannerExcluder;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+\n+/**\n+ * Config scanner excluder.\n+ *\n+ * @author wang.liang\n+ */\n+@LoadLevel(name = \"ConfigBeans\", order = 100)\n+public class ConfigBeansScannerExcluder implements ScannerExcluder {\n+\n+    public boolean isMatch(Object bean, String beanName, BeanDefinition beanDefinition) throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1MzgzMA=="}, "originalCommit": {"oid": "c4d85da94ec076ddc3efc8ab2f3eb3cec5cafc79"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTU3MjUwOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ScopeBeansScannerExcluder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNDozMTowMFrOGwKU3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwNTowMzoxNVrOGwKeEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDAxMg==", "bodyText": "Please don't write comments at the tail of line.Please check all places.", "url": "https://github.com/seata/seata/pull/2852#discussion_r453154012", "createdAt": "2020-07-11T04:31:00Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ScopeBeansScannerExcluder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.scannerexcluders;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.spring.annotation.GlobalLock;\n+import io.seata.spring.annotation.GlobalTransactionScanner;\n+import io.seata.spring.annotation.GlobalTransactional;\n+import io.seata.spring.annotation.ScannerExcluder;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.scope.ScopedProxyFactoryBean;\n+import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Scope scanner excluder.\n+ *\n+ * @author wang.liang\n+ */\n+@LoadLevel(name = \"ScopeBeans\", order = 200)\n+public class ScopeBeansScannerExcluder implements ScannerExcluder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScopeBeansScannerExcluder.class);\n+    private static final Set<String> EXCLUDE_SCOPE_SET = Collections.synchronizedSet(new HashSet<>());\n+\n+    static {\n+        EXCLUDE_SCOPE_SET.add(\"request\");\n+        EXCLUDE_SCOPE_SET.add(\"session\");\n+        EXCLUDE_SCOPE_SET.add(\"step\");\n+        EXCLUDE_SCOPE_SET.add(\"job\");\n+    }\n+\n+    /**\n+     * Add more exclude scopes.\n+     *\n+     * @param scopeNames the scope names\n+     */\n+    public static void addExcludeScopes(String... scopeNames) {\n+        if (ArrayUtils.isNotEmpty(scopeNames)) {\n+            for (String scopeName : scopeNames) {\n+                if (StringUtils.isNotBlank(scopeName)) {\n+                    EXCLUDE_SCOPE_SET.add(scopeName.trim().toLowerCase());\n+                }\n+            }\n+        }\n+    }\n+\n+\n+    public boolean isMatch(Object bean, String beanName, BeanDefinition beanDefinition) throws Throwable {\n+        if (bean instanceof ScopedProxyFactoryBean) {\n+            return true; // exclude", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4d85da94ec076ddc3efc8ab2f3eb3cec5cafc79"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NjM2OQ==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2852#discussion_r453156369", "createdAt": "2020-07-11T05:03:15Z", "author": {"login": "wangliang181230"}, "path": "spring/src/main/java/io/seata/spring/annotation/scannerexcluders/ScopeBeansScannerExcluder.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.scannerexcluders;\n+\n+import io.seata.common.loader.LoadLevel;\n+import io.seata.spring.annotation.GlobalLock;\n+import io.seata.spring.annotation.GlobalTransactionScanner;\n+import io.seata.spring.annotation.GlobalTransactional;\n+import io.seata.spring.annotation.ScannerExcluder;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.scope.ScopedProxyFactoryBean;\n+import org.springframework.beans.factory.annotation.AnnotatedBeanDefinition;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.Scope;\n+import org.springframework.core.type.AnnotatedTypeMetadata;\n+import org.springframework.util.MultiValueMap;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+/**\n+ * Scope scanner excluder.\n+ *\n+ * @author wang.liang\n+ */\n+@LoadLevel(name = \"ScopeBeans\", order = 200)\n+public class ScopeBeansScannerExcluder implements ScannerExcluder {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ScopeBeansScannerExcluder.class);\n+    private static final Set<String> EXCLUDE_SCOPE_SET = Collections.synchronizedSet(new HashSet<>());\n+\n+    static {\n+        EXCLUDE_SCOPE_SET.add(\"request\");\n+        EXCLUDE_SCOPE_SET.add(\"session\");\n+        EXCLUDE_SCOPE_SET.add(\"step\");\n+        EXCLUDE_SCOPE_SET.add(\"job\");\n+    }\n+\n+    /**\n+     * Add more exclude scopes.\n+     *\n+     * @param scopeNames the scope names\n+     */\n+    public static void addExcludeScopes(String... scopeNames) {\n+        if (ArrayUtils.isNotEmpty(scopeNames)) {\n+            for (String scopeName : scopeNames) {\n+                if (StringUtils.isNotBlank(scopeName)) {\n+                    EXCLUDE_SCOPE_SET.add(scopeName.trim().toLowerCase());\n+                }\n+            }\n+        }\n+    }\n+\n+\n+    public boolean isMatch(Object bean, String beanName, BeanDefinition beanDefinition) throws Throwable {\n+        if (bean instanceof ScopedProxyFactoryBean) {\n+            return true; // exclude", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzE1NDAxMg=="}, "originalCommit": {"oid": "c4d85da94ec076ddc3efc8ab2f3eb3cec5cafc79"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzA2NDE5OnYy", "diffSide": "RIGHT", "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTo1NDowM1rOGwVQ-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMToxNzo0MVrOGwYusg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzMzI0MQ==", "bodyText": "Specifies beans that won't be scanned in the GlobalTransactionScanner", "url": "https://github.com/seata/seata/pull/2852#discussion_r453333241", "createdAt": "2020-07-12T15:54:03Z", "author": {"login": "xingfudeshi"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java", "diffHunk": "@@ -47,6 +47,10 @@\n      * Whether use JDK proxy instead of CGLIB proxy\n      */\n     private boolean useJdkProxy = false;\n+    /**\n+     * Specifies which bean do not scanner in the GlobalTransactionScanner", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e71d8b92e651196bc7e9d5f031ca7ce768a2ab"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5MDAwMg==", "bodyText": "done.", "url": "https://github.com/seata/seata/pull/2852#discussion_r453390002", "createdAt": "2020-07-13T01:17:41Z", "author": {"login": "wangliang181230"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java", "diffHunk": "@@ -47,6 +47,10 @@\n      * Whether use JDK proxy instead of CGLIB proxy\n      */\n     private boolean useJdkProxy = false;\n+    /**\n+     * Specifies which bean do not scanner in the GlobalTransactionScanner", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzMzI0MQ=="}, "originalCommit": {"oid": "c0e71d8b92e651196bc7e9d5f031ca7ce768a2ab"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNzA2NjcxOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMlQxNTo1NzozN1rOGwVSQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwMjo0MDoxNlrOGwZs-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzMzU2OQ==", "bodyText": "Please use {}.", "url": "https://github.com/seata/seata/pull/2852#discussion_r453333569", "createdAt": "2020-07-12T15:57:37Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "diffHunk": "@@ -200,9 +211,30 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n         }\n         try {\n             synchronized (PROXYED_SET) {\n-                if (PROXYED_SET.contains(beanName)) {\n+                if (PROXYED_SET.contains(beanName) || EXCLUDE_SET.contains(beanName)) {\n                     return bean;\n                 }\n+\n+                //execute the excluders\n+                if (!SCANNER_EXCLUDER_SET.isEmpty()) {\n+                    try {\n+                        BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);\n+                        for (ScannerExcluder excluder : SCANNER_EXCLUDER_SET) {\n+                            try {\n+                                if (excluder.isMatch(bean, beanName, beanDefinition)) {\n+                                    return bean;\n+                                }\n+                            } catch (Throwable e) {\n+                                String errorMsg = String.format(\"Do check need exclude failed: beanName=%s, excluder=%s\",\n+                                        beanName, excluder.getClass().getSimpleName());\n+                                LOGGER.error(errorMsg, e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0e71d8b92e651196bc7e9d5f031ca7ce768a2ab"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzM5MTY2MQ==", "bodyText": "There is no method org.slf4j.Logger.error(String msg, Throwable t, Object... arguments);. Only method org.slf4j.Logger.error(String msg, Throwable t); can be used.", "url": "https://github.com/seata/seata/pull/2852#discussion_r453391661", "createdAt": "2020-07-13T01:27:33Z", "author": {"login": "wangliang181230"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "diffHunk": "@@ -200,9 +211,30 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n         }\n         try {\n             synchronized (PROXYED_SET) {\n-                if (PROXYED_SET.contains(beanName)) {\n+                if (PROXYED_SET.contains(beanName) || EXCLUDE_SET.contains(beanName)) {\n                     return bean;\n                 }\n+\n+                //execute the excluders\n+                if (!SCANNER_EXCLUDER_SET.isEmpty()) {\n+                    try {\n+                        BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);\n+                        for (ScannerExcluder excluder : SCANNER_EXCLUDER_SET) {\n+                            try {\n+                                if (excluder.isMatch(bean, beanName, beanDefinition)) {\n+                                    return bean;\n+                                }\n+                            } catch (Throwable e) {\n+                                String errorMsg = String.format(\"Do check need exclude failed: beanName=%s, excluder=%s\",\n+                                        beanName, excluder.getClass().getSimpleName());\n+                                LOGGER.error(errorMsg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzMzU2OQ=="}, "originalCommit": {"oid": "c0e71d8b92e651196bc7e9d5f031ca7ce768a2ab"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwMjk5MA==", "bodyText": "", "url": "https://github.com/seata/seata/pull/2852#discussion_r453402990", "createdAt": "2020-07-13T02:26:06Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "diffHunk": "@@ -200,9 +211,30 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n         }\n         try {\n             synchronized (PROXYED_SET) {\n-                if (PROXYED_SET.contains(beanName)) {\n+                if (PROXYED_SET.contains(beanName) || EXCLUDE_SET.contains(beanName)) {\n                     return bean;\n                 }\n+\n+                //execute the excluders\n+                if (!SCANNER_EXCLUDER_SET.isEmpty()) {\n+                    try {\n+                        BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);\n+                        for (ScannerExcluder excluder : SCANNER_EXCLUDER_SET) {\n+                            try {\n+                                if (excluder.isMatch(bean, beanName, beanDefinition)) {\n+                                    return bean;\n+                                }\n+                            } catch (Throwable e) {\n+                                String errorMsg = String.format(\"Do check need exclude failed: beanName=%s, excluder=%s\",\n+                                        beanName, excluder.getClass().getSimpleName());\n+                                LOGGER.error(errorMsg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzMzU2OQ=="}, "originalCommit": {"oid": "c0e71d8b92e651196bc7e9d5f031ca7ce768a2ab"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwNDQwMA==", "bodyText": "Oh, it can be used like this. I've learned it. Thank you.", "url": "https://github.com/seata/seata/pull/2852#discussion_r453404400", "createdAt": "2020-07-13T02:32:54Z", "author": {"login": "wangliang181230"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "diffHunk": "@@ -200,9 +211,30 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n         }\n         try {\n             synchronized (PROXYED_SET) {\n-                if (PROXYED_SET.contains(beanName)) {\n+                if (PROXYED_SET.contains(beanName) || EXCLUDE_SET.contains(beanName)) {\n                     return bean;\n                 }\n+\n+                //execute the excluders\n+                if (!SCANNER_EXCLUDER_SET.isEmpty()) {\n+                    try {\n+                        BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);\n+                        for (ScannerExcluder excluder : SCANNER_EXCLUDER_SET) {\n+                            try {\n+                                if (excluder.isMatch(bean, beanName, beanDefinition)) {\n+                                    return bean;\n+                                }\n+                            } catch (Throwable e) {\n+                                String errorMsg = String.format(\"Do check need exclude failed: beanName=%s, excluder=%s\",\n+                                        beanName, excluder.getClass().getSimpleName());\n+                                LOGGER.error(errorMsg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzMzU2OQ=="}, "originalCommit": {"oid": "c0e71d8b92e651196bc7e9d5f031ca7ce768a2ab"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQwNTk0NQ==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2852#discussion_r453405945", "createdAt": "2020-07-13T02:40:16Z", "author": {"login": "wangliang181230"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "diffHunk": "@@ -200,9 +211,30 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n         }\n         try {\n             synchronized (PROXYED_SET) {\n-                if (PROXYED_SET.contains(beanName)) {\n+                if (PROXYED_SET.contains(beanName) || EXCLUDE_SET.contains(beanName)) {\n                     return bean;\n                 }\n+\n+                //execute the excluders\n+                if (!SCANNER_EXCLUDER_SET.isEmpty()) {\n+                    try {\n+                        BeanDefinition beanDefinition = beanFactory.getBeanDefinition(beanName);\n+                        for (ScannerExcluder excluder : SCANNER_EXCLUDER_SET) {\n+                            try {\n+                                if (excluder.isMatch(bean, beanName, beanDefinition)) {\n+                                    return bean;\n+                                }\n+                            } catch (Throwable e) {\n+                                String errorMsg = String.format(\"Do check need exclude failed: beanName=%s, excluder=%s\",\n+                                        beanName, excluder.getClass().getSimpleName());\n+                                LOGGER.error(errorMsg, e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzMzMzU2OQ=="}, "originalCommit": {"oid": "c0e71d8b92e651196bc7e9d5f031ca7ce768a2ab"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1488, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}