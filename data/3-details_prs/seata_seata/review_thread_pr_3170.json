{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTIxODUw", "number": 3170, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzozMTo0MlrOEsQjJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMzoyNjozNVrOEsdbwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQzOTQyOnYy", "diffSide": "LEFT", "path": "core/src/main/java/io/seata/core/rpc/ShutdownHook.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzozMTo0MlrOHfd-9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNzozMTo0MlrOHfd-9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1OTE1Ng==", "bodyText": "use PriorityQueue to replace TreeSet will solve this problem once and forever. No need to add a \"seqId\" to fix the probem which is actually caused by TreeSet.", "url": "https://github.com/seata/seata/pull/3170#discussion_r502759156", "createdAt": "2020-10-10T07:31:42Z", "author": {"login": "selfishlover"}, "path": "core/src/main/java/io/seata/core/rpc/ShutdownHook.java", "diffHunk": "@@ -91,35 +91,63 @@ public static void removeRuntimeShutdownHook() {\n \n     private static class DisposablePriorityWrapper implements Comparable<DisposablePriorityWrapper>, Disposable {\n \n+        private static AtomicLong seq = new AtomicLong();\n+\n         private Disposable disposable;\n \n         private int priority;\n \n+        private long seqId;\n+\n         public DisposablePriorityWrapper(Disposable disposable, int priority) {\n             this.disposable = disposable;\n             this.priority = priority;\n+            this.seqId = seq.incrementAndGet();\n         }\n \n         @Override\n         public int compareTo(DisposablePriorityWrapper disposablePriorityWrapper) {\n-            return priority - disposablePriorityWrapper.priority;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81c1c2a4021e754328e0f6f6f1c878099631448f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDU0NzU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/ShutdownHook.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMzoyNDoyOFrOHft4VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoxMDo1OFrOHgAZ1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAxOTYwNQ==", "bodyText": "Long.compare(x, y) ?", "url": "https://github.com/seata/seata/pull/3170#discussion_r503019605", "createdAt": "2020-10-12T03:24:28Z", "author": {"login": "jsbxyyx"}, "path": "core/src/main/java/io/seata/core/rpc/ShutdownHook.java", "diffHunk": "@@ -91,35 +91,63 @@ public static void removeRuntimeShutdownHook() {\n \n     private static class DisposablePriorityWrapper implements Comparable<DisposablePriorityWrapper>, Disposable {\n \n+        private static AtomicLong seq = new AtomicLong();\n+\n         private Disposable disposable;\n \n         private int priority;\n \n+        private long seqId;\n+\n         public DisposablePriorityWrapper(Disposable disposable, int priority) {\n             this.disposable = disposable;\n             this.priority = priority;\n+            this.seqId = seq.incrementAndGet();\n         }\n \n         @Override\n         public int compareTo(DisposablePriorityWrapper disposablePriorityWrapper) {\n-            return priority - disposablePriorityWrapper.priority;\n+            int cmp = priority - disposablePriorityWrapper.priority;\n+            if (cmp == 0) {\n+                if (seqId > disposablePriorityWrapper.seqId) {\n+                    cmp = 1;\n+                } else if (seqId < disposablePriorityWrapper.seqId) {\n+                    cmp = -1;\n+                } else {\n+                    cmp = 0;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1659f28c66124af2a6ce7590b944bdc5484c09d1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMzA5NA==", "bodyText": "+1", "url": "https://github.com/seata/seata/pull/3170#discussion_r503323094", "createdAt": "2020-10-12T14:10:58Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/rpc/ShutdownHook.java", "diffHunk": "@@ -91,35 +91,63 @@ public static void removeRuntimeShutdownHook() {\n \n     private static class DisposablePriorityWrapper implements Comparable<DisposablePriorityWrapper>, Disposable {\n \n+        private static AtomicLong seq = new AtomicLong();\n+\n         private Disposable disposable;\n \n         private int priority;\n \n+        private long seqId;\n+\n         public DisposablePriorityWrapper(Disposable disposable, int priority) {\n             this.disposable = disposable;\n             this.priority = priority;\n+            this.seqId = seq.incrementAndGet();\n         }\n \n         @Override\n         public int compareTo(DisposablePriorityWrapper disposablePriorityWrapper) {\n-            return priority - disposablePriorityWrapper.priority;\n+            int cmp = priority - disposablePriorityWrapper.priority;\n+            if (cmp == 0) {\n+                if (seqId > disposablePriorityWrapper.seqId) {\n+                    cmp = 1;\n+                } else if (seqId < disposablePriorityWrapper.seqId) {\n+                    cmp = -1;\n+                } else {\n+                    cmp = 0;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAxOTYwNQ=="}, "originalCommit": {"oid": "1659f28c66124af2a6ce7590b944bdc5484c09d1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MDU1MDQxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/ShutdownHook.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQwMzoyNjozNVrOHft55w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDoxMDo1NlrOHgAZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMDAwNw==", "bodyText": "Objects.hash(...values)?", "url": "https://github.com/seata/seata/pull/3170#discussion_r503020007", "createdAt": "2020-10-12T03:26:35Z", "author": {"login": "jsbxyyx"}, "path": "core/src/main/java/io/seata/core/rpc/ShutdownHook.java", "diffHunk": "@@ -91,35 +91,63 @@ public static void removeRuntimeShutdownHook() {\n \n     private static class DisposablePriorityWrapper implements Comparable<DisposablePriorityWrapper>, Disposable {\n \n+        private static AtomicLong seq = new AtomicLong();\n+\n         private Disposable disposable;\n \n         private int priority;\n \n+        private long seqId;\n+\n         public DisposablePriorityWrapper(Disposable disposable, int priority) {\n             this.disposable = disposable;\n             this.priority = priority;\n+            this.seqId = seq.incrementAndGet();\n         }\n \n         @Override\n         public int compareTo(DisposablePriorityWrapper disposablePriorityWrapper) {\n-            return priority - disposablePriorityWrapper.priority;\n+            int cmp = priority - disposablePriorityWrapper.priority;\n+            if (cmp == 0) {\n+                if (seqId > disposablePriorityWrapper.seqId) {\n+                    cmp = 1;\n+                } else if (seqId < disposablePriorityWrapper.seqId) {\n+                    cmp = -1;\n+                } else {\n+                    cmp = 0;\n+                }\n+            }\n+            return cmp;\n         }\n \n         @Override\n         public int hashCode() {\n-            return Objects.hashCode(this.priority);\n+            final int prime = 31;\n+            int result = 1;\n+            result = prime * result + priority;\n+            result = prime * result + (int) (seqId ^ (seqId >>> 32));\n+            return result;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1659f28c66124af2a6ce7590b944bdc5484c09d1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzMyMzA3MQ==", "bodyText": "+1", "url": "https://github.com/seata/seata/pull/3170#discussion_r503323071", "createdAt": "2020-10-12T14:10:56Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/rpc/ShutdownHook.java", "diffHunk": "@@ -91,35 +91,63 @@ public static void removeRuntimeShutdownHook() {\n \n     private static class DisposablePriorityWrapper implements Comparable<DisposablePriorityWrapper>, Disposable {\n \n+        private static AtomicLong seq = new AtomicLong();\n+\n         private Disposable disposable;\n \n         private int priority;\n \n+        private long seqId;\n+\n         public DisposablePriorityWrapper(Disposable disposable, int priority) {\n             this.disposable = disposable;\n             this.priority = priority;\n+            this.seqId = seq.incrementAndGet();\n         }\n \n         @Override\n         public int compareTo(DisposablePriorityWrapper disposablePriorityWrapper) {\n-            return priority - disposablePriorityWrapper.priority;\n+            int cmp = priority - disposablePriorityWrapper.priority;\n+            if (cmp == 0) {\n+                if (seqId > disposablePriorityWrapper.seqId) {\n+                    cmp = 1;\n+                } else if (seqId < disposablePriorityWrapper.seqId) {\n+                    cmp = -1;\n+                } else {\n+                    cmp = 0;\n+                }\n+            }\n+            return cmp;\n         }\n \n         @Override\n         public int hashCode() {\n-            return Objects.hashCode(this.priority);\n+            final int prime = 31;\n+            int result = 1;\n+            result = prime * result + priority;\n+            result = prime * result + (int) (seqId ^ (seqId >>> 32));\n+            return result;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzAyMDAwNw=="}, "originalCommit": {"oid": "1659f28c66124af2a6ce7590b944bdc5484c09d1"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1445, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}