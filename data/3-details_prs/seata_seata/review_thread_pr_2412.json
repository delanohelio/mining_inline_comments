{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NjA5NzU3", "number": 2412, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjozMDoxN1rOD33klQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjozNToxOFrOD41rGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5OTA4NzU3OnYy", "diffSide": "LEFT", "path": "server/src/main/java/io/seata/server/storage/db/session/DataBaseSessionManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjozMDoxN1rOGOXn1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMzoyOTo0M1rOGOYbpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMDI3Nw==", "bodyText": "Why remove the override?", "url": "https://github.com/seata/seata/pull/2412#discussion_r417720277", "createdAt": "2020-04-30T02:30:17Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/storage/db/session/DataBaseSessionManager.java", "diffHunk": "@@ -192,17 +191,12 @@ public GlobalSession findGlobalSession(String xid, boolean withBranchSessions) {\n         return transactionStoreManager.readSession(condition);\n     }\n \n-    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af150516446ed2bc6e888162864595bb70e3cd54"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczMzU0Mw==", "bodyText": "thx", "url": "https://github.com/seata/seata/pull/2412#discussion_r417733543", "createdAt": "2020-04-30T03:29:43Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/db/session/DataBaseSessionManager.java", "diffHunk": "@@ -192,17 +191,12 @@ public GlobalSession findGlobalSession(String xid, boolean withBranchSessions) {\n         return transactionStoreManager.readSession(condition);\n     }\n \n-    @Override", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMDI3Nw=="}, "originalCommit": {"oid": "af150516446ed2bc6e888162864595bb70e3cd54"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQzNzE3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/ParameterParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDoxODowMVrOGPBtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDoyMzowN1rOGPBwog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwOTczOA==", "bodyText": "Why let the user config data center id?", "url": "https://github.com/seata/seata/pull/2412#discussion_r418409738", "createdAt": "2020-05-01T04:18:01Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/ParameterParser.java", "diffHunk": "@@ -47,11 +49,13 @@\n \n     private static final int SERVER_DEFAULT_PORT = 8091;\n     private static final String SERVER_DEFAULT_STORE_MODE = \"file\";\n-    private static final int SERVER_DEFAULT_NODE = 1;\n+    private static final Long SERVER_DEFAULT_NODE = ThreadLocalRandom.current().nextLong(32);\n+    private static final Long DATA_CENTER_DEFAULT_ID = ThreadLocalRandom.current().nextLong(32);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxMDY1OA==", "bodyText": "Why let the user config data center id?\n\nclusters can be larger", "url": "https://github.com/seata/seata/pull/2412#discussion_r418410658", "createdAt": "2020-05-01T04:23:07Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/ParameterParser.java", "diffHunk": "@@ -47,11 +49,13 @@\n \n     private static final int SERVER_DEFAULT_PORT = 8091;\n     private static final String SERVER_DEFAULT_STORE_MODE = \"file\";\n-    private static final int SERVER_DEFAULT_NODE = 1;\n+    private static final Long SERVER_DEFAULT_NODE = ThreadLocalRandom.current().nextLong(32);\n+    private static final Long DATA_CENTER_DEFAULT_ID = ThreadLocalRandom.current().nextLong(32);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwOTczOA=="}, "originalCommit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQ4OTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDo1OToyN1rOGPCKvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTowMDo0OFrOGPCLrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNzM0MA==", "bodyText": "You can consider merge workderIdBits and datacenterIdBits. Actually they are same one.", "url": "https://github.com/seata/seata/pull/2412#discussion_r418417340", "createdAt": "2020-05-01T04:59:27Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2015-01-01)\n+     */\n+    private final long twepoch = 1546272000000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 5L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNzU4MA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2412#discussion_r418417580", "createdAt": "2020-05-01T05:00:48Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2015-01-01)\n+     */\n+    private final long twepoch = 1546272000000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 5L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNzM0MA=="}, "originalCommit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMzQ5MDUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTowMDo0MlrOGPCLmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTowMToyOFrOGPCMLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNzU2MA==", "bodyText": "And You can consider adjust the bit of each part, let it more compatible with our project.", "url": "https://github.com/seata/seata/pull/2412#discussion_r418417560", "createdAt": "2020-05-01T05:00:42Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNzcxMQ==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2412#discussion_r418417711", "createdAt": "2020-05-01T05:01:28Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNzU2MA=="}, "originalCommit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODA2MDc0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzo0MTozMlrOGPoRow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDo1NDo1NVrOGPon-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MTY5OQ==", "bodyText": "I think here can use single param instand of arrays.", "url": "https://github.com/seata/seata/pull/2412#discussion_r419041699", "createdAt": "2020-05-03T03:41:32Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2015-01-01)\n+     */\n+    private final long twepoch = 1546272000000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public synchronized long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"Clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        if (lastTimestamp == timestamp) {\n+            sequence = (sequence + 1) & sequenceMask;\n+            if (sequence == 0) {\n+                timestamp = tilNextMillis(lastTimestamp);\n+            }\n+        } else {\n+            sequence = 0L;\n+        }\n+\n+        lastTimestamp = timestamp;\n+        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;\n+    }\n+\n+    /**\n+     * Block until the next millisecond until a new timestamp is obtained\n+     *\n+     * @param lastTimestamp\n+     *            Time of last ID generation\n+     * @return Current timestamp\n+     */\n+    protected long tilNextMillis(long lastTimestamp) {\n+        long timestamp = timeGen();\n+        while (timestamp <= lastTimestamp) {\n+            timestamp = timeGen();\n+        }\n+        return timestamp;\n+    }\n+\n+    /**\n+     * Returns the current time in milliseconds\n+     *\n+     * @return Current time (ms)\n+     */\n+    protected long timeGen() {\n+        return System.currentTimeMillis();\n+    }\n+\n+    public static IdWorker getInstance(Long... ids) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a580d3d8dcc6c576c0c1781197f68ad232dbef"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzQxOA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2412#discussion_r419047418", "createdAt": "2020-05-03T04:54:55Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2015-01-01)\n+     */\n+    private final long twepoch = 1546272000000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public synchronized long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"Clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        if (lastTimestamp == timestamp) {\n+            sequence = (sequence + 1) & sequenceMask;\n+            if (sequence == 0) {\n+                timestamp = tilNextMillis(lastTimestamp);\n+            }\n+        } else {\n+            sequence = 0L;\n+        }\n+\n+        lastTimestamp = timestamp;\n+        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;\n+    }\n+\n+    /**\n+     * Block until the next millisecond until a new timestamp is obtained\n+     *\n+     * @param lastTimestamp\n+     *            Time of last ID generation\n+     * @return Current timestamp\n+     */\n+    protected long tilNextMillis(long lastTimestamp) {\n+        long timestamp = timeGen();\n+        while (timestamp <= lastTimestamp) {\n+            timestamp = timeGen();\n+        }\n+        return timestamp;\n+    }\n+\n+    /**\n+     * Returns the current time in milliseconds\n+     *\n+     * @return Current time (ms)\n+     */\n+    protected long timeGen() {\n+        return System.currentTimeMillis();\n+    }\n+\n+    public static IdWorker getInstance(Long... ids) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MTY5OQ=="}, "originalCommit": {"oid": "48a580d3d8dcc6c576c0c1781197f68ad232dbef"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODA5OTEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/Server.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDozNzo1N1rOGPoihw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDo1ODoxOVrOGPopDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NjAyMw==", "bodyText": "How about change to Idworker.init(parameterParser.getServerNode())", "url": "https://github.com/seata/seata/pull/2412#discussion_r419046023", "createdAt": "2020-05-03T04:37:57Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/Server.java", "diffHunk": "@@ -80,7 +80,8 @@ public static void main(String[] args) throws IOException {\n         // register ShutdownHook\n         ShutdownHook.getInstance().addDisposable(coordinator);\n         ShutdownHook.getInstance().addDisposable(rpcServer);\n-\n+        //IdWorker Instantiate by service node\n+        IdWorker.getInstance(parameterParser.getServerNode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0283ebff48fa3f0a0e358e896d7cf63a30a24d5f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NzY5NA==", "bodyText": "PTAL @l81893521", "url": "https://github.com/seata/seata/pull/2412#discussion_r419047694", "createdAt": "2020-05-03T04:58:19Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/Server.java", "diffHunk": "@@ -80,7 +80,8 @@ public static void main(String[] args) throws IOException {\n         // register ShutdownHook\n         ShutdownHook.getInstance().addDisposable(coordinator);\n         ShutdownHook.getInstance().addDisposable(rpcServer);\n-\n+        //IdWorker Instantiate by service node\n+        IdWorker.getInstance(parameterParser.getServerNode());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NjAyMw=="}, "originalCommit": {"oid": "0283ebff48fa3f0a0e358e896d7cf63a30a24d5f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODU0NTU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMzowOTowOVrOGPr6zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNDo0NDo1N1rOGPsp8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwMTM4OQ==", "bodyText": "reduce lock area", "url": "https://github.com/seata/seata/pull/2412#discussion_r419101389", "createdAt": "2020-05-03T13:09:09Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public synchronized long nextId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bca9b80ccf00183482b53a9683392872d50eb0"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExMzQ1OA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2412#discussion_r419113458", "createdAt": "2020-05-03T14:44:57Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public synchronized long nextId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwMTM4OQ=="}, "originalCommit": {"oid": "b0bca9b80ccf00183482b53a9683392872d50eb0"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODY1OTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNTowNDozMlrOGPs0Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNTowNTozMFrOGPs0rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExNjA2Mg==", "bodyText": "There is no thread safety problem in the return line", "url": "https://github.com/seata/seata/pull/2412#discussion_r419116062", "createdAt": "2020-05-03T15:04:32Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);\n+                }\n+            } else {\n+                sequence = 0L;\n+            }\n+\n+            lastTimestamp = timestamp;\n+            return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExNjIwNA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2412#discussion_r419116204", "createdAt": "2020-05-03T15:05:30Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);\n+                }\n+            } else {\n+                sequence = 0L;\n+            }\n+\n+            lastTimestamp = timestamp;\n+            return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExNjA2Mg=="}, "originalCommit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODY3NDQ5OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/Server.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNToxOTo0MFrOGPs77g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNToxOTo0MFrOGPs77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExODA2Mg==", "bodyText": "use UUIDGenerator init, shield specific implementation.", "url": "https://github.com/seata/seata/pull/2412#discussion_r419118062", "createdAt": "2020-05-03T15:19:40Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/Server.java", "diffHunk": "@@ -80,7 +80,8 @@ public static void main(String[] args) throws IOException {\n         // register ShutdownHook\n         ShutdownHook.getInstance().addDisposable(coordinator);\n         ShutdownHook.getInstance().addDisposable(rpcServer);\n-\n+        //IdWorker Instantiate by service node\n+        IdWorker.init(parameterParser.getServerNode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODY3NTIwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/seata/common/util/NumberUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNToyMDoyOVrOGPs8Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNToyMDoyOVrOGPs8Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExODE1OA==", "bodyText": "remove final", "url": "https://github.com/seata/seata/pull/2412#discussion_r419118158", "createdAt": "2020-05-03T15:20:29Z", "author": {"login": "zjinlei"}, "path": "common/src/main/java/io/seata/common/util/NumberUtils.java", "diffHunk": "@@ -42,4 +42,15 @@ public static int toInt(final String str, final int defaultValue) {\n             return defaultValue;\n         }\n     }\n+\n+    public static Long toLong(String str, final Long defaultValue) {\n+        if (str == null) {\n+            return defaultValue;\n+        }\n+        try {\n+            return Long.valueOf(str);\n+        } catch (final NumberFormatException nfe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODcwMzE0OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/UUIDGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNTo0OTowNFrOGPtJ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNTo1MTo0MVrOGPtLYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMTY2Mg==", "bodyText": "unnecessary", "url": "https://github.com/seata/seata/pull/2412#discussion_r419121662", "createdAt": "2020-05-03T15:49:04Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/UUIDGenerator.java", "diffHunk": "@@ -32,89 +24,23 @@\n  */\n public class UUIDGenerator {\n \n-    private static final AtomicLong UUID = new AtomicLong(1000);\n-    private static int serverNodeId = 1;\n-    private static final long UUID_INTERNAL = 2000000000;\n-    private static long initUUID = 0;\n+    private static IdWorker idWorker;\n \n     /**\n      * Generate uuid long.\n      *\n      * @return the long\n      */\n     public static long generateUUID() {\n-        long id = UUID.incrementAndGet();\n-        if (id >= getMaxUUID()) {\n-            synchronized (UUID) {\n-                if (UUID.get() >= id) {\n-                    id -= UUID_INTERNAL;\n-                    UUID.set(id);\n-                }\n-            }\n-        }\n-        return id;\n-    }\n-\n-    /**\n-     * Gets current uuid.\n-     *\n-     * @return the current uuid\n-     */\n-    public static long getCurrentUUID() {\n-        return UUID.get();\n-    }\n-\n-    /**\n-     * Sets uuid.\n-     *\n-     * @param expect the expect\n-     * @param update the update\n-     * @return the uuid\n-     */\n-    public static boolean setUUID(long expect, long update) {\n-        return UUID.compareAndSet(expect, update);\n-\n+        return idWorker.nextId();\n     }\n-\n     /**\n-     * Gets max uuid.\n+     * IdWorker Instantiate by service node\n      *\n-     * @return the max uuid\n      */\n-    public static long getMaxUUID() {\n-        return UUID_INTERNAL * (serverNodeId + 1);\n+    public static void init(Long serverNode) {\n+        IdWorker.init(serverNode);\n+        idWorker = IdWorker.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c4ae390bbff57cdd25e985cd372d68f8296f88"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMjAxOQ==", "bodyText": "my mistake", "url": "https://github.com/seata/seata/pull/2412#discussion_r419122019", "createdAt": "2020-05-03T15:51:41Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/UUIDGenerator.java", "diffHunk": "@@ -32,89 +24,23 @@\n  */\n public class UUIDGenerator {\n \n-    private static final AtomicLong UUID = new AtomicLong(1000);\n-    private static int serverNodeId = 1;\n-    private static final long UUID_INTERNAL = 2000000000;\n-    private static long initUUID = 0;\n+    private static IdWorker idWorker;\n \n     /**\n      * Generate uuid long.\n      *\n      * @return the long\n      */\n     public static long generateUUID() {\n-        long id = UUID.incrementAndGet();\n-        if (id >= getMaxUUID()) {\n-            synchronized (UUID) {\n-                if (UUID.get() >= id) {\n-                    id -= UUID_INTERNAL;\n-                    UUID.set(id);\n-                }\n-            }\n-        }\n-        return id;\n-    }\n-\n-    /**\n-     * Gets current uuid.\n-     *\n-     * @return the current uuid\n-     */\n-    public static long getCurrentUUID() {\n-        return UUID.get();\n-    }\n-\n-    /**\n-     * Sets uuid.\n-     *\n-     * @param expect the expect\n-     * @param update the update\n-     * @return the uuid\n-     */\n-    public static boolean setUUID(long expect, long update) {\n-        return UUID.compareAndSet(expect, update);\n-\n+        return idWorker.nextId();\n     }\n-\n     /**\n-     * Gets max uuid.\n+     * IdWorker Instantiate by service node\n      *\n-     * @return the max uuid\n      */\n-    public static long getMaxUUID() {\n-        return UUID_INTERNAL * (serverNodeId + 1);\n+    public static void init(Long serverNode) {\n+        IdWorker.init(serverNode);\n+        idWorker = IdWorker.getInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMTY2Mg=="}, "originalCommit": {"oid": "c1c4ae390bbff57cdd25e985cd372d68f8296f88"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTIzNTY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjowNDoxOVrOGPxVwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjozODoxMFrOGPxmEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MDIwOA==", "bodyText": "Why 1L instead of random\uff1f", "url": "https://github.com/seata/seata/pull/2412#discussion_r419190208", "createdAt": "2020-05-04T02:04:19Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);\n+                }\n+            } else {\n+                sequence = 0L;\n+            }\n+            lastTimestamp = timestamp;\n+        }\n+        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;\n+    }\n+\n+    /**\n+     * Block until the next millisecond until a new timestamp is obtained\n+     *\n+     * @param lastTimestamp\n+     *            Time of last ID generation\n+     * @return Current timestamp\n+     */\n+    protected long tilNextMillis(long lastTimestamp) {\n+        long timestamp = timeGen();\n+        while (timestamp <= lastTimestamp) {\n+            timestamp = timeGen();\n+        }\n+        return timestamp;\n+    }\n+\n+    /**\n+     * Returns the current time in milliseconds\n+     *\n+     * @return Current time (ms)\n+     */\n+    protected long timeGen() {\n+        return System.currentTimeMillis();\n+    }\n+\n+    public static IdWorker getInstance() {\n+        if (idWorker == null) {\n+            synchronized (IdWorker.class) {\n+                if (idWorker == null) {\n+                    init(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NDM4NQ==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2412#discussion_r419194385", "createdAt": "2020-05-04T02:38:10Z", "author": {"login": "a364176773"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);\n+                }\n+            } else {\n+                sequence = 0L;\n+            }\n+            lastTimestamp = timestamp;\n+        }\n+        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;\n+    }\n+\n+    /**\n+     * Block until the next millisecond until a new timestamp is obtained\n+     *\n+     * @param lastTimestamp\n+     *            Time of last ID generation\n+     * @return Current timestamp\n+     */\n+    protected long tilNextMillis(long lastTimestamp) {\n+        long timestamp = timeGen();\n+        while (timestamp <= lastTimestamp) {\n+            timestamp = timeGen();\n+        }\n+        return timestamp;\n+    }\n+\n+    /**\n+     * Returns the current time in milliseconds\n+     *\n+     * @return Current time (ms)\n+     */\n+    protected long timeGen() {\n+        return System.currentTimeMillis();\n+    }\n+\n+    public static IdWorker getInstance() {\n+        if (idWorker == null) {\n+            synchronized (IdWorker.class) {\n+                if (idWorker == null) {\n+                    init(1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MDIwOA=="}, "originalCommit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTI0OTA0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjoyMToxN1rOGPxdaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjoyMToxN1rOGPxdaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MjE2OQ==", "bodyText": "need some output shows that the sequence is not enough to use?", "url": "https://github.com/seata/seata/pull/2412#discussion_r419192169", "createdAt": "2020-05-04T02:21:17Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwOTI2MjMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjozNToxOFrOGPxk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjozNzowM1rOGPxlrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NDA5OA==", "bodyText": "How do you ensure order when timestamp-twepoch is greater than 2^22?", "url": "https://github.com/seata/seata/pull/2412#discussion_r419194098", "createdAt": "2020-05-04T02:35:18Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);\n+                }\n+            } else {\n+                sequence = 0L;\n+            }\n+            lastTimestamp = timestamp;\n+        }\n+        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NDI4NA==", "bodyText": "2^42", "url": "https://github.com/seata/seata/pull/2412#discussion_r419194284", "createdAt": "2020-05-04T02:37:03Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);\n+                }\n+            } else {\n+                sequence = 0L;\n+            }\n+            lastTimestamp = timestamp;\n+        }\n+        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NDA5OA=="}, "originalCommit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "originalPosition": 114}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1706, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}