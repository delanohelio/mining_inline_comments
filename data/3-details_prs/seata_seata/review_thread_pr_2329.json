{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMjUyODY4", "number": 2329, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzowNDo0NVrODmGCdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTowMjoyNVrODpyvnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMjcxNDEyOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/lock/LockerManagerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOFQxMzowNDo0NVrOFzVHNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQwNDo0NzowM1rOFza2uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NzYwNQ==", "bodyText": "Uppercase static constants.", "url": "https://github.com/seata/seata/pull/2329#discussion_r389367605", "createdAt": "2020-03-08T13:04:45Z", "author": {"login": "objcoding"}, "path": "server/src/main/java/io/seata/server/lock/LockerManagerFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.lock;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+\n+/**\n+ * The type Lock manager factory.\n+ *\n+ * @author sharajava\n+ */\n+public class LockerManagerFactory {\n+\n+    /**\n+     * the lock manager\n+     */\n+    private static LockManager lockManager = EnhancedServiceLoader.load(LockManager.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8032c57177e770705aca7c22680bc1bd38ee41d1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTQ2MTY5MQ==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2329#discussion_r389461691", "createdAt": "2020-03-09T04:47:03Z", "author": {"login": "ph3636"}, "path": "server/src/main/java/io/seata/server/lock/LockerManagerFactory.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.server.lock;\n+\n+import io.seata.common.loader.EnhancedServiceLoader;\n+import io.seata.config.ConfigurationFactory;\n+import io.seata.core.constants.ConfigurationKeys;\n+\n+/**\n+ * The type Lock manager factory.\n+ *\n+ * @author sharajava\n+ */\n+public class LockerManagerFactory {\n+\n+    /**\n+     * the lock manager\n+     */\n+    private static LockManager lockManager = EnhancedServiceLoader.load(LockManager.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTM2NzYwNQ=="}, "originalCommit": {"oid": "8032c57177e770705aca7c22680bc1bd38ee41d1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODIwMjU2OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/storage/db/lock/DataBaseLockManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjowMzowNVrOF4rbBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjowMzowNVrOF4rbBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk3NjAwNA==", "bodyText": "already ensure  SessionHolder.findGlobalSession(xid, false) are not in the case.", "url": "https://github.com/seata/seata/pull/2329#discussion_r394976004", "createdAt": "2020-03-19T12:03:05Z", "author": {"login": "slievrly"}, "path": "server/src/main/java/io/seata/server/storage/db/lock/DataBaseLockManager.java", "diffHunk": "@@ -44,11 +61,19 @@ public boolean releaseLock(BranchSession branchSession) throws TransactionExcept\n \n     @Override\n     public boolean releaseGlobalSessionLock(GlobalSession globalSession) throws TransactionException {\n-        ArrayList<BranchSession> branchSessions = globalSession.getBranchSessions();\n+        List<BranchSession> branchSessions = globalSession.getBranchSessions();\n         if (CollectionUtils.isEmpty(branchSessions)) {\n             return true;\n         }\n-        List<Long> branchIds = branchSessions.stream().map(BranchSession::getBranchId).collect(Collectors.toList());\n+        List<Long> branchIds = new ArrayList<>(branchSessions.size());\n+        boolean notNeedReleaseLock = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4142dda913c2b586949d8a015a8226d15aa9a2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODI1ODczOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/lock/AbstractLockManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjoyMTo0NFrOF4r_aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjoxODoyMlrOF5IlNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4NTMyMA==", "bodyText": "why not abstract method\uff1f", "url": "https://github.com/seata/seata/pull/2329#discussion_r394985320", "createdAt": "2020-03-19T12:21:44Z", "author": {"login": "slievrly"}, "path": "server/src/main/java/io/seata/server/lock/AbstractLockManager.java", "diffHunk": "@@ -106,7 +111,7 @@ protected Locker getLocker() {\n      * @return the locker\n      */\n     protected Locker getLocker(BranchSession branchSession) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4142dda913c2b586949d8a015a8226d15aa9a2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1Mzc1MQ==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2329#discussion_r395453751", "createdAt": "2020-03-20T06:18:22Z", "author": {"login": "ph3636"}, "path": "server/src/main/java/io/seata/server/lock/AbstractLockManager.java", "diffHunk": "@@ -106,7 +111,7 @@ protected Locker getLocker() {\n      * @return the locker\n      */\n     protected Locker getLocker(BranchSession branchSession) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4NTMyMA=="}, "originalCommit": {"oid": "0d4142dda913c2b586949d8a015a8226d15aa9a2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODYzNjEwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/storage/db/lock/DataBaseLockManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDowMToyN1rOF4vxBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjoxODozMFrOF5IlWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzE3Mg==", "bodyText": "unnecessary attribute", "url": "https://github.com/seata/seata/pull/2329#discussion_r395047172", "createdAt": "2020-03-19T14:01:27Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/storage/db/lock/DataBaseLockManager.java", "diffHunk": "@@ -44,11 +61,19 @@ public boolean releaseLock(BranchSession branchSession) throws TransactionExcept\n \n     @Override\n     public boolean releaseGlobalSessionLock(GlobalSession globalSession) throws TransactionException {\n-        ArrayList<BranchSession> branchSessions = globalSession.getBranchSessions();\n+        List<BranchSession> branchSessions = globalSession.getBranchSessions();\n         if (CollectionUtils.isEmpty(branchSessions)) {\n             return true;\n         }\n-        List<Long> branchIds = branchSessions.stream().map(BranchSession::getBranchId).collect(Collectors.toList());\n+        List<Long> branchIds = new ArrayList<>(branchSessions.size());\n+        boolean notNeedReleaseLock = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d4142dda913c2b586949d8a015a8226d15aa9a2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA4ODQyOA==", "bodyText": "lock_key is always blank id db mode", "url": "https://github.com/seata/seata/pull/2329#discussion_r395088428", "createdAt": "2020-03-19T14:55:15Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/storage/db/lock/DataBaseLockManager.java", "diffHunk": "@@ -44,11 +61,19 @@ public boolean releaseLock(BranchSession branchSession) throws TransactionExcept\n \n     @Override\n     public boolean releaseGlobalSessionLock(GlobalSession globalSession) throws TransactionException {\n-        ArrayList<BranchSession> branchSessions = globalSession.getBranchSessions();\n+        List<BranchSession> branchSessions = globalSession.getBranchSessions();\n         if (CollectionUtils.isEmpty(branchSessions)) {\n             return true;\n         }\n-        List<Long> branchIds = branchSessions.stream().map(BranchSession::getBranchId).collect(Collectors.toList());\n+        List<Long> branchIds = new ArrayList<>(branchSessions.size());\n+        boolean notNeedReleaseLock = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzE3Mg=="}, "originalCommit": {"oid": "0d4142dda913c2b586949d8a015a8226d15aa9a2"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ1Mzc4NA==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2329#discussion_r395453784", "createdAt": "2020-03-20T06:18:30Z", "author": {"login": "ph3636"}, "path": "server/src/main/java/io/seata/server/storage/db/lock/DataBaseLockManager.java", "diffHunk": "@@ -44,11 +61,19 @@ public boolean releaseLock(BranchSession branchSession) throws TransactionExcept\n \n     @Override\n     public boolean releaseGlobalSessionLock(GlobalSession globalSession) throws TransactionException {\n-        ArrayList<BranchSession> branchSessions = globalSession.getBranchSessions();\n+        List<BranchSession> branchSessions = globalSession.getBranchSessions();\n         if (CollectionUtils.isEmpty(branchSessions)) {\n             return true;\n         }\n-        List<Long> branchIds = branchSessions.stream().map(BranchSession::getBranchId).collect(Collectors.toList());\n+        List<Long> branchIds = new ArrayList<>(branchSessions.size());\n+        boolean notNeedReleaseLock = true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA0NzE3Mg=="}, "originalCommit": {"oid": "0d4142dda913c2b586949d8a015a8226d15aa9a2"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTQ5NTk3OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/storage/db/session/DataBaseSessionManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwOTowMjoyNVrOF5L2DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDoxMTo1MVrOF5N5xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzIxMg==", "bodyText": "Will be initialized 4 times by SessionHolder, it should be static.", "url": "https://github.com/seata/seata/pull/2329#discussion_r395507212", "createdAt": "2020-03-20T09:02:25Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/storage/db/session/DataBaseSessionManager.java", "diffHunk": "@@ -79,7 +77,7 @@ public DataBaseSessionManager(String name) {\n \n     @Override\n     public void init() {\n-        transactionStoreManager = EnhancedServiceLoader.load(TransactionStoreManager.class, StoreMode.DB.name());\n+        transactionStoreManager = new DataBaseTransactionStoreManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442fa0c57e44b7ccedeb67c510b376452bb7d381"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU0MDkzMg==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2329#discussion_r395540932", "createdAt": "2020-03-20T10:11:51Z", "author": {"login": "ph3636"}, "path": "server/src/main/java/io/seata/server/storage/db/session/DataBaseSessionManager.java", "diffHunk": "@@ -79,7 +77,7 @@ public DataBaseSessionManager(String name) {\n \n     @Override\n     public void init() {\n-        transactionStoreManager = EnhancedServiceLoader.load(TransactionStoreManager.class, StoreMode.DB.name());\n+        transactionStoreManager = new DataBaseTransactionStoreManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwNzIxMg=="}, "originalCommit": {"oid": "442fa0c57e44b7ccedeb67c510b376452bb7d381"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1653, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}