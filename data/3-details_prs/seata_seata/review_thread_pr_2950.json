{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MTE4Nzc5", "number": 2950, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0MTozNlrOETqU_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoxNDowOFrOET9Fbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MDUxOTAwOnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/storage/redis/lock/RedisLocker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0MTozNlrOG5hRRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxMjo0MTozNlrOG5hRRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjk2NzExMQ==", "bodyText": "unnecessary", "url": "https://github.com/seata/seata/pull/2950#discussion_r462967111", "createdAt": "2020-07-30T12:41:36Z", "author": {"login": "a364176773"}, "path": "server/src/main/java/io/seata/server/storage/redis/lock/RedisLocker.java", "diffHunk": "@@ -75,13 +75,33 @@ public boolean acquireLock(List<RowLock> rowLocks) {\n                 locks =\n                     locks.stream().filter(LambdaUtils.distinctByKey(LockDO::getRowKey)).collect(Collectors.toList());\n             }\n-            Pipeline pipeline = jedis.pipelined();\n+            List<String> existedKeyList = new ArrayList<>();\n+            locks.forEach(lockDO -> {\n+                existedKeyList.add(getLockKey(lockDO.getRowKey()));\n+            });\n+            List<String> lockList = jedis.mget(existedKeyList.toArray(new String[0]));\n             List<String> readyKeys = new ArrayList<>();\n-            for (LockDO lock : locks) {\n-                String key = getLockKey(lock.getRowKey());\n-                pipeline.setnx(key, JSON.toJSONString(lock));\n-                readyKeys.add(key);\n+            Pipeline pipeline = null;\n+            for (int i = 0; i < existedKeyList.size(); i++) {\n+                String existedValue = lockList.get(i);\n+                if (existedValue == null) {\n+                    if (pipeline == null) {\n+                        pipeline = jedis.pipelined();\n+                    }\n+                    String key = existedKeyList.get(i);\n+                    pipeline.setnx(key, JSON.toJSONString(locks.get(i)));\n+                    readyKeys.add(key);\n+                } else {\n+                    LockDO existed = JSON.parseObject(existedValue, LockDO.class);\n+                    if (!StringUtils.equals(existed.getXid(), locks.get(i).getXid())) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            if (CollectionUtils.isEmpty(readyKeys)) {\n+                return true;\n             }\n+            @SuppressWarnings(\"ConstantConditions\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42d62878c1cfef2071317bf0b5c146b598161477"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MzU5MjE1OnYy", "diffSide": "RIGHT", "path": "server/src/main/java/io/seata/server/storage/redis/lock/RedisLocker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoxNDowOFrOG5-YbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwNzoxNDowOFrOG5-YbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ0NDA3Ng==", "bodyText": "readyKeys.get(i) ?", "url": "https://github.com/seata/seata/pull/2950#discussion_r463444076", "createdAt": "2020-07-31T07:14:08Z", "author": {"login": "slievrly"}, "path": "server/src/main/java/io/seata/server/storage/redis/lock/RedisLocker.java", "diffHunk": "@@ -75,13 +78,31 @@ public boolean acquireLock(List<RowLock> rowLocks) {\n                 locks =\n                     locks.stream().filter(LambdaUtils.distinctByKey(LockDO::getRowKey)).collect(Collectors.toList());\n             }\n-            Pipeline pipeline = jedis.pipelined();\n+            List<String> existedKeyList = new ArrayList<>();\n+            locks.forEach(lockDO -> {\n+                existedKeyList.add(getLockKey(lockDO.getRowKey()));\n+            });\n+            List<String> lockList = jedis.mget(existedKeyList.toArray(new String[0]));\n             List<String> readyKeys = new ArrayList<>();\n-            for (LockDO lock : locks) {\n-                String key = getLockKey(lock.getRowKey());\n-                pipeline.setnx(key, JSON.toJSONString(lock));\n-                readyKeys.add(key);\n+            Map<String, String> map = new LinkedHashMap<>(existedKeyList.size(), 1);\n+            for (int i = 0; i < existedKeyList.size(); i++) {\n+                String existedValue = lockList.get(i);\n+                if (existedValue == null) {\n+                    String key = existedKeyList.get(i);\n+                    map.put(key, JSON.toJSONString(locks.get(i)));\n+                    readyKeys.add(key);\n+                } else {\n+                    LockDO existed = JSON.parseObject(existedValue, LockDO.class);\n+                    if (!StringUtils.equals(existed.getXid(), locks.get(i).getXid())) {\n+                        return false;\n+                    }\n+                }\n+            }\n+            if (map.size() == 0) {\n+                return true;\n             }\n+            Pipeline pipeline = jedis.pipelined();\n+            map.forEach(pipeline::setnx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64aa983a365c3e95207cb88e3e78c529d8b76207"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1390, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}