{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NjEwNzE1", "number": 2611, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1MDozNlrOD2POvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDowNDozNFrOEFQXPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MTk5MjMwOnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/AbstractConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1MDozNlrOGL-LQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwMzo1MTo1NVrOGL-MIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjIxMA==", "bodyText": "The scope of the lock is too big.", "url": "https://github.com/seata/seata/pull/2611#discussion_r415206210", "createdAt": "2020-04-26T03:50:36Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/AbstractConfiguration.java", "diffHunk": "@@ -127,13 +136,36 @@ public String getConfig(String dataId) {\n         return getConfig(dataId, DEFAULT_CONFIG_TIMEOUT);\n     }\n \n+    @Override\n+    public String getConfig(String dataId, String content, long timeoutMills) {\n+        Object result = CONFIG_CACHE.get(dataId, mappingFunction -> {\n+            return null;\n+        });\n+        if (null == result) {\n+            synchronized (AbstractConfiguration.class) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5297c55ce0da24029dc660a9020ede303d57ecc2"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjQzMg==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2611#discussion_r415206432", "createdAt": "2020-04-26T03:51:55Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/AbstractConfiguration.java", "diffHunk": "@@ -127,13 +136,36 @@ public String getConfig(String dataId) {\n         return getConfig(dataId, DEFAULT_CONFIG_TIMEOUT);\n     }\n \n+    @Override\n+    public String getConfig(String dataId, String content, long timeoutMills) {\n+        Object result = CONFIG_CACHE.get(dataId, mappingFunction -> {\n+            return null;\n+        });\n+        if (null == result) {\n+            synchronized (AbstractConfiguration.class) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwNjIxMA=="}, "originalCommit": {"oid": "5297c55ce0da24029dc660a9020ede303d57ecc2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzg4MTEzOnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/Configuration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToyNzo0M1rOGT-Gig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOToyNzo0M1rOGT-Gig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU5MzYxMA==", "bodyText": "more accurate name", "url": "https://github.com/seata/seata/pull/2611#discussion_r423593610", "createdAt": "2020-05-12T09:27:43Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/Configuration.java", "diffHunk": "@@ -206,6 +206,15 @@\n      */\n     boolean putConfig(String dataId, String content, long timeoutMills);\n \n+    /**\n+     *\n+     * @param dataId       the data id\n+     * @param defaultValue the default value\n+     * @param timeoutMills the timeout mills\n+     * @return the config now\n+     */\n+    String getConfigNow(String dataId, String defaultValue, long timeoutMills);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODU0ODg4OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjo0MjoxOVrOGUEqzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxNToyNlrOGULtfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwMTE5Ng==", "bodyText": "Use the getConfig method name directly", "url": "https://github.com/seata/seata/pull/2611#discussion_r423701196", "createdAt": "2020-05-12T12:42:19Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationCacheProvider, ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_CONFIG_NOW = METHOD_PREFIX + \"ConfigNow\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+    \n+    @Override\n+    public Configuration provide(Configuration originalConfiguration) {\n+        return (Configuration)Enhancer.create(Configuration.class,\n+            (MethodInterceptor)(proxy, method, args, methodProxy) -> {\n+                if (method.getName().startsWith(METHOD_PREFIX)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNjU3Mw==", "bodyText": "when calling getBoolean, getConfig will not be intercepted", "url": "https://github.com/seata/seata/pull/2611#discussion_r423816573", "createdAt": "2020-05-12T15:15:26Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationCacheProvider, ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_CONFIG_NOW = METHOD_PREFIX + \"ConfigNow\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+    \n+    @Override\n+    public Configuration provide(Configuration originalConfiguration) {\n+        return (Configuration)Enhancer.create(Configuration.class,\n+            (MethodInterceptor)(proxy, method, args, methodProxy) -> {\n+                if (method.getName().startsWith(METHOD_PREFIX)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwMTE5Ng=="}, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODU4NjM0OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjo1MTo1OVrOGUFCRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxMzo1NVrOGULoxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwNzIwNw==", "bodyText": "newValue is null->remove,  the oldValue in nacos always is null.", "url": "https://github.com/seata/seata/pull/2611#discussion_r423707207", "createdAt": "2020-05-12T12:51:59Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationCacheProvider, ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_CONFIG_NOW = METHOD_PREFIX + \"ConfigNow\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+    \n+    @Override\n+    public Configuration provide(Configuration originalConfiguration) {\n+        return (Configuration)Enhancer.create(Configuration.class,\n+            (MethodInterceptor)(proxy, method, args, methodProxy) -> {\n+                if (method.getName().startsWith(METHOD_PREFIX)\n+                    && !method.getName().equalsIgnoreCase(METHOD_CONFIG_NOW)) {\n+                    String rawDataId = (String)args[0];\n+                    Object result = CONFIG_CACHE.get(rawDataId);\n+                    if (null == result) {\n+                        result = method.invoke(originalConfiguration, args);\n+                        if (result != null) {\n+                            CONFIG_CACHE.put(rawDataId, result);\n+                        }\n+                    }\n+                    if (method.getReturnType().equals(String.class)) {\n+                        return String.valueOf(result);\n+                    }\n+                    return result;\n+                }\n+                return method.invoke(originalConfiguration, args);\n+            });\n+    }\n+\n+    @Override\n+    public void onChangeEvent(ConfigurationChangeEvent event) {\n+        Object oldValue = CONFIG_CACHE.get(event.getDataId());\n+        if (null == oldValue || !oldValue.equals(event.getNewValue())) {\n+            CONFIG_CACHE.put(event.getDataId(), event.getNewValue());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNTM2Nw==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2611#discussion_r423815367", "createdAt": "2020-05-12T15:13:55Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationCacheProvider, ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_CONFIG_NOW = METHOD_PREFIX + \"ConfigNow\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+    \n+    @Override\n+    public Configuration provide(Configuration originalConfiguration) {\n+        return (Configuration)Enhancer.create(Configuration.class,\n+            (MethodInterceptor)(proxy, method, args, methodProxy) -> {\n+                if (method.getName().startsWith(METHOD_PREFIX)\n+                    && !method.getName().equalsIgnoreCase(METHOD_CONFIG_NOW)) {\n+                    String rawDataId = (String)args[0];\n+                    Object result = CONFIG_CACHE.get(rawDataId);\n+                    if (null == result) {\n+                        result = method.invoke(originalConfiguration, args);\n+                        if (result != null) {\n+                            CONFIG_CACHE.put(rawDataId, result);\n+                        }\n+                    }\n+                    if (method.getReturnType().equals(String.class)) {\n+                        return String.valueOf(result);\n+                    }\n+                    return result;\n+                }\n+                return method.invoke(originalConfiguration, args);\n+            });\n+    }\n+\n+    @Override\n+    public void onChangeEvent(ConfigurationChangeEvent event) {\n+        Object oldValue = CONFIG_CACHE.get(event.getDataId());\n+        if (null == oldValue || !oldValue.equals(event.getNewValue())) {\n+            CONFIG_CACHE.put(event.getDataId(), event.getNewValue());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwNzIwNw=="}, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODYwMjc5OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjo1NjoxMlrOGUFMpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxNTo0MVrOGULuFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTg2Mg==", "bodyText": "dataId", "url": "https://github.com/seata/seata/pull/2611#discussion_r423709862", "createdAt": "2020-05-12T12:56:12Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNTQ0OA==", "bodyText": "CacheListener", "url": "https://github.com/seata/seata/pull/2611#discussion_r423715448", "createdAt": "2020-05-12T13:04:21Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTg2Mg=="}, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNjcyNA==", "bodyText": "dataId\n\nok", "url": "https://github.com/seata/seata/pull/2611#discussion_r423816724", "createdAt": "2020-05-12T15:15:41Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcwOTg2Mg=="}, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODYxNjE2OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMjo1OToyMVrOGUFVCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxNjozNFrOGULw0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMjAxMA==", "bodyText": "extConfiguration?", "url": "https://github.com/seata/seata/pull/2611#discussion_r423712010", "createdAt": "2020-05-12T12:59:21Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {\n+        if (StringUtils.isBlank(key) || LISTENER_KEYS.contains(key)) {\n+            return;\n+        }\n+        getInstance().addConfigListener(key,\n+            (ConfigurationChangeListener)SeataConfigurationCacheProvider.getInstance());\n+        LISTENER_KEYS.add(key);\n+    }\n+\n     private static Configuration buildConfiguration() {\n         ConfigType configType;\n         String configTypeName = null;\n         try {\n-            configTypeName = CURRENT_FILE_INSTANCE.getConfig(\n-                ConfigurationKeys.FILE_ROOT_CONFIG + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR\n-                    + ConfigurationKeys.FILE_ROOT_TYPE);\n+            configTypeName = CURRENT_FILE_INSTANCE.getConfig(ConfigurationKeys.FILE_ROOT_CONFIG\n+                + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR + ConfigurationKeys.FILE_ROOT_TYPE);\n             configType = ConfigType.getType(configTypeName);\n         } catch (Exception e) {\n             throw new NotSupportYetException(\"not support register type: \" + configTypeName, e);\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+            } else {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);\n+            }\n+            if (null != configurationCache) {\n+                extConfiguration = configurationCache;\n+            }\n+        } catch (EnhancedServiceNotFoundException ignore) {\n+\n+        } catch (Exception e) {\n+            LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNzQyNQ==", "bodyText": "modified", "url": "https://github.com/seata/seata/pull/2611#discussion_r423817425", "createdAt": "2020-05-12T15:16:34Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -94,38 +99,64 @@ public static Configuration getInstance() {\n         return instance;\n     }\n \n+    public static synchronized void addConfigListener(String key) {\n+        if (StringUtils.isBlank(key) || LISTENER_KEYS.contains(key)) {\n+            return;\n+        }\n+        getInstance().addConfigListener(key,\n+            (ConfigurationChangeListener)SeataConfigurationCacheProvider.getInstance());\n+        LISTENER_KEYS.add(key);\n+    }\n+\n     private static Configuration buildConfiguration() {\n         ConfigType configType;\n         String configTypeName = null;\n         try {\n-            configTypeName = CURRENT_FILE_INSTANCE.getConfig(\n-                ConfigurationKeys.FILE_ROOT_CONFIG + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR\n-                    + ConfigurationKeys.FILE_ROOT_TYPE);\n+            configTypeName = CURRENT_FILE_INSTANCE.getConfig(ConfigurationKeys.FILE_ROOT_CONFIG\n+                + ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR + ConfigurationKeys.FILE_ROOT_TYPE);\n             configType = ConfigType.getType(configTypeName);\n         } catch (Exception e) {\n             throw new NotSupportYetException(\"not support register type: \" + configTypeName, e);\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+            } else {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);\n+            }\n+            if (null != configurationCache) {\n+                extConfiguration = configurationCache;\n+            }\n+        } catch (EnhancedServiceNotFoundException ignore) {\n+\n+        } catch (Exception e) {\n+            LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxMjAxMA=="}, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODY0NjE1OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzowNjo0NlrOGUFoXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNToxNjo0NFrOGULxPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNjk1OQ==", "bodyText": "How do I customize a listener\uff1f", "url": "https://github.com/seata/seata/pull/2611#discussion_r423716959", "createdAt": "2020-05-12T13:06:46Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "diffHunk": "@@ -219,7 +218,7 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n                     if (interceptor == null) {\n                         if (globalTransactionalInterceptor == null) {\n                             globalTransactionalInterceptor = new GlobalTransactionalInterceptor(failureHandlerHook);\n-                            ConfigurationFactory.getInstance().addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, (ConfigurationChangeListener) globalTransactionalInterceptor);\n+                            ConfigurationFactory.addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgxNzUzMg==", "bodyText": "PTAL", "url": "https://github.com/seata/seata/pull/2611#discussion_r423817532", "createdAt": "2020-05-12T15:16:44Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionScanner.java", "diffHunk": "@@ -219,7 +218,7 @@ protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey)\n                     if (interceptor == null) {\n                         if (globalTransactionalInterceptor == null) {\n                             globalTransactionalInterceptor = new GlobalTransactionalInterceptor(failureHandlerHook);\n-                            ConfigurationFactory.getInstance().addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION, (ConfigurationChangeListener) globalTransactionalInterceptor);\n+                            ConfigurationFactory.addConfigListener(ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcxNjk1OQ=="}, "originalCommit": {"oid": "312594e544965996092823f3e099ca298d984e9b"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTEwMzE5OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCacheProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMjoyMjoxN1rOGeJ5Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMjoyMjoxN1rOGeJ5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3MjU2Ng==", "bodyText": "Why not use the existing ExtConfigurationProvider directly?", "url": "https://github.com/seata/seata/pull/2611#discussion_r434272566", "createdAt": "2020-06-03T02:22:17Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+/**\n+ * @author funkye\n+ */\n+public interface ConfigurationCacheProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTE1ODkwOnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMzowMDozM1rOGeKbuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMzowMDozM1rOGeKbuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTQwMA==", "bodyText": "Use ExtConfigurationProvider, and then specify the type.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434281400", "createdAt": "2020-06-03T03:00:33Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTE1OTI4OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMzowMDo0N1rOGeKb8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMzowMDo0N1rOGeKb8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTQ1Ng==", "bodyText": "Use ExtConfigurationProvider, and then specify the type.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434281456", "createdAt": "2020-06-03T03:00:47Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(extConfiguration);\n+            } else {\n+                configurationCache =\n+                    EnhancedServiceLoader.load(ConfigurationCacheProvider.class).provide(configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTE2MTY4OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMzowMjoxN1rOGeKdYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTo0MTo0NlrOGeMyIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTgyNA==", "bodyText": "ExtConfigurationProvider will have multiple implementation classes, here you need to specify which extension classes to load.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434281824", "createdAt": "2020-06-03T03:02:17Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxOTkwNQ==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2611#discussion_r434319905", "createdAt": "2020-06-03T05:41:46Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +110,45 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI4MTgyNA=="}, "originalCommit": {"oid": "07f4c67a412d77aa2df3674c547387c195e80ca1"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjgyNTgxOnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzowMjoxNFrOGeawew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzowMjoxNFrOGeawew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0ODg1OQ==", "bodyText": "Would it be better to call it SeataConfigurationCacheProxy? Or you think of a better name.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434548859", "createdAt": "2020-06-03T13:02:14Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationChangeListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac6af757179eee9c5d40354e382d9f66cf343f4a"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjgyNjc1OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzowMjoyN1rOGeaxDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzowMjoyN1rOGeaxDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0OTAwNQ==", "bodyText": "Would it be better to call it proxy? Or you think of a better name.", "url": "https://github.com/seata/seata/pull/2611#discussion_r434549005", "createdAt": "2020-06-03T13:02:27Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/SeataConfigurationCacheProvider.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class SeataConfigurationCacheProvider implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new CopyOnWriteArraySet<>();\n+\n+    public Configuration provide(Configuration originalConfiguration) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac6af757179eee9c5d40354e382d9f66cf343f4a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNTg5MTQ0OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0OTowNlrOGfz7cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNjozNToyMVrOGf1d0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwOTg0MA==", "bodyText": "Since addConfigListener uses synchronized block, just use HashSet here.", "url": "https://github.com/seata/seata/pull/2611#discussion_r436009840", "createdAt": "2020-06-05T15:49:06Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "141d3617bbc51841d9e68956aca52e62f436e5e4"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAzNTAyNw==", "bodyText": "Since addConfigListener uses synchronized block, just use HashSet here.\n\nok", "url": "https://github.com/seata/seata/pull/2611#discussion_r436035027", "createdAt": "2020-06-05T16:35:21Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArraySet;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new CopyOnWriteArraySet<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwOTg0MA=="}, "originalCommit": {"oid": "141d3617bbc51841d9e68956aca52e62f436e5e4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjcxMTU5OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozMzo1OVrOGiVzkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozODozN1rOGiZeUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MjAzMw==", "bodyText": "just hashMap.", "url": "https://github.com/seata/seata/pull/2611#discussion_r438662033", "createdAt": "2020-06-11T09:33:59Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjEzMA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2611#discussion_r438722130", "createdAt": "2020-06-11T11:38:37Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MjAzMw=="}, "originalCommit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjcxNzc2OnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozNTo0OVrOGiV3jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozODo1N1rOGiZe1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MzA1NQ==", "bodyText": "For code elegance may use foreach would be better.", "url": "https://github.com/seata/seata/pull/2611#discussion_r438663055", "createdAt": "2020-06-11T09:35:49Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =\n+        new ConcurrentHashMap<>();\n+\n+    public static void addConfigListener(String dataId, ConfigurationChangeListener... listeners) {\n+        if (StringUtils.isBlank(dataId)) {\n+            return;\n+        }\n+        synchronized (ConfigurationCache.class) {\n+            if (!LISTENER_KEYS.contains(dataId)) {\n+                ConfigurationFactory.getInstance().addConfigListener(dataId, getInstance());\n+                LISTENER_KEYS.add(dataId);\n+            }\n+            if (null != listeners && listeners.length > 0) {\n+                HashSet<ConfigurationChangeListener> listenerHashSet = null;\n+                try {\n+                    listenerHashSet = getInstance().configListenersMap.get(dataId);\n+                    if (CollectionUtils.isEmpty(listenerHashSet)) {\n+                        listenerHashSet = new HashSet<>();\n+                    }\n+                    for (int i = 0; i < listeners.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjI2MQ==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2611#discussion_r438722261", "createdAt": "2020-06-11T11:38:57Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =\n+        new ConcurrentHashMap<>();\n+\n+    public static void addConfigListener(String dataId, ConfigurationChangeListener... listeners) {\n+        if (StringUtils.isBlank(dataId)) {\n+            return;\n+        }\n+        synchronized (ConfigurationCache.class) {\n+            if (!LISTENER_KEYS.contains(dataId)) {\n+                ConfigurationFactory.getInstance().addConfigListener(dataId, getInstance());\n+                LISTENER_KEYS.add(dataId);\n+            }\n+            if (null != listeners && listeners.length > 0) {\n+                HashSet<ConfigurationChangeListener> listenerHashSet = null;\n+                try {\n+                    listenerHashSet = getInstance().configListenersMap.get(dataId);\n+                    if (CollectionUtils.isEmpty(listenerHashSet)) {\n+                        listenerHashSet = new HashSet<>();\n+                    }\n+                    for (int i = 0; i < listeners.length; i++) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2MzA1NQ=="}, "originalCommit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjc1NTYzOnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo0NzowM1rOGiWPow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxMTozOTowN1rOGiZfLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2OTIxOQ==", "bodyText": "if (null != listeners && listeners.length > 0) {\n                HashSet<ConfigurationChangeListener> listenerHashSet =\n                    getInstance().configListenersMap.computeIfAbsent(dataId, k -> new HashSet<>());\n                if (CollectionUtils.isEmpty(listenerHashSet)) {\n                    listenerHashSet = new HashSet<>();\n                }\n                for (ConfigurationChangeListener listener : listeners) {\n                    ConfigurationChangeListener listener = listeners[i];\n                    if (!listenerHashSet.contains(listener)) {\n                        listenerHashSet.add(listener);\n                        ConfigurationFactory.getInstance().addConfigListener(dataId, listener);\n                    }\n                }\n            }", "url": "https://github.com/seata/seata/pull/2611#discussion_r438669219", "createdAt": "2020-06-11T09:47:03Z", "author": {"login": "objcoding"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =\n+        new ConcurrentHashMap<>();\n+\n+    public static void addConfigListener(String dataId, ConfigurationChangeListener... listeners) {\n+        if (StringUtils.isBlank(dataId)) {\n+            return;\n+        }\n+        synchronized (ConfigurationCache.class) {\n+            if (!LISTENER_KEYS.contains(dataId)) {\n+                ConfigurationFactory.getInstance().addConfigListener(dataId, getInstance());\n+                LISTENER_KEYS.add(dataId);\n+            }\n+            if (null != listeners && listeners.length > 0) {\n+                HashSet<ConfigurationChangeListener> listenerHashSet = null;\n+                try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODcyMjM0OA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2611#discussion_r438722348", "createdAt": "2020-06-11T11:39:07Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationCache.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.config;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+import io.seata.common.util.CollectionUtils;\n+import io.seata.common.util.StringUtils;\n+import net.sf.cglib.proxy.Enhancer;\n+import net.sf.cglib.proxy.MethodInterceptor;\n+\n+/**\n+ * @author funkye\n+ */\n+public class ConfigurationCache implements ConfigurationChangeListener {\n+\n+    private static final String METHOD_PREFIX = \"get\";\n+\n+    private static final String METHOD_LATEST_CONFIG = METHOD_PREFIX + \"LatestConfig\";\n+\n+    private static final ConcurrentHashMap<String, Object> CONFIG_CACHE = new ConcurrentHashMap<>();\n+\n+    private static final Set<String> LISTENER_KEYS = new HashSet<>();\n+\n+    private ConcurrentMap<String, HashSet<ConfigurationChangeListener>> configListenersMap =\n+        new ConcurrentHashMap<>();\n+\n+    public static void addConfigListener(String dataId, ConfigurationChangeListener... listeners) {\n+        if (StringUtils.isBlank(dataId)) {\n+            return;\n+        }\n+        synchronized (ConfigurationCache.class) {\n+            if (!LISTENER_KEYS.contains(dataId)) {\n+                ConfigurationFactory.getInstance().addConfigListener(dataId, getInstance());\n+                LISTENER_KEYS.add(dataId);\n+            }\n+            if (null != listeners && listeners.length > 0) {\n+                HashSet<ConfigurationChangeListener> listenerHashSet = null;\n+                try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2OTIxOQ=="}, "originalCommit": {"oid": "5f3e8ac5015fd9915b7da7bf9a82caf9cdd1c1f4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQxNjAwOnYy", "diffSide": "RIGHT", "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjoyNTowM1rOGjXUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxMjozMToyM1rOGjXVzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNTMxOA==", "bodyText": "check the code logic.", "url": "https://github.com/seata/seata/pull/2611#discussion_r439735318", "createdAt": "2020-06-13T12:25:03Z", "author": {"login": "slievrly"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +111,43 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache = ConfigurationCache.getInstance().proxy(configuration);\n+            } else {\n+                configurationCache = ConfigurationCache.getInstance().proxy(configuration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNTc1OA==", "bodyText": "ok", "url": "https://github.com/seata/seata/pull/2611#discussion_r439735758", "createdAt": "2020-06-13T12:31:23Z", "author": {"login": "a364176773"}, "path": "config/seata-config-core/src/main/java/io/seata/config/ConfigurationFactory.java", "diffHunk": "@@ -111,27 +111,43 @@ private static Configuration buildConfiguration() {\n         } catch (Exception e) {\n             throw e;\n         }\n+        Configuration extConfiguration = null;\n+        Configuration configuration;\n         if (ConfigType.File == configType) {\n-            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR, ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n+            String pathDataId = String.join(ConfigurationKeys.FILE_CONFIG_SPLIT_CHAR,\n+                ConfigurationKeys.FILE_ROOT_CONFIG, FILE_TYPE, NAME_KEY);\n             String name = CURRENT_FILE_INSTANCE.getConfig(pathDataId);\n-            Configuration configuration = new FileConfiguration(name);\n-            Configuration extConfiguration = null;\n+            configuration = new FileConfiguration(name);\n             try {\n                 extConfiguration = EnhancedServiceLoader.load(ExtConfigurationProvider.class).provide(configuration);\n                 if (LOGGER.isInfoEnabled()) {\n-                    LOGGER.info(\"load Configuration:{}\",\n-                        extConfiguration == null ? configuration.getClass().getSimpleName()\n-                            : extConfiguration.getClass().getSimpleName());\n+                    LOGGER.info(\"load Configuration:{}\", extConfiguration == null\n+                        ? configuration.getClass().getSimpleName() : extConfiguration.getClass().getSimpleName());\n                 }\n             } catch (EnhancedServiceNotFoundException ignore) {\n \n             } catch (Exception e) {\n                 LOGGER.error(\"failed to load extConfiguration:{}\", e.getMessage(), e);\n             }\n-            return null == extConfiguration ? configuration : extConfiguration;\n         } else {\n-            return EnhancedServiceLoader.load(ConfigurationProvider.class, Objects.requireNonNull(configType).name())\n-                .provide();\n+            configuration = EnhancedServiceLoader\n+                .load(ConfigurationProvider.class, Objects.requireNonNull(configType).name()).provide();\n+        }\n+        try {\n+            Configuration configurationCache;\n+            if (null != extConfiguration) {\n+                configurationCache = ConfigurationCache.getInstance().proxy(configuration);\n+            } else {\n+                configurationCache = ConfigurationCache.getInstance().proxy(configuration);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTczNTMxOA=="}, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ2Mzc5OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDowMzoyOFrOGjXsVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTo0MDo1MlrOGmrc8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTUyNA==", "bodyText": "why delete disable process logic?", "url": "https://github.com/seata/seata/pull/2611#discussion_r439741524", "createdAt": "2020-06-13T14:03:28Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -195,62 +235,23 @@ public TransactionInfo getTransactionInfo() {\n                     throw new ShouldNeverHappenException(String.format(\"Unknown TransactionalExecutor.Code: %s\", code));\n             }\n         } finally {\n+            final boolean degradeCheck = ConfigurationFactory.getInstance()\n+                .getBoolean(ConfigurationKeys.CLIENT_DEGRADE_CHECK, DEFAULT_TM_DEGRADE_CHECK);\n             if (degradeCheck) {\n                 onDegradeCheck(succeed);\n             }\n         }\n     }\n \n-    public <T extends Annotation> T getAnnotation(Method method, Class<?> targetClass, Class<T> annotationClass) {\n-        return Optional.ofNullable(method).map(m -> m.getAnnotation(annotationClass))\n-            .orElse(Optional.ofNullable(targetClass).map(t -> t.getAnnotation(annotationClass)).orElse(null));\n-    }\n-\n-    private String formatMethod(Method method) {\n-        StringBuilder sb = new StringBuilder(method.getName()).append(\"(\");\n-\n-        Class<?>[] params = method.getParameterTypes();\n-        int in = 0;\n-        for (Class<?> clazz : params) {\n-            sb.append(clazz.getName());\n-            if (++in < params.length) {\n-                sb.append(\", \");\n-            }\n-        }\n-        return sb.append(\")\").toString();\n-    }\n-\n     @Override\n     public void onChangeEvent(ConfigurationChangeEvent event) {\n-        if (ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION.equals(event.getDataId())) {\n-            LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n-                disable, event.getNewValue());\n-            disable = Boolean.parseBoolean(event.getNewValue().trim());\n-        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n-            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n-            if (!degradeCheck) {\n+        if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            if (!Boolean.parseBoolean(event.getNewValue())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMDk5NQ==", "bodyText": "the code has been restored", "url": "https://github.com/seata/seata/pull/2611#discussion_r443210995", "createdAt": "2020-06-21T11:40:52Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -195,62 +235,23 @@ public TransactionInfo getTransactionInfo() {\n                     throw new ShouldNeverHappenException(String.format(\"Unknown TransactionalExecutor.Code: %s\", code));\n             }\n         } finally {\n+            final boolean degradeCheck = ConfigurationFactory.getInstance()\n+                .getBoolean(ConfigurationKeys.CLIENT_DEGRADE_CHECK, DEFAULT_TM_DEGRADE_CHECK);\n             if (degradeCheck) {\n                 onDegradeCheck(succeed);\n             }\n         }\n     }\n \n-    public <T extends Annotation> T getAnnotation(Method method, Class<?> targetClass, Class<T> annotationClass) {\n-        return Optional.ofNullable(method).map(m -> m.getAnnotation(annotationClass))\n-            .orElse(Optional.ofNullable(targetClass).map(t -> t.getAnnotation(annotationClass)).orElse(null));\n-    }\n-\n-    private String formatMethod(Method method) {\n-        StringBuilder sb = new StringBuilder(method.getName()).append(\"(\");\n-\n-        Class<?>[] params = method.getParameterTypes();\n-        int in = 0;\n-        for (Class<?> clazz : params) {\n-            sb.append(clazz.getName());\n-            if (++in < params.length) {\n-                sb.append(\", \");\n-            }\n-        }\n-        return sb.append(\")\").toString();\n-    }\n-\n     @Override\n     public void onChangeEvent(ConfigurationChangeEvent event) {\n-        if (ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION.equals(event.getDataId())) {\n-            LOGGER.info(\"{} config changed, old value:{}, new value:{}\", ConfigurationKeys.DISABLE_GLOBAL_TRANSACTION,\n-                disable, event.getNewValue());\n-            disable = Boolean.parseBoolean(event.getNewValue().trim());\n-        } else if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n-            degradeCheck = Boolean.parseBoolean(event.getNewValue());\n-            if (!degradeCheck) {\n+        if (ConfigurationKeys.CLIENT_DEGRADE_CHECK.equals(event.getDataId())) {\n+            if (!Boolean.parseBoolean(event.getNewValue())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTUyNA=="}, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczOTQ2NDMxOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xM1QxNDowNDozNFrOGjXsmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNDo0NToyNVrOGmXYEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTU5NQ==", "bodyText": "Why local variables?", "url": "https://github.com/seata/seata/pull/2611#discussion_r439741595", "createdAt": "2020-06-13T14:04:34Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -107,6 +136,10 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n             final GlobalTransactional globalTransactionalAnnotation =\n                 getAnnotation(method, targetClass, GlobalTransactional.class);\n             final GlobalLock globalLockAnnotation = getAnnotation(method, targetClass, GlobalLock.class);\n+            final boolean disable = ConfigurationFactory.getInstance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTY2MA==", "bodyText": "What happens if the disable configuration item does not exist?", "url": "https://github.com/seata/seata/pull/2611#discussion_r439741660", "createdAt": "2020-06-13T14:05:16Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -107,6 +136,10 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n             final GlobalTransactional globalTransactionalAnnotation =\n                 getAnnotation(method, targetClass, GlobalTransactional.class);\n             final GlobalLock globalLockAnnotation = getAnnotation(method, targetClass, GlobalLock.class);\n+            final boolean disable = ConfigurationFactory.getInstance()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTU5NQ=="}, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjg4MjA2Ng==", "bodyText": "What happens if the disable configuration item does not exist?\n\nwhen not present, the default value will be used", "url": "https://github.com/seata/seata/pull/2611#discussion_r442882066", "createdAt": "2020-06-19T14:45:25Z", "author": {"login": "a364176773"}, "path": "spring/src/main/java/io/seata/spring/annotation/GlobalTransactionalInterceptor.java", "diffHunk": "@@ -107,6 +136,10 @@ public Object invoke(final MethodInvocation methodInvocation) throws Throwable {\n             final GlobalTransactional globalTransactionalAnnotation =\n                 getAnnotation(method, targetClass, GlobalTransactional.class);\n             final GlobalLock globalLockAnnotation = getAnnotation(method, targetClass, GlobalLock.class);\n+            final boolean disable = ConfigurationFactory.getInstance()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTc0MTU5NQ=="}, "originalCommit": {"oid": "08f79b559c5c2186a3660651ca55a05cd03f56c8"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1557, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}