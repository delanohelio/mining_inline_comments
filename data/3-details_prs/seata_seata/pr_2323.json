{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzMxNDkz", "number": 2323, "title": "bugfix:fix wrong proxy of datasource bean", "bodyText": "\u2160. Describe what this PR did\nfix wrong proxy of datasource bean\n\u2161. Does this pull request fix one issue?\n\nfixes #2322 #2311 #2321\n\u2162. Why don't you add test cases (unit test/integration test)?\nI've done integration testing.\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews", "createdAt": "2020-02-28T11:02:24Z", "url": "https://github.com/seata/seata/pull/2323", "merged": true, "mergeCommit": {"oid": "1d468c401bf9d82aaa60e669af31ce1e5172c28c"}, "closed": true, "closedAt": "2020-03-25T08:34:51Z", "author": {"login": "xingfudeshi"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIt0QegH2gAyMzgxMzMxNDkzOjlhNzk1YTNjNDUxNzlhZWI4ZWZmZThlNGFkNzY3ZjY4NGRlOTg2ZWY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRDULagFqTM4MDk0MTI5MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9a795a3c45179aeb8effe8e4ad767f684de986ef", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/9a795a3c45179aeb8effe8e4ad767f684de986ef", "committedDate": "2020-02-28T11:00:17Z", "message": "fix duplicate proxy of bean."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99e4f386a84c3ac7f6fe1bcf7709bccf2b8b59fe", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/99e4f386a84c3ac7f6fe1bcf7709bccf2b8b59fe", "committedDate": "2020-02-28T11:14:08Z", "message": "Update SeataDataSourceBeanPostProcessor.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bda41411a8c24b293d36d85cca4ff29db6f12bc", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/7bda41411a8c24b293d36d85cca4ff29db6f12bc", "committedDate": "2020-02-28T23:56:29Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Nzg3MjQz", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-367787243", "createdAt": "2020-03-03T08:41:43Z", "commit": {"oid": "7bda41411a8c24b293d36d85cca4ff29db6f12bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo0MTo0M1rOFw8hmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo0MTo0M1rOFw8hmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NzYwOA==", "bodyText": "In JDK Proxy case, what invocationHandler has a field of type DataSourceProxy?", "url": "https://github.com/seata/seata/pull/2323#discussion_r386867608", "createdAt": "2020-03-03T08:41:43Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        Field field = null;\n+        //handle Normal proxy object\n+        if (ClassUtils.isCglibProxy(proxyTargetObject)) {\n+            //CGLIB Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        } else if (Proxy.isProxyClass(proxyTargetObject.getClass())) {\n+            //JDK Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"h\");\n+        }\n+        return doCheckAutoProxy(field, proxyTargetObject);\n+    }\n+\n+    /**\n+     * do check auto proxy\n+     *\n+     * @param field\n+     * @param proxiedObject\n+     * @return\n+     * @throws IllegalAccessException\n+     */\n+    private boolean doCheckAutoProxy(Field field, Object proxiedObject) throws IllegalAccessException {\n+        if (null == field) {\n+            return false;\n+        }\n+        field.setAccessible(true);\n+        Object fieldObject = field.get(proxiedObject);\n+        return Stream.of(fieldObject.getClass().getDeclaredFields()).anyMatch(f -> {\n+            f.setAccessible(true);\n+            Object targetObject;\n+            try {\n+                targetObject = f.get(fieldObject);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+            return targetObject instanceof DataSourceProxy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bda41411a8c24b293d36d85cca4ff29db6f12bc"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3Nzg3Nzcz", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-367787773", "createdAt": "2020-03-03T08:42:33Z", "commit": {"oid": "7bda41411a8c24b293d36d85cca4ff29db6f12bc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo0MjozNFrOFw8jIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo0MjozNFrOFw8jIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2ODAwMg==", "bodyText": "Need to restore accessible?", "url": "https://github.com/seata/seata/pull/2323#discussion_r386868002", "createdAt": "2020-03-03T08:42:34Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        Field field = null;\n+        //handle Normal proxy object\n+        if (ClassUtils.isCglibProxy(proxyTargetObject)) {\n+            //CGLIB Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        } else if (Proxy.isProxyClass(proxyTargetObject.getClass())) {\n+            //JDK Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"h\");\n+        }\n+        return doCheckAutoProxy(field, proxyTargetObject);\n+    }\n+\n+    /**\n+     * do check auto proxy\n+     *\n+     * @param field\n+     * @param proxiedObject\n+     * @return\n+     * @throws IllegalAccessException\n+     */\n+    private boolean doCheckAutoProxy(Field field, Object proxiedObject) throws IllegalAccessException {\n+        if (null == field) {\n+            return false;\n+        }\n+        field.setAccessible(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bda41411a8c24b293d36d85cca4ff29db6f12bc"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "881550c68dd4cd1c9cc1762c57a34ab0c2804473", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/881550c68dd4cd1c9cc1762c57a34ab0c2804473", "committedDate": "2020-03-04T06:16:33Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0", "committedDate": "2020-03-04T23:28:26Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NjY4NjI2", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-369668626", "createdAt": "2020-03-05T15:31:08Z", "commit": {"oid": "75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTozMTowOFrOFyYNrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTozMTowOFrOFyYNrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2OTgzNw==", "bodyText": "only for cglib?", "url": "https://github.com/seata/seata/pull/2323#discussion_r388369837", "createdAt": "2020-03-05T15:31:08Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NzAwMjg0", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-369700284", "createdAt": "2020-03-05T16:04:53Z", "commit": {"oid": "75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNDo1M1rOFyZq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNDo1M1rOFyZq7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MzcxMA==", "bodyText": "getClass -> getSuperclass", "url": "https://github.com/seata/seata/pull/2323#discussion_r388393710", "createdAt": "2020-03-05T16:04:53Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        Field field = null;\n+        //handle Normal proxy object\n+        if (ClassUtils.isCglibProxy(proxyTargetObject)) {\n+            //CGLIB Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        } else if (Proxy.isProxyClass(proxyTargetObject.getClass())) {\n+            //JDK Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"h\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e31f5a69237bacd98c0f1928e3286a254e15b3c2", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/e31f5a69237bacd98c0f1928e3286a254e15b3c2", "committedDate": "2020-03-06T01:46:06Z", "message": "fix review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31edb8cd6710ba7292afe36cda4f01615a5dff57", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/31edb8cd6710ba7292afe36cda4f01615a5dff57", "committedDate": "2020-03-06T01:46:49Z", "message": "Merge branch 'fix_duplicate_proxy' of https://github.com/xingfudeshi/seata into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85b270c9095efd942da7f398f563e002417e2074", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/85b270c9095efd942da7f398f563e002417e2074", "committedDate": "2020-03-06T01:52:40Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc28853aa1ac7302256dc3c45d241f0f422f1219", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/fc28853aa1ac7302256dc3c45d241f0f422f1219", "committedDate": "2020-03-09T12:47:44Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fd3fd40006ddb32d04a865071a8d72d119b1680", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/5fd3fd40006ddb32d04a865071a8d72d119b1680", "committedDate": "2020-03-11T08:09:39Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "823fb41380d7c20bcccbeda4b66ba80259c45e43", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/823fb41380d7c20bcccbeda4b66ba80259c45e43", "committedDate": "2020-03-13T04:24:56Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "20473c347c34b386bd7a2473bc5f920a59f2a357", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/20473c347c34b386bd7a2473bc5f920a59f2a357", "committedDate": "2020-03-13T06:08:43Z", "message": "implements PriorityOrdered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01a16aabedd4c137840b0fa97d1877780865d4c4", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/01a16aabedd4c137840b0fa97d1877780865d4c4", "committedDate": "2020-03-13T08:50:20Z", "message": "use Ordered instead of PriorityOrdered"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9a844ee59cec5aec6b687dd599ca7e8d74c2792", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/a9a844ee59cec5aec6b687dd599ca7e8d74c2792", "committedDate": "2020-03-15T04:16:46Z", "message": "using spring to create automatic proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ab6b3c6888c86632cab9482a70b75da082c68e5", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/7ab6b3c6888c86632cab9482a70b75da082c68e5", "committedDate": "2020-03-15T10:33:18Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae3d7563c9b8d1598a440782e9fb8fae3bad5c10", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/ae3d7563c9b8d1598a440782e9fb8fae3bad5c10", "committedDate": "2020-03-15T11:04:59Z", "message": "using spring to create automatic proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9672d295df60d8694c77b77eeb280fdba91cb300", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/9672d295df60d8694c77b77eeb280fdba91cb300", "committedDate": "2020-03-15T11:48:49Z", "message": "add exclude"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266", "author": {"user": {"login": "zjinlei", "name": null}}, "url": "https://github.com/seata/seata/commit/7c20a0721b5cbc55460d780b639b200a5e585266", "committedDate": "2020-03-15T16:12:08Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MDEyOTUy", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-376012952", "createdAt": "2020-03-17T13:05:08Z", "commit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowNTowOFrOF3bSgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowNTowOFrOF3bSgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MzEwNQ==", "bodyText": "Do we need a include attribute?", "url": "https://github.com/seata/seata/pull/2323#discussion_r393663105", "createdAt": "2020-03-17T13:05:08Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/EnableAutoDataSourceProxy.java", "diffHunk": "@@ -38,4 +38,10 @@\n      * @return useJdkProxy\n      */\n     boolean useJdkProxy() default false;\n+\n+    /**\n+     * Specifies which datasource bean are not eligible for auto-proxying\n+     * @return\n+     */\n+    String[] exclude() default {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MDI3MDQy", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-376027042", "createdAt": "2020-03-17T13:22:36Z", "commit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoyMjozNlrOF3b9mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoyMjozNlrOF3b9mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NDEzOA==", "bodyText": "I have an idea, ProxyCreator can be implement like this:\n// define a mark interface\npublic interface SeataProxy {\n}\n\n// implements MethodInterceptor and IntroductionInfo\npublic class SeataAutoDataSourceProxyAdvice implements MethodInterceptor, IntroductionInfo {\n    private final DataSourceProxy dataSourceProxy;\n\n    public SeataAutoDataSourceProxyAdvice(DataSourceProxy dataSourceProxy) {\n        this.dataSourceProxy = dataSourceProxy;\n    }\n    \n    ...\n\n    @Override\n    public Class<?>[] getInterfaces() {\n        return new Class[]{SeataProxy.class};\n    }\n}\n\n// extends AbstractAutoProxyCreator\npublic class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {\n    protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException {\n        advice = new SeataAutoDataSourceProxyAdvice()\n        // use DefaultIntroductionAdvisor\n        advisor = new DefaultIntroductionAdvisor(advice);\n        return new Object[]{advisor};\n    }\n \n    @Override    \n    protected boolean shouldSkip(Class<?> beanClass, String beanName) {\n        return SeataProxy.class.isAssignableFrom(beanClass) || beanName ....;\n    }\n}", "url": "https://github.com/seata/seata/pull/2323#discussion_r393674138", "createdAt": "2020-03-17T13:22:36Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyCreator.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.datasource;\n+\n+import javax.sql.DataSource;\n+import java.util.stream.Stream;\n+\n+import io.seata.rm.datasource.DataSourceProxy;\n+import io.seata.spring.util.SpringProxyUtils;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.Advisor;\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.AdvisedSupport;\n+import org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.beans.BeansException;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5abe6a851ebda962056837c48182ea0513a7b31b", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/5abe6a851ebda962056837c48182ea0513a7b31b", "committedDate": "2020-03-17T16:25:42Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4c27741b7c7f4f2c4944ba1a0652ab81c1976c9", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/b4c27741b7c7f4f2c4944ba1a0652ab81c1976c9", "committedDate": "2020-03-19T13:45:25Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acdbdfce486f64817a8fcd0dc5537d30e9a00c8f", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/acdbdfce486f64817a8fcd0dc5537d30e9a00c8f", "committedDate": "2020-03-19T14:13:10Z", "message": "use Spring AOP to create auto-proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f239ad622ae51a0dafbb81b6808cc42c9bcff7e", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/8f239ad622ae51a0dafbb81b6808cc42c9bcff7e", "committedDate": "2020-03-19T14:13:24Z", "message": "Merge remote-tracking branch 'origin/fix_duplicate_proxy' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e915d049e8a666f667e5f0541677b80706177d3", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/8e915d049e8a666f667e5f0541677b80706177d3", "committedDate": "2020-03-19T16:49:06Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjMxMjM4", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-378231238", "createdAt": "2020-03-20T04:44:03Z", "commit": {"oid": "8e915d049e8a666f667e5f0541677b80706177d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDo0NDowM1rOF5Hk9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDo0NDowM1rOF5Hk9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNzMwMw==", "bodyText": "What I thought is to not override wrapIfNecessary and fully make use of AbstractAutoProxyCreator, something like this:\npublic class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {\n    private final String[] excludes;\n\n    private final DefaultIntroductionAdvisor advisor = new DefaultIntroductionAdvisor(new SeataAutoDataSourceProxyAdvice());\n\n    public SeataAutoDataSourceProxyCreator(boolean useJdkProxy, String[] excludes) {\n        this.excludes = excludes;\n        setProxyTargetClass(!useJdkProxy);\n    }\n\n    @Override\n    protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException {\n        return new Object[]{advisor};\n    }\n\n    @Override\n    protected boolean shouldSkip(Class<?> beanClass, String beanName) {\n        return SeataProxy.class.isAssignableFrom(beanClass) ||\n                !DataSource.class.isAssignableFrom(beanClass) ||\n                Arrays.asList(excludes).contains(beanClass.getName());\n    }\n}\n\npublic class SeataAutoDataSourceProxyAdvice implements MethodInterceptor, IntroductionInfo {\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        DataSource dataSource = (DataSource) invocation.getThis();\n        DataSourceProxy dataSourceProxy = DataSourceProxyHolder.get().putDataSource(dataSource);\n        Method method = invocation.getMethod();\n        Object[] args = invocation.getArguments();\n        Method m = BeanUtils.findDeclaredMethod(DataSourceProxy.class, method.getName(), method.getParameterTypes());\n        if (null != m) {\n            return m.invoke(dataSourceProxy, args);\n        } else {\n            return invocation.proceed();\n        }\n    }\n\n    @Override\n    public Class<?>[] getInterfaces() {\n        return new Class[]{SeataProxy.class};\n    }\n\n}", "url": "https://github.com/seata/seata/pull/2323#discussion_r395437303", "createdAt": "2020-03-20T04:44:03Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyCreator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.datasource;\n+\n+import javax.sql.DataSource;\n+import java.util.Arrays;\n+\n+import io.seata.rm.datasource.DataSourceProxy;\n+import io.seata.spring.util.SpringProxyUtils;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.Advisor;\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.AdvisedSupport;\n+import org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.aop.support.DefaultIntroductionAdvisor;\n+import org.springframework.beans.BeansException;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SeataAutoDataSourceProxyCreator.class);\n+    private MethodInterceptor advice;\n+    private final String[] excludes;\n+\n+    public SeataAutoDataSourceProxyCreator(boolean useJdkProxy, String[] excludes) {\n+        this.excludes = excludes;\n+        setProxyTargetClass(!useJdkProxy);\n+    }\n+\n+    @Override\n+    protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e915d049e8a666f667e5f0541677b80706177d3"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MjMxNDQw", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-378231440", "createdAt": "2020-03-20T04:45:05Z", "commit": {"oid": "8e915d049e8a666f667e5f0541677b80706177d3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDo0NTowNVrOF5HleQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDo0NTowNVrOF5HleQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNzQzMw==", "bodyText": "excludes?", "url": "https://github.com/seata/seata/pull/2323#discussion_r395437433", "createdAt": "2020-03-20T04:45:05Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/AutoDataSourceProxyRegistrar.java", "diffHunk": "@@ -27,16 +27,20 @@\n  */\n public class AutoDataSourceProxyRegistrar implements ImportBeanDefinitionRegistrar {\n     private static final String ATTRIBUTE_KEY_USE_JDK_PROXY = \"useJdkProxy\";\n-    public static final String BEAN_NAME_SEATA_DATA_SOURCE_BEAN_POST_PROCESSOR = \"seataDataSourceBeanPostProcessor\";\n+    private static final String ATTRIBUTE_KEY_EXCLUDE = \"exclude\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e915d049e8a666f667e5f0541677b80706177d3"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c46c6d62c64a53cfaf1a568b8c00a724c424389b", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/c46c6d62c64a53cfaf1a568b8c00a724c424389b", "committedDate": "2020-03-20T14:39:26Z", "message": "remove wrapIfNecessary"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "798cbb2096114131905b68a1c30347623eb6d549", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/798cbb2096114131905b68a1c30347623eb6d549", "committedDate": "2020-03-20T14:40:32Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98be2f07e8d0f68ea93347acde8a66aba1c67037", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/98be2f07e8d0f68ea93347acde8a66aba1c67037", "committedDate": "2020-03-20T14:42:51Z", "message": "Merge branch 'fix_duplicate_proxy' of https://github.com/xingfudeshi/seata into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5475cbb281a7083f93f5a09983c904343e861b2d", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/5475cbb281a7083f93f5a09983c904343e861b2d", "committedDate": "2020-03-21T06:50:44Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2a5f4fb4583f185ce1a5560c0e33cff993a1eae2", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/2a5f4fb4583f185ce1a5560c0e33cff993a1eae2", "committedDate": "2020-03-23T11:18:07Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5Mzc5Nzc2", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-379379776", "createdAt": "2020-03-23T12:25:22Z", "commit": {"oid": "2a5f4fb4583f185ce1a5560c0e33cff993a1eae2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyNToyM1rOF6DFAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyNToyM1rOF6DFAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMjE2Mg==", "bodyText": "ing means doing\uff1f", "url": "https://github.com/seata/seata/pull/2323#discussion_r396412162", "createdAt": "2020-03-23T12:25:23Z", "author": {"login": "slievrly"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java", "diffHunk": "@@ -101,4 +105,13 @@ public SeataProperties setUseJdkProxy(boolean useJdkProxy) {\n         this.useJdkProxy = useJdkProxy;\n         return this;\n     }\n+\n+    public String[] getExcludesForAutoProxying() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5f4fb4583f185ce1a5560c0e33cff993a1eae2"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NDgwOTAx", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-379480901", "createdAt": "2020-03-23T14:27:22Z", "commit": {"oid": "2a5f4fb4583f185ce1a5560c0e33cff993a1eae2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNzoyMlrOF6H5lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNzoyMlrOF6H5lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MTE1OA==", "bodyText": "Do we need to throw exception or log warning message when m == null?", "url": "https://github.com/seata/seata/pull/2323#discussion_r396491158", "createdAt": "2020-03-23T14:27:22Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyAdvice.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.datasource;\n+\n+import javax.sql.DataSource;\n+import java.lang.reflect.Method;\n+\n+import io.seata.rm.datasource.DataSourceProxy;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+import org.springframework.aop.IntroductionInfo;\n+import org.springframework.beans.BeanUtils;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class SeataAutoDataSourceProxyAdvice implements MethodInterceptor, IntroductionInfo {\n+\n+    @Override\n+    public Object invoke(MethodInvocation invocation) throws Throwable {\n+        DataSourceProxy dataSourceProxy = DataSourceProxyHolder.get().putDataSource((DataSource) invocation.getThis());\n+        Method method = invocation.getMethod();\n+        Object[] args = invocation.getArguments();\n+        Method m = BeanUtils.findDeclaredMethod(DataSourceProxy.class, method.getName(), method.getParameterTypes());\n+        if (null != m) {\n+            return m.invoke(dataSourceProxy, args);\n+        } else {\n+            return invocation.proceed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5f4fb4583f185ce1a5560c0e33cff993a1eae2"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d3b2c4155a0b7c6ba402b28f973cac26b7b97b9", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/8d3b2c4155a0b7c6ba402b28f973cac26b7b97b9", "committedDate": "2020-03-23T16:02:02Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5OTU4ODA4", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-379958808", "createdAt": "2020-03-24T02:25:36Z", "commit": {"oid": "8d3b2c4155a0b7c6ba402b28f973cac26b7b97b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a849978a981801e867f6f9e469f4d6a53dcf9042", "author": {"user": {"login": "xingfudeshi", "name": "xingfudeshi"}}, "url": "https://github.com/seata/seata/commit/a849978a981801e867f6f9e469f4d6a53dcf9042", "committedDate": "2020-03-24T15:55:06Z", "message": "Merge branch 'develop' into fix_duplicate_proxy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwOTQxMjkw", "url": "https://github.com/seata/seata/pull/2323#pullrequestreview-380941290", "createdAt": "2020-03-25T08:34:33Z", "commit": {"oid": "a849978a981801e867f6f9e469f4d6a53dcf9042"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4033, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}