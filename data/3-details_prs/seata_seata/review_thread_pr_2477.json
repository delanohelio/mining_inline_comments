{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MTE2MTMx", "number": 2477, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMDo1MTozN1rOD696oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzo1MDoyMlrOD9Ry1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTU4NDMyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMDo1MTozN1rOGTDFsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDozOToyMVrOGU03Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNjczOA==", "bodyText": "too structured, whether to encapsulate objects to increase readability.", "url": "https://github.com/seata/seata/pull/2477#discussion_r422626738", "createdAt": "2020-05-10T10:51:37Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java", "diffHunk": "@@ -119,9 +124,19 @@ public void setApplicationId(String applicationId) {\n     public void setTransactionServiceGroup(String transactionServiceGroup) {\n         this.transactionServiceGroup = transactionServiceGroup;\n     }\n+\n+    public void setTmProcessor(Map<Integer, Pair<NettyProcessor, Boolean>> processorMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5MDg0Mw==", "bodyText": "Agree with your suggestion, have been encapsulated.\nio.seata.core.rpc.netty.TmRpcClient#registerProcessor", "url": "https://github.com/seata/seata/pull/2477#discussion_r424490843", "createdAt": "2020-05-13T14:39:21Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/netty/TmRpcClient.java", "diffHunk": "@@ -119,9 +124,19 @@ public void setApplicationId(String applicationId) {\n     public void setTransactionServiceGroup(String transactionServiceGroup) {\n         this.transactionServiceGroup = transactionServiceGroup;\n     }\n+\n+    public void setTmProcessor(Map<Integer, Pair<NettyProcessor, Boolean>> processorMap) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNjczOA=="}, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTU4OTU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/netty/processor/Pair.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMDo1NjoyNVrOGTDIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxNzo0M1rOGU2s6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNzM3Ng==", "bodyText": "ImmutablePair", "url": "https://github.com/seata/seata/pull/2477#discussion_r422627376", "createdAt": "2020-05-10T10:56:25Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/Pair.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor;\n+\n+/**\n+ * Currently used to associate object1 and object2\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class Pair<T1, T2> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyMDkzOQ==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2477#discussion_r424520939", "createdAt": "2020-05-13T15:17:43Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/Pair.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor;\n+\n+/**\n+ * Currently used to associate object1 and object2\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class Pair<T1, T2> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyNzM3Ng=="}, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTU5NDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/MergeResultMessageProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTowMjoxM1rOGTDK2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDo0NDozM1rOGU1HsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODA1OA==", "bodyText": "interface type", "url": "https://github.com/seata/seata/pull/2477#discussion_r422628058", "createdAt": "2020-05-10T11:02:13Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/MergeResultMessageProcessor.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.MergeMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.rpc.netty.processor.NettyProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * handle TC response about process merge message.\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class MergeResultMessageProcessor implements NettyProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MergeResultMessageProcessor.class);\n+\n+    /**\n+     * The Merge msg map from AbstractRpcRemoting.\n+     */\n+    private Map<Integer, MergeMessage> mergeMsgMap;\n+\n+    /**\n+     * The Futures from AbstractRpcRemoting.\n+     */\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ5NTAyNQ==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2477#discussion_r424495025", "createdAt": "2020-05-13T14:44:33Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/MergeResultMessageProcessor.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.MergeMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.rpc.netty.processor.NettyProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+/**\n+ * handle TC response about process merge message.\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class MergeResultMessageProcessor implements NettyProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(MergeResultMessageProcessor.class);\n+\n+    /**\n+     * The Merge msg map from AbstractRpcRemoting.\n+     */\n+    private Map<Integer, MergeMessage> mergeMsgMap;\n+\n+    /**\n+     * The Futures from AbstractRpcRemoting.\n+     */\n+    private ConcurrentHashMap<Integer, MessageFuture> futures;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyODA1OA=="}, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTYwOTI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/RmHandleBranchRollbackProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToxNzozNVrOGTDR_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToyODozNlrOGU3NJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTg4NQ==", "bodyText": "Why is the exception handling different from RmHandleBranchCommitProcessor?", "url": "https://github.com/seata/seata/pull/2477#discussion_r422629885", "createdAt": "2020-05-10T11:17:35Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/RmHandleBranchRollbackProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.netty.processor.NettyProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The rm client handle branch commit processor\n+ * <p>\n+ * handle TC do global rollback command.\n+ * {@link BranchRollbackRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class RmHandleBranchRollbackProcessor implements NettyProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmHandleBranchRollbackProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmHandleBranchRollbackProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm handle branch rollback process:\" + msg);\n+        }\n+        handleBranchRollback(rpcMessage, remoteAddress, (BranchRollbackRequest) msg);\n+    }\n+\n+    private void handleBranchRollback(RpcMessage request, String serverAddress, BranchRollbackRequest branchRollbackRequest) {\n+        BranchRollbackResponse resultMessage;\n+        resultMessage = (BranchRollbackResponse) handler.onRequest(branchRollbackRequest, null);\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"branch rollback result:\" + resultMessage);\n+        }\n+        try {\n+            this.remotingClient.sendResponse(request, serverAddress, resultMessage);\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"send response error: {}\", throwable.getMessage(), throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyNjU4Mg==", "bodyText": "This is the old code.\nThere are BranchCommitResponse and BranchRollbackResponse for customer response to the server request, but the server does anything to the response request, so I think the exception handling of RmBranchCommitProcessor is meaningless, so I will change it to the same as RmBranchRollbackProcessor .", "url": "https://github.com/seata/seata/pull/2477#discussion_r424526582", "createdAt": "2020-05-13T15:25:19Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/RmHandleBranchRollbackProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.netty.processor.NettyProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The rm client handle branch commit processor\n+ * <p>\n+ * handle TC do global rollback command.\n+ * {@link BranchRollbackRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class RmHandleBranchRollbackProcessor implements NettyProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmHandleBranchRollbackProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmHandleBranchRollbackProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm handle branch rollback process:\" + msg);\n+        }\n+        handleBranchRollback(rpcMessage, remoteAddress, (BranchRollbackRequest) msg);\n+    }\n+\n+    private void handleBranchRollback(RpcMessage request, String serverAddress, BranchRollbackRequest branchRollbackRequest) {\n+        BranchRollbackResponse resultMessage;\n+        resultMessage = (BranchRollbackResponse) handler.onRequest(branchRollbackRequest, null);\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"branch rollback result:\" + resultMessage);\n+        }\n+        try {\n+            this.remotingClient.sendResponse(request, serverAddress, resultMessage);\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"send response error: {}\", throwable.getMessage(), throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTg4NQ=="}, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUyOTE5MQ==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2477#discussion_r424529191", "createdAt": "2020-05-13T15:28:36Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/netty/processor/client/RmHandleBranchRollbackProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.netty.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.netty.processor.NettyProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The rm client handle branch commit processor\n+ * <p>\n+ * handle TC do global rollback command.\n+ * {@link BranchRollbackRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.2.0\n+ */\n+public class RmHandleBranchRollbackProcessor implements NettyProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmHandleBranchRollbackProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmHandleBranchRollbackProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm handle branch rollback process:\" + msg);\n+        }\n+        handleBranchRollback(rpcMessage, remoteAddress, (BranchRollbackRequest) msg);\n+    }\n+\n+    private void handleBranchRollback(RpcMessage request, String serverAddress, BranchRollbackRequest branchRollbackRequest) {\n+        BranchRollbackResponse resultMessage;\n+        resultMessage = (BranchRollbackResponse) handler.onRequest(branchRollbackRequest, null);\n+        if (LOGGER.isDebugEnabled()) {\n+            LOGGER.debug(\"branch rollback result:\" + resultMessage);\n+        }\n+        try {\n+            this.remotingClient.sendResponse(request, serverAddress, resultMessage);\n+        } catch (Throwable throwable) {\n+            LOGGER.error(\"send response error: {}\", throwable.getMessage(), throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYyOTg4NQ=="}, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTYxNzY2OnYy", "diffSide": "RIGHT", "path": "rm/src/main/java/io/seata/rm/RMClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToyNTozNFrOGTDV8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowMTo0NlrOGU19Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMDg5OQ==", "bodyText": "remove", "url": "https://github.com/seata/seata/pull/2477#discussion_r422630899", "createdAt": "2020-05-10T11:25:34Z", "author": {"login": "slievrly"}, "path": "rm/src/main/java/io/seata/rm/RMClient.java", "diffHunk": "@@ -34,7 +44,32 @@\n     public static void init(String applicationId, String transactionServiceGroup) {\n         RmRpcClient rmRpcClient = RmRpcClient.getInstance(applicationId, transactionServiceGroup);\n         rmRpcClient.setResourceManager(DefaultResourceManager.get());\n-        rmRpcClient.setClientMessageListener(new RmMessageListener(DefaultRMHandler.get(), rmRpcClient));\n+        AbstractRMHandler handler = DefaultRMHandler.get();\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchCommitProcessor =\n+            new Pair<>(new RmHandleBranchCommitProcessor(handler, rmRpcClient), true);\n+        processorMap.put((int) MessageType.TYPE_BRANCH_COMMIT, branchCommitProcessor);\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchRollbackProcessor =\n+            new Pair<>(new RmHandleBranchRollbackProcessor(handler, rmRpcClient), true);\n+        processorMap.put((int) MessageType.TYPE_BRANCH_ROLLBACK, branchRollbackProcessor);\n+        // rm handler undo log processor\n+        Pair<NettyProcessor, Boolean> deleteUndoLogProcessor =\n+            new Pair<>(new RmHandleUndoLogProcessor(handler), true);\n+        processorMap.put((int) MessageType.TYPE_RM_DELETE_UNDOLOG, deleteUndoLogProcessor);\n+        // handle TC response about process merge message\n+        Pair<NettyProcessor, Boolean> mergeMsgProcessor =\n+            new Pair<>(new MergeResultMessageProcessor(rmRpcClient.getMergeMsgMap(), rmRpcClient.getFutures()), false);\n+        processorMap.put((int) MessageType.TYPE_SEATA_MERGE_RESULT, mergeMsgProcessor);\n+        rmRpcClient.setRmProcessor(processorMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwODcyNw==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2477#discussion_r424508727", "createdAt": "2020-05-13T15:01:46Z", "author": {"login": "objcoding"}, "path": "rm/src/main/java/io/seata/rm/RMClient.java", "diffHunk": "@@ -34,7 +44,32 @@\n     public static void init(String applicationId, String transactionServiceGroup) {\n         RmRpcClient rmRpcClient = RmRpcClient.getInstance(applicationId, transactionServiceGroup);\n         rmRpcClient.setResourceManager(DefaultResourceManager.get());\n-        rmRpcClient.setClientMessageListener(new RmMessageListener(DefaultRMHandler.get(), rmRpcClient));\n+        AbstractRMHandler handler = DefaultRMHandler.get();\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchCommitProcessor =\n+            new Pair<>(new RmHandleBranchCommitProcessor(handler, rmRpcClient), true);\n+        processorMap.put((int) MessageType.TYPE_BRANCH_COMMIT, branchCommitProcessor);\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchRollbackProcessor =\n+            new Pair<>(new RmHandleBranchRollbackProcessor(handler, rmRpcClient), true);\n+        processorMap.put((int) MessageType.TYPE_BRANCH_ROLLBACK, branchRollbackProcessor);\n+        // rm handler undo log processor\n+        Pair<NettyProcessor, Boolean> deleteUndoLogProcessor =\n+            new Pair<>(new RmHandleUndoLogProcessor(handler), true);\n+        processorMap.put((int) MessageType.TYPE_RM_DELETE_UNDOLOG, deleteUndoLogProcessor);\n+        // handle TC response about process merge message\n+        Pair<NettyProcessor, Boolean> mergeMsgProcessor =\n+            new Pair<>(new MergeResultMessageProcessor(rmRpcClient.getMergeMsgMap(), rmRpcClient.getFutures()), false);\n+        processorMap.put((int) MessageType.TYPE_SEATA_MERGE_RESULT, mergeMsgProcessor);\n+        rmRpcClient.setRmProcessor(processorMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMDg5OQ=="}, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTYxOTMwOnYy", "diffSide": "RIGHT", "path": "tm/src/main/java/io/seata/tm/TMClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMToyNzoyNlrOGTDWvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTowMjowNVrOGU1-CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMTEwMA==", "bodyText": "remove", "url": "https://github.com/seata/seata/pull/2477#discussion_r422631100", "createdAt": "2020-05-10T11:27:26Z", "author": {"login": "slievrly"}, "path": "tm/src/main/java/io/seata/tm/TMClient.java", "diffHunk": "@@ -32,6 +40,18 @@\n      */\n     public static void init(String applicationId, String transactionServiceGroup) {\n         TmRpcClient tmRpcClient = TmRpcClient.getInstance(applicationId, transactionServiceGroup);\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // handle TC response about process merge message\n+        Pair<NettyProcessor, Boolean> mergeMsgProcessor =\n+            new Pair<>(new MergeResultMessageProcessor(tmRpcClient.getMergeMsgMap(), tmRpcClient.getFutures()), false);\n+        processorMap.put((int) MessageType.TYPE_SEATA_MERGE_RESULT, mergeMsgProcessor);\n+        tmRpcClient.setTmProcessor(processorMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUwODkzNw==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2477#discussion_r424508937", "createdAt": "2020-05-13T15:02:05Z", "author": {"login": "objcoding"}, "path": "tm/src/main/java/io/seata/tm/TMClient.java", "diffHunk": "@@ -32,6 +40,18 @@\n      */\n     public static void init(String applicationId, String transactionServiceGroup) {\n         TmRpcClient tmRpcClient = TmRpcClient.getInstance(applicationId, transactionServiceGroup);\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // handle TC response about process merge message\n+        Pair<NettyProcessor, Boolean> mergeMsgProcessor =\n+            new Pair<>(new MergeResultMessageProcessor(tmRpcClient.getMergeMsgMap(), tmRpcClient.getFutures()), false);\n+        processorMap.put((int) MessageType.TYPE_SEATA_MERGE_RESULT, mergeMsgProcessor);\n+        tmRpcClient.setTmProcessor(processorMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzMTEwMA=="}, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTY0MzU4OnYy", "diffSide": "RIGHT", "path": "rm/src/main/java/io/seata/rm/RMClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxMTo1MzoxNlrOGTDjGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNToxMDo1MlrOGU2YXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzNDI2NQ==", "bodyText": "Whether or not to use a user thread pool can be determined based on the request/response type?", "url": "https://github.com/seata/seata/pull/2477#discussion_r422634265", "createdAt": "2020-05-10T11:53:16Z", "author": {"login": "slievrly"}, "path": "rm/src/main/java/io/seata/rm/RMClient.java", "diffHunk": "@@ -34,7 +44,32 @@\n     public static void init(String applicationId, String transactionServiceGroup) {\n         RmRpcClient rmRpcClient = RmRpcClient.getInstance(applicationId, transactionServiceGroup);\n         rmRpcClient.setResourceManager(DefaultResourceManager.get());\n-        rmRpcClient.setClientMessageListener(new RmMessageListener(DefaultRMHandler.get(), rmRpcClient));\n+        AbstractRMHandler handler = DefaultRMHandler.get();\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchCommitProcessor =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUxNTY3OQ==", "bodyText": "Phase4 pr has already done so, I now migrate the phase4 related logic to the current pr.", "url": "https://github.com/seata/seata/pull/2477#discussion_r424515679", "createdAt": "2020-05-13T15:10:52Z", "author": {"login": "objcoding"}, "path": "rm/src/main/java/io/seata/rm/RMClient.java", "diffHunk": "@@ -34,7 +44,32 @@\n     public static void init(String applicationId, String transactionServiceGroup) {\n         RmRpcClient rmRpcClient = RmRpcClient.getInstance(applicationId, transactionServiceGroup);\n         rmRpcClient.setResourceManager(DefaultResourceManager.get());\n-        rmRpcClient.setClientMessageListener(new RmMessageListener(DefaultRMHandler.get(), rmRpcClient));\n+        AbstractRMHandler handler = DefaultRMHandler.get();\n+\n+        Map<Integer, Pair<NettyProcessor, Boolean>> processorMap = new HashMap<>();\n+        // rm client handle branch commit processor\n+        Pair<NettyProcessor, Boolean> branchCommitProcessor =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjYzNDI2NQ=="}, "originalCommit": {"oid": "48480c6f448126311cc401890028a29012d47ee9"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTkxNDg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchCommitProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjowODoyMFrOGVNRQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzo1MTozMVrOGVQJdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDY5MA==", "bodyText": "If need to handle exceptions on the outer layer here?", "url": "https://github.com/seata/seata/pull/2477#discussion_r424890690", "createdAt": "2020-05-14T06:08:20Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchCommitProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * process TC global commit command.\n+ * <p>\n+ * process message type:\n+ * {@link BranchCommitRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class RmBranchCommitProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmBranchCommitProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmBranchCommitProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm client handle branch commit process:\" + msg);\n+        }\n+        handleBranchCommit(rpcMessage, remoteAddress, (BranchCommitRequest) msg);\n+    }\n+\n+    private void handleBranchCommit(RpcMessage request, String serverAddress, BranchCommitRequest branchCommitRequest) {\n+        BranchCommitResponse resultMessage;\n+        resultMessage = (BranchCommitResponse) handler.onRequest(branchCommitRequest, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzNzg0Nw==", "bodyText": "Trycatch has been done in the following method\uff1a\nio.seata.core.rpc.netty.AbstractNettyRemoting#processMessage", "url": "https://github.com/seata/seata/pull/2477#discussion_r424937847", "createdAt": "2020-05-14T07:51:31Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchCommitProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchCommitRequest;\n+import io.seata.core.protocol.transaction.BranchCommitResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * process TC global commit command.\n+ * <p>\n+ * process message type:\n+ * {@link BranchCommitRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class RmBranchCommitProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmBranchCommitProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmBranchCommitProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm client handle branch commit process:\" + msg);\n+        }\n+        handleBranchCommit(rpcMessage, remoteAddress, (BranchCommitRequest) msg);\n+    }\n+\n+    private void handleBranchCommit(RpcMessage request, String serverAddress, BranchCommitRequest branchCommitRequest) {\n+        BranchCommitResponse resultMessage;\n+        resultMessage = (BranchCommitResponse) handler.onRequest(branchCommitRequest, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDY5MA=="}, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NTkxNTUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchRollbackProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNjowODozOFrOGVNRsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwNzo1MTozN1rOGVQJxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDgwMw==", "bodyText": "same as above", "url": "https://github.com/seata/seata/pull/2477#discussion_r424890803", "createdAt": "2020-05-14T06:08:38Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchRollbackProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * process TC do global rollback command.\n+ * <p>\n+ * process message type:\n+ * {@link BranchRollbackRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class RmBranchRollbackProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmBranchRollbackProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmBranchRollbackProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm handle branch rollback process:\" + msg);\n+        }\n+        handleBranchRollback(rpcMessage, remoteAddress, (BranchRollbackRequest) msg);\n+    }\n+\n+    private void handleBranchRollback(RpcMessage request, String serverAddress, BranchRollbackRequest branchRollbackRequest) {\n+        BranchRollbackResponse resultMessage;\n+        resultMessage = (BranchRollbackResponse) handler.onRequest(branchRollbackRequest, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDkzNzkyNQ==", "bodyText": "Trycatch has been done in the following method\uff1a\nio.seata.core.rpc.netty.AbstractNettyRemoting#processMessage", "url": "https://github.com/seata/seata/pull/2477#discussion_r424937925", "createdAt": "2020-05-14T07:51:37Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/processor/client/RmBranchRollbackProcessor.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.common.util.NetUtil;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRollbackRequest;\n+import io.seata.core.protocol.transaction.BranchRollbackResponse;\n+import io.seata.core.rpc.RemotingClient;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * process TC do global rollback command.\n+ * <p>\n+ * process message type:\n+ * {@link BranchRollbackRequest}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class RmBranchRollbackProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(RmBranchRollbackProcessor.class);\n+\n+    private TransactionMessageHandler handler;\n+\n+    private RemotingClient remotingClient;\n+\n+    public RmBranchRollbackProcessor(TransactionMessageHandler handler, RemotingClient remotingClient) {\n+        this.handler = handler;\n+        this.remotingClient = remotingClient;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        String remoteAddress = NetUtil.toStringAddress(ctx.channel().remoteAddress());\n+        Object msg = rpcMessage.getBody();\n+        if (LOGGER.isInfoEnabled()) {\n+            LOGGER.info(\"rm handle branch rollback process:\" + msg);\n+        }\n+        handleBranchRollback(rpcMessage, remoteAddress, (BranchRollbackRequest) msg);\n+    }\n+\n+    private void handleBranchRollback(RpcMessage request, String serverAddress, BranchRollbackRequest branchRollbackRequest) {\n+        BranchRollbackResponse resultMessage;\n+        resultMessage = (BranchRollbackResponse) handler.onRequest(branchRollbackRequest, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDg5MDgwMw=="}, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTcyMDc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/processor/client/ClientOnResponseProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzoyMzoxMVrOGWqaXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODoyMjowNVrOGWsacQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjczMw==", "bodyText": "I think this 'if' can be removed.", "url": "https://github.com/seata/seata/pull/2477#discussion_r426416733", "createdAt": "2020-05-18T07:23:11Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/rpc/processor/client/ClientOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RegisterRMResponse;\n+import io.seata.core.protocol.RegisterTMResponse;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRegisterResponse;\n+import io.seata.core.protocol.transaction.BranchReportResponse;\n+import io.seata.core.protocol.transaction.GlobalBeginResponse;\n+import io.seata.core.protocol.transaction.GlobalCommitResponse;\n+import io.seata.core.protocol.transaction.GlobalLockQueryResponse;\n+import io.seata.core.protocol.transaction.GlobalReportResponse;\n+import io.seata.core.protocol.transaction.GlobalRollbackResponse;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * process TC response message.\n+ * <p>\n+ * process message type:\n+ * RM:\n+ * 1) {@link MergeResultMessage}\n+ * 2) {@link RegisterRMResponse}\n+ * 3) {@link BranchRegisterResponse}\n+ * 4) {@link BranchReportResponse}\n+ * 5) {@link GlobalLockQueryResponse}\n+ * TM:\n+ * 1) {@link MergeResultMessage}\n+ * 2) {@link RegisterTMResponse}\n+ * 3) {@link GlobalBeginResponse}\n+ * 4) {@link GlobalCommitResponse}\n+ * 5) {@link GlobalReportResponse}\n+ * 6) {@link GlobalRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ClientOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientOnResponseProcessor.class);\n+\n+    /**\n+     * The Merge msg map from io.seata.core.rpc.netty.AbstractNettyRemotingClient#mergeMsgMap.\n+     */\n+    private Map<Integer, MergeMessage> mergeMsgMap;\n+\n+    /**\n+     * The Futures from io.seata.core.rpc.netty.AbstractNettyRemoting#futures\n+     */\n+    private ConcurrentMap<Integer, MessageFuture> futures;\n+\n+    /**\n+     * To handle the received RPC message on upper level.\n+     */\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    public ClientOnResponseProcessor(Map<Integer, MergeMessage> mergeMsgMap,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures,\n+                                     TransactionMessageHandler transactionMessageHandler) {\n+        this.mergeMsgMap = mergeMsgMap;\n+        this.futures = futures;\n+        this.transactionMessageHandler = transactionMessageHandler;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        if (rpcMessage.getBody() instanceof MergeResultMessage) {\n+            MergeResultMessage results = (MergeResultMessage) rpcMessage.getBody();\n+            MergedWarpMessage mergeMessage = (MergedWarpMessage) mergeMsgMap.remove(rpcMessage.getId());\n+            for (int i = 0; i < mergeMessage.msgs.size(); i++) {\n+                int msgId = mergeMessage.msgIds.get(i);\n+                MessageFuture future = futures.remove(msgId);\n+                if (future == null) {\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"msg: {} is not found in futures.\", msgId);\n+                    }\n+                } else {\n+                    future.setResultMessage(results.getMsgs()[i]);\n+                }\n+            }\n+        } else {\n+            MessageFuture messageFuture = null;\n+            if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0OTUyMQ==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2477#discussion_r426449521", "createdAt": "2020-05-18T08:22:05Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/processor/client/ClientOnResponseProcessor.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.rpc.processor.client;\n+\n+import io.netty.channel.ChannelHandlerContext;\n+import io.seata.core.protocol.AbstractResultMessage;\n+import io.seata.core.protocol.MergeMessage;\n+import io.seata.core.protocol.MergeResultMessage;\n+import io.seata.core.protocol.MergedWarpMessage;\n+import io.seata.core.protocol.MessageFuture;\n+import io.seata.core.protocol.RegisterRMResponse;\n+import io.seata.core.protocol.RegisterTMResponse;\n+import io.seata.core.protocol.RpcMessage;\n+import io.seata.core.protocol.transaction.BranchRegisterResponse;\n+import io.seata.core.protocol.transaction.BranchReportResponse;\n+import io.seata.core.protocol.transaction.GlobalBeginResponse;\n+import io.seata.core.protocol.transaction.GlobalCommitResponse;\n+import io.seata.core.protocol.transaction.GlobalLockQueryResponse;\n+import io.seata.core.protocol.transaction.GlobalReportResponse;\n+import io.seata.core.protocol.transaction.GlobalRollbackResponse;\n+import io.seata.core.rpc.TransactionMessageHandler;\n+import io.seata.core.rpc.processor.RemotingProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ * process TC response message.\n+ * <p>\n+ * process message type:\n+ * RM:\n+ * 1) {@link MergeResultMessage}\n+ * 2) {@link RegisterRMResponse}\n+ * 3) {@link BranchRegisterResponse}\n+ * 4) {@link BranchReportResponse}\n+ * 5) {@link GlobalLockQueryResponse}\n+ * TM:\n+ * 1) {@link MergeResultMessage}\n+ * 2) {@link RegisterTMResponse}\n+ * 3) {@link GlobalBeginResponse}\n+ * 4) {@link GlobalCommitResponse}\n+ * 5) {@link GlobalReportResponse}\n+ * 6) {@link GlobalRollbackResponse}\n+ *\n+ * @author zhangchenghui.dev@gmail.com\n+ * @since 1.3.0\n+ */\n+public class ClientOnResponseProcessor implements RemotingProcessor {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ClientOnResponseProcessor.class);\n+\n+    /**\n+     * The Merge msg map from io.seata.core.rpc.netty.AbstractNettyRemotingClient#mergeMsgMap.\n+     */\n+    private Map<Integer, MergeMessage> mergeMsgMap;\n+\n+    /**\n+     * The Futures from io.seata.core.rpc.netty.AbstractNettyRemoting#futures\n+     */\n+    private ConcurrentMap<Integer, MessageFuture> futures;\n+\n+    /**\n+     * To handle the received RPC message on upper level.\n+     */\n+    private TransactionMessageHandler transactionMessageHandler;\n+\n+    public ClientOnResponseProcessor(Map<Integer, MergeMessage> mergeMsgMap,\n+                                     ConcurrentHashMap<Integer, MessageFuture> futures,\n+                                     TransactionMessageHandler transactionMessageHandler) {\n+        this.mergeMsgMap = mergeMsgMap;\n+        this.futures = futures;\n+        this.transactionMessageHandler = transactionMessageHandler;\n+    }\n+\n+    @Override\n+    public void process(ChannelHandlerContext ctx, RpcMessage rpcMessage) throws Exception {\n+        if (rpcMessage.getBody() instanceof MergeResultMessage) {\n+            MergeResultMessage results = (MergeResultMessage) rpcMessage.getBody();\n+            MergedWarpMessage mergeMessage = (MergedWarpMessage) mergeMsgMap.remove(rpcMessage.getId());\n+            for (int i = 0; i < mergeMessage.msgs.size(); i++) {\n+                int msgId = mergeMessage.msgIds.get(i);\n+                MessageFuture future = futures.remove(msgId);\n+                if (future == null) {\n+                    if (LOGGER.isInfoEnabled()) {\n+                        LOGGER.info(\"msg: {} is not found in futures.\", msgId);\n+                    }\n+                } else {\n+                    future.setResultMessage(results.getMsgs()[i]);\n+                }\n+            }\n+        } else {\n+            MessageFuture messageFuture = null;\n+            if (!(rpcMessage.getBody() instanceof MergeResultMessage)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQxNjczMw=="}, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1NTgxMjY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/io/seata/core/rpc/netty/RmRpcClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwNzo1MDoyMlrOGWrSIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOFQwODoyMjoxM1rOGWsayQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzMTAxMQ==", "bodyText": "why some registerProcessor have 'super.' and some have not.", "url": "https://github.com/seata/seata/pull/2477#discussion_r426431011", "createdAt": "2020-05-18T07:50:22Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/rpc/netty/RmRpcClient.java", "diffHunk": "@@ -247,4 +256,27 @@ public String getMergedResourceKeys() {\n         }\n         return null;\n     }\n+\n+    private void registerProcessor() {\n+        // 1.registry rm client handle branch commit processor\n+        RmBranchCommitProcessor rmBranchCommitProcessor = new RmBranchCommitProcessor(getTransactionMessageHandler(), this);\n+        registerProcessor(MessageType.TYPE_BRANCH_COMMIT, rmBranchCommitProcessor, messageExecutor);\n+        // 2.registry rm client handle branch commit processor\n+        RmBranchRollbackProcessor rmBranchRollbackProcessor = new RmBranchRollbackProcessor(getTransactionMessageHandler(), this);\n+        registerProcessor(MessageType.TYPE_BRANCH_ROLLBACK, rmBranchRollbackProcessor, messageExecutor);\n+        // 3.registry rm handler undo log processor\n+        RmUndoLogProcessor rmUndoLogProcessor = new RmUndoLogProcessor(getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_RM_DELETE_UNDOLOG, rmUndoLogProcessor, messageExecutor);\n+        // 4.registry TC response processor\n+        ClientOnResponseProcessor onResponseProcessor =\n+            new ClientOnResponseProcessor(mergeMsgMap, super.getFutures(), getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_SEATA_MERGE_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_BRANCH_REGISTER_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_BRANCH_STATUS_REPORT_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_GLOBAL_LOCK_QUERY_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_REG_RM_RESULT, onResponseProcessor, null);\n+        // 5.registry heartbeat message processor\n+        ClientHeartbeatProcessor clientHeartbeatProcessor = new ClientHeartbeatProcessor();\n+        super.registerProcessor(MessageType.TYPE_HEARTBEAT_MSG, clientHeartbeatProcessor, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQ0OTYwOQ==", "bodyText": "Done.", "url": "https://github.com/seata/seata/pull/2477#discussion_r426449609", "createdAt": "2020-05-18T08:22:13Z", "author": {"login": "objcoding"}, "path": "core/src/main/java/io/seata/core/rpc/netty/RmRpcClient.java", "diffHunk": "@@ -247,4 +256,27 @@ public String getMergedResourceKeys() {\n         }\n         return null;\n     }\n+\n+    private void registerProcessor() {\n+        // 1.registry rm client handle branch commit processor\n+        RmBranchCommitProcessor rmBranchCommitProcessor = new RmBranchCommitProcessor(getTransactionMessageHandler(), this);\n+        registerProcessor(MessageType.TYPE_BRANCH_COMMIT, rmBranchCommitProcessor, messageExecutor);\n+        // 2.registry rm client handle branch commit processor\n+        RmBranchRollbackProcessor rmBranchRollbackProcessor = new RmBranchRollbackProcessor(getTransactionMessageHandler(), this);\n+        registerProcessor(MessageType.TYPE_BRANCH_ROLLBACK, rmBranchRollbackProcessor, messageExecutor);\n+        // 3.registry rm handler undo log processor\n+        RmUndoLogProcessor rmUndoLogProcessor = new RmUndoLogProcessor(getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_RM_DELETE_UNDOLOG, rmUndoLogProcessor, messageExecutor);\n+        // 4.registry TC response processor\n+        ClientOnResponseProcessor onResponseProcessor =\n+            new ClientOnResponseProcessor(mergeMsgMap, super.getFutures(), getTransactionMessageHandler());\n+        registerProcessor(MessageType.TYPE_SEATA_MERGE_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_BRANCH_REGISTER_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_BRANCH_STATUS_REPORT_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_GLOBAL_LOCK_QUERY_RESULT, onResponseProcessor, null);\n+        registerProcessor(MessageType.TYPE_REG_RM_RESULT, onResponseProcessor, null);\n+        // 5.registry heartbeat message processor\n+        ClientHeartbeatProcessor clientHeartbeatProcessor = new ClientHeartbeatProcessor();\n+        super.registerProcessor(MessageType.TYPE_HEARTBEAT_MSG, clientHeartbeatProcessor, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjQzMTAxMQ=="}, "originalCommit": {"oid": "a56d04edf01f24ab1d229070c04e9c47f7364e4f"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1506, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}