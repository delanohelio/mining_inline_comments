{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMzMxNDkz", "number": 2323, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo0MTo0M1rODkjrGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNzoyMlrODqZr_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjU5ODAwOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo0MTo0M1rOFw8hmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMzoyNzoxM1rOFyBXIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NzYwOA==", "bodyText": "In JDK Proxy case, what invocationHandler has a field of type DataSourceProxy?", "url": "https://github.com/seata/seata/pull/2323#discussion_r386867608", "createdAt": "2020-03-03T08:41:43Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        Field field = null;\n+        //handle Normal proxy object\n+        if (ClassUtils.isCglibProxy(proxyTargetObject)) {\n+            //CGLIB Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        } else if (Proxy.isProxyClass(proxyTargetObject.getClass())) {\n+            //JDK Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"h\");\n+        }\n+        return doCheckAutoProxy(field, proxyTargetObject);\n+    }\n+\n+    /**\n+     * do check auto proxy\n+     *\n+     * @param field\n+     * @param proxiedObject\n+     * @return\n+     * @throws IllegalAccessException\n+     */\n+    private boolean doCheckAutoProxy(Field field, Object proxiedObject) throws IllegalAccessException {\n+        if (null == field) {\n+            return false;\n+        }\n+        field.setAccessible(true);\n+        Object fieldObject = field.get(proxiedObject);\n+        return Stream.of(fieldObject.getClass().getDeclaredFields()).anyMatch(f -> {\n+            f.setAccessible(true);\n+            Object targetObject;\n+            try {\n+                targetObject = f.get(fieldObject);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+            return targetObject instanceof DataSourceProxy;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bda41411a8c24b293d36d85cca4ff29db6f12bc"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzk5NTQyNw==", "bodyText": "When datasource bean has been proxied once.", "url": "https://github.com/seata/seata/pull/2323#discussion_r387995427", "createdAt": "2020-03-04T23:27:13Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        Field field = null;\n+        //handle Normal proxy object\n+        if (ClassUtils.isCglibProxy(proxyTargetObject)) {\n+            //CGLIB Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        } else if (Proxy.isProxyClass(proxyTargetObject.getClass())) {\n+            //JDK Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"h\");\n+        }\n+        return doCheckAutoProxy(field, proxyTargetObject);\n+    }\n+\n+    /**\n+     * do check auto proxy\n+     *\n+     * @param field\n+     * @param proxiedObject\n+     * @return\n+     * @throws IllegalAccessException\n+     */\n+    private boolean doCheckAutoProxy(Field field, Object proxiedObject) throws IllegalAccessException {\n+        if (null == field) {\n+            return false;\n+        }\n+        field.setAccessible(true);\n+        Object fieldObject = field.get(proxiedObject);\n+        return Stream.of(fieldObject.getClass().getDeclaredFields()).anyMatch(f -> {\n+            f.setAccessible(true);\n+            Object targetObject;\n+            try {\n+                targetObject = f.get(fieldObject);\n+            } catch (IllegalAccessException e) {\n+                throw new RuntimeException(e);\n+            }\n+            return targetObject instanceof DataSourceProxy;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2NzYwOA=="}, "originalCommit": {"oid": "7bda41411a8c24b293d36d85cca4ff29db6f12bc"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NjYwMDQ0OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwODo0MjozNFrOFw8jIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMTo1MjoyOVrOFyqyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2ODAwMg==", "bodyText": "Need to restore accessible?", "url": "https://github.com/seata/seata/pull/2323#discussion_r386868002", "createdAt": "2020-03-03T08:42:34Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        Field field = null;\n+        //handle Normal proxy object\n+        if (ClassUtils.isCglibProxy(proxyTargetObject)) {\n+            //CGLIB Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        } else if (Proxy.isProxyClass(proxyTargetObject.getClass())) {\n+            //JDK Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"h\");\n+        }\n+        return doCheckAutoProxy(field, proxyTargetObject);\n+    }\n+\n+    /**\n+     * do check auto proxy\n+     *\n+     * @param field\n+     * @param proxiedObject\n+     * @return\n+     * @throws IllegalAccessException\n+     */\n+    private boolean doCheckAutoProxy(Field field, Object proxiedObject) throws IllegalAccessException {\n+        if (null == field) {\n+            return false;\n+        }\n+        field.setAccessible(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bda41411a8c24b293d36d85cca4ff29db6f12bc"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY3NDEwMA==", "bodyText": "fixed", "url": "https://github.com/seata/seata/pull/2323#discussion_r388674100", "createdAt": "2020-03-06T01:52:29Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        Field field = null;\n+        //handle Normal proxy object\n+        if (ClassUtils.isCglibProxy(proxyTargetObject)) {\n+            //CGLIB Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        } else if (Proxy.isProxyClass(proxyTargetObject.getClass())) {\n+            //JDK Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"h\");\n+        }\n+        return doCheckAutoProxy(field, proxyTargetObject);\n+    }\n+\n+    /**\n+     * do check auto proxy\n+     *\n+     * @param field\n+     * @param proxiedObject\n+     * @return\n+     * @throws IllegalAccessException\n+     */\n+    private boolean doCheckAutoProxy(Field field, Object proxiedObject) throws IllegalAccessException {\n+        if (null == field) {\n+            return false;\n+        }\n+        field.setAccessible(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njg2ODAwMg=="}, "originalCommit": {"oid": "7bda41411a8c24b293d36d85cca4ff29db6f12bc"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjE1NDAxOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTozMTowOFrOFyYNrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNTo0NTo0MVrOFyY0CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2OTgzNw==", "bodyText": "only for cglib?", "url": "https://github.com/seata/seata/pull/2323#discussion_r388369837", "createdAt": "2020-03-05T15:31:08Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM3OTY1Nw==", "bodyText": "Both of jdk and cglib.", "url": "https://github.com/seata/seata/pull/2323#discussion_r388379657", "createdAt": "2020-03-05T15:45:41Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM2OTgzNw=="}, "originalCommit": {"oid": "75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMwMzY0OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNDo1M1rOFyZq7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwMTo1MjoxOVrOFyqyAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MzcxMA==", "bodyText": "getClass -> getSuperclass", "url": "https://github.com/seata/seata/pull/2323#discussion_r388393710", "createdAt": "2020-03-05T16:04:53Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        Field field = null;\n+        //handle Normal proxy object\n+        if (ClassUtils.isCglibProxy(proxyTargetObject)) {\n+            //CGLIB Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        } else if (Proxy.isProxyClass(proxyTargetObject.getClass())) {\n+            //JDK Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"h\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODY3NDA1MQ==", "bodyText": "fixed", "url": "https://github.com/seata/seata/pull/2323#discussion_r388674051", "createdAt": "2020-03-06T01:52:19Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataDataSourceBeanPostProcessor.java", "diffHunk": "@@ -105,4 +113,62 @@ private Object handleMethodProxy(DataSourceProxy dataSourceProxy, Method method,\n             }\n         }\n     }\n+\n+    /**\n+     * is auto proxied by seata\n+     *\n+     * @param bean\n+     * @return true, if this bean has been auto-proxied by seata\n+     */\n+    private boolean isAutoProxiedBySeata(Object bean) throws NoSuchFieldException, IllegalAccessException {\n+        if (bean instanceof DataSourceProxy) {\n+            return true;\n+        }\n+        //handle Spring AOP\n+        Object proxyTargetObject = bean;\n+        if (AopUtils.isAopProxy(proxyTargetObject)) {\n+            try {\n+                proxyTargetObject = SpringProxyUtils.getAdvisedSupport(bean).getTargetSource().getTarget();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        Field field = null;\n+        //handle Normal proxy object\n+        if (ClassUtils.isCglibProxy(proxyTargetObject)) {\n+            //CGLIB Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"CGLIB$CALLBACK_0\");\n+        } else if (Proxy.isProxyClass(proxyTargetObject.getClass())) {\n+            //JDK Proxy\n+            field = proxyTargetObject.getClass().getDeclaredField(\"h\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5MzcxMA=="}, "originalCommit": {"oid": "75f8b4a9be0cb50ad8d7a9efc8af96a13339a6c0"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDE1OTgwOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/datasource/EnableAutoDataSourceProxy.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzowNTowOFrOF3bSgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNDoxMzo0OVrOF4wT_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MzEwNQ==", "bodyText": "Do we need a include attribute?", "url": "https://github.com/seata/seata/pull/2323#discussion_r393663105", "createdAt": "2020-03-17T13:05:08Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/EnableAutoDataSourceProxy.java", "diffHunk": "@@ -38,4 +38,10 @@\n      * @return useJdkProxy\n      */\n     boolean useJdkProxy() default false;\n+\n+    /**\n+     * Specifies which datasource bean are not eligible for auto-proxying\n+     * @return\n+     */\n+    String[] exclude() default {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMjEwMw==", "bodyText": "I don't think we need the include attribute, and exclude is only to avoid unnecessary proxy. In fact, even if the proxy, it won't have any impact.", "url": "https://github.com/seata/seata/pull/2323#discussion_r393802103", "createdAt": "2020-03-17T16:18:41Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/EnableAutoDataSourceProxy.java", "diffHunk": "@@ -38,4 +38,10 @@\n      * @return useJdkProxy\n      */\n     boolean useJdkProxy() default false;\n+\n+    /**\n+     * Specifies which datasource bean are not eligible for auto-proxying\n+     * @return\n+     */\n+    String[] exclude() default {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MzEwNQ=="}, "originalCommit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA5MDQyMg==", "bodyText": "It makes sense. But I think include is an effective feature helping users to control auto proxying, avoiding unexpected situations, there is no harm to provide such a function.\nBy the way, should exclude be excludes? Because the attribute is array type.", "url": "https://github.com/seata/seata/pull/2323#discussion_r394090422", "createdAt": "2020-03-18T03:40:13Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/EnableAutoDataSourceProxy.java", "diffHunk": "@@ -38,4 +38,10 @@\n      * @return useJdkProxy\n      */\n     boolean useJdkProxy() default false;\n+\n+    /**\n+     * Specifies which datasource bean are not eligible for auto-proxying\n+     * @return\n+     */\n+    String[] exclude() default {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MzEwNQ=="}, "originalCommit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA1NjEyNA==", "bodyText": "done", "url": "https://github.com/seata/seata/pull/2323#discussion_r395056124", "createdAt": "2020-03-19T14:13:49Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/EnableAutoDataSourceProxy.java", "diffHunk": "@@ -38,4 +38,10 @@\n      * @return useJdkProxy\n      */\n     boolean useJdkProxy() default false;\n+\n+    /**\n+     * Specifies which datasource bean are not eligible for auto-proxying\n+     * @return\n+     */\n+    String[] exclude() default {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2MzEwNQ=="}, "originalCommit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDIyNjQzOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxMzoyMjozNlrOF3b9mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoyMDowNFrOF3j1Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NDEzOA==", "bodyText": "I have an idea, ProxyCreator can be implement like this:\n// define a mark interface\npublic interface SeataProxy {\n}\n\n// implements MethodInterceptor and IntroductionInfo\npublic class SeataAutoDataSourceProxyAdvice implements MethodInterceptor, IntroductionInfo {\n    private final DataSourceProxy dataSourceProxy;\n\n    public SeataAutoDataSourceProxyAdvice(DataSourceProxy dataSourceProxy) {\n        this.dataSourceProxy = dataSourceProxy;\n    }\n    \n    ...\n\n    @Override\n    public Class<?>[] getInterfaces() {\n        return new Class[]{SeataProxy.class};\n    }\n}\n\n// extends AbstractAutoProxyCreator\npublic class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {\n    protected abstract Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException {\n        advice = new SeataAutoDataSourceProxyAdvice()\n        // use DefaultIntroductionAdvisor\n        advisor = new DefaultIntroductionAdvisor(advice);\n        return new Object[]{advisor};\n    }\n \n    @Override    \n    protected boolean shouldSkip(Class<?> beanClass, String beanName) {\n        return SeataProxy.class.isAssignableFrom(beanClass) || beanName ....;\n    }\n}", "url": "https://github.com/seata/seata/pull/2323#discussion_r393674138", "createdAt": "2020-03-17T13:22:36Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyCreator.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.datasource;\n+\n+import javax.sql.DataSource;\n+import java.util.stream.Stream;\n+\n+import io.seata.rm.datasource.DataSourceProxy;\n+import io.seata.spring.util.SpringProxyUtils;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.Advisor;\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.AdvisedSupport;\n+import org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.beans.BeansException;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzgwMzA0Ng==", "bodyText": "Good idea!!", "url": "https://github.com/seata/seata/pull/2323#discussion_r393803046", "createdAt": "2020-03-17T16:20:04Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyCreator.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.datasource;\n+\n+import javax.sql.DataSource;\n+import java.util.stream.Stream;\n+\n+import io.seata.rm.datasource.DataSourceProxy;\n+import io.seata.spring.util.SpringProxyUtils;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.Advisor;\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.AdvisedSupport;\n+import org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.beans.BeansException;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3NDEzOA=="}, "originalCommit": {"oid": "7c20a0721b5cbc55460d780b639b200a5e585266"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTA0MTUxOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDo0NDowM1rOF5Hk9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDo0MDoxMlrOF5WdHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNzMwMw==", "bodyText": "What I thought is to not override wrapIfNecessary and fully make use of AbstractAutoProxyCreator, something like this:\npublic class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {\n    private final String[] excludes;\n\n    private final DefaultIntroductionAdvisor advisor = new DefaultIntroductionAdvisor(new SeataAutoDataSourceProxyAdvice());\n\n    public SeataAutoDataSourceProxyCreator(boolean useJdkProxy, String[] excludes) {\n        this.excludes = excludes;\n        setProxyTargetClass(!useJdkProxy);\n    }\n\n    @Override\n    protected Object[] getAdvicesAndAdvisorsForBean(Class<?> beanClass, String beanName, TargetSource customTargetSource) throws BeansException {\n        return new Object[]{advisor};\n    }\n\n    @Override\n    protected boolean shouldSkip(Class<?> beanClass, String beanName) {\n        return SeataProxy.class.isAssignableFrom(beanClass) ||\n                !DataSource.class.isAssignableFrom(beanClass) ||\n                Arrays.asList(excludes).contains(beanClass.getName());\n    }\n}\n\npublic class SeataAutoDataSourceProxyAdvice implements MethodInterceptor, IntroductionInfo {\n    @Override\n    public Object invoke(MethodInvocation invocation) throws Throwable {\n        DataSource dataSource = (DataSource) invocation.getThis();\n        DataSourceProxy dataSourceProxy = DataSourceProxyHolder.get().putDataSource(dataSource);\n        Method method = invocation.getMethod();\n        Object[] args = invocation.getArguments();\n        Method m = BeanUtils.findDeclaredMethod(DataSourceProxy.class, method.getName(), method.getParameterTypes());\n        if (null != m) {\n            return m.invoke(dataSourceProxy, args);\n        } else {\n            return invocation.proceed();\n        }\n    }\n\n    @Override\n    public Class<?>[] getInterfaces() {\n        return new Class[]{SeataProxy.class};\n    }\n\n}", "url": "https://github.com/seata/seata/pull/2323#discussion_r395437303", "createdAt": "2020-03-20T04:44:03Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyCreator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.datasource;\n+\n+import javax.sql.DataSource;\n+import java.util.Arrays;\n+\n+import io.seata.rm.datasource.DataSourceProxy;\n+import io.seata.spring.util.SpringProxyUtils;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.Advisor;\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.AdvisedSupport;\n+import org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.aop.support.DefaultIntroductionAdvisor;\n+import org.springframework.beans.BeansException;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SeataAutoDataSourceProxyCreator.class);\n+    private MethodInterceptor advice;\n+    private final String[] excludes;\n+\n+    public SeataAutoDataSourceProxyCreator(boolean useJdkProxy, String[] excludes) {\n+        this.excludes = excludes;\n+        setProxyTargetClass(!useJdkProxy);\n+    }\n+\n+    @Override\n+    protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e915d049e8a666f667e5f0541677b80706177d3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4MTA1Mw==", "bodyText": "Fixed.Thanks.", "url": "https://github.com/seata/seata/pull/2323#discussion_r395681053", "createdAt": "2020-03-20T14:40:12Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyCreator.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.datasource;\n+\n+import javax.sql.DataSource;\n+import java.util.Arrays;\n+\n+import io.seata.rm.datasource.DataSourceProxy;\n+import io.seata.spring.util.SpringProxyUtils;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.aop.Advisor;\n+import org.springframework.aop.TargetSource;\n+import org.springframework.aop.framework.AdvisedSupport;\n+import org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator;\n+import org.springframework.aop.support.AopUtils;\n+import org.springframework.aop.support.DefaultIntroductionAdvisor;\n+import org.springframework.beans.BeansException;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class SeataAutoDataSourceProxyCreator extends AbstractAutoProxyCreator {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(SeataAutoDataSourceProxyCreator.class);\n+    private MethodInterceptor advice;\n+    private final String[] excludes;\n+\n+    public SeataAutoDataSourceProxyCreator(boolean useJdkProxy, String[] excludes) {\n+        this.excludes = excludes;\n+        setProxyTargetClass(!useJdkProxy);\n+    }\n+\n+    @Override\n+    protected Object wrapIfNecessary(Object bean, String beanName, Object cacheKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNzMwMw=="}, "originalCommit": {"oid": "8e915d049e8a666f667e5f0541677b80706177d3"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTA0MjMzOnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/datasource/AutoDataSourceProxyRegistrar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNDo0NTowNVrOF5HleQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxNDo0MDoyOFrOF5WdxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNzQzMw==", "bodyText": "excludes?", "url": "https://github.com/seata/seata/pull/2323#discussion_r395437433", "createdAt": "2020-03-20T04:45:05Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/AutoDataSourceProxyRegistrar.java", "diffHunk": "@@ -27,16 +27,20 @@\n  */\n public class AutoDataSourceProxyRegistrar implements ImportBeanDefinitionRegistrar {\n     private static final String ATTRIBUTE_KEY_USE_JDK_PROXY = \"useJdkProxy\";\n-    public static final String BEAN_NAME_SEATA_DATA_SOURCE_BEAN_POST_PROCESSOR = \"seataDataSourceBeanPostProcessor\";\n+    private static final String ATTRIBUTE_KEY_EXCLUDE = \"exclude\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e915d049e8a666f667e5f0541677b80706177d3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTY4MTIyMQ==", "bodyText": "Fixed", "url": "https://github.com/seata/seata/pull/2323#discussion_r395681221", "createdAt": "2020-03-20T14:40:28Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/AutoDataSourceProxyRegistrar.java", "diffHunk": "@@ -27,16 +27,20 @@\n  */\n public class AutoDataSourceProxyRegistrar implements ImportBeanDefinitionRegistrar {\n     private static final String ATTRIBUTE_KEY_USE_JDK_PROXY = \"useJdkProxy\";\n-    public static final String BEAN_NAME_SEATA_DATA_SOURCE_BEAN_POST_PROCESSOR = \"seataDataSourceBeanPostProcessor\";\n+    private static final String ATTRIBUTE_KEY_EXCLUDE = \"exclude\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQzNzQzMw=="}, "originalCommit": {"oid": "8e915d049e8a666f667e5f0541677b80706177d3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NzM4NTQ3OnYy", "diffSide": "RIGHT", "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxMjoyNToyM1rOF6DFAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNjowMToxOVrOF6MVAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMjE2Mg==", "bodyText": "ing means doing\uff1f", "url": "https://github.com/seata/seata/pull/2323#discussion_r396412162", "createdAt": "2020-03-23T12:25:23Z", "author": {"login": "slievrly"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java", "diffHunk": "@@ -101,4 +105,13 @@ public SeataProperties setUseJdkProxy(boolean useJdkProxy) {\n         this.useJdkProxy = useJdkProxy;\n         return this;\n     }\n+\n+    public String[] getExcludesForAutoProxying() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5f4fb4583f185ce1a5560c0e33cff993a1eae2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU2MzcxNA==", "bodyText": "Yes, but sometimes it means gerund.Need to change to proxy?", "url": "https://github.com/seata/seata/pull/2323#discussion_r396563714", "createdAt": "2020-03-23T16:01:19Z", "author": {"login": "xingfudeshi"}, "path": "seata-spring-boot-starter/src/main/java/io/seata/spring/boot/autoconfigure/properties/SeataProperties.java", "diffHunk": "@@ -101,4 +105,13 @@ public SeataProperties setUseJdkProxy(boolean useJdkProxy) {\n         this.useJdkProxy = useJdkProxy;\n         return this;\n     }\n+\n+    public String[] getExcludesForAutoProxying() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQxMjE2Mg=="}, "originalCommit": {"oid": "2a5f4fb4583f185ce1a5560c0e33cff993a1eae2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Nzg3NjQ2OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyAdvice.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNDoyNzoyMlrOF6H5lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNTo0OToxM1rOF6LvgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MTE1OA==", "bodyText": "Do we need to throw exception or log warning message when m == null?", "url": "https://github.com/seata/seata/pull/2323#discussion_r396491158", "createdAt": "2020-03-23T14:27:22Z", "author": {"login": "ggndnn"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyAdvice.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.datasource;\n+\n+import javax.sql.DataSource;\n+import java.lang.reflect.Method;\n+\n+import io.seata.rm.datasource.DataSourceProxy;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+import org.springframework.aop.IntroductionInfo;\n+import org.springframework.beans.BeanUtils;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class SeataAutoDataSourceProxyAdvice implements MethodInterceptor, IntroductionInfo {\n+\n+    @Override\n+    public Object invoke(MethodInvocation invocation) throws Throwable {\n+        DataSourceProxy dataSourceProxy = DataSourceProxyHolder.get().putDataSource((DataSource) invocation.getThis());\n+        Method method = invocation.getMethod();\n+        Object[] args = invocation.getArguments();\n+        Method m = BeanUtils.findDeclaredMethod(DataSourceProxy.class, method.getName(), method.getParameterTypes());\n+        if (null != m) {\n+            return m.invoke(dataSourceProxy, args);\n+        } else {\n+            return invocation.proceed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a5f4fb4583f185ce1a5560c0e33cff993a1eae2"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjU1NDExMg==", "bodyText": "When m=null,the method of original bean should be called.", "url": "https://github.com/seata/seata/pull/2323#discussion_r396554112", "createdAt": "2020-03-23T15:49:13Z", "author": {"login": "xingfudeshi"}, "path": "spring/src/main/java/io/seata/spring/annotation/datasource/SeataAutoDataSourceProxyAdvice.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.annotation.datasource;\n+\n+import javax.sql.DataSource;\n+import java.lang.reflect.Method;\n+\n+import io.seata.rm.datasource.DataSourceProxy;\n+import org.aopalliance.intercept.MethodInterceptor;\n+import org.aopalliance.intercept.MethodInvocation;\n+import org.springframework.aop.IntroductionInfo;\n+import org.springframework.beans.BeanUtils;\n+\n+/**\n+ * @author xingfudeshi@gmail.com\n+ */\n+public class SeataAutoDataSourceProxyAdvice implements MethodInterceptor, IntroductionInfo {\n+\n+    @Override\n+    public Object invoke(MethodInvocation invocation) throws Throwable {\n+        DataSourceProxy dataSourceProxy = DataSourceProxyHolder.get().putDataSource((DataSource) invocation.getThis());\n+        Method method = invocation.getMethod();\n+        Object[] args = invocation.getArguments();\n+        Method m = BeanUtils.findDeclaredMethod(DataSourceProxy.class, method.getName(), method.getParameterTypes());\n+        if (null != m) {\n+            return m.invoke(dataSourceProxy, args);\n+        } else {\n+            return invocation.proceed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjQ5MTE1OA=="}, "originalCommit": {"oid": "2a5f4fb4583f185ce1a5560c0e33cff993a1eae2"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1646, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}