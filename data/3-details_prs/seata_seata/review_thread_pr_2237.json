{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMDU4NzE5", "number": 2237, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNToyODozMlrODefwuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjoxNDoxOVrODeq4EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzA0MjUxOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNToyODozMlrOFnqWqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNjowNzoyOFrOFnr7aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEzMjcxMw==", "bodyText": "SessionHolder.destroy();  prevents other TestClasses from being deleted after creating data files.", "url": "https://github.com/seata/seata/pull/2237#discussion_r377132713", "createdAt": "2020-02-10T15:28:32Z", "author": {"login": "slievrly"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -220,22 +222,24 @@ public static void afterClass() throws Exception {\n         for (GlobalSession globalSession : globalSessions) {\n             globalSession.closeAndClean();\n         }\n-\n-        SessionHolder.destroy();\n     }\n \n     @AfterEach\n-    public void tearDown() {\n+    public void tearDown() throws IOException {\n+        SessionHolder.destroy();\n         deleteDataFile();\n     }\n \n-    private static void deleteDataFile() {\n+    private static void deleteDataFile() throws IOException {\n         File directory = new File(sessionStorePath);\n         File[] files = directory.listFiles();\n-        for (File file : files) {\n-            file.delete();\n+        if (files != null && files.length > 0) {\n+            for (File file : files) {\n+                Files.delete(Paths.get(file.getPath()));\n+            }\n         }\n     }\n+\n     private static void deleteAndCreateDataFile() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd6e09cd68e695af8efc8cec342e3b250cce6254"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzE1ODUwNw==", "bodyText": "added", "url": "https://github.com/seata/seata/pull/2237#discussion_r377158507", "createdAt": "2020-02-10T16:07:28Z", "author": {"login": "booogu"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -220,22 +222,24 @@ public static void afterClass() throws Exception {\n         for (GlobalSession globalSession : globalSessions) {\n             globalSession.closeAndClean();\n         }\n-\n-        SessionHolder.destroy();\n     }\n \n     @AfterEach\n-    public void tearDown() {\n+    public void tearDown() throws IOException {\n+        SessionHolder.destroy();\n         deleteDataFile();\n     }\n \n-    private static void deleteDataFile() {\n+    private static void deleteDataFile() throws IOException {\n         File directory = new File(sessionStorePath);\n         File[] files = directory.listFiles();\n-        for (File file : files) {\n-            file.delete();\n+        if (files != null && files.length > 0) {\n+            for (File file : files) {\n+                Files.delete(Paths.get(file.getPath()));\n+            }\n         }\n     }\n+\n     private static void deleteAndCreateDataFile() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzEzMjcxMw=="}, "originalCommit": {"oid": "fd6e09cd68e695af8efc8cec342e3b250cce6254"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDg2MzUyOnYy", "diffSide": "RIGHT", "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjoxNDoyMFrOFn75xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwMjozNzo0MFrOFn8J0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDIyOQ==", "bodyText": "This should be SessionHolder.destroy to determine whether or not null, SessionHolder as a static method class, there is no guarantee that the internal initialization.", "url": "https://github.com/seata/seata/pull/2237#discussion_r377420229", "createdAt": "2020-02-11T02:14:20Z", "author": {"login": "slievrly"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -220,27 +222,42 @@ public static void afterClass() throws Exception {\n         for (GlobalSession globalSession : globalSessions) {\n             globalSession.closeAndClean();\n         }\n-\n-        SessionHolder.destroy();\n     }\n \n     @AfterEach\n-    public void tearDown() {\n+    public void tearDown() throws IOException {\n+        destroySessionHolder();\n         deleteDataFile();\n     }\n \n-    private static void deleteDataFile() {\n+    private static void deleteDataFile() throws IOException {\n         File directory = new File(sessionStorePath);\n         File[] files = directory.listFiles();\n-        for (File file : files) {\n-            file.delete();\n+        if (files != null && files.length > 0) {\n+            for (File file : files) {\n+                Files.delete(Paths.get(file.getPath()));\n+            }\n         }\n     }\n+\n     private static void deleteAndCreateDataFile() throws IOException {\n+        destroySessionHolder();\n         deleteDataFile();\n         SessionHolder.init(StoreMode.FILE.name());\n     }\n \n+    private static void destroySessionHolder() {\n+        try {\n+            SessionHolder.getRootSessionManager();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d7edff8f9a1996a02588187a927d6ccf75975af"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyNDMzNw==", "bodyText": "yeah,now add null check in SessionHolder.destroy()", "url": "https://github.com/seata/seata/pull/2237#discussion_r377424337", "createdAt": "2020-02-11T02:37:40Z", "author": {"login": "booogu"}, "path": "server/src/test/java/io/seata/server/coordinator/DefaultCoordinatorTest.java", "diffHunk": "@@ -220,27 +222,42 @@ public static void afterClass() throws Exception {\n         for (GlobalSession globalSession : globalSessions) {\n             globalSession.closeAndClean();\n         }\n-\n-        SessionHolder.destroy();\n     }\n \n     @AfterEach\n-    public void tearDown() {\n+    public void tearDown() throws IOException {\n+        destroySessionHolder();\n         deleteDataFile();\n     }\n \n-    private static void deleteDataFile() {\n+    private static void deleteDataFile() throws IOException {\n         File directory = new File(sessionStorePath);\n         File[] files = directory.listFiles();\n-        for (File file : files) {\n-            file.delete();\n+        if (files != null && files.length > 0) {\n+            for (File file : files) {\n+                Files.delete(Paths.get(file.getPath()));\n+            }\n         }\n     }\n+\n     private static void deleteAndCreateDataFile() throws IOException {\n+        destroySessionHolder();\n         deleteDataFile();\n         SessionHolder.init(StoreMode.FILE.name());\n     }\n \n+    private static void destroySessionHolder() {\n+        try {\n+            SessionHolder.getRootSessionManager();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQyMDIyOQ=="}, "originalCommit": {"oid": "3d7edff8f9a1996a02588187a927d6ccf75975af"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1612, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}