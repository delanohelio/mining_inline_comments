{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NjA5NzU3", "number": 2412, "title": "optimize: changed xid generation strategy to snowflake ", "bodyText": "\u2160. Describe what this PR did\noptimize xid generation strategy\n\u2161. Does this pull request fix one issue?\n\n#2416\n\u2162. Why don't you add test cases (unit test/integration test)?\n\u2163. Describe how to verify it\n\u2164. Special notes for reviews", "createdAt": "2020-03-17T04:00:25Z", "url": "https://github.com/seata/seata/pull/2412", "merged": true, "mergeCommit": {"oid": "2dccac478fe0042ac55bf5f8902854d799deb4a8"}, "closed": true, "closedAt": "2020-05-04T06:17:00Z", "author": {"login": "a364176773"}, "timelineItems": {"totalCount": 61, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOaib5AH2gAyMzg5NjA5NzU3OmZiNGNhZGU1ODcxNjZiNTA0MzcyYTAxZGVkNDVjODk5Yjc1NDcxYWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcd2wLbgFqTQwNDY5MzU2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "fb4cade587166b504372a01ded45c899b75471ae", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/fb4cade587166b504372a01ded45c899b75471ae", "committedDate": "2020-03-17T03:56:10Z", "message": "optimize xid generation strategy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "136c91c75db6152edaeb336e8ceaf9de74f25099", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/136c91c75db6152edaeb336e8ceaf9de74f25099", "committedDate": "2020-03-17T04:58:15Z", "message": "change field length"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d206807c668461e2fc93f078c05198a238f31111", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/d206807c668461e2fc93f078c05198a238f31111", "committedDate": "2020-03-17T06:21:33Z", "message": "IdWorker Instantiate by service node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7571e3e8bd5307a1b077214bb5130f7493898ed4", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/7571e3e8bd5307a1b077214bb5130f7493898ed4", "committedDate": "2020-03-17T06:26:13Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d0d1d87fdfc0ce61074eb775c38905a1b07a2ab", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5d0d1d87fdfc0ce61074eb775c38905a1b07a2ab", "committedDate": "2020-03-18T01:21:52Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5758878b5ba4bc1752a8ab31b7283f2136aa9b5b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/5758878b5ba4bc1752a8ab31b7283f2136aa9b5b", "committedDate": "2020-03-18T05:52:40Z", "message": "fix code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3498c04fd4c2c0f7c9d6d1f3e899528c783838ec", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/3498c04fd4c2c0f7c9d6d1f3e899528c783838ec", "committedDate": "2020-03-19T03:19:34Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab899eef196954b98e16f34a1e51a34e5f987a07", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ab899eef196954b98e16f34a1e51a34e5f987a07", "committedDate": "2020-03-20T01:26:04Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "685efcfdf1e6c263ccfb17f9cbf24fc829cdb829", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/685efcfdf1e6c263ccfb17f9cbf24fc829cdb829", "committedDate": "2020-03-23T02:12:01Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8b8861c9bf2837fdaa981f5c1763338e41fcd0a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b8b8861c9bf2837fdaa981f5c1763338e41fcd0a", "committedDate": "2020-03-23T03:39:37Z", "message": "delete dead imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2ec57b3a5c40124cb61542732e461595deaaf8f", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/a2ec57b3a5c40124cb61542732e461595deaaf8f", "committedDate": "2020-03-24T02:16:11Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6683cb74e5a463e659d87c83b8f7245cfcc093c5", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/6683cb74e5a463e659d87c83b8f7245cfcc093c5", "committedDate": "2020-03-24T14:32:30Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f10a57cdca83a94b249dd5f124d169437f6def5", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1f10a57cdca83a94b249dd5f124d169437f6def5", "committedDate": "2020-03-28T13:07:39Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faa30f8c418b1778b2f7ca6541b3d55f89da695a", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/faa30f8c418b1778b2f7ca6541b3d55f89da695a", "committedDate": "2020-03-31T09:35:51Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "208ff66fb68bc889a1ccffa6f24df345d6b277ae", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/208ff66fb68bc889a1ccffa6f24df345d6b277ae", "committedDate": "2020-04-01T01:36:04Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dfaaf39e6131099350dc0a513b87e73e0d121df", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/2dfaaf39e6131099350dc0a513b87e73e0d121df", "committedDate": "2020-04-01T05:50:14Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd44dd3f55ae3edb435b9652d1be2463358429ef", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/cd44dd3f55ae3edb435b9652d1be2463358429ef", "committedDate": "2020-04-02T05:28:03Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b351f22a1689a20402aab21e9a2b2daeda43595", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/1b351f22a1689a20402aab21e9a2b2daeda43595", "committedDate": "2020-04-07T02:56:23Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a30d3482d8107c107b381c60108ec609eae9ee2", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/4a30d3482d8107c107b381c60108ec609eae9ee2", "committedDate": "2020-04-08T05:21:15Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4e7b159b47820fa0874c2495d1c1af0455c74f1", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f4e7b159b47820fa0874c2495d1c1af0455c74f1", "committedDate": "2020-04-10T03:19:29Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e77c3185070f27bcec1ddbddb63cdf82aad3f58e", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/e77c3185070f27bcec1ddbddb63cdf82aad3f58e", "committedDate": "2020-04-10T09:15:39Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba931f6d2ddfb84953b6434db0ac93c27ce8db4c", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/ba931f6d2ddfb84953b6434db0ac93c27ce8db4c", "committedDate": "2020-04-15T07:49:41Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1c74b30d7f3fab79c3cb6489d36a9a46a012f71", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f1c74b30d7f3fab79c3cb6489d36a9a46a012f71", "committedDate": "2020-04-15T08:02:29Z", "message": "optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "392ea5cf24fb17e92d76fe0de0b81f44c9bb1a74", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/392ea5cf24fb17e92d76fe0de0b81f44c9bb1a74", "committedDate": "2020-04-24T03:25:48Z", "message": "resolve conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7408eeea12802066f591e73aa0f67134baf8e960", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/7408eeea12802066f591e73aa0f67134baf8e960", "committedDate": "2020-04-24T03:27:42Z", "message": "standard code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "485d57b22501465779003afbae2f8e5b8d89b54b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/485d57b22501465779003afbae2f8e5b8d89b54b", "committedDate": "2020-04-24T03:38:08Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4d8b9c9a0369d6fbd81a9d967aade7e445a9da3", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/f4d8b9c9a0369d6fbd81a9d967aade7e445a9da3", "committedDate": "2020-04-26T07:51:47Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "537ac8df7e629e4645341bd148da16a0debe4a95", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/537ac8df7e629e4645341bd148da16a0debe4a95", "committedDate": "2020-04-29T08:13:32Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af150516446ed2bc6e888162864595bb70e3cd54", "author": {"user": {"login": "jsbxyyx", "name": "jsbxyyx"}}, "url": "https://github.com/seata/seata/commit/af150516446ed2bc6e888162864595bb70e3cd54", "committedDate": "2020-04-29T08:20:04Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTYzNzcw", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-403163770", "createdAt": "2020-04-30T02:30:17Z", "commit": {"oid": "af150516446ed2bc6e888162864595bb70e3cd54"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjozMDoxN1rOGOXn1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMjozMDoxN1rOGOXn1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcyMDI3Nw==", "bodyText": "Why remove the override?", "url": "https://github.com/seata/seata/pull/2412#discussion_r417720277", "createdAt": "2020-04-30T02:30:17Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/storage/db/session/DataBaseSessionManager.java", "diffHunk": "@@ -192,17 +191,12 @@ public GlobalSession findGlobalSession(String xid, boolean withBranchSessions) {\n         return transactionStoreManager.readSession(condition);\n     }\n \n-    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af150516446ed2bc6e888162864595bb70e3cd54"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/430cf5817fa3c98dda131045b71728bcbc99cb8b", "committedDate": "2020-04-30T03:53:43Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDEzNDc2", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404013476", "createdAt": "2020-05-01T04:18:01Z", "commit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDoxODowMVrOGPBtCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDoxODowMVrOGPBtCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwOTczOA==", "bodyText": "Why let the user config data center id?", "url": "https://github.com/seata/seata/pull/2412#discussion_r418409738", "createdAt": "2020-05-01T04:18:01Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/ParameterParser.java", "diffHunk": "@@ -47,11 +49,13 @@\n \n     private static final int SERVER_DEFAULT_PORT = 8091;\n     private static final String SERVER_DEFAULT_STORE_MODE = \"file\";\n-    private static final int SERVER_DEFAULT_NODE = 1;\n+    private static final Long SERVER_DEFAULT_NODE = ThreadLocalRandom.current().nextLong(32);\n+    private static final Long DATA_CENTER_DEFAULT_ID = ThreadLocalRandom.current().nextLong(32);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDIxMTA0", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404021104", "createdAt": "2020-05-01T04:59:27Z", "commit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDo1OToyN1rOGPCKvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDo1OToyN1rOGPCKvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNzM0MA==", "bodyText": "You can consider merge workderIdBits and datacenterIdBits. Actually they are same one.", "url": "https://github.com/seata/seata/pull/2412#discussion_r418417340", "createdAt": "2020-05-01T04:59:27Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2015-01-01)\n+     */\n+    private final long twepoch = 1546272000000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 5L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDIxMzM4", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404021338", "createdAt": "2020-05-01T05:00:41Z", "commit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTowMDo0MlrOGPCLmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNTowMDo0MlrOGPCLmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQxNzU2MA==", "bodyText": "And You can consider adjust the bit of each part, let it more compatible with our project.", "url": "https://github.com/seata/seata/pull/2412#discussion_r418417560", "createdAt": "2020-05-01T05:00:42Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "430cf5817fa3c98dda131045b71728bcbc99cb8b"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48a580d3d8dcc6c576c0c1781197f68ad232dbef", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/48a580d3d8dcc6c576c0c1781197f68ad232dbef", "committedDate": "2020-05-01T05:52:40Z", "message": "optimize code,merge workerId and data center id"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTc4Nzc4", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404578778", "createdAt": "2020-05-03T03:41:31Z", "commit": {"oid": "48a580d3d8dcc6c576c0c1781197f68ad232dbef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzo0MTozMlrOGPoRow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzo0MTozMlrOGPoRow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MTY5OQ==", "bodyText": "I think here can use single param instand of arrays.", "url": "https://github.com/seata/seata/pull/2412#discussion_r419041699", "createdAt": "2020-05-03T03:41:32Z", "author": {"login": "l81893521"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2015-01-01)\n+     */\n+    private final long twepoch = 1546272000000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public synchronized long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"Clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        if (lastTimestamp == timestamp) {\n+            sequence = (sequence + 1) & sequenceMask;\n+            if (sequence == 0) {\n+                timestamp = tilNextMillis(lastTimestamp);\n+            }\n+        } else {\n+            sequence = 0L;\n+        }\n+\n+        lastTimestamp = timestamp;\n+        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;\n+    }\n+\n+    /**\n+     * Block until the next millisecond until a new timestamp is obtained\n+     *\n+     * @param lastTimestamp\n+     *            Time of last ID generation\n+     * @return Current timestamp\n+     */\n+    protected long tilNextMillis(long lastTimestamp) {\n+        long timestamp = timeGen();\n+        while (timestamp <= lastTimestamp) {\n+            timestamp = timeGen();\n+        }\n+        return timestamp;\n+    }\n+\n+    /**\n+     * Returns the current time in milliseconds\n+     *\n+     * @return Current time (ms)\n+     */\n+    protected long timeGen() {\n+        return System.currentTimeMillis();\n+    }\n+\n+    public static IdWorker getInstance(Long... ids) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48a580d3d8dcc6c576c0c1781197f68ad232dbef"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0283ebff48fa3f0a0e358e896d7cf63a30a24d5f", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/0283ebff48fa3f0a0e358e896d7cf63a30a24d5f", "committedDate": "2020-05-03T04:32:48Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTgwODU3", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404580857", "createdAt": "2020-05-03T04:37:57Z", "commit": {"oid": "0283ebff48fa3f0a0e358e896d7cf63a30a24d5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDozNzo1N1rOGPoihw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwNDozNzo1N1rOGPoihw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0NjAyMw==", "bodyText": "How about change to Idworker.init(parameterParser.getServerNode())", "url": "https://github.com/seata/seata/pull/2412#discussion_r419046023", "createdAt": "2020-05-03T04:37:57Z", "author": {"login": "l81893521"}, "path": "server/src/main/java/io/seata/server/Server.java", "diffHunk": "@@ -80,7 +80,8 @@ public static void main(String[] args) throws IOException {\n         // register ShutdownHook\n         ShutdownHook.getInstance().addDisposable(coordinator);\n         ShutdownHook.getInstance().addDisposable(rpcServer);\n-\n+        //IdWorker Instantiate by service node\n+        IdWorker.getInstance(parameterParser.getServerNode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0283ebff48fa3f0a0e358e896d7cf63a30a24d5f"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59a0492466704fcc0cf22d8bb93989d985028da6", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/59a0492466704fcc0cf22d8bb93989d985028da6", "committedDate": "2020-05-03T04:55:02Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b52a5401d6f2f5dba950c5fe02a0945a94855da1", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b52a5401d6f2f5dba950c5fe02a0945a94855da1", "committedDate": "2020-05-03T04:56:45Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTgyMTMw", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404582130", "createdAt": "2020-05-03T05:07:04Z", "commit": {"oid": "b52a5401d6f2f5dba950c5fe02a0945a94855da1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3004fa4ca16747950b708be5ffe6ab795deff54b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/3004fa4ca16747950b708be5ffe6ab795deff54b", "committedDate": "2020-05-03T05:07:57Z", "message": "Merge branch 'develop' into xid_optimize"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NTg0NDAw", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404584400", "createdAt": "2020-05-03T05:55:31Z", "commit": {"oid": "3004fa4ca16747950b708be5ffe6ab795deff54b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0bca9b80ccf00183482b53a9683392872d50eb0", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b0bca9b80ccf00183482b53a9683392872d50eb0", "committedDate": "2020-05-03T06:03:50Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjE2OTkz", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404616993", "createdAt": "2020-05-03T13:09:09Z", "commit": {"oid": "b0bca9b80ccf00183482b53a9683392872d50eb0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMzowOTowOVrOGPr6zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxMzowOTowOVrOGPr6zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEwMTM4OQ==", "bodyText": "reduce lock area", "url": "https://github.com/seata/seata/pull/2412#discussion_r419101389", "createdAt": "2020-05-03T13:09:09Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public synchronized long nextId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0bca9b80ccf00183482b53a9683392872d50eb0"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/38de75d30e2df607781ec7bda7cebd5e64223fe1", "committedDate": "2020-05-03T14:48:17Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjI3NjE0", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404627614", "createdAt": "2020-05-03T15:04:31Z", "commit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNTowNDozMlrOGPs0Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNTowNDozMlrOGPs0Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExNjA2Mg==", "bodyText": "There is no thread safety problem in the return line", "url": "https://github.com/seata/seata/pull/2412#discussion_r419116062", "createdAt": "2020-05-03T15:04:32Z", "author": {"login": "zjinlei"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);\n+                }\n+            } else {\n+                sequence = 0L;\n+            }\n+\n+            lastTimestamp = timestamp;\n+            return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjI5MDUz", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404629053", "createdAt": "2020-05-03T15:19:40Z", "commit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNToxOTo0MFrOGPs77g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNToyMDoyOVrOGPs8Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExODA2Mg==", "bodyText": "use UUIDGenerator init, shield specific implementation.", "url": "https://github.com/seata/seata/pull/2412#discussion_r419118062", "createdAt": "2020-05-03T15:19:40Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/Server.java", "diffHunk": "@@ -80,7 +80,8 @@ public static void main(String[] args) throws IOException {\n         // register ShutdownHook\n         ShutdownHook.getInstance().addDisposable(coordinator);\n         ShutdownHook.getInstance().addDisposable(rpcServer);\n-\n+        //IdWorker Instantiate by service node\n+        IdWorker.init(parameterParser.getServerNode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTExODE1OA==", "bodyText": "remove final", "url": "https://github.com/seata/seata/pull/2412#discussion_r419118158", "createdAt": "2020-05-03T15:20:29Z", "author": {"login": "zjinlei"}, "path": "common/src/main/java/io/seata/common/util/NumberUtils.java", "diffHunk": "@@ -42,4 +42,15 @@ public static int toInt(final String str, final int defaultValue) {\n             return defaultValue;\n         }\n     }\n+\n+    public static Long toLong(String str, final Long defaultValue) {\n+        if (str == null) {\n+            return defaultValue;\n+        }\n+        try {\n+            return Long.valueOf(str);\n+        } catch (final NumberFormatException nfe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38de75d30e2df607781ec7bda7cebd5e64223fe1"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b50718319badbe05ee36339266794a9b4f25ef", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/24b50718319badbe05ee36339266794a9b4f25ef", "committedDate": "2020-05-03T15:32:28Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1c4ae390bbff57cdd25e985cd372d68f8296f88", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/c1c4ae390bbff57cdd25e985cd372d68f8296f88", "committedDate": "2020-05-03T15:42:42Z", "message": "rollback code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjMxNTQx", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404631541", "createdAt": "2020-05-03T15:49:03Z", "commit": {"oid": "c1c4ae390bbff57cdd25e985cd372d68f8296f88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNTo0OTowNFrOGPtJ_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QxNTo0OTowNFrOGPtJ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTEyMTY2Mg==", "bodyText": "unnecessary", "url": "https://github.com/seata/seata/pull/2412#discussion_r419121662", "createdAt": "2020-05-03T15:49:04Z", "author": {"login": "zjinlei"}, "path": "server/src/main/java/io/seata/server/UUIDGenerator.java", "diffHunk": "@@ -32,89 +24,23 @@\n  */\n public class UUIDGenerator {\n \n-    private static final AtomicLong UUID = new AtomicLong(1000);\n-    private static int serverNodeId = 1;\n-    private static final long UUID_INTERNAL = 2000000000;\n-    private static long initUUID = 0;\n+    private static IdWorker idWorker;\n \n     /**\n      * Generate uuid long.\n      *\n      * @return the long\n      */\n     public static long generateUUID() {\n-        long id = UUID.incrementAndGet();\n-        if (id >= getMaxUUID()) {\n-            synchronized (UUID) {\n-                if (UUID.get() >= id) {\n-                    id -= UUID_INTERNAL;\n-                    UUID.set(id);\n-                }\n-            }\n-        }\n-        return id;\n-    }\n-\n-    /**\n-     * Gets current uuid.\n-     *\n-     * @return the current uuid\n-     */\n-    public static long getCurrentUUID() {\n-        return UUID.get();\n-    }\n-\n-    /**\n-     * Sets uuid.\n-     *\n-     * @param expect the expect\n-     * @param update the update\n-     * @return the uuid\n-     */\n-    public static boolean setUUID(long expect, long update) {\n-        return UUID.compareAndSet(expect, update);\n-\n+        return idWorker.nextId();\n     }\n-\n     /**\n-     * Gets max uuid.\n+     * IdWorker Instantiate by service node\n      *\n-     * @return the max uuid\n      */\n-    public static long getMaxUUID() {\n-        return UUID_INTERNAL * (serverNodeId + 1);\n+    public static void init(Long serverNode) {\n+        IdWorker.init(serverNode);\n+        idWorker = IdWorker.getInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1c4ae390bbff57cdd25e985cd372d68f8296f88"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa14f59cb769e5579c775655270fd4d651b2806b", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/fa14f59cb769e5579c775655270fd4d651b2806b", "committedDate": "2020-05-03T15:50:38Z", "message": "optimize code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "712adcd4a212e301be9a405b7558ed0c8bdb3705", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/712adcd4a212e301be9a405b7558ed0c8bdb3705", "committedDate": "2020-05-03T15:55:01Z", "message": "rollback code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32751a1fbf4dec3a1937efe01d4633140504c27f", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/32751a1fbf4dec3a1937efe01d4633140504c27f", "committedDate": "2020-05-03T15:57:23Z", "message": "rollback code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a68bf0cf61104e0629dec00d8f1ecc51a7af368", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/8a68bf0cf61104e0629dec00d8f1ecc51a7af368", "committedDate": "2020-05-03T16:12:27Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjM0NzYz", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404634763", "createdAt": "2020-05-03T16:24:14Z", "commit": {"oid": "8a68bf0cf61104e0629dec00d8f1ecc51a7af368"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/2ab22642d4094605fe7b8583ceaaf212cf34eec3", "committedDate": "2020-05-03T16:36:31Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjgzNjk5", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404683699", "createdAt": "2020-05-04T02:04:18Z", "commit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjowNDoxOVrOGPxVwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjoyMToxN1rOGPxdaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MDIwOA==", "bodyText": "Why 1L instead of random\uff1f", "url": "https://github.com/seata/seata/pull/2412#discussion_r419190208", "createdAt": "2020-05-04T02:04:19Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);\n+                }\n+            } else {\n+                sequence = 0L;\n+            }\n+            lastTimestamp = timestamp;\n+        }\n+        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;\n+    }\n+\n+    /**\n+     * Block until the next millisecond until a new timestamp is obtained\n+     *\n+     * @param lastTimestamp\n+     *            Time of last ID generation\n+     * @return Current timestamp\n+     */\n+    protected long tilNextMillis(long lastTimestamp) {\n+        long timestamp = timeGen();\n+        while (timestamp <= lastTimestamp) {\n+            timestamp = timeGen();\n+        }\n+        return timestamp;\n+    }\n+\n+    /**\n+     * Returns the current time in milliseconds\n+     *\n+     * @return Current time (ms)\n+     */\n+    protected long timeGen() {\n+        return System.currentTimeMillis();\n+    }\n+\n+    public static IdWorker getInstance() {\n+        if (idWorker == null) {\n+            synchronized (IdWorker.class) {\n+                if (idWorker == null) {\n+                    init(1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5MjE2OQ==", "bodyText": "need some output shows that the sequence is not enough to use?", "url": "https://github.com/seata/seata/pull/2412#discussion_r419192169", "createdAt": "2020-05-04T02:21:17Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0Njg3OTMx", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404687931", "createdAt": "2020-05-04T02:35:17Z", "commit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjozNToxOFrOGPxk8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQwMjozNToxOFrOGPxk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTE5NDA5OA==", "bodyText": "How do you ensure order when timestamp-twepoch is greater than 2^22?", "url": "https://github.com/seata/seata/pull/2412#discussion_r419194098", "createdAt": "2020-05-04T02:35:18Z", "author": {"login": "slievrly"}, "path": "core/src/main/java/io/seata/core/util/IdWorker.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.core.util;\n+\n+/**\n+ * @author funkye\n+ */\n+public class IdWorker {\n+\n+    private volatile static IdWorker idWorker = null;\n+\n+    /**\n+     * Start time cut (2020-05-03)\n+     */\n+    private final long twepoch = 1588435200000L;\n+\n+    /**\n+     * The number of bits occupied by the machine id\n+     */\n+    private final long workerIdBits = 10L;\n+\n+    /**\n+     * Maximum supported machine id, the result is 1023 (this shift algorithm can quickly calculate the largest decimal\n+     * number that can be represented by a few binary numbers)\n+     */\n+    private final long maxWorkerId = -1L ^ (-1L << workerIdBits);\n+\n+    /**\n+     * The number of bits the sequence occupies in id\n+     */\n+    private final long sequenceBits = 12L;\n+\n+    /**\n+     * Machine ID left 12 digits\n+     */\n+    private final long workerIdShift = sequenceBits;\n+\n+    /**\n+     * Time truncated to the left by 22 bits (10 + 12)\n+     */\n+    private final long timestampLeftShift = sequenceBits + workerIdBits;\n+\n+    /**\n+     * Generate sequence mask\n+     */\n+    private final long sequenceMask = -1L ^ (-1L << sequenceBits);\n+\n+    /**\n+     * Machine ID (0 ~ 1023)\n+     */\n+    private long workerId;\n+\n+    /**\n+     * Sequence in milliseconds (0 ~ 4095)\n+     */\n+    private long sequence = 0L;\n+\n+    /**\n+     * Time of last ID generation\n+     */\n+    private long lastTimestamp = -1L;\n+\n+    /**\n+     * Constructor\n+     *\n+     * @param workerId\n+     *            Job ID (0 ~ 1023)\n+     */\n+    public IdWorker(long workerId) {\n+        if (workerId > maxWorkerId || workerId < 0) {\n+            throw new IllegalArgumentException(\n+                String.format(\"worker Id can't be greater than %d or less than 0\", maxWorkerId));\n+        }\n+        this.workerId = workerId;\n+    }\n+\n+    /**\n+     * Get the next ID (the method is thread-safe)\n+     *\n+     * @return SnowflakeId\n+     */\n+    public long nextId() {\n+        long timestamp = timeGen();\n+\n+        if (timestamp < lastTimestamp) {\n+            throw new RuntimeException(String.format(\n+                \"clock moved backwards.  Refusing to generate id for %d milliseconds\", lastTimestamp - timestamp));\n+        }\n+\n+        synchronized (this) {\n+            if (lastTimestamp == timestamp) {\n+                sequence = (sequence + 1) & sequenceMask;\n+                if (sequence == 0) {\n+                    timestamp = tilNextMillis(lastTimestamp);\n+                }\n+            } else {\n+                sequence = 0L;\n+            }\n+            lastTimestamp = timestamp;\n+        }\n+        return ((timestamp - twepoch) << timestampLeftShift) | (workerId << workerIdShift) | sequence;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab22642d4094605fe7b8583ceaaf212cf34eec3"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b84650c5b52de604033465d5fc683bc154396c79", "author": {"user": {"login": "a364176773", "name": "FUNKYE"}}, "url": "https://github.com/seata/seata/commit/b84650c5b52de604033465d5fc683bc154396c79", "committedDate": "2020-05-04T03:08:22Z", "message": "optimize code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjkzNTY1", "url": "https://github.com/seata/seata/pull/2412#pullrequestreview-404693565", "createdAt": "2020-05-04T03:17:23Z", "commit": {"oid": "b84650c5b52de604033465d5fc683bc154396c79"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4097, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}