{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDQwNjQ5", "number": 2616, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTowODowMVrOEF2beA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToxNTo0OVrOEF2nHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTcwMTA0OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/tcc/TccAnnotationProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOTowODowMVrOGkST9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNDo1NzozNlrOGqU7iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwMTk0MQ==", "bodyText": "if necessary? FieldFilter check the filed contains annotation.", "url": "https://github.com/seata/seata/pull/2616#discussion_r440701941", "createdAt": "2020-06-16T09:08:01Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/tcc/TccAnnotationProcessor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.tcc;\n+\n+import io.seata.rm.tcc.api.TwoPhaseBusinessAction;\n+import io.seata.rm.tcc.remoting.RemotingDesc;\n+import io.seata.spring.util.TCCBeanParserUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.util.ReflectionUtils;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * An annotation adapter for TCC\n+ *\n+ * @author ppf\n+ */\n+public class TccAnnotationProcessor implements BeanPostProcessor {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TccAnnotationProcessor.class);\n+\n+    private static final List<Class<? extends Annotation>> ANNOTATIONS = new ArrayList<>(4);\n+    private static final Set<String> PROXIED_SET = new HashSet<>();\n+\n+    static {\n+        ANNOTATIONS.add(loadAnnotation(\"org.apache.dubbo.config.annotation.Reference\"));\n+        ANNOTATIONS.add(loadAnnotation(\"com.alipay.sofa.runtime.api.annotation.SofaReference\"));\n+    }\n+\n+    private static Class<? extends Annotation> loadAnnotation(String annotation) {\n+        try {\n+            return (Class<? extends Annotation>) Class.forName(annotation);\n+        } catch (ClassNotFoundException e) {\n+            return null;\n+        }\n+    }\n+\n+\n+    /**\n+     * Process annotation\n+     *\n+     * @param bean\n+     * @param beanName\n+     * @param annotation\n+     */\n+    protected void process(Object bean, String beanName, Class<? extends Annotation> annotation) {\n+        if (Objects.isNull(annotation) || PROXIED_SET.contains(beanName)) {\n+            return;\n+        }\n+\n+        ReflectionUtils.doWithFields(bean.getClass(), field -> {\n+            Annotation reference = field.getAnnotation(annotation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75e8dd4a4941b08e8d3d89135e0e662d220779f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5MTY0Mw==", "bodyText": "The code impossible to reuse.", "url": "https://github.com/seata/seata/pull/2616#discussion_r446491643", "createdAt": "2020-06-27T06:22:33Z", "author": {"login": "q294881866"}, "path": "spring/src/main/java/io/seata/spring/tcc/TccAnnotationProcessor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.tcc;\n+\n+import io.seata.rm.tcc.api.TwoPhaseBusinessAction;\n+import io.seata.rm.tcc.remoting.RemotingDesc;\n+import io.seata.spring.util.TCCBeanParserUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.util.ReflectionUtils;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * An annotation adapter for TCC\n+ *\n+ * @author ppf\n+ */\n+public class TccAnnotationProcessor implements BeanPostProcessor {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TccAnnotationProcessor.class);\n+\n+    private static final List<Class<? extends Annotation>> ANNOTATIONS = new ArrayList<>(4);\n+    private static final Set<String> PROXIED_SET = new HashSet<>();\n+\n+    static {\n+        ANNOTATIONS.add(loadAnnotation(\"org.apache.dubbo.config.annotation.Reference\"));\n+        ANNOTATIONS.add(loadAnnotation(\"com.alipay.sofa.runtime.api.annotation.SofaReference\"));\n+    }\n+\n+    private static Class<? extends Annotation> loadAnnotation(String annotation) {\n+        try {\n+            return (Class<? extends Annotation>) Class.forName(annotation);\n+        } catch (ClassNotFoundException e) {\n+            return null;\n+        }\n+    }\n+\n+\n+    /**\n+     * Process annotation\n+     *\n+     * @param bean\n+     * @param beanName\n+     * @param annotation\n+     */\n+    protected void process(Object bean, String beanName, Class<? extends Annotation> annotation) {\n+        if (Objects.isNull(annotation) || PROXIED_SET.contains(beanName)) {\n+            return;\n+        }\n+\n+        ReflectionUtils.doWithFields(bean.getClass(), field -> {\n+            Annotation reference = field.getAnnotation(annotation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwMTk0MQ=="}, "originalCommit": {"oid": "a75e8dd4a4941b08e8d3d89135e0e662d220779f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzAzNjI5Ng==", "bodyText": "What I mean is that reference can never null\uff0c field.isAnnotationPresent(annotation)", "url": "https://github.com/seata/seata/pull/2616#discussion_r447036296", "createdAt": "2020-06-29T14:57:36Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/tcc/TccAnnotationProcessor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.tcc;\n+\n+import io.seata.rm.tcc.api.TwoPhaseBusinessAction;\n+import io.seata.rm.tcc.remoting.RemotingDesc;\n+import io.seata.spring.util.TCCBeanParserUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.util.ReflectionUtils;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * An annotation adapter for TCC\n+ *\n+ * @author ppf\n+ */\n+public class TccAnnotationProcessor implements BeanPostProcessor {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TccAnnotationProcessor.class);\n+\n+    private static final List<Class<? extends Annotation>> ANNOTATIONS = new ArrayList<>(4);\n+    private static final Set<String> PROXIED_SET = new HashSet<>();\n+\n+    static {\n+        ANNOTATIONS.add(loadAnnotation(\"org.apache.dubbo.config.annotation.Reference\"));\n+        ANNOTATIONS.add(loadAnnotation(\"com.alipay.sofa.runtime.api.annotation.SofaReference\"));\n+    }\n+\n+    private static Class<? extends Annotation> loadAnnotation(String annotation) {\n+        try {\n+            return (Class<? extends Annotation>) Class.forName(annotation);\n+        } catch (ClassNotFoundException e) {\n+            return null;\n+        }\n+    }\n+\n+\n+    /**\n+     * Process annotation\n+     *\n+     * @param bean\n+     * @param beanName\n+     * @param annotation\n+     */\n+    protected void process(Object bean, String beanName, Class<? extends Annotation> annotation) {\n+        if (Objects.isNull(annotation) || PROXIED_SET.contains(beanName)) {\n+            return;\n+        }\n+\n+        ReflectionUtils.doWithFields(bean.getClass(), field -> {\n+            Annotation reference = field.getAnnotation(annotation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwMTk0MQ=="}, "originalCommit": {"oid": "a75e8dd4a4941b08e8d3d89135e0e662d220779f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NTczMDg2OnYy", "diffSide": "RIGHT", "path": "spring/src/main/java/io/seata/spring/tcc/TccAnnotationProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwOToxNTo0OVrOGkSnBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwNjowNDoxNFrOGpzmKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgyMg==", "bodyText": "why not getInterface()?", "url": "https://github.com/seata/seata/pull/2616#discussion_r440706822", "createdAt": "2020-06-16T09:15:49Z", "author": {"login": "slievrly"}, "path": "spring/src/main/java/io/seata/spring/tcc/TccAnnotationProcessor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.tcc;\n+\n+import io.seata.rm.tcc.api.TwoPhaseBusinessAction;\n+import io.seata.rm.tcc.remoting.RemotingDesc;\n+import io.seata.spring.util.TCCBeanParserUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.util.ReflectionUtils;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * An annotation adapter for TCC\n+ *\n+ * @author ppf\n+ */\n+public class TccAnnotationProcessor implements BeanPostProcessor {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TccAnnotationProcessor.class);\n+\n+    private static final List<Class<? extends Annotation>> ANNOTATIONS = new ArrayList<>(4);\n+    private static final Set<String> PROXIED_SET = new HashSet<>();\n+\n+    static {\n+        ANNOTATIONS.add(loadAnnotation(\"org.apache.dubbo.config.annotation.Reference\"));\n+        ANNOTATIONS.add(loadAnnotation(\"com.alipay.sofa.runtime.api.annotation.SofaReference\"));\n+    }\n+\n+    private static Class<? extends Annotation> loadAnnotation(String annotation) {\n+        try {\n+            return (Class<? extends Annotation>) Class.forName(annotation);\n+        } catch (ClassNotFoundException e) {\n+            return null;\n+        }\n+    }\n+\n+\n+    /**\n+     * Process annotation\n+     *\n+     * @param bean\n+     * @param beanName\n+     * @param annotation\n+     */\n+    protected void process(Object bean, String beanName, Class<? extends Annotation> annotation) {\n+        if (Objects.isNull(annotation) || PROXIED_SET.contains(beanName)) {\n+            return;\n+        }\n+\n+        ReflectionUtils.doWithFields(bean.getClass(), field -> {\n+            Annotation reference = field.getAnnotation(annotation);\n+            if (reference == null) {\n+                return;\n+            }\n+\n+            addTccAdvise(bean, beanName, field, field.getType());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75e8dd4a4941b08e8d3d89135e0e662d220779f"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ5MDE1NQ==", "bodyText": "Previously, it was implemented with dubbo and sofa interface, but there were many repetitions. In fact, it's the only one that's different. There's no need to use an interface\n`static {\n    ANNOTATIONS.add(loadAnnotation(\"org.apache.dubbo.config.annotation.Reference\"));\n    ANNOTATIONS.add(loadAnnotation(\"com.alipay.sofa.runtime.api.annotation.SofaReference\"));\n    ANNOTATIONS.add(loadAnnotation( ...\n}`", "url": "https://github.com/seata/seata/pull/2616#discussion_r446490155", "createdAt": "2020-06-27T06:04:14Z", "author": {"login": "q294881866"}, "path": "spring/src/main/java/io/seata/spring/tcc/TccAnnotationProcessor.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ *  Copyright 1999-2019 Seata.io Group.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package io.seata.spring.tcc;\n+\n+import io.seata.rm.tcc.api.TwoPhaseBusinessAction;\n+import io.seata.rm.tcc.remoting.RemotingDesc;\n+import io.seata.spring.util.TCCBeanParserUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanPostProcessor;\n+import org.springframework.util.ReflectionUtils;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * An annotation adapter for TCC\n+ *\n+ * @author ppf\n+ */\n+public class TccAnnotationProcessor implements BeanPostProcessor {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TccAnnotationProcessor.class);\n+\n+    private static final List<Class<? extends Annotation>> ANNOTATIONS = new ArrayList<>(4);\n+    private static final Set<String> PROXIED_SET = new HashSet<>();\n+\n+    static {\n+        ANNOTATIONS.add(loadAnnotation(\"org.apache.dubbo.config.annotation.Reference\"));\n+        ANNOTATIONS.add(loadAnnotation(\"com.alipay.sofa.runtime.api.annotation.SofaReference\"));\n+    }\n+\n+    private static Class<? extends Annotation> loadAnnotation(String annotation) {\n+        try {\n+            return (Class<? extends Annotation>) Class.forName(annotation);\n+        } catch (ClassNotFoundException e) {\n+            return null;\n+        }\n+    }\n+\n+\n+    /**\n+     * Process annotation\n+     *\n+     * @param bean\n+     * @param beanName\n+     * @param annotation\n+     */\n+    protected void process(Object bean, String beanName, Class<? extends Annotation> annotation) {\n+        if (Objects.isNull(annotation) || PROXIED_SET.contains(beanName)) {\n+            return;\n+        }\n+\n+        ReflectionUtils.doWithFields(bean.getClass(), field -> {\n+            Annotation reference = field.getAnnotation(annotation);\n+            if (reference == null) {\n+                return;\n+            }\n+\n+            addTccAdvise(bean, beanName, field, field.getType());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDcwNjgyMg=="}, "originalCommit": {"oid": "a75e8dd4a4941b08e8d3d89135e0e662d220779f"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1560, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}